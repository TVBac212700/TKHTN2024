
IC_OC_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036c0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080037cc  080037cc  000047cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037f8  080037f8  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  080037f8  080037f8  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037f8  080037f8  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037f8  080037f8  000047f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080037fc  080037fc  000047fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003800  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  2000000c  0800380c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  0800380c  00005158  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c04a  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b6b  00000000  00000000  0001107f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  00012bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ac5  00000000  00000000  00013998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f24  00000000  00000000  0001445d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f4b4  00000000  00000000  0002b381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088564  00000000  00000000  0003a835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c2d99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a64  00000000  00000000  000c2ddc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  000c6840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080037b4 	.word	0x080037b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080037b4 	.word	0x080037b4

0800014c <Print>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Print(uint8_t Val)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	if(Val == 0)
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	2b00      	cmp	r3, #0
 800015a:	d123      	bne.n	80001a4 <Print+0x58>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800015c:	2201      	movs	r2, #1
 800015e:	2102      	movs	r1, #2
 8000160:	48c1      	ldr	r0, [pc, #772]	@ (8000468 <Print+0x31c>)
 8000162:	f001 f958 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000166:	2201      	movs	r2, #1
 8000168:	2104      	movs	r1, #4
 800016a:	48bf      	ldr	r0, [pc, #764]	@ (8000468 <Print+0x31c>)
 800016c:	f001 f953 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000170:	2201      	movs	r2, #1
 8000172:	2108      	movs	r1, #8
 8000174:	48bc      	ldr	r0, [pc, #752]	@ (8000468 <Print+0x31c>)
 8000176:	f001 f94e 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800017a:	2201      	movs	r2, #1
 800017c:	2110      	movs	r1, #16
 800017e:	48ba      	ldr	r0, [pc, #744]	@ (8000468 <Print+0x31c>)
 8000180:	f001 f949 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000184:	2201      	movs	r2, #1
 8000186:	2120      	movs	r1, #32
 8000188:	48b7      	ldr	r0, [pc, #732]	@ (8000468 <Print+0x31c>)
 800018a:	f001 f944 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800018e:	2201      	movs	r2, #1
 8000190:	2140      	movs	r1, #64	@ 0x40
 8000192:	48b5      	ldr	r0, [pc, #724]	@ (8000468 <Print+0x31c>)
 8000194:	f001 f93f 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000198:	2200      	movs	r2, #0
 800019a:	2180      	movs	r1, #128	@ 0x80
 800019c:	48b2      	ldr	r0, [pc, #712]	@ (8000468 <Print+0x31c>)
 800019e:	f001 f93a 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
  }
}
 80001a2:	e15d      	b.n	8000460 <Print+0x314>
  else if(Val == 1)
 80001a4:	79fb      	ldrb	r3, [r7, #7]
 80001a6:	2b01      	cmp	r3, #1
 80001a8:	d123      	bne.n	80001f2 <Print+0xa6>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80001aa:	2200      	movs	r2, #0
 80001ac:	2102      	movs	r1, #2
 80001ae:	48ae      	ldr	r0, [pc, #696]	@ (8000468 <Print+0x31c>)
 80001b0:	f001 f931 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80001b4:	2201      	movs	r2, #1
 80001b6:	2104      	movs	r1, #4
 80001b8:	48ab      	ldr	r0, [pc, #684]	@ (8000468 <Print+0x31c>)
 80001ba:	f001 f92c 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 80001be:	2201      	movs	r2, #1
 80001c0:	2108      	movs	r1, #8
 80001c2:	48a9      	ldr	r0, [pc, #676]	@ (8000468 <Print+0x31c>)
 80001c4:	f001 f927 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80001c8:	2200      	movs	r2, #0
 80001ca:	2110      	movs	r1, #16
 80001cc:	48a6      	ldr	r0, [pc, #664]	@ (8000468 <Print+0x31c>)
 80001ce:	f001 f922 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80001d2:	2200      	movs	r2, #0
 80001d4:	2120      	movs	r1, #32
 80001d6:	48a4      	ldr	r0, [pc, #656]	@ (8000468 <Print+0x31c>)
 80001d8:	f001 f91d 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80001dc:	2200      	movs	r2, #0
 80001de:	2140      	movs	r1, #64	@ 0x40
 80001e0:	48a1      	ldr	r0, [pc, #644]	@ (8000468 <Print+0x31c>)
 80001e2:	f001 f918 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80001e6:	2200      	movs	r2, #0
 80001e8:	2180      	movs	r1, #128	@ 0x80
 80001ea:	489f      	ldr	r0, [pc, #636]	@ (8000468 <Print+0x31c>)
 80001ec:	f001 f913 	bl	8001416 <HAL_GPIO_WritePin>
}
 80001f0:	e136      	b.n	8000460 <Print+0x314>
  else if(Val == 2)
 80001f2:	79fb      	ldrb	r3, [r7, #7]
 80001f4:	2b02      	cmp	r3, #2
 80001f6:	d123      	bne.n	8000240 <Print+0xf4>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80001f8:	2201      	movs	r2, #1
 80001fa:	2102      	movs	r1, #2
 80001fc:	489a      	ldr	r0, [pc, #616]	@ (8000468 <Print+0x31c>)
 80001fe:	f001 f90a 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000202:	2201      	movs	r2, #1
 8000204:	2104      	movs	r1, #4
 8000206:	4898      	ldr	r0, [pc, #608]	@ (8000468 <Print+0x31c>)
 8000208:	f001 f905 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800020c:	2200      	movs	r2, #0
 800020e:	2108      	movs	r1, #8
 8000210:	4895      	ldr	r0, [pc, #596]	@ (8000468 <Print+0x31c>)
 8000212:	f001 f900 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000216:	2201      	movs	r2, #1
 8000218:	2110      	movs	r1, #16
 800021a:	4893      	ldr	r0, [pc, #588]	@ (8000468 <Print+0x31c>)
 800021c:	f001 f8fb 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000220:	2201      	movs	r2, #1
 8000222:	2120      	movs	r1, #32
 8000224:	4890      	ldr	r0, [pc, #576]	@ (8000468 <Print+0x31c>)
 8000226:	f001 f8f6 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800022a:	2200      	movs	r2, #0
 800022c:	2140      	movs	r1, #64	@ 0x40
 800022e:	488e      	ldr	r0, [pc, #568]	@ (8000468 <Print+0x31c>)
 8000230:	f001 f8f1 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000234:	2201      	movs	r2, #1
 8000236:	2180      	movs	r1, #128	@ 0x80
 8000238:	488b      	ldr	r0, [pc, #556]	@ (8000468 <Print+0x31c>)
 800023a:	f001 f8ec 	bl	8001416 <HAL_GPIO_WritePin>
}
 800023e:	e10f      	b.n	8000460 <Print+0x314>
  else if(Val == 3)
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	2b03      	cmp	r3, #3
 8000244:	d123      	bne.n	800028e <Print+0x142>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000246:	2201      	movs	r2, #1
 8000248:	2102      	movs	r1, #2
 800024a:	4887      	ldr	r0, [pc, #540]	@ (8000468 <Print+0x31c>)
 800024c:	f001 f8e3 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000250:	2201      	movs	r2, #1
 8000252:	2104      	movs	r1, #4
 8000254:	4884      	ldr	r0, [pc, #528]	@ (8000468 <Print+0x31c>)
 8000256:	f001 f8de 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800025a:	2201      	movs	r2, #1
 800025c:	2108      	movs	r1, #8
 800025e:	4882      	ldr	r0, [pc, #520]	@ (8000468 <Print+0x31c>)
 8000260:	f001 f8d9 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000264:	2201      	movs	r2, #1
 8000266:	2110      	movs	r1, #16
 8000268:	487f      	ldr	r0, [pc, #508]	@ (8000468 <Print+0x31c>)
 800026a:	f001 f8d4 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800026e:	2200      	movs	r2, #0
 8000270:	2120      	movs	r1, #32
 8000272:	487d      	ldr	r0, [pc, #500]	@ (8000468 <Print+0x31c>)
 8000274:	f001 f8cf 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000278:	2200      	movs	r2, #0
 800027a:	2140      	movs	r1, #64	@ 0x40
 800027c:	487a      	ldr	r0, [pc, #488]	@ (8000468 <Print+0x31c>)
 800027e:	f001 f8ca 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000282:	2201      	movs	r2, #1
 8000284:	2180      	movs	r1, #128	@ 0x80
 8000286:	4878      	ldr	r0, [pc, #480]	@ (8000468 <Print+0x31c>)
 8000288:	f001 f8c5 	bl	8001416 <HAL_GPIO_WritePin>
}
 800028c:	e0e8      	b.n	8000460 <Print+0x314>
  else if(Val == 4)
 800028e:	79fb      	ldrb	r3, [r7, #7]
 8000290:	2b04      	cmp	r3, #4
 8000292:	d123      	bne.n	80002dc <Print+0x190>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000294:	2200      	movs	r2, #0
 8000296:	2102      	movs	r1, #2
 8000298:	4873      	ldr	r0, [pc, #460]	@ (8000468 <Print+0x31c>)
 800029a:	f001 f8bc 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800029e:	2201      	movs	r2, #1
 80002a0:	2104      	movs	r1, #4
 80002a2:	4871      	ldr	r0, [pc, #452]	@ (8000468 <Print+0x31c>)
 80002a4:	f001 f8b7 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 80002a8:	2201      	movs	r2, #1
 80002aa:	2108      	movs	r1, #8
 80002ac:	486e      	ldr	r0, [pc, #440]	@ (8000468 <Print+0x31c>)
 80002ae:	f001 f8b2 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80002b2:	2200      	movs	r2, #0
 80002b4:	2110      	movs	r1, #16
 80002b6:	486c      	ldr	r0, [pc, #432]	@ (8000468 <Print+0x31c>)
 80002b8:	f001 f8ad 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80002bc:	2200      	movs	r2, #0
 80002be:	2120      	movs	r1, #32
 80002c0:	4869      	ldr	r0, [pc, #420]	@ (8000468 <Print+0x31c>)
 80002c2:	f001 f8a8 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80002c6:	2201      	movs	r2, #1
 80002c8:	2140      	movs	r1, #64	@ 0x40
 80002ca:	4867      	ldr	r0, [pc, #412]	@ (8000468 <Print+0x31c>)
 80002cc:	f001 f8a3 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80002d0:	2201      	movs	r2, #1
 80002d2:	2180      	movs	r1, #128	@ 0x80
 80002d4:	4864      	ldr	r0, [pc, #400]	@ (8000468 <Print+0x31c>)
 80002d6:	f001 f89e 	bl	8001416 <HAL_GPIO_WritePin>
}
 80002da:	e0c1      	b.n	8000460 <Print+0x314>
  else if(Val == 5)
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	2b05      	cmp	r3, #5
 80002e0:	d123      	bne.n	800032a <Print+0x1de>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80002e2:	2201      	movs	r2, #1
 80002e4:	2102      	movs	r1, #2
 80002e6:	4860      	ldr	r0, [pc, #384]	@ (8000468 <Print+0x31c>)
 80002e8:	f001 f895 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80002ec:	2200      	movs	r2, #0
 80002ee:	2104      	movs	r1, #4
 80002f0:	485d      	ldr	r0, [pc, #372]	@ (8000468 <Print+0x31c>)
 80002f2:	f001 f890 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 80002f6:	2201      	movs	r2, #1
 80002f8:	2108      	movs	r1, #8
 80002fa:	485b      	ldr	r0, [pc, #364]	@ (8000468 <Print+0x31c>)
 80002fc:	f001 f88b 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000300:	2201      	movs	r2, #1
 8000302:	2110      	movs	r1, #16
 8000304:	4858      	ldr	r0, [pc, #352]	@ (8000468 <Print+0x31c>)
 8000306:	f001 f886 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800030a:	2200      	movs	r2, #0
 800030c:	2120      	movs	r1, #32
 800030e:	4856      	ldr	r0, [pc, #344]	@ (8000468 <Print+0x31c>)
 8000310:	f001 f881 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000314:	2201      	movs	r2, #1
 8000316:	2140      	movs	r1, #64	@ 0x40
 8000318:	4853      	ldr	r0, [pc, #332]	@ (8000468 <Print+0x31c>)
 800031a:	f001 f87c 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800031e:	2201      	movs	r2, #1
 8000320:	2180      	movs	r1, #128	@ 0x80
 8000322:	4851      	ldr	r0, [pc, #324]	@ (8000468 <Print+0x31c>)
 8000324:	f001 f877 	bl	8001416 <HAL_GPIO_WritePin>
}
 8000328:	e09a      	b.n	8000460 <Print+0x314>
  else if(Val == 6)
 800032a:	79fb      	ldrb	r3, [r7, #7]
 800032c:	2b06      	cmp	r3, #6
 800032e:	d123      	bne.n	8000378 <Print+0x22c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000330:	2201      	movs	r2, #1
 8000332:	2102      	movs	r1, #2
 8000334:	484c      	ldr	r0, [pc, #304]	@ (8000468 <Print+0x31c>)
 8000336:	f001 f86e 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 800033a:	2200      	movs	r2, #0
 800033c:	2104      	movs	r1, #4
 800033e:	484a      	ldr	r0, [pc, #296]	@ (8000468 <Print+0x31c>)
 8000340:	f001 f869 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000344:	2201      	movs	r2, #1
 8000346:	2108      	movs	r1, #8
 8000348:	4847      	ldr	r0, [pc, #284]	@ (8000468 <Print+0x31c>)
 800034a:	f001 f864 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800034e:	2201      	movs	r2, #1
 8000350:	2110      	movs	r1, #16
 8000352:	4845      	ldr	r0, [pc, #276]	@ (8000468 <Print+0x31c>)
 8000354:	f001 f85f 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000358:	2201      	movs	r2, #1
 800035a:	2120      	movs	r1, #32
 800035c:	4842      	ldr	r0, [pc, #264]	@ (8000468 <Print+0x31c>)
 800035e:	f001 f85a 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000362:	2201      	movs	r2, #1
 8000364:	2140      	movs	r1, #64	@ 0x40
 8000366:	4840      	ldr	r0, [pc, #256]	@ (8000468 <Print+0x31c>)
 8000368:	f001 f855 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800036c:	2201      	movs	r2, #1
 800036e:	2180      	movs	r1, #128	@ 0x80
 8000370:	483d      	ldr	r0, [pc, #244]	@ (8000468 <Print+0x31c>)
 8000372:	f001 f850 	bl	8001416 <HAL_GPIO_WritePin>
}
 8000376:	e073      	b.n	8000460 <Print+0x314>
  else if(Val == 7)
 8000378:	79fb      	ldrb	r3, [r7, #7]
 800037a:	2b07      	cmp	r3, #7
 800037c:	d123      	bne.n	80003c6 <Print+0x27a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800037e:	2201      	movs	r2, #1
 8000380:	2102      	movs	r1, #2
 8000382:	4839      	ldr	r0, [pc, #228]	@ (8000468 <Print+0x31c>)
 8000384:	f001 f847 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000388:	2201      	movs	r2, #1
 800038a:	2104      	movs	r1, #4
 800038c:	4836      	ldr	r0, [pc, #216]	@ (8000468 <Print+0x31c>)
 800038e:	f001 f842 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000392:	2201      	movs	r2, #1
 8000394:	2108      	movs	r1, #8
 8000396:	4834      	ldr	r0, [pc, #208]	@ (8000468 <Print+0x31c>)
 8000398:	f001 f83d 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800039c:	2200      	movs	r2, #0
 800039e:	2110      	movs	r1, #16
 80003a0:	4831      	ldr	r0, [pc, #196]	@ (8000468 <Print+0x31c>)
 80003a2:	f001 f838 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80003a6:	2200      	movs	r2, #0
 80003a8:	2120      	movs	r1, #32
 80003aa:	482f      	ldr	r0, [pc, #188]	@ (8000468 <Print+0x31c>)
 80003ac:	f001 f833 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80003b0:	2200      	movs	r2, #0
 80003b2:	2140      	movs	r1, #64	@ 0x40
 80003b4:	482c      	ldr	r0, [pc, #176]	@ (8000468 <Print+0x31c>)
 80003b6:	f001 f82e 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80003ba:	2200      	movs	r2, #0
 80003bc:	2180      	movs	r1, #128	@ 0x80
 80003be:	482a      	ldr	r0, [pc, #168]	@ (8000468 <Print+0x31c>)
 80003c0:	f001 f829 	bl	8001416 <HAL_GPIO_WritePin>
}
 80003c4:	e04c      	b.n	8000460 <Print+0x314>
  else if(Val == 8)
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	2b08      	cmp	r3, #8
 80003ca:	d123      	bne.n	8000414 <Print+0x2c8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80003cc:	2201      	movs	r2, #1
 80003ce:	2102      	movs	r1, #2
 80003d0:	4825      	ldr	r0, [pc, #148]	@ (8000468 <Print+0x31c>)
 80003d2:	f001 f820 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80003d6:	2201      	movs	r2, #1
 80003d8:	2104      	movs	r1, #4
 80003da:	4823      	ldr	r0, [pc, #140]	@ (8000468 <Print+0x31c>)
 80003dc:	f001 f81b 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 80003e0:	2201      	movs	r2, #1
 80003e2:	2108      	movs	r1, #8
 80003e4:	4820      	ldr	r0, [pc, #128]	@ (8000468 <Print+0x31c>)
 80003e6:	f001 f816 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80003ea:	2201      	movs	r2, #1
 80003ec:	2110      	movs	r1, #16
 80003ee:	481e      	ldr	r0, [pc, #120]	@ (8000468 <Print+0x31c>)
 80003f0:	f001 f811 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80003f4:	2201      	movs	r2, #1
 80003f6:	2120      	movs	r1, #32
 80003f8:	481b      	ldr	r0, [pc, #108]	@ (8000468 <Print+0x31c>)
 80003fa:	f001 f80c 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80003fe:	2201      	movs	r2, #1
 8000400:	2140      	movs	r1, #64	@ 0x40
 8000402:	4819      	ldr	r0, [pc, #100]	@ (8000468 <Print+0x31c>)
 8000404:	f001 f807 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000408:	2201      	movs	r2, #1
 800040a:	2180      	movs	r1, #128	@ 0x80
 800040c:	4816      	ldr	r0, [pc, #88]	@ (8000468 <Print+0x31c>)
 800040e:	f001 f802 	bl	8001416 <HAL_GPIO_WritePin>
}
 8000412:	e025      	b.n	8000460 <Print+0x314>
  else if(Val == 9)
 8000414:	79fb      	ldrb	r3, [r7, #7]
 8000416:	2b09      	cmp	r3, #9
 8000418:	d122      	bne.n	8000460 <Print+0x314>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800041a:	2201      	movs	r2, #1
 800041c:	2102      	movs	r1, #2
 800041e:	4812      	ldr	r0, [pc, #72]	@ (8000468 <Print+0x31c>)
 8000420:	f000 fff9 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000424:	2201      	movs	r2, #1
 8000426:	2104      	movs	r1, #4
 8000428:	480f      	ldr	r0, [pc, #60]	@ (8000468 <Print+0x31c>)
 800042a:	f000 fff4 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800042e:	2201      	movs	r2, #1
 8000430:	2108      	movs	r1, #8
 8000432:	480d      	ldr	r0, [pc, #52]	@ (8000468 <Print+0x31c>)
 8000434:	f000 ffef 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000438:	2201      	movs	r2, #1
 800043a:	2110      	movs	r1, #16
 800043c:	480a      	ldr	r0, [pc, #40]	@ (8000468 <Print+0x31c>)
 800043e:	f000 ffea 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000442:	2200      	movs	r2, #0
 8000444:	2120      	movs	r1, #32
 8000446:	4808      	ldr	r0, [pc, #32]	@ (8000468 <Print+0x31c>)
 8000448:	f000 ffe5 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800044c:	2201      	movs	r2, #1
 800044e:	2140      	movs	r1, #64	@ 0x40
 8000450:	4805      	ldr	r0, [pc, #20]	@ (8000468 <Print+0x31c>)
 8000452:	f000 ffe0 	bl	8001416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000456:	2201      	movs	r2, #1
 8000458:	2180      	movs	r1, #128	@ 0x80
 800045a:	4803      	ldr	r0, [pc, #12]	@ (8000468 <Print+0x31c>)
 800045c:	f000 ffdb 	bl	8001416 <HAL_GPIO_WritePin>
}
 8000460:	bf00      	nop
 8000462:	3708      	adds	r7, #8
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	40010800 	.word	0x40010800

0800046c <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
if(htim->Instance == TIM2)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800047c:	d12c      	bne.n	80004d8 <HAL_TIM_IC_CaptureCallback+0x6c>
{
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800047e:	2200      	movs	r2, #0
 8000480:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000484:	4816      	ldr	r0, [pc, #88]	@ (80004e0 <HAL_TIM_IC_CaptureCallback+0x74>)
 8000486:	f000 ffc6 	bl	8001416 <HAL_GPIO_WritePin>
	u16_Capturel = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 800048a:	2100      	movs	r1, #0
 800048c:	4815      	ldr	r0, [pc, #84]	@ (80004e4 <HAL_TIM_IC_CaptureCallback+0x78>)
 800048e:	f002 fb9d 	bl	8002bcc <HAL_TIM_ReadCapturedValue>
 8000492:	4603      	mov	r3, r0
 8000494:	b29a      	uxth	r2, r3
 8000496:	4b14      	ldr	r3, [pc, #80]	@ (80004e8 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8000498:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim2,0);
 800049a:	4b12      	ldr	r3, [pc, #72]	@ (80004e4 <HAL_TIM_IC_CaptureCallback+0x78>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	2200      	movs	r2, #0
 80004a0:	625a      	str	r2, [r3, #36]	@ 0x24
	if (u16_Capturel < 1000) {
 80004a2:	4b11      	ldr	r3, [pc, #68]	@ (80004e8 <HAL_TIM_IC_CaptureCallback+0x7c>)
 80004a4:	881b      	ldrh	r3, [r3, #0]
 80004a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80004aa:	d203      	bcs.n	80004b4 <HAL_TIM_IC_CaptureCallback+0x48>
	    time2 = 1;  // Hiển thị 1 thay vì 0
 80004ac:	4b0f      	ldr	r3, [pc, #60]	@ (80004ec <HAL_TIM_IC_CaptureCallback+0x80>)
 80004ae:	2201      	movs	r2, #1
 80004b0:	701a      	strb	r2, [r3, #0]
 80004b2:	e009      	b.n	80004c8 <HAL_TIM_IC_CaptureCallback+0x5c>
	} else {
	    time2 = u16_Capturel / 1000;
 80004b4:	4b0c      	ldr	r3, [pc, #48]	@ (80004e8 <HAL_TIM_IC_CaptureCallback+0x7c>)
 80004b6:	881b      	ldrh	r3, [r3, #0]
 80004b8:	4a0d      	ldr	r2, [pc, #52]	@ (80004f0 <HAL_TIM_IC_CaptureCallback+0x84>)
 80004ba:	fba2 2303 	umull	r2, r3, r2, r3
 80004be:	099b      	lsrs	r3, r3, #6
 80004c0:	b29b      	uxth	r3, r3
 80004c2:	b2da      	uxtb	r2, r3
 80004c4:	4b09      	ldr	r3, [pc, #36]	@ (80004ec <HAL_TIM_IC_CaptureCallback+0x80>)
 80004c6:	701a      	strb	r2, [r3, #0]
	};
	u16_Capturel = 0;
 80004c8:	4b07      	ldr	r3, [pc, #28]	@ (80004e8 <HAL_TIM_IC_CaptureCallback+0x7c>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	801a      	strh	r2, [r3, #0]
	Print(time2);
 80004ce:	4b07      	ldr	r3, [pc, #28]	@ (80004ec <HAL_TIM_IC_CaptureCallback+0x80>)
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	4618      	mov	r0, r3
 80004d4:	f7ff fe3a 	bl	800014c <Print>
}
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80004d8:	bf00      	nop
 80004da:	3708      	adds	r7, #8
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	40011000 	.word	0x40011000
 80004e4:	20000028 	.word	0x20000028
 80004e8:	20000150 	.word	0x20000150
 80004ec:	20000152 	.word	0x20000152
 80004f0:	10624dd3 	.word	0x10624dd3

080004f4 <HAL_TIM_OC_DelayElapsedCallback>:
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
//    if (htim->Instance == TIM3)
//    {
//    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
//    }
}
 80004fc:	bf00      	nop
 80004fe:	370c      	adds	r7, #12
 8000500:	46bd      	mov	sp, r7
 8000502:	bc80      	pop	{r7}
 8000504:	4770      	bx	lr
	...

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fc78 	bl	8000e00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f878 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f9f4 	bl	8000900 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000518:	f000 f8de 	bl	80006d8 <MX_TIM2_Init>
  MX_TIM3_Init();
 800051c:	f000 f94c 	bl	80007b8 <MX_TIM3_Init>
  MX_USART1_Init();
 8000520:	f000 f9c2 	bl	80008a8 <MX_USART1_Init>
  MX_I2C1_Init();
 8000524:	f000 f8aa 	bl	800067c <MX_I2C1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);	// Bat IC che do ngat
  //HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);	// Bat OC co ngat
  HAL_TIM_Base_Start(&htim2);
 8000528:	4832      	ldr	r0, [pc, #200]	@ (80005f4 <main+0xec>)
 800052a:	f001 fd31 	bl	8001f90 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 800052e:	4832      	ldr	r0, [pc, #200]	@ (80005f8 <main+0xf0>)
 8000530:	f001 fd2e 	bl	8001f90 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000534:	2201      	movs	r2, #1
 8000536:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800053a:	4830      	ldr	r0, [pc, #192]	@ (80005fc <main+0xf4>)
 800053c:	f000 ff6b 	bl	8001416 <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //  chỗ này test xem counter chạy ko, thì thấy vẫn chạy bt
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_SET)
 8000540:	2108      	movs	r1, #8
 8000542:	482f      	ldr	r0, [pc, #188]	@ (8000600 <main+0xf8>)
 8000544:	f000 ff50 	bl	80013e8 <HAL_GPIO_ReadPin>
 8000548:	4603      	mov	r3, r0
 800054a:	2b01      	cmp	r3, #1
 800054c:	d109      	bne.n	8000562 <main+0x5a>
	  	  {
		  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000554:	4829      	ldr	r0, [pc, #164]	@ (80005fc <main+0xf4>)
 8000556:	f000 ff5e 	bl	8001416 <HAL_GPIO_WritePin>
	  		  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);	// Bat OC co ngat
 800055a:	2100      	movs	r1, #0
 800055c:	4826      	ldr	r0, [pc, #152]	@ (80005f8 <main+0xf0>)
 800055e:	f001 fdb9 	bl	80020d4 <HAL_TIM_OC_Start>
	  	  }



	  //
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_SET)
 8000562:	2101      	movs	r1, #1
 8000564:	4826      	ldr	r0, [pc, #152]	@ (8000600 <main+0xf8>)
 8000566:	f000 ff3f 	bl	80013e8 <HAL_GPIO_ReadPin>
 800056a:	4603      	mov	r3, r0
 800056c:	2b01      	cmp	r3, #1
 800056e:	d104      	bne.n	800057a <main+0x72>
	  	  	  {
	  	  		  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);	// Bat IC co ngat
 8000570:	2100      	movs	r1, #0
 8000572:	4820      	ldr	r0, [pc, #128]	@ (80005f4 <main+0xec>)
 8000574:	f001 ff6e 	bl	8002454 <HAL_TIM_IC_Start_IT>
 8000578:	e015      	b.n	80005a6 <main+0x9e>
	  	  		//  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
	  	  	  }
	  else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET || HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET)
 800057a:	2101      	movs	r1, #1
 800057c:	4820      	ldr	r0, [pc, #128]	@ (8000600 <main+0xf8>)
 800057e:	f000 ff33 	bl	80013e8 <HAL_GPIO_ReadPin>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d006      	beq.n	8000596 <main+0x8e>
 8000588:	2108      	movs	r1, #8
 800058a:	481d      	ldr	r0, [pc, #116]	@ (8000600 <main+0xf8>)
 800058c:	f000 ff2c 	bl	80013e8 <HAL_GPIO_ReadPin>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d107      	bne.n	80005a6 <main+0x9e>
	  	  	  {
	  	  		  HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);	// ngat IC
 8000596:	2100      	movs	r1, #0
 8000598:	4816      	ldr	r0, [pc, #88]	@ (80005f4 <main+0xec>)
 800059a:	f001 fef9 	bl	8002390 <HAL_TIM_IC_Stop>
	  	  		  HAL_TIM_OC_Stop(&htim3, TIM_CHANNEL_1);	// ngat OC
 800059e:	2100      	movs	r1, #0
 80005a0:	4815      	ldr	r0, [pc, #84]	@ (80005f8 <main+0xf0>)
 80005a2:	f001 fe39 	bl	8002218 <HAL_TIM_OC_Stop>
	  	  	  }



	  	  if(__HAL_TIM_GET_COUNTER(&htim3) >= 500 )
 80005a6:	4b14      	ldr	r3, [pc, #80]	@ (80005f8 <main+0xf0>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005ac:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80005b0:	d306      	bcc.n	80005c0 <main+0xb8>
	  	    {
	  	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80005b2:	2201      	movs	r2, #1
 80005b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005b8:	4811      	ldr	r0, [pc, #68]	@ (8000600 <main+0xf8>)
 80005ba:	f000 ff2c 	bl	8001416 <HAL_GPIO_WritePin>
 80005be:	e005      	b.n	80005cc <main+0xc4>
	  	    }
	  	    else
	  	  	{
	  	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005c6:	480e      	ldr	r0, [pc, #56]	@ (8000600 <main+0xf8>)
 80005c8:	f000 ff25 	bl	8001416 <HAL_GPIO_WritePin>
	  	  	}
	  	if(__HAL_TIM_GET_COUNTER(&htim2) >= 500 )
 80005cc:	4b09      	ldr	r3, [pc, #36]	@ (80005f4 <main+0xec>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005d2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80005d6:	d306      	bcc.n	80005e6 <main+0xde>
	  		  	    {
	  		  	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005de:	4808      	ldr	r0, [pc, #32]	@ (8000600 <main+0xf8>)
 80005e0:	f000 ff19 	bl	8001416 <HAL_GPIO_WritePin>
 80005e4:	e7ac      	b.n	8000540 <main+0x38>
	  		  	    }
	  		  	    else
	  		  	  	{
	  		  	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005ec:	4804      	ldr	r0, [pc, #16]	@ (8000600 <main+0xf8>)
 80005ee:	f000 ff12 	bl	8001416 <HAL_GPIO_WritePin>
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_SET)
 80005f2:	e7a5      	b.n	8000540 <main+0x38>
 80005f4:	20000028 	.word	0x20000028
 80005f8:	20000070 	.word	0x20000070
 80005fc:	40011000 	.word	0x40011000
 8000600:	40010c00 	.word	0x40010c00

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b090      	sub	sp, #64	@ 0x40
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0318 	add.w	r3, r7, #24
 800060e:	2228      	movs	r2, #40	@ 0x28
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f003 f8a2 	bl	800375c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
 8000624:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000626:	2302      	movs	r3, #2
 8000628:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800062a:	2301      	movs	r3, #1
 800062c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062e:	2310      	movs	r3, #16
 8000630:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000632:	2300      	movs	r3, #0
 8000634:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000636:	f107 0318 	add.w	r3, r7, #24
 800063a:	4618      	mov	r0, r3
 800063c:	f001 f848 	bl	80016d0 <HAL_RCC_OscConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000646:	f000 fa07 	bl	8000a58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064a:	230f      	movs	r3, #15
 800064c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800064e:	2300      	movs	r3, #0
 8000650:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f001 fab6 	bl	8001bd4 <HAL_RCC_ClockConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800066e:	f000 f9f3 	bl	8000a58 <Error_Handler>
  }
}
 8000672:	bf00      	nop
 8000674:	3740      	adds	r7, #64	@ 0x40
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
	...

0800067c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <MX_I2C1_Init+0x50>)
 8000682:	4a13      	ldr	r2, [pc, #76]	@ (80006d0 <MX_I2C1_Init+0x54>)
 8000684:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000686:	4b11      	ldr	r3, [pc, #68]	@ (80006cc <MX_I2C1_Init+0x50>)
 8000688:	4a12      	ldr	r2, [pc, #72]	@ (80006d4 <MX_I2C1_Init+0x58>)
 800068a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <MX_I2C1_Init+0x50>)
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000692:	4b0e      	ldr	r3, [pc, #56]	@ (80006cc <MX_I2C1_Init+0x50>)
 8000694:	2200      	movs	r2, #0
 8000696:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000698:	4b0c      	ldr	r3, [pc, #48]	@ (80006cc <MX_I2C1_Init+0x50>)
 800069a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800069e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a0:	4b0a      	ldr	r3, [pc, #40]	@ (80006cc <MX_I2C1_Init+0x50>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006a6:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <MX_I2C1_Init+0x50>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ac:	4b07      	ldr	r3, [pc, #28]	@ (80006cc <MX_I2C1_Init+0x50>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b2:	4b06      	ldr	r3, [pc, #24]	@ (80006cc <MX_I2C1_Init+0x50>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006b8:	4804      	ldr	r0, [pc, #16]	@ (80006cc <MX_I2C1_Init+0x50>)
 80006ba:	f000 fec5 	bl	8001448 <HAL_I2C_Init>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006c4:	f000 f9c8 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	200000b8 	.word	0x200000b8
 80006d0:	40005400 	.word	0x40005400
 80006d4:	000186a0 	.word	0x000186a0

080006d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08a      	sub	sp, #40	@ 0x28
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006de:	f107 0318 	add.w	r3, r7, #24
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ec:	f107 0310 	add.w	r3, r7, #16
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80006f6:	463b      	mov	r3, r7
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000702:	4b2c      	ldr	r3, [pc, #176]	@ (80007b4 <MX_TIM2_Init+0xdc>)
 8000704:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000708:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000;
 800070a:	4b2a      	ldr	r3, [pc, #168]	@ (80007b4 <MX_TIM2_Init+0xdc>)
 800070c:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000710:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000712:	4b28      	ldr	r3, [pc, #160]	@ (80007b4 <MX_TIM2_Init+0xdc>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7000;
 8000718:	4b26      	ldr	r3, [pc, #152]	@ (80007b4 <MX_TIM2_Init+0xdc>)
 800071a:	f641 3258 	movw	r2, #7000	@ 0x1b58
 800071e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000720:	4b24      	ldr	r3, [pc, #144]	@ (80007b4 <MX_TIM2_Init+0xdc>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000726:	4b23      	ldr	r3, [pc, #140]	@ (80007b4 <MX_TIM2_Init+0xdc>)
 8000728:	2280      	movs	r2, #128	@ 0x80
 800072a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800072c:	4821      	ldr	r0, [pc, #132]	@ (80007b4 <MX_TIM2_Init+0xdc>)
 800072e:	f001 fbdf 	bl	8001ef0 <HAL_TIM_Base_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000738:	f000 f98e 	bl	8000a58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800073c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000740:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000742:	f107 0318 	add.w	r3, r7, #24
 8000746:	4619      	mov	r1, r3
 8000748:	481a      	ldr	r0, [pc, #104]	@ (80007b4 <MX_TIM2_Init+0xdc>)
 800074a:	f002 f977 	bl	8002a3c <HAL_TIM_ConfigClockSource>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000754:	f000 f980 	bl	8000a58 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000758:	4816      	ldr	r0, [pc, #88]	@ (80007b4 <MX_TIM2_Init+0xdc>)
 800075a:	f001 fdc1 	bl	80022e0 <HAL_TIM_IC_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000764:	f000 f978 	bl	8000a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000768:	2300      	movs	r3, #0
 800076a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000770:	f107 0310 	add.w	r3, r7, #16
 8000774:	4619      	mov	r1, r3
 8000776:	480f      	ldr	r0, [pc, #60]	@ (80007b4 <MX_TIM2_Init+0xdc>)
 8000778:	f002 fe46 	bl	8003408 <HAL_TIMEx_MasterConfigSynchronization>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000782:	f000 f969 	bl	8000a58 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000786:	2300      	movs	r3, #0
 8000788:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800078a:	2301      	movs	r3, #1
 800078c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000796:	463b      	mov	r3, r7
 8000798:	2200      	movs	r2, #0
 800079a:	4619      	mov	r1, r3
 800079c:	4805      	ldr	r0, [pc, #20]	@ (80007b4 <MX_TIM2_Init+0xdc>)
 800079e:	f002 f8b1 	bl	8002904 <HAL_TIM_IC_ConfigChannel>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80007a8:	f000 f956 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	3728      	adds	r7, #40	@ 0x28
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000028 	.word	0x20000028

080007b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08e      	sub	sp, #56	@ 0x38
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007cc:	f107 0320 	add.w	r3, r7, #32
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]
 80007e4:	615a      	str	r2, [r3, #20]
 80007e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007e8:	4b2d      	ldr	r3, [pc, #180]	@ (80008a0 <MX_TIM3_Init+0xe8>)
 80007ea:	4a2e      	ldr	r2, [pc, #184]	@ (80008a4 <MX_TIM3_Init+0xec>)
 80007ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8000;
 80007ee:	4b2c      	ldr	r3, [pc, #176]	@ (80008a0 <MX_TIM3_Init+0xe8>)
 80007f0:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80007f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f6:	4b2a      	ldr	r3, [pc, #168]	@ (80008a0 <MX_TIM3_Init+0xe8>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80007fc:	4b28      	ldr	r3, [pc, #160]	@ (80008a0 <MX_TIM3_Init+0xe8>)
 80007fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000802:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000804:	4b26      	ldr	r3, [pc, #152]	@ (80008a0 <MX_TIM3_Init+0xe8>)
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800080a:	4b25      	ldr	r3, [pc, #148]	@ (80008a0 <MX_TIM3_Init+0xe8>)
 800080c:	2280      	movs	r2, #128	@ 0x80
 800080e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000810:	4823      	ldr	r0, [pc, #140]	@ (80008a0 <MX_TIM3_Init+0xe8>)
 8000812:	f001 fb6d 	bl	8001ef0 <HAL_TIM_Base_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800081c:	f000 f91c 	bl	8000a58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000820:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000824:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000826:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800082a:	4619      	mov	r1, r3
 800082c:	481c      	ldr	r0, [pc, #112]	@ (80008a0 <MX_TIM3_Init+0xe8>)
 800082e:	f002 f905 	bl	8002a3c <HAL_TIM_ConfigClockSource>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000838:	f000 f90e 	bl	8000a58 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800083c:	4818      	ldr	r0, [pc, #96]	@ (80008a0 <MX_TIM3_Init+0xe8>)
 800083e:	f001 fbf1 	bl	8002024 <HAL_TIM_OC_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000848:	f000 f906 	bl	8000a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800084c:	2300      	movs	r3, #0
 800084e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000850:	2300      	movs	r3, #0
 8000852:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000854:	f107 0320 	add.w	r3, r7, #32
 8000858:	4619      	mov	r1, r3
 800085a:	4811      	ldr	r0, [pc, #68]	@ (80008a0 <MX_TIM3_Init+0xe8>)
 800085c:	f002 fdd4 	bl	8003408 <HAL_TIMEx_MasterConfigSynchronization>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000866:	f000 f8f7 	bl	8000a58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	2200      	movs	r2, #0
 800087e:	4619      	mov	r1, r3
 8000880:	4807      	ldr	r0, [pc, #28]	@ (80008a0 <MX_TIM3_Init+0xe8>)
 8000882:	f001 ffe3 	bl	800284c <HAL_TIM_OC_ConfigChannel>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800088c:	f000 f8e4 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000890:	4803      	ldr	r0, [pc, #12]	@ (80008a0 <MX_TIM3_Init+0xe8>)
 8000892:	f000 f9b7 	bl	8000c04 <HAL_TIM_MspPostInit>

}
 8000896:	bf00      	nop
 8000898:	3738      	adds	r7, #56	@ 0x38
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000070 	.word	0x20000070
 80008a4:	40000400 	.word	0x40000400

080008a8 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 80008ac:	4b12      	ldr	r3, [pc, #72]	@ (80008f8 <MX_USART1_Init+0x50>)
 80008ae:	4a13      	ldr	r2, [pc, #76]	@ (80008fc <MX_USART1_Init+0x54>)
 80008b0:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 80008b2:	4b11      	ldr	r3, [pc, #68]	@ (80008f8 <MX_USART1_Init+0x50>)
 80008b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008b8:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 80008ba:	4b0f      	ldr	r3, [pc, #60]	@ (80008f8 <MX_USART1_Init+0x50>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 80008c0:	4b0d      	ldr	r3, [pc, #52]	@ (80008f8 <MX_USART1_Init+0x50>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 80008c6:	4b0c      	ldr	r3, [pc, #48]	@ (80008f8 <MX_USART1_Init+0x50>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 80008cc:	4b0a      	ldr	r3, [pc, #40]	@ (80008f8 <MX_USART1_Init+0x50>)
 80008ce:	220c      	movs	r2, #12
 80008d0:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 80008d2:	4b09      	ldr	r3, [pc, #36]	@ (80008f8 <MX_USART1_Init+0x50>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 80008d8:	4b07      	ldr	r3, [pc, #28]	@ (80008f8 <MX_USART1_Init+0x50>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80008de:	4b06      	ldr	r3, [pc, #24]	@ (80008f8 <MX_USART1_Init+0x50>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 80008e4:	4804      	ldr	r0, [pc, #16]	@ (80008f8 <MX_USART1_Init+0x50>)
 80008e6:	f002 fdff 	bl	80034e8 <HAL_USART_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 80008f0:	f000 f8b2 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	2000010c 	.word	0x2000010c
 80008fc:	40013800 	.word	0x40013800

08000900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b088      	sub	sp, #32
 8000904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000906:	f107 0310 	add.w	r3, r7, #16
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000914:	4b4c      	ldr	r3, [pc, #304]	@ (8000a48 <MX_GPIO_Init+0x148>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	4a4b      	ldr	r2, [pc, #300]	@ (8000a48 <MX_GPIO_Init+0x148>)
 800091a:	f043 0310 	orr.w	r3, r3, #16
 800091e:	6193      	str	r3, [r2, #24]
 8000920:	4b49      	ldr	r3, [pc, #292]	@ (8000a48 <MX_GPIO_Init+0x148>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	f003 0310 	and.w	r3, r3, #16
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800092c:	4b46      	ldr	r3, [pc, #280]	@ (8000a48 <MX_GPIO_Init+0x148>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	4a45      	ldr	r2, [pc, #276]	@ (8000a48 <MX_GPIO_Init+0x148>)
 8000932:	f043 0320 	orr.w	r3, r3, #32
 8000936:	6193      	str	r3, [r2, #24]
 8000938:	4b43      	ldr	r3, [pc, #268]	@ (8000a48 <MX_GPIO_Init+0x148>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	f003 0320 	and.w	r3, r3, #32
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000944:	4b40      	ldr	r3, [pc, #256]	@ (8000a48 <MX_GPIO_Init+0x148>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	4a3f      	ldr	r2, [pc, #252]	@ (8000a48 <MX_GPIO_Init+0x148>)
 800094a:	f043 0304 	orr.w	r3, r3, #4
 800094e:	6193      	str	r3, [r2, #24]
 8000950:	4b3d      	ldr	r3, [pc, #244]	@ (8000a48 <MX_GPIO_Init+0x148>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f003 0304 	and.w	r3, r3, #4
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095c:	4b3a      	ldr	r3, [pc, #232]	@ (8000a48 <MX_GPIO_Init+0x148>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	4a39      	ldr	r2, [pc, #228]	@ (8000a48 <MX_GPIO_Init+0x148>)
 8000962:	f043 0308 	orr.w	r3, r3, #8
 8000966:	6193      	str	r3, [r2, #24]
 8000968:	4b37      	ldr	r3, [pc, #220]	@ (8000a48 <MX_GPIO_Init+0x148>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	f003 0308 	and.w	r3, r3, #8
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000974:	2200      	movs	r2, #0
 8000976:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800097a:	4834      	ldr	r0, [pc, #208]	@ (8000a4c <MX_GPIO_Init+0x14c>)
 800097c:	f000 fd4b 	bl	8001416 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000980:	2200      	movs	r2, #0
 8000982:	21fe      	movs	r1, #254	@ 0xfe
 8000984:	4832      	ldr	r0, [pc, #200]	@ (8000a50 <MX_GPIO_Init+0x150>)
 8000986:	f000 fd46 	bl	8001416 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 8000990:	4830      	ldr	r0, [pc, #192]	@ (8000a54 <MX_GPIO_Init+0x154>)
 8000992:	f000 fd40 	bl	8001416 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000996:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800099a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099c:	2301      	movs	r3, #1
 800099e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2302      	movs	r3, #2
 80009a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a8:	f107 0310 	add.w	r3, r7, #16
 80009ac:	4619      	mov	r1, r3
 80009ae:	4827      	ldr	r0, [pc, #156]	@ (8000a4c <MX_GPIO_Init+0x14c>)
 80009b0:	f000 fb96 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80009b4:	23fe      	movs	r3, #254	@ 0xfe
 80009b6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b8:	2301      	movs	r3, #1
 80009ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009bc:	2302      	movs	r3, #2
 80009be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2302      	movs	r3, #2
 80009c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c4:	f107 0310 	add.w	r3, r7, #16
 80009c8:	4619      	mov	r1, r3
 80009ca:	4821      	ldr	r0, [pc, #132]	@ (8000a50 <MX_GPIO_Init+0x150>)
 80009cc:	f000 fb88 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80009d0:	2309      	movs	r3, #9
 80009d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009d8:	2302      	movs	r3, #2
 80009da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009dc:	f107 0310 	add.w	r3, r7, #16
 80009e0:	4619      	mov	r1, r3
 80009e2:	481c      	ldr	r0, [pc, #112]	@ (8000a54 <MX_GPIO_Init+0x154>)
 80009e4:	f000 fb7c 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80009e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ee:	2301      	movs	r3, #1
 80009f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009f2:	2302      	movs	r3, #2
 80009f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2302      	movs	r3, #2
 80009f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fa:	f107 0310 	add.w	r3, r7, #16
 80009fe:	4619      	mov	r1, r3
 8000a00:	4814      	ldr	r0, [pc, #80]	@ (8000a54 <MX_GPIO_Init+0x154>)
 8000a02:	f000 fb6d 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000a06:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000a0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a14:	2302      	movs	r3, #2
 8000a16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a18:	f107 0310 	add.w	r3, r7, #16
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	480d      	ldr	r0, [pc, #52]	@ (8000a54 <MX_GPIO_Init+0x154>)
 8000a20:	f000 fb5e 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a24:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a32:	f107 0310 	add.w	r3, r7, #16
 8000a36:	4619      	mov	r1, r3
 8000a38:	4806      	ldr	r0, [pc, #24]	@ (8000a54 <MX_GPIO_Init+0x154>)
 8000a3a:	f000 fb51 	bl	80010e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a3e:	bf00      	nop
 8000a40:	3720      	adds	r7, #32
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	40011000 	.word	0x40011000
 8000a50:	40010800 	.word	0x40010800
 8000a54:	40010c00 	.word	0x40010c00

08000a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5c:	b672      	cpsid	i
}
 8000a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <Error_Handler+0x8>

08000a64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a6a:	4b15      	ldr	r3, [pc, #84]	@ (8000ac0 <HAL_MspInit+0x5c>)
 8000a6c:	699b      	ldr	r3, [r3, #24]
 8000a6e:	4a14      	ldr	r2, [pc, #80]	@ (8000ac0 <HAL_MspInit+0x5c>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6193      	str	r3, [r2, #24]
 8000a76:	4b12      	ldr	r3, [pc, #72]	@ (8000ac0 <HAL_MspInit+0x5c>)
 8000a78:	699b      	ldr	r3, [r3, #24]
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a82:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac0 <HAL_MspInit+0x5c>)
 8000a84:	69db      	ldr	r3, [r3, #28]
 8000a86:	4a0e      	ldr	r2, [pc, #56]	@ (8000ac0 <HAL_MspInit+0x5c>)
 8000a88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a8c:	61d3      	str	r3, [r2, #28]
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac0 <HAL_MspInit+0x5c>)
 8000a90:	69db      	ldr	r3, [r3, #28]
 8000a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac4 <HAL_MspInit+0x60>)
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	4a04      	ldr	r2, [pc, #16]	@ (8000ac4 <HAL_MspInit+0x60>)
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	3714      	adds	r7, #20
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	40010000 	.word	0x40010000

08000ac8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b088      	sub	sp, #32
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 0310 	add.w	r3, r7, #16
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a15      	ldr	r2, [pc, #84]	@ (8000b38 <HAL_I2C_MspInit+0x70>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d123      	bne.n	8000b30 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae8:	4b14      	ldr	r3, [pc, #80]	@ (8000b3c <HAL_I2C_MspInit+0x74>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	4a13      	ldr	r2, [pc, #76]	@ (8000b3c <HAL_I2C_MspInit+0x74>)
 8000aee:	f043 0308 	orr.w	r3, r3, #8
 8000af2:	6193      	str	r3, [r2, #24]
 8000af4:	4b11      	ldr	r3, [pc, #68]	@ (8000b3c <HAL_I2C_MspInit+0x74>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	f003 0308 	and.w	r3, r3, #8
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b00:	23c0      	movs	r3, #192	@ 0xc0
 8000b02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b04:	2312      	movs	r3, #18
 8000b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0c:	f107 0310 	add.w	r3, r7, #16
 8000b10:	4619      	mov	r1, r3
 8000b12:	480b      	ldr	r0, [pc, #44]	@ (8000b40 <HAL_I2C_MspInit+0x78>)
 8000b14:	f000 fae4 	bl	80010e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b18:	4b08      	ldr	r3, [pc, #32]	@ (8000b3c <HAL_I2C_MspInit+0x74>)
 8000b1a:	69db      	ldr	r3, [r3, #28]
 8000b1c:	4a07      	ldr	r2, [pc, #28]	@ (8000b3c <HAL_I2C_MspInit+0x74>)
 8000b1e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b22:	61d3      	str	r3, [r2, #28]
 8000b24:	4b05      	ldr	r3, [pc, #20]	@ (8000b3c <HAL_I2C_MspInit+0x74>)
 8000b26:	69db      	ldr	r3, [r3, #28]
 8000b28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b30:	bf00      	nop
 8000b32:	3720      	adds	r7, #32
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40005400 	.word	0x40005400
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	40010c00 	.word	0x40010c00

08000b44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	@ 0x28
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4c:	f107 0318 	add.w	r3, r7, #24
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b62:	d12c      	bne.n	8000bbe <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b64:	4b24      	ldr	r3, [pc, #144]	@ (8000bf8 <HAL_TIM_Base_MspInit+0xb4>)
 8000b66:	69db      	ldr	r3, [r3, #28]
 8000b68:	4a23      	ldr	r2, [pc, #140]	@ (8000bf8 <HAL_TIM_Base_MspInit+0xb4>)
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	61d3      	str	r3, [r2, #28]
 8000b70:	4b21      	ldr	r3, [pc, #132]	@ (8000bf8 <HAL_TIM_Base_MspInit+0xb4>)
 8000b72:	69db      	ldr	r3, [r3, #28]
 8000b74:	f003 0301 	and.w	r3, r3, #1
 8000b78:	617b      	str	r3, [r7, #20]
 8000b7a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7c:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf8 <HAL_TIM_Base_MspInit+0xb4>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	4a1d      	ldr	r2, [pc, #116]	@ (8000bf8 <HAL_TIM_Base_MspInit+0xb4>)
 8000b82:	f043 0304 	orr.w	r3, r3, #4
 8000b86:	6193      	str	r3, [r2, #24]
 8000b88:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf8 <HAL_TIM_Base_MspInit+0xb4>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	f003 0304 	and.w	r3, r3, #4
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b94:	2301      	movs	r3, #1
 8000b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba0:	f107 0318 	add.w	r3, r7, #24
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4815      	ldr	r0, [pc, #84]	@ (8000bfc <HAL_TIM_Base_MspInit+0xb8>)
 8000ba8:	f000 fa9a 	bl	80010e0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2100      	movs	r1, #0
 8000bb0:	201c      	movs	r0, #28
 8000bb2:	f000 fa5e 	bl	8001072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bb6:	201c      	movs	r0, #28
 8000bb8:	f000 fa77 	bl	80010aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000bbc:	e018      	b.n	8000bf0 <HAL_TIM_Base_MspInit+0xac>
  else if(htim_base->Instance==TIM3)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a0f      	ldr	r2, [pc, #60]	@ (8000c00 <HAL_TIM_Base_MspInit+0xbc>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d113      	bne.n	8000bf0 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf8 <HAL_TIM_Base_MspInit+0xb4>)
 8000bca:	69db      	ldr	r3, [r3, #28]
 8000bcc:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf8 <HAL_TIM_Base_MspInit+0xb4>)
 8000bce:	f043 0302 	orr.w	r3, r3, #2
 8000bd2:	61d3      	str	r3, [r2, #28]
 8000bd4:	4b08      	ldr	r3, [pc, #32]	@ (8000bf8 <HAL_TIM_Base_MspInit+0xb4>)
 8000bd6:	69db      	ldr	r3, [r3, #28]
 8000bd8:	f003 0302 	and.w	r3, r3, #2
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2100      	movs	r1, #0
 8000be4:	201d      	movs	r0, #29
 8000be6:	f000 fa44 	bl	8001072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000bea:	201d      	movs	r0, #29
 8000bec:	f000 fa5d 	bl	80010aa <HAL_NVIC_EnableIRQ>
}
 8000bf0:	bf00      	nop
 8000bf2:	3728      	adds	r7, #40	@ 0x28
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	40010800 	.word	0x40010800
 8000c00:	40000400 	.word	0x40000400

08000c04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b088      	sub	sp, #32
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 030c 	add.w	r3, r7, #12
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a18      	ldr	r2, [pc, #96]	@ (8000c80 <HAL_TIM_MspPostInit+0x7c>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d129      	bne.n	8000c78 <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c24:	4b17      	ldr	r3, [pc, #92]	@ (8000c84 <HAL_TIM_MspPostInit+0x80>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	4a16      	ldr	r2, [pc, #88]	@ (8000c84 <HAL_TIM_MspPostInit+0x80>)
 8000c2a:	f043 0308 	orr.w	r3, r3, #8
 8000c2e:	6193      	str	r3, [r2, #24]
 8000c30:	4b14      	ldr	r3, [pc, #80]	@ (8000c84 <HAL_TIM_MspPostInit+0x80>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	f003 0308 	and.w	r3, r3, #8
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c3c:	2310      	movs	r3, #16
 8000c3e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	2302      	movs	r3, #2
 8000c46:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c48:	f107 030c 	add.w	r3, r7, #12
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	480e      	ldr	r0, [pc, #56]	@ (8000c88 <HAL_TIM_MspPostInit+0x84>)
 8000c50:	f000 fa46 	bl	80010e0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8000c54:	4b0d      	ldr	r3, [pc, #52]	@ (8000c8c <HAL_TIM_MspPostInit+0x88>)
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	61fb      	str	r3, [r7, #28]
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000c60:	61fb      	str	r3, [r7, #28]
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000c68:	61fb      	str	r3, [r7, #28]
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c70:	61fb      	str	r3, [r7, #28]
 8000c72:	4a06      	ldr	r2, [pc, #24]	@ (8000c8c <HAL_TIM_MspPostInit+0x88>)
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c78:	bf00      	nop
 8000c7a:	3720      	adds	r7, #32
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40000400 	.word	0x40000400
 8000c84:	40021000 	.word	0x40021000
 8000c88:	40010c00 	.word	0x40010c00
 8000c8c:	40010000 	.word	0x40010000

08000c90 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b088      	sub	sp, #32
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 0310 	add.w	r3, r7, #16
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
  if(husart->Instance==USART1)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a1c      	ldr	r2, [pc, #112]	@ (8000d1c <HAL_USART_MspInit+0x8c>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d131      	bne.n	8000d14 <HAL_USART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d20 <HAL_USART_MspInit+0x90>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	4a1a      	ldr	r2, [pc, #104]	@ (8000d20 <HAL_USART_MspInit+0x90>)
 8000cb6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cba:	6193      	str	r3, [r2, #24]
 8000cbc:	4b18      	ldr	r3, [pc, #96]	@ (8000d20 <HAL_USART_MspInit+0x90>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc8:	4b15      	ldr	r3, [pc, #84]	@ (8000d20 <HAL_USART_MspInit+0x90>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	4a14      	ldr	r2, [pc, #80]	@ (8000d20 <HAL_USART_MspInit+0x90>)
 8000cce:	f043 0304 	orr.w	r3, r3, #4
 8000cd2:	6193      	str	r3, [r2, #24]
 8000cd4:	4b12      	ldr	r3, [pc, #72]	@ (8000d20 <HAL_USART_MspInit+0x90>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	f003 0304 	and.w	r3, r3, #4
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ce0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ce4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cea:	2303      	movs	r3, #3
 8000cec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cee:	f107 0310 	add.w	r3, r7, #16
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	480b      	ldr	r0, [pc, #44]	@ (8000d24 <HAL_USART_MspInit+0x94>)
 8000cf6:	f000 f9f3 	bl	80010e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cfe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d08:	f107 0310 	add.w	r3, r7, #16
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4805      	ldr	r0, [pc, #20]	@ (8000d24 <HAL_USART_MspInit+0x94>)
 8000d10:	f000 f9e6 	bl	80010e0 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000d14:	bf00      	nop
 8000d16:	3720      	adds	r7, #32
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40013800 	.word	0x40013800
 8000d20:	40021000 	.word	0x40021000
 8000d24:	40010800 	.word	0x40010800

08000d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <NMI_Handler+0x4>

08000d30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <HardFault_Handler+0x4>

08000d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <MemManage_Handler+0x4>

08000d40 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <BusFault_Handler+0x4>

08000d48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d4c:	bf00      	nop
 8000d4e:	e7fd      	b.n	8000d4c <UsageFault_Handler+0x4>

08000d50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr

08000d5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr

08000d68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr

08000d74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d78:	f000 f888 	bl	8000e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d84:	4802      	ldr	r0, [pc, #8]	@ (8000d90 <TIM2_IRQHandler+0x10>)
 8000d86:	f001 fc71 	bl	800266c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000028 	.word	0x20000028

08000d94 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d98:	4802      	ldr	r0, [pc, #8]	@ (8000da4 <TIM3_IRQHandler+0x10>)
 8000d9a:	f001 fc67 	bl	800266c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000070 	.word	0x20000070

08000da8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr

08000db4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000db4:	f7ff fff8 	bl	8000da8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000db8:	480b      	ldr	r0, [pc, #44]	@ (8000de8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000dba:	490c      	ldr	r1, [pc, #48]	@ (8000dec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000dbc:	4a0c      	ldr	r2, [pc, #48]	@ (8000df0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc0:	e002      	b.n	8000dc8 <LoopCopyDataInit>

08000dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc6:	3304      	adds	r3, #4

08000dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dcc:	d3f9      	bcc.n	8000dc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dce:	4a09      	ldr	r2, [pc, #36]	@ (8000df4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000dd0:	4c09      	ldr	r4, [pc, #36]	@ (8000df8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd4:	e001      	b.n	8000dda <LoopFillZerobss>

08000dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd8:	3204      	adds	r2, #4

08000dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ddc:	d3fb      	bcc.n	8000dd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dde:	f002 fcc5 	bl	800376c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000de2:	f7ff fb91 	bl	8000508 <main>
  bx lr
 8000de6:	4770      	bx	lr
  ldr r0, =_sdata
 8000de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000df0:	08003800 	.word	0x08003800
  ldr r2, =_sbss
 8000df4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000df8:	20000158 	.word	0x20000158

08000dfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dfc:	e7fe      	b.n	8000dfc <ADC1_2_IRQHandler>
	...

08000e00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e04:	4b08      	ldr	r3, [pc, #32]	@ (8000e28 <HAL_Init+0x28>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a07      	ldr	r2, [pc, #28]	@ (8000e28 <HAL_Init+0x28>)
 8000e0a:	f043 0310 	orr.w	r3, r3, #16
 8000e0e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e10:	2003      	movs	r0, #3
 8000e12:	f000 f923 	bl	800105c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e16:	200f      	movs	r0, #15
 8000e18:	f000 f808 	bl	8000e2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e1c:	f7ff fe22 	bl	8000a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40022000 	.word	0x40022000

08000e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e34:	4b12      	ldr	r3, [pc, #72]	@ (8000e80 <HAL_InitTick+0x54>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4b12      	ldr	r3, [pc, #72]	@ (8000e84 <HAL_InitTick+0x58>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 f93b 	bl	80010c6 <HAL_SYSTICK_Config>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e00e      	b.n	8000e78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b0f      	cmp	r3, #15
 8000e5e:	d80a      	bhi.n	8000e76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e60:	2200      	movs	r2, #0
 8000e62:	6879      	ldr	r1, [r7, #4]
 8000e64:	f04f 30ff 	mov.w	r0, #4294967295
 8000e68:	f000 f903 	bl	8001072 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e6c:	4a06      	ldr	r2, [pc, #24]	@ (8000e88 <HAL_InitTick+0x5c>)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e72:	2300      	movs	r3, #0
 8000e74:	e000      	b.n	8000e78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000000 	.word	0x20000000
 8000e84:	20000008 	.word	0x20000008
 8000e88:	20000004 	.word	0x20000004

08000e8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e90:	4b05      	ldr	r3, [pc, #20]	@ (8000ea8 <HAL_IncTick+0x1c>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	461a      	mov	r2, r3
 8000e96:	4b05      	ldr	r3, [pc, #20]	@ (8000eac <HAL_IncTick+0x20>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	4a03      	ldr	r2, [pc, #12]	@ (8000eac <HAL_IncTick+0x20>)
 8000e9e:	6013      	str	r3, [r2, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr
 8000ea8:	20000008 	.word	0x20000008
 8000eac:	20000154 	.word	0x20000154

08000eb0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb4:	4b02      	ldr	r3, [pc, #8]	@ (8000ec0 <HAL_GetTick+0x10>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr
 8000ec0:	20000154 	.word	0x20000154

08000ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eda:	68ba      	ldr	r2, [r7, #8]
 8000edc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ef0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef6:	4a04      	ldr	r2, [pc, #16]	@ (8000f08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	60d3      	str	r3, [r2, #12]
}
 8000efc:	bf00      	nop
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f10:	4b04      	ldr	r3, [pc, #16]	@ (8000f24 <__NVIC_GetPriorityGrouping+0x18>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	0a1b      	lsrs	r3, r3, #8
 8000f16:	f003 0307 	and.w	r3, r3, #7
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	db0b      	blt.n	8000f52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	f003 021f 	and.w	r2, r3, #31
 8000f40:	4906      	ldr	r1, [pc, #24]	@ (8000f5c <__NVIC_EnableIRQ+0x34>)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	095b      	lsrs	r3, r3, #5
 8000f48:	2001      	movs	r0, #1
 8000f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr
 8000f5c:	e000e100 	.word	0xe000e100

08000f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	6039      	str	r1, [r7, #0]
 8000f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	db0a      	blt.n	8000f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	490c      	ldr	r1, [pc, #48]	@ (8000fac <__NVIC_SetPriority+0x4c>)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	0112      	lsls	r2, r2, #4
 8000f80:	b2d2      	uxtb	r2, r2
 8000f82:	440b      	add	r3, r1
 8000f84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f88:	e00a      	b.n	8000fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	4908      	ldr	r1, [pc, #32]	@ (8000fb0 <__NVIC_SetPriority+0x50>)
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	f003 030f 	and.w	r3, r3, #15
 8000f96:	3b04      	subs	r3, #4
 8000f98:	0112      	lsls	r2, r2, #4
 8000f9a:	b2d2      	uxtb	r2, r2
 8000f9c:	440b      	add	r3, r1
 8000f9e:	761a      	strb	r2, [r3, #24]
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	e000e100 	.word	0xe000e100
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b089      	sub	sp, #36	@ 0x24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	f1c3 0307 	rsb	r3, r3, #7
 8000fce:	2b04      	cmp	r3, #4
 8000fd0:	bf28      	it	cs
 8000fd2:	2304      	movcs	r3, #4
 8000fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3304      	adds	r3, #4
 8000fda:	2b06      	cmp	r3, #6
 8000fdc:	d902      	bls.n	8000fe4 <NVIC_EncodePriority+0x30>
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3b03      	subs	r3, #3
 8000fe2:	e000      	b.n	8000fe6 <NVIC_EncodePriority+0x32>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43da      	mvns	r2, r3
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	401a      	ands	r2, r3
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	fa01 f303 	lsl.w	r3, r1, r3
 8001006:	43d9      	mvns	r1, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	4313      	orrs	r3, r2
         );
}
 800100e:	4618      	mov	r0, r3
 8001010:	3724      	adds	r7, #36	@ 0x24
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr

08001018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3b01      	subs	r3, #1
 8001024:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001028:	d301      	bcc.n	800102e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800102a:	2301      	movs	r3, #1
 800102c:	e00f      	b.n	800104e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800102e:	4a0a      	ldr	r2, [pc, #40]	@ (8001058 <SysTick_Config+0x40>)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3b01      	subs	r3, #1
 8001034:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001036:	210f      	movs	r1, #15
 8001038:	f04f 30ff 	mov.w	r0, #4294967295
 800103c:	f7ff ff90 	bl	8000f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001040:	4b05      	ldr	r3, [pc, #20]	@ (8001058 <SysTick_Config+0x40>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001046:	4b04      	ldr	r3, [pc, #16]	@ (8001058 <SysTick_Config+0x40>)
 8001048:	2207      	movs	r2, #7
 800104a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	e000e010 	.word	0xe000e010

0800105c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff ff2d 	bl	8000ec4 <__NVIC_SetPriorityGrouping>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001072:	b580      	push	{r7, lr}
 8001074:	b086      	sub	sp, #24
 8001076:	af00      	add	r7, sp, #0
 8001078:	4603      	mov	r3, r0
 800107a:	60b9      	str	r1, [r7, #8]
 800107c:	607a      	str	r2, [r7, #4]
 800107e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001084:	f7ff ff42 	bl	8000f0c <__NVIC_GetPriorityGrouping>
 8001088:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	68b9      	ldr	r1, [r7, #8]
 800108e:	6978      	ldr	r0, [r7, #20]
 8001090:	f7ff ff90 	bl	8000fb4 <NVIC_EncodePriority>
 8001094:	4602      	mov	r2, r0
 8001096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff5f 	bl	8000f60 <__NVIC_SetPriority>
}
 80010a2:	bf00      	nop
 80010a4:	3718      	adds	r7, #24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	4603      	mov	r3, r0
 80010b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff35 	bl	8000f28 <__NVIC_EnableIRQ>
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff ffa2 	bl	8001018 <SysTick_Config>
 80010d4:	4603      	mov	r3, r0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b08b      	sub	sp, #44	@ 0x2c
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010ea:	2300      	movs	r3, #0
 80010ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010ee:	2300      	movs	r3, #0
 80010f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010f2:	e169      	b.n	80013c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010f4:	2201      	movs	r2, #1
 80010f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	69fa      	ldr	r2, [r7, #28]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	429a      	cmp	r2, r3
 800110e:	f040 8158 	bne.w	80013c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	4a9a      	ldr	r2, [pc, #616]	@ (8001380 <HAL_GPIO_Init+0x2a0>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d05e      	beq.n	80011da <HAL_GPIO_Init+0xfa>
 800111c:	4a98      	ldr	r2, [pc, #608]	@ (8001380 <HAL_GPIO_Init+0x2a0>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d875      	bhi.n	800120e <HAL_GPIO_Init+0x12e>
 8001122:	4a98      	ldr	r2, [pc, #608]	@ (8001384 <HAL_GPIO_Init+0x2a4>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d058      	beq.n	80011da <HAL_GPIO_Init+0xfa>
 8001128:	4a96      	ldr	r2, [pc, #600]	@ (8001384 <HAL_GPIO_Init+0x2a4>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d86f      	bhi.n	800120e <HAL_GPIO_Init+0x12e>
 800112e:	4a96      	ldr	r2, [pc, #600]	@ (8001388 <HAL_GPIO_Init+0x2a8>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d052      	beq.n	80011da <HAL_GPIO_Init+0xfa>
 8001134:	4a94      	ldr	r2, [pc, #592]	@ (8001388 <HAL_GPIO_Init+0x2a8>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d869      	bhi.n	800120e <HAL_GPIO_Init+0x12e>
 800113a:	4a94      	ldr	r2, [pc, #592]	@ (800138c <HAL_GPIO_Init+0x2ac>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d04c      	beq.n	80011da <HAL_GPIO_Init+0xfa>
 8001140:	4a92      	ldr	r2, [pc, #584]	@ (800138c <HAL_GPIO_Init+0x2ac>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d863      	bhi.n	800120e <HAL_GPIO_Init+0x12e>
 8001146:	4a92      	ldr	r2, [pc, #584]	@ (8001390 <HAL_GPIO_Init+0x2b0>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d046      	beq.n	80011da <HAL_GPIO_Init+0xfa>
 800114c:	4a90      	ldr	r2, [pc, #576]	@ (8001390 <HAL_GPIO_Init+0x2b0>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d85d      	bhi.n	800120e <HAL_GPIO_Init+0x12e>
 8001152:	2b12      	cmp	r3, #18
 8001154:	d82a      	bhi.n	80011ac <HAL_GPIO_Init+0xcc>
 8001156:	2b12      	cmp	r3, #18
 8001158:	d859      	bhi.n	800120e <HAL_GPIO_Init+0x12e>
 800115a:	a201      	add	r2, pc, #4	@ (adr r2, 8001160 <HAL_GPIO_Init+0x80>)
 800115c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001160:	080011db 	.word	0x080011db
 8001164:	080011b5 	.word	0x080011b5
 8001168:	080011c7 	.word	0x080011c7
 800116c:	08001209 	.word	0x08001209
 8001170:	0800120f 	.word	0x0800120f
 8001174:	0800120f 	.word	0x0800120f
 8001178:	0800120f 	.word	0x0800120f
 800117c:	0800120f 	.word	0x0800120f
 8001180:	0800120f 	.word	0x0800120f
 8001184:	0800120f 	.word	0x0800120f
 8001188:	0800120f 	.word	0x0800120f
 800118c:	0800120f 	.word	0x0800120f
 8001190:	0800120f 	.word	0x0800120f
 8001194:	0800120f 	.word	0x0800120f
 8001198:	0800120f 	.word	0x0800120f
 800119c:	0800120f 	.word	0x0800120f
 80011a0:	0800120f 	.word	0x0800120f
 80011a4:	080011bd 	.word	0x080011bd
 80011a8:	080011d1 	.word	0x080011d1
 80011ac:	4a79      	ldr	r2, [pc, #484]	@ (8001394 <HAL_GPIO_Init+0x2b4>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d013      	beq.n	80011da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011b2:	e02c      	b.n	800120e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	623b      	str	r3, [r7, #32]
          break;
 80011ba:	e029      	b.n	8001210 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	3304      	adds	r3, #4
 80011c2:	623b      	str	r3, [r7, #32]
          break;
 80011c4:	e024      	b.n	8001210 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	3308      	adds	r3, #8
 80011cc:	623b      	str	r3, [r7, #32]
          break;
 80011ce:	e01f      	b.n	8001210 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	330c      	adds	r3, #12
 80011d6:	623b      	str	r3, [r7, #32]
          break;
 80011d8:	e01a      	b.n	8001210 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d102      	bne.n	80011e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011e2:	2304      	movs	r3, #4
 80011e4:	623b      	str	r3, [r7, #32]
          break;
 80011e6:	e013      	b.n	8001210 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d105      	bne.n	80011fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011f0:	2308      	movs	r3, #8
 80011f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	69fa      	ldr	r2, [r7, #28]
 80011f8:	611a      	str	r2, [r3, #16]
          break;
 80011fa:	e009      	b.n	8001210 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011fc:	2308      	movs	r3, #8
 80011fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	69fa      	ldr	r2, [r7, #28]
 8001204:	615a      	str	r2, [r3, #20]
          break;
 8001206:	e003      	b.n	8001210 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001208:	2300      	movs	r3, #0
 800120a:	623b      	str	r3, [r7, #32]
          break;
 800120c:	e000      	b.n	8001210 <HAL_GPIO_Init+0x130>
          break;
 800120e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	2bff      	cmp	r3, #255	@ 0xff
 8001214:	d801      	bhi.n	800121a <HAL_GPIO_Init+0x13a>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	e001      	b.n	800121e <HAL_GPIO_Init+0x13e>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	3304      	adds	r3, #4
 800121e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	2bff      	cmp	r3, #255	@ 0xff
 8001224:	d802      	bhi.n	800122c <HAL_GPIO_Init+0x14c>
 8001226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	e002      	b.n	8001232 <HAL_GPIO_Init+0x152>
 800122c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800122e:	3b08      	subs	r3, #8
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	210f      	movs	r1, #15
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	fa01 f303 	lsl.w	r3, r1, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	401a      	ands	r2, r3
 8001244:	6a39      	ldr	r1, [r7, #32]
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	fa01 f303 	lsl.w	r3, r1, r3
 800124c:	431a      	orrs	r2, r3
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800125a:	2b00      	cmp	r3, #0
 800125c:	f000 80b1 	beq.w	80013c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001260:	4b4d      	ldr	r3, [pc, #308]	@ (8001398 <HAL_GPIO_Init+0x2b8>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	4a4c      	ldr	r2, [pc, #304]	@ (8001398 <HAL_GPIO_Init+0x2b8>)
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	6193      	str	r3, [r2, #24]
 800126c:	4b4a      	ldr	r3, [pc, #296]	@ (8001398 <HAL_GPIO_Init+0x2b8>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	f003 0301 	and.w	r3, r3, #1
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001278:	4a48      	ldr	r2, [pc, #288]	@ (800139c <HAL_GPIO_Init+0x2bc>)
 800127a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800127c:	089b      	lsrs	r3, r3, #2
 800127e:	3302      	adds	r3, #2
 8001280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001284:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001288:	f003 0303 	and.w	r3, r3, #3
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	220f      	movs	r2, #15
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	68fa      	ldr	r2, [r7, #12]
 8001298:	4013      	ands	r3, r2
 800129a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a40      	ldr	r2, [pc, #256]	@ (80013a0 <HAL_GPIO_Init+0x2c0>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d013      	beq.n	80012cc <HAL_GPIO_Init+0x1ec>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4a3f      	ldr	r2, [pc, #252]	@ (80013a4 <HAL_GPIO_Init+0x2c4>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d00d      	beq.n	80012c8 <HAL_GPIO_Init+0x1e8>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4a3e      	ldr	r2, [pc, #248]	@ (80013a8 <HAL_GPIO_Init+0x2c8>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d007      	beq.n	80012c4 <HAL_GPIO_Init+0x1e4>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4a3d      	ldr	r2, [pc, #244]	@ (80013ac <HAL_GPIO_Init+0x2cc>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d101      	bne.n	80012c0 <HAL_GPIO_Init+0x1e0>
 80012bc:	2303      	movs	r3, #3
 80012be:	e006      	b.n	80012ce <HAL_GPIO_Init+0x1ee>
 80012c0:	2304      	movs	r3, #4
 80012c2:	e004      	b.n	80012ce <HAL_GPIO_Init+0x1ee>
 80012c4:	2302      	movs	r3, #2
 80012c6:	e002      	b.n	80012ce <HAL_GPIO_Init+0x1ee>
 80012c8:	2301      	movs	r3, #1
 80012ca:	e000      	b.n	80012ce <HAL_GPIO_Init+0x1ee>
 80012cc:	2300      	movs	r3, #0
 80012ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012d0:	f002 0203 	and.w	r2, r2, #3
 80012d4:	0092      	lsls	r2, r2, #2
 80012d6:	4093      	lsls	r3, r2
 80012d8:	68fa      	ldr	r2, [r7, #12]
 80012da:	4313      	orrs	r3, r2
 80012dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012de:	492f      	ldr	r1, [pc, #188]	@ (800139c <HAL_GPIO_Init+0x2bc>)
 80012e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e2:	089b      	lsrs	r3, r3, #2
 80012e4:	3302      	adds	r3, #2
 80012e6:	68fa      	ldr	r2, [r7, #12]
 80012e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d006      	beq.n	8001306 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012f8:	4b2d      	ldr	r3, [pc, #180]	@ (80013b0 <HAL_GPIO_Init+0x2d0>)
 80012fa:	689a      	ldr	r2, [r3, #8]
 80012fc:	492c      	ldr	r1, [pc, #176]	@ (80013b0 <HAL_GPIO_Init+0x2d0>)
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	4313      	orrs	r3, r2
 8001302:	608b      	str	r3, [r1, #8]
 8001304:	e006      	b.n	8001314 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001306:	4b2a      	ldr	r3, [pc, #168]	@ (80013b0 <HAL_GPIO_Init+0x2d0>)
 8001308:	689a      	ldr	r2, [r3, #8]
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	43db      	mvns	r3, r3
 800130e:	4928      	ldr	r1, [pc, #160]	@ (80013b0 <HAL_GPIO_Init+0x2d0>)
 8001310:	4013      	ands	r3, r2
 8001312:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d006      	beq.n	800132e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001320:	4b23      	ldr	r3, [pc, #140]	@ (80013b0 <HAL_GPIO_Init+0x2d0>)
 8001322:	68da      	ldr	r2, [r3, #12]
 8001324:	4922      	ldr	r1, [pc, #136]	@ (80013b0 <HAL_GPIO_Init+0x2d0>)
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	4313      	orrs	r3, r2
 800132a:	60cb      	str	r3, [r1, #12]
 800132c:	e006      	b.n	800133c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800132e:	4b20      	ldr	r3, [pc, #128]	@ (80013b0 <HAL_GPIO_Init+0x2d0>)
 8001330:	68da      	ldr	r2, [r3, #12]
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	43db      	mvns	r3, r3
 8001336:	491e      	ldr	r1, [pc, #120]	@ (80013b0 <HAL_GPIO_Init+0x2d0>)
 8001338:	4013      	ands	r3, r2
 800133a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d006      	beq.n	8001356 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001348:	4b19      	ldr	r3, [pc, #100]	@ (80013b0 <HAL_GPIO_Init+0x2d0>)
 800134a:	685a      	ldr	r2, [r3, #4]
 800134c:	4918      	ldr	r1, [pc, #96]	@ (80013b0 <HAL_GPIO_Init+0x2d0>)
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	4313      	orrs	r3, r2
 8001352:	604b      	str	r3, [r1, #4]
 8001354:	e006      	b.n	8001364 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001356:	4b16      	ldr	r3, [pc, #88]	@ (80013b0 <HAL_GPIO_Init+0x2d0>)
 8001358:	685a      	ldr	r2, [r3, #4]
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	43db      	mvns	r3, r3
 800135e:	4914      	ldr	r1, [pc, #80]	@ (80013b0 <HAL_GPIO_Init+0x2d0>)
 8001360:	4013      	ands	r3, r2
 8001362:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d021      	beq.n	80013b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001370:	4b0f      	ldr	r3, [pc, #60]	@ (80013b0 <HAL_GPIO_Init+0x2d0>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	490e      	ldr	r1, [pc, #56]	@ (80013b0 <HAL_GPIO_Init+0x2d0>)
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	4313      	orrs	r3, r2
 800137a:	600b      	str	r3, [r1, #0]
 800137c:	e021      	b.n	80013c2 <HAL_GPIO_Init+0x2e2>
 800137e:	bf00      	nop
 8001380:	10320000 	.word	0x10320000
 8001384:	10310000 	.word	0x10310000
 8001388:	10220000 	.word	0x10220000
 800138c:	10210000 	.word	0x10210000
 8001390:	10120000 	.word	0x10120000
 8001394:	10110000 	.word	0x10110000
 8001398:	40021000 	.word	0x40021000
 800139c:	40010000 	.word	0x40010000
 80013a0:	40010800 	.word	0x40010800
 80013a4:	40010c00 	.word	0x40010c00
 80013a8:	40011000 	.word	0x40011000
 80013ac:	40011400 	.word	0x40011400
 80013b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013b4:	4b0b      	ldr	r3, [pc, #44]	@ (80013e4 <HAL_GPIO_Init+0x304>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	43db      	mvns	r3, r3
 80013bc:	4909      	ldr	r1, [pc, #36]	@ (80013e4 <HAL_GPIO_Init+0x304>)
 80013be:	4013      	ands	r3, r2
 80013c0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80013c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c4:	3301      	adds	r3, #1
 80013c6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ce:	fa22 f303 	lsr.w	r3, r2, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f47f ae8e 	bne.w	80010f4 <HAL_GPIO_Init+0x14>
  }
}
 80013d8:	bf00      	nop
 80013da:	bf00      	nop
 80013dc:	372c      	adds	r7, #44	@ 0x2c
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr
 80013e4:	40010400 	.word	0x40010400

080013e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689a      	ldr	r2, [r3, #8]
 80013f8:	887b      	ldrh	r3, [r7, #2]
 80013fa:	4013      	ands	r3, r2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d002      	beq.n	8001406 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001400:	2301      	movs	r3, #1
 8001402:	73fb      	strb	r3, [r7, #15]
 8001404:	e001      	b.n	800140a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001406:	2300      	movs	r3, #0
 8001408:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800140a:	7bfb      	ldrb	r3, [r7, #15]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr

08001416 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001416:	b480      	push	{r7}
 8001418:	b083      	sub	sp, #12
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
 800141e:	460b      	mov	r3, r1
 8001420:	807b      	strh	r3, [r7, #2]
 8001422:	4613      	mov	r3, r2
 8001424:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001426:	787b      	ldrb	r3, [r7, #1]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d003      	beq.n	8001434 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800142c:	887a      	ldrh	r2, [r7, #2]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001432:	e003      	b.n	800143c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001434:	887b      	ldrh	r3, [r7, #2]
 8001436:	041a      	lsls	r2, r3, #16
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	611a      	str	r2, [r3, #16]
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr
	...

08001448 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d101      	bne.n	800145a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e12b      	b.n	80016b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001460:	b2db      	uxtb	r3, r3
 8001462:	2b00      	cmp	r3, #0
 8001464:	d106      	bne.n	8001474 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff fb2a 	bl	8000ac8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2224      	movs	r2, #36	@ 0x24
 8001478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f022 0201 	bic.w	r2, r2, #1
 800148a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800149a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80014aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014ac:	f000 fcda 	bl	8001e64 <HAL_RCC_GetPCLK1Freq>
 80014b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	4a81      	ldr	r2, [pc, #516]	@ (80016bc <HAL_I2C_Init+0x274>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d807      	bhi.n	80014cc <HAL_I2C_Init+0x84>
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4a80      	ldr	r2, [pc, #512]	@ (80016c0 <HAL_I2C_Init+0x278>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	bf94      	ite	ls
 80014c4:	2301      	movls	r3, #1
 80014c6:	2300      	movhi	r3, #0
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	e006      	b.n	80014da <HAL_I2C_Init+0x92>
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	4a7d      	ldr	r2, [pc, #500]	@ (80016c4 <HAL_I2C_Init+0x27c>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	bf94      	ite	ls
 80014d4:	2301      	movls	r3, #1
 80014d6:	2300      	movhi	r3, #0
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e0e7      	b.n	80016b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	4a78      	ldr	r2, [pc, #480]	@ (80016c8 <HAL_I2C_Init+0x280>)
 80014e6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ea:	0c9b      	lsrs	r3, r3, #18
 80014ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	68ba      	ldr	r2, [r7, #8]
 80014fe:	430a      	orrs	r2, r1
 8001500:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	6a1b      	ldr	r3, [r3, #32]
 8001508:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	4a6a      	ldr	r2, [pc, #424]	@ (80016bc <HAL_I2C_Init+0x274>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d802      	bhi.n	800151c <HAL_I2C_Init+0xd4>
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	3301      	adds	r3, #1
 800151a:	e009      	b.n	8001530 <HAL_I2C_Init+0xe8>
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001522:	fb02 f303 	mul.w	r3, r2, r3
 8001526:	4a69      	ldr	r2, [pc, #420]	@ (80016cc <HAL_I2C_Init+0x284>)
 8001528:	fba2 2303 	umull	r2, r3, r2, r3
 800152c:	099b      	lsrs	r3, r3, #6
 800152e:	3301      	adds	r3, #1
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	6812      	ldr	r2, [r2, #0]
 8001534:	430b      	orrs	r3, r1
 8001536:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001542:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	495c      	ldr	r1, [pc, #368]	@ (80016bc <HAL_I2C_Init+0x274>)
 800154c:	428b      	cmp	r3, r1
 800154e:	d819      	bhi.n	8001584 <HAL_I2C_Init+0x13c>
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	1e59      	subs	r1, r3, #1
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	fbb1 f3f3 	udiv	r3, r1, r3
 800155e:	1c59      	adds	r1, r3, #1
 8001560:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001564:	400b      	ands	r3, r1
 8001566:	2b00      	cmp	r3, #0
 8001568:	d00a      	beq.n	8001580 <HAL_I2C_Init+0x138>
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	1e59      	subs	r1, r3, #1
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	fbb1 f3f3 	udiv	r3, r1, r3
 8001578:	3301      	adds	r3, #1
 800157a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800157e:	e051      	b.n	8001624 <HAL_I2C_Init+0x1dc>
 8001580:	2304      	movs	r3, #4
 8001582:	e04f      	b.n	8001624 <HAL_I2C_Init+0x1dc>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d111      	bne.n	80015b0 <HAL_I2C_Init+0x168>
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	1e58      	subs	r0, r3, #1
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6859      	ldr	r1, [r3, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	440b      	add	r3, r1
 800159a:	fbb0 f3f3 	udiv	r3, r0, r3
 800159e:	3301      	adds	r3, #1
 80015a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	bf0c      	ite	eq
 80015a8:	2301      	moveq	r3, #1
 80015aa:	2300      	movne	r3, #0
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	e012      	b.n	80015d6 <HAL_I2C_Init+0x18e>
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	1e58      	subs	r0, r3, #1
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6859      	ldr	r1, [r3, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	440b      	add	r3, r1
 80015be:	0099      	lsls	r1, r3, #2
 80015c0:	440b      	add	r3, r1
 80015c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80015c6:	3301      	adds	r3, #1
 80015c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	bf0c      	ite	eq
 80015d0:	2301      	moveq	r3, #1
 80015d2:	2300      	movne	r3, #0
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <HAL_I2C_Init+0x196>
 80015da:	2301      	movs	r3, #1
 80015dc:	e022      	b.n	8001624 <HAL_I2C_Init+0x1dc>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d10e      	bne.n	8001604 <HAL_I2C_Init+0x1bc>
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	1e58      	subs	r0, r3, #1
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6859      	ldr	r1, [r3, #4]
 80015ee:	460b      	mov	r3, r1
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	440b      	add	r3, r1
 80015f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80015f8:	3301      	adds	r3, #1
 80015fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001602:	e00f      	b.n	8001624 <HAL_I2C_Init+0x1dc>
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	1e58      	subs	r0, r3, #1
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6859      	ldr	r1, [r3, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	440b      	add	r3, r1
 8001612:	0099      	lsls	r1, r3, #2
 8001614:	440b      	add	r3, r1
 8001616:	fbb0 f3f3 	udiv	r3, r0, r3
 800161a:	3301      	adds	r3, #1
 800161c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001620:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001624:	6879      	ldr	r1, [r7, #4]
 8001626:	6809      	ldr	r1, [r1, #0]
 8001628:	4313      	orrs	r3, r2
 800162a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	69da      	ldr	r2, [r3, #28]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a1b      	ldr	r3, [r3, #32]
 800163e:	431a      	orrs	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001652:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	6911      	ldr	r1, [r2, #16]
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	68d2      	ldr	r2, [r2, #12]
 800165e:	4311      	orrs	r1, r2
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	6812      	ldr	r2, [r2, #0]
 8001664:	430b      	orrs	r3, r1
 8001666:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	695a      	ldr	r2, [r3, #20]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	431a      	orrs	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	430a      	orrs	r2, r1
 8001682:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f042 0201 	orr.w	r2, r2, #1
 8001692:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2220      	movs	r2, #32
 800169e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	000186a0 	.word	0x000186a0
 80016c0:	001e847f 	.word	0x001e847f
 80016c4:	003d08ff 	.word	0x003d08ff
 80016c8:	431bde83 	.word	0x431bde83
 80016cc:	10624dd3 	.word	0x10624dd3

080016d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e272      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f000 8087 	beq.w	80017fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016f0:	4b92      	ldr	r3, [pc, #584]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 030c 	and.w	r3, r3, #12
 80016f8:	2b04      	cmp	r3, #4
 80016fa:	d00c      	beq.n	8001716 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016fc:	4b8f      	ldr	r3, [pc, #572]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 030c 	and.w	r3, r3, #12
 8001704:	2b08      	cmp	r3, #8
 8001706:	d112      	bne.n	800172e <HAL_RCC_OscConfig+0x5e>
 8001708:	4b8c      	ldr	r3, [pc, #560]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001710:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001714:	d10b      	bne.n	800172e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001716:	4b89      	ldr	r3, [pc, #548]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d06c      	beq.n	80017fc <HAL_RCC_OscConfig+0x12c>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d168      	bne.n	80017fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e24c      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001736:	d106      	bne.n	8001746 <HAL_RCC_OscConfig+0x76>
 8001738:	4b80      	ldr	r3, [pc, #512]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a7f      	ldr	r2, [pc, #508]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 800173e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001742:	6013      	str	r3, [r2, #0]
 8001744:	e02e      	b.n	80017a4 <HAL_RCC_OscConfig+0xd4>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d10c      	bne.n	8001768 <HAL_RCC_OscConfig+0x98>
 800174e:	4b7b      	ldr	r3, [pc, #492]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a7a      	ldr	r2, [pc, #488]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 8001754:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	4b78      	ldr	r3, [pc, #480]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a77      	ldr	r2, [pc, #476]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 8001760:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	e01d      	b.n	80017a4 <HAL_RCC_OscConfig+0xd4>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001770:	d10c      	bne.n	800178c <HAL_RCC_OscConfig+0xbc>
 8001772:	4b72      	ldr	r3, [pc, #456]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a71      	ldr	r2, [pc, #452]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 8001778:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	4b6f      	ldr	r3, [pc, #444]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a6e      	ldr	r2, [pc, #440]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 8001784:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	e00b      	b.n	80017a4 <HAL_RCC_OscConfig+0xd4>
 800178c:	4b6b      	ldr	r3, [pc, #428]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a6a      	ldr	r2, [pc, #424]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 8001792:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	4b68      	ldr	r3, [pc, #416]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a67      	ldr	r2, [pc, #412]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 800179e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d013      	beq.n	80017d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ac:	f7ff fb80 	bl	8000eb0 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017b4:	f7ff fb7c 	bl	8000eb0 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b64      	cmp	r3, #100	@ 0x64
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e200      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c6:	4b5d      	ldr	r3, [pc, #372]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0f0      	beq.n	80017b4 <HAL_RCC_OscConfig+0xe4>
 80017d2:	e014      	b.n	80017fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d4:	f7ff fb6c 	bl	8000eb0 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017dc:	f7ff fb68 	bl	8000eb0 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b64      	cmp	r3, #100	@ 0x64
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e1ec      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ee:	4b53      	ldr	r3, [pc, #332]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1f0      	bne.n	80017dc <HAL_RCC_OscConfig+0x10c>
 80017fa:	e000      	b.n	80017fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d063      	beq.n	80018d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800180a:	4b4c      	ldr	r3, [pc, #304]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f003 030c 	and.w	r3, r3, #12
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00b      	beq.n	800182e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001816:	4b49      	ldr	r3, [pc, #292]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f003 030c 	and.w	r3, r3, #12
 800181e:	2b08      	cmp	r3, #8
 8001820:	d11c      	bne.n	800185c <HAL_RCC_OscConfig+0x18c>
 8001822:	4b46      	ldr	r3, [pc, #280]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d116      	bne.n	800185c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800182e:	4b43      	ldr	r3, [pc, #268]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d005      	beq.n	8001846 <HAL_RCC_OscConfig+0x176>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d001      	beq.n	8001846 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e1c0      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001846:	4b3d      	ldr	r3, [pc, #244]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	4939      	ldr	r1, [pc, #228]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 8001856:	4313      	orrs	r3, r2
 8001858:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800185a:	e03a      	b.n	80018d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	691b      	ldr	r3, [r3, #16]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d020      	beq.n	80018a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001864:	4b36      	ldr	r3, [pc, #216]	@ (8001940 <HAL_RCC_OscConfig+0x270>)
 8001866:	2201      	movs	r2, #1
 8001868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186a:	f7ff fb21 	bl	8000eb0 <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001872:	f7ff fb1d 	bl	8000eb0 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e1a1      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001884:	4b2d      	ldr	r3, [pc, #180]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0f0      	beq.n	8001872 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001890:	4b2a      	ldr	r3, [pc, #168]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	695b      	ldr	r3, [r3, #20]
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	4927      	ldr	r1, [pc, #156]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	600b      	str	r3, [r1, #0]
 80018a4:	e015      	b.n	80018d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018a6:	4b26      	ldr	r3, [pc, #152]	@ (8001940 <HAL_RCC_OscConfig+0x270>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ac:	f7ff fb00 	bl	8000eb0 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018b4:	f7ff fafc 	bl	8000eb0 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e180      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018c6:	4b1d      	ldr	r3, [pc, #116]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f0      	bne.n	80018b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0308 	and.w	r3, r3, #8
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d03a      	beq.n	8001954 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d019      	beq.n	800191a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018e6:	4b17      	ldr	r3, [pc, #92]	@ (8001944 <HAL_RCC_OscConfig+0x274>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ec:	f7ff fae0 	bl	8000eb0 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018f4:	f7ff fadc 	bl	8000eb0 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e160      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001906:	4b0d      	ldr	r3, [pc, #52]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 8001908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0f0      	beq.n	80018f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001912:	2001      	movs	r0, #1
 8001914:	f000 face 	bl	8001eb4 <RCC_Delay>
 8001918:	e01c      	b.n	8001954 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800191a:	4b0a      	ldr	r3, [pc, #40]	@ (8001944 <HAL_RCC_OscConfig+0x274>)
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001920:	f7ff fac6 	bl	8000eb0 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001926:	e00f      	b.n	8001948 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001928:	f7ff fac2 	bl	8000eb0 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d908      	bls.n	8001948 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e146      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
 800193a:	bf00      	nop
 800193c:	40021000 	.word	0x40021000
 8001940:	42420000 	.word	0x42420000
 8001944:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001948:	4b92      	ldr	r3, [pc, #584]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 800194a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1e9      	bne.n	8001928 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	2b00      	cmp	r3, #0
 800195e:	f000 80a6 	beq.w	8001aae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001962:	2300      	movs	r3, #0
 8001964:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001966:	4b8b      	ldr	r3, [pc, #556]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d10d      	bne.n	800198e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001972:	4b88      	ldr	r3, [pc, #544]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	4a87      	ldr	r2, [pc, #540]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001978:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800197c:	61d3      	str	r3, [r2, #28]
 800197e:	4b85      	ldr	r3, [pc, #532]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001986:	60bb      	str	r3, [r7, #8]
 8001988:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800198a:	2301      	movs	r3, #1
 800198c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198e:	4b82      	ldr	r3, [pc, #520]	@ (8001b98 <HAL_RCC_OscConfig+0x4c8>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001996:	2b00      	cmp	r3, #0
 8001998:	d118      	bne.n	80019cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800199a:	4b7f      	ldr	r3, [pc, #508]	@ (8001b98 <HAL_RCC_OscConfig+0x4c8>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a7e      	ldr	r2, [pc, #504]	@ (8001b98 <HAL_RCC_OscConfig+0x4c8>)
 80019a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019a6:	f7ff fa83 	bl	8000eb0 <HAL_GetTick>
 80019aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ac:	e008      	b.n	80019c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ae:	f7ff fa7f 	bl	8000eb0 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b64      	cmp	r3, #100	@ 0x64
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e103      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c0:	4b75      	ldr	r3, [pc, #468]	@ (8001b98 <HAL_RCC_OscConfig+0x4c8>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0f0      	beq.n	80019ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d106      	bne.n	80019e2 <HAL_RCC_OscConfig+0x312>
 80019d4:	4b6f      	ldr	r3, [pc, #444]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	4a6e      	ldr	r2, [pc, #440]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	6213      	str	r3, [r2, #32]
 80019e0:	e02d      	b.n	8001a3e <HAL_RCC_OscConfig+0x36e>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10c      	bne.n	8001a04 <HAL_RCC_OscConfig+0x334>
 80019ea:	4b6a      	ldr	r3, [pc, #424]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	4a69      	ldr	r2, [pc, #420]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 80019f0:	f023 0301 	bic.w	r3, r3, #1
 80019f4:	6213      	str	r3, [r2, #32]
 80019f6:	4b67      	ldr	r3, [pc, #412]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	4a66      	ldr	r2, [pc, #408]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 80019fc:	f023 0304 	bic.w	r3, r3, #4
 8001a00:	6213      	str	r3, [r2, #32]
 8001a02:	e01c      	b.n	8001a3e <HAL_RCC_OscConfig+0x36e>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	2b05      	cmp	r3, #5
 8001a0a:	d10c      	bne.n	8001a26 <HAL_RCC_OscConfig+0x356>
 8001a0c:	4b61      	ldr	r3, [pc, #388]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001a0e:	6a1b      	ldr	r3, [r3, #32]
 8001a10:	4a60      	ldr	r2, [pc, #384]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001a12:	f043 0304 	orr.w	r3, r3, #4
 8001a16:	6213      	str	r3, [r2, #32]
 8001a18:	4b5e      	ldr	r3, [pc, #376]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	4a5d      	ldr	r2, [pc, #372]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	6213      	str	r3, [r2, #32]
 8001a24:	e00b      	b.n	8001a3e <HAL_RCC_OscConfig+0x36e>
 8001a26:	4b5b      	ldr	r3, [pc, #364]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001a28:	6a1b      	ldr	r3, [r3, #32]
 8001a2a:	4a5a      	ldr	r2, [pc, #360]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001a2c:	f023 0301 	bic.w	r3, r3, #1
 8001a30:	6213      	str	r3, [r2, #32]
 8001a32:	4b58      	ldr	r3, [pc, #352]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001a34:	6a1b      	ldr	r3, [r3, #32]
 8001a36:	4a57      	ldr	r2, [pc, #348]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001a38:	f023 0304 	bic.w	r3, r3, #4
 8001a3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d015      	beq.n	8001a72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a46:	f7ff fa33 	bl	8000eb0 <HAL_GetTick>
 8001a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a4c:	e00a      	b.n	8001a64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a4e:	f7ff fa2f 	bl	8000eb0 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e0b1      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a64:	4b4b      	ldr	r3, [pc, #300]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0ee      	beq.n	8001a4e <HAL_RCC_OscConfig+0x37e>
 8001a70:	e014      	b.n	8001a9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a72:	f7ff fa1d 	bl	8000eb0 <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a78:	e00a      	b.n	8001a90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a7a:	f7ff fa19 	bl	8000eb0 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e09b      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a90:	4b40      	ldr	r3, [pc, #256]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1ee      	bne.n	8001a7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a9c:	7dfb      	ldrb	r3, [r7, #23]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d105      	bne.n	8001aae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aa2:	4b3c      	ldr	r3, [pc, #240]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	4a3b      	ldr	r2, [pc, #236]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001aa8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001aac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f000 8087 	beq.w	8001bc6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ab8:	4b36      	ldr	r3, [pc, #216]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 030c 	and.w	r3, r3, #12
 8001ac0:	2b08      	cmp	r3, #8
 8001ac2:	d061      	beq.n	8001b88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	69db      	ldr	r3, [r3, #28]
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d146      	bne.n	8001b5a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001acc:	4b33      	ldr	r3, [pc, #204]	@ (8001b9c <HAL_RCC_OscConfig+0x4cc>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad2:	f7ff f9ed 	bl	8000eb0 <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ada:	f7ff f9e9 	bl	8000eb0 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e06d      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aec:	4b29      	ldr	r3, [pc, #164]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1f0      	bne.n	8001ada <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a1b      	ldr	r3, [r3, #32]
 8001afc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b00:	d108      	bne.n	8001b14 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b02:	4b24      	ldr	r3, [pc, #144]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	4921      	ldr	r1, [pc, #132]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b14:	4b1f      	ldr	r3, [pc, #124]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a19      	ldr	r1, [r3, #32]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b24:	430b      	orrs	r3, r1
 8001b26:	491b      	ldr	r1, [pc, #108]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001b9c <HAL_RCC_OscConfig+0x4cc>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b32:	f7ff f9bd 	bl	8000eb0 <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b3a:	f7ff f9b9 	bl	8000eb0 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e03d      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b4c:	4b11      	ldr	r3, [pc, #68]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0f0      	beq.n	8001b3a <HAL_RCC_OscConfig+0x46a>
 8001b58:	e035      	b.n	8001bc6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b5a:	4b10      	ldr	r3, [pc, #64]	@ (8001b9c <HAL_RCC_OscConfig+0x4cc>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b60:	f7ff f9a6 	bl	8000eb0 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b68:	f7ff f9a2 	bl	8000eb0 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e026      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b7a:	4b06      	ldr	r3, [pc, #24]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f0      	bne.n	8001b68 <HAL_RCC_OscConfig+0x498>
 8001b86:	e01e      	b.n	8001bc6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	69db      	ldr	r3, [r3, #28]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d107      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e019      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40007000 	.word	0x40007000
 8001b9c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd0 <HAL_RCC_OscConfig+0x500>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d106      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d001      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e000      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40021000 	.word	0x40021000

08001bd4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d101      	bne.n	8001be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e0d0      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001be8:	4b6a      	ldr	r3, [pc, #424]	@ (8001d94 <HAL_RCC_ClockConfig+0x1c0>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d910      	bls.n	8001c18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf6:	4b67      	ldr	r3, [pc, #412]	@ (8001d94 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f023 0207 	bic.w	r2, r3, #7
 8001bfe:	4965      	ldr	r1, [pc, #404]	@ (8001d94 <HAL_RCC_ClockConfig+0x1c0>)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c06:	4b63      	ldr	r3, [pc, #396]	@ (8001d94 <HAL_RCC_ClockConfig+0x1c0>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d001      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e0b8      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d020      	beq.n	8001c66 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d005      	beq.n	8001c3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c30:	4b59      	ldr	r3, [pc, #356]	@ (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	4a58      	ldr	r2, [pc, #352]	@ (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001c36:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c3a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0308 	and.w	r3, r3, #8
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d005      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c48:	4b53      	ldr	r3, [pc, #332]	@ (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	4a52      	ldr	r2, [pc, #328]	@ (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001c52:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c54:	4b50      	ldr	r3, [pc, #320]	@ (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	494d      	ldr	r1, [pc, #308]	@ (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d040      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d107      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7a:	4b47      	ldr	r3, [pc, #284]	@ (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d115      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e07f      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d107      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c92:	4b41      	ldr	r3, [pc, #260]	@ (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d109      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e073      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca2:	4b3d      	ldr	r3, [pc, #244]	@ (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e06b      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cb2:	4b39      	ldr	r3, [pc, #228]	@ (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f023 0203 	bic.w	r2, r3, #3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	4936      	ldr	r1, [pc, #216]	@ (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cc4:	f7ff f8f4 	bl	8000eb0 <HAL_GetTick>
 8001cc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cca:	e00a      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ccc:	f7ff f8f0 	bl	8000eb0 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e053      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce2:	4b2d      	ldr	r3, [pc, #180]	@ (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 020c 	and.w	r2, r3, #12
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d1eb      	bne.n	8001ccc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cf4:	4b27      	ldr	r3, [pc, #156]	@ (8001d94 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d210      	bcs.n	8001d24 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d02:	4b24      	ldr	r3, [pc, #144]	@ (8001d94 <HAL_RCC_ClockConfig+0x1c0>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f023 0207 	bic.w	r2, r3, #7
 8001d0a:	4922      	ldr	r1, [pc, #136]	@ (8001d94 <HAL_RCC_ClockConfig+0x1c0>)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d12:	4b20      	ldr	r3, [pc, #128]	@ (8001d94 <HAL_RCC_ClockConfig+0x1c0>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d001      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e032      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0304 	and.w	r3, r3, #4
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d008      	beq.n	8001d42 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d30:	4b19      	ldr	r3, [pc, #100]	@ (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	4916      	ldr	r1, [pc, #88]	@ (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d009      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d4e:	4b12      	ldr	r3, [pc, #72]	@ (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	490e      	ldr	r1, [pc, #56]	@ (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d62:	f000 f821 	bl	8001da8 <HAL_RCC_GetSysClockFreq>
 8001d66:	4602      	mov	r2, r0
 8001d68:	4b0b      	ldr	r3, [pc, #44]	@ (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	091b      	lsrs	r3, r3, #4
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	490a      	ldr	r1, [pc, #40]	@ (8001d9c <HAL_RCC_ClockConfig+0x1c8>)
 8001d74:	5ccb      	ldrb	r3, [r1, r3]
 8001d76:	fa22 f303 	lsr.w	r3, r2, r3
 8001d7a:	4a09      	ldr	r2, [pc, #36]	@ (8001da0 <HAL_RCC_ClockConfig+0x1cc>)
 8001d7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d7e:	4b09      	ldr	r3, [pc, #36]	@ (8001da4 <HAL_RCC_ClockConfig+0x1d0>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff f852 	bl	8000e2c <HAL_InitTick>

  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40022000 	.word	0x40022000
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	080037cc 	.word	0x080037cc
 8001da0:	20000000 	.word	0x20000000
 8001da4:	20000004 	.word	0x20000004

08001da8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b087      	sub	sp, #28
 8001dac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	2300      	movs	r3, #0
 8001db4:	60bb      	str	r3, [r7, #8]
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
 8001dba:	2300      	movs	r3, #0
 8001dbc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001dc2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e3c <HAL_RCC_GetSysClockFreq+0x94>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f003 030c 	and.w	r3, r3, #12
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	d002      	beq.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x30>
 8001dd2:	2b08      	cmp	r3, #8
 8001dd4:	d003      	beq.n	8001dde <HAL_RCC_GetSysClockFreq+0x36>
 8001dd6:	e027      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dd8:	4b19      	ldr	r3, [pc, #100]	@ (8001e40 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dda:	613b      	str	r3, [r7, #16]
      break;
 8001ddc:	e027      	b.n	8001e2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	0c9b      	lsrs	r3, r3, #18
 8001de2:	f003 030f 	and.w	r3, r3, #15
 8001de6:	4a17      	ldr	r2, [pc, #92]	@ (8001e44 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001de8:	5cd3      	ldrb	r3, [r2, r3]
 8001dea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d010      	beq.n	8001e18 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001df6:	4b11      	ldr	r3, [pc, #68]	@ (8001e3c <HAL_RCC_GetSysClockFreq+0x94>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	0c5b      	lsrs	r3, r3, #17
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	4a11      	ldr	r2, [pc, #68]	@ (8001e48 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e02:	5cd3      	ldrb	r3, [r2, r3]
 8001e04:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a0d      	ldr	r2, [pc, #52]	@ (8001e40 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e0a:	fb03 f202 	mul.w	r2, r3, r2
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e14:	617b      	str	r3, [r7, #20]
 8001e16:	e004      	b.n	8001e22 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a0c      	ldr	r2, [pc, #48]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e1c:	fb02 f303 	mul.w	r3, r2, r3
 8001e20:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	613b      	str	r3, [r7, #16]
      break;
 8001e26:	e002      	b.n	8001e2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e28:	4b05      	ldr	r3, [pc, #20]	@ (8001e40 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e2a:	613b      	str	r3, [r7, #16]
      break;
 8001e2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e2e:	693b      	ldr	r3, [r7, #16]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	371c      	adds	r7, #28
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bc80      	pop	{r7}
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	007a1200 	.word	0x007a1200
 8001e44:	080037e4 	.word	0x080037e4
 8001e48:	080037f4 	.word	0x080037f4
 8001e4c:	003d0900 	.word	0x003d0900

08001e50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e54:	4b02      	ldr	r3, [pc, #8]	@ (8001e60 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e56:	681b      	ldr	r3, [r3, #0]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr
 8001e60:	20000000 	.word	0x20000000

08001e64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e68:	f7ff fff2 	bl	8001e50 <HAL_RCC_GetHCLKFreq>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	4b05      	ldr	r3, [pc, #20]	@ (8001e84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	0a1b      	lsrs	r3, r3, #8
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	4903      	ldr	r1, [pc, #12]	@ (8001e88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e7a:	5ccb      	ldrb	r3, [r1, r3]
 8001e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40021000 	.word	0x40021000
 8001e88:	080037dc 	.word	0x080037dc

08001e8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e90:	f7ff ffde 	bl	8001e50 <HAL_RCC_GetHCLKFreq>
 8001e94:	4602      	mov	r2, r0
 8001e96:	4b05      	ldr	r3, [pc, #20]	@ (8001eac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	0adb      	lsrs	r3, r3, #11
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	4903      	ldr	r1, [pc, #12]	@ (8001eb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ea2:	5ccb      	ldrb	r3, [r1, r3]
 8001ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	080037dc 	.word	0x080037dc

08001eb4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee8 <RCC_Delay+0x34>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a0a      	ldr	r2, [pc, #40]	@ (8001eec <RCC_Delay+0x38>)
 8001ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec6:	0a5b      	lsrs	r3, r3, #9
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	fb02 f303 	mul.w	r3, r2, r3
 8001ece:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ed0:	bf00      	nop
  }
  while (Delay --);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	1e5a      	subs	r2, r3, #1
 8001ed6:	60fa      	str	r2, [r7, #12]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1f9      	bne.n	8001ed0 <RCC_Delay+0x1c>
}
 8001edc:	bf00      	nop
 8001ede:	bf00      	nop
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr
 8001ee8:	20000000 	.word	0x20000000
 8001eec:	10624dd3 	.word	0x10624dd3

08001ef0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e041      	b.n	8001f86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d106      	bne.n	8001f1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7fe fe14 	bl	8000b44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2202      	movs	r2, #2
 8001f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3304      	adds	r3, #4
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4610      	mov	r0, r2
 8001f30:	f000 feac 	bl	8002c8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
	...

08001f90 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d001      	beq.n	8001fa8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e032      	b.n	800200e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2202      	movs	r2, #2
 8001fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a18      	ldr	r2, [pc, #96]	@ (8002018 <HAL_TIM_Base_Start+0x88>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d00e      	beq.n	8001fd8 <HAL_TIM_Base_Start+0x48>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fc2:	d009      	beq.n	8001fd8 <HAL_TIM_Base_Start+0x48>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a14      	ldr	r2, [pc, #80]	@ (800201c <HAL_TIM_Base_Start+0x8c>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d004      	beq.n	8001fd8 <HAL_TIM_Base_Start+0x48>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a13      	ldr	r2, [pc, #76]	@ (8002020 <HAL_TIM_Base_Start+0x90>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d111      	bne.n	8001ffc <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2b06      	cmp	r3, #6
 8001fe8:	d010      	beq.n	800200c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f042 0201 	orr.w	r2, r2, #1
 8001ff8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ffa:	e007      	b.n	800200c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f042 0201 	orr.w	r2, r2, #1
 800200a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr
 8002018:	40012c00 	.word	0x40012c00
 800201c:	40000400 	.word	0x40000400
 8002020:	40000800 	.word	0x40000800

08002024 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e041      	b.n	80020ba <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d106      	bne.n	8002050 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f839 	bl	80020c2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2202      	movs	r2, #2
 8002054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3304      	adds	r3, #4
 8002060:	4619      	mov	r1, r3
 8002062:	4610      	mov	r0, r2
 8002064:	f000 fe12 	bl	8002c8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr

080020d4 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d109      	bne.n	80020f8 <HAL_TIM_OC_Start+0x24>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	bf14      	ite	ne
 80020f0:	2301      	movne	r3, #1
 80020f2:	2300      	moveq	r3, #0
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	e022      	b.n	800213e <HAL_TIM_OC_Start+0x6a>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	d109      	bne.n	8002112 <HAL_TIM_OC_Start+0x3e>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b01      	cmp	r3, #1
 8002108:	bf14      	ite	ne
 800210a:	2301      	movne	r3, #1
 800210c:	2300      	moveq	r3, #0
 800210e:	b2db      	uxtb	r3, r3
 8002110:	e015      	b.n	800213e <HAL_TIM_OC_Start+0x6a>
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	2b08      	cmp	r3, #8
 8002116:	d109      	bne.n	800212c <HAL_TIM_OC_Start+0x58>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b01      	cmp	r3, #1
 8002122:	bf14      	ite	ne
 8002124:	2301      	movne	r3, #1
 8002126:	2300      	moveq	r3, #0
 8002128:	b2db      	uxtb	r3, r3
 800212a:	e008      	b.n	800213e <HAL_TIM_OC_Start+0x6a>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002132:	b2db      	uxtb	r3, r3
 8002134:	2b01      	cmp	r3, #1
 8002136:	bf14      	ite	ne
 8002138:	2301      	movne	r3, #1
 800213a:	2300      	moveq	r3, #0
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e05e      	b.n	8002204 <HAL_TIM_OC_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d104      	bne.n	8002156 <HAL_TIM_OC_Start+0x82>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2202      	movs	r2, #2
 8002150:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002154:	e013      	b.n	800217e <HAL_TIM_OC_Start+0xaa>
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	2b04      	cmp	r3, #4
 800215a:	d104      	bne.n	8002166 <HAL_TIM_OC_Start+0x92>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2202      	movs	r2, #2
 8002160:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002164:	e00b      	b.n	800217e <HAL_TIM_OC_Start+0xaa>
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	2b08      	cmp	r3, #8
 800216a:	d104      	bne.n	8002176 <HAL_TIM_OC_Start+0xa2>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2202      	movs	r2, #2
 8002170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002174:	e003      	b.n	800217e <HAL_TIM_OC_Start+0xaa>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2202      	movs	r2, #2
 800217a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2201      	movs	r2, #1
 8002184:	6839      	ldr	r1, [r7, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f001 f919 	bl	80033be <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a1e      	ldr	r2, [pc, #120]	@ (800220c <HAL_TIM_OC_Start+0x138>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d107      	bne.n	80021a6 <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021a4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a18      	ldr	r2, [pc, #96]	@ (800220c <HAL_TIM_OC_Start+0x138>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d00e      	beq.n	80021ce <HAL_TIM_OC_Start+0xfa>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021b8:	d009      	beq.n	80021ce <HAL_TIM_OC_Start+0xfa>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a14      	ldr	r2, [pc, #80]	@ (8002210 <HAL_TIM_OC_Start+0x13c>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d004      	beq.n	80021ce <HAL_TIM_OC_Start+0xfa>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a12      	ldr	r2, [pc, #72]	@ (8002214 <HAL_TIM_OC_Start+0x140>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d111      	bne.n	80021f2 <HAL_TIM_OC_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2b06      	cmp	r3, #6
 80021de:	d010      	beq.n	8002202 <HAL_TIM_OC_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f042 0201 	orr.w	r2, r2, #1
 80021ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021f0:	e007      	b.n	8002202 <HAL_TIM_OC_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f042 0201 	orr.w	r2, r2, #1
 8002200:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40012c00 	.word	0x40012c00
 8002210:	40000400 	.word	0x40000400
 8002214:	40000800 	.word	0x40000800

08002218 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2200      	movs	r2, #0
 8002228:	6839      	ldr	r1, [r7, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f001 f8c7 	bl	80033be <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a29      	ldr	r2, [pc, #164]	@ (80022dc <HAL_TIM_OC_Stop+0xc4>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d117      	bne.n	800226a <HAL_TIM_OC_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6a1a      	ldr	r2, [r3, #32]
 8002240:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002244:	4013      	ands	r3, r2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10f      	bne.n	800226a <HAL_TIM_OC_Stop+0x52>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6a1a      	ldr	r2, [r3, #32]
 8002250:	f240 4344 	movw	r3, #1092	@ 0x444
 8002254:	4013      	ands	r3, r2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d107      	bne.n	800226a <HAL_TIM_OC_Stop+0x52>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002268:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6a1a      	ldr	r2, [r3, #32]
 8002270:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002274:	4013      	ands	r3, r2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d10f      	bne.n	800229a <HAL_TIM_OC_Stop+0x82>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6a1a      	ldr	r2, [r3, #32]
 8002280:	f240 4344 	movw	r3, #1092	@ 0x444
 8002284:	4013      	ands	r3, r2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d107      	bne.n	800229a <HAL_TIM_OC_Stop+0x82>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f022 0201 	bic.w	r2, r2, #1
 8002298:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d104      	bne.n	80022aa <HAL_TIM_OC_Stop+0x92>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022a8:	e013      	b.n	80022d2 <HAL_TIM_OC_Stop+0xba>
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	2b04      	cmp	r3, #4
 80022ae:	d104      	bne.n	80022ba <HAL_TIM_OC_Stop+0xa2>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022b8:	e00b      	b.n	80022d2 <HAL_TIM_OC_Stop+0xba>
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	2b08      	cmp	r3, #8
 80022be:	d104      	bne.n	80022ca <HAL_TIM_OC_Stop+0xb2>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80022c8:	e003      	b.n	80022d2 <HAL_TIM_OC_Stop+0xba>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40012c00 	.word	0x40012c00

080022e0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e041      	b.n	8002376 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d106      	bne.n	800230c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 f839 	bl	800237e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2202      	movs	r2, #2
 8002310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	3304      	adds	r3, #4
 800231c:	4619      	mov	r1, r3
 800231e:	4610      	mov	r0, r2
 8002320:	f000 fcb4 	bl	8002c8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr

08002390 <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2200      	movs	r2, #0
 80023a0:	6839      	ldr	r1, [r7, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f001 f80b 	bl	80033be <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6a1a      	ldr	r2, [r3, #32]
 80023ae:	f241 1311 	movw	r3, #4369	@ 0x1111
 80023b2:	4013      	ands	r3, r2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d10f      	bne.n	80023d8 <HAL_TIM_IC_Stop+0x48>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6a1a      	ldr	r2, [r3, #32]
 80023be:	f240 4344 	movw	r3, #1092	@ 0x444
 80023c2:	4013      	ands	r3, r2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d107      	bne.n	80023d8 <HAL_TIM_IC_Stop+0x48>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0201 	bic.w	r2, r2, #1
 80023d6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d104      	bne.n	80023e8 <HAL_TIM_IC_Stop+0x58>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023e6:	e013      	b.n	8002410 <HAL_TIM_IC_Stop+0x80>
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	d104      	bne.n	80023f8 <HAL_TIM_IC_Stop+0x68>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023f6:	e00b      	b.n	8002410 <HAL_TIM_IC_Stop+0x80>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	2b08      	cmp	r3, #8
 80023fc:	d104      	bne.n	8002408 <HAL_TIM_IC_Stop+0x78>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002406:	e003      	b.n	8002410 <HAL_TIM_IC_Stop+0x80>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d104      	bne.n	8002420 <HAL_TIM_IC_Stop+0x90>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800241e:	e013      	b.n	8002448 <HAL_TIM_IC_Stop+0xb8>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	2b04      	cmp	r3, #4
 8002424:	d104      	bne.n	8002430 <HAL_TIM_IC_Stop+0xa0>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800242e:	e00b      	b.n	8002448 <HAL_TIM_IC_Stop+0xb8>
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	2b08      	cmp	r3, #8
 8002434:	d104      	bne.n	8002440 <HAL_TIM_IC_Stop+0xb0>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800243e:	e003      	b.n	8002448 <HAL_TIM_IC_Stop+0xb8>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
	...

08002454 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800245e:	2300      	movs	r3, #0
 8002460:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d104      	bne.n	8002472 <HAL_TIM_IC_Start_IT+0x1e>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800246e:	b2db      	uxtb	r3, r3
 8002470:	e013      	b.n	800249a <HAL_TIM_IC_Start_IT+0x46>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	2b04      	cmp	r3, #4
 8002476:	d104      	bne.n	8002482 <HAL_TIM_IC_Start_IT+0x2e>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800247e:	b2db      	uxtb	r3, r3
 8002480:	e00b      	b.n	800249a <HAL_TIM_IC_Start_IT+0x46>
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	2b08      	cmp	r3, #8
 8002486:	d104      	bne.n	8002492 <HAL_TIM_IC_Start_IT+0x3e>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800248e:	b2db      	uxtb	r3, r3
 8002490:	e003      	b.n	800249a <HAL_TIM_IC_Start_IT+0x46>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002498:	b2db      	uxtb	r3, r3
 800249a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d104      	bne.n	80024ac <HAL_TIM_IC_Start_IT+0x58>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	e013      	b.n	80024d4 <HAL_TIM_IC_Start_IT+0x80>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d104      	bne.n	80024bc <HAL_TIM_IC_Start_IT+0x68>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	e00b      	b.n	80024d4 <HAL_TIM_IC_Start_IT+0x80>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	2b08      	cmp	r3, #8
 80024c0:	d104      	bne.n	80024cc <HAL_TIM_IC_Start_IT+0x78>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	e003      	b.n	80024d4 <HAL_TIM_IC_Start_IT+0x80>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80024d6:	7bbb      	ldrb	r3, [r7, #14]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d102      	bne.n	80024e2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80024dc:	7b7b      	ldrb	r3, [r7, #13]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d001      	beq.n	80024e6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e0b8      	b.n	8002658 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d104      	bne.n	80024f6 <HAL_TIM_IC_Start_IT+0xa2>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2202      	movs	r2, #2
 80024f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80024f4:	e013      	b.n	800251e <HAL_TIM_IC_Start_IT+0xca>
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	2b04      	cmp	r3, #4
 80024fa:	d104      	bne.n	8002506 <HAL_TIM_IC_Start_IT+0xb2>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2202      	movs	r2, #2
 8002500:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002504:	e00b      	b.n	800251e <HAL_TIM_IC_Start_IT+0xca>
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	2b08      	cmp	r3, #8
 800250a:	d104      	bne.n	8002516 <HAL_TIM_IC_Start_IT+0xc2>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2202      	movs	r2, #2
 8002510:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002514:	e003      	b.n	800251e <HAL_TIM_IC_Start_IT+0xca>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2202      	movs	r2, #2
 800251a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d104      	bne.n	800252e <HAL_TIM_IC_Start_IT+0xda>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2202      	movs	r2, #2
 8002528:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800252c:	e013      	b.n	8002556 <HAL_TIM_IC_Start_IT+0x102>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	2b04      	cmp	r3, #4
 8002532:	d104      	bne.n	800253e <HAL_TIM_IC_Start_IT+0xea>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2202      	movs	r2, #2
 8002538:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800253c:	e00b      	b.n	8002556 <HAL_TIM_IC_Start_IT+0x102>
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	2b08      	cmp	r3, #8
 8002542:	d104      	bne.n	800254e <HAL_TIM_IC_Start_IT+0xfa>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2202      	movs	r2, #2
 8002548:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800254c:	e003      	b.n	8002556 <HAL_TIM_IC_Start_IT+0x102>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2202      	movs	r2, #2
 8002552:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	2b0c      	cmp	r3, #12
 800255a:	d841      	bhi.n	80025e0 <HAL_TIM_IC_Start_IT+0x18c>
 800255c:	a201      	add	r2, pc, #4	@ (adr r2, 8002564 <HAL_TIM_IC_Start_IT+0x110>)
 800255e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002562:	bf00      	nop
 8002564:	08002599 	.word	0x08002599
 8002568:	080025e1 	.word	0x080025e1
 800256c:	080025e1 	.word	0x080025e1
 8002570:	080025e1 	.word	0x080025e1
 8002574:	080025ab 	.word	0x080025ab
 8002578:	080025e1 	.word	0x080025e1
 800257c:	080025e1 	.word	0x080025e1
 8002580:	080025e1 	.word	0x080025e1
 8002584:	080025bd 	.word	0x080025bd
 8002588:	080025e1 	.word	0x080025e1
 800258c:	080025e1 	.word	0x080025e1
 8002590:	080025e1 	.word	0x080025e1
 8002594:	080025cf 	.word	0x080025cf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68da      	ldr	r2, [r3, #12]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f042 0202 	orr.w	r2, r2, #2
 80025a6:	60da      	str	r2, [r3, #12]
      break;
 80025a8:	e01d      	b.n	80025e6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68da      	ldr	r2, [r3, #12]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f042 0204 	orr.w	r2, r2, #4
 80025b8:	60da      	str	r2, [r3, #12]
      break;
 80025ba:	e014      	b.n	80025e6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68da      	ldr	r2, [r3, #12]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 0208 	orr.w	r2, r2, #8
 80025ca:	60da      	str	r2, [r3, #12]
      break;
 80025cc:	e00b      	b.n	80025e6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68da      	ldr	r2, [r3, #12]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f042 0210 	orr.w	r2, r2, #16
 80025dc:	60da      	str	r2, [r3, #12]
      break;
 80025de:	e002      	b.n	80025e6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	73fb      	strb	r3, [r7, #15]
      break;
 80025e4:	bf00      	nop
  }

  if (status == HAL_OK)
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d134      	bne.n	8002656 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2201      	movs	r2, #1
 80025f2:	6839      	ldr	r1, [r7, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f000 fee2 	bl	80033be <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a18      	ldr	r2, [pc, #96]	@ (8002660 <HAL_TIM_IC_Start_IT+0x20c>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d00e      	beq.n	8002622 <HAL_TIM_IC_Start_IT+0x1ce>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800260c:	d009      	beq.n	8002622 <HAL_TIM_IC_Start_IT+0x1ce>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a14      	ldr	r2, [pc, #80]	@ (8002664 <HAL_TIM_IC_Start_IT+0x210>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d004      	beq.n	8002622 <HAL_TIM_IC_Start_IT+0x1ce>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a12      	ldr	r2, [pc, #72]	@ (8002668 <HAL_TIM_IC_Start_IT+0x214>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d111      	bne.n	8002646 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	2b06      	cmp	r3, #6
 8002632:	d010      	beq.n	8002656 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f042 0201 	orr.w	r2, r2, #1
 8002642:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002644:	e007      	b.n	8002656 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f042 0201 	orr.w	r2, r2, #1
 8002654:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002656:	7bfb      	ldrb	r3, [r7, #15]
}
 8002658:	4618      	mov	r0, r3
 800265a:	3710      	adds	r7, #16
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40012c00 	.word	0x40012c00
 8002664:	40000400 	.word	0x40000400
 8002668:	40000800 	.word	0x40000800

0800266c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d020      	beq.n	80026d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d01b      	beq.n	80026d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f06f 0202 	mvn.w	r2, #2
 80026a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	f003 0303 	and.w	r3, r3, #3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d003      	beq.n	80026be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7fd fed8 	bl	800046c <HAL_TIM_IC_CaptureCallback>
 80026bc:	e005      	b.n	80026ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7fd ff18 	bl	80004f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 face 	bl	8002c66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	f003 0304 	and.w	r3, r3, #4
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d020      	beq.n	800271c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d01b      	beq.n	800271c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f06f 0204 	mvn.w	r2, #4
 80026ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2202      	movs	r2, #2
 80026f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7fd feb2 	bl	800046c <HAL_TIM_IC_CaptureCallback>
 8002708:	e005      	b.n	8002716 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7fd fef2 	bl	80004f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 faa8 	bl	8002c66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	2b00      	cmp	r3, #0
 8002724:	d020      	beq.n	8002768 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f003 0308 	and.w	r3, r3, #8
 800272c:	2b00      	cmp	r3, #0
 800272e:	d01b      	beq.n	8002768 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f06f 0208 	mvn.w	r2, #8
 8002738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2204      	movs	r2, #4
 800273e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	f003 0303 	and.w	r3, r3, #3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7fd fe8c 	bl	800046c <HAL_TIM_IC_CaptureCallback>
 8002754:	e005      	b.n	8002762 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7fd fecc 	bl	80004f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f000 fa82 	bl	8002c66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	f003 0310 	and.w	r3, r3, #16
 800276e:	2b00      	cmp	r3, #0
 8002770:	d020      	beq.n	80027b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f003 0310 	and.w	r3, r3, #16
 8002778:	2b00      	cmp	r3, #0
 800277a:	d01b      	beq.n	80027b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f06f 0210 	mvn.w	r2, #16
 8002784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2208      	movs	r2, #8
 800278a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7fd fe66 	bl	800046c <HAL_TIM_IC_CaptureCallback>
 80027a0:	e005      	b.n	80027ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f7fd fea6 	bl	80004f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 fa5c 	bl	8002c66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00c      	beq.n	80027d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d007      	beq.n	80027d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f06f 0201 	mvn.w	r2, #1
 80027d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 fa3e 	bl	8002c54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00c      	beq.n	80027fc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d007      	beq.n	80027fc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80027f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 fe6d 	bl	80034d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00c      	beq.n	8002820 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800280c:	2b00      	cmp	r3, #0
 800280e:	d007      	beq.n	8002820 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 fa2c 	bl	8002c78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	f003 0320 	and.w	r3, r3, #32
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00c      	beq.n	8002844 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f003 0320 	and.w	r3, r3, #32
 8002830:	2b00      	cmp	r3, #0
 8002832:	d007      	beq.n	8002844 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f06f 0220 	mvn.w	r2, #32
 800283c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 fe40 	bl	80034c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002844:	bf00      	nop
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002858:	2300      	movs	r3, #0
 800285a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002862:	2b01      	cmp	r3, #1
 8002864:	d101      	bne.n	800286a <HAL_TIM_OC_ConfigChannel+0x1e>
 8002866:	2302      	movs	r3, #2
 8002868:	e048      	b.n	80028fc <HAL_TIM_OC_ConfigChannel+0xb0>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b0c      	cmp	r3, #12
 8002876:	d839      	bhi.n	80028ec <HAL_TIM_OC_ConfigChannel+0xa0>
 8002878:	a201      	add	r2, pc, #4	@ (adr r2, 8002880 <HAL_TIM_OC_ConfigChannel+0x34>)
 800287a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800287e:	bf00      	nop
 8002880:	080028b5 	.word	0x080028b5
 8002884:	080028ed 	.word	0x080028ed
 8002888:	080028ed 	.word	0x080028ed
 800288c:	080028ed 	.word	0x080028ed
 8002890:	080028c3 	.word	0x080028c3
 8002894:	080028ed 	.word	0x080028ed
 8002898:	080028ed 	.word	0x080028ed
 800289c:	080028ed 	.word	0x080028ed
 80028a0:	080028d1 	.word	0x080028d1
 80028a4:	080028ed 	.word	0x080028ed
 80028a8:	080028ed 	.word	0x080028ed
 80028ac:	080028ed 	.word	0x080028ed
 80028b0:	080028df 	.word	0x080028df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68b9      	ldr	r1, [r7, #8]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f000 fa54 	bl	8002d68 <TIM_OC1_SetConfig>
      break;
 80028c0:	e017      	b.n	80028f2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68b9      	ldr	r1, [r7, #8]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f000 fab3 	bl	8002e34 <TIM_OC2_SetConfig>
      break;
 80028ce:	e010      	b.n	80028f2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68b9      	ldr	r1, [r7, #8]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 fb16 	bl	8002f08 <TIM_OC3_SetConfig>
      break;
 80028dc:	e009      	b.n	80028f2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68b9      	ldr	r1, [r7, #8]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f000 fb79 	bl	8002fdc <TIM_OC4_SetConfig>
      break;
 80028ea:	e002      	b.n	80028f2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	75fb      	strb	r3, [r7, #23]
      break;
 80028f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80028fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002910:	2300      	movs	r3, #0
 8002912:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800291a:	2b01      	cmp	r3, #1
 800291c:	d101      	bne.n	8002922 <HAL_TIM_IC_ConfigChannel+0x1e>
 800291e:	2302      	movs	r3, #2
 8002920:	e088      	b.n	8002a34 <HAL_TIM_IC_ConfigChannel+0x130>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d11b      	bne.n	8002968 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002940:	f000 fb9a 	bl	8003078 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	699a      	ldr	r2, [r3, #24]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 020c 	bic.w	r2, r2, #12
 8002952:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6999      	ldr	r1, [r3, #24]
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	619a      	str	r2, [r3, #24]
 8002966:	e060      	b.n	8002a2a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b04      	cmp	r3, #4
 800296c:	d11c      	bne.n	80029a8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800297e:	f000 fc03 	bl	8003188 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	699a      	ldr	r2, [r3, #24]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002990:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6999      	ldr	r1, [r3, #24]
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	021a      	lsls	r2, r3, #8
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	430a      	orrs	r2, r1
 80029a4:	619a      	str	r2, [r3, #24]
 80029a6:	e040      	b.n	8002a2a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b08      	cmp	r3, #8
 80029ac:	d11b      	bne.n	80029e6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80029be:	f000 fc4e 	bl	800325e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	69da      	ldr	r2, [r3, #28]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 020c 	bic.w	r2, r2, #12
 80029d0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	69d9      	ldr	r1, [r3, #28]
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	61da      	str	r2, [r3, #28]
 80029e4:	e021      	b.n	8002a2a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2b0c      	cmp	r3, #12
 80029ea:	d11c      	bne.n	8002a26 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80029fc:	f000 fc6a 	bl	80032d4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	69da      	ldr	r2, [r3, #28]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002a0e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	69d9      	ldr	r1, [r3, #28]
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	021a      	lsls	r2, r3, #8
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	430a      	orrs	r2, r1
 8002a22:	61da      	str	r2, [r3, #28]
 8002a24:	e001      	b.n	8002a2a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a32:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3718      	adds	r7, #24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a46:	2300      	movs	r3, #0
 8002a48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d101      	bne.n	8002a58 <HAL_TIM_ConfigClockSource+0x1c>
 8002a54:	2302      	movs	r3, #2
 8002a56:	e0b4      	b.n	8002bc2 <HAL_TIM_ConfigClockSource+0x186>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2202      	movs	r2, #2
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002a76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a90:	d03e      	beq.n	8002b10 <HAL_TIM_ConfigClockSource+0xd4>
 8002a92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a96:	f200 8087 	bhi.w	8002ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8002a9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a9e:	f000 8086 	beq.w	8002bae <HAL_TIM_ConfigClockSource+0x172>
 8002aa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002aa6:	d87f      	bhi.n	8002ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8002aa8:	2b70      	cmp	r3, #112	@ 0x70
 8002aaa:	d01a      	beq.n	8002ae2 <HAL_TIM_ConfigClockSource+0xa6>
 8002aac:	2b70      	cmp	r3, #112	@ 0x70
 8002aae:	d87b      	bhi.n	8002ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ab0:	2b60      	cmp	r3, #96	@ 0x60
 8002ab2:	d050      	beq.n	8002b56 <HAL_TIM_ConfigClockSource+0x11a>
 8002ab4:	2b60      	cmp	r3, #96	@ 0x60
 8002ab6:	d877      	bhi.n	8002ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ab8:	2b50      	cmp	r3, #80	@ 0x50
 8002aba:	d03c      	beq.n	8002b36 <HAL_TIM_ConfigClockSource+0xfa>
 8002abc:	2b50      	cmp	r3, #80	@ 0x50
 8002abe:	d873      	bhi.n	8002ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ac0:	2b40      	cmp	r3, #64	@ 0x40
 8002ac2:	d058      	beq.n	8002b76 <HAL_TIM_ConfigClockSource+0x13a>
 8002ac4:	2b40      	cmp	r3, #64	@ 0x40
 8002ac6:	d86f      	bhi.n	8002ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ac8:	2b30      	cmp	r3, #48	@ 0x30
 8002aca:	d064      	beq.n	8002b96 <HAL_TIM_ConfigClockSource+0x15a>
 8002acc:	2b30      	cmp	r3, #48	@ 0x30
 8002ace:	d86b      	bhi.n	8002ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ad0:	2b20      	cmp	r3, #32
 8002ad2:	d060      	beq.n	8002b96 <HAL_TIM_ConfigClockSource+0x15a>
 8002ad4:	2b20      	cmp	r3, #32
 8002ad6:	d867      	bhi.n	8002ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d05c      	beq.n	8002b96 <HAL_TIM_ConfigClockSource+0x15a>
 8002adc:	2b10      	cmp	r3, #16
 8002ade:	d05a      	beq.n	8002b96 <HAL_TIM_ConfigClockSource+0x15a>
 8002ae0:	e062      	b.n	8002ba8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002af2:	f000 fc45 	bl	8003380 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002b04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	609a      	str	r2, [r3, #8]
      break;
 8002b0e:	e04f      	b.n	8002bb0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b20:	f000 fc2e 	bl	8003380 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689a      	ldr	r2, [r3, #8]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b32:	609a      	str	r2, [r3, #8]
      break;
 8002b34:	e03c      	b.n	8002bb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b42:	461a      	mov	r2, r3
 8002b44:	f000 faf2 	bl	800312c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2150      	movs	r1, #80	@ 0x50
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 fbfc 	bl	800334c <TIM_ITRx_SetConfig>
      break;
 8002b54:	e02c      	b.n	8002bb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b62:	461a      	mov	r2, r3
 8002b64:	f000 fb4c 	bl	8003200 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2160      	movs	r1, #96	@ 0x60
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f000 fbec 	bl	800334c <TIM_ITRx_SetConfig>
      break;
 8002b74:	e01c      	b.n	8002bb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b82:	461a      	mov	r2, r3
 8002b84:	f000 fad2 	bl	800312c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2140      	movs	r1, #64	@ 0x40
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f000 fbdc 	bl	800334c <TIM_ITRx_SetConfig>
      break;
 8002b94:	e00c      	b.n	8002bb0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	4610      	mov	r0, r2
 8002ba2:	f000 fbd3 	bl	800334c <TIM_ITRx_SetConfig>
      break;
 8002ba6:	e003      	b.n	8002bb0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	73fb      	strb	r3, [r7, #15]
      break;
 8002bac:	e000      	b.n	8002bb0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002bae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
	...

08002bcc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	2b0c      	cmp	r3, #12
 8002bde:	d831      	bhi.n	8002c44 <HAL_TIM_ReadCapturedValue+0x78>
 8002be0:	a201      	add	r2, pc, #4	@ (adr r2, 8002be8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be6:	bf00      	nop
 8002be8:	08002c1d 	.word	0x08002c1d
 8002bec:	08002c45 	.word	0x08002c45
 8002bf0:	08002c45 	.word	0x08002c45
 8002bf4:	08002c45 	.word	0x08002c45
 8002bf8:	08002c27 	.word	0x08002c27
 8002bfc:	08002c45 	.word	0x08002c45
 8002c00:	08002c45 	.word	0x08002c45
 8002c04:	08002c45 	.word	0x08002c45
 8002c08:	08002c31 	.word	0x08002c31
 8002c0c:	08002c45 	.word	0x08002c45
 8002c10:	08002c45 	.word	0x08002c45
 8002c14:	08002c45 	.word	0x08002c45
 8002c18:	08002c3b 	.word	0x08002c3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c22:	60fb      	str	r3, [r7, #12]

      break;
 8002c24:	e00f      	b.n	8002c46 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c2c:	60fb      	str	r3, [r7, #12]

      break;
 8002c2e:	e00a      	b.n	8002c46 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c36:	60fb      	str	r3, [r7, #12]

      break;
 8002c38:	e005      	b.n	8002c46 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c40:	60fb      	str	r3, [r7, #12]

      break;
 8002c42:	e000      	b.n	8002c46 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002c44:	bf00      	nop
  }

  return tmpreg;
 8002c46:	68fb      	ldr	r3, [r7, #12]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3714      	adds	r7, #20
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bc80      	pop	{r7}
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop

08002c54 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bc80      	pop	{r7}
 8002c64:	4770      	bx	lr

08002c66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b083      	sub	sp, #12
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c6e:	bf00      	nop
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bc80      	pop	{r7}
 8002c76:	4770      	bx	lr

08002c78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bc80      	pop	{r7}
 8002c88:	4770      	bx	lr
	...

08002c8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a2f      	ldr	r2, [pc, #188]	@ (8002d5c <TIM_Base_SetConfig+0xd0>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d00b      	beq.n	8002cbc <TIM_Base_SetConfig+0x30>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002caa:	d007      	beq.n	8002cbc <TIM_Base_SetConfig+0x30>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a2c      	ldr	r2, [pc, #176]	@ (8002d60 <TIM_Base_SetConfig+0xd4>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d003      	beq.n	8002cbc <TIM_Base_SetConfig+0x30>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a2b      	ldr	r2, [pc, #172]	@ (8002d64 <TIM_Base_SetConfig+0xd8>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d108      	bne.n	8002cce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a22      	ldr	r2, [pc, #136]	@ (8002d5c <TIM_Base_SetConfig+0xd0>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d00b      	beq.n	8002cee <TIM_Base_SetConfig+0x62>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cdc:	d007      	beq.n	8002cee <TIM_Base_SetConfig+0x62>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a1f      	ldr	r2, [pc, #124]	@ (8002d60 <TIM_Base_SetConfig+0xd4>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d003      	beq.n	8002cee <TIM_Base_SetConfig+0x62>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a1e      	ldr	r2, [pc, #120]	@ (8002d64 <TIM_Base_SetConfig+0xd8>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d108      	bne.n	8002d00 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a0d      	ldr	r2, [pc, #52]	@ (8002d5c <TIM_Base_SetConfig+0xd0>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d103      	bne.n	8002d34 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	691a      	ldr	r2, [r3, #16]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d005      	beq.n	8002d52 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	f023 0201 	bic.w	r2, r3, #1
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	611a      	str	r2, [r3, #16]
  }
}
 8002d52:	bf00      	nop
 8002d54:	3714      	adds	r7, #20
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bc80      	pop	{r7}
 8002d5a:	4770      	bx	lr
 8002d5c:	40012c00 	.word	0x40012c00
 8002d60:	40000400 	.word	0x40000400
 8002d64:	40000800 	.word	0x40000800

08002d68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b087      	sub	sp, #28
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	f023 0201 	bic.w	r2, r3, #1
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f023 0303 	bic.w	r3, r3, #3
 8002d9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f023 0302 	bic.w	r3, r3, #2
 8002db0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a1c      	ldr	r2, [pc, #112]	@ (8002e30 <TIM_OC1_SetConfig+0xc8>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d10c      	bne.n	8002dde <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	f023 0308 	bic.w	r3, r3, #8
 8002dca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f023 0304 	bic.w	r3, r3, #4
 8002ddc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a13      	ldr	r2, [pc, #76]	@ (8002e30 <TIM_OC1_SetConfig+0xc8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d111      	bne.n	8002e0a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002dec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002df4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	621a      	str	r2, [r3, #32]
}
 8002e24:	bf00      	nop
 8002e26:	371c      	adds	r7, #28
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bc80      	pop	{r7}
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	40012c00 	.word	0x40012c00

08002e34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b087      	sub	sp, #28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	f023 0210 	bic.w	r2, r3, #16
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	021b      	lsls	r3, r3, #8
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	f023 0320 	bic.w	r3, r3, #32
 8002e7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	011b      	lsls	r3, r3, #4
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a1d      	ldr	r2, [pc, #116]	@ (8002f04 <TIM_OC2_SetConfig+0xd0>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d10d      	bne.n	8002eb0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	011b      	lsls	r3, r3, #4
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002eae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a14      	ldr	r2, [pc, #80]	@ (8002f04 <TIM_OC2_SetConfig+0xd0>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d113      	bne.n	8002ee0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002ebe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002ec6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	621a      	str	r2, [r3, #32]
}
 8002efa:	bf00      	nop
 8002efc:	371c      	adds	r7, #28
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr
 8002f04:	40012c00 	.word	0x40012c00

08002f08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b087      	sub	sp, #28
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f023 0303 	bic.w	r3, r3, #3
 8002f3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002f50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	021b      	lsls	r3, r3, #8
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a1d      	ldr	r2, [pc, #116]	@ (8002fd8 <TIM_OC3_SetConfig+0xd0>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d10d      	bne.n	8002f82 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002f6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	021b      	lsls	r3, r3, #8
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002f80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a14      	ldr	r2, [pc, #80]	@ (8002fd8 <TIM_OC3_SetConfig+0xd0>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d113      	bne.n	8002fb2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002f98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	011b      	lsls	r3, r3, #4
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	011b      	lsls	r3, r3, #4
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	621a      	str	r2, [r3, #32]
}
 8002fcc:	bf00      	nop
 8002fce:	371c      	adds	r7, #28
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bc80      	pop	{r7}
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	40012c00 	.word	0x40012c00

08002fdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b087      	sub	sp, #28
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800300a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003012:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	021b      	lsls	r3, r3, #8
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	4313      	orrs	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003026:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	031b      	lsls	r3, r3, #12
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	4313      	orrs	r3, r2
 8003032:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a0f      	ldr	r2, [pc, #60]	@ (8003074 <TIM_OC4_SetConfig+0x98>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d109      	bne.n	8003050 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003042:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	019b      	lsls	r3, r3, #6
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	4313      	orrs	r3, r2
 800304e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	621a      	str	r2, [r3, #32]
}
 800306a:	bf00      	nop
 800306c:	371c      	adds	r7, #28
 800306e:	46bd      	mov	sp, r7
 8003070:	bc80      	pop	{r7}
 8003072:	4770      	bx	lr
 8003074:	40012c00 	.word	0x40012c00

08003078 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003078:	b480      	push	{r7}
 800307a:	b087      	sub	sp, #28
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
 8003084:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	f023 0201 	bic.w	r2, r3, #1
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	4a1f      	ldr	r2, [pc, #124]	@ (8003120 <TIM_TI1_SetConfig+0xa8>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d00b      	beq.n	80030be <TIM_TI1_SetConfig+0x46>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030ac:	d007      	beq.n	80030be <TIM_TI1_SetConfig+0x46>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	4a1c      	ldr	r2, [pc, #112]	@ (8003124 <TIM_TI1_SetConfig+0xac>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d003      	beq.n	80030be <TIM_TI1_SetConfig+0x46>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	4a1b      	ldr	r2, [pc, #108]	@ (8003128 <TIM_TI1_SetConfig+0xb0>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d101      	bne.n	80030c2 <TIM_TI1_SetConfig+0x4a>
 80030be:	2301      	movs	r3, #1
 80030c0:	e000      	b.n	80030c4 <TIM_TI1_SetConfig+0x4c>
 80030c2:	2300      	movs	r3, #0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d008      	beq.n	80030da <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	f023 0303 	bic.w	r3, r3, #3
 80030ce:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	617b      	str	r3, [r7, #20]
 80030d8:	e003      	b.n	80030e2 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f043 0301 	orr.w	r3, r3, #1
 80030e0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80030e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	011b      	lsls	r3, r3, #4
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	f023 030a 	bic.w	r3, r3, #10
 80030fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	f003 030a 	and.w	r3, r3, #10
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	4313      	orrs	r3, r2
 8003108:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	621a      	str	r2, [r3, #32]
}
 8003116:	bf00      	nop
 8003118:	371c      	adds	r7, #28
 800311a:	46bd      	mov	sp, r7
 800311c:	bc80      	pop	{r7}
 800311e:	4770      	bx	lr
 8003120:	40012c00 	.word	0x40012c00
 8003124:	40000400 	.word	0x40000400
 8003128:	40000800 	.word	0x40000800

0800312c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800312c:	b480      	push	{r7}
 800312e:	b087      	sub	sp, #28
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6a1b      	ldr	r3, [r3, #32]
 800313c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	f023 0201 	bic.w	r2, r3, #1
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003156:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	011b      	lsls	r3, r3, #4
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	4313      	orrs	r3, r2
 8003160:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	f023 030a 	bic.w	r3, r3, #10
 8003168:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	4313      	orrs	r3, r2
 8003170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	621a      	str	r2, [r3, #32]
}
 800317e:	bf00      	nop
 8003180:	371c      	adds	r7, #28
 8003182:	46bd      	mov	sp, r7
 8003184:	bc80      	pop	{r7}
 8003186:	4770      	bx	lr

08003188 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003188:	b480      	push	{r7}
 800318a:	b087      	sub	sp, #28
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
 8003194:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	f023 0210 	bic.w	r2, r3, #16
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	021b      	lsls	r3, r3, #8
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80031c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	031b      	lsls	r3, r3, #12
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80031da:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	621a      	str	r2, [r3, #32]
}
 80031f6:	bf00      	nop
 80031f8:	371c      	adds	r7, #28
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc80      	pop	{r7}
 80031fe:	4770      	bx	lr

08003200 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003200:	b480      	push	{r7}
 8003202:	b087      	sub	sp, #28
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	f023 0210 	bic.w	r2, r3, #16
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800322a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	031b      	lsls	r3, r3, #12
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	4313      	orrs	r3, r2
 8003234:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800323c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	011b      	lsls	r3, r3, #4
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	4313      	orrs	r3, r2
 8003246:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	621a      	str	r2, [r3, #32]
}
 8003254:	bf00      	nop
 8003256:	371c      	adds	r7, #28
 8003258:	46bd      	mov	sp, r7
 800325a:	bc80      	pop	{r7}
 800325c:	4770      	bx	lr

0800325e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800325e:	b480      	push	{r7}
 8003260:	b087      	sub	sp, #28
 8003262:	af00      	add	r7, sp, #0
 8003264:	60f8      	str	r0, [r7, #12]
 8003266:	60b9      	str	r1, [r7, #8]
 8003268:	607a      	str	r2, [r7, #4]
 800326a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	f023 0303 	bic.w	r3, r3, #3
 800328a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4313      	orrs	r3, r2
 8003292:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800329a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	011b      	lsls	r3, r3, #4
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80032ae:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	021b      	lsls	r3, r3, #8
 80032b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	621a      	str	r2, [r3, #32]
}
 80032ca:	bf00      	nop
 80032cc:	371c      	adds	r7, #28
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bc80      	pop	{r7}
 80032d2:	4770      	bx	lr

080032d4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b087      	sub	sp, #28
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
 80032e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	69db      	ldr	r3, [r3, #28]
 80032f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003300:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	021b      	lsls	r3, r3, #8
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	4313      	orrs	r3, r2
 800330a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003312:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	031b      	lsls	r3, r3, #12
 8003318:	b29b      	uxth	r3, r3
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	4313      	orrs	r3, r2
 800331e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003326:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	031b      	lsls	r3, r3, #12
 800332c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	4313      	orrs	r3, r2
 8003334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	621a      	str	r2, [r3, #32]
}
 8003342:	bf00      	nop
 8003344:	371c      	adds	r7, #28
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr

0800334c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003362:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003364:	683a      	ldr	r2, [r7, #0]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	4313      	orrs	r3, r2
 800336a:	f043 0307 	orr.w	r3, r3, #7
 800336e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	609a      	str	r2, [r3, #8]
}
 8003376:	bf00      	nop
 8003378:	3714      	adds	r7, #20
 800337a:	46bd      	mov	sp, r7
 800337c:	bc80      	pop	{r7}
 800337e:	4770      	bx	lr

08003380 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003380:	b480      	push	{r7}
 8003382:	b087      	sub	sp, #28
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
 800338c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800339a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	021a      	lsls	r2, r3, #8
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	431a      	orrs	r2, r3
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	609a      	str	r2, [r3, #8]
}
 80033b4:	bf00      	nop
 80033b6:	371c      	adds	r7, #28
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bc80      	pop	{r7}
 80033bc:	4770      	bx	lr

080033be <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80033be:	b480      	push	{r7}
 80033c0:	b087      	sub	sp, #28
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	60f8      	str	r0, [r7, #12]
 80033c6:	60b9      	str	r1, [r7, #8]
 80033c8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	f003 031f 	and.w	r3, r3, #31
 80033d0:	2201      	movs	r2, #1
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6a1a      	ldr	r2, [r3, #32]
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	43db      	mvns	r3, r3
 80033e0:	401a      	ands	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6a1a      	ldr	r2, [r3, #32]
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	f003 031f 	and.w	r3, r3, #31
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	fa01 f303 	lsl.w	r3, r1, r3
 80033f6:	431a      	orrs	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	621a      	str	r2, [r3, #32]
}
 80033fc:	bf00      	nop
 80033fe:	371c      	adds	r7, #28
 8003400:	46bd      	mov	sp, r7
 8003402:	bc80      	pop	{r7}
 8003404:	4770      	bx	lr
	...

08003408 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003418:	2b01      	cmp	r3, #1
 800341a:	d101      	bne.n	8003420 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800341c:	2302      	movs	r3, #2
 800341e:	e046      	b.n	80034ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2202      	movs	r2, #2
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003446:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	4313      	orrs	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a16      	ldr	r2, [pc, #88]	@ (80034b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d00e      	beq.n	8003482 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800346c:	d009      	beq.n	8003482 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a12      	ldr	r2, [pc, #72]	@ (80034bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d004      	beq.n	8003482 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a10      	ldr	r2, [pc, #64]	@ (80034c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d10c      	bne.n	800349c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003488:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	4313      	orrs	r3, r2
 8003492:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68ba      	ldr	r2, [r7, #8]
 800349a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3714      	adds	r7, #20
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bc80      	pop	{r7}
 80034b6:	4770      	bx	lr
 80034b8:	40012c00 	.word	0x40012c00
 80034bc:	40000400 	.word	0x40000400
 80034c0:	40000800 	.word	0x40000800

080034c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bc80      	pop	{r7}
 80034d4:	4770      	bx	lr

080034d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b083      	sub	sp, #12
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bc80      	pop	{r7}
 80034e6:	4770      	bx	lr

080034e8 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e033      	b.n	8003562 <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d106      	bne.n	8003514 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7fd fbbe 	bl	8000c90 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2202      	movs	r2, #2
 8003518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 f825 	bl	800356c <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	691a      	ldr	r2, [r3, #16]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003530:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	695a      	ldr	r2, [r3, #20]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003540:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68da      	ldr	r2, [r3, #12]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003550:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	641a      	str	r2, [r3, #64]	@ 0x40
  husart->State = HAL_USART_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
	...

0800356c <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8003574:	2300      	movs	r3, #0
 8003576:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 020c 	bic.w	r2, r2, #12
 8003586:	60da      	str	r2, [r3, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003596:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 80035a0:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	431a      	orrs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 80035ac:	431a      	orrs	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80035b6:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE));
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80035ce:	f023 030c 	bic.w	r3, r3, #12
 80035d2:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
   */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	431a      	orrs	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	60da      	str	r2, [r3, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	695a      	ldr	r2, [r3, #20]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003600:	615a      	str	r2, [r3, #20]

  /*-------------------------- USART BRR Configuration -----------------------*/
  if (husart->Instance == USART1)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a53      	ldr	r2, [pc, #332]	@ (8003754 <USART_SetConfig+0x1e8>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d14f      	bne.n	80036ac <USART_SetConfig+0x140>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800360c:	f7fe fc3e 	bl	8001e8c <HAL_RCC_GetPCLK2Freq>
 8003610:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8003612:	68ba      	ldr	r2, [r7, #8]
 8003614:	4613      	mov	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	009a      	lsls	r2, r3, #2
 800361c:	441a      	add	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	fbb2 f3f3 	udiv	r3, r2, r3
 8003628:	4a4b      	ldr	r2, [pc, #300]	@ (8003758 <USART_SetConfig+0x1ec>)
 800362a:	fba2 2303 	umull	r2, r3, r2, r3
 800362e:	095b      	lsrs	r3, r3, #5
 8003630:	0119      	lsls	r1, r3, #4
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	4613      	mov	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	009a      	lsls	r2, r3, #2
 800363c:	441a      	add	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	fbb2 f2f3 	udiv	r2, r2, r3
 8003648:	4b43      	ldr	r3, [pc, #268]	@ (8003758 <USART_SetConfig+0x1ec>)
 800364a:	fba3 0302 	umull	r0, r3, r3, r2
 800364e:	095b      	lsrs	r3, r3, #5
 8003650:	2064      	movs	r0, #100	@ 0x64
 8003652:	fb00 f303 	mul.w	r3, r0, r3
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	3332      	adds	r3, #50	@ 0x32
 800365c:	4a3e      	ldr	r2, [pc, #248]	@ (8003758 <USART_SetConfig+0x1ec>)
 800365e:	fba2 2303 	umull	r2, r3, r2, r3
 8003662:	095b      	lsrs	r3, r3, #5
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	f403 73f0 	and.w	r3, r3, #480	@ 0x1e0
 800366a:	4419      	add	r1, r3
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	4613      	mov	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	009a      	lsls	r2, r3, #2
 8003676:	441a      	add	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003682:	4b35      	ldr	r3, [pc, #212]	@ (8003758 <USART_SetConfig+0x1ec>)
 8003684:	fba3 0302 	umull	r0, r3, r3, r2
 8003688:	095b      	lsrs	r3, r3, #5
 800368a:	2064      	movs	r0, #100	@ 0x64
 800368c:	fb00 f303 	mul.w	r3, r0, r3
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	3332      	adds	r3, #50	@ 0x32
 8003696:	4a30      	ldr	r2, [pc, #192]	@ (8003758 <USART_SetConfig+0x1ec>)
 8003698:	fba2 2303 	umull	r2, r3, r2, r3
 800369c:	095b      	lsrs	r3, r3, #5
 800369e:	f003 020f 	and.w	r2, r3, #15
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	440a      	add	r2, r1
 80036a8:	609a      	str	r2, [r3, #8]
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
}
 80036aa:	e04e      	b.n	800374a <USART_SetConfig+0x1de>
    pclk = HAL_RCC_GetPCLK1Freq();
 80036ac:	f7fe fbda 	bl	8001e64 <HAL_RCC_GetPCLK1Freq>
 80036b0:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 80036b2:	68ba      	ldr	r2, [r7, #8]
 80036b4:	4613      	mov	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4413      	add	r3, r2
 80036ba:	009a      	lsls	r2, r3, #2
 80036bc:	441a      	add	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c8:	4a23      	ldr	r2, [pc, #140]	@ (8003758 <USART_SetConfig+0x1ec>)
 80036ca:	fba2 2303 	umull	r2, r3, r2, r3
 80036ce:	095b      	lsrs	r3, r3, #5
 80036d0:	0119      	lsls	r1, r3, #4
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	4613      	mov	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	009a      	lsls	r2, r3, #2
 80036dc:	441a      	add	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80036e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003758 <USART_SetConfig+0x1ec>)
 80036ea:	fba3 0302 	umull	r0, r3, r3, r2
 80036ee:	095b      	lsrs	r3, r3, #5
 80036f0:	2064      	movs	r0, #100	@ 0x64
 80036f2:	fb00 f303 	mul.w	r3, r0, r3
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	011b      	lsls	r3, r3, #4
 80036fa:	3332      	adds	r3, #50	@ 0x32
 80036fc:	4a16      	ldr	r2, [pc, #88]	@ (8003758 <USART_SetConfig+0x1ec>)
 80036fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003702:	095b      	lsrs	r3, r3, #5
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	f403 73f0 	and.w	r3, r3, #480	@ 0x1e0
 800370a:	4419      	add	r1, r3
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	4613      	mov	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	4413      	add	r3, r2
 8003714:	009a      	lsls	r2, r3, #2
 8003716:	441a      	add	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003722:	4b0d      	ldr	r3, [pc, #52]	@ (8003758 <USART_SetConfig+0x1ec>)
 8003724:	fba3 0302 	umull	r0, r3, r3, r2
 8003728:	095b      	lsrs	r3, r3, #5
 800372a:	2064      	movs	r0, #100	@ 0x64
 800372c:	fb00 f303 	mul.w	r3, r0, r3
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	011b      	lsls	r3, r3, #4
 8003734:	3332      	adds	r3, #50	@ 0x32
 8003736:	4a08      	ldr	r2, [pc, #32]	@ (8003758 <USART_SetConfig+0x1ec>)
 8003738:	fba2 2303 	umull	r2, r3, r2, r3
 800373c:	095b      	lsrs	r3, r3, #5
 800373e:	f003 020f 	and.w	r2, r3, #15
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	440a      	add	r2, r1
 8003748:	609a      	str	r2, [r3, #8]
}
 800374a:	bf00      	nop
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	40013800 	.word	0x40013800
 8003758:	51eb851f 	.word	0x51eb851f

0800375c <memset>:
 800375c:	4603      	mov	r3, r0
 800375e:	4402      	add	r2, r0
 8003760:	4293      	cmp	r3, r2
 8003762:	d100      	bne.n	8003766 <memset+0xa>
 8003764:	4770      	bx	lr
 8003766:	f803 1b01 	strb.w	r1, [r3], #1
 800376a:	e7f9      	b.n	8003760 <memset+0x4>

0800376c <__libc_init_array>:
 800376c:	b570      	push	{r4, r5, r6, lr}
 800376e:	2600      	movs	r6, #0
 8003770:	4d0c      	ldr	r5, [pc, #48]	@ (80037a4 <__libc_init_array+0x38>)
 8003772:	4c0d      	ldr	r4, [pc, #52]	@ (80037a8 <__libc_init_array+0x3c>)
 8003774:	1b64      	subs	r4, r4, r5
 8003776:	10a4      	asrs	r4, r4, #2
 8003778:	42a6      	cmp	r6, r4
 800377a:	d109      	bne.n	8003790 <__libc_init_array+0x24>
 800377c:	f000 f81a 	bl	80037b4 <_init>
 8003780:	2600      	movs	r6, #0
 8003782:	4d0a      	ldr	r5, [pc, #40]	@ (80037ac <__libc_init_array+0x40>)
 8003784:	4c0a      	ldr	r4, [pc, #40]	@ (80037b0 <__libc_init_array+0x44>)
 8003786:	1b64      	subs	r4, r4, r5
 8003788:	10a4      	asrs	r4, r4, #2
 800378a:	42a6      	cmp	r6, r4
 800378c:	d105      	bne.n	800379a <__libc_init_array+0x2e>
 800378e:	bd70      	pop	{r4, r5, r6, pc}
 8003790:	f855 3b04 	ldr.w	r3, [r5], #4
 8003794:	4798      	blx	r3
 8003796:	3601      	adds	r6, #1
 8003798:	e7ee      	b.n	8003778 <__libc_init_array+0xc>
 800379a:	f855 3b04 	ldr.w	r3, [r5], #4
 800379e:	4798      	blx	r3
 80037a0:	3601      	adds	r6, #1
 80037a2:	e7f2      	b.n	800378a <__libc_init_array+0x1e>
 80037a4:	080037f8 	.word	0x080037f8
 80037a8:	080037f8 	.word	0x080037f8
 80037ac:	080037f8 	.word	0x080037f8
 80037b0:	080037fc 	.word	0x080037fc

080037b4 <_init>:
 80037b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037b6:	bf00      	nop
 80037b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ba:	bc08      	pop	{r3}
 80037bc:	469e      	mov	lr, r3
 80037be:	4770      	bx	lr

080037c0 <_fini>:
 80037c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037c2:	bf00      	nop
 80037c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037c6:	bc08      	pop	{r3}
 80037c8:	469e      	mov	lr, r3
 80037ca:	4770      	bx	lr
