
RC522.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038ac  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080039b8  080039b8  000049b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039fc  080039fc  0000501c  2**0
                  CONTENTS
  4 .ARM          00000000  080039fc  080039fc  0000501c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039fc  080039fc  0000501c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039fc  080039fc  000049fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003a00  08003a00  00004a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08003a04  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  2000001c  08003a20  0000501c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08003a20  00005154  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000501c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce9d  00000000  00000000  00005045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002100  00000000  00000000  00011ee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  00013fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a0e  00000000  00000000  00014cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a78  00000000  00000000  000156d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f6fd  00000000  00000000  0002d14e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000865dc  00000000  00000000  0003c84b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c2e27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003508  00000000  00000000  000c2e6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003d  00000000  00000000  000c6374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	080039a0 	.word	0x080039a0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	080039a0 	.word	0x080039a0

0800014c <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 8000156:	f107 020f 	add.w	r2, r7, #15
 800015a:	1df9      	adds	r1, r7, #7
 800015c:	2364      	movs	r3, #100	@ 0x64
 800015e:	9300      	str	r3, [sp, #0]
 8000160:	2301      	movs	r3, #1
 8000162:	4804      	ldr	r0, [pc, #16]	@ (8000174 <RC522_SPI_Transfer+0x28>)
 8000164:	f002 fc64 	bl	8002a30 <HAL_SPI_TransmitReceive>

	return rx_data;
 8000168:	7bfb      	ldrb	r3, [r7, #15]
}
 800016a:	4618      	mov	r0, r3
 800016c:	3710      	adds	r7, #16
 800016e:	46bd      	mov	sp, r7
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	20000094 	.word	0x20000094

08000178 <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	4603      	mov	r3, r0
 8000180:	460a      	mov	r2, r1
 8000182:	71fb      	strb	r3, [r7, #7]
 8000184:	4613      	mov	r3, r2
 8000186:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8000188:	2200      	movs	r2, #0
 800018a:	2110      	movs	r1, #16
 800018c:	480c      	ldr	r0, [pc, #48]	@ (80001c0 <Write_MFRC522+0x48>)
 800018e:	f001 fb07 	bl	80017a0 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 8000192:	79fb      	ldrb	r3, [r7, #7]
 8000194:	005b      	lsls	r3, r3, #1
 8000196:	b2db      	uxtb	r3, r3
 8000198:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800019c:	b2db      	uxtb	r3, r3
 800019e:	4618      	mov	r0, r3
 80001a0:	f7ff ffd4 	bl	800014c <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 80001a4:	79bb      	ldrb	r3, [r7, #6]
 80001a6:	4618      	mov	r0, r3
 80001a8:	f7ff ffd0 	bl	800014c <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80001ac:	2201      	movs	r2, #1
 80001ae:	2110      	movs	r1, #16
 80001b0:	4803      	ldr	r0, [pc, #12]	@ (80001c0 <Write_MFRC522+0x48>)
 80001b2:	f001 faf5 	bl	80017a0 <HAL_GPIO_WritePin>
}
 80001b6:	bf00      	nop
 80001b8:	3708      	adds	r7, #8
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bd80      	pop	{r7, pc}
 80001be:	bf00      	nop
 80001c0:	40010800 	.word	0x40010800

080001c4 <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b084      	sub	sp, #16
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	4603      	mov	r3, r0
 80001cc:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 80001ce:	2200      	movs	r2, #0
 80001d0:	2110      	movs	r1, #16
 80001d2:	480f      	ldr	r0, [pc, #60]	@ (8000210 <Read_MFRC522+0x4c>)
 80001d4:	f001 fae4 	bl	80017a0 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	005b      	lsls	r3, r3, #1
 80001dc:	b25b      	sxtb	r3, r3
 80001de:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80001e2:	b25b      	sxtb	r3, r3
 80001e4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80001e8:	b25b      	sxtb	r3, r3
 80001ea:	b2db      	uxtb	r3, r3
 80001ec:	4618      	mov	r0, r3
 80001ee:	f7ff ffad 	bl	800014c <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 80001f2:	2000      	movs	r0, #0
 80001f4:	f7ff ffaa 	bl	800014c <RC522_SPI_Transfer>
 80001f8:	4603      	mov	r3, r0
 80001fa:	73fb      	strb	r3, [r7, #15]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80001fc:	2201      	movs	r2, #1
 80001fe:	2110      	movs	r1, #16
 8000200:	4803      	ldr	r0, [pc, #12]	@ (8000210 <Read_MFRC522+0x4c>)
 8000202:	f001 facd 	bl	80017a0 <HAL_GPIO_WritePin>

	return val;
 8000206:	7bfb      	ldrb	r3, [r7, #15]

}
 8000208:	4618      	mov	r0, r3
 800020a:	3710      	adds	r7, #16
 800020c:	46bd      	mov	sp, r7
 800020e:	bd80      	pop	{r7, pc}
 8000210:	40010800 	.word	0x40010800

08000214 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0
 800021a:	4603      	mov	r3, r0
 800021c:	460a      	mov	r2, r1
 800021e:	71fb      	strb	r3, [r7, #7]
 8000220:	4613      	mov	r3, r2
 8000222:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8000224:	79fb      	ldrb	r3, [r7, #7]
 8000226:	4618      	mov	r0, r3
 8000228:	f7ff ffcc 	bl	80001c4 <Read_MFRC522>
 800022c:	4603      	mov	r3, r0
 800022e:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8000230:	7bfa      	ldrb	r2, [r7, #15]
 8000232:	79bb      	ldrb	r3, [r7, #6]
 8000234:	4313      	orrs	r3, r2
 8000236:	b2da      	uxtb	r2, r3
 8000238:	79fb      	ldrb	r3, [r7, #7]
 800023a:	4611      	mov	r1, r2
 800023c:	4618      	mov	r0, r3
 800023e:	f7ff ff9b 	bl	8000178 <Write_MFRC522>
}
 8000242:	bf00      	nop
 8000244:	3710      	adds	r7, #16
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}

0800024a <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)
{
 800024a:	b580      	push	{r7, lr}
 800024c:	b084      	sub	sp, #16
 800024e:	af00      	add	r7, sp, #0
 8000250:	4603      	mov	r3, r0
 8000252:	460a      	mov	r2, r1
 8000254:	71fb      	strb	r3, [r7, #7]
 8000256:	4613      	mov	r3, r2
 8000258:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 800025a:	79fb      	ldrb	r3, [r7, #7]
 800025c:	4618      	mov	r0, r3
 800025e:	f7ff ffb1 	bl	80001c4 <Read_MFRC522>
 8000262:	4603      	mov	r3, r0
 8000264:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8000266:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800026a:	43db      	mvns	r3, r3
 800026c:	b25a      	sxtb	r2, r3
 800026e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000272:	4013      	ands	r3, r2
 8000274:	b25b      	sxtb	r3, r3
 8000276:	b2da      	uxtb	r2, r3
 8000278:	79fb      	ldrb	r3, [r7, #7]
 800027a:	4611      	mov	r1, r2
 800027c:	4618      	mov	r0, r3
 800027e:	f7ff ff7b 	bl	8000178 <Write_MFRC522>
}
 8000282:	bf00      	nop
 8000284:	3710      	adds	r7, #16
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}

0800028a <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 800028a:	b580      	push	{r7, lr}
 800028c:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 800028e:	2014      	movs	r0, #20
 8000290:	f7ff ff98 	bl	80001c4 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 8000294:	2103      	movs	r1, #3
 8000296:	2014      	movs	r0, #20
 8000298:	f7ff ffbc 	bl	8000214 <SetBitMask>
}
 800029c:	bf00      	nop
 800029e:	bd80      	pop	{r7, pc}

080002a0 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 80002a4:	210f      	movs	r1, #15
 80002a6:	2001      	movs	r0, #1
 80002a8:	f7ff ff66 	bl	8000178 <Write_MFRC522>
}
 80002ac:	bf00      	nop
 80002ae:	bd80      	pop	{r7, pc}

080002b0 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80002b4:	2201      	movs	r2, #1
 80002b6:	2110      	movs	r1, #16
 80002b8:	4812      	ldr	r0, [pc, #72]	@ (8000304 <MFRC522_Init+0x54>)
 80002ba:	f001 fa71 	bl	80017a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 80002be:	2201      	movs	r2, #1
 80002c0:	2101      	movs	r1, #1
 80002c2:	4811      	ldr	r0, [pc, #68]	@ (8000308 <MFRC522_Init+0x58>)
 80002c4:	f001 fa6c 	bl	80017a0 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 80002c8:	f7ff ffea 	bl	80002a0 <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 80002cc:	218d      	movs	r1, #141	@ 0x8d
 80002ce:	202a      	movs	r0, #42	@ 0x2a
 80002d0:	f7ff ff52 	bl	8000178 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 80002d4:	213e      	movs	r1, #62	@ 0x3e
 80002d6:	202b      	movs	r0, #43	@ 0x2b
 80002d8:	f7ff ff4e 	bl	8000178 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 80002dc:	211e      	movs	r1, #30
 80002de:	202d      	movs	r0, #45	@ 0x2d
 80002e0:	f7ff ff4a 	bl	8000178 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 80002e4:	2100      	movs	r1, #0
 80002e6:	202c      	movs	r0, #44	@ 0x2c
 80002e8:	f7ff ff46 	bl	8000178 <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 80002ec:	2140      	movs	r1, #64	@ 0x40
 80002ee:	2015      	movs	r0, #21
 80002f0:	f7ff ff42 	bl	8000178 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 80002f4:	213d      	movs	r1, #61	@ 0x3d
 80002f6:	2011      	movs	r0, #17
 80002f8:	f7ff ff3e 	bl	8000178 <Write_MFRC522>

	AntennaOn();
 80002fc:	f7ff ffc5 	bl	800028a <AntennaOn>
}
 8000300:	bf00      	nop
 8000302:	bd80      	pop	{r7, pc}
 8000304:	40010800 	.word	0x40010800
 8000308:	40010c00 	.word	0x40010c00

0800030c <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 800030c:	b590      	push	{r4, r7, lr}
 800030e:	b089      	sub	sp, #36	@ 0x24
 8000310:	af00      	add	r7, sp, #0
 8000312:	60b9      	str	r1, [r7, #8]
 8000314:	607b      	str	r3, [r7, #4]
 8000316:	4603      	mov	r3, r0
 8000318:	73fb      	strb	r3, [r7, #15]
 800031a:	4613      	mov	r3, r2
 800031c:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 800031e:	2302      	movs	r3, #2
 8000320:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 8000322:	2300      	movs	r3, #0
 8000324:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 8000326:	2300      	movs	r3, #0
 8000328:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 800032a:	7bfb      	ldrb	r3, [r7, #15]
 800032c:	2b0c      	cmp	r3, #12
 800032e:	d006      	beq.n	800033e <MFRC522_ToCard+0x32>
 8000330:	2b0e      	cmp	r3, #14
 8000332:	d109      	bne.n	8000348 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 8000334:	2312      	movs	r3, #18
 8000336:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 8000338:	2310      	movs	r3, #16
 800033a:	777b      	strb	r3, [r7, #29]
			break;
 800033c:	e005      	b.n	800034a <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 800033e:	2377      	movs	r3, #119	@ 0x77
 8000340:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 8000342:	2330      	movs	r3, #48	@ 0x30
 8000344:	777b      	strb	r3, [r7, #29]
			break;
 8000346:	e000      	b.n	800034a <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8000348:	bf00      	nop
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 800034a:	7fbb      	ldrb	r3, [r7, #30]
 800034c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000350:	b2db      	uxtb	r3, r3
 8000352:	4619      	mov	r1, r3
 8000354:	2002      	movs	r0, #2
 8000356:	f7ff ff0f 	bl	8000178 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 800035a:	2180      	movs	r1, #128	@ 0x80
 800035c:	2004      	movs	r0, #4
 800035e:	f7ff ff74 	bl	800024a <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 8000362:	2180      	movs	r1, #128	@ 0x80
 8000364:	200a      	movs	r0, #10
 8000366:	f7ff ff55 	bl	8000214 <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 800036a:	2100      	movs	r1, #0
 800036c:	2001      	movs	r0, #1
 800036e:	f7ff ff03 	bl	8000178 <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 8000372:	2300      	movs	r3, #0
 8000374:	61bb      	str	r3, [r7, #24]
 8000376:	e00a      	b.n	800038e <MFRC522_ToCard+0x82>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 8000378:	68ba      	ldr	r2, [r7, #8]
 800037a:	69bb      	ldr	r3, [r7, #24]
 800037c:	4413      	add	r3, r2
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	4619      	mov	r1, r3
 8000382:	2009      	movs	r0, #9
 8000384:	f7ff fef8 	bl	8000178 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8000388:	69bb      	ldr	r3, [r7, #24]
 800038a:	3301      	adds	r3, #1
 800038c:	61bb      	str	r3, [r7, #24]
 800038e:	7bbb      	ldrb	r3, [r7, #14]
 8000390:	69ba      	ldr	r2, [r7, #24]
 8000392:	429a      	cmp	r2, r3
 8000394:	d3f0      	bcc.n	8000378 <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 8000396:	7bfb      	ldrb	r3, [r7, #15]
 8000398:	4619      	mov	r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	f7ff feec 	bl	8000178 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 80003a0:	7bfb      	ldrb	r3, [r7, #15]
 80003a2:	2b0c      	cmp	r3, #12
 80003a4:	d103      	bne.n	80003ae <MFRC522_ToCard+0xa2>
    {
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 80003a6:	2180      	movs	r1, #128	@ 0x80
 80003a8:	200d      	movs	r0, #13
 80003aa:	f7ff ff33 	bl	8000214 <SetBitMask>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 80003ae:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80003b2:	61bb      	str	r3, [r7, #24]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 80003b4:	2004      	movs	r0, #4
 80003b6:	f7ff ff05 	bl	80001c4 <Read_MFRC522>
 80003ba:	4603      	mov	r3, r0
 80003bc:	773b      	strb	r3, [r7, #28]
        i--;
 80003be:	69bb      	ldr	r3, [r7, #24]
 80003c0:	3b01      	subs	r3, #1
 80003c2:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80003c4:	69bb      	ldr	r3, [r7, #24]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d00a      	beq.n	80003e0 <MFRC522_ToCard+0xd4>
 80003ca:	7f3b      	ldrb	r3, [r7, #28]
 80003cc:	f003 0301 	and.w	r3, r3, #1
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d105      	bne.n	80003e0 <MFRC522_ToCard+0xd4>
 80003d4:	7f3a      	ldrb	r2, [r7, #28]
 80003d6:	7f7b      	ldrb	r3, [r7, #29]
 80003d8:	4013      	ands	r3, r2
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d0e9      	beq.n	80003b4 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 80003e0:	2180      	movs	r1, #128	@ 0x80
 80003e2:	200d      	movs	r0, #13
 80003e4:	f7ff ff31 	bl	800024a <ClearBitMask>

    if (i != 0)
 80003e8:	69bb      	ldr	r3, [r7, #24]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d052      	beq.n	8000494 <MFRC522_ToCard+0x188>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 80003ee:	2006      	movs	r0, #6
 80003f0:	f7ff fee8 	bl	80001c4 <Read_MFRC522>
 80003f4:	4603      	mov	r3, r0
 80003f6:	f003 031b 	and.w	r3, r3, #27
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d148      	bne.n	8000490 <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 80003fe:	2300      	movs	r3, #0
 8000400:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 8000402:	7f3a      	ldrb	r2, [r7, #28]
 8000404:	7fbb      	ldrb	r3, [r7, #30]
 8000406:	4013      	ands	r3, r2
 8000408:	b2db      	uxtb	r3, r3
 800040a:	f003 0301 	and.w	r3, r3, #1
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <MFRC522_ToCard+0x10a>
            {
				status = MI_NOTAGERR;
 8000412:	2301      	movs	r3, #1
 8000414:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 8000416:	7bfb      	ldrb	r3, [r7, #15]
 8000418:	2b0c      	cmp	r3, #12
 800041a:	d13b      	bne.n	8000494 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 800041c:	200a      	movs	r0, #10
 800041e:	f7ff fed1 	bl	80001c4 <Read_MFRC522>
 8000422:	4603      	mov	r3, r0
 8000424:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 8000426:	200c      	movs	r0, #12
 8000428:	f7ff fecc 	bl	80001c4 <Read_MFRC522>
 800042c:	4603      	mov	r3, r0
 800042e:	f003 0307 	and.w	r3, r3, #7
 8000432:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 8000434:	7dfb      	ldrb	r3, [r7, #23]
 8000436:	2b00      	cmp	r3, #0
 8000438:	d008      	beq.n	800044c <MFRC522_ToCard+0x140>
                {
					*backLen = (n-1)*8 + lastBits;
 800043a:	7f3b      	ldrb	r3, [r7, #28]
 800043c:	3b01      	subs	r3, #1
 800043e:	00da      	lsls	r2, r3, #3
 8000440:	7dfb      	ldrb	r3, [r7, #23]
 8000442:	4413      	add	r3, r2
 8000444:	461a      	mov	r2, r3
 8000446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000448:	601a      	str	r2, [r3, #0]
 800044a:	e004      	b.n	8000456 <MFRC522_ToCard+0x14a>
				}
                else
                {
					*backLen = n*8;
 800044c:	7f3b      	ldrb	r3, [r7, #28]
 800044e:	00db      	lsls	r3, r3, #3
 8000450:	461a      	mov	r2, r3
 8000452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000454:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 8000456:	7f3b      	ldrb	r3, [r7, #28]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d101      	bne.n	8000460 <MFRC522_ToCard+0x154>
                {
					n = 1;
 800045c:	2301      	movs	r3, #1
 800045e:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 8000460:	7f3b      	ldrb	r3, [r7, #28]
 8000462:	2b10      	cmp	r3, #16
 8000464:	d901      	bls.n	800046a <MFRC522_ToCard+0x15e>
                {
					n = MAX_LEN;
 8000466:	2310      	movs	r3, #16
 8000468:	773b      	strb	r3, [r7, #28]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 800046a:	2300      	movs	r3, #0
 800046c:	61bb      	str	r3, [r7, #24]
 800046e:	e00a      	b.n	8000486 <MFRC522_ToCard+0x17a>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 8000470:	687a      	ldr	r2, [r7, #4]
 8000472:	69bb      	ldr	r3, [r7, #24]
 8000474:	18d4      	adds	r4, r2, r3
 8000476:	2009      	movs	r0, #9
 8000478:	f7ff fea4 	bl	80001c4 <Read_MFRC522>
 800047c:	4603      	mov	r3, r0
 800047e:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 8000480:	69bb      	ldr	r3, [r7, #24]
 8000482:	3301      	adds	r3, #1
 8000484:	61bb      	str	r3, [r7, #24]
 8000486:	7f3b      	ldrb	r3, [r7, #28]
 8000488:	69ba      	ldr	r2, [r7, #24]
 800048a:	429a      	cmp	r2, r3
 800048c:	d3f0      	bcc.n	8000470 <MFRC522_ToCard+0x164>
 800048e:	e001      	b.n	8000494 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {
			status = MI_ERR;
 8000490:	2302      	movs	r3, #2
 8000492:	77fb      	strb	r3, [r7, #31]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 8000494:	7ffb      	ldrb	r3, [r7, #31]
}
 8000496:	4618      	mov	r0, r3
 8000498:	3724      	adds	r7, #36	@ 0x24
 800049a:	46bd      	mov	sp, r7
 800049c:	bd90      	pop	{r4, r7, pc}

0800049e <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 800049e:	b580      	push	{r7, lr}
 80004a0:	b086      	sub	sp, #24
 80004a2:	af02      	add	r7, sp, #8
 80004a4:	4603      	mov	r3, r0
 80004a6:	6039      	str	r1, [r7, #0]
 80004a8:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 80004aa:	2107      	movs	r1, #7
 80004ac:	200d      	movs	r0, #13
 80004ae:	f7ff fe63 	bl	8000178 <Write_MFRC522>

	TagType[0] = reqMode;
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	79fa      	ldrb	r2, [r7, #7]
 80004b6:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80004b8:	f107 0308 	add.w	r3, r7, #8
 80004bc:	9300      	str	r3, [sp, #0]
 80004be:	683b      	ldr	r3, [r7, #0]
 80004c0:	2201      	movs	r2, #1
 80004c2:	6839      	ldr	r1, [r7, #0]
 80004c4:	200c      	movs	r0, #12
 80004c6:	f7ff ff21 	bl	800030c <MFRC522_ToCard>
 80004ca:	4603      	mov	r3, r0
 80004cc:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 80004ce:	7bfb      	ldrb	r3, [r7, #15]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d102      	bne.n	80004da <MFRC522_Request+0x3c>
 80004d4:	68bb      	ldr	r3, [r7, #8]
 80004d6:	2b10      	cmp	r3, #16
 80004d8:	d001      	beq.n	80004de <MFRC522_Request+0x40>
	{
		status = MI_ERR;
 80004da:	2302      	movs	r3, #2
 80004dc:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80004de:	7bfb      	ldrb	r3, [r7, #15]
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	3710      	adds	r7, #16
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b086      	sub	sp, #24
 80004ec:	af02      	add	r7, sp, #8
 80004ee:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 80004f0:	2300      	movs	r3, #0
 80004f2:	737b      	strb	r3, [r7, #13]
    uint unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 80004f4:	2100      	movs	r1, #0
 80004f6:	200d      	movs	r0, #13
 80004f8:	f7ff fe3e 	bl	8000178 <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2293      	movs	r2, #147	@ 0x93
 8000500:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	3301      	adds	r3, #1
 8000506:	2220      	movs	r2, #32
 8000508:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 800050a:	f107 0308 	add.w	r3, r7, #8
 800050e:	9300      	str	r3, [sp, #0]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2202      	movs	r2, #2
 8000514:	6879      	ldr	r1, [r7, #4]
 8000516:	200c      	movs	r0, #12
 8000518:	f7ff fef8 	bl	800030c <MFRC522_ToCard>
 800051c:	4603      	mov	r3, r0
 800051e:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 8000520:	7bfb      	ldrb	r3, [r7, #15]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d118      	bne.n	8000558 <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 8000526:	2300      	movs	r3, #0
 8000528:	73bb      	strb	r3, [r7, #14]
 800052a:	e009      	b.n	8000540 <MFRC522_Anticoll+0x58>
		{
		 	serNumCheck ^= serNum[i];
 800052c:	7bbb      	ldrb	r3, [r7, #14]
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	4413      	add	r3, r2
 8000532:	781a      	ldrb	r2, [r3, #0]
 8000534:	7b7b      	ldrb	r3, [r7, #13]
 8000536:	4053      	eors	r3, r2
 8000538:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 800053a:	7bbb      	ldrb	r3, [r7, #14]
 800053c:	3301      	adds	r3, #1
 800053e:	73bb      	strb	r3, [r7, #14]
 8000540:	7bbb      	ldrb	r3, [r7, #14]
 8000542:	2b03      	cmp	r3, #3
 8000544:	d9f2      	bls.n	800052c <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 8000546:	7bbb      	ldrb	r3, [r7, #14]
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	4413      	add	r3, r2
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	7b7a      	ldrb	r2, [r7, #13]
 8000550:	429a      	cmp	r2, r3
 8000552:	d001      	beq.n	8000558 <MFRC522_Anticoll+0x70>
		{
			status = MI_ERR;
 8000554:	2302      	movs	r3, #2
 8000556:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 8000558:	7bfb      	ldrb	r3, [r7, #15]
}
 800055a:	4618      	mov	r0, r3
 800055c:	3710      	adds	r7, #16
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
	...

08000564 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800056e:	4a38      	ldr	r2, [pc, #224]	@ (8000650 <HD44780_Init+0xec>)
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000574:	4b37      	ldr	r3, [pc, #220]	@ (8000654 <HD44780_Init+0xf0>)
 8000576:	2208      	movs	r2, #8
 8000578:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800057a:	4b37      	ldr	r3, [pc, #220]	@ (8000658 <HD44780_Init+0xf4>)
 800057c:	2200      	movs	r2, #0
 800057e:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000580:	4b33      	ldr	r3, [pc, #204]	@ (8000650 <HD44780_Init+0xec>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b01      	cmp	r3, #1
 8000586:	d907      	bls.n	8000598 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000588:	4b33      	ldr	r3, [pc, #204]	@ (8000658 <HD44780_Init+0xf4>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	f043 0308 	orr.w	r3, r3, #8
 8000590:	b2da      	uxtb	r2, r3
 8000592:	4b31      	ldr	r3, [pc, #196]	@ (8000658 <HD44780_Init+0xf4>)
 8000594:	701a      	strb	r2, [r3, #0]
 8000596:	e006      	b.n	80005a6 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000598:	4b2f      	ldr	r3, [pc, #188]	@ (8000658 <HD44780_Init+0xf4>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	f043 0304 	orr.w	r3, r3, #4
 80005a0:	b2da      	uxtb	r2, r3
 80005a2:	4b2d      	ldr	r3, [pc, #180]	@ (8000658 <HD44780_Init+0xf4>)
 80005a4:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 80005a6:	f000 f985 	bl	80008b4 <DelayInit>
  HAL_Delay(50);
 80005aa:	2032      	movs	r0, #50	@ 0x32
 80005ac:	f000 fd90 	bl	80010d0 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 80005b0:	4b28      	ldr	r3, [pc, #160]	@ (8000654 <HD44780_Init+0xf0>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 f943 	bl	8000840 <ExpanderWrite>
  HAL_Delay(1000);
 80005ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005be:	f000 fd87 	bl	80010d0 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80005c2:	2030      	movs	r0, #48	@ 0x30
 80005c4:	f000 f92b 	bl	800081e <Write4Bits>
  DelayUS(4500);
 80005c8:	f241 1094 	movw	r0, #4500	@ 0x1194
 80005cc:	f000 f99a 	bl	8000904 <DelayUS>

  Write4Bits(0x03 << 4);
 80005d0:	2030      	movs	r0, #48	@ 0x30
 80005d2:	f000 f924 	bl	800081e <Write4Bits>
  DelayUS(4500);
 80005d6:	f241 1094 	movw	r0, #4500	@ 0x1194
 80005da:	f000 f993 	bl	8000904 <DelayUS>

  Write4Bits(0x03 << 4);
 80005de:	2030      	movs	r0, #48	@ 0x30
 80005e0:	f000 f91d 	bl	800081e <Write4Bits>
  DelayUS(4500);
 80005e4:	f241 1094 	movw	r0, #4500	@ 0x1194
 80005e8:	f000 f98c 	bl	8000904 <DelayUS>

  Write4Bits(0x02 << 4);
 80005ec:	2020      	movs	r0, #32
 80005ee:	f000 f916 	bl	800081e <Write4Bits>
  DelayUS(100);
 80005f2:	2064      	movs	r0, #100	@ 0x64
 80005f4:	f000 f986 	bl	8000904 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80005f8:	4b17      	ldr	r3, [pc, #92]	@ (8000658 <HD44780_Init+0xf4>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	f043 0320 	orr.w	r3, r3, #32
 8000600:	b2db      	uxtb	r3, r3
 8000602:	4618      	mov	r0, r3
 8000604:	f000 f8ce 	bl	80007a4 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000608:	4b14      	ldr	r3, [pc, #80]	@ (800065c <HD44780_Init+0xf8>)
 800060a:	2204      	movs	r2, #4
 800060c:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800060e:	f000 f875 	bl	80006fc <HD44780_Display>
  HD44780_Clear();
 8000612:	f000 f82b 	bl	800066c <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000616:	4b12      	ldr	r3, [pc, #72]	@ (8000660 <HD44780_Init+0xfc>)
 8000618:	2202      	movs	r2, #2
 800061a:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 800061c:	4b10      	ldr	r3, [pc, #64]	@ (8000660 <HD44780_Init+0xfc>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	f043 0304 	orr.w	r3, r3, #4
 8000624:	b2db      	uxtb	r3, r3
 8000626:	4618      	mov	r0, r3
 8000628:	f000 f8bc 	bl	80007a4 <SendCommand>
  DelayUS(4500);
 800062c:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000630:	f000 f968 	bl	8000904 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000634:	490b      	ldr	r1, [pc, #44]	@ (8000664 <HD44780_Init+0x100>)
 8000636:	2000      	movs	r0, #0
 8000638:	f000 f876 	bl	8000728 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 800063c:	490a      	ldr	r1, [pc, #40]	@ (8000668 <HD44780_Init+0x104>)
 800063e:	2001      	movs	r0, #1
 8000640:	f000 f872 	bl	8000728 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000644:	f000 f81d 	bl	8000682 <HD44780_Home>
}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	2000003b 	.word	0x2000003b
 8000654:	2000003c 	.word	0x2000003c
 8000658:	20000038 	.word	0x20000038
 800065c:	20000039 	.word	0x20000039
 8000660:	2000003a 	.word	0x2000003a
 8000664:	20000000 	.word	0x20000000
 8000668:	20000008 	.word	0x20000008

0800066c <HD44780_Clear>:

void HD44780_Clear()
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000670:	2001      	movs	r0, #1
 8000672:	f000 f897 	bl	80007a4 <SendCommand>
  DelayUS(2000);
 8000676:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800067a:	f000 f943 	bl	8000904 <DelayUS>
}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}

08000682 <HD44780_Home>:

void HD44780_Home()
{
 8000682:	b580      	push	{r7, lr}
 8000684:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000686:	2002      	movs	r0, #2
 8000688:	f000 f88c 	bl	80007a4 <SendCommand>
  DelayUS(2000);
 800068c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000690:	f000 f938 	bl	8000904 <DelayUS>
}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}

08000698 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000698:	b590      	push	{r4, r7, lr}
 800069a:	b087      	sub	sp, #28
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	460a      	mov	r2, r1
 80006a2:	71fb      	strb	r3, [r7, #7]
 80006a4:	4613      	mov	r3, r2
 80006a6:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80006a8:	4b12      	ldr	r3, [pc, #72]	@ (80006f4 <HD44780_SetCursor+0x5c>)
 80006aa:	f107 0408 	add.w	r4, r7, #8
 80006ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80006b4:	4b10      	ldr	r3, [pc, #64]	@ (80006f8 <HD44780_SetCursor+0x60>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	79ba      	ldrb	r2, [r7, #6]
 80006ba:	429a      	cmp	r2, r3
 80006bc:	d303      	bcc.n	80006c6 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80006be:	4b0e      	ldr	r3, [pc, #56]	@ (80006f8 <HD44780_SetCursor+0x60>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	3b01      	subs	r3, #1
 80006c4:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80006c6:	79bb      	ldrb	r3, [r7, #6]
 80006c8:	009b      	lsls	r3, r3, #2
 80006ca:	3318      	adds	r3, #24
 80006cc:	443b      	add	r3, r7
 80006ce:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	4413      	add	r3, r2
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	b25b      	sxtb	r3, r3
 80006dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80006e0:	b25b      	sxtb	r3, r3
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 f85d 	bl	80007a4 <SendCommand>
}
 80006ea:	bf00      	nop
 80006ec:	371c      	adds	r7, #28
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd90      	pop	{r4, r7, pc}
 80006f2:	bf00      	nop
 80006f4:	080039b8 	.word	0x080039b8
 80006f8:	2000003b 	.word	0x2000003b

080006fc <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000700:	4b08      	ldr	r3, [pc, #32]	@ (8000724 <HD44780_Display+0x28>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	f043 0304 	orr.w	r3, r3, #4
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <HD44780_Display+0x28>)
 800070c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800070e:	4b05      	ldr	r3, [pc, #20]	@ (8000724 <HD44780_Display+0x28>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	f043 0308 	orr.w	r3, r3, #8
 8000716:	b2db      	uxtb	r3, r3
 8000718:	4618      	mov	r0, r3
 800071a:	f000 f843 	bl	80007a4 <SendCommand>
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000039 	.word	0x20000039

08000728 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	6039      	str	r1, [r7, #0]
 8000732:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	f003 0307 	and.w	r3, r3, #7
 800073a:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	00db      	lsls	r3, r3, #3
 8000740:	b25b      	sxtb	r3, r3
 8000742:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000746:	b25b      	sxtb	r3, r3
 8000748:	b2db      	uxtb	r3, r3
 800074a:	4618      	mov	r0, r3
 800074c:	f000 f82a 	bl	80007a4 <SendCommand>
  for (int i=0; i<8; i++)
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	e009      	b.n	800076a <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	683a      	ldr	r2, [r7, #0]
 800075a:	4413      	add	r3, r2
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	4618      	mov	r0, r3
 8000760:	f000 f82e 	bl	80007c0 <SendChar>
  for (int i=0; i<8; i++)
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	3301      	adds	r3, #1
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	2b07      	cmp	r3, #7
 800076e:	ddf2      	ble.n	8000756 <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000770:	bf00      	nop
 8000772:	bf00      	nop
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 800077a:	b580      	push	{r7, lr}
 800077c:	b082      	sub	sp, #8
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000782:	e006      	b.n	8000792 <HD44780_PrintStr+0x18>
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	1c5a      	adds	r2, r3, #1
 8000788:	607a      	str	r2, [r7, #4]
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	4618      	mov	r0, r3
 800078e:	f000 f817 	bl	80007c0 <SendChar>
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d1f4      	bne.n	8000784 <HD44780_PrintStr+0xa>
}
 800079a:	bf00      	nop
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 f812 	bl	80007dc <Send>
}
 80007b8:	bf00      	nop
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <SendChar>:

static void SendChar(uint8_t ch)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	2101      	movs	r1, #1
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 f804 	bl	80007dc <Send>
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	460a      	mov	r2, r1
 80007e6:	71fb      	strb	r3, [r7, #7]
 80007e8:	4613      	mov	r3, r2
 80007ea:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	f023 030f 	bic.w	r3, r3, #15
 80007f2:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	011b      	lsls	r3, r3, #4
 80007f8:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80007fa:	7bfa      	ldrb	r2, [r7, #15]
 80007fc:	79bb      	ldrb	r3, [r7, #6]
 80007fe:	4313      	orrs	r3, r2
 8000800:	b2db      	uxtb	r3, r3
 8000802:	4618      	mov	r0, r3
 8000804:	f000 f80b 	bl	800081e <Write4Bits>
  Write4Bits((lownib)|mode);
 8000808:	7bba      	ldrb	r2, [r7, #14]
 800080a:	79bb      	ldrb	r3, [r7, #6]
 800080c:	4313      	orrs	r3, r2
 800080e:	b2db      	uxtb	r3, r3
 8000810:	4618      	mov	r0, r3
 8000812:	f000 f804 	bl	800081e <Write4Bits>
}
 8000816:	bf00      	nop
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b082      	sub	sp, #8
 8000822:	af00      	add	r7, sp, #0
 8000824:	4603      	mov	r3, r0
 8000826:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	4618      	mov	r0, r3
 800082c:	f000 f808 	bl	8000840 <ExpanderWrite>
  PulseEnable(value);
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	4618      	mov	r0, r3
 8000834:	f000 f820 	bl	8000878 <PulseEnable>
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af02      	add	r7, sp, #8
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 800084a:	4b09      	ldr	r3, [pc, #36]	@ (8000870 <ExpanderWrite+0x30>)
 800084c:	781a      	ldrb	r2, [r3, #0]
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	4313      	orrs	r3, r2
 8000852:	b2db      	uxtb	r3, r3
 8000854:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000856:	f107 020f 	add.w	r2, r7, #15
 800085a:	230a      	movs	r3, #10
 800085c:	9300      	str	r3, [sp, #0]
 800085e:	2301      	movs	r3, #1
 8000860:	214e      	movs	r1, #78	@ 0x4e
 8000862:	4804      	ldr	r0, [pc, #16]	@ (8000874 <ExpanderWrite+0x34>)
 8000864:	f001 f8f8 	bl	8001a58 <HAL_I2C_Master_Transmit>
}
 8000868:	bf00      	nop
 800086a:	3710      	adds	r7, #16
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	2000003c 	.word	0x2000003c
 8000874:	20000040 	.word	0x20000040

08000878 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	f043 0304 	orr.w	r3, r3, #4
 8000888:	b2db      	uxtb	r3, r3
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff ffd8 	bl	8000840 <ExpanderWrite>
  DelayUS(20);
 8000890:	2014      	movs	r0, #20
 8000892:	f000 f837 	bl	8000904 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	f023 0304 	bic.w	r3, r3, #4
 800089c:	b2db      	uxtb	r3, r3
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff ffce 	bl	8000840 <ExpanderWrite>
  DelayUS(20);
 80008a4:	2014      	movs	r0, #20
 80008a6:	f000 f82d 	bl	8000904 <DelayUS>
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <DelayInit>:

static void DelayInit(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80008b8:	4b10      	ldr	r3, [pc, #64]	@ (80008fc <DelayInit+0x48>)
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	4a0f      	ldr	r2, [pc, #60]	@ (80008fc <DelayInit+0x48>)
 80008be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80008c2:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80008c4:	4b0d      	ldr	r3, [pc, #52]	@ (80008fc <DelayInit+0x48>)
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	4a0c      	ldr	r2, [pc, #48]	@ (80008fc <DelayInit+0x48>)
 80008ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80008ce:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80008d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000900 <DelayInit+0x4c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a0a      	ldr	r2, [pc, #40]	@ (8000900 <DelayInit+0x4c>)
 80008d6:	f023 0301 	bic.w	r3, r3, #1
 80008da:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80008dc:	4b08      	ldr	r3, [pc, #32]	@ (8000900 <DelayInit+0x4c>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a07      	ldr	r2, [pc, #28]	@ (8000900 <DelayInit+0x4c>)
 80008e2:	f043 0301 	orr.w	r3, r3, #1
 80008e6:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80008e8:	4b05      	ldr	r3, [pc, #20]	@ (8000900 <DelayInit+0x4c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80008ee:	bf00      	nop
  __ASM volatile ("NOP");
 80008f0:	bf00      	nop
  __ASM volatile ("NOP");
 80008f2:	bf00      	nop
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr
 80008fc:	e000edf0 	.word	0xe000edf0
 8000900:	e0001000 	.word	0xe0001000

08000904 <DelayUS>:

static void DelayUS(uint32_t us) {
 8000904:	b480      	push	{r7}
 8000906:	b087      	sub	sp, #28
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 800090c:	4b0d      	ldr	r3, [pc, #52]	@ (8000944 <DelayUS+0x40>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a0d      	ldr	r2, [pc, #52]	@ (8000948 <DelayUS+0x44>)
 8000912:	fba2 2303 	umull	r2, r3, r2, r3
 8000916:	0c9a      	lsrs	r2, r3, #18
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	fb02 f303 	mul.w	r3, r2, r3
 800091e:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000920:	4b0a      	ldr	r3, [pc, #40]	@ (800094c <DelayUS+0x48>)
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000926:	4b09      	ldr	r3, [pc, #36]	@ (800094c <DelayUS+0x48>)
 8000928:	685a      	ldr	r2, [r3, #4]
 800092a:	693b      	ldr	r3, [r7, #16]
 800092c:	1ad3      	subs	r3, r2, r3
 800092e:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	697a      	ldr	r2, [r7, #20]
 8000934:	429a      	cmp	r2, r3
 8000936:	d8f6      	bhi.n	8000926 <DelayUS+0x22>
}
 8000938:	bf00      	nop
 800093a:	bf00      	nop
 800093c:	371c      	adds	r7, #28
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr
 8000944:	20000010 	.word	0x20000010
 8000948:	431bde83 	.word	0x431bde83
 800094c:	e0001000 	.word	0xe0001000

08000950 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
//	{
//		buff_rx[rx_index] = data_rx;
//		rx_index ++;
//		HAL_UART_Receive_IT(&huart, &data_rx, sizeof(data_rx),1000);
//	}
}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	bc80      	pop	{r7}
 8000960:	4770      	bx	lr
	...

08000964 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000968:	f000 fb50 	bl	800100c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800096c:	f000 f882 	bl	8000a74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000970:	f000 f954 	bl	8000c1c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000974:	f000 f8f2 	bl	8000b5c <MX_SPI1_Init>
  MX_I2C1_Init();
 8000978:	f000 f8c2 	bl	8000b00 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800097c:	f000 f924 	bl	8000bc8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  MFRC522_Init();
 8000980:	f7ff fc96 	bl	80002b0 <MFRC522_Init>
  HD44780_Init(2);
 8000984:	2002      	movs	r0, #2
 8000986:	f7ff fded 	bl	8000564 <HD44780_Init>
//		  HAL_UART_Transmit(&huart1,data_rx,strlen((char*)data_rx) + 1  ,HAL_MAX_DELAY);
//		  HD44780_SetCursor(0,0);
//		  HD44780_PrintStr(	(char*)data_rx);
//	  }
//	  HAL_Delay(20);
				status = MFRC522_Request(PICC_REQIDL, str);
 800098a:	4934      	ldr	r1, [pc, #208]	@ (8000a5c <main+0xf8>)
 800098c:	2026      	movs	r0, #38	@ 0x26
 800098e:	f7ff fd86 	bl	800049e <MFRC522_Request>
 8000992:	4603      	mov	r3, r0
 8000994:	461a      	mov	r2, r3
 8000996:	4b32      	ldr	r3, [pc, #200]	@ (8000a60 <main+0xfc>)
 8000998:	701a      	strb	r2, [r3, #0]
				status = MFRC522_Anticoll(str);
 800099a:	4830      	ldr	r0, [pc, #192]	@ (8000a5c <main+0xf8>)
 800099c:	f7ff fda4 	bl	80004e8 <MFRC522_Anticoll>
 80009a0:	4603      	mov	r3, r0
 80009a2:	461a      	mov	r2, r3
 80009a4:	4b2e      	ldr	r3, [pc, #184]	@ (8000a60 <main+0xfc>)
 80009a6:	701a      	strb	r2, [r3, #0]
				memcpy(sNum, str, 5);
 80009a8:	4b2e      	ldr	r3, [pc, #184]	@ (8000a64 <main+0x100>)
 80009aa:	4a2c      	ldr	r2, [pc, #176]	@ (8000a5c <main+0xf8>)
 80009ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009b0:	6018      	str	r0, [r3, #0]
 80009b2:	3304      	adds	r3, #4
 80009b4:	7019      	strb	r1, [r3, #0]
//	//	  	    HAL_Delay(100);
				 if((str[0]==1) && (str[1]==193) && (str[2]==227) && (str[3]==38) && (str[4]==5) )
 80009b6:	4b29      	ldr	r3, [pc, #164]	@ (8000a5c <main+0xf8>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d120      	bne.n	8000a00 <main+0x9c>
 80009be:	4b27      	ldr	r3, [pc, #156]	@ (8000a5c <main+0xf8>)
 80009c0:	785b      	ldrb	r3, [r3, #1]
 80009c2:	2bc1      	cmp	r3, #193	@ 0xc1
 80009c4:	d11c      	bne.n	8000a00 <main+0x9c>
 80009c6:	4b25      	ldr	r3, [pc, #148]	@ (8000a5c <main+0xf8>)
 80009c8:	789b      	ldrb	r3, [r3, #2]
 80009ca:	2be3      	cmp	r3, #227	@ 0xe3
 80009cc:	d118      	bne.n	8000a00 <main+0x9c>
 80009ce:	4b23      	ldr	r3, [pc, #140]	@ (8000a5c <main+0xf8>)
 80009d0:	78db      	ldrb	r3, [r3, #3]
 80009d2:	2b26      	cmp	r3, #38	@ 0x26
 80009d4:	d114      	bne.n	8000a00 <main+0x9c>
 80009d6:	4b21      	ldr	r3, [pc, #132]	@ (8000a5c <main+0xf8>)
 80009d8:	791b      	ldrb	r3, [r3, #4]
 80009da:	2b05      	cmp	r3, #5
 80009dc:	d110      	bne.n	8000a00 <main+0x9c>
				 {
				   //HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,0);
				   HAL_Delay(100);
 80009de:	2064      	movs	r0, #100	@ 0x64
 80009e0:	f000 fb76 	bl	80010d0 <HAL_Delay>
				   HD44780_Clear();
 80009e4:	f7ff fe42 	bl	800066c <HD44780_Clear>
				   HD44780_SetCursor(0,0);
 80009e8:	2100      	movs	r1, #0
 80009ea:	2000      	movs	r0, #0
 80009ec:	f7ff fe54 	bl	8000698 <HD44780_SetCursor>
				   HD44780_PrintStr("ON");
 80009f0:	481d      	ldr	r0, [pc, #116]	@ (8000a68 <main+0x104>)
 80009f2:	f7ff fec2 	bl	800077a <HD44780_PrintStr>
				   HAL_Delay(500);
 80009f6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009fa:	f000 fb69 	bl	80010d0 <HAL_Delay>
 80009fe:	e02c      	b.n	8000a5a <main+0xf6>
//						  HD44780_SetCursor(0,0);
//						  HD44780_PrintStr(	(char*)data_rx);
//					  }
//					  HAL_Delay(20);
				   }
				 else if((str[0]==147) && (str[1]==132) && (str[2]==128) && (str[3]==0) && (str[4]==0) )
 8000a00:	4b16      	ldr	r3, [pc, #88]	@ (8000a5c <main+0xf8>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b93      	cmp	r3, #147	@ 0x93
 8000a06:	d116      	bne.n	8000a36 <main+0xd2>
 8000a08:	4b14      	ldr	r3, [pc, #80]	@ (8000a5c <main+0xf8>)
 8000a0a:	785b      	ldrb	r3, [r3, #1]
 8000a0c:	2b84      	cmp	r3, #132	@ 0x84
 8000a0e:	d112      	bne.n	8000a36 <main+0xd2>
 8000a10:	4b12      	ldr	r3, [pc, #72]	@ (8000a5c <main+0xf8>)
 8000a12:	789b      	ldrb	r3, [r3, #2]
 8000a14:	2b80      	cmp	r3, #128	@ 0x80
 8000a16:	d10e      	bne.n	8000a36 <main+0xd2>
 8000a18:	4b10      	ldr	r3, [pc, #64]	@ (8000a5c <main+0xf8>)
 8000a1a:	78db      	ldrb	r3, [r3, #3]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d10a      	bne.n	8000a36 <main+0xd2>
 8000a20:	4b0e      	ldr	r3, [pc, #56]	@ (8000a5c <main+0xf8>)
 8000a22:	791b      	ldrb	r3, [r3, #4]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d106      	bne.n	8000a36 <main+0xd2>
				   {
				   HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,0);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a2e:	480f      	ldr	r0, [pc, #60]	@ (8000a6c <main+0x108>)
 8000a30:	f000 feb6 	bl	80017a0 <HAL_GPIO_WritePin>
 8000a34:	e011      	b.n	8000a5a <main+0xf6>
				 }
				 else
				 {
					HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,1);
 8000a36:	2201      	movs	r2, #1
 8000a38:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a3c:	480b      	ldr	r0, [pc, #44]	@ (8000a6c <main+0x108>)
 8000a3e:	f000 feaf 	bl	80017a0 <HAL_GPIO_WritePin>
					HD44780_Clear();
 8000a42:	f7ff fe13 	bl	800066c <HD44780_Clear>
					HD44780_SetCursor(0,0);
 8000a46:	2100      	movs	r1, #0
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f7ff fe25 	bl	8000698 <HD44780_SetCursor>
					HD44780_PrintStr("OFF");
 8000a4e:	4808      	ldr	r0, [pc, #32]	@ (8000a70 <main+0x10c>)
 8000a50:	f7ff fe93 	bl	800077a <HD44780_PrintStr>
					HAL_Delay(20);
 8000a54:	2014      	movs	r0, #20
 8000a56:	f000 fb3b 	bl	80010d0 <HAL_Delay>
				status = MFRC522_Request(PICC_REQIDL, str);
 8000a5a:	e796      	b.n	800098a <main+0x26>
 8000a5c:	20000138 	.word	0x20000138
 8000a60:	20000134 	.word	0x20000134
 8000a64:	20000148 	.word	0x20000148
 8000a68:	080039c8 	.word	0x080039c8
 8000a6c:	40011000 	.word	0x40011000
 8000a70:	080039cc 	.word	0x080039cc

08000a74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b090      	sub	sp, #64	@ 0x40
 8000a78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7a:	f107 0318 	add.w	r3, r7, #24
 8000a7e:	2228      	movs	r2, #40	@ 0x28
 8000a80:	2100      	movs	r1, #0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f002 ff60 	bl	8003948 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
 8000a94:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a96:	2301      	movs	r3, #1
 8000a98:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a9a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a9e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ab0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ab2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab8:	f107 0318 	add.w	r3, r7, #24
 8000abc:	4618      	mov	r0, r3
 8000abe:	f001 fb23 	bl	8002108 <HAL_RCC_OscConfig>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000ac8:	f000 f92a 	bl	8000d20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000acc:	230f      	movs	r3, #15
 8000ace:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ad8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000adc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	2102      	movs	r1, #2
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f001 fd90 	bl	800260c <HAL_RCC_ClockConfig>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000af2:	f000 f915 	bl	8000d20 <Error_Handler>
  }
}
 8000af6:	bf00      	nop
 8000af8:	3740      	adds	r7, #64	@ 0x40
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
	...

08000b00 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b04:	4b12      	ldr	r3, [pc, #72]	@ (8000b50 <MX_I2C1_Init+0x50>)
 8000b06:	4a13      	ldr	r2, [pc, #76]	@ (8000b54 <MX_I2C1_Init+0x54>)
 8000b08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b0a:	4b11      	ldr	r3, [pc, #68]	@ (8000b50 <MX_I2C1_Init+0x50>)
 8000b0c:	4a12      	ldr	r2, [pc, #72]	@ (8000b58 <MX_I2C1_Init+0x58>)
 8000b0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b10:	4b0f      	ldr	r3, [pc, #60]	@ (8000b50 <MX_I2C1_Init+0x50>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	@ (8000b50 <MX_I2C1_Init+0x50>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b50 <MX_I2C1_Init+0x50>)
 8000b1e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b22:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b24:	4b0a      	ldr	r3, [pc, #40]	@ (8000b50 <MX_I2C1_Init+0x50>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b2a:	4b09      	ldr	r3, [pc, #36]	@ (8000b50 <MX_I2C1_Init+0x50>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b30:	4b07      	ldr	r3, [pc, #28]	@ (8000b50 <MX_I2C1_Init+0x50>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b36:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <MX_I2C1_Init+0x50>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b3c:	4804      	ldr	r0, [pc, #16]	@ (8000b50 <MX_I2C1_Init+0x50>)
 8000b3e:	f000 fe47 	bl	80017d0 <HAL_I2C_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b48:	f000 f8ea 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000040 	.word	0x20000040
 8000b54:	40005400 	.word	0x40005400
 8000b58:	000186a0 	.word	0x000186a0

08000b5c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b60:	4b17      	ldr	r3, [pc, #92]	@ (8000bc0 <MX_SPI1_Init+0x64>)
 8000b62:	4a18      	ldr	r2, [pc, #96]	@ (8000bc4 <MX_SPI1_Init+0x68>)
 8000b64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b66:	4b16      	ldr	r3, [pc, #88]	@ (8000bc0 <MX_SPI1_Init+0x64>)
 8000b68:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b6e:	4b14      	ldr	r3, [pc, #80]	@ (8000bc0 <MX_SPI1_Init+0x64>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b74:	4b12      	ldr	r3, [pc, #72]	@ (8000bc0 <MX_SPI1_Init+0x64>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b7a:	4b11      	ldr	r3, [pc, #68]	@ (8000bc0 <MX_SPI1_Init+0x64>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b80:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc0 <MX_SPI1_Init+0x64>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b86:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc0 <MX_SPI1_Init+0x64>)
 8000b88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b8c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc0 <MX_SPI1_Init+0x64>)
 8000b90:	2210      	movs	r2, #16
 8000b92:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b94:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc0 <MX_SPI1_Init+0x64>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b9a:	4b09      	ldr	r3, [pc, #36]	@ (8000bc0 <MX_SPI1_Init+0x64>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ba0:	4b07      	ldr	r3, [pc, #28]	@ (8000bc0 <MX_SPI1_Init+0x64>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ba6:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <MX_SPI1_Init+0x64>)
 8000ba8:	220a      	movs	r2, #10
 8000baa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bac:	4804      	ldr	r0, [pc, #16]	@ (8000bc0 <MX_SPI1_Init+0x64>)
 8000bae:	f001 febb 	bl	8002928 <HAL_SPI_Init>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000bb8:	f000 f8b2 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000094 	.word	0x20000094
 8000bc4:	40013000 	.word	0x40013000

08000bc8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bcc:	4b11      	ldr	r3, [pc, #68]	@ (8000c14 <MX_USART1_UART_Init+0x4c>)
 8000bce:	4a12      	ldr	r2, [pc, #72]	@ (8000c18 <MX_USART1_UART_Init+0x50>)
 8000bd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000bd2:	4b10      	ldr	r3, [pc, #64]	@ (8000c14 <MX_USART1_UART_Init+0x4c>)
 8000bd4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000bd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bda:	4b0e      	ldr	r3, [pc, #56]	@ (8000c14 <MX_USART1_UART_Init+0x4c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000be0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c14 <MX_USART1_UART_Init+0x4c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000be6:	4b0b      	ldr	r3, [pc, #44]	@ (8000c14 <MX_USART1_UART_Init+0x4c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bec:	4b09      	ldr	r3, [pc, #36]	@ (8000c14 <MX_USART1_UART_Init+0x4c>)
 8000bee:	220c      	movs	r2, #12
 8000bf0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf2:	4b08      	ldr	r3, [pc, #32]	@ (8000c14 <MX_USART1_UART_Init+0x4c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <MX_USART1_UART_Init+0x4c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bfe:	4805      	ldr	r0, [pc, #20]	@ (8000c14 <MX_USART1_UART_Init+0x4c>)
 8000c00:	f002 f979 	bl	8002ef6 <HAL_UART_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c0a:	f000 f889 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	200000ec 	.word	0x200000ec
 8000c18:	40013800 	.word	0x40013800

08000c1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b088      	sub	sp, #32
 8000c20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c22:	f107 0310 	add.w	r3, r7, #16
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c30:	4b37      	ldr	r3, [pc, #220]	@ (8000d10 <MX_GPIO_Init+0xf4>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	4a36      	ldr	r2, [pc, #216]	@ (8000d10 <MX_GPIO_Init+0xf4>)
 8000c36:	f043 0310 	orr.w	r3, r3, #16
 8000c3a:	6193      	str	r3, [r2, #24]
 8000c3c:	4b34      	ldr	r3, [pc, #208]	@ (8000d10 <MX_GPIO_Init+0xf4>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	f003 0310 	and.w	r3, r3, #16
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c48:	4b31      	ldr	r3, [pc, #196]	@ (8000d10 <MX_GPIO_Init+0xf4>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	4a30      	ldr	r2, [pc, #192]	@ (8000d10 <MX_GPIO_Init+0xf4>)
 8000c4e:	f043 0320 	orr.w	r3, r3, #32
 8000c52:	6193      	str	r3, [r2, #24]
 8000c54:	4b2e      	ldr	r3, [pc, #184]	@ (8000d10 <MX_GPIO_Init+0xf4>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	f003 0320 	and.w	r3, r3, #32
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c60:	4b2b      	ldr	r3, [pc, #172]	@ (8000d10 <MX_GPIO_Init+0xf4>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	4a2a      	ldr	r2, [pc, #168]	@ (8000d10 <MX_GPIO_Init+0xf4>)
 8000c66:	f043 0304 	orr.w	r3, r3, #4
 8000c6a:	6193      	str	r3, [r2, #24]
 8000c6c:	4b28      	ldr	r3, [pc, #160]	@ (8000d10 <MX_GPIO_Init+0xf4>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	f003 0304 	and.w	r3, r3, #4
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c78:	4b25      	ldr	r3, [pc, #148]	@ (8000d10 <MX_GPIO_Init+0xf4>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	4a24      	ldr	r2, [pc, #144]	@ (8000d10 <MX_GPIO_Init+0xf4>)
 8000c7e:	f043 0308 	orr.w	r3, r3, #8
 8000c82:	6193      	str	r3, [r2, #24]
 8000c84:	4b22      	ldr	r3, [pc, #136]	@ (8000d10 <MX_GPIO_Init+0xf4>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	f003 0308 	and.w	r3, r3, #8
 8000c8c:	603b      	str	r3, [r7, #0]
 8000c8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c90:	2200      	movs	r2, #0
 8000c92:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c96:	481f      	ldr	r0, [pc, #124]	@ (8000d14 <MX_GPIO_Init+0xf8>)
 8000c98:	f000 fd82 	bl	80017a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2110      	movs	r1, #16
 8000ca0:	481d      	ldr	r0, [pc, #116]	@ (8000d18 <MX_GPIO_Init+0xfc>)
 8000ca2:	f000 fd7d 	bl	80017a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2101      	movs	r1, #1
 8000caa:	481c      	ldr	r0, [pc, #112]	@ (8000d1c <MX_GPIO_Init+0x100>)
 8000cac:	f000 fd78 	bl	80017a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000cb0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc2:	f107 0310 	add.w	r3, r7, #16
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4812      	ldr	r0, [pc, #72]	@ (8000d14 <MX_GPIO_Init+0xf8>)
 8000cca:	f000 fbe5 	bl	8001498 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cce:	2310      	movs	r3, #16
 8000cd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cde:	f107 0310 	add.w	r3, r7, #16
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	480c      	ldr	r0, [pc, #48]	@ (8000d18 <MX_GPIO_Init+0xfc>)
 8000ce6:	f000 fbd7 	bl	8001498 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cea:	2301      	movs	r3, #1
 8000cec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfa:	f107 0310 	add.w	r3, r7, #16
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4806      	ldr	r0, [pc, #24]	@ (8000d1c <MX_GPIO_Init+0x100>)
 8000d02:	f000 fbc9 	bl	8001498 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d06:	bf00      	nop
 8000d08:	3720      	adds	r7, #32
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40021000 	.word	0x40021000
 8000d14:	40011000 	.word	0x40011000
 8000d18:	40010800 	.word	0x40010800
 8000d1c:	40010c00 	.word	0x40010c00

08000d20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d24:	b672      	cpsid	i
}
 8000d26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <Error_Handler+0x8>

08000d2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d32:	4b15      	ldr	r3, [pc, #84]	@ (8000d88 <HAL_MspInit+0x5c>)
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	4a14      	ldr	r2, [pc, #80]	@ (8000d88 <HAL_MspInit+0x5c>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6193      	str	r3, [r2, #24]
 8000d3e:	4b12      	ldr	r3, [pc, #72]	@ (8000d88 <HAL_MspInit+0x5c>)
 8000d40:	699b      	ldr	r3, [r3, #24]
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d88 <HAL_MspInit+0x5c>)
 8000d4c:	69db      	ldr	r3, [r3, #28]
 8000d4e:	4a0e      	ldr	r2, [pc, #56]	@ (8000d88 <HAL_MspInit+0x5c>)
 8000d50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d54:	61d3      	str	r3, [r2, #28]
 8000d56:	4b0c      	ldr	r3, [pc, #48]	@ (8000d88 <HAL_MspInit+0x5c>)
 8000d58:	69db      	ldr	r3, [r3, #28]
 8000d5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d62:	4b0a      	ldr	r3, [pc, #40]	@ (8000d8c <HAL_MspInit+0x60>)
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	4a04      	ldr	r2, [pc, #16]	@ (8000d8c <HAL_MspInit+0x60>)
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	3714      	adds	r7, #20
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	40010000 	.word	0x40010000

08000d90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 0310 	add.w	r3, r7, #16
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a15      	ldr	r2, [pc, #84]	@ (8000e00 <HAL_I2C_MspInit+0x70>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d123      	bne.n	8000df8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db0:	4b14      	ldr	r3, [pc, #80]	@ (8000e04 <HAL_I2C_MspInit+0x74>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	4a13      	ldr	r2, [pc, #76]	@ (8000e04 <HAL_I2C_MspInit+0x74>)
 8000db6:	f043 0308 	orr.w	r3, r3, #8
 8000dba:	6193      	str	r3, [r2, #24]
 8000dbc:	4b11      	ldr	r3, [pc, #68]	@ (8000e04 <HAL_I2C_MspInit+0x74>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	f003 0308 	and.w	r3, r3, #8
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dc8:	23c0      	movs	r3, #192	@ 0xc0
 8000dca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dcc:	2312      	movs	r3, #18
 8000dce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd4:	f107 0310 	add.w	r3, r7, #16
 8000dd8:	4619      	mov	r1, r3
 8000dda:	480b      	ldr	r0, [pc, #44]	@ (8000e08 <HAL_I2C_MspInit+0x78>)
 8000ddc:	f000 fb5c 	bl	8001498 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000de0:	4b08      	ldr	r3, [pc, #32]	@ (8000e04 <HAL_I2C_MspInit+0x74>)
 8000de2:	69db      	ldr	r3, [r3, #28]
 8000de4:	4a07      	ldr	r2, [pc, #28]	@ (8000e04 <HAL_I2C_MspInit+0x74>)
 8000de6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000dea:	61d3      	str	r3, [r2, #28]
 8000dec:	4b05      	ldr	r3, [pc, #20]	@ (8000e04 <HAL_I2C_MspInit+0x74>)
 8000dee:	69db      	ldr	r3, [r3, #28]
 8000df0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000df8:	bf00      	nop
 8000dfa:	3720      	adds	r7, #32
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40005400 	.word	0x40005400
 8000e04:	40021000 	.word	0x40021000
 8000e08:	40010c00 	.word	0x40010c00

08000e0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b088      	sub	sp, #32
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 0310 	add.w	r3, r7, #16
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a1b      	ldr	r2, [pc, #108]	@ (8000e94 <HAL_SPI_MspInit+0x88>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d12f      	bne.n	8000e8c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e98 <HAL_SPI_MspInit+0x8c>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	4a19      	ldr	r2, [pc, #100]	@ (8000e98 <HAL_SPI_MspInit+0x8c>)
 8000e32:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e36:	6193      	str	r3, [r2, #24]
 8000e38:	4b17      	ldr	r3, [pc, #92]	@ (8000e98 <HAL_SPI_MspInit+0x8c>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e44:	4b14      	ldr	r3, [pc, #80]	@ (8000e98 <HAL_SPI_MspInit+0x8c>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	4a13      	ldr	r2, [pc, #76]	@ (8000e98 <HAL_SPI_MspInit+0x8c>)
 8000e4a:	f043 0304 	orr.w	r3, r3, #4
 8000e4e:	6193      	str	r3, [r2, #24]
 8000e50:	4b11      	ldr	r3, [pc, #68]	@ (8000e98 <HAL_SPI_MspInit+0x8c>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	f003 0304 	and.w	r3, r3, #4
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000e5c:	23a0      	movs	r3, #160	@ 0xa0
 8000e5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	2302      	movs	r3, #2
 8000e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e64:	2303      	movs	r3, #3
 8000e66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e68:	f107 0310 	add.w	r3, r7, #16
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	480b      	ldr	r0, [pc, #44]	@ (8000e9c <HAL_SPI_MspInit+0x90>)
 8000e70:	f000 fb12 	bl	8001498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e74:	2340      	movs	r3, #64	@ 0x40
 8000e76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e80:	f107 0310 	add.w	r3, r7, #16
 8000e84:	4619      	mov	r1, r3
 8000e86:	4805      	ldr	r0, [pc, #20]	@ (8000e9c <HAL_SPI_MspInit+0x90>)
 8000e88:	f000 fb06 	bl	8001498 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000e8c:	bf00      	nop
 8000e8e:	3720      	adds	r7, #32
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40013000 	.word	0x40013000
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	40010800 	.word	0x40010800

08000ea0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b088      	sub	sp, #32
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 0310 	add.w	r3, r7, #16
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a20      	ldr	r2, [pc, #128]	@ (8000f3c <HAL_UART_MspInit+0x9c>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d139      	bne.n	8000f34 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ec0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f40 <HAL_UART_MspInit+0xa0>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	4a1e      	ldr	r2, [pc, #120]	@ (8000f40 <HAL_UART_MspInit+0xa0>)
 8000ec6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eca:	6193      	str	r3, [r2, #24]
 8000ecc:	4b1c      	ldr	r3, [pc, #112]	@ (8000f40 <HAL_UART_MspInit+0xa0>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed8:	4b19      	ldr	r3, [pc, #100]	@ (8000f40 <HAL_UART_MspInit+0xa0>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	4a18      	ldr	r2, [pc, #96]	@ (8000f40 <HAL_UART_MspInit+0xa0>)
 8000ede:	f043 0304 	orr.w	r3, r3, #4
 8000ee2:	6193      	str	r3, [r2, #24]
 8000ee4:	4b16      	ldr	r3, [pc, #88]	@ (8000f40 <HAL_UART_MspInit+0xa0>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	f003 0304 	and.w	r3, r3, #4
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ef0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ef4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000efa:	2303      	movs	r3, #3
 8000efc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efe:	f107 0310 	add.w	r3, r7, #16
 8000f02:	4619      	mov	r1, r3
 8000f04:	480f      	ldr	r0, [pc, #60]	@ (8000f44 <HAL_UART_MspInit+0xa4>)
 8000f06:	f000 fac7 	bl	8001498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f18:	f107 0310 	add.w	r3, r7, #16
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4809      	ldr	r0, [pc, #36]	@ (8000f44 <HAL_UART_MspInit+0xa4>)
 8000f20:	f000 faba 	bl	8001498 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f24:	2200      	movs	r2, #0
 8000f26:	2100      	movs	r1, #0
 8000f28:	2025      	movs	r0, #37	@ 0x25
 8000f2a:	f000 f9cc 	bl	80012c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f2e:	2025      	movs	r0, #37	@ 0x25
 8000f30:	f000 f9e5 	bl	80012fe <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000f34:	bf00      	nop
 8000f36:	3720      	adds	r7, #32
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40013800 	.word	0x40013800
 8000f40:	40021000 	.word	0x40021000
 8000f44:	40010800 	.word	0x40010800

08000f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f4c:	bf00      	nop
 8000f4e:	e7fd      	b.n	8000f4c <NMI_Handler+0x4>

08000f50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f54:	bf00      	nop
 8000f56:	e7fd      	b.n	8000f54 <HardFault_Handler+0x4>

08000f58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f5c:	bf00      	nop
 8000f5e:	e7fd      	b.n	8000f5c <MemManage_Handler+0x4>

08000f60 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f64:	bf00      	nop
 8000f66:	e7fd      	b.n	8000f64 <BusFault_Handler+0x4>

08000f68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f6c:	bf00      	nop
 8000f6e:	e7fd      	b.n	8000f6c <UsageFault_Handler+0x4>

08000f70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr

08000f7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr

08000f88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr

08000f94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f98:	f000 f87e 	bl	8001098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fa4:	4802      	ldr	r0, [pc, #8]	@ (8000fb0 <USART1_IRQHandler+0x10>)
 8000fa6:	f001 fff7 	bl	8002f98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	200000ec 	.word	0x200000ec

08000fb4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr

08000fc0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fc0:	f7ff fff8 	bl	8000fb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fc4:	480b      	ldr	r0, [pc, #44]	@ (8000ff4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000fc6:	490c      	ldr	r1, [pc, #48]	@ (8000ff8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000fc8:	4a0c      	ldr	r2, [pc, #48]	@ (8000ffc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fcc:	e002      	b.n	8000fd4 <LoopCopyDataInit>

08000fce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd2:	3304      	adds	r3, #4

08000fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd8:	d3f9      	bcc.n	8000fce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fda:	4a09      	ldr	r2, [pc, #36]	@ (8001000 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000fdc:	4c09      	ldr	r4, [pc, #36]	@ (8001004 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe0:	e001      	b.n	8000fe6 <LoopFillZerobss>

08000fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fe2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe4:	3204      	adds	r2, #4

08000fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe8:	d3fb      	bcc.n	8000fe2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fea:	f002 fcb5 	bl	8003958 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fee:	f7ff fcb9 	bl	8000964 <main>
  bx lr
 8000ff2:	4770      	bx	lr
  ldr r0, =_sdata
 8000ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000ffc:	08003a04 	.word	0x08003a04
  ldr r2, =_sbss
 8001000:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001004:	20000154 	.word	0x20000154

08001008 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001008:	e7fe      	b.n	8001008 <ADC1_2_IRQHandler>
	...

0800100c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001010:	4b08      	ldr	r3, [pc, #32]	@ (8001034 <HAL_Init+0x28>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a07      	ldr	r2, [pc, #28]	@ (8001034 <HAL_Init+0x28>)
 8001016:	f043 0310 	orr.w	r3, r3, #16
 800101a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800101c:	2003      	movs	r0, #3
 800101e:	f000 f947 	bl	80012b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001022:	200f      	movs	r0, #15
 8001024:	f000 f808 	bl	8001038 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001028:	f7ff fe80 	bl	8000d2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40022000 	.word	0x40022000

08001038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001040:	4b12      	ldr	r3, [pc, #72]	@ (800108c <HAL_InitTick+0x54>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b12      	ldr	r3, [pc, #72]	@ (8001090 <HAL_InitTick+0x58>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4619      	mov	r1, r3
 800104a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800104e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001052:	fbb2 f3f3 	udiv	r3, r2, r3
 8001056:	4618      	mov	r0, r3
 8001058:	f000 f95f 	bl	800131a <HAL_SYSTICK_Config>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e00e      	b.n	8001084 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2b0f      	cmp	r3, #15
 800106a:	d80a      	bhi.n	8001082 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800106c:	2200      	movs	r2, #0
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	f000 f927 	bl	80012c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001078:	4a06      	ldr	r2, [pc, #24]	@ (8001094 <HAL_InitTick+0x5c>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800107e:	2300      	movs	r3, #0
 8001080:	e000      	b.n	8001084 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
}
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000010 	.word	0x20000010
 8001090:	20000018 	.word	0x20000018
 8001094:	20000014 	.word	0x20000014

08001098 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800109c:	4b05      	ldr	r3, [pc, #20]	@ (80010b4 <HAL_IncTick+0x1c>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b05      	ldr	r3, [pc, #20]	@ (80010b8 <HAL_IncTick+0x20>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4413      	add	r3, r2
 80010a8:	4a03      	ldr	r2, [pc, #12]	@ (80010b8 <HAL_IncTick+0x20>)
 80010aa:	6013      	str	r3, [r2, #0]
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr
 80010b4:	20000018 	.word	0x20000018
 80010b8:	20000150 	.word	0x20000150

080010bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return uwTick;
 80010c0:	4b02      	ldr	r3, [pc, #8]	@ (80010cc <HAL_GetTick+0x10>)
 80010c2:	681b      	ldr	r3, [r3, #0]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr
 80010cc:	20000150 	.word	0x20000150

080010d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010d8:	f7ff fff0 	bl	80010bc <HAL_GetTick>
 80010dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e8:	d005      	beq.n	80010f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001114 <HAL_Delay+0x44>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	461a      	mov	r2, r3
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4413      	add	r3, r2
 80010f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010f6:	bf00      	nop
 80010f8:	f7ff ffe0 	bl	80010bc <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	429a      	cmp	r2, r3
 8001106:	d8f7      	bhi.n	80010f8 <HAL_Delay+0x28>
  {
  }
}
 8001108:	bf00      	nop
 800110a:	bf00      	nop
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000018 	.word	0x20000018

08001118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001128:	4b0c      	ldr	r3, [pc, #48]	@ (800115c <__NVIC_SetPriorityGrouping+0x44>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001134:	4013      	ands	r3, r2
 8001136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001140:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001144:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800114a:	4a04      	ldr	r2, [pc, #16]	@ (800115c <__NVIC_SetPriorityGrouping+0x44>)
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	60d3      	str	r3, [r2, #12]
}
 8001150:	bf00      	nop
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001164:	4b04      	ldr	r3, [pc, #16]	@ (8001178 <__NVIC_GetPriorityGrouping+0x18>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	0a1b      	lsrs	r3, r3, #8
 800116a:	f003 0307 	and.w	r3, r3, #7
}
 800116e:	4618      	mov	r0, r3
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	2b00      	cmp	r3, #0
 800118c:	db0b      	blt.n	80011a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	f003 021f 	and.w	r2, r3, #31
 8001194:	4906      	ldr	r1, [pc, #24]	@ (80011b0 <__NVIC_EnableIRQ+0x34>)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	095b      	lsrs	r3, r3, #5
 800119c:	2001      	movs	r0, #1
 800119e:	fa00 f202 	lsl.w	r2, r0, r2
 80011a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr
 80011b0:	e000e100 	.word	0xe000e100

080011b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	6039      	str	r1, [r7, #0]
 80011be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	db0a      	blt.n	80011de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	490c      	ldr	r1, [pc, #48]	@ (8001200 <__NVIC_SetPriority+0x4c>)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	0112      	lsls	r2, r2, #4
 80011d4:	b2d2      	uxtb	r2, r2
 80011d6:	440b      	add	r3, r1
 80011d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011dc:	e00a      	b.n	80011f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	4908      	ldr	r1, [pc, #32]	@ (8001204 <__NVIC_SetPriority+0x50>)
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	f003 030f 	and.w	r3, r3, #15
 80011ea:	3b04      	subs	r3, #4
 80011ec:	0112      	lsls	r2, r2, #4
 80011ee:	b2d2      	uxtb	r2, r2
 80011f0:	440b      	add	r3, r1
 80011f2:	761a      	strb	r2, [r3, #24]
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bc80      	pop	{r7}
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000e100 	.word	0xe000e100
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001208:	b480      	push	{r7}
 800120a:	b089      	sub	sp, #36	@ 0x24
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f1c3 0307 	rsb	r3, r3, #7
 8001222:	2b04      	cmp	r3, #4
 8001224:	bf28      	it	cs
 8001226:	2304      	movcs	r3, #4
 8001228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3304      	adds	r3, #4
 800122e:	2b06      	cmp	r3, #6
 8001230:	d902      	bls.n	8001238 <NVIC_EncodePriority+0x30>
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3b03      	subs	r3, #3
 8001236:	e000      	b.n	800123a <NVIC_EncodePriority+0x32>
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800123c:	f04f 32ff 	mov.w	r2, #4294967295
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43da      	mvns	r2, r3
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	401a      	ands	r2, r3
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001250:	f04f 31ff 	mov.w	r1, #4294967295
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	fa01 f303 	lsl.w	r3, r1, r3
 800125a:	43d9      	mvns	r1, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001260:	4313      	orrs	r3, r2
         );
}
 8001262:	4618      	mov	r0, r3
 8001264:	3724      	adds	r7, #36	@ 0x24
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr

0800126c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3b01      	subs	r3, #1
 8001278:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800127c:	d301      	bcc.n	8001282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800127e:	2301      	movs	r3, #1
 8001280:	e00f      	b.n	80012a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001282:	4a0a      	ldr	r2, [pc, #40]	@ (80012ac <SysTick_Config+0x40>)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3b01      	subs	r3, #1
 8001288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800128a:	210f      	movs	r1, #15
 800128c:	f04f 30ff 	mov.w	r0, #4294967295
 8001290:	f7ff ff90 	bl	80011b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001294:	4b05      	ldr	r3, [pc, #20]	@ (80012ac <SysTick_Config+0x40>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800129a:	4b04      	ldr	r3, [pc, #16]	@ (80012ac <SysTick_Config+0x40>)
 800129c:	2207      	movs	r2, #7
 800129e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	e000e010 	.word	0xe000e010

080012b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff ff2d 	bl	8001118 <__NVIC_SetPriorityGrouping>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b086      	sub	sp, #24
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	4603      	mov	r3, r0
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	607a      	str	r2, [r7, #4]
 80012d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012d8:	f7ff ff42 	bl	8001160 <__NVIC_GetPriorityGrouping>
 80012dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	68b9      	ldr	r1, [r7, #8]
 80012e2:	6978      	ldr	r0, [r7, #20]
 80012e4:	f7ff ff90 	bl	8001208 <NVIC_EncodePriority>
 80012e8:	4602      	mov	r2, r0
 80012ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ee:	4611      	mov	r1, r2
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff5f 	bl	80011b4 <__NVIC_SetPriority>
}
 80012f6:	bf00      	nop
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	4603      	mov	r3, r0
 8001306:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff35 	bl	800117c <__NVIC_EnableIRQ>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff ffa2 	bl	800126c <SysTick_Config>
 8001328:	4603      	mov	r3, r0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001332:	b480      	push	{r7}
 8001334:	b085      	sub	sp, #20
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800133a:	2300      	movs	r3, #0
 800133c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b02      	cmp	r3, #2
 8001348:	d008      	beq.n	800135c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2204      	movs	r2, #4
 800134e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e020      	b.n	800139e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f022 020e 	bic.w	r2, r2, #14
 800136a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f022 0201 	bic.w	r2, r2, #1
 800137a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001384:	2101      	movs	r1, #1
 8001386:	fa01 f202 	lsl.w	r2, r1, r2
 800138a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2201      	movs	r2, #1
 8001390:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800139c:	7bfb      	ldrb	r3, [r7, #15]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr

080013a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013b0:	2300      	movs	r3, #0
 80013b2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d005      	beq.n	80013cc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2204      	movs	r2, #4
 80013c4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	73fb      	strb	r3, [r7, #15]
 80013ca:	e051      	b.n	8001470 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f022 020e 	bic.w	r2, r2, #14
 80013da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f022 0201 	bic.w	r2, r2, #1
 80013ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a22      	ldr	r2, [pc, #136]	@ (800147c <HAL_DMA_Abort_IT+0xd4>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d029      	beq.n	800144a <HAL_DMA_Abort_IT+0xa2>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a21      	ldr	r2, [pc, #132]	@ (8001480 <HAL_DMA_Abort_IT+0xd8>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d022      	beq.n	8001446 <HAL_DMA_Abort_IT+0x9e>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a1f      	ldr	r2, [pc, #124]	@ (8001484 <HAL_DMA_Abort_IT+0xdc>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d01a      	beq.n	8001440 <HAL_DMA_Abort_IT+0x98>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a1e      	ldr	r2, [pc, #120]	@ (8001488 <HAL_DMA_Abort_IT+0xe0>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d012      	beq.n	800143a <HAL_DMA_Abort_IT+0x92>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a1c      	ldr	r2, [pc, #112]	@ (800148c <HAL_DMA_Abort_IT+0xe4>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d00a      	beq.n	8001434 <HAL_DMA_Abort_IT+0x8c>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a1b      	ldr	r2, [pc, #108]	@ (8001490 <HAL_DMA_Abort_IT+0xe8>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d102      	bne.n	800142e <HAL_DMA_Abort_IT+0x86>
 8001428:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800142c:	e00e      	b.n	800144c <HAL_DMA_Abort_IT+0xa4>
 800142e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001432:	e00b      	b.n	800144c <HAL_DMA_Abort_IT+0xa4>
 8001434:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001438:	e008      	b.n	800144c <HAL_DMA_Abort_IT+0xa4>
 800143a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800143e:	e005      	b.n	800144c <HAL_DMA_Abort_IT+0xa4>
 8001440:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001444:	e002      	b.n	800144c <HAL_DMA_Abort_IT+0xa4>
 8001446:	2310      	movs	r3, #16
 8001448:	e000      	b.n	800144c <HAL_DMA_Abort_IT+0xa4>
 800144a:	2301      	movs	r3, #1
 800144c:	4a11      	ldr	r2, [pc, #68]	@ (8001494 <HAL_DMA_Abort_IT+0xec>)
 800144e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2201      	movs	r2, #1
 8001454:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	4798      	blx	r3
    } 
  }
  return status;
 8001470:	7bfb      	ldrb	r3, [r7, #15]
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40020008 	.word	0x40020008
 8001480:	4002001c 	.word	0x4002001c
 8001484:	40020030 	.word	0x40020030
 8001488:	40020044 	.word	0x40020044
 800148c:	40020058 	.word	0x40020058
 8001490:	4002006c 	.word	0x4002006c
 8001494:	40020000 	.word	0x40020000

08001498 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001498:	b480      	push	{r7}
 800149a:	b08b      	sub	sp, #44	@ 0x2c
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014a2:	2300      	movs	r3, #0
 80014a4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014a6:	2300      	movs	r3, #0
 80014a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014aa:	e169      	b.n	8001780 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014ac:	2201      	movs	r2, #1
 80014ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	69fa      	ldr	r2, [r7, #28]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	f040 8158 	bne.w	800177a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	4a9a      	ldr	r2, [pc, #616]	@ (8001738 <HAL_GPIO_Init+0x2a0>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d05e      	beq.n	8001592 <HAL_GPIO_Init+0xfa>
 80014d4:	4a98      	ldr	r2, [pc, #608]	@ (8001738 <HAL_GPIO_Init+0x2a0>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d875      	bhi.n	80015c6 <HAL_GPIO_Init+0x12e>
 80014da:	4a98      	ldr	r2, [pc, #608]	@ (800173c <HAL_GPIO_Init+0x2a4>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d058      	beq.n	8001592 <HAL_GPIO_Init+0xfa>
 80014e0:	4a96      	ldr	r2, [pc, #600]	@ (800173c <HAL_GPIO_Init+0x2a4>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d86f      	bhi.n	80015c6 <HAL_GPIO_Init+0x12e>
 80014e6:	4a96      	ldr	r2, [pc, #600]	@ (8001740 <HAL_GPIO_Init+0x2a8>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d052      	beq.n	8001592 <HAL_GPIO_Init+0xfa>
 80014ec:	4a94      	ldr	r2, [pc, #592]	@ (8001740 <HAL_GPIO_Init+0x2a8>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d869      	bhi.n	80015c6 <HAL_GPIO_Init+0x12e>
 80014f2:	4a94      	ldr	r2, [pc, #592]	@ (8001744 <HAL_GPIO_Init+0x2ac>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d04c      	beq.n	8001592 <HAL_GPIO_Init+0xfa>
 80014f8:	4a92      	ldr	r2, [pc, #584]	@ (8001744 <HAL_GPIO_Init+0x2ac>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d863      	bhi.n	80015c6 <HAL_GPIO_Init+0x12e>
 80014fe:	4a92      	ldr	r2, [pc, #584]	@ (8001748 <HAL_GPIO_Init+0x2b0>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d046      	beq.n	8001592 <HAL_GPIO_Init+0xfa>
 8001504:	4a90      	ldr	r2, [pc, #576]	@ (8001748 <HAL_GPIO_Init+0x2b0>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d85d      	bhi.n	80015c6 <HAL_GPIO_Init+0x12e>
 800150a:	2b12      	cmp	r3, #18
 800150c:	d82a      	bhi.n	8001564 <HAL_GPIO_Init+0xcc>
 800150e:	2b12      	cmp	r3, #18
 8001510:	d859      	bhi.n	80015c6 <HAL_GPIO_Init+0x12e>
 8001512:	a201      	add	r2, pc, #4	@ (adr r2, 8001518 <HAL_GPIO_Init+0x80>)
 8001514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001518:	08001593 	.word	0x08001593
 800151c:	0800156d 	.word	0x0800156d
 8001520:	0800157f 	.word	0x0800157f
 8001524:	080015c1 	.word	0x080015c1
 8001528:	080015c7 	.word	0x080015c7
 800152c:	080015c7 	.word	0x080015c7
 8001530:	080015c7 	.word	0x080015c7
 8001534:	080015c7 	.word	0x080015c7
 8001538:	080015c7 	.word	0x080015c7
 800153c:	080015c7 	.word	0x080015c7
 8001540:	080015c7 	.word	0x080015c7
 8001544:	080015c7 	.word	0x080015c7
 8001548:	080015c7 	.word	0x080015c7
 800154c:	080015c7 	.word	0x080015c7
 8001550:	080015c7 	.word	0x080015c7
 8001554:	080015c7 	.word	0x080015c7
 8001558:	080015c7 	.word	0x080015c7
 800155c:	08001575 	.word	0x08001575
 8001560:	08001589 	.word	0x08001589
 8001564:	4a79      	ldr	r2, [pc, #484]	@ (800174c <HAL_GPIO_Init+0x2b4>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d013      	beq.n	8001592 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800156a:	e02c      	b.n	80015c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	623b      	str	r3, [r7, #32]
          break;
 8001572:	e029      	b.n	80015c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	3304      	adds	r3, #4
 800157a:	623b      	str	r3, [r7, #32]
          break;
 800157c:	e024      	b.n	80015c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	3308      	adds	r3, #8
 8001584:	623b      	str	r3, [r7, #32]
          break;
 8001586:	e01f      	b.n	80015c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	330c      	adds	r3, #12
 800158e:	623b      	str	r3, [r7, #32]
          break;
 8001590:	e01a      	b.n	80015c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d102      	bne.n	80015a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800159a:	2304      	movs	r3, #4
 800159c:	623b      	str	r3, [r7, #32]
          break;
 800159e:	e013      	b.n	80015c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d105      	bne.n	80015b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015a8:	2308      	movs	r3, #8
 80015aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	69fa      	ldr	r2, [r7, #28]
 80015b0:	611a      	str	r2, [r3, #16]
          break;
 80015b2:	e009      	b.n	80015c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015b4:	2308      	movs	r3, #8
 80015b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69fa      	ldr	r2, [r7, #28]
 80015bc:	615a      	str	r2, [r3, #20]
          break;
 80015be:	e003      	b.n	80015c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015c0:	2300      	movs	r3, #0
 80015c2:	623b      	str	r3, [r7, #32]
          break;
 80015c4:	e000      	b.n	80015c8 <HAL_GPIO_Init+0x130>
          break;
 80015c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	2bff      	cmp	r3, #255	@ 0xff
 80015cc:	d801      	bhi.n	80015d2 <HAL_GPIO_Init+0x13a>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	e001      	b.n	80015d6 <HAL_GPIO_Init+0x13e>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	3304      	adds	r3, #4
 80015d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	2bff      	cmp	r3, #255	@ 0xff
 80015dc:	d802      	bhi.n	80015e4 <HAL_GPIO_Init+0x14c>
 80015de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	e002      	b.n	80015ea <HAL_GPIO_Init+0x152>
 80015e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e6:	3b08      	subs	r3, #8
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	210f      	movs	r1, #15
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	fa01 f303 	lsl.w	r3, r1, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	401a      	ands	r2, r3
 80015fc:	6a39      	ldr	r1, [r7, #32]
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	fa01 f303 	lsl.w	r3, r1, r3
 8001604:	431a      	orrs	r2, r3
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	f000 80b1 	beq.w	800177a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001618:	4b4d      	ldr	r3, [pc, #308]	@ (8001750 <HAL_GPIO_Init+0x2b8>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	4a4c      	ldr	r2, [pc, #304]	@ (8001750 <HAL_GPIO_Init+0x2b8>)
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	6193      	str	r3, [r2, #24]
 8001624:	4b4a      	ldr	r3, [pc, #296]	@ (8001750 <HAL_GPIO_Init+0x2b8>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001630:	4a48      	ldr	r2, [pc, #288]	@ (8001754 <HAL_GPIO_Init+0x2bc>)
 8001632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001634:	089b      	lsrs	r3, r3, #2
 8001636:	3302      	adds	r3, #2
 8001638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800163c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800163e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001640:	f003 0303 	and.w	r3, r3, #3
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	220f      	movs	r2, #15
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	4013      	ands	r3, r2
 8001652:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4a40      	ldr	r2, [pc, #256]	@ (8001758 <HAL_GPIO_Init+0x2c0>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d013      	beq.n	8001684 <HAL_GPIO_Init+0x1ec>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4a3f      	ldr	r2, [pc, #252]	@ (800175c <HAL_GPIO_Init+0x2c4>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d00d      	beq.n	8001680 <HAL_GPIO_Init+0x1e8>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4a3e      	ldr	r2, [pc, #248]	@ (8001760 <HAL_GPIO_Init+0x2c8>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d007      	beq.n	800167c <HAL_GPIO_Init+0x1e4>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4a3d      	ldr	r2, [pc, #244]	@ (8001764 <HAL_GPIO_Init+0x2cc>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d101      	bne.n	8001678 <HAL_GPIO_Init+0x1e0>
 8001674:	2303      	movs	r3, #3
 8001676:	e006      	b.n	8001686 <HAL_GPIO_Init+0x1ee>
 8001678:	2304      	movs	r3, #4
 800167a:	e004      	b.n	8001686 <HAL_GPIO_Init+0x1ee>
 800167c:	2302      	movs	r3, #2
 800167e:	e002      	b.n	8001686 <HAL_GPIO_Init+0x1ee>
 8001680:	2301      	movs	r3, #1
 8001682:	e000      	b.n	8001686 <HAL_GPIO_Init+0x1ee>
 8001684:	2300      	movs	r3, #0
 8001686:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001688:	f002 0203 	and.w	r2, r2, #3
 800168c:	0092      	lsls	r2, r2, #2
 800168e:	4093      	lsls	r3, r2
 8001690:	68fa      	ldr	r2, [r7, #12]
 8001692:	4313      	orrs	r3, r2
 8001694:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001696:	492f      	ldr	r1, [pc, #188]	@ (8001754 <HAL_GPIO_Init+0x2bc>)
 8001698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800169a:	089b      	lsrs	r3, r3, #2
 800169c:	3302      	adds	r3, #2
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d006      	beq.n	80016be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001768 <HAL_GPIO_Init+0x2d0>)
 80016b2:	689a      	ldr	r2, [r3, #8]
 80016b4:	492c      	ldr	r1, [pc, #176]	@ (8001768 <HAL_GPIO_Init+0x2d0>)
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	608b      	str	r3, [r1, #8]
 80016bc:	e006      	b.n	80016cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016be:	4b2a      	ldr	r3, [pc, #168]	@ (8001768 <HAL_GPIO_Init+0x2d0>)
 80016c0:	689a      	ldr	r2, [r3, #8]
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	43db      	mvns	r3, r3
 80016c6:	4928      	ldr	r1, [pc, #160]	@ (8001768 <HAL_GPIO_Init+0x2d0>)
 80016c8:	4013      	ands	r3, r2
 80016ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d006      	beq.n	80016e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016d8:	4b23      	ldr	r3, [pc, #140]	@ (8001768 <HAL_GPIO_Init+0x2d0>)
 80016da:	68da      	ldr	r2, [r3, #12]
 80016dc:	4922      	ldr	r1, [pc, #136]	@ (8001768 <HAL_GPIO_Init+0x2d0>)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	60cb      	str	r3, [r1, #12]
 80016e4:	e006      	b.n	80016f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016e6:	4b20      	ldr	r3, [pc, #128]	@ (8001768 <HAL_GPIO_Init+0x2d0>)
 80016e8:	68da      	ldr	r2, [r3, #12]
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	491e      	ldr	r1, [pc, #120]	@ (8001768 <HAL_GPIO_Init+0x2d0>)
 80016f0:	4013      	ands	r3, r2
 80016f2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d006      	beq.n	800170e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001700:	4b19      	ldr	r3, [pc, #100]	@ (8001768 <HAL_GPIO_Init+0x2d0>)
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	4918      	ldr	r1, [pc, #96]	@ (8001768 <HAL_GPIO_Init+0x2d0>)
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	4313      	orrs	r3, r2
 800170a:	604b      	str	r3, [r1, #4]
 800170c:	e006      	b.n	800171c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800170e:	4b16      	ldr	r3, [pc, #88]	@ (8001768 <HAL_GPIO_Init+0x2d0>)
 8001710:	685a      	ldr	r2, [r3, #4]
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	43db      	mvns	r3, r3
 8001716:	4914      	ldr	r1, [pc, #80]	@ (8001768 <HAL_GPIO_Init+0x2d0>)
 8001718:	4013      	ands	r3, r2
 800171a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d021      	beq.n	800176c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001728:	4b0f      	ldr	r3, [pc, #60]	@ (8001768 <HAL_GPIO_Init+0x2d0>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	490e      	ldr	r1, [pc, #56]	@ (8001768 <HAL_GPIO_Init+0x2d0>)
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	4313      	orrs	r3, r2
 8001732:	600b      	str	r3, [r1, #0]
 8001734:	e021      	b.n	800177a <HAL_GPIO_Init+0x2e2>
 8001736:	bf00      	nop
 8001738:	10320000 	.word	0x10320000
 800173c:	10310000 	.word	0x10310000
 8001740:	10220000 	.word	0x10220000
 8001744:	10210000 	.word	0x10210000
 8001748:	10120000 	.word	0x10120000
 800174c:	10110000 	.word	0x10110000
 8001750:	40021000 	.word	0x40021000
 8001754:	40010000 	.word	0x40010000
 8001758:	40010800 	.word	0x40010800
 800175c:	40010c00 	.word	0x40010c00
 8001760:	40011000 	.word	0x40011000
 8001764:	40011400 	.word	0x40011400
 8001768:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800176c:	4b0b      	ldr	r3, [pc, #44]	@ (800179c <HAL_GPIO_Init+0x304>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	43db      	mvns	r3, r3
 8001774:	4909      	ldr	r1, [pc, #36]	@ (800179c <HAL_GPIO_Init+0x304>)
 8001776:	4013      	ands	r3, r2
 8001778:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800177a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800177c:	3301      	adds	r3, #1
 800177e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001786:	fa22 f303 	lsr.w	r3, r2, r3
 800178a:	2b00      	cmp	r3, #0
 800178c:	f47f ae8e 	bne.w	80014ac <HAL_GPIO_Init+0x14>
  }
}
 8001790:	bf00      	nop
 8001792:	bf00      	nop
 8001794:	372c      	adds	r7, #44	@ 0x2c
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr
 800179c:	40010400 	.word	0x40010400

080017a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	807b      	strh	r3, [r7, #2]
 80017ac:	4613      	mov	r3, r2
 80017ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017b0:	787b      	ldrb	r3, [r7, #1]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017b6:	887a      	ldrh	r2, [r7, #2]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017bc:	e003      	b.n	80017c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017be:	887b      	ldrh	r3, [r7, #2]
 80017c0:	041a      	lsls	r2, r3, #16
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	611a      	str	r2, [r3, #16]
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr

080017d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d101      	bne.n	80017e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e12b      	b.n	8001a3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d106      	bne.n	80017fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff faca 	bl	8000d90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2224      	movs	r2, #36	@ 0x24
 8001800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f022 0201 	bic.w	r2, r2, #1
 8001812:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001822:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001832:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001834:	f001 f832 	bl	800289c <HAL_RCC_GetPCLK1Freq>
 8001838:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	4a81      	ldr	r2, [pc, #516]	@ (8001a44 <HAL_I2C_Init+0x274>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d807      	bhi.n	8001854 <HAL_I2C_Init+0x84>
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	4a80      	ldr	r2, [pc, #512]	@ (8001a48 <HAL_I2C_Init+0x278>)
 8001848:	4293      	cmp	r3, r2
 800184a:	bf94      	ite	ls
 800184c:	2301      	movls	r3, #1
 800184e:	2300      	movhi	r3, #0
 8001850:	b2db      	uxtb	r3, r3
 8001852:	e006      	b.n	8001862 <HAL_I2C_Init+0x92>
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4a7d      	ldr	r2, [pc, #500]	@ (8001a4c <HAL_I2C_Init+0x27c>)
 8001858:	4293      	cmp	r3, r2
 800185a:	bf94      	ite	ls
 800185c:	2301      	movls	r3, #1
 800185e:	2300      	movhi	r3, #0
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e0e7      	b.n	8001a3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	4a78      	ldr	r2, [pc, #480]	@ (8001a50 <HAL_I2C_Init+0x280>)
 800186e:	fba2 2303 	umull	r2, r3, r2, r3
 8001872:	0c9b      	lsrs	r3, r3, #18
 8001874:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	68ba      	ldr	r2, [r7, #8]
 8001886:	430a      	orrs	r2, r1
 8001888:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6a1b      	ldr	r3, [r3, #32]
 8001890:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	4a6a      	ldr	r2, [pc, #424]	@ (8001a44 <HAL_I2C_Init+0x274>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d802      	bhi.n	80018a4 <HAL_I2C_Init+0xd4>
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	3301      	adds	r3, #1
 80018a2:	e009      	b.n	80018b8 <HAL_I2C_Init+0xe8>
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80018aa:	fb02 f303 	mul.w	r3, r2, r3
 80018ae:	4a69      	ldr	r2, [pc, #420]	@ (8001a54 <HAL_I2C_Init+0x284>)
 80018b0:	fba2 2303 	umull	r2, r3, r2, r3
 80018b4:	099b      	lsrs	r3, r3, #6
 80018b6:	3301      	adds	r3, #1
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	6812      	ldr	r2, [r2, #0]
 80018bc:	430b      	orrs	r3, r1
 80018be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80018ca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	495c      	ldr	r1, [pc, #368]	@ (8001a44 <HAL_I2C_Init+0x274>)
 80018d4:	428b      	cmp	r3, r1
 80018d6:	d819      	bhi.n	800190c <HAL_I2C_Init+0x13c>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	1e59      	subs	r1, r3, #1
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80018e6:	1c59      	adds	r1, r3, #1
 80018e8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80018ec:	400b      	ands	r3, r1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d00a      	beq.n	8001908 <HAL_I2C_Init+0x138>
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	1e59      	subs	r1, r3, #1
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001900:	3301      	adds	r3, #1
 8001902:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001906:	e051      	b.n	80019ac <HAL_I2C_Init+0x1dc>
 8001908:	2304      	movs	r3, #4
 800190a:	e04f      	b.n	80019ac <HAL_I2C_Init+0x1dc>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d111      	bne.n	8001938 <HAL_I2C_Init+0x168>
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	1e58      	subs	r0, r3, #1
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6859      	ldr	r1, [r3, #4]
 800191c:	460b      	mov	r3, r1
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	440b      	add	r3, r1
 8001922:	fbb0 f3f3 	udiv	r3, r0, r3
 8001926:	3301      	adds	r3, #1
 8001928:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800192c:	2b00      	cmp	r3, #0
 800192e:	bf0c      	ite	eq
 8001930:	2301      	moveq	r3, #1
 8001932:	2300      	movne	r3, #0
 8001934:	b2db      	uxtb	r3, r3
 8001936:	e012      	b.n	800195e <HAL_I2C_Init+0x18e>
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	1e58      	subs	r0, r3, #1
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6859      	ldr	r1, [r3, #4]
 8001940:	460b      	mov	r3, r1
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	440b      	add	r3, r1
 8001946:	0099      	lsls	r1, r3, #2
 8001948:	440b      	add	r3, r1
 800194a:	fbb0 f3f3 	udiv	r3, r0, r3
 800194e:	3301      	adds	r3, #1
 8001950:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001954:	2b00      	cmp	r3, #0
 8001956:	bf0c      	ite	eq
 8001958:	2301      	moveq	r3, #1
 800195a:	2300      	movne	r3, #0
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <HAL_I2C_Init+0x196>
 8001962:	2301      	movs	r3, #1
 8001964:	e022      	b.n	80019ac <HAL_I2C_Init+0x1dc>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d10e      	bne.n	800198c <HAL_I2C_Init+0x1bc>
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	1e58      	subs	r0, r3, #1
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6859      	ldr	r1, [r3, #4]
 8001976:	460b      	mov	r3, r1
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	440b      	add	r3, r1
 800197c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001980:	3301      	adds	r3, #1
 8001982:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001986:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800198a:	e00f      	b.n	80019ac <HAL_I2C_Init+0x1dc>
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	1e58      	subs	r0, r3, #1
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6859      	ldr	r1, [r3, #4]
 8001994:	460b      	mov	r3, r1
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	440b      	add	r3, r1
 800199a:	0099      	lsls	r1, r3, #2
 800199c:	440b      	add	r3, r1
 800199e:	fbb0 f3f3 	udiv	r3, r0, r3
 80019a2:	3301      	adds	r3, #1
 80019a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019ac:	6879      	ldr	r1, [r7, #4]
 80019ae:	6809      	ldr	r1, [r1, #0]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69da      	ldr	r2, [r3, #28]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a1b      	ldr	r3, [r3, #32]
 80019c6:	431a      	orrs	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	430a      	orrs	r2, r1
 80019ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80019da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	6911      	ldr	r1, [r2, #16]
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	68d2      	ldr	r2, [r2, #12]
 80019e6:	4311      	orrs	r1, r2
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	430b      	orrs	r3, r1
 80019ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	695a      	ldr	r2, [r3, #20]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	431a      	orrs	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f042 0201 	orr.w	r2, r2, #1
 8001a1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2220      	movs	r2, #32
 8001a26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	000186a0 	.word	0x000186a0
 8001a48:	001e847f 	.word	0x001e847f
 8001a4c:	003d08ff 	.word	0x003d08ff
 8001a50:	431bde83 	.word	0x431bde83
 8001a54:	10624dd3 	.word	0x10624dd3

08001a58 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b088      	sub	sp, #32
 8001a5c:	af02      	add	r7, sp, #8
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	607a      	str	r2, [r7, #4]
 8001a62:	461a      	mov	r2, r3
 8001a64:	460b      	mov	r3, r1
 8001a66:	817b      	strh	r3, [r7, #10]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a6c:	f7ff fb26 	bl	80010bc <HAL_GetTick>
 8001a70:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b20      	cmp	r3, #32
 8001a7c:	f040 80e0 	bne.w	8001c40 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	2319      	movs	r3, #25
 8001a86:	2201      	movs	r2, #1
 8001a88:	4970      	ldr	r1, [pc, #448]	@ (8001c4c <HAL_I2C_Master_Transmit+0x1f4>)
 8001a8a:	68f8      	ldr	r0, [r7, #12]
 8001a8c:	f000 f964 	bl	8001d58 <I2C_WaitOnFlagUntilTimeout>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001a96:	2302      	movs	r3, #2
 8001a98:	e0d3      	b.n	8001c42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d101      	bne.n	8001aa8 <HAL_I2C_Master_Transmit+0x50>
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	e0cc      	b.n	8001c42 <HAL_I2C_Master_Transmit+0x1ea>
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d007      	beq.n	8001ace <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f042 0201 	orr.w	r2, r2, #1
 8001acc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001adc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2221      	movs	r2, #33	@ 0x21
 8001ae2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2210      	movs	r2, #16
 8001aea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2200      	movs	r2, #0
 8001af2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	893a      	ldrh	r2, [r7, #8]
 8001afe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	4a50      	ldr	r2, [pc, #320]	@ (8001c50 <HAL_I2C_Master_Transmit+0x1f8>)
 8001b0e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001b10:	8979      	ldrh	r1, [r7, #10]
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	6a3a      	ldr	r2, [r7, #32]
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	f000 f89c 	bl	8001c54 <I2C_MasterRequestWrite>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e08d      	b.n	8001c42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	695b      	ldr	r3, [r3, #20]
 8001b30:	613b      	str	r3, [r7, #16]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001b3c:	e066      	b.n	8001c0c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	6a39      	ldr	r1, [r7, #32]
 8001b42:	68f8      	ldr	r0, [r7, #12]
 8001b44:	f000 fa22 	bl	8001f8c <I2C_WaitOnTXEFlagUntilTimeout>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00d      	beq.n	8001b6a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	d107      	bne.n	8001b66 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e06b      	b.n	8001c42 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b6e:	781a      	ldrb	r2, [r3, #0]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b7a:	1c5a      	adds	r2, r3, #1
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	3b01      	subs	r3, #1
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b92:	3b01      	subs	r3, #1
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	2b04      	cmp	r3, #4
 8001ba6:	d11b      	bne.n	8001be0 <HAL_I2C_Master_Transmit+0x188>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d017      	beq.n	8001be0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb4:	781a      	ldrb	r2, [r3, #0]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc0:	1c5a      	adds	r2, r3, #1
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001be0:	697a      	ldr	r2, [r7, #20]
 8001be2:	6a39      	ldr	r1, [r7, #32]
 8001be4:	68f8      	ldr	r0, [r7, #12]
 8001be6:	f000 fa19 	bl	800201c <I2C_WaitOnBTFFlagUntilTimeout>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d00d      	beq.n	8001c0c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf4:	2b04      	cmp	r3, #4
 8001bf6:	d107      	bne.n	8001c08 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c06:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e01a      	b.n	8001c42 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d194      	bne.n	8001b3e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2220      	movs	r2, #32
 8001c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	e000      	b.n	8001c42 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001c40:	2302      	movs	r3, #2
  }
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3718      	adds	r7, #24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	00100002 	.word	0x00100002
 8001c50:	ffff0000 	.word	0xffff0000

08001c54 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b088      	sub	sp, #32
 8001c58:	af02      	add	r7, sp, #8
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	607a      	str	r2, [r7, #4]
 8001c5e:	603b      	str	r3, [r7, #0]
 8001c60:	460b      	mov	r3, r1
 8001c62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c68:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	d006      	beq.n	8001c7e <I2C_MasterRequestWrite+0x2a>
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d003      	beq.n	8001c7e <I2C_MasterRequestWrite+0x2a>
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001c7c:	d108      	bne.n	8001c90 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	e00b      	b.n	8001ca8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c94:	2b12      	cmp	r3, #18
 8001c96:	d107      	bne.n	8001ca8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ca6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f000 f84f 	bl	8001d58 <I2C_WaitOnFlagUntilTimeout>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00d      	beq.n	8001cdc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001cce:	d103      	bne.n	8001cd8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cd6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e035      	b.n	8001d48 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001ce4:	d108      	bne.n	8001cf8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ce6:	897b      	ldrh	r3, [r7, #10]
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	461a      	mov	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001cf4:	611a      	str	r2, [r3, #16]
 8001cf6:	e01b      	b.n	8001d30 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001cf8:	897b      	ldrh	r3, [r7, #10]
 8001cfa:	11db      	asrs	r3, r3, #7
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	f003 0306 	and.w	r3, r3, #6
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	f063 030f 	orn	r3, r3, #15
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	490e      	ldr	r1, [pc, #56]	@ (8001d50 <I2C_MasterRequestWrite+0xfc>)
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f000 f898 	bl	8001e4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e010      	b.n	8001d48 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d26:	897b      	ldrh	r3, [r7, #10]
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	4907      	ldr	r1, [pc, #28]	@ (8001d54 <I2C_MasterRequestWrite+0x100>)
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f000 f888 	bl	8001e4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e000      	b.n	8001d48 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3718      	adds	r7, #24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	00010008 	.word	0x00010008
 8001d54:	00010002 	.word	0x00010002

08001d58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	603b      	str	r3, [r7, #0]
 8001d64:	4613      	mov	r3, r2
 8001d66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d68:	e048      	b.n	8001dfc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d70:	d044      	beq.n	8001dfc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d72:	f7ff f9a3 	bl	80010bc <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d302      	bcc.n	8001d88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d139      	bne.n	8001dfc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	0c1b      	lsrs	r3, r3, #16
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d10d      	bne.n	8001dae <I2C_WaitOnFlagUntilTimeout+0x56>
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	43da      	mvns	r2, r3
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	bf0c      	ite	eq
 8001da4:	2301      	moveq	r3, #1
 8001da6:	2300      	movne	r3, #0
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	461a      	mov	r2, r3
 8001dac:	e00c      	b.n	8001dc8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	43da      	mvns	r2, r3
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	4013      	ands	r3, r2
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	bf0c      	ite	eq
 8001dc0:	2301      	moveq	r3, #1
 8001dc2:	2300      	movne	r3, #0
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	79fb      	ldrb	r3, [r7, #7]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d116      	bne.n	8001dfc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2220      	movs	r2, #32
 8001dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de8:	f043 0220 	orr.w	r2, r3, #32
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e023      	b.n	8001e44 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	0c1b      	lsrs	r3, r3, #16
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d10d      	bne.n	8001e22 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	695b      	ldr	r3, [r3, #20]
 8001e0c:	43da      	mvns	r2, r3
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	4013      	ands	r3, r2
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	bf0c      	ite	eq
 8001e18:	2301      	moveq	r3, #1
 8001e1a:	2300      	movne	r3, #0
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	461a      	mov	r2, r3
 8001e20:	e00c      	b.n	8001e3c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	43da      	mvns	r2, r3
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	bf0c      	ite	eq
 8001e34:	2301      	moveq	r3, #1
 8001e36:	2300      	movne	r3, #0
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d093      	beq.n	8001d6a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
 8001e58:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e5a:	e071      	b.n	8001f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e6a:	d123      	bne.n	8001eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e7a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001e84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2220      	movs	r2, #32
 8001e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea0:	f043 0204 	orr.w	r2, r3, #4
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e067      	b.n	8001f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eba:	d041      	beq.n	8001f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ebc:	f7ff f8fe 	bl	80010bc <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d302      	bcc.n	8001ed2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d136      	bne.n	8001f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	0c1b      	lsrs	r3, r3, #16
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d10c      	bne.n	8001ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	43da      	mvns	r2, r3
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	bf14      	ite	ne
 8001eee:	2301      	movne	r3, #1
 8001ef0:	2300      	moveq	r3, #0
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	e00b      	b.n	8001f0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	43da      	mvns	r2, r3
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	4013      	ands	r3, r2
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	bf14      	ite	ne
 8001f08:	2301      	movne	r3, #1
 8001f0a:	2300      	moveq	r3, #0
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d016      	beq.n	8001f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2220      	movs	r2, #32
 8001f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2c:	f043 0220 	orr.w	r2, r3, #32
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e021      	b.n	8001f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	0c1b      	lsrs	r3, r3, #16
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d10c      	bne.n	8001f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	695b      	ldr	r3, [r3, #20]
 8001f50:	43da      	mvns	r2, r3
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	4013      	ands	r3, r2
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	bf14      	ite	ne
 8001f5c:	2301      	movne	r3, #1
 8001f5e:	2300      	moveq	r3, #0
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	e00b      	b.n	8001f7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	43da      	mvns	r2, r3
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	bf14      	ite	ne
 8001f76:	2301      	movne	r3, #1
 8001f78:	2300      	moveq	r3, #0
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f47f af6d 	bne.w	8001e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f98:	e034      	b.n	8002004 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f9a:	68f8      	ldr	r0, [r7, #12]
 8001f9c:	f000 f886 	bl	80020ac <I2C_IsAcknowledgeFailed>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e034      	b.n	8002014 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb0:	d028      	beq.n	8002004 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fb2:	f7ff f883 	bl	80010bc <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	68ba      	ldr	r2, [r7, #8]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d302      	bcc.n	8001fc8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d11d      	bne.n	8002004 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fd2:	2b80      	cmp	r3, #128	@ 0x80
 8001fd4:	d016      	beq.n	8002004 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2220      	movs	r2, #32
 8001fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff0:	f043 0220 	orr.w	r2, r3, #32
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e007      	b.n	8002014 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800200e:	2b80      	cmp	r3, #128	@ 0x80
 8002010:	d1c3      	bne.n	8001f9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002028:	e034      	b.n	8002094 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	f000 f83e 	bl	80020ac <I2C_IsAcknowledgeFailed>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e034      	b.n	80020a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002040:	d028      	beq.n	8002094 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002042:	f7ff f83b 	bl	80010bc <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	68ba      	ldr	r2, [r7, #8]
 800204e:	429a      	cmp	r2, r3
 8002050:	d302      	bcc.n	8002058 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d11d      	bne.n	8002094 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	f003 0304 	and.w	r3, r3, #4
 8002062:	2b04      	cmp	r3, #4
 8002064:	d016      	beq.n	8002094 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2220      	movs	r2, #32
 8002070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002080:	f043 0220 	orr.w	r2, r3, #32
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e007      	b.n	80020a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	f003 0304 	and.w	r3, r3, #4
 800209e:	2b04      	cmp	r3, #4
 80020a0:	d1c3      	bne.n	800202a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020c2:	d11b      	bne.n	80020fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80020cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2220      	movs	r2, #32
 80020d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e8:	f043 0204 	orr.w	r2, r3, #4
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e000      	b.n	80020fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	bc80      	pop	{r7}
 8002106:	4770      	bx	lr

08002108 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e272      	b.n	8002600 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 8087 	beq.w	8002236 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002128:	4b92      	ldr	r3, [pc, #584]	@ (8002374 <HAL_RCC_OscConfig+0x26c>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 030c 	and.w	r3, r3, #12
 8002130:	2b04      	cmp	r3, #4
 8002132:	d00c      	beq.n	800214e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002134:	4b8f      	ldr	r3, [pc, #572]	@ (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 030c 	and.w	r3, r3, #12
 800213c:	2b08      	cmp	r3, #8
 800213e:	d112      	bne.n	8002166 <HAL_RCC_OscConfig+0x5e>
 8002140:	4b8c      	ldr	r3, [pc, #560]	@ (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002148:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800214c:	d10b      	bne.n	8002166 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800214e:	4b89      	ldr	r3, [pc, #548]	@ (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d06c      	beq.n	8002234 <HAL_RCC_OscConfig+0x12c>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d168      	bne.n	8002234 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e24c      	b.n	8002600 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800216e:	d106      	bne.n	800217e <HAL_RCC_OscConfig+0x76>
 8002170:	4b80      	ldr	r3, [pc, #512]	@ (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a7f      	ldr	r2, [pc, #508]	@ (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002176:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800217a:	6013      	str	r3, [r2, #0]
 800217c:	e02e      	b.n	80021dc <HAL_RCC_OscConfig+0xd4>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10c      	bne.n	80021a0 <HAL_RCC_OscConfig+0x98>
 8002186:	4b7b      	ldr	r3, [pc, #492]	@ (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a7a      	ldr	r2, [pc, #488]	@ (8002374 <HAL_RCC_OscConfig+0x26c>)
 800218c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002190:	6013      	str	r3, [r2, #0]
 8002192:	4b78      	ldr	r3, [pc, #480]	@ (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a77      	ldr	r2, [pc, #476]	@ (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002198:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	e01d      	b.n	80021dc <HAL_RCC_OscConfig+0xd4>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021a8:	d10c      	bne.n	80021c4 <HAL_RCC_OscConfig+0xbc>
 80021aa:	4b72      	ldr	r3, [pc, #456]	@ (8002374 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a71      	ldr	r2, [pc, #452]	@ (8002374 <HAL_RCC_OscConfig+0x26c>)
 80021b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021b4:	6013      	str	r3, [r2, #0]
 80021b6:	4b6f      	ldr	r3, [pc, #444]	@ (8002374 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a6e      	ldr	r2, [pc, #440]	@ (8002374 <HAL_RCC_OscConfig+0x26c>)
 80021bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	e00b      	b.n	80021dc <HAL_RCC_OscConfig+0xd4>
 80021c4:	4b6b      	ldr	r3, [pc, #428]	@ (8002374 <HAL_RCC_OscConfig+0x26c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a6a      	ldr	r2, [pc, #424]	@ (8002374 <HAL_RCC_OscConfig+0x26c>)
 80021ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021ce:	6013      	str	r3, [r2, #0]
 80021d0:	4b68      	ldr	r3, [pc, #416]	@ (8002374 <HAL_RCC_OscConfig+0x26c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a67      	ldr	r2, [pc, #412]	@ (8002374 <HAL_RCC_OscConfig+0x26c>)
 80021d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d013      	beq.n	800220c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e4:	f7fe ff6a 	bl	80010bc <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021ec:	f7fe ff66 	bl	80010bc <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b64      	cmp	r3, #100	@ 0x64
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e200      	b.n	8002600 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fe:	4b5d      	ldr	r3, [pc, #372]	@ (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d0f0      	beq.n	80021ec <HAL_RCC_OscConfig+0xe4>
 800220a:	e014      	b.n	8002236 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220c:	f7fe ff56 	bl	80010bc <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002214:	f7fe ff52 	bl	80010bc <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b64      	cmp	r3, #100	@ 0x64
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e1ec      	b.n	8002600 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002226:	4b53      	ldr	r3, [pc, #332]	@ (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f0      	bne.n	8002214 <HAL_RCC_OscConfig+0x10c>
 8002232:	e000      	b.n	8002236 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002234:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d063      	beq.n	800230a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002242:	4b4c      	ldr	r3, [pc, #304]	@ (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f003 030c 	and.w	r3, r3, #12
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00b      	beq.n	8002266 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800224e:	4b49      	ldr	r3, [pc, #292]	@ (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f003 030c 	and.w	r3, r3, #12
 8002256:	2b08      	cmp	r3, #8
 8002258:	d11c      	bne.n	8002294 <HAL_RCC_OscConfig+0x18c>
 800225a:	4b46      	ldr	r3, [pc, #280]	@ (8002374 <HAL_RCC_OscConfig+0x26c>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d116      	bne.n	8002294 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002266:	4b43      	ldr	r3, [pc, #268]	@ (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d005      	beq.n	800227e <HAL_RCC_OscConfig+0x176>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d001      	beq.n	800227e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e1c0      	b.n	8002600 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800227e:	4b3d      	ldr	r3, [pc, #244]	@ (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	4939      	ldr	r1, [pc, #228]	@ (8002374 <HAL_RCC_OscConfig+0x26c>)
 800228e:	4313      	orrs	r3, r2
 8002290:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002292:	e03a      	b.n	800230a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d020      	beq.n	80022de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800229c:	4b36      	ldr	r3, [pc, #216]	@ (8002378 <HAL_RCC_OscConfig+0x270>)
 800229e:	2201      	movs	r2, #1
 80022a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a2:	f7fe ff0b 	bl	80010bc <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a8:	e008      	b.n	80022bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022aa:	f7fe ff07 	bl	80010bc <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e1a1      	b.n	8002600 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002374 <HAL_RCC_OscConfig+0x26c>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0f0      	beq.n	80022aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c8:	4b2a      	ldr	r3, [pc, #168]	@ (8002374 <HAL_RCC_OscConfig+0x26c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	695b      	ldr	r3, [r3, #20]
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	4927      	ldr	r1, [pc, #156]	@ (8002374 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	600b      	str	r3, [r1, #0]
 80022dc:	e015      	b.n	800230a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022de:	4b26      	ldr	r3, [pc, #152]	@ (8002378 <HAL_RCC_OscConfig+0x270>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e4:	f7fe feea 	bl	80010bc <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ec:	f7fe fee6 	bl	80010bc <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e180      	b.n	8002600 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1f0      	bne.n	80022ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0308 	and.w	r3, r3, #8
 8002312:	2b00      	cmp	r3, #0
 8002314:	d03a      	beq.n	800238c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d019      	beq.n	8002352 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800231e:	4b17      	ldr	r3, [pc, #92]	@ (800237c <HAL_RCC_OscConfig+0x274>)
 8002320:	2201      	movs	r2, #1
 8002322:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002324:	f7fe feca 	bl	80010bc <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800232c:	f7fe fec6 	bl	80010bc <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e160      	b.n	8002600 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800233e:	4b0d      	ldr	r3, [pc, #52]	@ (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d0f0      	beq.n	800232c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800234a:	2001      	movs	r0, #1
 800234c:	f000 face 	bl	80028ec <RCC_Delay>
 8002350:	e01c      	b.n	800238c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002352:	4b0a      	ldr	r3, [pc, #40]	@ (800237c <HAL_RCC_OscConfig+0x274>)
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002358:	f7fe feb0 	bl	80010bc <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800235e:	e00f      	b.n	8002380 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002360:	f7fe feac 	bl	80010bc <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d908      	bls.n	8002380 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e146      	b.n	8002600 <HAL_RCC_OscConfig+0x4f8>
 8002372:	bf00      	nop
 8002374:	40021000 	.word	0x40021000
 8002378:	42420000 	.word	0x42420000
 800237c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002380:	4b92      	ldr	r3, [pc, #584]	@ (80025cc <HAL_RCC_OscConfig+0x4c4>)
 8002382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1e9      	bne.n	8002360 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	2b00      	cmp	r3, #0
 8002396:	f000 80a6 	beq.w	80024e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800239a:	2300      	movs	r3, #0
 800239c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800239e:	4b8b      	ldr	r3, [pc, #556]	@ (80025cc <HAL_RCC_OscConfig+0x4c4>)
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10d      	bne.n	80023c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023aa:	4b88      	ldr	r3, [pc, #544]	@ (80025cc <HAL_RCC_OscConfig+0x4c4>)
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	4a87      	ldr	r2, [pc, #540]	@ (80025cc <HAL_RCC_OscConfig+0x4c4>)
 80023b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023b4:	61d3      	str	r3, [r2, #28]
 80023b6:	4b85      	ldr	r3, [pc, #532]	@ (80025cc <HAL_RCC_OscConfig+0x4c4>)
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023be:	60bb      	str	r3, [r7, #8]
 80023c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023c2:	2301      	movs	r3, #1
 80023c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c6:	4b82      	ldr	r3, [pc, #520]	@ (80025d0 <HAL_RCC_OscConfig+0x4c8>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d118      	bne.n	8002404 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023d2:	4b7f      	ldr	r3, [pc, #508]	@ (80025d0 <HAL_RCC_OscConfig+0x4c8>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a7e      	ldr	r2, [pc, #504]	@ (80025d0 <HAL_RCC_OscConfig+0x4c8>)
 80023d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023de:	f7fe fe6d 	bl	80010bc <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e4:	e008      	b.n	80023f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023e6:	f7fe fe69 	bl	80010bc <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b64      	cmp	r3, #100	@ 0x64
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e103      	b.n	8002600 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f8:	4b75      	ldr	r3, [pc, #468]	@ (80025d0 <HAL_RCC_OscConfig+0x4c8>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002400:	2b00      	cmp	r3, #0
 8002402:	d0f0      	beq.n	80023e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d106      	bne.n	800241a <HAL_RCC_OscConfig+0x312>
 800240c:	4b6f      	ldr	r3, [pc, #444]	@ (80025cc <HAL_RCC_OscConfig+0x4c4>)
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	4a6e      	ldr	r2, [pc, #440]	@ (80025cc <HAL_RCC_OscConfig+0x4c4>)
 8002412:	f043 0301 	orr.w	r3, r3, #1
 8002416:	6213      	str	r3, [r2, #32]
 8002418:	e02d      	b.n	8002476 <HAL_RCC_OscConfig+0x36e>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10c      	bne.n	800243c <HAL_RCC_OscConfig+0x334>
 8002422:	4b6a      	ldr	r3, [pc, #424]	@ (80025cc <HAL_RCC_OscConfig+0x4c4>)
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	4a69      	ldr	r2, [pc, #420]	@ (80025cc <HAL_RCC_OscConfig+0x4c4>)
 8002428:	f023 0301 	bic.w	r3, r3, #1
 800242c:	6213      	str	r3, [r2, #32]
 800242e:	4b67      	ldr	r3, [pc, #412]	@ (80025cc <HAL_RCC_OscConfig+0x4c4>)
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	4a66      	ldr	r2, [pc, #408]	@ (80025cc <HAL_RCC_OscConfig+0x4c4>)
 8002434:	f023 0304 	bic.w	r3, r3, #4
 8002438:	6213      	str	r3, [r2, #32]
 800243a:	e01c      	b.n	8002476 <HAL_RCC_OscConfig+0x36e>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	2b05      	cmp	r3, #5
 8002442:	d10c      	bne.n	800245e <HAL_RCC_OscConfig+0x356>
 8002444:	4b61      	ldr	r3, [pc, #388]	@ (80025cc <HAL_RCC_OscConfig+0x4c4>)
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	4a60      	ldr	r2, [pc, #384]	@ (80025cc <HAL_RCC_OscConfig+0x4c4>)
 800244a:	f043 0304 	orr.w	r3, r3, #4
 800244e:	6213      	str	r3, [r2, #32]
 8002450:	4b5e      	ldr	r3, [pc, #376]	@ (80025cc <HAL_RCC_OscConfig+0x4c4>)
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	4a5d      	ldr	r2, [pc, #372]	@ (80025cc <HAL_RCC_OscConfig+0x4c4>)
 8002456:	f043 0301 	orr.w	r3, r3, #1
 800245a:	6213      	str	r3, [r2, #32]
 800245c:	e00b      	b.n	8002476 <HAL_RCC_OscConfig+0x36e>
 800245e:	4b5b      	ldr	r3, [pc, #364]	@ (80025cc <HAL_RCC_OscConfig+0x4c4>)
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	4a5a      	ldr	r2, [pc, #360]	@ (80025cc <HAL_RCC_OscConfig+0x4c4>)
 8002464:	f023 0301 	bic.w	r3, r3, #1
 8002468:	6213      	str	r3, [r2, #32]
 800246a:	4b58      	ldr	r3, [pc, #352]	@ (80025cc <HAL_RCC_OscConfig+0x4c4>)
 800246c:	6a1b      	ldr	r3, [r3, #32]
 800246e:	4a57      	ldr	r2, [pc, #348]	@ (80025cc <HAL_RCC_OscConfig+0x4c4>)
 8002470:	f023 0304 	bic.w	r3, r3, #4
 8002474:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d015      	beq.n	80024aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800247e:	f7fe fe1d 	bl	80010bc <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002484:	e00a      	b.n	800249c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002486:	f7fe fe19 	bl	80010bc <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002494:	4293      	cmp	r3, r2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e0b1      	b.n	8002600 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800249c:	4b4b      	ldr	r3, [pc, #300]	@ (80025cc <HAL_RCC_OscConfig+0x4c4>)
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d0ee      	beq.n	8002486 <HAL_RCC_OscConfig+0x37e>
 80024a8:	e014      	b.n	80024d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024aa:	f7fe fe07 	bl	80010bc <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b0:	e00a      	b.n	80024c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024b2:	f7fe fe03 	bl	80010bc <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e09b      	b.n	8002600 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c8:	4b40      	ldr	r3, [pc, #256]	@ (80025cc <HAL_RCC_OscConfig+0x4c4>)
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1ee      	bne.n	80024b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024d4:	7dfb      	ldrb	r3, [r7, #23]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d105      	bne.n	80024e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024da:	4b3c      	ldr	r3, [pc, #240]	@ (80025cc <HAL_RCC_OscConfig+0x4c4>)
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	4a3b      	ldr	r2, [pc, #236]	@ (80025cc <HAL_RCC_OscConfig+0x4c4>)
 80024e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f000 8087 	beq.w	80025fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024f0:	4b36      	ldr	r3, [pc, #216]	@ (80025cc <HAL_RCC_OscConfig+0x4c4>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f003 030c 	and.w	r3, r3, #12
 80024f8:	2b08      	cmp	r3, #8
 80024fa:	d061      	beq.n	80025c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	2b02      	cmp	r3, #2
 8002502:	d146      	bne.n	8002592 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002504:	4b33      	ldr	r3, [pc, #204]	@ (80025d4 <HAL_RCC_OscConfig+0x4cc>)
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250a:	f7fe fdd7 	bl	80010bc <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002512:	f7fe fdd3 	bl	80010bc <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e06d      	b.n	8002600 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002524:	4b29      	ldr	r3, [pc, #164]	@ (80025cc <HAL_RCC_OscConfig+0x4c4>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1f0      	bne.n	8002512 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002538:	d108      	bne.n	800254c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800253a:	4b24      	ldr	r3, [pc, #144]	@ (80025cc <HAL_RCC_OscConfig+0x4c4>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	4921      	ldr	r1, [pc, #132]	@ (80025cc <HAL_RCC_OscConfig+0x4c4>)
 8002548:	4313      	orrs	r3, r2
 800254a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800254c:	4b1f      	ldr	r3, [pc, #124]	@ (80025cc <HAL_RCC_OscConfig+0x4c4>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a19      	ldr	r1, [r3, #32]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255c:	430b      	orrs	r3, r1
 800255e:	491b      	ldr	r1, [pc, #108]	@ (80025cc <HAL_RCC_OscConfig+0x4c4>)
 8002560:	4313      	orrs	r3, r2
 8002562:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002564:	4b1b      	ldr	r3, [pc, #108]	@ (80025d4 <HAL_RCC_OscConfig+0x4cc>)
 8002566:	2201      	movs	r2, #1
 8002568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256a:	f7fe fda7 	bl	80010bc <HAL_GetTick>
 800256e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002570:	e008      	b.n	8002584 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002572:	f7fe fda3 	bl	80010bc <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e03d      	b.n	8002600 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002584:	4b11      	ldr	r3, [pc, #68]	@ (80025cc <HAL_RCC_OscConfig+0x4c4>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0f0      	beq.n	8002572 <HAL_RCC_OscConfig+0x46a>
 8002590:	e035      	b.n	80025fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002592:	4b10      	ldr	r3, [pc, #64]	@ (80025d4 <HAL_RCC_OscConfig+0x4cc>)
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002598:	f7fe fd90 	bl	80010bc <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a0:	f7fe fd8c 	bl	80010bc <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e026      	b.n	8002600 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025b2:	4b06      	ldr	r3, [pc, #24]	@ (80025cc <HAL_RCC_OscConfig+0x4c4>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1f0      	bne.n	80025a0 <HAL_RCC_OscConfig+0x498>
 80025be:	e01e      	b.n	80025fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69db      	ldr	r3, [r3, #28]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d107      	bne.n	80025d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e019      	b.n	8002600 <HAL_RCC_OscConfig+0x4f8>
 80025cc:	40021000 	.word	0x40021000
 80025d0:	40007000 	.word	0x40007000
 80025d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002608 <HAL_RCC_OscConfig+0x500>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d106      	bne.n	80025fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d001      	beq.n	80025fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40021000 	.word	0x40021000

0800260c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e0d0      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002620:	4b6a      	ldr	r3, [pc, #424]	@ (80027cc <HAL_RCC_ClockConfig+0x1c0>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	429a      	cmp	r2, r3
 800262c:	d910      	bls.n	8002650 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800262e:	4b67      	ldr	r3, [pc, #412]	@ (80027cc <HAL_RCC_ClockConfig+0x1c0>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f023 0207 	bic.w	r2, r3, #7
 8002636:	4965      	ldr	r1, [pc, #404]	@ (80027cc <HAL_RCC_ClockConfig+0x1c0>)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	4313      	orrs	r3, r2
 800263c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800263e:	4b63      	ldr	r3, [pc, #396]	@ (80027cc <HAL_RCC_ClockConfig+0x1c0>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	429a      	cmp	r2, r3
 800264a:	d001      	beq.n	8002650 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e0b8      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d020      	beq.n	800269e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b00      	cmp	r3, #0
 8002666:	d005      	beq.n	8002674 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002668:	4b59      	ldr	r3, [pc, #356]	@ (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	4a58      	ldr	r2, [pc, #352]	@ (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 800266e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002672:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0308 	and.w	r3, r3, #8
 800267c:	2b00      	cmp	r3, #0
 800267e:	d005      	beq.n	800268c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002680:	4b53      	ldr	r3, [pc, #332]	@ (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	4a52      	ldr	r2, [pc, #328]	@ (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002686:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800268a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800268c:	4b50      	ldr	r3, [pc, #320]	@ (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	494d      	ldr	r1, [pc, #308]	@ (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 800269a:	4313      	orrs	r3, r2
 800269c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d040      	beq.n	800272c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d107      	bne.n	80026c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b2:	4b47      	ldr	r3, [pc, #284]	@ (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d115      	bne.n	80026ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e07f      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d107      	bne.n	80026da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ca:	4b41      	ldr	r3, [pc, #260]	@ (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d109      	bne.n	80026ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e073      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026da:	4b3d      	ldr	r3, [pc, #244]	@ (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e06b      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ea:	4b39      	ldr	r3, [pc, #228]	@ (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f023 0203 	bic.w	r2, r3, #3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	4936      	ldr	r1, [pc, #216]	@ (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026fc:	f7fe fcde 	bl	80010bc <HAL_GetTick>
 8002700:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002702:	e00a      	b.n	800271a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002704:	f7fe fcda 	bl	80010bc <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002712:	4293      	cmp	r3, r2
 8002714:	d901      	bls.n	800271a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e053      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800271a:	4b2d      	ldr	r3, [pc, #180]	@ (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f003 020c 	and.w	r2, r3, #12
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	429a      	cmp	r2, r3
 800272a:	d1eb      	bne.n	8002704 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800272c:	4b27      	ldr	r3, [pc, #156]	@ (80027cc <HAL_RCC_ClockConfig+0x1c0>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	d210      	bcs.n	800275c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800273a:	4b24      	ldr	r3, [pc, #144]	@ (80027cc <HAL_RCC_ClockConfig+0x1c0>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f023 0207 	bic.w	r2, r3, #7
 8002742:	4922      	ldr	r1, [pc, #136]	@ (80027cc <HAL_RCC_ClockConfig+0x1c0>)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	4313      	orrs	r3, r2
 8002748:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800274a:	4b20      	ldr	r3, [pc, #128]	@ (80027cc <HAL_RCC_ClockConfig+0x1c0>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	429a      	cmp	r2, r3
 8002756:	d001      	beq.n	800275c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e032      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b00      	cmp	r3, #0
 8002766:	d008      	beq.n	800277a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002768:	4b19      	ldr	r3, [pc, #100]	@ (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	4916      	ldr	r1, [pc, #88]	@ (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002776:	4313      	orrs	r3, r2
 8002778:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b00      	cmp	r3, #0
 8002784:	d009      	beq.n	800279a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002786:	4b12      	ldr	r3, [pc, #72]	@ (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	490e      	ldr	r1, [pc, #56]	@ (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002796:	4313      	orrs	r3, r2
 8002798:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800279a:	f000 f821 	bl	80027e0 <HAL_RCC_GetSysClockFreq>
 800279e:	4602      	mov	r2, r0
 80027a0:	4b0b      	ldr	r3, [pc, #44]	@ (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	091b      	lsrs	r3, r3, #4
 80027a6:	f003 030f 	and.w	r3, r3, #15
 80027aa:	490a      	ldr	r1, [pc, #40]	@ (80027d4 <HAL_RCC_ClockConfig+0x1c8>)
 80027ac:	5ccb      	ldrb	r3, [r1, r3]
 80027ae:	fa22 f303 	lsr.w	r3, r2, r3
 80027b2:	4a09      	ldr	r2, [pc, #36]	@ (80027d8 <HAL_RCC_ClockConfig+0x1cc>)
 80027b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027b6:	4b09      	ldr	r3, [pc, #36]	@ (80027dc <HAL_RCC_ClockConfig+0x1d0>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7fe fc3c 	bl	8001038 <HAL_InitTick>

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40022000 	.word	0x40022000
 80027d0:	40021000 	.word	0x40021000
 80027d4:	080039d0 	.word	0x080039d0
 80027d8:	20000010 	.word	0x20000010
 80027dc:	20000014 	.word	0x20000014

080027e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b087      	sub	sp, #28
 80027e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027e6:	2300      	movs	r3, #0
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	2300      	movs	r3, #0
 80027ec:	60bb      	str	r3, [r7, #8]
 80027ee:	2300      	movs	r3, #0
 80027f0:	617b      	str	r3, [r7, #20]
 80027f2:	2300      	movs	r3, #0
 80027f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002874 <HAL_RCC_GetSysClockFreq+0x94>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f003 030c 	and.w	r3, r3, #12
 8002806:	2b04      	cmp	r3, #4
 8002808:	d002      	beq.n	8002810 <HAL_RCC_GetSysClockFreq+0x30>
 800280a:	2b08      	cmp	r3, #8
 800280c:	d003      	beq.n	8002816 <HAL_RCC_GetSysClockFreq+0x36>
 800280e:	e027      	b.n	8002860 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002810:	4b19      	ldr	r3, [pc, #100]	@ (8002878 <HAL_RCC_GetSysClockFreq+0x98>)
 8002812:	613b      	str	r3, [r7, #16]
      break;
 8002814:	e027      	b.n	8002866 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	0c9b      	lsrs	r3, r3, #18
 800281a:	f003 030f 	and.w	r3, r3, #15
 800281e:	4a17      	ldr	r2, [pc, #92]	@ (800287c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002820:	5cd3      	ldrb	r3, [r2, r3]
 8002822:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d010      	beq.n	8002850 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800282e:	4b11      	ldr	r3, [pc, #68]	@ (8002874 <HAL_RCC_GetSysClockFreq+0x94>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	0c5b      	lsrs	r3, r3, #17
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	4a11      	ldr	r2, [pc, #68]	@ (8002880 <HAL_RCC_GetSysClockFreq+0xa0>)
 800283a:	5cd3      	ldrb	r3, [r2, r3]
 800283c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a0d      	ldr	r2, [pc, #52]	@ (8002878 <HAL_RCC_GetSysClockFreq+0x98>)
 8002842:	fb03 f202 	mul.w	r2, r3, r2
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	fbb2 f3f3 	udiv	r3, r2, r3
 800284c:	617b      	str	r3, [r7, #20]
 800284e:	e004      	b.n	800285a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a0c      	ldr	r2, [pc, #48]	@ (8002884 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002854:	fb02 f303 	mul.w	r3, r2, r3
 8002858:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	613b      	str	r3, [r7, #16]
      break;
 800285e:	e002      	b.n	8002866 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002860:	4b05      	ldr	r3, [pc, #20]	@ (8002878 <HAL_RCC_GetSysClockFreq+0x98>)
 8002862:	613b      	str	r3, [r7, #16]
      break;
 8002864:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002866:	693b      	ldr	r3, [r7, #16]
}
 8002868:	4618      	mov	r0, r3
 800286a:	371c      	adds	r7, #28
 800286c:	46bd      	mov	sp, r7
 800286e:	bc80      	pop	{r7}
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	40021000 	.word	0x40021000
 8002878:	007a1200 	.word	0x007a1200
 800287c:	080039e8 	.word	0x080039e8
 8002880:	080039f8 	.word	0x080039f8
 8002884:	003d0900 	.word	0x003d0900

08002888 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800288c:	4b02      	ldr	r3, [pc, #8]	@ (8002898 <HAL_RCC_GetHCLKFreq+0x10>)
 800288e:	681b      	ldr	r3, [r3, #0]
}
 8002890:	4618      	mov	r0, r3
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr
 8002898:	20000010 	.word	0x20000010

0800289c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028a0:	f7ff fff2 	bl	8002888 <HAL_RCC_GetHCLKFreq>
 80028a4:	4602      	mov	r2, r0
 80028a6:	4b05      	ldr	r3, [pc, #20]	@ (80028bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	0a1b      	lsrs	r3, r3, #8
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	4903      	ldr	r1, [pc, #12]	@ (80028c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028b2:	5ccb      	ldrb	r3, [r1, r3]
 80028b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40021000 	.word	0x40021000
 80028c0:	080039e0 	.word	0x080039e0

080028c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028c8:	f7ff ffde 	bl	8002888 <HAL_RCC_GetHCLKFreq>
 80028cc:	4602      	mov	r2, r0
 80028ce:	4b05      	ldr	r3, [pc, #20]	@ (80028e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	0adb      	lsrs	r3, r3, #11
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	4903      	ldr	r1, [pc, #12]	@ (80028e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028da:	5ccb      	ldrb	r3, [r1, r3]
 80028dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40021000 	.word	0x40021000
 80028e8:	080039e0 	.word	0x080039e0

080028ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002920 <RCC_Delay+0x34>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a0a      	ldr	r2, [pc, #40]	@ (8002924 <RCC_Delay+0x38>)
 80028fa:	fba2 2303 	umull	r2, r3, r2, r3
 80028fe:	0a5b      	lsrs	r3, r3, #9
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	fb02 f303 	mul.w	r3, r2, r3
 8002906:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002908:	bf00      	nop
  }
  while (Delay --);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	1e5a      	subs	r2, r3, #1
 800290e:	60fa      	str	r2, [r7, #12]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1f9      	bne.n	8002908 <RCC_Delay+0x1c>
}
 8002914:	bf00      	nop
 8002916:	bf00      	nop
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr
 8002920:	20000010 	.word	0x20000010
 8002924:	10624dd3 	.word	0x10624dd3

08002928 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e076      	b.n	8002a28 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293e:	2b00      	cmp	r3, #0
 8002940:	d108      	bne.n	8002954 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800294a:	d009      	beq.n	8002960 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	61da      	str	r2, [r3, #28]
 8002952:	e005      	b.n	8002960 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d106      	bne.n	8002980 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f7fe fa46 	bl	8000e0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2202      	movs	r2, #2
 8002984:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002996:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80029a8:	431a      	orrs	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029b2:	431a      	orrs	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	431a      	orrs	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	431a      	orrs	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029d0:	431a      	orrs	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029e4:	ea42 0103 	orr.w	r1, r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ec:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	0c1a      	lsrs	r2, r3, #16
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f002 0204 	and.w	r2, r2, #4
 8002a06:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	69da      	ldr	r2, [r3, #28]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a16:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b08a      	sub	sp, #40	@ 0x28
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
 8002a3c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a42:	f7fe fb3b 	bl	80010bc <HAL_GetTick>
 8002a46:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a4e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002a56:	887b      	ldrh	r3, [r7, #2]
 8002a58:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a5a:	7ffb      	ldrb	r3, [r7, #31]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d00c      	beq.n	8002a7a <HAL_SPI_TransmitReceive+0x4a>
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a66:	d106      	bne.n	8002a76 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d102      	bne.n	8002a76 <HAL_SPI_TransmitReceive+0x46>
 8002a70:	7ffb      	ldrb	r3, [r7, #31]
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	d001      	beq.n	8002a7a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002a76:	2302      	movs	r3, #2
 8002a78:	e17f      	b.n	8002d7a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d005      	beq.n	8002a8c <HAL_SPI_TransmitReceive+0x5c>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d002      	beq.n	8002a8c <HAL_SPI_TransmitReceive+0x5c>
 8002a86:	887b      	ldrh	r3, [r7, #2]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e174      	b.n	8002d7a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d101      	bne.n	8002a9e <HAL_SPI_TransmitReceive+0x6e>
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	e16d      	b.n	8002d7a <HAL_SPI_TransmitReceive+0x34a>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b04      	cmp	r3, #4
 8002ab0:	d003      	beq.n	8002aba <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2205      	movs	r2, #5
 8002ab6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	887a      	ldrh	r2, [r7, #2]
 8002aca:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	887a      	ldrh	r2, [r7, #2]
 8002ad0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	887a      	ldrh	r2, [r7, #2]
 8002adc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	887a      	ldrh	r2, [r7, #2]
 8002ae2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002afa:	2b40      	cmp	r3, #64	@ 0x40
 8002afc:	d007      	beq.n	8002b0e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b0c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b16:	d17e      	bne.n	8002c16 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d002      	beq.n	8002b26 <HAL_SPI_TransmitReceive+0xf6>
 8002b20:	8afb      	ldrh	r3, [r7, #22]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d16c      	bne.n	8002c00 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2a:	881a      	ldrh	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b36:	1c9a      	adds	r2, r3, #2
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	3b01      	subs	r3, #1
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b4a:	e059      	b.n	8002c00 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d11b      	bne.n	8002b92 <HAL_SPI_TransmitReceive+0x162>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d016      	beq.n	8002b92 <HAL_SPI_TransmitReceive+0x162>
 8002b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d113      	bne.n	8002b92 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6e:	881a      	ldrh	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7a:	1c9a      	adds	r2, r3, #2
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	3b01      	subs	r3, #1
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d119      	bne.n	8002bd4 <HAL_SPI_TransmitReceive+0x1a4>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d014      	beq.n	8002bd4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68da      	ldr	r2, [r3, #12]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bb4:	b292      	uxth	r2, r2
 8002bb6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bbc:	1c9a      	adds	r2, r3, #2
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002bd4:	f7fe fa72 	bl	80010bc <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	6a3b      	ldr	r3, [r7, #32]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d80d      	bhi.n	8002c00 <HAL_SPI_TransmitReceive+0x1d0>
 8002be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bea:	d009      	beq.n	8002c00 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e0bc      	b.n	8002d7a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1a0      	bne.n	8002b4c <HAL_SPI_TransmitReceive+0x11c>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d19b      	bne.n	8002b4c <HAL_SPI_TransmitReceive+0x11c>
 8002c14:	e082      	b.n	8002d1c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d002      	beq.n	8002c24 <HAL_SPI_TransmitReceive+0x1f4>
 8002c1e:	8afb      	ldrh	r3, [r7, #22]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d171      	bne.n	8002d08 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	330c      	adds	r3, #12
 8002c2e:	7812      	ldrb	r2, [r2, #0]
 8002c30:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c36:	1c5a      	adds	r2, r3, #1
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	3b01      	subs	r3, #1
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c4a:	e05d      	b.n	8002d08 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d11c      	bne.n	8002c94 <HAL_SPI_TransmitReceive+0x264>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d017      	beq.n	8002c94 <HAL_SPI_TransmitReceive+0x264>
 8002c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d114      	bne.n	8002c94 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	330c      	adds	r3, #12
 8002c74:	7812      	ldrb	r2, [r2, #0]
 8002c76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c90:	2300      	movs	r3, #0
 8002c92:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d119      	bne.n	8002cd6 <HAL_SPI_TransmitReceive+0x2a6>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d014      	beq.n	8002cd6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb6:	b2d2      	uxtb	r2, r2
 8002cb8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cbe:	1c5a      	adds	r2, r3, #1
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002cd6:	f7fe f9f1 	bl	80010bc <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d803      	bhi.n	8002cee <HAL_SPI_TransmitReceive+0x2be>
 8002ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cec:	d102      	bne.n	8002cf4 <HAL_SPI_TransmitReceive+0x2c4>
 8002cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d109      	bne.n	8002d08 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e038      	b.n	8002d7a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d19c      	bne.n	8002c4c <HAL_SPI_TransmitReceive+0x21c>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d197      	bne.n	8002c4c <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d1c:	6a3a      	ldr	r2, [r7, #32]
 8002d1e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f000 f8b7 	bl	8002e94 <SPI_EndRxTxTransaction>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d008      	beq.n	8002d3e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2220      	movs	r2, #32
 8002d30:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e01d      	b.n	8002d7a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10a      	bne.n	8002d5c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d46:	2300      	movs	r3, #0
 8002d48:	613b      	str	r3, [r7, #16]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	613b      	str	r3, [r7, #16]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	613b      	str	r3, [r7, #16]
 8002d5a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e000      	b.n	8002d7a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002d78:	2300      	movs	r3, #0
  }
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3728      	adds	r7, #40	@ 0x28
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
	...

08002d84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b088      	sub	sp, #32
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	603b      	str	r3, [r7, #0]
 8002d90:	4613      	mov	r3, r2
 8002d92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d94:	f7fe f992 	bl	80010bc <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d9c:	1a9b      	subs	r3, r3, r2
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	4413      	add	r3, r2
 8002da2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002da4:	f7fe f98a 	bl	80010bc <HAL_GetTick>
 8002da8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002daa:	4b39      	ldr	r3, [pc, #228]	@ (8002e90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	015b      	lsls	r3, r3, #5
 8002db0:	0d1b      	lsrs	r3, r3, #20
 8002db2:	69fa      	ldr	r2, [r7, #28]
 8002db4:	fb02 f303 	mul.w	r3, r2, r3
 8002db8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002dba:	e054      	b.n	8002e66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc2:	d050      	beq.n	8002e66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002dc4:	f7fe f97a 	bl	80010bc <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	69fa      	ldr	r2, [r7, #28]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d902      	bls.n	8002dda <SPI_WaitFlagStateUntilTimeout+0x56>
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d13d      	bne.n	8002e56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002de8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002df2:	d111      	bne.n	8002e18 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002dfc:	d004      	beq.n	8002e08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e06:	d107      	bne.n	8002e18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e20:	d10f      	bne.n	8002e42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e017      	b.n	8002e86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	3b01      	subs	r3, #1
 8002e64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	bf0c      	ite	eq
 8002e76:	2301      	moveq	r3, #1
 8002e78:	2300      	movne	r3, #0
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	79fb      	ldrb	r3, [r7, #7]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d19b      	bne.n	8002dbc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3720      	adds	r7, #32
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	20000010 	.word	0x20000010

08002e94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af02      	add	r7, sp, #8
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	9300      	str	r3, [sp, #0]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	2102      	movs	r1, #2
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f7ff ff6a 	bl	8002d84 <SPI_WaitFlagStateUntilTimeout>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d007      	beq.n	8002ec6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eba:	f043 0220 	orr.w	r2, r3, #32
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e013      	b.n	8002eee <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	2180      	movs	r1, #128	@ 0x80
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f7ff ff57 	bl	8002d84 <SPI_WaitFlagStateUntilTimeout>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d007      	beq.n	8002eec <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ee0:	f043 0220 	orr.w	r2, r3, #32
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e000      	b.n	8002eee <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b082      	sub	sp, #8
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e042      	b.n	8002f8e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d106      	bne.n	8002f22 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f7fd ffbf 	bl	8000ea0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2224      	movs	r2, #36	@ 0x24
 8002f26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68da      	ldr	r2, [r3, #12]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f38:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 fc76 	bl	800382c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	691a      	ldr	r2, [r3, #16]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f4e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	695a      	ldr	r2, [r3, #20]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f5e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68da      	ldr	r2, [r3, #12]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f6e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2220      	movs	r2, #32
 8002f7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2220      	movs	r2, #32
 8002f82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
	...

08002f98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b0ba      	sub	sp, #232	@ 0xe8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fce:	f003 030f 	and.w	r3, r3, #15
 8002fd2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002fd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10f      	bne.n	8002ffe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fe2:	f003 0320 	and.w	r3, r3, #32
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d009      	beq.n	8002ffe <HAL_UART_IRQHandler+0x66>
 8002fea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fee:	f003 0320 	and.w	r3, r3, #32
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d003      	beq.n	8002ffe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 fb5a 	bl	80036b0 <UART_Receive_IT>
      return;
 8002ffc:	e25b      	b.n	80034b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002ffe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003002:	2b00      	cmp	r3, #0
 8003004:	f000 80de 	beq.w	80031c4 <HAL_UART_IRQHandler+0x22c>
 8003008:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	2b00      	cmp	r3, #0
 8003012:	d106      	bne.n	8003022 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003018:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 80d1 	beq.w	80031c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00b      	beq.n	8003046 <HAL_UART_IRQHandler+0xae>
 800302e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003036:	2b00      	cmp	r3, #0
 8003038:	d005      	beq.n	8003046 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800303e:	f043 0201 	orr.w	r2, r3, #1
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800304a:	f003 0304 	and.w	r3, r3, #4
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00b      	beq.n	800306a <HAL_UART_IRQHandler+0xd2>
 8003052:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d005      	beq.n	800306a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003062:	f043 0202 	orr.w	r2, r3, #2
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800306a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00b      	beq.n	800308e <HAL_UART_IRQHandler+0xf6>
 8003076:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b00      	cmp	r3, #0
 8003080:	d005      	beq.n	800308e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003086:	f043 0204 	orr.w	r2, r3, #4
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800308e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003092:	f003 0308 	and.w	r3, r3, #8
 8003096:	2b00      	cmp	r3, #0
 8003098:	d011      	beq.n	80030be <HAL_UART_IRQHandler+0x126>
 800309a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800309e:	f003 0320 	and.w	r3, r3, #32
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d105      	bne.n	80030b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80030a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d005      	beq.n	80030be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030b6:	f043 0208 	orr.w	r2, r3, #8
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 81f2 	beq.w	80034ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030cc:	f003 0320 	and.w	r3, r3, #32
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d008      	beq.n	80030e6 <HAL_UART_IRQHandler+0x14e>
 80030d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030d8:	f003 0320 	and.w	r3, r3, #32
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d002      	beq.n	80030e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 fae5 	bl	80036b0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	bf14      	ite	ne
 80030f4:	2301      	movne	r3, #1
 80030f6:	2300      	moveq	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	2b00      	cmp	r3, #0
 8003108:	d103      	bne.n	8003112 <HAL_UART_IRQHandler+0x17a>
 800310a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800310e:	2b00      	cmp	r3, #0
 8003110:	d04f      	beq.n	80031b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f9ef 	bl	80034f6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003122:	2b00      	cmp	r3, #0
 8003124:	d041      	beq.n	80031aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	3314      	adds	r3, #20
 800312c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003130:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003134:	e853 3f00 	ldrex	r3, [r3]
 8003138:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800313c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003140:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003144:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	3314      	adds	r3, #20
 800314e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003152:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003156:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800315a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800315e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003162:	e841 2300 	strex	r3, r2, [r1]
 8003166:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800316a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1d9      	bne.n	8003126 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003176:	2b00      	cmp	r3, #0
 8003178:	d013      	beq.n	80031a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800317e:	4a7e      	ldr	r2, [pc, #504]	@ (8003378 <HAL_UART_IRQHandler+0x3e0>)
 8003180:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003186:	4618      	mov	r0, r3
 8003188:	f7fe f90e 	bl	80013a8 <HAL_DMA_Abort_IT>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d016      	beq.n	80031c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003196:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800319c:	4610      	mov	r0, r2
 800319e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031a0:	e00e      	b.n	80031c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f993 	bl	80034ce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031a8:	e00a      	b.n	80031c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f98f 	bl	80034ce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031b0:	e006      	b.n	80031c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f98b 	bl	80034ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80031be:	e175      	b.n	80034ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031c0:	bf00      	nop
    return;
 80031c2:	e173      	b.n	80034ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	f040 814f 	bne.w	800346c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80031ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031d2:	f003 0310 	and.w	r3, r3, #16
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f000 8148 	beq.w	800346c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80031dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031e0:	f003 0310 	and.w	r3, r3, #16
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f000 8141 	beq.w	800346c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031ea:	2300      	movs	r3, #0
 80031ec:	60bb      	str	r3, [r7, #8]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	60bb      	str	r3, [r7, #8]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	60bb      	str	r3, [r7, #8]
 80031fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 80b6 	beq.w	800337c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800321c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 8145 	beq.w	80034b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800322a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800322e:	429a      	cmp	r2, r3
 8003230:	f080 813e 	bcs.w	80034b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800323a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	2b20      	cmp	r3, #32
 8003244:	f000 8088 	beq.w	8003358 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	330c      	adds	r3, #12
 800324e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003252:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003256:	e853 3f00 	ldrex	r3, [r3]
 800325a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800325e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003262:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003266:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	330c      	adds	r3, #12
 8003270:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003274:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003278:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800327c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003280:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003284:	e841 2300 	strex	r3, r2, [r1]
 8003288:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800328c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1d9      	bne.n	8003248 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	3314      	adds	r3, #20
 800329a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800329c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800329e:	e853 3f00 	ldrex	r3, [r3]
 80032a2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80032a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032a6:	f023 0301 	bic.w	r3, r3, #1
 80032aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	3314      	adds	r3, #20
 80032b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80032b8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80032bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032be:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80032c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80032c4:	e841 2300 	strex	r3, r2, [r1]
 80032c8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80032ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1e1      	bne.n	8003294 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	3314      	adds	r3, #20
 80032d6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80032da:	e853 3f00 	ldrex	r3, [r3]
 80032de:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80032e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	3314      	adds	r3, #20
 80032f0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80032f4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80032f6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80032fa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80032fc:	e841 2300 	strex	r3, r2, [r1]
 8003300:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003302:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1e3      	bne.n	80032d0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2220      	movs	r2, #32
 800330c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	330c      	adds	r3, #12
 800331c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003320:	e853 3f00 	ldrex	r3, [r3]
 8003324:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003326:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003328:	f023 0310 	bic.w	r3, r3, #16
 800332c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	330c      	adds	r3, #12
 8003336:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800333a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800333c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003340:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003342:	e841 2300 	strex	r3, r2, [r1]
 8003346:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003348:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1e3      	bne.n	8003316 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003352:	4618      	mov	r0, r3
 8003354:	f7fd ffed 	bl	8001332 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2202      	movs	r2, #2
 800335c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003366:	b29b      	uxth	r3, r3
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	b29b      	uxth	r3, r3
 800336c:	4619      	mov	r1, r3
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 f8b6 	bl	80034e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003374:	e09c      	b.n	80034b0 <HAL_UART_IRQHandler+0x518>
 8003376:	bf00      	nop
 8003378:	080035bb 	.word	0x080035bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003384:	b29b      	uxth	r3, r3
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003390:	b29b      	uxth	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 808e 	beq.w	80034b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003398:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 8089 	beq.w	80034b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	330c      	adds	r3, #12
 80033a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033ac:	e853 3f00 	ldrex	r3, [r3]
 80033b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80033b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80033b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	330c      	adds	r3, #12
 80033c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80033c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80033c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80033cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033ce:	e841 2300 	strex	r3, r2, [r1]
 80033d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80033d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1e3      	bne.n	80033a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	3314      	adds	r3, #20
 80033e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e4:	e853 3f00 	ldrex	r3, [r3]
 80033e8:	623b      	str	r3, [r7, #32]
   return(result);
 80033ea:	6a3b      	ldr	r3, [r7, #32]
 80033ec:	f023 0301 	bic.w	r3, r3, #1
 80033f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	3314      	adds	r3, #20
 80033fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80033fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8003400:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003402:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003404:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003406:	e841 2300 	strex	r3, r2, [r1]
 800340a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800340c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1e3      	bne.n	80033da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2220      	movs	r2, #32
 8003416:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	330c      	adds	r3, #12
 8003426:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	e853 3f00 	ldrex	r3, [r3]
 800342e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f023 0310 	bic.w	r3, r3, #16
 8003436:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	330c      	adds	r3, #12
 8003440:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003444:	61fa      	str	r2, [r7, #28]
 8003446:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003448:	69b9      	ldr	r1, [r7, #24]
 800344a:	69fa      	ldr	r2, [r7, #28]
 800344c:	e841 2300 	strex	r3, r2, [r1]
 8003450:	617b      	str	r3, [r7, #20]
   return(result);
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1e3      	bne.n	8003420 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2202      	movs	r2, #2
 800345c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800345e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003462:	4619      	mov	r1, r3
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 f83b 	bl	80034e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800346a:	e023      	b.n	80034b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800346c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003470:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003474:	2b00      	cmp	r3, #0
 8003476:	d009      	beq.n	800348c <HAL_UART_IRQHandler+0x4f4>
 8003478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800347c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003480:	2b00      	cmp	r3, #0
 8003482:	d003      	beq.n	800348c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 f8ac 	bl	80035e2 <UART_Transmit_IT>
    return;
 800348a:	e014      	b.n	80034b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800348c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00e      	beq.n	80034b6 <HAL_UART_IRQHandler+0x51e>
 8003498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800349c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d008      	beq.n	80034b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f8eb 	bl	8003680 <UART_EndTransmit_IT>
    return;
 80034aa:	e004      	b.n	80034b6 <HAL_UART_IRQHandler+0x51e>
    return;
 80034ac:	bf00      	nop
 80034ae:	e002      	b.n	80034b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80034b0:	bf00      	nop
 80034b2:	e000      	b.n	80034b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80034b4:	bf00      	nop
  }
}
 80034b6:	37e8      	adds	r7, #232	@ 0xe8
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bc80      	pop	{r7}
 80034cc:	4770      	bx	lr

080034ce <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034ce:	b480      	push	{r7}
 80034d0:	b083      	sub	sp, #12
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80034d6:	bf00      	nop
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	bc80      	pop	{r7}
 80034de:	4770      	bx	lr

080034e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	460b      	mov	r3, r1
 80034ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bc80      	pop	{r7}
 80034f4:	4770      	bx	lr

080034f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034f6:	b480      	push	{r7}
 80034f8:	b095      	sub	sp, #84	@ 0x54
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	330c      	adds	r3, #12
 8003504:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003508:	e853 3f00 	ldrex	r3, [r3]
 800350c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800350e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003510:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003514:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	330c      	adds	r3, #12
 800351c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800351e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003520:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003522:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003524:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003526:	e841 2300 	strex	r3, r2, [r1]
 800352a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800352c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1e5      	bne.n	80034fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	3314      	adds	r3, #20
 8003538:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353a:	6a3b      	ldr	r3, [r7, #32]
 800353c:	e853 3f00 	ldrex	r3, [r3]
 8003540:	61fb      	str	r3, [r7, #28]
   return(result);
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	f023 0301 	bic.w	r3, r3, #1
 8003548:	64bb      	str	r3, [r7, #72]	@ 0x48
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	3314      	adds	r3, #20
 8003550:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003552:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003554:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003556:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003558:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800355a:	e841 2300 	strex	r3, r2, [r1]
 800355e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1e5      	bne.n	8003532 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800356a:	2b01      	cmp	r3, #1
 800356c:	d119      	bne.n	80035a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	330c      	adds	r3, #12
 8003574:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	e853 3f00 	ldrex	r3, [r3]
 800357c:	60bb      	str	r3, [r7, #8]
   return(result);
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	f023 0310 	bic.w	r3, r3, #16
 8003584:	647b      	str	r3, [r7, #68]	@ 0x44
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	330c      	adds	r3, #12
 800358c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800358e:	61ba      	str	r2, [r7, #24]
 8003590:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003592:	6979      	ldr	r1, [r7, #20]
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	e841 2300 	strex	r3, r2, [r1]
 800359a:	613b      	str	r3, [r7, #16]
   return(result);
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1e5      	bne.n	800356e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2220      	movs	r2, #32
 80035a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80035b0:	bf00      	nop
 80035b2:	3754      	adds	r7, #84	@ 0x54
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bc80      	pop	{r7}
 80035b8:	4770      	bx	lr

080035ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b084      	sub	sp, #16
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f7ff ff7a 	bl	80034ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035da:	bf00      	nop
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b085      	sub	sp, #20
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b21      	cmp	r3, #33	@ 0x21
 80035f4:	d13e      	bne.n	8003674 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035fe:	d114      	bne.n	800362a <UART_Transmit_IT+0x48>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d110      	bne.n	800362a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	881b      	ldrh	r3, [r3, #0]
 8003612:	461a      	mov	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800361c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	1c9a      	adds	r2, r3, #2
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	621a      	str	r2, [r3, #32]
 8003628:	e008      	b.n	800363c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	1c59      	adds	r1, r3, #1
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6211      	str	r1, [r2, #32]
 8003634:	781a      	ldrb	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003640:	b29b      	uxth	r3, r3
 8003642:	3b01      	subs	r3, #1
 8003644:	b29b      	uxth	r3, r3
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	4619      	mov	r1, r3
 800364a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10f      	bne.n	8003670 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68da      	ldr	r2, [r3, #12]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800365e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800366e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003670:	2300      	movs	r3, #0
 8003672:	e000      	b.n	8003676 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003674:	2302      	movs	r3, #2
  }
}
 8003676:	4618      	mov	r0, r3
 8003678:	3714      	adds	r7, #20
 800367a:	46bd      	mov	sp, r7
 800367c:	bc80      	pop	{r7}
 800367e:	4770      	bx	lr

08003680 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68da      	ldr	r2, [r3, #12]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003696:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2220      	movs	r2, #32
 800369c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f7ff ff0b 	bl	80034bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b08c      	sub	sp, #48	@ 0x30
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	2b22      	cmp	r3, #34	@ 0x22
 80036c2:	f040 80ae 	bne.w	8003822 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036ce:	d117      	bne.n	8003700 <UART_Receive_IT+0x50>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d113      	bne.n	8003700 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80036d8:	2300      	movs	r3, #0
 80036da:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036f2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f8:	1c9a      	adds	r2, r3, #2
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	629a      	str	r2, [r3, #40]	@ 0x28
 80036fe:	e026      	b.n	800374e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003704:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003706:	2300      	movs	r3, #0
 8003708:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003712:	d007      	beq.n	8003724 <UART_Receive_IT+0x74>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d10a      	bne.n	8003732 <UART_Receive_IT+0x82>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d106      	bne.n	8003732 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	b2da      	uxtb	r2, r3
 800372c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800372e:	701a      	strb	r2, [r3, #0]
 8003730:	e008      	b.n	8003744 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	b2db      	uxtb	r3, r3
 800373a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800373e:	b2da      	uxtb	r2, r3
 8003740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003742:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003748:	1c5a      	adds	r2, r3, #1
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003752:	b29b      	uxth	r3, r3
 8003754:	3b01      	subs	r3, #1
 8003756:	b29b      	uxth	r3, r3
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	4619      	mov	r1, r3
 800375c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800375e:	2b00      	cmp	r3, #0
 8003760:	d15d      	bne.n	800381e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68da      	ldr	r2, [r3, #12]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 0220 	bic.w	r2, r2, #32
 8003770:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68da      	ldr	r2, [r3, #12]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003780:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	695a      	ldr	r2, [r3, #20]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 0201 	bic.w	r2, r2, #1
 8003790:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2220      	movs	r2, #32
 8003796:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d135      	bne.n	8003814 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	330c      	adds	r3, #12
 80037b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	e853 3f00 	ldrex	r3, [r3]
 80037bc:	613b      	str	r3, [r7, #16]
   return(result);
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	f023 0310 	bic.w	r3, r3, #16
 80037c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	330c      	adds	r3, #12
 80037cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037ce:	623a      	str	r2, [r7, #32]
 80037d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d2:	69f9      	ldr	r1, [r7, #28]
 80037d4:	6a3a      	ldr	r2, [r7, #32]
 80037d6:	e841 2300 	strex	r3, r2, [r1]
 80037da:	61bb      	str	r3, [r7, #24]
   return(result);
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1e5      	bne.n	80037ae <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0310 	and.w	r3, r3, #16
 80037ec:	2b10      	cmp	r3, #16
 80037ee:	d10a      	bne.n	8003806 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037f0:	2300      	movs	r3, #0
 80037f2:	60fb      	str	r3, [r7, #12]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	60fb      	str	r3, [r7, #12]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800380a:	4619      	mov	r1, r3
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f7ff fe67 	bl	80034e0 <HAL_UARTEx_RxEventCallback>
 8003812:	e002      	b.n	800381a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f7fd f89b 	bl	8000950 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800381a:	2300      	movs	r3, #0
 800381c:	e002      	b.n	8003824 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800381e:	2300      	movs	r3, #0
 8003820:	e000      	b.n	8003824 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003822:	2302      	movs	r3, #2
  }
}
 8003824:	4618      	mov	r0, r3
 8003826:	3730      	adds	r7, #48	@ 0x30
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68da      	ldr	r2, [r3, #12]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	430a      	orrs	r2, r1
 8003848:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	689a      	ldr	r2, [r3, #8]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	4313      	orrs	r3, r2
 800385a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003866:	f023 030c 	bic.w	r3, r3, #12
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	6812      	ldr	r2, [r2, #0]
 800386e:	68b9      	ldr	r1, [r7, #8]
 8003870:	430b      	orrs	r3, r1
 8003872:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	699a      	ldr	r2, [r3, #24]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	430a      	orrs	r2, r1
 8003888:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a2c      	ldr	r2, [pc, #176]	@ (8003940 <UART_SetConfig+0x114>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d103      	bne.n	800389c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003894:	f7ff f816 	bl	80028c4 <HAL_RCC_GetPCLK2Freq>
 8003898:	60f8      	str	r0, [r7, #12]
 800389a:	e002      	b.n	80038a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800389c:	f7fe fffe 	bl	800289c <HAL_RCC_GetPCLK1Freq>
 80038a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	4613      	mov	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4413      	add	r3, r2
 80038aa:	009a      	lsls	r2, r3, #2
 80038ac:	441a      	add	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b8:	4a22      	ldr	r2, [pc, #136]	@ (8003944 <UART_SetConfig+0x118>)
 80038ba:	fba2 2303 	umull	r2, r3, r2, r3
 80038be:	095b      	lsrs	r3, r3, #5
 80038c0:	0119      	lsls	r1, r3, #4
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	4613      	mov	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	4413      	add	r3, r2
 80038ca:	009a      	lsls	r2, r3, #2
 80038cc:	441a      	add	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80038d8:	4b1a      	ldr	r3, [pc, #104]	@ (8003944 <UART_SetConfig+0x118>)
 80038da:	fba3 0302 	umull	r0, r3, r3, r2
 80038de:	095b      	lsrs	r3, r3, #5
 80038e0:	2064      	movs	r0, #100	@ 0x64
 80038e2:	fb00 f303 	mul.w	r3, r0, r3
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	011b      	lsls	r3, r3, #4
 80038ea:	3332      	adds	r3, #50	@ 0x32
 80038ec:	4a15      	ldr	r2, [pc, #84]	@ (8003944 <UART_SetConfig+0x118>)
 80038ee:	fba2 2303 	umull	r2, r3, r2, r3
 80038f2:	095b      	lsrs	r3, r3, #5
 80038f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038f8:	4419      	add	r1, r3
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	4613      	mov	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4413      	add	r3, r2
 8003902:	009a      	lsls	r2, r3, #2
 8003904:	441a      	add	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003910:	4b0c      	ldr	r3, [pc, #48]	@ (8003944 <UART_SetConfig+0x118>)
 8003912:	fba3 0302 	umull	r0, r3, r3, r2
 8003916:	095b      	lsrs	r3, r3, #5
 8003918:	2064      	movs	r0, #100	@ 0x64
 800391a:	fb00 f303 	mul.w	r3, r0, r3
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	011b      	lsls	r3, r3, #4
 8003922:	3332      	adds	r3, #50	@ 0x32
 8003924:	4a07      	ldr	r2, [pc, #28]	@ (8003944 <UART_SetConfig+0x118>)
 8003926:	fba2 2303 	umull	r2, r3, r2, r3
 800392a:	095b      	lsrs	r3, r3, #5
 800392c:	f003 020f 	and.w	r2, r3, #15
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	440a      	add	r2, r1
 8003936:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003938:	bf00      	nop
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40013800 	.word	0x40013800
 8003944:	51eb851f 	.word	0x51eb851f

08003948 <memset>:
 8003948:	4603      	mov	r3, r0
 800394a:	4402      	add	r2, r0
 800394c:	4293      	cmp	r3, r2
 800394e:	d100      	bne.n	8003952 <memset+0xa>
 8003950:	4770      	bx	lr
 8003952:	f803 1b01 	strb.w	r1, [r3], #1
 8003956:	e7f9      	b.n	800394c <memset+0x4>

08003958 <__libc_init_array>:
 8003958:	b570      	push	{r4, r5, r6, lr}
 800395a:	2600      	movs	r6, #0
 800395c:	4d0c      	ldr	r5, [pc, #48]	@ (8003990 <__libc_init_array+0x38>)
 800395e:	4c0d      	ldr	r4, [pc, #52]	@ (8003994 <__libc_init_array+0x3c>)
 8003960:	1b64      	subs	r4, r4, r5
 8003962:	10a4      	asrs	r4, r4, #2
 8003964:	42a6      	cmp	r6, r4
 8003966:	d109      	bne.n	800397c <__libc_init_array+0x24>
 8003968:	f000 f81a 	bl	80039a0 <_init>
 800396c:	2600      	movs	r6, #0
 800396e:	4d0a      	ldr	r5, [pc, #40]	@ (8003998 <__libc_init_array+0x40>)
 8003970:	4c0a      	ldr	r4, [pc, #40]	@ (800399c <__libc_init_array+0x44>)
 8003972:	1b64      	subs	r4, r4, r5
 8003974:	10a4      	asrs	r4, r4, #2
 8003976:	42a6      	cmp	r6, r4
 8003978:	d105      	bne.n	8003986 <__libc_init_array+0x2e>
 800397a:	bd70      	pop	{r4, r5, r6, pc}
 800397c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003980:	4798      	blx	r3
 8003982:	3601      	adds	r6, #1
 8003984:	e7ee      	b.n	8003964 <__libc_init_array+0xc>
 8003986:	f855 3b04 	ldr.w	r3, [r5], #4
 800398a:	4798      	blx	r3
 800398c:	3601      	adds	r6, #1
 800398e:	e7f2      	b.n	8003976 <__libc_init_array+0x1e>
 8003990:	080039fc 	.word	0x080039fc
 8003994:	080039fc 	.word	0x080039fc
 8003998:	080039fc 	.word	0x080039fc
 800399c:	08003a00 	.word	0x08003a00

080039a0 <_init>:
 80039a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039a2:	bf00      	nop
 80039a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039a6:	bc08      	pop	{r3}
 80039a8:	469e      	mov	lr, r3
 80039aa:	4770      	bx	lr

080039ac <_fini>:
 80039ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ae:	bf00      	nop
 80039b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039b2:	bc08      	pop	{r3}
 80039b4:	469e      	mov	lr, r3
 80039b6:	4770      	bx	lr
