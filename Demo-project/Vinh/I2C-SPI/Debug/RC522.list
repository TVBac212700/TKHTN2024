
RC522.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b64  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08002c70  08002c70  00003c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cbc  08002cbc  0000401c  2**0
                  CONTENTS
  4 .ARM          00000000  08002cbc  08002cbc  0000401c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cbc  08002cbc  0000401c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cbc  08002cbc  00003cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002cc0  08002cc0  00003cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08002cc4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000001c  08002ce0  0000401c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08002ce0  0000410c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000401c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008c5b  00000000  00000000  00004045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a6b  00000000  00000000  0000cca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a30  00000000  00000000  0000e710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007cf  00000000  00000000  0000f140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017427  00000000  00000000  0000f90f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c6ff  00000000  00000000  00026d36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083f80  00000000  00000000  00033435  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b73b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002914  00000000  00000000  000b73f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003d  00000000  00000000  000b9d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c58 	.word	0x08002c58

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08002c58 	.word	0x08002c58

0800014c <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 8000156:	f107 020f 	add.w	r2, r7, #15
 800015a:	1df9      	adds	r1, r7, #7
 800015c:	2364      	movs	r3, #100	@ 0x64
 800015e:	9300      	str	r3, [sp, #0]
 8000160:	2301      	movs	r3, #1
 8000162:	4804      	ldr	r0, [pc, #16]	@ (8000174 <RC522_SPI_Transfer+0x28>)
 8000164:	f002 fae8 	bl	8002738 <HAL_SPI_TransmitReceive>

	return rx_data;
 8000168:	7bfb      	ldrb	r3, [r7, #15]
}
 800016a:	4618      	mov	r0, r3
 800016c:	3710      	adds	r7, #16
 800016e:	46bd      	mov	sp, r7
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	20000094 	.word	0x20000094

08000178 <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	4603      	mov	r3, r0
 8000180:	460a      	mov	r2, r1
 8000182:	71fb      	strb	r3, [r7, #7]
 8000184:	4613      	mov	r3, r2
 8000186:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8000188:	2200      	movs	r2, #0
 800018a:	2110      	movs	r1, #16
 800018c:	480c      	ldr	r0, [pc, #48]	@ (80001c0 <Write_MFRC522+0x48>)
 800018e:	f001 f99f 	bl	80014d0 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 8000192:	79fb      	ldrb	r3, [r7, #7]
 8000194:	005b      	lsls	r3, r3, #1
 8000196:	b2db      	uxtb	r3, r3
 8000198:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800019c:	b2db      	uxtb	r3, r3
 800019e:	4618      	mov	r0, r3
 80001a0:	f7ff ffd4 	bl	800014c <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 80001a4:	79bb      	ldrb	r3, [r7, #6]
 80001a6:	4618      	mov	r0, r3
 80001a8:	f7ff ffd0 	bl	800014c <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80001ac:	2201      	movs	r2, #1
 80001ae:	2110      	movs	r1, #16
 80001b0:	4803      	ldr	r0, [pc, #12]	@ (80001c0 <Write_MFRC522+0x48>)
 80001b2:	f001 f98d 	bl	80014d0 <HAL_GPIO_WritePin>
}
 80001b6:	bf00      	nop
 80001b8:	3708      	adds	r7, #8
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bd80      	pop	{r7, pc}
 80001be:	bf00      	nop
 80001c0:	40010800 	.word	0x40010800

080001c4 <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b084      	sub	sp, #16
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	4603      	mov	r3, r0
 80001cc:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 80001ce:	2200      	movs	r2, #0
 80001d0:	2110      	movs	r1, #16
 80001d2:	480f      	ldr	r0, [pc, #60]	@ (8000210 <Read_MFRC522+0x4c>)
 80001d4:	f001 f97c 	bl	80014d0 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	005b      	lsls	r3, r3, #1
 80001dc:	b25b      	sxtb	r3, r3
 80001de:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80001e2:	b25b      	sxtb	r3, r3
 80001e4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80001e8:	b25b      	sxtb	r3, r3
 80001ea:	b2db      	uxtb	r3, r3
 80001ec:	4618      	mov	r0, r3
 80001ee:	f7ff ffad 	bl	800014c <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 80001f2:	2000      	movs	r0, #0
 80001f4:	f7ff ffaa 	bl	800014c <RC522_SPI_Transfer>
 80001f8:	4603      	mov	r3, r0
 80001fa:	73fb      	strb	r3, [r7, #15]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80001fc:	2201      	movs	r2, #1
 80001fe:	2110      	movs	r1, #16
 8000200:	4803      	ldr	r0, [pc, #12]	@ (8000210 <Read_MFRC522+0x4c>)
 8000202:	f001 f965 	bl	80014d0 <HAL_GPIO_WritePin>

	return val;
 8000206:	7bfb      	ldrb	r3, [r7, #15]

}
 8000208:	4618      	mov	r0, r3
 800020a:	3710      	adds	r7, #16
 800020c:	46bd      	mov	sp, r7
 800020e:	bd80      	pop	{r7, pc}
 8000210:	40010800 	.word	0x40010800

08000214 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0
 800021a:	4603      	mov	r3, r0
 800021c:	460a      	mov	r2, r1
 800021e:	71fb      	strb	r3, [r7, #7]
 8000220:	4613      	mov	r3, r2
 8000222:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8000224:	79fb      	ldrb	r3, [r7, #7]
 8000226:	4618      	mov	r0, r3
 8000228:	f7ff ffcc 	bl	80001c4 <Read_MFRC522>
 800022c:	4603      	mov	r3, r0
 800022e:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8000230:	7bfa      	ldrb	r2, [r7, #15]
 8000232:	79bb      	ldrb	r3, [r7, #6]
 8000234:	4313      	orrs	r3, r2
 8000236:	b2da      	uxtb	r2, r3
 8000238:	79fb      	ldrb	r3, [r7, #7]
 800023a:	4611      	mov	r1, r2
 800023c:	4618      	mov	r0, r3
 800023e:	f7ff ff9b 	bl	8000178 <Write_MFRC522>
}
 8000242:	bf00      	nop
 8000244:	3710      	adds	r7, #16
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}

0800024a <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)
{
 800024a:	b580      	push	{r7, lr}
 800024c:	b084      	sub	sp, #16
 800024e:	af00      	add	r7, sp, #0
 8000250:	4603      	mov	r3, r0
 8000252:	460a      	mov	r2, r1
 8000254:	71fb      	strb	r3, [r7, #7]
 8000256:	4613      	mov	r3, r2
 8000258:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 800025a:	79fb      	ldrb	r3, [r7, #7]
 800025c:	4618      	mov	r0, r3
 800025e:	f7ff ffb1 	bl	80001c4 <Read_MFRC522>
 8000262:	4603      	mov	r3, r0
 8000264:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8000266:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800026a:	43db      	mvns	r3, r3
 800026c:	b25a      	sxtb	r2, r3
 800026e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000272:	4013      	ands	r3, r2
 8000274:	b25b      	sxtb	r3, r3
 8000276:	b2da      	uxtb	r2, r3
 8000278:	79fb      	ldrb	r3, [r7, #7]
 800027a:	4611      	mov	r1, r2
 800027c:	4618      	mov	r0, r3
 800027e:	f7ff ff7b 	bl	8000178 <Write_MFRC522>
}
 8000282:	bf00      	nop
 8000284:	3710      	adds	r7, #16
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}

0800028a <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 800028a:	b580      	push	{r7, lr}
 800028c:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 800028e:	2014      	movs	r0, #20
 8000290:	f7ff ff98 	bl	80001c4 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 8000294:	2103      	movs	r1, #3
 8000296:	2014      	movs	r0, #20
 8000298:	f7ff ffbc 	bl	8000214 <SetBitMask>
}
 800029c:	bf00      	nop
 800029e:	bd80      	pop	{r7, pc}

080002a0 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 80002a4:	210f      	movs	r1, #15
 80002a6:	2001      	movs	r0, #1
 80002a8:	f7ff ff66 	bl	8000178 <Write_MFRC522>
}
 80002ac:	bf00      	nop
 80002ae:	bd80      	pop	{r7, pc}

080002b0 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80002b4:	2201      	movs	r2, #1
 80002b6:	2110      	movs	r1, #16
 80002b8:	4812      	ldr	r0, [pc, #72]	@ (8000304 <MFRC522_Init+0x54>)
 80002ba:	f001 f909 	bl	80014d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 80002be:	2201      	movs	r2, #1
 80002c0:	2101      	movs	r1, #1
 80002c2:	4811      	ldr	r0, [pc, #68]	@ (8000308 <MFRC522_Init+0x58>)
 80002c4:	f001 f904 	bl	80014d0 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 80002c8:	f7ff ffea 	bl	80002a0 <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 80002cc:	218d      	movs	r1, #141	@ 0x8d
 80002ce:	202a      	movs	r0, #42	@ 0x2a
 80002d0:	f7ff ff52 	bl	8000178 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 80002d4:	213e      	movs	r1, #62	@ 0x3e
 80002d6:	202b      	movs	r0, #43	@ 0x2b
 80002d8:	f7ff ff4e 	bl	8000178 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 80002dc:	211e      	movs	r1, #30
 80002de:	202d      	movs	r0, #45	@ 0x2d
 80002e0:	f7ff ff4a 	bl	8000178 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 80002e4:	2100      	movs	r1, #0
 80002e6:	202c      	movs	r0, #44	@ 0x2c
 80002e8:	f7ff ff46 	bl	8000178 <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 80002ec:	2140      	movs	r1, #64	@ 0x40
 80002ee:	2015      	movs	r0, #21
 80002f0:	f7ff ff42 	bl	8000178 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 80002f4:	213d      	movs	r1, #61	@ 0x3d
 80002f6:	2011      	movs	r0, #17
 80002f8:	f7ff ff3e 	bl	8000178 <Write_MFRC522>

	AntennaOn();
 80002fc:	f7ff ffc5 	bl	800028a <AntennaOn>
}
 8000300:	bf00      	nop
 8000302:	bd80      	pop	{r7, pc}
 8000304:	40010800 	.word	0x40010800
 8000308:	40010c00 	.word	0x40010c00

0800030c <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 800030c:	b590      	push	{r4, r7, lr}
 800030e:	b089      	sub	sp, #36	@ 0x24
 8000310:	af00      	add	r7, sp, #0
 8000312:	60b9      	str	r1, [r7, #8]
 8000314:	607b      	str	r3, [r7, #4]
 8000316:	4603      	mov	r3, r0
 8000318:	73fb      	strb	r3, [r7, #15]
 800031a:	4613      	mov	r3, r2
 800031c:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 800031e:	2302      	movs	r3, #2
 8000320:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 8000322:	2300      	movs	r3, #0
 8000324:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 8000326:	2300      	movs	r3, #0
 8000328:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 800032a:	7bfb      	ldrb	r3, [r7, #15]
 800032c:	2b0c      	cmp	r3, #12
 800032e:	d006      	beq.n	800033e <MFRC522_ToCard+0x32>
 8000330:	2b0e      	cmp	r3, #14
 8000332:	d109      	bne.n	8000348 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 8000334:	2312      	movs	r3, #18
 8000336:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 8000338:	2310      	movs	r3, #16
 800033a:	777b      	strb	r3, [r7, #29]
			break;
 800033c:	e005      	b.n	800034a <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 800033e:	2377      	movs	r3, #119	@ 0x77
 8000340:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 8000342:	2330      	movs	r3, #48	@ 0x30
 8000344:	777b      	strb	r3, [r7, #29]
			break;
 8000346:	e000      	b.n	800034a <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8000348:	bf00      	nop
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 800034a:	7fbb      	ldrb	r3, [r7, #30]
 800034c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000350:	b2db      	uxtb	r3, r3
 8000352:	4619      	mov	r1, r3
 8000354:	2002      	movs	r0, #2
 8000356:	f7ff ff0f 	bl	8000178 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 800035a:	2180      	movs	r1, #128	@ 0x80
 800035c:	2004      	movs	r0, #4
 800035e:	f7ff ff74 	bl	800024a <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 8000362:	2180      	movs	r1, #128	@ 0x80
 8000364:	200a      	movs	r0, #10
 8000366:	f7ff ff55 	bl	8000214 <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 800036a:	2100      	movs	r1, #0
 800036c:	2001      	movs	r0, #1
 800036e:	f7ff ff03 	bl	8000178 <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 8000372:	2300      	movs	r3, #0
 8000374:	61bb      	str	r3, [r7, #24]
 8000376:	e00a      	b.n	800038e <MFRC522_ToCard+0x82>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 8000378:	68ba      	ldr	r2, [r7, #8]
 800037a:	69bb      	ldr	r3, [r7, #24]
 800037c:	4413      	add	r3, r2
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	4619      	mov	r1, r3
 8000382:	2009      	movs	r0, #9
 8000384:	f7ff fef8 	bl	8000178 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8000388:	69bb      	ldr	r3, [r7, #24]
 800038a:	3301      	adds	r3, #1
 800038c:	61bb      	str	r3, [r7, #24]
 800038e:	7bbb      	ldrb	r3, [r7, #14]
 8000390:	69ba      	ldr	r2, [r7, #24]
 8000392:	429a      	cmp	r2, r3
 8000394:	d3f0      	bcc.n	8000378 <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 8000396:	7bfb      	ldrb	r3, [r7, #15]
 8000398:	4619      	mov	r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	f7ff feec 	bl	8000178 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 80003a0:	7bfb      	ldrb	r3, [r7, #15]
 80003a2:	2b0c      	cmp	r3, #12
 80003a4:	d103      	bne.n	80003ae <MFRC522_ToCard+0xa2>
    {
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 80003a6:	2180      	movs	r1, #128	@ 0x80
 80003a8:	200d      	movs	r0, #13
 80003aa:	f7ff ff33 	bl	8000214 <SetBitMask>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 80003ae:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80003b2:	61bb      	str	r3, [r7, #24]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 80003b4:	2004      	movs	r0, #4
 80003b6:	f7ff ff05 	bl	80001c4 <Read_MFRC522>
 80003ba:	4603      	mov	r3, r0
 80003bc:	773b      	strb	r3, [r7, #28]
        i--;
 80003be:	69bb      	ldr	r3, [r7, #24]
 80003c0:	3b01      	subs	r3, #1
 80003c2:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80003c4:	69bb      	ldr	r3, [r7, #24]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d00a      	beq.n	80003e0 <MFRC522_ToCard+0xd4>
 80003ca:	7f3b      	ldrb	r3, [r7, #28]
 80003cc:	f003 0301 	and.w	r3, r3, #1
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d105      	bne.n	80003e0 <MFRC522_ToCard+0xd4>
 80003d4:	7f3a      	ldrb	r2, [r7, #28]
 80003d6:	7f7b      	ldrb	r3, [r7, #29]
 80003d8:	4013      	ands	r3, r2
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d0e9      	beq.n	80003b4 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 80003e0:	2180      	movs	r1, #128	@ 0x80
 80003e2:	200d      	movs	r0, #13
 80003e4:	f7ff ff31 	bl	800024a <ClearBitMask>

    if (i != 0)
 80003e8:	69bb      	ldr	r3, [r7, #24]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d052      	beq.n	8000494 <MFRC522_ToCard+0x188>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 80003ee:	2006      	movs	r0, #6
 80003f0:	f7ff fee8 	bl	80001c4 <Read_MFRC522>
 80003f4:	4603      	mov	r3, r0
 80003f6:	f003 031b 	and.w	r3, r3, #27
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d148      	bne.n	8000490 <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 80003fe:	2300      	movs	r3, #0
 8000400:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 8000402:	7f3a      	ldrb	r2, [r7, #28]
 8000404:	7fbb      	ldrb	r3, [r7, #30]
 8000406:	4013      	ands	r3, r2
 8000408:	b2db      	uxtb	r3, r3
 800040a:	f003 0301 	and.w	r3, r3, #1
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <MFRC522_ToCard+0x10a>
            {
				status = MI_NOTAGERR;
 8000412:	2301      	movs	r3, #1
 8000414:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 8000416:	7bfb      	ldrb	r3, [r7, #15]
 8000418:	2b0c      	cmp	r3, #12
 800041a:	d13b      	bne.n	8000494 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 800041c:	200a      	movs	r0, #10
 800041e:	f7ff fed1 	bl	80001c4 <Read_MFRC522>
 8000422:	4603      	mov	r3, r0
 8000424:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 8000426:	200c      	movs	r0, #12
 8000428:	f7ff fecc 	bl	80001c4 <Read_MFRC522>
 800042c:	4603      	mov	r3, r0
 800042e:	f003 0307 	and.w	r3, r3, #7
 8000432:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 8000434:	7dfb      	ldrb	r3, [r7, #23]
 8000436:	2b00      	cmp	r3, #0
 8000438:	d008      	beq.n	800044c <MFRC522_ToCard+0x140>
                {
					*backLen = (n-1)*8 + lastBits;
 800043a:	7f3b      	ldrb	r3, [r7, #28]
 800043c:	3b01      	subs	r3, #1
 800043e:	00da      	lsls	r2, r3, #3
 8000440:	7dfb      	ldrb	r3, [r7, #23]
 8000442:	4413      	add	r3, r2
 8000444:	461a      	mov	r2, r3
 8000446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000448:	601a      	str	r2, [r3, #0]
 800044a:	e004      	b.n	8000456 <MFRC522_ToCard+0x14a>
				}
                else
                {
					*backLen = n*8;
 800044c:	7f3b      	ldrb	r3, [r7, #28]
 800044e:	00db      	lsls	r3, r3, #3
 8000450:	461a      	mov	r2, r3
 8000452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000454:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 8000456:	7f3b      	ldrb	r3, [r7, #28]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d101      	bne.n	8000460 <MFRC522_ToCard+0x154>
                {
					n = 1;
 800045c:	2301      	movs	r3, #1
 800045e:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 8000460:	7f3b      	ldrb	r3, [r7, #28]
 8000462:	2b10      	cmp	r3, #16
 8000464:	d901      	bls.n	800046a <MFRC522_ToCard+0x15e>
                {
					n = MAX_LEN;
 8000466:	2310      	movs	r3, #16
 8000468:	773b      	strb	r3, [r7, #28]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 800046a:	2300      	movs	r3, #0
 800046c:	61bb      	str	r3, [r7, #24]
 800046e:	e00a      	b.n	8000486 <MFRC522_ToCard+0x17a>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 8000470:	687a      	ldr	r2, [r7, #4]
 8000472:	69bb      	ldr	r3, [r7, #24]
 8000474:	18d4      	adds	r4, r2, r3
 8000476:	2009      	movs	r0, #9
 8000478:	f7ff fea4 	bl	80001c4 <Read_MFRC522>
 800047c:	4603      	mov	r3, r0
 800047e:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 8000480:	69bb      	ldr	r3, [r7, #24]
 8000482:	3301      	adds	r3, #1
 8000484:	61bb      	str	r3, [r7, #24]
 8000486:	7f3b      	ldrb	r3, [r7, #28]
 8000488:	69ba      	ldr	r2, [r7, #24]
 800048a:	429a      	cmp	r2, r3
 800048c:	d3f0      	bcc.n	8000470 <MFRC522_ToCard+0x164>
 800048e:	e001      	b.n	8000494 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {
			status = MI_ERR;
 8000490:	2302      	movs	r3, #2
 8000492:	77fb      	strb	r3, [r7, #31]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 8000494:	7ffb      	ldrb	r3, [r7, #31]
}
 8000496:	4618      	mov	r0, r3
 8000498:	3724      	adds	r7, #36	@ 0x24
 800049a:	46bd      	mov	sp, r7
 800049c:	bd90      	pop	{r4, r7, pc}

0800049e <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 800049e:	b580      	push	{r7, lr}
 80004a0:	b086      	sub	sp, #24
 80004a2:	af02      	add	r7, sp, #8
 80004a4:	4603      	mov	r3, r0
 80004a6:	6039      	str	r1, [r7, #0]
 80004a8:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 80004aa:	2107      	movs	r1, #7
 80004ac:	200d      	movs	r0, #13
 80004ae:	f7ff fe63 	bl	8000178 <Write_MFRC522>

	TagType[0] = reqMode;
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	79fa      	ldrb	r2, [r7, #7]
 80004b6:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80004b8:	f107 0308 	add.w	r3, r7, #8
 80004bc:	9300      	str	r3, [sp, #0]
 80004be:	683b      	ldr	r3, [r7, #0]
 80004c0:	2201      	movs	r2, #1
 80004c2:	6839      	ldr	r1, [r7, #0]
 80004c4:	200c      	movs	r0, #12
 80004c6:	f7ff ff21 	bl	800030c <MFRC522_ToCard>
 80004ca:	4603      	mov	r3, r0
 80004cc:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 80004ce:	7bfb      	ldrb	r3, [r7, #15]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d102      	bne.n	80004da <MFRC522_Request+0x3c>
 80004d4:	68bb      	ldr	r3, [r7, #8]
 80004d6:	2b10      	cmp	r3, #16
 80004d8:	d001      	beq.n	80004de <MFRC522_Request+0x40>
	{
		status = MI_ERR;
 80004da:	2302      	movs	r3, #2
 80004dc:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80004de:	7bfb      	ldrb	r3, [r7, #15]
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	3710      	adds	r7, #16
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b086      	sub	sp, #24
 80004ec:	af02      	add	r7, sp, #8
 80004ee:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 80004f0:	2300      	movs	r3, #0
 80004f2:	737b      	strb	r3, [r7, #13]
    uint unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 80004f4:	2100      	movs	r1, #0
 80004f6:	200d      	movs	r0, #13
 80004f8:	f7ff fe3e 	bl	8000178 <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2293      	movs	r2, #147	@ 0x93
 8000500:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	3301      	adds	r3, #1
 8000506:	2220      	movs	r2, #32
 8000508:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 800050a:	f107 0308 	add.w	r3, r7, #8
 800050e:	9300      	str	r3, [sp, #0]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2202      	movs	r2, #2
 8000514:	6879      	ldr	r1, [r7, #4]
 8000516:	200c      	movs	r0, #12
 8000518:	f7ff fef8 	bl	800030c <MFRC522_ToCard>
 800051c:	4603      	mov	r3, r0
 800051e:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 8000520:	7bfb      	ldrb	r3, [r7, #15]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d118      	bne.n	8000558 <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 8000526:	2300      	movs	r3, #0
 8000528:	73bb      	strb	r3, [r7, #14]
 800052a:	e009      	b.n	8000540 <MFRC522_Anticoll+0x58>
		{
		 	serNumCheck ^= serNum[i];
 800052c:	7bbb      	ldrb	r3, [r7, #14]
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	4413      	add	r3, r2
 8000532:	781a      	ldrb	r2, [r3, #0]
 8000534:	7b7b      	ldrb	r3, [r7, #13]
 8000536:	4053      	eors	r3, r2
 8000538:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 800053a:	7bbb      	ldrb	r3, [r7, #14]
 800053c:	3301      	adds	r3, #1
 800053e:	73bb      	strb	r3, [r7, #14]
 8000540:	7bbb      	ldrb	r3, [r7, #14]
 8000542:	2b03      	cmp	r3, #3
 8000544:	d9f2      	bls.n	800052c <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 8000546:	7bbb      	ldrb	r3, [r7, #14]
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	4413      	add	r3, r2
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	7b7a      	ldrb	r2, [r7, #13]
 8000550:	429a      	cmp	r2, r3
 8000552:	d001      	beq.n	8000558 <MFRC522_Anticoll+0x70>
		{
			status = MI_ERR;
 8000554:	2302      	movs	r3, #2
 8000556:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 8000558:	7bfb      	ldrb	r3, [r7, #15]
}
 800055a:	4618      	mov	r0, r3
 800055c:	3710      	adds	r7, #16
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
	...

08000564 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800056e:	4a38      	ldr	r2, [pc, #224]	@ (8000650 <HD44780_Init+0xec>)
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000574:	4b37      	ldr	r3, [pc, #220]	@ (8000654 <HD44780_Init+0xf0>)
 8000576:	2208      	movs	r2, #8
 8000578:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800057a:	4b37      	ldr	r3, [pc, #220]	@ (8000658 <HD44780_Init+0xf4>)
 800057c:	2200      	movs	r2, #0
 800057e:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000580:	4b33      	ldr	r3, [pc, #204]	@ (8000650 <HD44780_Init+0xec>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b01      	cmp	r3, #1
 8000586:	d907      	bls.n	8000598 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000588:	4b33      	ldr	r3, [pc, #204]	@ (8000658 <HD44780_Init+0xf4>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	f043 0308 	orr.w	r3, r3, #8
 8000590:	b2da      	uxtb	r2, r3
 8000592:	4b31      	ldr	r3, [pc, #196]	@ (8000658 <HD44780_Init+0xf4>)
 8000594:	701a      	strb	r2, [r3, #0]
 8000596:	e006      	b.n	80005a6 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000598:	4b2f      	ldr	r3, [pc, #188]	@ (8000658 <HD44780_Init+0xf4>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	f043 0304 	orr.w	r3, r3, #4
 80005a0:	b2da      	uxtb	r2, r3
 80005a2:	4b2d      	ldr	r3, [pc, #180]	@ (8000658 <HD44780_Init+0xf4>)
 80005a4:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 80005a6:	f000 f985 	bl	80008b4 <DelayInit>
  HAL_Delay(50);
 80005aa:	2032      	movs	r0, #50	@ 0x32
 80005ac:	f000 fd04 	bl	8000fb8 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 80005b0:	4b28      	ldr	r3, [pc, #160]	@ (8000654 <HD44780_Init+0xf0>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 f943 	bl	8000840 <ExpanderWrite>
  HAL_Delay(1000);
 80005ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005be:	f000 fcfb 	bl	8000fb8 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80005c2:	2030      	movs	r0, #48	@ 0x30
 80005c4:	f000 f92b 	bl	800081e <Write4Bits>
  DelayUS(4500);
 80005c8:	f241 1094 	movw	r0, #4500	@ 0x1194
 80005cc:	f000 f99a 	bl	8000904 <DelayUS>

  Write4Bits(0x03 << 4);
 80005d0:	2030      	movs	r0, #48	@ 0x30
 80005d2:	f000 f924 	bl	800081e <Write4Bits>
  DelayUS(4500);
 80005d6:	f241 1094 	movw	r0, #4500	@ 0x1194
 80005da:	f000 f993 	bl	8000904 <DelayUS>

  Write4Bits(0x03 << 4);
 80005de:	2030      	movs	r0, #48	@ 0x30
 80005e0:	f000 f91d 	bl	800081e <Write4Bits>
  DelayUS(4500);
 80005e4:	f241 1094 	movw	r0, #4500	@ 0x1194
 80005e8:	f000 f98c 	bl	8000904 <DelayUS>

  Write4Bits(0x02 << 4);
 80005ec:	2020      	movs	r0, #32
 80005ee:	f000 f916 	bl	800081e <Write4Bits>
  DelayUS(100);
 80005f2:	2064      	movs	r0, #100	@ 0x64
 80005f4:	f000 f986 	bl	8000904 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80005f8:	4b17      	ldr	r3, [pc, #92]	@ (8000658 <HD44780_Init+0xf4>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	f043 0320 	orr.w	r3, r3, #32
 8000600:	b2db      	uxtb	r3, r3
 8000602:	4618      	mov	r0, r3
 8000604:	f000 f8ce 	bl	80007a4 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000608:	4b14      	ldr	r3, [pc, #80]	@ (800065c <HD44780_Init+0xf8>)
 800060a:	2204      	movs	r2, #4
 800060c:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800060e:	f000 f875 	bl	80006fc <HD44780_Display>
  HD44780_Clear();
 8000612:	f000 f82b 	bl	800066c <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000616:	4b12      	ldr	r3, [pc, #72]	@ (8000660 <HD44780_Init+0xfc>)
 8000618:	2202      	movs	r2, #2
 800061a:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 800061c:	4b10      	ldr	r3, [pc, #64]	@ (8000660 <HD44780_Init+0xfc>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	f043 0304 	orr.w	r3, r3, #4
 8000624:	b2db      	uxtb	r3, r3
 8000626:	4618      	mov	r0, r3
 8000628:	f000 f8bc 	bl	80007a4 <SendCommand>
  DelayUS(4500);
 800062c:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000630:	f000 f968 	bl	8000904 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000634:	490b      	ldr	r1, [pc, #44]	@ (8000664 <HD44780_Init+0x100>)
 8000636:	2000      	movs	r0, #0
 8000638:	f000 f876 	bl	8000728 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 800063c:	490a      	ldr	r1, [pc, #40]	@ (8000668 <HD44780_Init+0x104>)
 800063e:	2001      	movs	r0, #1
 8000640:	f000 f872 	bl	8000728 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000644:	f000 f81d 	bl	8000682 <HD44780_Home>
}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	2000003b 	.word	0x2000003b
 8000654:	2000003c 	.word	0x2000003c
 8000658:	20000038 	.word	0x20000038
 800065c:	20000039 	.word	0x20000039
 8000660:	2000003a 	.word	0x2000003a
 8000664:	20000000 	.word	0x20000000
 8000668:	20000008 	.word	0x20000008

0800066c <HD44780_Clear>:

void HD44780_Clear()
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000670:	2001      	movs	r0, #1
 8000672:	f000 f897 	bl	80007a4 <SendCommand>
  DelayUS(2000);
 8000676:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800067a:	f000 f943 	bl	8000904 <DelayUS>
}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}

08000682 <HD44780_Home>:

void HD44780_Home()
{
 8000682:	b580      	push	{r7, lr}
 8000684:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000686:	2002      	movs	r0, #2
 8000688:	f000 f88c 	bl	80007a4 <SendCommand>
  DelayUS(2000);
 800068c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000690:	f000 f938 	bl	8000904 <DelayUS>
}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}

08000698 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000698:	b590      	push	{r4, r7, lr}
 800069a:	b087      	sub	sp, #28
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	460a      	mov	r2, r1
 80006a2:	71fb      	strb	r3, [r7, #7]
 80006a4:	4613      	mov	r3, r2
 80006a6:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80006a8:	4b12      	ldr	r3, [pc, #72]	@ (80006f4 <HD44780_SetCursor+0x5c>)
 80006aa:	f107 0408 	add.w	r4, r7, #8
 80006ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80006b4:	4b10      	ldr	r3, [pc, #64]	@ (80006f8 <HD44780_SetCursor+0x60>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	79ba      	ldrb	r2, [r7, #6]
 80006ba:	429a      	cmp	r2, r3
 80006bc:	d303      	bcc.n	80006c6 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80006be:	4b0e      	ldr	r3, [pc, #56]	@ (80006f8 <HD44780_SetCursor+0x60>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	3b01      	subs	r3, #1
 80006c4:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80006c6:	79bb      	ldrb	r3, [r7, #6]
 80006c8:	009b      	lsls	r3, r3, #2
 80006ca:	3318      	adds	r3, #24
 80006cc:	443b      	add	r3, r7
 80006ce:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	4413      	add	r3, r2
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	b25b      	sxtb	r3, r3
 80006dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80006e0:	b25b      	sxtb	r3, r3
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 f85d 	bl	80007a4 <SendCommand>
}
 80006ea:	bf00      	nop
 80006ec:	371c      	adds	r7, #28
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd90      	pop	{r4, r7, pc}
 80006f2:	bf00      	nop
 80006f4:	08002c70 	.word	0x08002c70
 80006f8:	2000003b 	.word	0x2000003b

080006fc <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000700:	4b08      	ldr	r3, [pc, #32]	@ (8000724 <HD44780_Display+0x28>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	f043 0304 	orr.w	r3, r3, #4
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <HD44780_Display+0x28>)
 800070c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800070e:	4b05      	ldr	r3, [pc, #20]	@ (8000724 <HD44780_Display+0x28>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	f043 0308 	orr.w	r3, r3, #8
 8000716:	b2db      	uxtb	r3, r3
 8000718:	4618      	mov	r0, r3
 800071a:	f000 f843 	bl	80007a4 <SendCommand>
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000039 	.word	0x20000039

08000728 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	6039      	str	r1, [r7, #0]
 8000732:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	f003 0307 	and.w	r3, r3, #7
 800073a:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	00db      	lsls	r3, r3, #3
 8000740:	b25b      	sxtb	r3, r3
 8000742:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000746:	b25b      	sxtb	r3, r3
 8000748:	b2db      	uxtb	r3, r3
 800074a:	4618      	mov	r0, r3
 800074c:	f000 f82a 	bl	80007a4 <SendCommand>
  for (int i=0; i<8; i++)
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	e009      	b.n	800076a <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	683a      	ldr	r2, [r7, #0]
 800075a:	4413      	add	r3, r2
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	4618      	mov	r0, r3
 8000760:	f000 f82e 	bl	80007c0 <SendChar>
  for (int i=0; i<8; i++)
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	3301      	adds	r3, #1
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	2b07      	cmp	r3, #7
 800076e:	ddf2      	ble.n	8000756 <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000770:	bf00      	nop
 8000772:	bf00      	nop
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 800077a:	b580      	push	{r7, lr}
 800077c:	b082      	sub	sp, #8
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000782:	e006      	b.n	8000792 <HD44780_PrintStr+0x18>
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	1c5a      	adds	r2, r3, #1
 8000788:	607a      	str	r2, [r7, #4]
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	4618      	mov	r0, r3
 800078e:	f000 f817 	bl	80007c0 <SendChar>
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d1f4      	bne.n	8000784 <HD44780_PrintStr+0xa>
}
 800079a:	bf00      	nop
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 f812 	bl	80007dc <Send>
}
 80007b8:	bf00      	nop
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <SendChar>:

static void SendChar(uint8_t ch)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	2101      	movs	r1, #1
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 f804 	bl	80007dc <Send>
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	460a      	mov	r2, r1
 80007e6:	71fb      	strb	r3, [r7, #7]
 80007e8:	4613      	mov	r3, r2
 80007ea:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	f023 030f 	bic.w	r3, r3, #15
 80007f2:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	011b      	lsls	r3, r3, #4
 80007f8:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80007fa:	7bfa      	ldrb	r2, [r7, #15]
 80007fc:	79bb      	ldrb	r3, [r7, #6]
 80007fe:	4313      	orrs	r3, r2
 8000800:	b2db      	uxtb	r3, r3
 8000802:	4618      	mov	r0, r3
 8000804:	f000 f80b 	bl	800081e <Write4Bits>
  Write4Bits((lownib)|mode);
 8000808:	7bba      	ldrb	r2, [r7, #14]
 800080a:	79bb      	ldrb	r3, [r7, #6]
 800080c:	4313      	orrs	r3, r2
 800080e:	b2db      	uxtb	r3, r3
 8000810:	4618      	mov	r0, r3
 8000812:	f000 f804 	bl	800081e <Write4Bits>
}
 8000816:	bf00      	nop
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b082      	sub	sp, #8
 8000822:	af00      	add	r7, sp, #0
 8000824:	4603      	mov	r3, r0
 8000826:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	4618      	mov	r0, r3
 800082c:	f000 f808 	bl	8000840 <ExpanderWrite>
  PulseEnable(value);
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	4618      	mov	r0, r3
 8000834:	f000 f820 	bl	8000878 <PulseEnable>
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af02      	add	r7, sp, #8
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 800084a:	4b09      	ldr	r3, [pc, #36]	@ (8000870 <ExpanderWrite+0x30>)
 800084c:	781a      	ldrb	r2, [r3, #0]
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	4313      	orrs	r3, r2
 8000852:	b2db      	uxtb	r3, r3
 8000854:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000856:	f107 020f 	add.w	r2, r7, #15
 800085a:	230a      	movs	r3, #10
 800085c:	9300      	str	r3, [sp, #0]
 800085e:	2301      	movs	r3, #1
 8000860:	214e      	movs	r1, #78	@ 0x4e
 8000862:	4804      	ldr	r0, [pc, #16]	@ (8000874 <ExpanderWrite+0x34>)
 8000864:	f000 ff90 	bl	8001788 <HAL_I2C_Master_Transmit>
}
 8000868:	bf00      	nop
 800086a:	3710      	adds	r7, #16
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	2000003c 	.word	0x2000003c
 8000874:	20000040 	.word	0x20000040

08000878 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	f043 0304 	orr.w	r3, r3, #4
 8000888:	b2db      	uxtb	r3, r3
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff ffd8 	bl	8000840 <ExpanderWrite>
  DelayUS(20);
 8000890:	2014      	movs	r0, #20
 8000892:	f000 f837 	bl	8000904 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	f023 0304 	bic.w	r3, r3, #4
 800089c:	b2db      	uxtb	r3, r3
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff ffce 	bl	8000840 <ExpanderWrite>
  DelayUS(20);
 80008a4:	2014      	movs	r0, #20
 80008a6:	f000 f82d 	bl	8000904 <DelayUS>
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <DelayInit>:

static void DelayInit(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80008b8:	4b10      	ldr	r3, [pc, #64]	@ (80008fc <DelayInit+0x48>)
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	4a0f      	ldr	r2, [pc, #60]	@ (80008fc <DelayInit+0x48>)
 80008be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80008c2:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80008c4:	4b0d      	ldr	r3, [pc, #52]	@ (80008fc <DelayInit+0x48>)
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	4a0c      	ldr	r2, [pc, #48]	@ (80008fc <DelayInit+0x48>)
 80008ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80008ce:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80008d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000900 <DelayInit+0x4c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a0a      	ldr	r2, [pc, #40]	@ (8000900 <DelayInit+0x4c>)
 80008d6:	f023 0301 	bic.w	r3, r3, #1
 80008da:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80008dc:	4b08      	ldr	r3, [pc, #32]	@ (8000900 <DelayInit+0x4c>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a07      	ldr	r2, [pc, #28]	@ (8000900 <DelayInit+0x4c>)
 80008e2:	f043 0301 	orr.w	r3, r3, #1
 80008e6:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80008e8:	4b05      	ldr	r3, [pc, #20]	@ (8000900 <DelayInit+0x4c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80008ee:	bf00      	nop
  __ASM volatile ("NOP");
 80008f0:	bf00      	nop
  __ASM volatile ("NOP");
 80008f2:	bf00      	nop
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr
 80008fc:	e000edf0 	.word	0xe000edf0
 8000900:	e0001000 	.word	0xe0001000

08000904 <DelayUS>:

static void DelayUS(uint32_t us) {
 8000904:	b480      	push	{r7}
 8000906:	b087      	sub	sp, #28
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 800090c:	4b0d      	ldr	r3, [pc, #52]	@ (8000944 <DelayUS+0x40>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a0d      	ldr	r2, [pc, #52]	@ (8000948 <DelayUS+0x44>)
 8000912:	fba2 2303 	umull	r2, r3, r2, r3
 8000916:	0c9a      	lsrs	r2, r3, #18
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	fb02 f303 	mul.w	r3, r2, r3
 800091e:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000920:	4b0a      	ldr	r3, [pc, #40]	@ (800094c <DelayUS+0x48>)
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000926:	4b09      	ldr	r3, [pc, #36]	@ (800094c <DelayUS+0x48>)
 8000928:	685a      	ldr	r2, [r3, #4]
 800092a:	693b      	ldr	r3, [r7, #16]
 800092c:	1ad3      	subs	r3, r2, r3
 800092e:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	697a      	ldr	r2, [r7, #20]
 8000934:	429a      	cmp	r2, r3
 8000936:	d8f6      	bhi.n	8000926 <DelayUS+0x22>
}
 8000938:	bf00      	nop
 800093a:	bf00      	nop
 800093c:	371c      	adds	r7, #28
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr
 8000944:	20000010 	.word	0x20000010
 8000948:	431bde83 	.word	0x431bde83
 800094c:	e0001000 	.word	0xe0001000

08000950 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000954:	f000 face 	bl	8000ef4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000958:	f000 f888 	bl	8000a6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800095c:	f000 f930 	bl	8000bc0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000960:	f000 f8f8 	bl	8000b54 <MX_SPI1_Init>
  MX_I2C1_Init();
 8000964:	f000 f8c8 	bl	8000af8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  MFRC522_Init();
 8000968:	f7ff fca2 	bl	80002b0 <MFRC522_Init>
 HD44780_Init(2);
 800096c:	2002      	movs	r0, #2
 800096e:	f7ff fdf9 	bl	8000564 <HD44780_Init>
    HD44780_Clear();
 8000972:	f7ff fe7b 	bl	800066c <HD44780_Clear>
    HD44780_SetCursor(0,0);
 8000976:	2100      	movs	r1, #0
 8000978:	2000      	movs	r0, #0
 800097a:	f7ff fe8d 	bl	8000698 <HD44780_SetCursor>
    HD44780_PrintStr("HELLO");
 800097e:	4835      	ldr	r0, [pc, #212]	@ (8000a54 <main+0x104>)
 8000980:	f7ff fefb 	bl	800077a <HD44780_PrintStr>
    HD44780_SetCursor(10,1);
 8000984:	2101      	movs	r1, #1
 8000986:	200a      	movs	r0, #10
 8000988:	f7ff fe86 	bl	8000698 <HD44780_SetCursor>
    HD44780_PrintStr("WORLD");
 800098c:	4832      	ldr	r0, [pc, #200]	@ (8000a58 <main+0x108>)
 800098e:	f7ff fef4 	bl	800077a <HD44780_PrintStr>
    HAL_Delay(2000);
 8000992:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000996:	f000 fb0f 	bl	8000fb8 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  status = MFRC522_Request(PICC_REQIDL, str);
 800099a:	4930      	ldr	r1, [pc, #192]	@ (8000a5c <main+0x10c>)
 800099c:	2026      	movs	r0, #38	@ 0x26
 800099e:	f7ff fd7e 	bl	800049e <MFRC522_Request>
 80009a2:	4603      	mov	r3, r0
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b2e      	ldr	r3, [pc, #184]	@ (8000a60 <main+0x110>)
 80009a8:	701a      	strb	r2, [r3, #0]
	  	    status = MFRC522_Anticoll(str);
 80009aa:	482c      	ldr	r0, [pc, #176]	@ (8000a5c <main+0x10c>)
 80009ac:	f7ff fd9c 	bl	80004e8 <MFRC522_Anticoll>
 80009b0:	4603      	mov	r3, r0
 80009b2:	461a      	mov	r2, r3
 80009b4:	4b2a      	ldr	r3, [pc, #168]	@ (8000a60 <main+0x110>)
 80009b6:	701a      	strb	r2, [r3, #0]
	  	    memcpy(sNum, str, 5);
 80009b8:	4b2a      	ldr	r3, [pc, #168]	@ (8000a64 <main+0x114>)
 80009ba:	4a28      	ldr	r2, [pc, #160]	@ (8000a5c <main+0x10c>)
 80009bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009c0:	6018      	str	r0, [r3, #0]
 80009c2:	3304      	adds	r3, #4
 80009c4:	7019      	strb	r1, [r3, #0]
	  	    HAL_Delay(100);
 80009c6:	2064      	movs	r0, #100	@ 0x64
 80009c8:	f000 faf6 	bl	8000fb8 <HAL_Delay>
	  	     if((str[0]==1) && (str[1]==193) && (str[2]==227) && (str[3]==38) && (str[4]==5) )
 80009cc:	4b23      	ldr	r3, [pc, #140]	@ (8000a5c <main+0x10c>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d119      	bne.n	8000a08 <main+0xb8>
 80009d4:	4b21      	ldr	r3, [pc, #132]	@ (8000a5c <main+0x10c>)
 80009d6:	785b      	ldrb	r3, [r3, #1]
 80009d8:	2bc1      	cmp	r3, #193	@ 0xc1
 80009da:	d115      	bne.n	8000a08 <main+0xb8>
 80009dc:	4b1f      	ldr	r3, [pc, #124]	@ (8000a5c <main+0x10c>)
 80009de:	789b      	ldrb	r3, [r3, #2]
 80009e0:	2be3      	cmp	r3, #227	@ 0xe3
 80009e2:	d111      	bne.n	8000a08 <main+0xb8>
 80009e4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a5c <main+0x10c>)
 80009e6:	78db      	ldrb	r3, [r3, #3]
 80009e8:	2b26      	cmp	r3, #38	@ 0x26
 80009ea:	d10d      	bne.n	8000a08 <main+0xb8>
 80009ec:	4b1b      	ldr	r3, [pc, #108]	@ (8000a5c <main+0x10c>)
 80009ee:	791b      	ldrb	r3, [r3, #4]
 80009f0:	2b05      	cmp	r3, #5
 80009f2:	d109      	bne.n	8000a08 <main+0xb8>
	  	     {
	  	       HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,0);
 80009f4:	2200      	movs	r2, #0
 80009f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009fa:	481b      	ldr	r0, [pc, #108]	@ (8000a68 <main+0x118>)
 80009fc:	f000 fd68 	bl	80014d0 <HAL_GPIO_WritePin>
	  	       HAL_Delay(100);
 8000a00:	2064      	movs	r0, #100	@ 0x64
 8000a02:	f000 fad9 	bl	8000fb8 <HAL_Delay>
 8000a06:	e024      	b.n	8000a52 <main+0x102>
	  	       }
	  	     else if((str[0]==147) && (str[1]==132) && (str[2]==128) && (str[3]==0) && (str[4]==0) )
 8000a08:	4b14      	ldr	r3, [pc, #80]	@ (8000a5c <main+0x10c>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b93      	cmp	r3, #147	@ 0x93
 8000a0e:	d11a      	bne.n	8000a46 <main+0xf6>
 8000a10:	4b12      	ldr	r3, [pc, #72]	@ (8000a5c <main+0x10c>)
 8000a12:	785b      	ldrb	r3, [r3, #1]
 8000a14:	2b84      	cmp	r3, #132	@ 0x84
 8000a16:	d116      	bne.n	8000a46 <main+0xf6>
 8000a18:	4b10      	ldr	r3, [pc, #64]	@ (8000a5c <main+0x10c>)
 8000a1a:	789b      	ldrb	r3, [r3, #2]
 8000a1c:	2b80      	cmp	r3, #128	@ 0x80
 8000a1e:	d112      	bne.n	8000a46 <main+0xf6>
 8000a20:	4b0e      	ldr	r3, [pc, #56]	@ (8000a5c <main+0x10c>)
 8000a22:	78db      	ldrb	r3, [r3, #3]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d10e      	bne.n	8000a46 <main+0xf6>
 8000a28:	4b0c      	ldr	r3, [pc, #48]	@ (8000a5c <main+0x10c>)
 8000a2a:	791b      	ldrb	r3, [r3, #4]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d10a      	bne.n	8000a46 <main+0xf6>
	  	       {
	  	       HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,0);
 8000a30:	2200      	movs	r2, #0
 8000a32:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a36:	480c      	ldr	r0, [pc, #48]	@ (8000a68 <main+0x118>)
 8000a38:	f000 fd4a 	bl	80014d0 <HAL_GPIO_WritePin>
	  	       HAL_Delay(2000);
 8000a3c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a40:	f000 faba 	bl	8000fb8 <HAL_Delay>
 8000a44:	e005      	b.n	8000a52 <main+0x102>
	  	     }
	  	     else
	  	     {
	  	       HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,1);
 8000a46:	2201      	movs	r2, #1
 8000a48:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a4c:	4806      	ldr	r0, [pc, #24]	@ (8000a68 <main+0x118>)
 8000a4e:	f000 fd3f 	bl	80014d0 <HAL_GPIO_WritePin>
	  status = MFRC522_Request(PICC_REQIDL, str);
 8000a52:	e7a2      	b.n	800099a <main+0x4a>
 8000a54:	08002c80 	.word	0x08002c80
 8000a58:	08002c88 	.word	0x08002c88
 8000a5c:	200000f0 	.word	0x200000f0
 8000a60:	200000ec 	.word	0x200000ec
 8000a64:	20000100 	.word	0x20000100
 8000a68:	40011000 	.word	0x40011000

08000a6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b090      	sub	sp, #64	@ 0x40
 8000a70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a72:	f107 0318 	add.w	r3, r7, #24
 8000a76:	2228      	movs	r2, #40	@ 0x28
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f002 f8bf 	bl	8002bfe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a80:	1d3b      	adds	r3, r7, #4
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a92:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a96:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aa4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000aaa:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab0:	f107 0318 	add.w	r3, r7, #24
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f001 f9bf 	bl	8001e38 <HAL_RCC_OscConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000ac0:	f000 f900 	bl	8000cc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac4:	230f      	movs	r3, #15
 8000ac6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ad0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ad4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	2102      	movs	r1, #2
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f001 fc2c 	bl	800233c <HAL_RCC_ClockConfig>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000aea:	f000 f8eb 	bl	8000cc4 <Error_Handler>
  }
}
 8000aee:	bf00      	nop
 8000af0:	3740      	adds	r7, #64	@ 0x40
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
	...

08000af8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000afc:	4b12      	ldr	r3, [pc, #72]	@ (8000b48 <MX_I2C1_Init+0x50>)
 8000afe:	4a13      	ldr	r2, [pc, #76]	@ (8000b4c <MX_I2C1_Init+0x54>)
 8000b00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b02:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <MX_I2C1_Init+0x50>)
 8000b04:	4a12      	ldr	r2, [pc, #72]	@ (8000b50 <MX_I2C1_Init+0x58>)
 8000b06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	@ (8000b48 <MX_I2C1_Init+0x50>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b48 <MX_I2C1_Init+0x50>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	@ (8000b48 <MX_I2C1_Init+0x50>)
 8000b16:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b48 <MX_I2C1_Init+0x50>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b22:	4b09      	ldr	r3, [pc, #36]	@ (8000b48 <MX_I2C1_Init+0x50>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b28:	4b07      	ldr	r3, [pc, #28]	@ (8000b48 <MX_I2C1_Init+0x50>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b2e:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <MX_I2C1_Init+0x50>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b34:	4804      	ldr	r0, [pc, #16]	@ (8000b48 <MX_I2C1_Init+0x50>)
 8000b36:	f000 fce3 	bl	8001500 <HAL_I2C_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b40:	f000 f8c0 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000040 	.word	0x20000040
 8000b4c:	40005400 	.word	0x40005400
 8000b50:	000186a0 	.word	0x000186a0

08000b54 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b58:	4b17      	ldr	r3, [pc, #92]	@ (8000bb8 <MX_SPI1_Init+0x64>)
 8000b5a:	4a18      	ldr	r2, [pc, #96]	@ (8000bbc <MX_SPI1_Init+0x68>)
 8000b5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b5e:	4b16      	ldr	r3, [pc, #88]	@ (8000bb8 <MX_SPI1_Init+0x64>)
 8000b60:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b66:	4b14      	ldr	r3, [pc, #80]	@ (8000bb8 <MX_SPI1_Init+0x64>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b6c:	4b12      	ldr	r3, [pc, #72]	@ (8000bb8 <MX_SPI1_Init+0x64>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b72:	4b11      	ldr	r3, [pc, #68]	@ (8000bb8 <MX_SPI1_Init+0x64>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b78:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb8 <MX_SPI1_Init+0x64>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb8 <MX_SPI1_Init+0x64>)
 8000b80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b84:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000b86:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb8 <MX_SPI1_Init+0x64>)
 8000b88:	2210      	movs	r2, #16
 8000b8a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb8 <MX_SPI1_Init+0x64>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b92:	4b09      	ldr	r3, [pc, #36]	@ (8000bb8 <MX_SPI1_Init+0x64>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b98:	4b07      	ldr	r3, [pc, #28]	@ (8000bb8 <MX_SPI1_Init+0x64>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b9e:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <MX_SPI1_Init+0x64>)
 8000ba0:	220a      	movs	r2, #10
 8000ba2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ba4:	4804      	ldr	r0, [pc, #16]	@ (8000bb8 <MX_SPI1_Init+0x64>)
 8000ba6:	f001 fd43 	bl	8002630 <HAL_SPI_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000bb0:	f000 f888 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000094 	.word	0x20000094
 8000bbc:	40013000 	.word	0x40013000

08000bc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b088      	sub	sp, #32
 8000bc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc6:	f107 0310 	add.w	r3, r7, #16
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd4:	4b37      	ldr	r3, [pc, #220]	@ (8000cb4 <MX_GPIO_Init+0xf4>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	4a36      	ldr	r2, [pc, #216]	@ (8000cb4 <MX_GPIO_Init+0xf4>)
 8000bda:	f043 0310 	orr.w	r3, r3, #16
 8000bde:	6193      	str	r3, [r2, #24]
 8000be0:	4b34      	ldr	r3, [pc, #208]	@ (8000cb4 <MX_GPIO_Init+0xf4>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	f003 0310 	and.w	r3, r3, #16
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bec:	4b31      	ldr	r3, [pc, #196]	@ (8000cb4 <MX_GPIO_Init+0xf4>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	4a30      	ldr	r2, [pc, #192]	@ (8000cb4 <MX_GPIO_Init+0xf4>)
 8000bf2:	f043 0320 	orr.w	r3, r3, #32
 8000bf6:	6193      	str	r3, [r2, #24]
 8000bf8:	4b2e      	ldr	r3, [pc, #184]	@ (8000cb4 <MX_GPIO_Init+0xf4>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	f003 0320 	and.w	r3, r3, #32
 8000c00:	60bb      	str	r3, [r7, #8]
 8000c02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c04:	4b2b      	ldr	r3, [pc, #172]	@ (8000cb4 <MX_GPIO_Init+0xf4>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	4a2a      	ldr	r2, [pc, #168]	@ (8000cb4 <MX_GPIO_Init+0xf4>)
 8000c0a:	f043 0304 	orr.w	r3, r3, #4
 8000c0e:	6193      	str	r3, [r2, #24]
 8000c10:	4b28      	ldr	r3, [pc, #160]	@ (8000cb4 <MX_GPIO_Init+0xf4>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	f003 0304 	and.w	r3, r3, #4
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1c:	4b25      	ldr	r3, [pc, #148]	@ (8000cb4 <MX_GPIO_Init+0xf4>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	4a24      	ldr	r2, [pc, #144]	@ (8000cb4 <MX_GPIO_Init+0xf4>)
 8000c22:	f043 0308 	orr.w	r3, r3, #8
 8000c26:	6193      	str	r3, [r2, #24]
 8000c28:	4b22      	ldr	r3, [pc, #136]	@ (8000cb4 <MX_GPIO_Init+0xf4>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	f003 0308 	and.w	r3, r3, #8
 8000c30:	603b      	str	r3, [r7, #0]
 8000c32:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c3a:	481f      	ldr	r0, [pc, #124]	@ (8000cb8 <MX_GPIO_Init+0xf8>)
 8000c3c:	f000 fc48 	bl	80014d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000c40:	2200      	movs	r2, #0
 8000c42:	2110      	movs	r1, #16
 8000c44:	481d      	ldr	r0, [pc, #116]	@ (8000cbc <MX_GPIO_Init+0xfc>)
 8000c46:	f000 fc43 	bl	80014d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	481c      	ldr	r0, [pc, #112]	@ (8000cc0 <MX_GPIO_Init+0x100>)
 8000c50:	f000 fc3e 	bl	80014d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2302      	movs	r3, #2
 8000c64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c66:	f107 0310 	add.w	r3, r7, #16
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4812      	ldr	r0, [pc, #72]	@ (8000cb8 <MX_GPIO_Init+0xf8>)
 8000c6e:	f000 faab 	bl	80011c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c72:	2310      	movs	r3, #16
 8000c74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c76:	2301      	movs	r3, #1
 8000c78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c82:	f107 0310 	add.w	r3, r7, #16
 8000c86:	4619      	mov	r1, r3
 8000c88:	480c      	ldr	r0, [pc, #48]	@ (8000cbc <MX_GPIO_Init+0xfc>)
 8000c8a:	f000 fa9d 	bl	80011c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c92:	2301      	movs	r3, #1
 8000c94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9e:	f107 0310 	add.w	r3, r7, #16
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4806      	ldr	r0, [pc, #24]	@ (8000cc0 <MX_GPIO_Init+0x100>)
 8000ca6:	f000 fa8f 	bl	80011c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000caa:	bf00      	nop
 8000cac:	3720      	adds	r7, #32
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40021000 	.word	0x40021000
 8000cb8:	40011000 	.word	0x40011000
 8000cbc:	40010800 	.word	0x40010800
 8000cc0:	40010c00 	.word	0x40010c00

08000cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc8:	b672      	cpsid	i
}
 8000cca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ccc:	bf00      	nop
 8000cce:	e7fd      	b.n	8000ccc <Error_Handler+0x8>

08000cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cd6:	4b15      	ldr	r3, [pc, #84]	@ (8000d2c <HAL_MspInit+0x5c>)
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	4a14      	ldr	r2, [pc, #80]	@ (8000d2c <HAL_MspInit+0x5c>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	6193      	str	r3, [r2, #24]
 8000ce2:	4b12      	ldr	r3, [pc, #72]	@ (8000d2c <HAL_MspInit+0x5c>)
 8000ce4:	699b      	ldr	r3, [r3, #24]
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cee:	4b0f      	ldr	r3, [pc, #60]	@ (8000d2c <HAL_MspInit+0x5c>)
 8000cf0:	69db      	ldr	r3, [r3, #28]
 8000cf2:	4a0e      	ldr	r2, [pc, #56]	@ (8000d2c <HAL_MspInit+0x5c>)
 8000cf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cf8:	61d3      	str	r3, [r2, #28]
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <HAL_MspInit+0x5c>)
 8000cfc:	69db      	ldr	r3, [r3, #28]
 8000cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d06:	4b0a      	ldr	r3, [pc, #40]	@ (8000d30 <HAL_MspInit+0x60>)
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	4a04      	ldr	r2, [pc, #16]	@ (8000d30 <HAL_MspInit+0x60>)
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d22:	bf00      	nop
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	40010000 	.word	0x40010000

08000d34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b088      	sub	sp, #32
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 0310 	add.w	r3, r7, #16
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a15      	ldr	r2, [pc, #84]	@ (8000da4 <HAL_I2C_MspInit+0x70>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d123      	bne.n	8000d9c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d54:	4b14      	ldr	r3, [pc, #80]	@ (8000da8 <HAL_I2C_MspInit+0x74>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	4a13      	ldr	r2, [pc, #76]	@ (8000da8 <HAL_I2C_MspInit+0x74>)
 8000d5a:	f043 0308 	orr.w	r3, r3, #8
 8000d5e:	6193      	str	r3, [r2, #24]
 8000d60:	4b11      	ldr	r3, [pc, #68]	@ (8000da8 <HAL_I2C_MspInit+0x74>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	f003 0308 	and.w	r3, r3, #8
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d6c:	23c0      	movs	r3, #192	@ 0xc0
 8000d6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d70:	2312      	movs	r3, #18
 8000d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d74:	2303      	movs	r3, #3
 8000d76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d78:	f107 0310 	add.w	r3, r7, #16
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	480b      	ldr	r0, [pc, #44]	@ (8000dac <HAL_I2C_MspInit+0x78>)
 8000d80:	f000 fa22 	bl	80011c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d84:	4b08      	ldr	r3, [pc, #32]	@ (8000da8 <HAL_I2C_MspInit+0x74>)
 8000d86:	69db      	ldr	r3, [r3, #28]
 8000d88:	4a07      	ldr	r2, [pc, #28]	@ (8000da8 <HAL_I2C_MspInit+0x74>)
 8000d8a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d8e:	61d3      	str	r3, [r2, #28]
 8000d90:	4b05      	ldr	r3, [pc, #20]	@ (8000da8 <HAL_I2C_MspInit+0x74>)
 8000d92:	69db      	ldr	r3, [r3, #28]
 8000d94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d98:	60bb      	str	r3, [r7, #8]
 8000d9a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d9c:	bf00      	nop
 8000d9e:	3720      	adds	r7, #32
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40005400 	.word	0x40005400
 8000da8:	40021000 	.word	0x40021000
 8000dac:	40010c00 	.word	0x40010c00

08000db0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b088      	sub	sp, #32
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 0310 	add.w	r3, r7, #16
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a1b      	ldr	r2, [pc, #108]	@ (8000e38 <HAL_SPI_MspInit+0x88>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d12f      	bne.n	8000e30 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e3c <HAL_SPI_MspInit+0x8c>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	4a19      	ldr	r2, [pc, #100]	@ (8000e3c <HAL_SPI_MspInit+0x8c>)
 8000dd6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000dda:	6193      	str	r3, [r2, #24]
 8000ddc:	4b17      	ldr	r3, [pc, #92]	@ (8000e3c <HAL_SPI_MspInit+0x8c>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de8:	4b14      	ldr	r3, [pc, #80]	@ (8000e3c <HAL_SPI_MspInit+0x8c>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	4a13      	ldr	r2, [pc, #76]	@ (8000e3c <HAL_SPI_MspInit+0x8c>)
 8000dee:	f043 0304 	orr.w	r3, r3, #4
 8000df2:	6193      	str	r3, [r2, #24]
 8000df4:	4b11      	ldr	r3, [pc, #68]	@ (8000e3c <HAL_SPI_MspInit+0x8c>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	f003 0304 	and.w	r3, r3, #4
 8000dfc:	60bb      	str	r3, [r7, #8]
 8000dfe:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000e00:	23a0      	movs	r3, #160	@ 0xa0
 8000e02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e04:	2302      	movs	r3, #2
 8000e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0c:	f107 0310 	add.w	r3, r7, #16
 8000e10:	4619      	mov	r1, r3
 8000e12:	480b      	ldr	r0, [pc, #44]	@ (8000e40 <HAL_SPI_MspInit+0x90>)
 8000e14:	f000 f9d8 	bl	80011c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e18:	2340      	movs	r3, #64	@ 0x40
 8000e1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e24:	f107 0310 	add.w	r3, r7, #16
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4805      	ldr	r0, [pc, #20]	@ (8000e40 <HAL_SPI_MspInit+0x90>)
 8000e2c:	f000 f9cc 	bl	80011c8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000e30:	bf00      	nop
 8000e32:	3720      	adds	r7, #32
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40013000 	.word	0x40013000
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40010800 	.word	0x40010800

08000e44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e48:	bf00      	nop
 8000e4a:	e7fd      	b.n	8000e48 <NMI_Handler+0x4>

08000e4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e50:	bf00      	nop
 8000e52:	e7fd      	b.n	8000e50 <HardFault_Handler+0x4>

08000e54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e58:	bf00      	nop
 8000e5a:	e7fd      	b.n	8000e58 <MemManage_Handler+0x4>

08000e5c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e60:	bf00      	nop
 8000e62:	e7fd      	b.n	8000e60 <BusFault_Handler+0x4>

08000e64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e68:	bf00      	nop
 8000e6a:	e7fd      	b.n	8000e68 <UsageFault_Handler+0x4>

08000e6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr

08000e78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr

08000e84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr

08000e90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e94:	f000 f874 	bl	8000f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr

08000ea8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ea8:	f7ff fff8 	bl	8000e9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eac:	480b      	ldr	r0, [pc, #44]	@ (8000edc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000eae:	490c      	ldr	r1, [pc, #48]	@ (8000ee0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000eb0:	4a0c      	ldr	r2, [pc, #48]	@ (8000ee4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb4:	e002      	b.n	8000ebc <LoopCopyDataInit>

08000eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eba:	3304      	adds	r3, #4

08000ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec0:	d3f9      	bcc.n	8000eb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ec2:	4a09      	ldr	r2, [pc, #36]	@ (8000ee8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ec4:	4c09      	ldr	r4, [pc, #36]	@ (8000eec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec8:	e001      	b.n	8000ece <LoopFillZerobss>

08000eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ecc:	3204      	adds	r2, #4

08000ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed0:	d3fb      	bcc.n	8000eca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ed2:	f001 fe9d 	bl	8002c10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ed6:	f7ff fd3b 	bl	8000950 <main>
  bx lr
 8000eda:	4770      	bx	lr
  ldr r0, =_sdata
 8000edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000ee4:	08002cc4 	.word	0x08002cc4
  ldr r2, =_sbss
 8000ee8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000eec:	2000010c 	.word	0x2000010c

08000ef0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ef0:	e7fe      	b.n	8000ef0 <ADC1_2_IRQHandler>
	...

08000ef4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef8:	4b08      	ldr	r3, [pc, #32]	@ (8000f1c <HAL_Init+0x28>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a07      	ldr	r2, [pc, #28]	@ (8000f1c <HAL_Init+0x28>)
 8000efe:	f043 0310 	orr.w	r3, r3, #16
 8000f02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f04:	2003      	movs	r0, #3
 8000f06:	f000 f92b 	bl	8001160 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f0a:	200f      	movs	r0, #15
 8000f0c:	f000 f808 	bl	8000f20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f10:	f7ff fede 	bl	8000cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40022000 	.word	0x40022000

08000f20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f28:	4b12      	ldr	r3, [pc, #72]	@ (8000f74 <HAL_InitTick+0x54>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b12      	ldr	r3, [pc, #72]	@ (8000f78 <HAL_InitTick+0x58>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	4619      	mov	r1, r3
 8000f32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 f935 	bl	80011ae <HAL_SYSTICK_Config>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e00e      	b.n	8000f6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b0f      	cmp	r3, #15
 8000f52:	d80a      	bhi.n	8000f6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f54:	2200      	movs	r2, #0
 8000f56:	6879      	ldr	r1, [r7, #4]
 8000f58:	f04f 30ff 	mov.w	r0, #4294967295
 8000f5c:	f000 f90b 	bl	8001176 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f60:	4a06      	ldr	r2, [pc, #24]	@ (8000f7c <HAL_InitTick+0x5c>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f66:	2300      	movs	r3, #0
 8000f68:	e000      	b.n	8000f6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000010 	.word	0x20000010
 8000f78:	20000018 	.word	0x20000018
 8000f7c:	20000014 	.word	0x20000014

08000f80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f84:	4b05      	ldr	r3, [pc, #20]	@ (8000f9c <HAL_IncTick+0x1c>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4b05      	ldr	r3, [pc, #20]	@ (8000fa0 <HAL_IncTick+0x20>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4413      	add	r3, r2
 8000f90:	4a03      	ldr	r2, [pc, #12]	@ (8000fa0 <HAL_IncTick+0x20>)
 8000f92:	6013      	str	r3, [r2, #0]
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr
 8000f9c:	20000018 	.word	0x20000018
 8000fa0:	20000108 	.word	0x20000108

08000fa4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa8:	4b02      	ldr	r3, [pc, #8]	@ (8000fb4 <HAL_GetTick+0x10>)
 8000faa:	681b      	ldr	r3, [r3, #0]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr
 8000fb4:	20000108 	.word	0x20000108

08000fb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fc0:	f7ff fff0 	bl	8000fa4 <HAL_GetTick>
 8000fc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fd0:	d005      	beq.n	8000fde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ffc <HAL_Delay+0x44>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4413      	add	r3, r2
 8000fdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fde:	bf00      	nop
 8000fe0:	f7ff ffe0 	bl	8000fa4 <HAL_GetTick>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d8f7      	bhi.n	8000fe0 <HAL_Delay+0x28>
  {
  }
}
 8000ff0:	bf00      	nop
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000018 	.word	0x20000018

08001000 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001010:	4b0c      	ldr	r3, [pc, #48]	@ (8001044 <__NVIC_SetPriorityGrouping+0x44>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800101c:	4013      	ands	r3, r2
 800101e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001028:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800102c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001030:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001032:	4a04      	ldr	r2, [pc, #16]	@ (8001044 <__NVIC_SetPriorityGrouping+0x44>)
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	60d3      	str	r3, [r2, #12]
}
 8001038:	bf00      	nop
 800103a:	3714      	adds	r7, #20
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800104c:	4b04      	ldr	r3, [pc, #16]	@ (8001060 <__NVIC_GetPriorityGrouping+0x18>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	0a1b      	lsrs	r3, r3, #8
 8001052:	f003 0307 	and.w	r3, r3, #7
}
 8001056:	4618      	mov	r0, r3
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	6039      	str	r1, [r7, #0]
 800106e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001074:	2b00      	cmp	r3, #0
 8001076:	db0a      	blt.n	800108e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	b2da      	uxtb	r2, r3
 800107c:	490c      	ldr	r1, [pc, #48]	@ (80010b0 <__NVIC_SetPriority+0x4c>)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	0112      	lsls	r2, r2, #4
 8001084:	b2d2      	uxtb	r2, r2
 8001086:	440b      	add	r3, r1
 8001088:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800108c:	e00a      	b.n	80010a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	b2da      	uxtb	r2, r3
 8001092:	4908      	ldr	r1, [pc, #32]	@ (80010b4 <__NVIC_SetPriority+0x50>)
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	f003 030f 	and.w	r3, r3, #15
 800109a:	3b04      	subs	r3, #4
 800109c:	0112      	lsls	r2, r2, #4
 800109e:	b2d2      	uxtb	r2, r2
 80010a0:	440b      	add	r3, r1
 80010a2:	761a      	strb	r2, [r3, #24]
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000e100 	.word	0xe000e100
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b089      	sub	sp, #36	@ 0x24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f1c3 0307 	rsb	r3, r3, #7
 80010d2:	2b04      	cmp	r3, #4
 80010d4:	bf28      	it	cs
 80010d6:	2304      	movcs	r3, #4
 80010d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	3304      	adds	r3, #4
 80010de:	2b06      	cmp	r3, #6
 80010e0:	d902      	bls.n	80010e8 <NVIC_EncodePriority+0x30>
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3b03      	subs	r3, #3
 80010e6:	e000      	b.n	80010ea <NVIC_EncodePriority+0x32>
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	f04f 32ff 	mov.w	r2, #4294967295
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43da      	mvns	r2, r3
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	401a      	ands	r2, r3
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001100:	f04f 31ff 	mov.w	r1, #4294967295
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	fa01 f303 	lsl.w	r3, r1, r3
 800110a:	43d9      	mvns	r1, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001110:	4313      	orrs	r3, r2
         );
}
 8001112:	4618      	mov	r0, r3
 8001114:	3724      	adds	r7, #36	@ 0x24
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr

0800111c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3b01      	subs	r3, #1
 8001128:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800112c:	d301      	bcc.n	8001132 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800112e:	2301      	movs	r3, #1
 8001130:	e00f      	b.n	8001152 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001132:	4a0a      	ldr	r2, [pc, #40]	@ (800115c <SysTick_Config+0x40>)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3b01      	subs	r3, #1
 8001138:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800113a:	210f      	movs	r1, #15
 800113c:	f04f 30ff 	mov.w	r0, #4294967295
 8001140:	f7ff ff90 	bl	8001064 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001144:	4b05      	ldr	r3, [pc, #20]	@ (800115c <SysTick_Config+0x40>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800114a:	4b04      	ldr	r3, [pc, #16]	@ (800115c <SysTick_Config+0x40>)
 800114c:	2207      	movs	r2, #7
 800114e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	e000e010 	.word	0xe000e010

08001160 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ff49 	bl	8001000 <__NVIC_SetPriorityGrouping>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001176:	b580      	push	{r7, lr}
 8001178:	b086      	sub	sp, #24
 800117a:	af00      	add	r7, sp, #0
 800117c:	4603      	mov	r3, r0
 800117e:	60b9      	str	r1, [r7, #8]
 8001180:	607a      	str	r2, [r7, #4]
 8001182:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001188:	f7ff ff5e 	bl	8001048 <__NVIC_GetPriorityGrouping>
 800118c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	68b9      	ldr	r1, [r7, #8]
 8001192:	6978      	ldr	r0, [r7, #20]
 8001194:	f7ff ff90 	bl	80010b8 <NVIC_EncodePriority>
 8001198:	4602      	mov	r2, r0
 800119a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119e:	4611      	mov	r1, r2
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ff5f 	bl	8001064 <__NVIC_SetPriority>
}
 80011a6:	bf00      	nop
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff ffb0 	bl	800111c <SysTick_Config>
 80011bc:	4603      	mov	r3, r0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
	...

080011c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b08b      	sub	sp, #44	@ 0x2c
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011d2:	2300      	movs	r3, #0
 80011d4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011d6:	2300      	movs	r3, #0
 80011d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011da:	e169      	b.n	80014b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011dc:	2201      	movs	r2, #1
 80011de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	69fa      	ldr	r2, [r7, #28]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	f040 8158 	bne.w	80014aa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	4a9a      	ldr	r2, [pc, #616]	@ (8001468 <HAL_GPIO_Init+0x2a0>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d05e      	beq.n	80012c2 <HAL_GPIO_Init+0xfa>
 8001204:	4a98      	ldr	r2, [pc, #608]	@ (8001468 <HAL_GPIO_Init+0x2a0>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d875      	bhi.n	80012f6 <HAL_GPIO_Init+0x12e>
 800120a:	4a98      	ldr	r2, [pc, #608]	@ (800146c <HAL_GPIO_Init+0x2a4>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d058      	beq.n	80012c2 <HAL_GPIO_Init+0xfa>
 8001210:	4a96      	ldr	r2, [pc, #600]	@ (800146c <HAL_GPIO_Init+0x2a4>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d86f      	bhi.n	80012f6 <HAL_GPIO_Init+0x12e>
 8001216:	4a96      	ldr	r2, [pc, #600]	@ (8001470 <HAL_GPIO_Init+0x2a8>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d052      	beq.n	80012c2 <HAL_GPIO_Init+0xfa>
 800121c:	4a94      	ldr	r2, [pc, #592]	@ (8001470 <HAL_GPIO_Init+0x2a8>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d869      	bhi.n	80012f6 <HAL_GPIO_Init+0x12e>
 8001222:	4a94      	ldr	r2, [pc, #592]	@ (8001474 <HAL_GPIO_Init+0x2ac>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d04c      	beq.n	80012c2 <HAL_GPIO_Init+0xfa>
 8001228:	4a92      	ldr	r2, [pc, #584]	@ (8001474 <HAL_GPIO_Init+0x2ac>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d863      	bhi.n	80012f6 <HAL_GPIO_Init+0x12e>
 800122e:	4a92      	ldr	r2, [pc, #584]	@ (8001478 <HAL_GPIO_Init+0x2b0>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d046      	beq.n	80012c2 <HAL_GPIO_Init+0xfa>
 8001234:	4a90      	ldr	r2, [pc, #576]	@ (8001478 <HAL_GPIO_Init+0x2b0>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d85d      	bhi.n	80012f6 <HAL_GPIO_Init+0x12e>
 800123a:	2b12      	cmp	r3, #18
 800123c:	d82a      	bhi.n	8001294 <HAL_GPIO_Init+0xcc>
 800123e:	2b12      	cmp	r3, #18
 8001240:	d859      	bhi.n	80012f6 <HAL_GPIO_Init+0x12e>
 8001242:	a201      	add	r2, pc, #4	@ (adr r2, 8001248 <HAL_GPIO_Init+0x80>)
 8001244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001248:	080012c3 	.word	0x080012c3
 800124c:	0800129d 	.word	0x0800129d
 8001250:	080012af 	.word	0x080012af
 8001254:	080012f1 	.word	0x080012f1
 8001258:	080012f7 	.word	0x080012f7
 800125c:	080012f7 	.word	0x080012f7
 8001260:	080012f7 	.word	0x080012f7
 8001264:	080012f7 	.word	0x080012f7
 8001268:	080012f7 	.word	0x080012f7
 800126c:	080012f7 	.word	0x080012f7
 8001270:	080012f7 	.word	0x080012f7
 8001274:	080012f7 	.word	0x080012f7
 8001278:	080012f7 	.word	0x080012f7
 800127c:	080012f7 	.word	0x080012f7
 8001280:	080012f7 	.word	0x080012f7
 8001284:	080012f7 	.word	0x080012f7
 8001288:	080012f7 	.word	0x080012f7
 800128c:	080012a5 	.word	0x080012a5
 8001290:	080012b9 	.word	0x080012b9
 8001294:	4a79      	ldr	r2, [pc, #484]	@ (800147c <HAL_GPIO_Init+0x2b4>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d013      	beq.n	80012c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800129a:	e02c      	b.n	80012f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	623b      	str	r3, [r7, #32]
          break;
 80012a2:	e029      	b.n	80012f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	3304      	adds	r3, #4
 80012aa:	623b      	str	r3, [r7, #32]
          break;
 80012ac:	e024      	b.n	80012f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	3308      	adds	r3, #8
 80012b4:	623b      	str	r3, [r7, #32]
          break;
 80012b6:	e01f      	b.n	80012f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	330c      	adds	r3, #12
 80012be:	623b      	str	r3, [r7, #32]
          break;
 80012c0:	e01a      	b.n	80012f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d102      	bne.n	80012d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012ca:	2304      	movs	r3, #4
 80012cc:	623b      	str	r3, [r7, #32]
          break;
 80012ce:	e013      	b.n	80012f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d105      	bne.n	80012e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012d8:	2308      	movs	r3, #8
 80012da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	69fa      	ldr	r2, [r7, #28]
 80012e0:	611a      	str	r2, [r3, #16]
          break;
 80012e2:	e009      	b.n	80012f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012e4:	2308      	movs	r3, #8
 80012e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	69fa      	ldr	r2, [r7, #28]
 80012ec:	615a      	str	r2, [r3, #20]
          break;
 80012ee:	e003      	b.n	80012f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012f0:	2300      	movs	r3, #0
 80012f2:	623b      	str	r3, [r7, #32]
          break;
 80012f4:	e000      	b.n	80012f8 <HAL_GPIO_Init+0x130>
          break;
 80012f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	2bff      	cmp	r3, #255	@ 0xff
 80012fc:	d801      	bhi.n	8001302 <HAL_GPIO_Init+0x13a>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	e001      	b.n	8001306 <HAL_GPIO_Init+0x13e>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	3304      	adds	r3, #4
 8001306:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	2bff      	cmp	r3, #255	@ 0xff
 800130c:	d802      	bhi.n	8001314 <HAL_GPIO_Init+0x14c>
 800130e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	e002      	b.n	800131a <HAL_GPIO_Init+0x152>
 8001314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001316:	3b08      	subs	r3, #8
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	210f      	movs	r1, #15
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	fa01 f303 	lsl.w	r3, r1, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	401a      	ands	r2, r3
 800132c:	6a39      	ldr	r1, [r7, #32]
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	fa01 f303 	lsl.w	r3, r1, r3
 8001334:	431a      	orrs	r2, r3
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001342:	2b00      	cmp	r3, #0
 8001344:	f000 80b1 	beq.w	80014aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001348:	4b4d      	ldr	r3, [pc, #308]	@ (8001480 <HAL_GPIO_Init+0x2b8>)
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	4a4c      	ldr	r2, [pc, #304]	@ (8001480 <HAL_GPIO_Init+0x2b8>)
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	6193      	str	r3, [r2, #24]
 8001354:	4b4a      	ldr	r3, [pc, #296]	@ (8001480 <HAL_GPIO_Init+0x2b8>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	60bb      	str	r3, [r7, #8]
 800135e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001360:	4a48      	ldr	r2, [pc, #288]	@ (8001484 <HAL_GPIO_Init+0x2bc>)
 8001362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001364:	089b      	lsrs	r3, r3, #2
 8001366:	3302      	adds	r3, #2
 8001368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800136c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800136e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001370:	f003 0303 	and.w	r3, r3, #3
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	220f      	movs	r2, #15
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	4013      	ands	r3, r2
 8001382:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4a40      	ldr	r2, [pc, #256]	@ (8001488 <HAL_GPIO_Init+0x2c0>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d013      	beq.n	80013b4 <HAL_GPIO_Init+0x1ec>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4a3f      	ldr	r2, [pc, #252]	@ (800148c <HAL_GPIO_Init+0x2c4>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d00d      	beq.n	80013b0 <HAL_GPIO_Init+0x1e8>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4a3e      	ldr	r2, [pc, #248]	@ (8001490 <HAL_GPIO_Init+0x2c8>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d007      	beq.n	80013ac <HAL_GPIO_Init+0x1e4>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4a3d      	ldr	r2, [pc, #244]	@ (8001494 <HAL_GPIO_Init+0x2cc>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d101      	bne.n	80013a8 <HAL_GPIO_Init+0x1e0>
 80013a4:	2303      	movs	r3, #3
 80013a6:	e006      	b.n	80013b6 <HAL_GPIO_Init+0x1ee>
 80013a8:	2304      	movs	r3, #4
 80013aa:	e004      	b.n	80013b6 <HAL_GPIO_Init+0x1ee>
 80013ac:	2302      	movs	r3, #2
 80013ae:	e002      	b.n	80013b6 <HAL_GPIO_Init+0x1ee>
 80013b0:	2301      	movs	r3, #1
 80013b2:	e000      	b.n	80013b6 <HAL_GPIO_Init+0x1ee>
 80013b4:	2300      	movs	r3, #0
 80013b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013b8:	f002 0203 	and.w	r2, r2, #3
 80013bc:	0092      	lsls	r2, r2, #2
 80013be:	4093      	lsls	r3, r2
 80013c0:	68fa      	ldr	r2, [r7, #12]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013c6:	492f      	ldr	r1, [pc, #188]	@ (8001484 <HAL_GPIO_Init+0x2bc>)
 80013c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ca:	089b      	lsrs	r3, r3, #2
 80013cc:	3302      	adds	r3, #2
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d006      	beq.n	80013ee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001498 <HAL_GPIO_Init+0x2d0>)
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	492c      	ldr	r1, [pc, #176]	@ (8001498 <HAL_GPIO_Init+0x2d0>)
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	608b      	str	r3, [r1, #8]
 80013ec:	e006      	b.n	80013fc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001498 <HAL_GPIO_Init+0x2d0>)
 80013f0:	689a      	ldr	r2, [r3, #8]
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	43db      	mvns	r3, r3
 80013f6:	4928      	ldr	r1, [pc, #160]	@ (8001498 <HAL_GPIO_Init+0x2d0>)
 80013f8:	4013      	ands	r3, r2
 80013fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d006      	beq.n	8001416 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001408:	4b23      	ldr	r3, [pc, #140]	@ (8001498 <HAL_GPIO_Init+0x2d0>)
 800140a:	68da      	ldr	r2, [r3, #12]
 800140c:	4922      	ldr	r1, [pc, #136]	@ (8001498 <HAL_GPIO_Init+0x2d0>)
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	4313      	orrs	r3, r2
 8001412:	60cb      	str	r3, [r1, #12]
 8001414:	e006      	b.n	8001424 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001416:	4b20      	ldr	r3, [pc, #128]	@ (8001498 <HAL_GPIO_Init+0x2d0>)
 8001418:	68da      	ldr	r2, [r3, #12]
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	43db      	mvns	r3, r3
 800141e:	491e      	ldr	r1, [pc, #120]	@ (8001498 <HAL_GPIO_Init+0x2d0>)
 8001420:	4013      	ands	r3, r2
 8001422:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d006      	beq.n	800143e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001430:	4b19      	ldr	r3, [pc, #100]	@ (8001498 <HAL_GPIO_Init+0x2d0>)
 8001432:	685a      	ldr	r2, [r3, #4]
 8001434:	4918      	ldr	r1, [pc, #96]	@ (8001498 <HAL_GPIO_Init+0x2d0>)
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	4313      	orrs	r3, r2
 800143a:	604b      	str	r3, [r1, #4]
 800143c:	e006      	b.n	800144c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800143e:	4b16      	ldr	r3, [pc, #88]	@ (8001498 <HAL_GPIO_Init+0x2d0>)
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	43db      	mvns	r3, r3
 8001446:	4914      	ldr	r1, [pc, #80]	@ (8001498 <HAL_GPIO_Init+0x2d0>)
 8001448:	4013      	ands	r3, r2
 800144a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d021      	beq.n	800149c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001458:	4b0f      	ldr	r3, [pc, #60]	@ (8001498 <HAL_GPIO_Init+0x2d0>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	490e      	ldr	r1, [pc, #56]	@ (8001498 <HAL_GPIO_Init+0x2d0>)
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	4313      	orrs	r3, r2
 8001462:	600b      	str	r3, [r1, #0]
 8001464:	e021      	b.n	80014aa <HAL_GPIO_Init+0x2e2>
 8001466:	bf00      	nop
 8001468:	10320000 	.word	0x10320000
 800146c:	10310000 	.word	0x10310000
 8001470:	10220000 	.word	0x10220000
 8001474:	10210000 	.word	0x10210000
 8001478:	10120000 	.word	0x10120000
 800147c:	10110000 	.word	0x10110000
 8001480:	40021000 	.word	0x40021000
 8001484:	40010000 	.word	0x40010000
 8001488:	40010800 	.word	0x40010800
 800148c:	40010c00 	.word	0x40010c00
 8001490:	40011000 	.word	0x40011000
 8001494:	40011400 	.word	0x40011400
 8001498:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800149c:	4b0b      	ldr	r3, [pc, #44]	@ (80014cc <HAL_GPIO_Init+0x304>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	43db      	mvns	r3, r3
 80014a4:	4909      	ldr	r1, [pc, #36]	@ (80014cc <HAL_GPIO_Init+0x304>)
 80014a6:	4013      	ands	r3, r2
 80014a8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80014aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ac:	3301      	adds	r3, #1
 80014ae:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b6:	fa22 f303 	lsr.w	r3, r2, r3
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f47f ae8e 	bne.w	80011dc <HAL_GPIO_Init+0x14>
  }
}
 80014c0:	bf00      	nop
 80014c2:	bf00      	nop
 80014c4:	372c      	adds	r7, #44	@ 0x2c
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr
 80014cc:	40010400 	.word	0x40010400

080014d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	460b      	mov	r3, r1
 80014da:	807b      	strh	r3, [r7, #2]
 80014dc:	4613      	mov	r3, r2
 80014de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014e0:	787b      	ldrb	r3, [r7, #1]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014e6:	887a      	ldrh	r2, [r7, #2]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014ec:	e003      	b.n	80014f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014ee:	887b      	ldrh	r3, [r7, #2]
 80014f0:	041a      	lsls	r2, r3, #16
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	611a      	str	r2, [r3, #16]
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr

08001500 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e12b      	b.n	800176a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d106      	bne.n	800152c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f7ff fc04 	bl	8000d34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2224      	movs	r2, #36	@ 0x24
 8001530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f022 0201 	bic.w	r2, r2, #1
 8001542:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001552:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001562:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001564:	f001 f832 	bl	80025cc <HAL_RCC_GetPCLK1Freq>
 8001568:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	4a81      	ldr	r2, [pc, #516]	@ (8001774 <HAL_I2C_Init+0x274>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d807      	bhi.n	8001584 <HAL_I2C_Init+0x84>
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4a80      	ldr	r2, [pc, #512]	@ (8001778 <HAL_I2C_Init+0x278>)
 8001578:	4293      	cmp	r3, r2
 800157a:	bf94      	ite	ls
 800157c:	2301      	movls	r3, #1
 800157e:	2300      	movhi	r3, #0
 8001580:	b2db      	uxtb	r3, r3
 8001582:	e006      	b.n	8001592 <HAL_I2C_Init+0x92>
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	4a7d      	ldr	r2, [pc, #500]	@ (800177c <HAL_I2C_Init+0x27c>)
 8001588:	4293      	cmp	r3, r2
 800158a:	bf94      	ite	ls
 800158c:	2301      	movls	r3, #1
 800158e:	2300      	movhi	r3, #0
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e0e7      	b.n	800176a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	4a78      	ldr	r2, [pc, #480]	@ (8001780 <HAL_I2C_Init+0x280>)
 800159e:	fba2 2303 	umull	r2, r3, r2, r3
 80015a2:	0c9b      	lsrs	r3, r3, #18
 80015a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	68ba      	ldr	r2, [r7, #8]
 80015b6:	430a      	orrs	r2, r1
 80015b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	6a1b      	ldr	r3, [r3, #32]
 80015c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	4a6a      	ldr	r2, [pc, #424]	@ (8001774 <HAL_I2C_Init+0x274>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d802      	bhi.n	80015d4 <HAL_I2C_Init+0xd4>
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	3301      	adds	r3, #1
 80015d2:	e009      	b.n	80015e8 <HAL_I2C_Init+0xe8>
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80015da:	fb02 f303 	mul.w	r3, r2, r3
 80015de:	4a69      	ldr	r2, [pc, #420]	@ (8001784 <HAL_I2C_Init+0x284>)
 80015e0:	fba2 2303 	umull	r2, r3, r2, r3
 80015e4:	099b      	lsrs	r3, r3, #6
 80015e6:	3301      	adds	r3, #1
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	6812      	ldr	r2, [r2, #0]
 80015ec:	430b      	orrs	r3, r1
 80015ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80015fa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	495c      	ldr	r1, [pc, #368]	@ (8001774 <HAL_I2C_Init+0x274>)
 8001604:	428b      	cmp	r3, r1
 8001606:	d819      	bhi.n	800163c <HAL_I2C_Init+0x13c>
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	1e59      	subs	r1, r3, #1
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	fbb1 f3f3 	udiv	r3, r1, r3
 8001616:	1c59      	adds	r1, r3, #1
 8001618:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800161c:	400b      	ands	r3, r1
 800161e:	2b00      	cmp	r3, #0
 8001620:	d00a      	beq.n	8001638 <HAL_I2C_Init+0x138>
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	1e59      	subs	r1, r3, #1
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001630:	3301      	adds	r3, #1
 8001632:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001636:	e051      	b.n	80016dc <HAL_I2C_Init+0x1dc>
 8001638:	2304      	movs	r3, #4
 800163a:	e04f      	b.n	80016dc <HAL_I2C_Init+0x1dc>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d111      	bne.n	8001668 <HAL_I2C_Init+0x168>
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	1e58      	subs	r0, r3, #1
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6859      	ldr	r1, [r3, #4]
 800164c:	460b      	mov	r3, r1
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	440b      	add	r3, r1
 8001652:	fbb0 f3f3 	udiv	r3, r0, r3
 8001656:	3301      	adds	r3, #1
 8001658:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800165c:	2b00      	cmp	r3, #0
 800165e:	bf0c      	ite	eq
 8001660:	2301      	moveq	r3, #1
 8001662:	2300      	movne	r3, #0
 8001664:	b2db      	uxtb	r3, r3
 8001666:	e012      	b.n	800168e <HAL_I2C_Init+0x18e>
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	1e58      	subs	r0, r3, #1
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6859      	ldr	r1, [r3, #4]
 8001670:	460b      	mov	r3, r1
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	440b      	add	r3, r1
 8001676:	0099      	lsls	r1, r3, #2
 8001678:	440b      	add	r3, r1
 800167a:	fbb0 f3f3 	udiv	r3, r0, r3
 800167e:	3301      	adds	r3, #1
 8001680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001684:	2b00      	cmp	r3, #0
 8001686:	bf0c      	ite	eq
 8001688:	2301      	moveq	r3, #1
 800168a:	2300      	movne	r3, #0
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <HAL_I2C_Init+0x196>
 8001692:	2301      	movs	r3, #1
 8001694:	e022      	b.n	80016dc <HAL_I2C_Init+0x1dc>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d10e      	bne.n	80016bc <HAL_I2C_Init+0x1bc>
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	1e58      	subs	r0, r3, #1
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6859      	ldr	r1, [r3, #4]
 80016a6:	460b      	mov	r3, r1
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	440b      	add	r3, r1
 80016ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80016b0:	3301      	adds	r3, #1
 80016b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016ba:	e00f      	b.n	80016dc <HAL_I2C_Init+0x1dc>
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	1e58      	subs	r0, r3, #1
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6859      	ldr	r1, [r3, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	440b      	add	r3, r1
 80016ca:	0099      	lsls	r1, r3, #2
 80016cc:	440b      	add	r3, r1
 80016ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80016d2:	3301      	adds	r3, #1
 80016d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016dc:	6879      	ldr	r1, [r7, #4]
 80016de:	6809      	ldr	r1, [r1, #0]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	69da      	ldr	r2, [r3, #28]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	431a      	orrs	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	430a      	orrs	r2, r1
 80016fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800170a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	6911      	ldr	r1, [r2, #16]
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	68d2      	ldr	r2, [r2, #12]
 8001716:	4311      	orrs	r1, r2
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	6812      	ldr	r2, [r2, #0]
 800171c:	430b      	orrs	r3, r1
 800171e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	695a      	ldr	r2, [r3, #20]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	431a      	orrs	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	430a      	orrs	r2, r1
 800173a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f042 0201 	orr.w	r2, r2, #1
 800174a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2220      	movs	r2, #32
 8001756:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	000186a0 	.word	0x000186a0
 8001778:	001e847f 	.word	0x001e847f
 800177c:	003d08ff 	.word	0x003d08ff
 8001780:	431bde83 	.word	0x431bde83
 8001784:	10624dd3 	.word	0x10624dd3

08001788 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b088      	sub	sp, #32
 800178c:	af02      	add	r7, sp, #8
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	607a      	str	r2, [r7, #4]
 8001792:	461a      	mov	r2, r3
 8001794:	460b      	mov	r3, r1
 8001796:	817b      	strh	r3, [r7, #10]
 8001798:	4613      	mov	r3, r2
 800179a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800179c:	f7ff fc02 	bl	8000fa4 <HAL_GetTick>
 80017a0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b20      	cmp	r3, #32
 80017ac:	f040 80e0 	bne.w	8001970 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	2319      	movs	r3, #25
 80017b6:	2201      	movs	r2, #1
 80017b8:	4970      	ldr	r1, [pc, #448]	@ (800197c <HAL_I2C_Master_Transmit+0x1f4>)
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	f000 f964 	bl	8001a88 <I2C_WaitOnFlagUntilTimeout>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80017c6:	2302      	movs	r3, #2
 80017c8:	e0d3      	b.n	8001972 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d101      	bne.n	80017d8 <HAL_I2C_Master_Transmit+0x50>
 80017d4:	2302      	movs	r3, #2
 80017d6:	e0cc      	b.n	8001972 <HAL_I2C_Master_Transmit+0x1ea>
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2201      	movs	r2, #1
 80017dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d007      	beq.n	80017fe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f042 0201 	orr.w	r2, r2, #1
 80017fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800180c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2221      	movs	r2, #33	@ 0x21
 8001812:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2210      	movs	r2, #16
 800181a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2200      	movs	r2, #0
 8001822:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	893a      	ldrh	r2, [r7, #8]
 800182e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001834:	b29a      	uxth	r2, r3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	4a50      	ldr	r2, [pc, #320]	@ (8001980 <HAL_I2C_Master_Transmit+0x1f8>)
 800183e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001840:	8979      	ldrh	r1, [r7, #10]
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	6a3a      	ldr	r2, [r7, #32]
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	f000 f89c 	bl	8001984 <I2C_MasterRequestWrite>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e08d      	b.n	8001972 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	613b      	str	r3, [r7, #16]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	613b      	str	r3, [r7, #16]
 800186a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800186c:	e066      	b.n	800193c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800186e:	697a      	ldr	r2, [r7, #20]
 8001870:	6a39      	ldr	r1, [r7, #32]
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	f000 fa22 	bl	8001cbc <I2C_WaitOnTXEFlagUntilTimeout>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d00d      	beq.n	800189a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001882:	2b04      	cmp	r3, #4
 8001884:	d107      	bne.n	8001896 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001894:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e06b      	b.n	8001972 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800189e:	781a      	ldrb	r2, [r3, #0]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018aa:	1c5a      	adds	r2, r3, #1
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	3b01      	subs	r3, #1
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018c2:	3b01      	subs	r3, #1
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	695b      	ldr	r3, [r3, #20]
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	2b04      	cmp	r3, #4
 80018d6:	d11b      	bne.n	8001910 <HAL_I2C_Master_Transmit+0x188>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d017      	beq.n	8001910 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e4:	781a      	ldrb	r2, [r3, #0]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f0:	1c5a      	adds	r2, r3, #1
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	3b01      	subs	r3, #1
 80018fe:	b29a      	uxth	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001908:	3b01      	subs	r3, #1
 800190a:	b29a      	uxth	r2, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001910:	697a      	ldr	r2, [r7, #20]
 8001912:	6a39      	ldr	r1, [r7, #32]
 8001914:	68f8      	ldr	r0, [r7, #12]
 8001916:	f000 fa19 	bl	8001d4c <I2C_WaitOnBTFFlagUntilTimeout>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d00d      	beq.n	800193c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001924:	2b04      	cmp	r3, #4
 8001926:	d107      	bne.n	8001938 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001936:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e01a      	b.n	8001972 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001940:	2b00      	cmp	r3, #0
 8001942:	d194      	bne.n	800186e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001952:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2220      	movs	r2, #32
 8001958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2200      	movs	r2, #0
 8001960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800196c:	2300      	movs	r3, #0
 800196e:	e000      	b.n	8001972 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001970:	2302      	movs	r3, #2
  }
}
 8001972:	4618      	mov	r0, r3
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	00100002 	.word	0x00100002
 8001980:	ffff0000 	.word	0xffff0000

08001984 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b088      	sub	sp, #32
 8001988:	af02      	add	r7, sp, #8
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	607a      	str	r2, [r7, #4]
 800198e:	603b      	str	r3, [r7, #0]
 8001990:	460b      	mov	r3, r1
 8001992:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001998:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	2b08      	cmp	r3, #8
 800199e:	d006      	beq.n	80019ae <I2C_MasterRequestWrite+0x2a>
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d003      	beq.n	80019ae <I2C_MasterRequestWrite+0x2a>
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80019ac:	d108      	bne.n	80019c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	e00b      	b.n	80019d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c4:	2b12      	cmp	r3, #18
 80019c6:	d107      	bne.n	80019d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80019d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f000 f84f 	bl	8001a88 <I2C_WaitOnFlagUntilTimeout>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d00d      	beq.n	8001a0c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80019fe:	d103      	bne.n	8001a08 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a06:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e035      	b.n	8001a78 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001a14:	d108      	bne.n	8001a28 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a16:	897b      	ldrh	r3, [r7, #10]
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001a24:	611a      	str	r2, [r3, #16]
 8001a26:	e01b      	b.n	8001a60 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001a28:	897b      	ldrh	r3, [r7, #10]
 8001a2a:	11db      	asrs	r3, r3, #7
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	f003 0306 	and.w	r3, r3, #6
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	f063 030f 	orn	r3, r3, #15
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	490e      	ldr	r1, [pc, #56]	@ (8001a80 <I2C_MasterRequestWrite+0xfc>)
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f000 f898 	bl	8001b7c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e010      	b.n	8001a78 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001a56:	897b      	ldrh	r3, [r7, #10]
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	4907      	ldr	r1, [pc, #28]	@ (8001a84 <I2C_MasterRequestWrite+0x100>)
 8001a66:	68f8      	ldr	r0, [r7, #12]
 8001a68:	f000 f888 	bl	8001b7c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e000      	b.n	8001a78 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	00010008 	.word	0x00010008
 8001a84:	00010002 	.word	0x00010002

08001a88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	603b      	str	r3, [r7, #0]
 8001a94:	4613      	mov	r3, r2
 8001a96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a98:	e048      	b.n	8001b2c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa0:	d044      	beq.n	8001b2c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aa2:	f7ff fa7f 	bl	8000fa4 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d302      	bcc.n	8001ab8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d139      	bne.n	8001b2c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	0c1b      	lsrs	r3, r3, #16
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d10d      	bne.n	8001ade <I2C_WaitOnFlagUntilTimeout+0x56>
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	43da      	mvns	r2, r3
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	4013      	ands	r3, r2
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	bf0c      	ite	eq
 8001ad4:	2301      	moveq	r3, #1
 8001ad6:	2300      	movne	r3, #0
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	461a      	mov	r2, r3
 8001adc:	e00c      	b.n	8001af8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	43da      	mvns	r2, r3
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	bf0c      	ite	eq
 8001af0:	2301      	moveq	r3, #1
 8001af2:	2300      	movne	r3, #0
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	461a      	mov	r2, r3
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d116      	bne.n	8001b2c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2200      	movs	r2, #0
 8001b02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2220      	movs	r2, #32
 8001b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b18:	f043 0220 	orr.w	r2, r3, #32
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e023      	b.n	8001b74 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	0c1b      	lsrs	r3, r3, #16
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d10d      	bne.n	8001b52 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	695b      	ldr	r3, [r3, #20]
 8001b3c:	43da      	mvns	r2, r3
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	4013      	ands	r3, r2
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	bf0c      	ite	eq
 8001b48:	2301      	moveq	r3, #1
 8001b4a:	2300      	movne	r3, #0
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	461a      	mov	r2, r3
 8001b50:	e00c      	b.n	8001b6c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	43da      	mvns	r2, r3
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	bf0c      	ite	eq
 8001b64:	2301      	moveq	r3, #1
 8001b66:	2300      	movne	r3, #0
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d093      	beq.n	8001a9a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
 8001b88:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b8a:	e071      	b.n	8001c70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b9a:	d123      	bne.n	8001be4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001baa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001bb4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2220      	movs	r2, #32
 8001bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd0:	f043 0204 	orr.w	r2, r3, #4
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e067      	b.n	8001cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bea:	d041      	beq.n	8001c70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bec:	f7ff f9da 	bl	8000fa4 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d302      	bcc.n	8001c02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d136      	bne.n	8001c70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	0c1b      	lsrs	r3, r3, #16
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d10c      	bne.n	8001c26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	43da      	mvns	r2, r3
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	4013      	ands	r3, r2
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	bf14      	ite	ne
 8001c1e:	2301      	movne	r3, #1
 8001c20:	2300      	moveq	r3, #0
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	e00b      	b.n	8001c3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	43da      	mvns	r2, r3
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	4013      	ands	r3, r2
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	bf14      	ite	ne
 8001c38:	2301      	movne	r3, #1
 8001c3a:	2300      	moveq	r3, #0
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d016      	beq.n	8001c70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2200      	movs	r2, #0
 8001c46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2220      	movs	r2, #32
 8001c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5c:	f043 0220 	orr.w	r2, r3, #32
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e021      	b.n	8001cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	0c1b      	lsrs	r3, r3, #16
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d10c      	bne.n	8001c94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	695b      	ldr	r3, [r3, #20]
 8001c80:	43da      	mvns	r2, r3
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	4013      	ands	r3, r2
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	bf14      	ite	ne
 8001c8c:	2301      	movne	r3, #1
 8001c8e:	2300      	moveq	r3, #0
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	e00b      	b.n	8001cac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	43da      	mvns	r2, r3
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	bf14      	ite	ne
 8001ca6:	2301      	movne	r3, #1
 8001ca8:	2300      	moveq	r3, #0
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f47f af6d 	bne.w	8001b8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cc8:	e034      	b.n	8001d34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001cca:	68f8      	ldr	r0, [r7, #12]
 8001ccc:	f000 f886 	bl	8001ddc <I2C_IsAcknowledgeFailed>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e034      	b.n	8001d44 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce0:	d028      	beq.n	8001d34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ce2:	f7ff f95f 	bl	8000fa4 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	68ba      	ldr	r2, [r7, #8]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d302      	bcc.n	8001cf8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d11d      	bne.n	8001d34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d02:	2b80      	cmp	r3, #128	@ 0x80
 8001d04:	d016      	beq.n	8001d34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2220      	movs	r2, #32
 8001d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d20:	f043 0220 	orr.w	r2, r3, #32
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e007      	b.n	8001d44 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d3e:	2b80      	cmp	r3, #128	@ 0x80
 8001d40:	d1c3      	bne.n	8001cca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d58:	e034      	b.n	8001dc4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f000 f83e 	bl	8001ddc <I2C_IsAcknowledgeFailed>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e034      	b.n	8001dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d70:	d028      	beq.n	8001dc4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d72:	f7ff f917 	bl	8000fa4 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	68ba      	ldr	r2, [r7, #8]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d302      	bcc.n	8001d88 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d11d      	bne.n	8001dc4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	f003 0304 	and.w	r3, r3, #4
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	d016      	beq.n	8001dc4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2220      	movs	r2, #32
 8001da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db0:	f043 0220 	orr.w	r2, r3, #32
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e007      	b.n	8001dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	f003 0304 	and.w	r3, r3, #4
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	d1c3      	bne.n	8001d5a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001df2:	d11b      	bne.n	8001e2c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001dfc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2220      	movs	r2, #32
 8001e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e18:	f043 0204 	orr.w	r2, r3, #4
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e000      	b.n	8001e2e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr

08001e38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e272      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f000 8087 	beq.w	8001f66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e58:	4b92      	ldr	r3, [pc, #584]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 030c 	and.w	r3, r3, #12
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d00c      	beq.n	8001e7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e64:	4b8f      	ldr	r3, [pc, #572]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 030c 	and.w	r3, r3, #12
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	d112      	bne.n	8001e96 <HAL_RCC_OscConfig+0x5e>
 8001e70:	4b8c      	ldr	r3, [pc, #560]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e7c:	d10b      	bne.n	8001e96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e7e:	4b89      	ldr	r3, [pc, #548]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d06c      	beq.n	8001f64 <HAL_RCC_OscConfig+0x12c>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d168      	bne.n	8001f64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e24c      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e9e:	d106      	bne.n	8001eae <HAL_RCC_OscConfig+0x76>
 8001ea0:	4b80      	ldr	r3, [pc, #512]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a7f      	ldr	r2, [pc, #508]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001ea6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eaa:	6013      	str	r3, [r2, #0]
 8001eac:	e02e      	b.n	8001f0c <HAL_RCC_OscConfig+0xd4>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10c      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x98>
 8001eb6:	4b7b      	ldr	r3, [pc, #492]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a7a      	ldr	r2, [pc, #488]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	4b78      	ldr	r3, [pc, #480]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a77      	ldr	r2, [pc, #476]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	e01d      	b.n	8001f0c <HAL_RCC_OscConfig+0xd4>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ed8:	d10c      	bne.n	8001ef4 <HAL_RCC_OscConfig+0xbc>
 8001eda:	4b72      	ldr	r3, [pc, #456]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a71      	ldr	r2, [pc, #452]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	4b6f      	ldr	r3, [pc, #444]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a6e      	ldr	r2, [pc, #440]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001eec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	e00b      	b.n	8001f0c <HAL_RCC_OscConfig+0xd4>
 8001ef4:	4b6b      	ldr	r3, [pc, #428]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a6a      	ldr	r2, [pc, #424]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001efa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001efe:	6013      	str	r3, [r2, #0]
 8001f00:	4b68      	ldr	r3, [pc, #416]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a67      	ldr	r2, [pc, #412]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001f06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d013      	beq.n	8001f3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f14:	f7ff f846 	bl	8000fa4 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f1c:	f7ff f842 	bl	8000fa4 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b64      	cmp	r3, #100	@ 0x64
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e200      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2e:	4b5d      	ldr	r3, [pc, #372]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d0f0      	beq.n	8001f1c <HAL_RCC_OscConfig+0xe4>
 8001f3a:	e014      	b.n	8001f66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3c:	f7ff f832 	bl	8000fa4 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f44:	f7ff f82e 	bl	8000fa4 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b64      	cmp	r3, #100	@ 0x64
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e1ec      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f56:	4b53      	ldr	r3, [pc, #332]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1f0      	bne.n	8001f44 <HAL_RCC_OscConfig+0x10c>
 8001f62:	e000      	b.n	8001f66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d063      	beq.n	800203a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f72:	4b4c      	ldr	r3, [pc, #304]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f003 030c 	and.w	r3, r3, #12
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00b      	beq.n	8001f96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f7e:	4b49      	ldr	r3, [pc, #292]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f003 030c 	and.w	r3, r3, #12
 8001f86:	2b08      	cmp	r3, #8
 8001f88:	d11c      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x18c>
 8001f8a:	4b46      	ldr	r3, [pc, #280]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d116      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f96:	4b43      	ldr	r3, [pc, #268]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d005      	beq.n	8001fae <HAL_RCC_OscConfig+0x176>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d001      	beq.n	8001fae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e1c0      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fae:	4b3d      	ldr	r3, [pc, #244]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	4939      	ldr	r1, [pc, #228]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fc2:	e03a      	b.n	800203a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d020      	beq.n	800200e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fcc:	4b36      	ldr	r3, [pc, #216]	@ (80020a8 <HAL_RCC_OscConfig+0x270>)
 8001fce:	2201      	movs	r2, #1
 8001fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd2:	f7fe ffe7 	bl	8000fa4 <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd8:	e008      	b.n	8001fec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fda:	f7fe ffe3 	bl	8000fa4 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e1a1      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fec:	4b2d      	ldr	r3, [pc, #180]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d0f0      	beq.n	8001fda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff8:	4b2a      	ldr	r3, [pc, #168]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	4927      	ldr	r1, [pc, #156]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8002008:	4313      	orrs	r3, r2
 800200a:	600b      	str	r3, [r1, #0]
 800200c:	e015      	b.n	800203a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800200e:	4b26      	ldr	r3, [pc, #152]	@ (80020a8 <HAL_RCC_OscConfig+0x270>)
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002014:	f7fe ffc6 	bl	8000fa4 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800201c:	f7fe ffc2 	bl	8000fa4 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e180      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800202e:	4b1d      	ldr	r3, [pc, #116]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1f0      	bne.n	800201c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0308 	and.w	r3, r3, #8
 8002042:	2b00      	cmp	r3, #0
 8002044:	d03a      	beq.n	80020bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d019      	beq.n	8002082 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800204e:	4b17      	ldr	r3, [pc, #92]	@ (80020ac <HAL_RCC_OscConfig+0x274>)
 8002050:	2201      	movs	r2, #1
 8002052:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002054:	f7fe ffa6 	bl	8000fa4 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800205c:	f7fe ffa2 	bl	8000fa4 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e160      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800206e:	4b0d      	ldr	r3, [pc, #52]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8002070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d0f0      	beq.n	800205c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800207a:	2001      	movs	r0, #1
 800207c:	f000 faba 	bl	80025f4 <RCC_Delay>
 8002080:	e01c      	b.n	80020bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002082:	4b0a      	ldr	r3, [pc, #40]	@ (80020ac <HAL_RCC_OscConfig+0x274>)
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002088:	f7fe ff8c 	bl	8000fa4 <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800208e:	e00f      	b.n	80020b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002090:	f7fe ff88 	bl	8000fa4 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d908      	bls.n	80020b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e146      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
 80020a2:	bf00      	nop
 80020a4:	40021000 	.word	0x40021000
 80020a8:	42420000 	.word	0x42420000
 80020ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b0:	4b92      	ldr	r3, [pc, #584]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 80020b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1e9      	bne.n	8002090 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 80a6 	beq.w	8002216 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ca:	2300      	movs	r3, #0
 80020cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ce:	4b8b      	ldr	r3, [pc, #556]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10d      	bne.n	80020f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020da:	4b88      	ldr	r3, [pc, #544]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	4a87      	ldr	r2, [pc, #540]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 80020e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020e4:	61d3      	str	r3, [r2, #28]
 80020e6:	4b85      	ldr	r3, [pc, #532]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ee:	60bb      	str	r3, [r7, #8]
 80020f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020f2:	2301      	movs	r3, #1
 80020f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f6:	4b82      	ldr	r3, [pc, #520]	@ (8002300 <HAL_RCC_OscConfig+0x4c8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d118      	bne.n	8002134 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002102:	4b7f      	ldr	r3, [pc, #508]	@ (8002300 <HAL_RCC_OscConfig+0x4c8>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a7e      	ldr	r2, [pc, #504]	@ (8002300 <HAL_RCC_OscConfig+0x4c8>)
 8002108:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800210c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800210e:	f7fe ff49 	bl	8000fa4 <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002116:	f7fe ff45 	bl	8000fa4 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b64      	cmp	r3, #100	@ 0x64
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e103      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002128:	4b75      	ldr	r3, [pc, #468]	@ (8002300 <HAL_RCC_OscConfig+0x4c8>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0f0      	beq.n	8002116 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d106      	bne.n	800214a <HAL_RCC_OscConfig+0x312>
 800213c:	4b6f      	ldr	r3, [pc, #444]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	4a6e      	ldr	r2, [pc, #440]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	6213      	str	r3, [r2, #32]
 8002148:	e02d      	b.n	80021a6 <HAL_RCC_OscConfig+0x36e>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10c      	bne.n	800216c <HAL_RCC_OscConfig+0x334>
 8002152:	4b6a      	ldr	r3, [pc, #424]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	4a69      	ldr	r2, [pc, #420]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002158:	f023 0301 	bic.w	r3, r3, #1
 800215c:	6213      	str	r3, [r2, #32]
 800215e:	4b67      	ldr	r3, [pc, #412]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002160:	6a1b      	ldr	r3, [r3, #32]
 8002162:	4a66      	ldr	r2, [pc, #408]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002164:	f023 0304 	bic.w	r3, r3, #4
 8002168:	6213      	str	r3, [r2, #32]
 800216a:	e01c      	b.n	80021a6 <HAL_RCC_OscConfig+0x36e>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	2b05      	cmp	r3, #5
 8002172:	d10c      	bne.n	800218e <HAL_RCC_OscConfig+0x356>
 8002174:	4b61      	ldr	r3, [pc, #388]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	4a60      	ldr	r2, [pc, #384]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 800217a:	f043 0304 	orr.w	r3, r3, #4
 800217e:	6213      	str	r3, [r2, #32]
 8002180:	4b5e      	ldr	r3, [pc, #376]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	4a5d      	ldr	r2, [pc, #372]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	6213      	str	r3, [r2, #32]
 800218c:	e00b      	b.n	80021a6 <HAL_RCC_OscConfig+0x36e>
 800218e:	4b5b      	ldr	r3, [pc, #364]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	4a5a      	ldr	r2, [pc, #360]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002194:	f023 0301 	bic.w	r3, r3, #1
 8002198:	6213      	str	r3, [r2, #32]
 800219a:	4b58      	ldr	r3, [pc, #352]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	4a57      	ldr	r2, [pc, #348]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 80021a0:	f023 0304 	bic.w	r3, r3, #4
 80021a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d015      	beq.n	80021da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ae:	f7fe fef9 	bl	8000fa4 <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b4:	e00a      	b.n	80021cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b6:	f7fe fef5 	bl	8000fa4 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e0b1      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021cc:	4b4b      	ldr	r3, [pc, #300]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0ee      	beq.n	80021b6 <HAL_RCC_OscConfig+0x37e>
 80021d8:	e014      	b.n	8002204 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021da:	f7fe fee3 	bl	8000fa4 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e0:	e00a      	b.n	80021f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021e2:	f7fe fedf 	bl	8000fa4 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e09b      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f8:	4b40      	ldr	r3, [pc, #256]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1ee      	bne.n	80021e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002204:	7dfb      	ldrb	r3, [r7, #23]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d105      	bne.n	8002216 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800220a:	4b3c      	ldr	r3, [pc, #240]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	4a3b      	ldr	r2, [pc, #236]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002210:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002214:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	2b00      	cmp	r3, #0
 800221c:	f000 8087 	beq.w	800232e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002220:	4b36      	ldr	r3, [pc, #216]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 030c 	and.w	r3, r3, #12
 8002228:	2b08      	cmp	r3, #8
 800222a:	d061      	beq.n	80022f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	69db      	ldr	r3, [r3, #28]
 8002230:	2b02      	cmp	r3, #2
 8002232:	d146      	bne.n	80022c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002234:	4b33      	ldr	r3, [pc, #204]	@ (8002304 <HAL_RCC_OscConfig+0x4cc>)
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223a:	f7fe feb3 	bl	8000fa4 <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002242:	f7fe feaf 	bl	8000fa4 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e06d      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002254:	4b29      	ldr	r3, [pc, #164]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1f0      	bne.n	8002242 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002268:	d108      	bne.n	800227c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800226a:	4b24      	ldr	r3, [pc, #144]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	4921      	ldr	r1, [pc, #132]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002278:	4313      	orrs	r3, r2
 800227a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800227c:	4b1f      	ldr	r3, [pc, #124]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a19      	ldr	r1, [r3, #32]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800228c:	430b      	orrs	r3, r1
 800228e:	491b      	ldr	r1, [pc, #108]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002290:	4313      	orrs	r3, r2
 8002292:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002294:	4b1b      	ldr	r3, [pc, #108]	@ (8002304 <HAL_RCC_OscConfig+0x4cc>)
 8002296:	2201      	movs	r2, #1
 8002298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229a:	f7fe fe83 	bl	8000fa4 <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a2:	f7fe fe7f 	bl	8000fa4 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e03d      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022b4:	4b11      	ldr	r3, [pc, #68]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0f0      	beq.n	80022a2 <HAL_RCC_OscConfig+0x46a>
 80022c0:	e035      	b.n	800232e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c2:	4b10      	ldr	r3, [pc, #64]	@ (8002304 <HAL_RCC_OscConfig+0x4cc>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c8:	f7fe fe6c 	bl	8000fa4 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d0:	f7fe fe68 	bl	8000fa4 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e026      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022e2:	4b06      	ldr	r3, [pc, #24]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f0      	bne.n	80022d0 <HAL_RCC_OscConfig+0x498>
 80022ee:	e01e      	b.n	800232e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	69db      	ldr	r3, [r3, #28]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d107      	bne.n	8002308 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e019      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
 80022fc:	40021000 	.word	0x40021000
 8002300:	40007000 	.word	0x40007000
 8002304:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002308:	4b0b      	ldr	r3, [pc, #44]	@ (8002338 <HAL_RCC_OscConfig+0x500>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	429a      	cmp	r2, r3
 800231a:	d106      	bne.n	800232a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002326:	429a      	cmp	r2, r3
 8002328:	d001      	beq.n	800232e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e000      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3718      	adds	r7, #24
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40021000 	.word	0x40021000

0800233c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e0d0      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002350:	4b6a      	ldr	r3, [pc, #424]	@ (80024fc <HAL_RCC_ClockConfig+0x1c0>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	429a      	cmp	r2, r3
 800235c:	d910      	bls.n	8002380 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235e:	4b67      	ldr	r3, [pc, #412]	@ (80024fc <HAL_RCC_ClockConfig+0x1c0>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f023 0207 	bic.w	r2, r3, #7
 8002366:	4965      	ldr	r1, [pc, #404]	@ (80024fc <HAL_RCC_ClockConfig+0x1c0>)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	4313      	orrs	r3, r2
 800236c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800236e:	4b63      	ldr	r3, [pc, #396]	@ (80024fc <HAL_RCC_ClockConfig+0x1c0>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	429a      	cmp	r2, r3
 800237a:	d001      	beq.n	8002380 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e0b8      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d020      	beq.n	80023ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	2b00      	cmp	r3, #0
 8002396:	d005      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002398:	4b59      	ldr	r3, [pc, #356]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	4a58      	ldr	r2, [pc, #352]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 800239e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80023a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0308 	and.w	r3, r3, #8
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d005      	beq.n	80023bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023b0:	4b53      	ldr	r3, [pc, #332]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	4a52      	ldr	r2, [pc, #328]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80023b6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80023ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023bc:	4b50      	ldr	r3, [pc, #320]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	494d      	ldr	r1, [pc, #308]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d040      	beq.n	800245c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d107      	bne.n	80023f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e2:	4b47      	ldr	r3, [pc, #284]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d115      	bne.n	800241a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e07f      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d107      	bne.n	800240a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023fa:	4b41      	ldr	r3, [pc, #260]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d109      	bne.n	800241a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e073      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800240a:	4b3d      	ldr	r3, [pc, #244]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e06b      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800241a:	4b39      	ldr	r3, [pc, #228]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f023 0203 	bic.w	r2, r3, #3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	4936      	ldr	r1, [pc, #216]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 8002428:	4313      	orrs	r3, r2
 800242a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800242c:	f7fe fdba 	bl	8000fa4 <HAL_GetTick>
 8002430:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002432:	e00a      	b.n	800244a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002434:	f7fe fdb6 	bl	8000fa4 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002442:	4293      	cmp	r3, r2
 8002444:	d901      	bls.n	800244a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e053      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244a:	4b2d      	ldr	r3, [pc, #180]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 020c 	and.w	r2, r3, #12
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	429a      	cmp	r2, r3
 800245a:	d1eb      	bne.n	8002434 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800245c:	4b27      	ldr	r3, [pc, #156]	@ (80024fc <HAL_RCC_ClockConfig+0x1c0>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	429a      	cmp	r2, r3
 8002468:	d210      	bcs.n	800248c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246a:	4b24      	ldr	r3, [pc, #144]	@ (80024fc <HAL_RCC_ClockConfig+0x1c0>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f023 0207 	bic.w	r2, r3, #7
 8002472:	4922      	ldr	r1, [pc, #136]	@ (80024fc <HAL_RCC_ClockConfig+0x1c0>)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	4313      	orrs	r3, r2
 8002478:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800247a:	4b20      	ldr	r3, [pc, #128]	@ (80024fc <HAL_RCC_ClockConfig+0x1c0>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	429a      	cmp	r2, r3
 8002486:	d001      	beq.n	800248c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e032      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	2b00      	cmp	r3, #0
 8002496:	d008      	beq.n	80024aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002498:	4b19      	ldr	r3, [pc, #100]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	4916      	ldr	r1, [pc, #88]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d009      	beq.n	80024ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024b6:	4b12      	ldr	r3, [pc, #72]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	490e      	ldr	r1, [pc, #56]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024ca:	f000 f821 	bl	8002510 <HAL_RCC_GetSysClockFreq>
 80024ce:	4602      	mov	r2, r0
 80024d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	091b      	lsrs	r3, r3, #4
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	490a      	ldr	r1, [pc, #40]	@ (8002504 <HAL_RCC_ClockConfig+0x1c8>)
 80024dc:	5ccb      	ldrb	r3, [r1, r3]
 80024de:	fa22 f303 	lsr.w	r3, r2, r3
 80024e2:	4a09      	ldr	r2, [pc, #36]	@ (8002508 <HAL_RCC_ClockConfig+0x1cc>)
 80024e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024e6:	4b09      	ldr	r3, [pc, #36]	@ (800250c <HAL_RCC_ClockConfig+0x1d0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fe fd18 	bl	8000f20 <HAL_InitTick>

  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40022000 	.word	0x40022000
 8002500:	40021000 	.word	0x40021000
 8002504:	08002c90 	.word	0x08002c90
 8002508:	20000010 	.word	0x20000010
 800250c:	20000014 	.word	0x20000014

08002510 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002510:	b480      	push	{r7}
 8002512:	b087      	sub	sp, #28
 8002514:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002516:	2300      	movs	r3, #0
 8002518:	60fb      	str	r3, [r7, #12]
 800251a:	2300      	movs	r3, #0
 800251c:	60bb      	str	r3, [r7, #8]
 800251e:	2300      	movs	r3, #0
 8002520:	617b      	str	r3, [r7, #20]
 8002522:	2300      	movs	r3, #0
 8002524:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002526:	2300      	movs	r3, #0
 8002528:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800252a:	4b1e      	ldr	r3, [pc, #120]	@ (80025a4 <HAL_RCC_GetSysClockFreq+0x94>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f003 030c 	and.w	r3, r3, #12
 8002536:	2b04      	cmp	r3, #4
 8002538:	d002      	beq.n	8002540 <HAL_RCC_GetSysClockFreq+0x30>
 800253a:	2b08      	cmp	r3, #8
 800253c:	d003      	beq.n	8002546 <HAL_RCC_GetSysClockFreq+0x36>
 800253e:	e027      	b.n	8002590 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002540:	4b19      	ldr	r3, [pc, #100]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002542:	613b      	str	r3, [r7, #16]
      break;
 8002544:	e027      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	0c9b      	lsrs	r3, r3, #18
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	4a17      	ldr	r2, [pc, #92]	@ (80025ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8002550:	5cd3      	ldrb	r3, [r2, r3]
 8002552:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d010      	beq.n	8002580 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800255e:	4b11      	ldr	r3, [pc, #68]	@ (80025a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	0c5b      	lsrs	r3, r3, #17
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	4a11      	ldr	r2, [pc, #68]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800256a:	5cd3      	ldrb	r3, [r2, r3]
 800256c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a0d      	ldr	r2, [pc, #52]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002572:	fb03 f202 	mul.w	r2, r3, r2
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	fbb2 f3f3 	udiv	r3, r2, r3
 800257c:	617b      	str	r3, [r7, #20]
 800257e:	e004      	b.n	800258a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a0c      	ldr	r2, [pc, #48]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002584:	fb02 f303 	mul.w	r3, r2, r3
 8002588:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	613b      	str	r3, [r7, #16]
      break;
 800258e:	e002      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002590:	4b05      	ldr	r3, [pc, #20]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002592:	613b      	str	r3, [r7, #16]
      break;
 8002594:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002596:	693b      	ldr	r3, [r7, #16]
}
 8002598:	4618      	mov	r0, r3
 800259a:	371c      	adds	r7, #28
 800259c:	46bd      	mov	sp, r7
 800259e:	bc80      	pop	{r7}
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	40021000 	.word	0x40021000
 80025a8:	007a1200 	.word	0x007a1200
 80025ac:	08002ca8 	.word	0x08002ca8
 80025b0:	08002cb8 	.word	0x08002cb8
 80025b4:	003d0900 	.word	0x003d0900

080025b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025bc:	4b02      	ldr	r3, [pc, #8]	@ (80025c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80025be:	681b      	ldr	r3, [r3, #0]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr
 80025c8:	20000010 	.word	0x20000010

080025cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025d0:	f7ff fff2 	bl	80025b8 <HAL_RCC_GetHCLKFreq>
 80025d4:	4602      	mov	r2, r0
 80025d6:	4b05      	ldr	r3, [pc, #20]	@ (80025ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	0a1b      	lsrs	r3, r3, #8
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	4903      	ldr	r1, [pc, #12]	@ (80025f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025e2:	5ccb      	ldrb	r3, [r1, r3]
 80025e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40021000 	.word	0x40021000
 80025f0:	08002ca0 	.word	0x08002ca0

080025f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002628 <RCC_Delay+0x34>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a0a      	ldr	r2, [pc, #40]	@ (800262c <RCC_Delay+0x38>)
 8002602:	fba2 2303 	umull	r2, r3, r2, r3
 8002606:	0a5b      	lsrs	r3, r3, #9
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	fb02 f303 	mul.w	r3, r2, r3
 800260e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002610:	bf00      	nop
  }
  while (Delay --);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	1e5a      	subs	r2, r3, #1
 8002616:	60fa      	str	r2, [r7, #12]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1f9      	bne.n	8002610 <RCC_Delay+0x1c>
}
 800261c:	bf00      	nop
 800261e:	bf00      	nop
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr
 8002628:	20000010 	.word	0x20000010
 800262c:	10624dd3 	.word	0x10624dd3

08002630 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e076      	b.n	8002730 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002646:	2b00      	cmp	r3, #0
 8002648:	d108      	bne.n	800265c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002652:	d009      	beq.n	8002668 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	61da      	str	r2, [r3, #28]
 800265a:	e005      	b.n	8002668 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d106      	bne.n	8002688 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7fe fb94 	bl	8000db0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2202      	movs	r2, #2
 800268c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800269e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80026b0:	431a      	orrs	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	431a      	orrs	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026d8:	431a      	orrs	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80026e2:	431a      	orrs	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ec:	ea42 0103 	orr.w	r1, r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	430a      	orrs	r2, r1
 80026fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	0c1a      	lsrs	r2, r3, #16
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f002 0204 	and.w	r2, r2, #4
 800270e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	69da      	ldr	r2, [r3, #28]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800271e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b08a      	sub	sp, #40	@ 0x28
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
 8002744:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002746:	2301      	movs	r3, #1
 8002748:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800274a:	f7fe fc2b 	bl	8000fa4 <HAL_GetTick>
 800274e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002756:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800275e:	887b      	ldrh	r3, [r7, #2]
 8002760:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002762:	7ffb      	ldrb	r3, [r7, #31]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d00c      	beq.n	8002782 <HAL_SPI_TransmitReceive+0x4a>
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800276e:	d106      	bne.n	800277e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d102      	bne.n	800277e <HAL_SPI_TransmitReceive+0x46>
 8002778:	7ffb      	ldrb	r3, [r7, #31]
 800277a:	2b04      	cmp	r3, #4
 800277c:	d001      	beq.n	8002782 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800277e:	2302      	movs	r3, #2
 8002780:	e17f      	b.n	8002a82 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d005      	beq.n	8002794 <HAL_SPI_TransmitReceive+0x5c>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d002      	beq.n	8002794 <HAL_SPI_TransmitReceive+0x5c>
 800278e:	887b      	ldrh	r3, [r7, #2]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e174      	b.n	8002a82 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d101      	bne.n	80027a6 <HAL_SPI_TransmitReceive+0x6e>
 80027a2:	2302      	movs	r3, #2
 80027a4:	e16d      	b.n	8002a82 <HAL_SPI_TransmitReceive+0x34a>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	d003      	beq.n	80027c2 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2205      	movs	r2, #5
 80027be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	887a      	ldrh	r2, [r7, #2]
 80027d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	887a      	ldrh	r2, [r7, #2]
 80027d8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	887a      	ldrh	r2, [r7, #2]
 80027e4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	887a      	ldrh	r2, [r7, #2]
 80027ea:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002802:	2b40      	cmp	r3, #64	@ 0x40
 8002804:	d007      	beq.n	8002816 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002814:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800281e:	d17e      	bne.n	800291e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d002      	beq.n	800282e <HAL_SPI_TransmitReceive+0xf6>
 8002828:	8afb      	ldrh	r3, [r7, #22]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d16c      	bne.n	8002908 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002832:	881a      	ldrh	r2, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283e:	1c9a      	adds	r2, r3, #2
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002848:	b29b      	uxth	r3, r3
 800284a:	3b01      	subs	r3, #1
 800284c:	b29a      	uxth	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002852:	e059      	b.n	8002908 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b02      	cmp	r3, #2
 8002860:	d11b      	bne.n	800289a <HAL_SPI_TransmitReceive+0x162>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002866:	b29b      	uxth	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d016      	beq.n	800289a <HAL_SPI_TransmitReceive+0x162>
 800286c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286e:	2b01      	cmp	r3, #1
 8002870:	d113      	bne.n	800289a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002876:	881a      	ldrh	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002882:	1c9a      	adds	r2, r3, #2
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800288c:	b29b      	uxth	r3, r3
 800288e:	3b01      	subs	r3, #1
 8002890:	b29a      	uxth	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002896:	2300      	movs	r3, #0
 8002898:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d119      	bne.n	80028dc <HAL_SPI_TransmitReceive+0x1a4>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d014      	beq.n	80028dc <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68da      	ldr	r2, [r3, #12]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028bc:	b292      	uxth	r2, r2
 80028be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028c4:	1c9a      	adds	r2, r3, #2
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	3b01      	subs	r3, #1
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028d8:	2301      	movs	r3, #1
 80028da:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80028dc:	f7fe fb62 	bl	8000fa4 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	6a3b      	ldr	r3, [r7, #32]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d80d      	bhi.n	8002908 <HAL_SPI_TransmitReceive+0x1d0>
 80028ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f2:	d009      	beq.n	8002908 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e0bc      	b.n	8002a82 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800290c:	b29b      	uxth	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1a0      	bne.n	8002854 <HAL_SPI_TransmitReceive+0x11c>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002916:	b29b      	uxth	r3, r3
 8002918:	2b00      	cmp	r3, #0
 800291a:	d19b      	bne.n	8002854 <HAL_SPI_TransmitReceive+0x11c>
 800291c:	e082      	b.n	8002a24 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d002      	beq.n	800292c <HAL_SPI_TransmitReceive+0x1f4>
 8002926:	8afb      	ldrh	r3, [r7, #22]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d171      	bne.n	8002a10 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	330c      	adds	r3, #12
 8002936:	7812      	ldrb	r2, [r2, #0]
 8002938:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293e:	1c5a      	adds	r2, r3, #1
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002948:	b29b      	uxth	r3, r3
 800294a:	3b01      	subs	r3, #1
 800294c:	b29a      	uxth	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002952:	e05d      	b.n	8002a10 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b02      	cmp	r3, #2
 8002960:	d11c      	bne.n	800299c <HAL_SPI_TransmitReceive+0x264>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002966:	b29b      	uxth	r3, r3
 8002968:	2b00      	cmp	r3, #0
 800296a:	d017      	beq.n	800299c <HAL_SPI_TransmitReceive+0x264>
 800296c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296e:	2b01      	cmp	r3, #1
 8002970:	d114      	bne.n	800299c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	330c      	adds	r3, #12
 800297c:	7812      	ldrb	r2, [r2, #0]
 800297e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002984:	1c5a      	adds	r2, r3, #1
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800298e:	b29b      	uxth	r3, r3
 8002990:	3b01      	subs	r3, #1
 8002992:	b29a      	uxth	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002998:	2300      	movs	r3, #0
 800299a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d119      	bne.n	80029de <HAL_SPI_TransmitReceive+0x2a6>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d014      	beq.n	80029de <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68da      	ldr	r2, [r3, #12]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029c6:	1c5a      	adds	r2, r3, #1
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	3b01      	subs	r3, #1
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029da:	2301      	movs	r3, #1
 80029dc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80029de:	f7fe fae1 	bl	8000fa4 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	6a3b      	ldr	r3, [r7, #32]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d803      	bhi.n	80029f6 <HAL_SPI_TransmitReceive+0x2be>
 80029ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f4:	d102      	bne.n	80029fc <HAL_SPI_TransmitReceive+0x2c4>
 80029f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d109      	bne.n	8002a10 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e038      	b.n	8002a82 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d19c      	bne.n	8002954 <HAL_SPI_TransmitReceive+0x21c>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d197      	bne.n	8002954 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a24:	6a3a      	ldr	r2, [r7, #32]
 8002a26:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f000 f8b7 	bl	8002b9c <SPI_EndRxTxTransaction>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d008      	beq.n	8002a46 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2220      	movs	r2, #32
 8002a38:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e01d      	b.n	8002a82 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10a      	bne.n	8002a64 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a4e:	2300      	movs	r3, #0
 8002a50:	613b      	str	r3, [r7, #16]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	613b      	str	r3, [r7, #16]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e000      	b.n	8002a82 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002a80:	2300      	movs	r3, #0
  }
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3728      	adds	r7, #40	@ 0x28
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
	...

08002a8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b088      	sub	sp, #32
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	603b      	str	r3, [r7, #0]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a9c:	f7fe fa82 	bl	8000fa4 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aa4:	1a9b      	subs	r3, r3, r2
 8002aa6:	683a      	ldr	r2, [r7, #0]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002aac:	f7fe fa7a 	bl	8000fa4 <HAL_GetTick>
 8002ab0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ab2:	4b39      	ldr	r3, [pc, #228]	@ (8002b98 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	015b      	lsls	r3, r3, #5
 8002ab8:	0d1b      	lsrs	r3, r3, #20
 8002aba:	69fa      	ldr	r2, [r7, #28]
 8002abc:	fb02 f303 	mul.w	r3, r2, r3
 8002ac0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ac2:	e054      	b.n	8002b6e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aca:	d050      	beq.n	8002b6e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002acc:	f7fe fa6a 	bl	8000fa4 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	69fa      	ldr	r2, [r7, #28]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d902      	bls.n	8002ae2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d13d      	bne.n	8002b5e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002af0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002afa:	d111      	bne.n	8002b20 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b04:	d004      	beq.n	8002b10 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b0e:	d107      	bne.n	8002b20 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b1e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b28:	d10f      	bne.n	8002b4a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b48:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e017      	b.n	8002b8e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d101      	bne.n	8002b68 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	4013      	ands	r3, r2
 8002b78:	68ba      	ldr	r2, [r7, #8]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	bf0c      	ite	eq
 8002b7e:	2301      	moveq	r3, #1
 8002b80:	2300      	movne	r3, #0
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	461a      	mov	r2, r3
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d19b      	bne.n	8002ac4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3720      	adds	r7, #32
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	20000010 	.word	0x20000010

08002b9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af02      	add	r7, sp, #8
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	2102      	movs	r1, #2
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f7ff ff6a 	bl	8002a8c <SPI_WaitFlagStateUntilTimeout>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d007      	beq.n	8002bce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bc2:	f043 0220 	orr.w	r2, r3, #32
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e013      	b.n	8002bf6 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	2180      	movs	r1, #128	@ 0x80
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f7ff ff57 	bl	8002a8c <SPI_WaitFlagStateUntilTimeout>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d007      	beq.n	8002bf4 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002be8:	f043 0220 	orr.w	r2, r3, #32
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e000      	b.n	8002bf6 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <memset>:
 8002bfe:	4603      	mov	r3, r0
 8002c00:	4402      	add	r2, r0
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d100      	bne.n	8002c08 <memset+0xa>
 8002c06:	4770      	bx	lr
 8002c08:	f803 1b01 	strb.w	r1, [r3], #1
 8002c0c:	e7f9      	b.n	8002c02 <memset+0x4>
	...

08002c10 <__libc_init_array>:
 8002c10:	b570      	push	{r4, r5, r6, lr}
 8002c12:	2600      	movs	r6, #0
 8002c14:	4d0c      	ldr	r5, [pc, #48]	@ (8002c48 <__libc_init_array+0x38>)
 8002c16:	4c0d      	ldr	r4, [pc, #52]	@ (8002c4c <__libc_init_array+0x3c>)
 8002c18:	1b64      	subs	r4, r4, r5
 8002c1a:	10a4      	asrs	r4, r4, #2
 8002c1c:	42a6      	cmp	r6, r4
 8002c1e:	d109      	bne.n	8002c34 <__libc_init_array+0x24>
 8002c20:	f000 f81a 	bl	8002c58 <_init>
 8002c24:	2600      	movs	r6, #0
 8002c26:	4d0a      	ldr	r5, [pc, #40]	@ (8002c50 <__libc_init_array+0x40>)
 8002c28:	4c0a      	ldr	r4, [pc, #40]	@ (8002c54 <__libc_init_array+0x44>)
 8002c2a:	1b64      	subs	r4, r4, r5
 8002c2c:	10a4      	asrs	r4, r4, #2
 8002c2e:	42a6      	cmp	r6, r4
 8002c30:	d105      	bne.n	8002c3e <__libc_init_array+0x2e>
 8002c32:	bd70      	pop	{r4, r5, r6, pc}
 8002c34:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c38:	4798      	blx	r3
 8002c3a:	3601      	adds	r6, #1
 8002c3c:	e7ee      	b.n	8002c1c <__libc_init_array+0xc>
 8002c3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c42:	4798      	blx	r3
 8002c44:	3601      	adds	r6, #1
 8002c46:	e7f2      	b.n	8002c2e <__libc_init_array+0x1e>
 8002c48:	08002cbc 	.word	0x08002cbc
 8002c4c:	08002cbc 	.word	0x08002cbc
 8002c50:	08002cbc 	.word	0x08002cbc
 8002c54:	08002cc0 	.word	0x08002cc0

08002c58 <_init>:
 8002c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c5a:	bf00      	nop
 8002c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c5e:	bc08      	pop	{r3}
 8002c60:	469e      	mov	lr, r3
 8002c62:	4770      	bx	lr

08002c64 <_fini>:
 8002c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c66:	bf00      	nop
 8002c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c6a:	bc08      	pop	{r3}
 8002c6c:	469e      	mov	lr, r3
 8002c6e:	4770      	bx	lr
