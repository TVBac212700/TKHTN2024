/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "liquidcrystal_i2c.h"
#include "stdio.h"
#include "MPR121.h"
#include "bmp180_for_stm32_hal.h"
#include "string.h"
#include "stdlib.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
#include "funtion.h"
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
#define RESPONSES(Code)   (Code)
#define UPGRADE(Code) (Code+127)
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
char print_lcd_row1[20];
char print_lcd_row2[20];
char send_to_rs485[50];
char read_to_rs485[50];
char indicate_1[] = "Send To RS485";
char key_board[20];
float temperature;
int32_t pressure;
uint8_t len_key_board = 0;
uint16_t last_touch = 0, new_touch = 0, count_touch = 0;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void TaskMPR121()
{
	  new_touch = touched();
	  if(new_touch != last_touch)
	  {
		  if(new_touch == 0)
		  {
			  char C = convert_to_char(last_touch);
			  if(C != '\0' && C != '*' && C != '#')
			  {
				  if(len_key_board < 16)
				  {
					  key_board[len_key_board++] = C;
					  key_board[len_key_board] = '\0';
				  }
				  else
				  {
					  memmove(key_board,&key_board[1],sizeof(key_board) - 1);
					  key_board[len_key_board - 1] = C;
					  key_board[len_key_board] = '\0';
				  }

			  }
			  else if(C == '#')
			  {
				  memset((void*)print_lcd_row2, 0, sizeof(print_lcd_row2));
				  memcpy((void*)print_lcd_row2, (void*)indicate_1, sizeof(indicate_1));
				  gen_data_send_rs485(UPGRADE(3),key_board);
				  memcpy((void*)send_to_rs485, (void*)key_board, strlen(key_board));
			  }
			  else if(C == '*' && len_key_board > 0)
			  {
				  memset((void*)print_lcd_row2, 0, sizeof(print_lcd_row2));
				  key_board[--len_key_board] = '\0';
				  memcpy((void*)print_lcd_row2, (void*)key_board, len_key_board);
			  }
			  if(C != '\0' && len_key_board > 0 && C != '#')
			  {
				  memcpy((void*)print_lcd_row2, (void*)key_board, strlen(key_board));
			  }
		  }
	  }
	  last_touch = new_touch;
}

void TaskTempBMP180()
{
	temperature = BMP180_GetTemperature();
}

void TaskPressBMP180()
{
	pressure = BMP180_GetPressure();
}

void TaskLCD()
{
	HD44780_Clear();
	if(strlen(print_lcd_row1) > 0)
	{
		  HD44780_SetCursor(0,0);
		  HD44780_PrintStr(print_lcd_row1);
//		  memset((void*)print_lcd_row1, 0, sizeof(print_lcd_row1));
	}
	else
	{
		sprintf(print_lcd_row1, "%d %0.1f %d", (int)count_touch, temperature, (int)pressure);
	}
	if(strlen(print_lcd_row2) > 0)
	{
		  HD44780_SetCursor(0,1);
		  HD44780_PrintStr(print_lcd_row2);
//		  memset((void*)print_lcd_row2, 0, sizeof(print_lcd_row2));
	}
}

void TaskRX()
{
	HAL_UART_Receive(&huart1, (uint8_t *)&read_to_rs485, sizeof (read_to_rs485) , 100);
	  if(strlen(read_to_rs485) > 1)
	  {
		  DataStruct result;
		  parse_data(read_to_rs485,&result);
//		  sprintf(print_lcd_row1,"%d %02X %02X %02X %04X",result.Len, result.Addr, result.Code,result.Data[0],check_crc(&result));
//		  HD44780_SetCursor(0,1);
//		  HD44780_PrintStr(buff);
//		  result.Addr++;
		  if(result.Code == 1)
		  {
			  if(result.Data[0] == '1')
			  {
//				  memset((void*)tx_buff,0,sizeof(tx_buff));
//				  sprintf(tx_buff, "%d.%dC", (int) temperature / 10, (int) temperature % 10);
//				  gen_data_send_rs485(RESPONSES(result.Data[0] - '0'),tx_buff);
//				  HD44780_SetCursor(0,1);
//				  HD44780_PrintStr("                ");
//				  HD44780_SetCursor(0,1);
//				  HD44780_PrintStr((char*)result.Data);
			  }
			  else if (result.Data[0] == '2')
			  {
//				  memset((void*)tx_buff,0,sizeof(tx_buff));
//				  sprintf(tx_buff, "%dPa", (int) pressure);
//				  gen_data_send_rs485(RESPONSES(result.Data[0] - '0'),tx_buff);
//				  HD44780_SetCursor(0,1);
//				  HD44780_PrintStr("                ");
//				  HD44780_SetCursor(0,1);
//				  HD44780_PrintStr((char*)result.Data);
			  }
		  }
		  else if(result.Code == 5)
		  {
//			  HD44780_SetCursor(0,1);
//			  HD44780_PrintStr("                ");
//			  HD44780_SetCursor(0,1);
//			  result.Data[result.Len] = '\0';
//			  HD44780_PrintStr((char*)result.Data);
//			  memset((void*)tx_buff,0,sizeof(tx_buff));
//			  sprintf(tx_buff, "Okee");
//			  gen_data_send_rs485(UPGRADE(5),tx_buff);

		  }
//		  if(HAL_UART_Transmit(&huart1, (uint8_t *)&tx_buff, strlen(tx_buff) , 1000) == HAL_OK)
//		  {
//			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
//		  }
	  }
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
  HD44780_Init(2);
  MPR121_Init();
  BMP180_Init(&hi2c1);
  MPR121_Init();
  BMP180_SetOversampling(BMP180_ULTRA);
  BMP180_UpdateCalibrationData();
  HD44780_SetCursor(0,0);
  HD44780_PrintStr("INIT LCD 1602");
  count_touch = 0;

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  TaskMPR121();
	  TaskTempBMP180();
	  TaskPressBMP180();
	  TaskLCD();

  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if(GPIO_Pin == GPIO_PIN_INT) {
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
		count_touch++;
	} else {
		__NOP();
	}
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
