
RMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f6c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000518  0800a080  0800a080  0000b080  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a598  0800a598  0000c264  2**0
                  CONTENTS
  4 .ARM          00000008  0800a598  0800a598  0000b598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5a0  0800a5a0  0000c264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5a0  0800a5a0  0000b5a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a5a4  0800a5a4  0000b5a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000264  20000000  0800a5a8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004750  20000264  0800a80c  0000c264  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200049b4  0800a80c  0000c9b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c264  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017863  00000000  00000000  0000c28d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037b9  00000000  00000000  00023af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001620  00000000  00000000  000272b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001150  00000000  00000000  000288d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b028  00000000  00000000  00029a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018d9a  00000000  00000000  00044a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098294  00000000  00000000  0005d7e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f5a76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e44  00000000  00000000  000f5abc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000fc900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000264 	.word	0x20000264
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a064 	.word	0x0800a064

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000268 	.word	0x20000268
 800014c:	0800a064 	.word	0x0800a064

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <MPR121_Init>:
#include "MPR121.h"


uint8_t MPR121_Init(void) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
    
    writeRegister(MPR121_SOFTRESET, 0x63);
 8000b2e:	2163      	movs	r1, #99	@ 0x63
 8000b30:	2080      	movs	r0, #128	@ 0x80
 8000b32:	f000 f859 	bl	8000be8 <writeRegister>
    HAL_Delay(1);
 8000b36:	2001      	movs	r0, #1
 8000b38:	f002 f804 	bl	8002b44 <HAL_Delay>
    writeRegister(MPR121_ECR, 0x0);
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	205e      	movs	r0, #94	@ 0x5e
 8000b40:	f000 f852 	bl	8000be8 <writeRegister>

  uint8_t c = readRegister8(MPR121_CONFIG2);
 8000b44:	205d      	movs	r0, #93	@ 0x5d
 8000b46:	f000 f86b 	bl	8000c20 <readRegister8>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]

  if (c != 0x24)
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	2b24      	cmp	r3, #36	@ 0x24
 8000b52:	d001      	beq.n	8000b58 <MPR121_Init+0x30>
    return c;
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	e043      	b.n	8000be0 <MPR121_Init+0xb8>

  setThresholds(MPR121_TOUCH_THRESHOLD_DEFAULT, MPR121_RELEASE_THRESHOLD_DEFAULT);
 8000b58:	2106      	movs	r1, #6
 8000b5a:	200c      	movs	r0, #12
 8000b5c:	f000 f898 	bl	8000c90 <setThresholds>
  writeRegister(MPR121_MHDR, 0x01);
 8000b60:	2101      	movs	r1, #1
 8000b62:	202b      	movs	r0, #43	@ 0x2b
 8000b64:	f000 f840 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_NHDR, 0x01);
 8000b68:	2101      	movs	r1, #1
 8000b6a:	202c      	movs	r0, #44	@ 0x2c
 8000b6c:	f000 f83c 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_NCLR, 0x0E);
 8000b70:	210e      	movs	r1, #14
 8000b72:	202d      	movs	r0, #45	@ 0x2d
 8000b74:	f000 f838 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_FDLR, 0x00);
 8000b78:	2100      	movs	r1, #0
 8000b7a:	202e      	movs	r0, #46	@ 0x2e
 8000b7c:	f000 f834 	bl	8000be8 <writeRegister>

  writeRegister(MPR121_MHDF, 0x01);
 8000b80:	2101      	movs	r1, #1
 8000b82:	202f      	movs	r0, #47	@ 0x2f
 8000b84:	f000 f830 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_NHDF, 0x05);
 8000b88:	2105      	movs	r1, #5
 8000b8a:	2030      	movs	r0, #48	@ 0x30
 8000b8c:	f000 f82c 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_NCLF, 0x01);
 8000b90:	2101      	movs	r1, #1
 8000b92:	2031      	movs	r0, #49	@ 0x31
 8000b94:	f000 f828 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_FDLF, 0x00);
 8000b98:	2100      	movs	r1, #0
 8000b9a:	2032      	movs	r0, #50	@ 0x32
 8000b9c:	f000 f824 	bl	8000be8 <writeRegister>

  writeRegister(MPR121_NHDT, 0x00);
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	2033      	movs	r0, #51	@ 0x33
 8000ba4:	f000 f820 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_NCLT, 0x00);
 8000ba8:	2100      	movs	r1, #0
 8000baa:	2034      	movs	r0, #52	@ 0x34
 8000bac:	f000 f81c 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_FDLT, 0x00);
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	2035      	movs	r0, #53	@ 0x35
 8000bb4:	f000 f818 	bl	8000be8 <writeRegister>

  writeRegister(MPR121_DEBOUNCE, 0);
 8000bb8:	2100      	movs	r1, #0
 8000bba:	205b      	movs	r0, #91	@ 0x5b
 8000bbc:	f000 f814 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_CONFIG1, 0x10); // default, 16uA charge current
 8000bc0:	2110      	movs	r1, #16
 8000bc2:	205c      	movs	r0, #92	@ 0x5c
 8000bc4:	f000 f810 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_CONFIG2, 0x20); // 0.5uS encoding, 1ms period
 8000bc8:	2120      	movs	r1, #32
 8000bca:	205d      	movs	r0, #93	@ 0x5d
 8000bcc:	f000 f80c 	bl	8000be8 <writeRegister>
    uint8_t ECR_SETTING =
 8000bd0:	238c      	movs	r3, #140	@ 0x8c
 8000bd2:	71bb      	strb	r3, [r7, #6]
      B10000000 + 12; // 5 bits for baseline tracking & proximity disabled + X
                      // amount of electrodes running (12)
  writeRegister(MPR121_ECR, ECR_SETTING); // start with above ECR setting
 8000bd4:	79bb      	ldrb	r3, [r7, #6]
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	205e      	movs	r0, #94	@ 0x5e
 8000bda:	f000 f805 	bl	8000be8 <writeRegister>

    return c; 
 8000bde:	79fb      	ldrb	r3, [r7, #7]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <writeRegister>:
    
//     uint16_t touchData = (touchStatus[1] << 8) | touchStatus[0];
//     return (touchData != 0) ? 1 : 0;
// }

void writeRegister(uint8_t reg, uint8_t cmd) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af04      	add	r7, sp, #16
 8000bee:	4603      	mov	r3, r0
 8000bf0:	460a      	mov	r2, r1
 8000bf2:	71fb      	strb	r3, [r7, #7]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	71bb      	strb	r3, [r7, #6]
	// uint8_t arr[2] = { reg, cmd };
	// HAL_I2C_Master_Transmit(&hi2c1, MPR121_I2C_ADDR, arr, 2, HAL_MAX_DELAY);
    HAL_I2C_Mem_Write(&hi2c1, MPR121_I2C_ADDR|0x01,reg,1,&cmd,1,HAL_MAX_DELAY);
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000c00:	9302      	str	r3, [sp, #8]
 8000c02:	2301      	movs	r3, #1
 8000c04:	9301      	str	r3, [sp, #4]
 8000c06:	1dbb      	adds	r3, r7, #6
 8000c08:	9300      	str	r3, [sp, #0]
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	21b5      	movs	r1, #181	@ 0xb5
 8000c0e:	4803      	ldr	r0, [pc, #12]	@ (8000c1c <writeRegister+0x34>)
 8000c10:	f002 ff18 	bl	8003a44 <HAL_I2C_Mem_Write>
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000544 	.word	0x20000544

08000c20 <readRegister8>:
/**
 * @brief Reads from a specific register.
 * @param reg Address of register to read from.
 * @return Byte read.
 */
uint8_t readRegister8(uint8_t reg) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b088      	sub	sp, #32
 8000c24:	af04      	add	r7, sp, #16
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
	// HAL_I2C_Master_Transmit(&hi2c1, MPR121_I2C_ADDR, &reg, 1, HAL_MAX_DELAY);
	uint8_t result;
	// HAL_I2C_Master_Receive(&hi2c1, MPR121_I2C_ADDR, &result, 1, HAL_MAX_DELAY);
    HAL_I2C_Mem_Read(&hi2c1,MPR121_I2C_ADDR,reg,1,&result,1,HAL_MAX_DELAY);
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	b29a      	uxth	r2, r3
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c32:	9302      	str	r3, [sp, #8]
 8000c34:	2301      	movs	r3, #1
 8000c36:	9301      	str	r3, [sp, #4]
 8000c38:	f107 030f 	add.w	r3, r7, #15
 8000c3c:	9300      	str	r3, [sp, #0]
 8000c3e:	2301      	movs	r3, #1
 8000c40:	21b4      	movs	r1, #180	@ 0xb4
 8000c42:	4804      	ldr	r0, [pc, #16]	@ (8000c54 <readRegister8+0x34>)
 8000c44:	f002 fff8 	bl	8003c38 <HAL_I2C_Mem_Read>
	return result;
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000544 	.word	0x20000544

08000c58 <readRegister16>:

uint16_t readRegister16(uint8_t reg) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b088      	sub	sp, #32
 8000c5c:	af04      	add	r7, sp, #16
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
	// HAL_I2C_Master_Transmit(&hi2c1, MPR121_I2C_ADDR, &reg, 1, HAL_MAX_DELAY);
	// uint8_t result[2];
	// HAL_I2C_Master_Receive(&hi2c1, MPR121_I2C_ADDR, (uint8_t*)&result, 2, HAL_MAX_DELAY);
	// return result[0]|(result[1]<<8);
	uint16_t result;
    HAL_I2C_Mem_Read(&hi2c1,MPR121_I2C_ADDR,reg,1,(uint8_t*)&result,2,HAL_MAX_DELAY);
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	b29a      	uxth	r2, r3
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6a:	9302      	str	r3, [sp, #8]
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	9301      	str	r3, [sp, #4]
 8000c70:	f107 030e 	add.w	r3, r7, #14
 8000c74:	9300      	str	r3, [sp, #0]
 8000c76:	2301      	movs	r3, #1
 8000c78:	21b4      	movs	r1, #180	@ 0xb4
 8000c7a:	4804      	ldr	r0, [pc, #16]	@ (8000c8c <readRegister16+0x34>)
 8000c7c:	f002 ffdc 	bl	8003c38 <HAL_I2C_Mem_Read>
    return result;
 8000c80:	89fb      	ldrh	r3, [r7, #14]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000544 	.word	0x20000544

08000c90 <setThresholds>:

void setThresholds(uint8_t touch, uint8_t release) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	460a      	mov	r2, r1
 8000c9a:	71fb      	strb	r3, [r7, #7]
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	71bb      	strb	r3, [r7, #6]
  // set all thresholds (the same)
  for (uint8_t i = 0; i < 12; i++) {
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	73fb      	strb	r3, [r7, #15]
 8000ca4:	e016      	b.n	8000cd4 <setThresholds+0x44>
    writeRegister(MPR121_TOUCHTH_0 + 2 * i, touch);
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	3341      	adds	r3, #65	@ 0x41
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	79fa      	ldrb	r2, [r7, #7]
 8000cb2:	4611      	mov	r1, r2
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff ff97 	bl	8000be8 <writeRegister>
    writeRegister(MPR121_RELEASETH_0 + 2 * i, release);
 8000cba:	7bfb      	ldrb	r3, [r7, #15]
 8000cbc:	3321      	adds	r3, #33	@ 0x21
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	79ba      	ldrb	r2, [r7, #6]
 8000cc6:	4611      	mov	r1, r2
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ff8d 	bl	8000be8 <writeRegister>
  for (uint8_t i = 0; i < 12; i++) {
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	73fb      	strb	r3, [r7, #15]
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
 8000cd6:	2b0b      	cmp	r3, #11
 8000cd8:	d9e5      	bls.n	8000ca6 <setThresholds+0x16>
  }
}
 8000cda:	bf00      	nop
 8000cdc:	bf00      	nop
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <touched>:
  if (t > 12)
    return 0;
  return readRegister16(MPR121_FILTDATA_0L + t * 2);
}

uint16_t touched(void) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
  uint16_t t = readRegister16(MPR121_TOUCHSTATUS_L);
 8000cea:	2000      	movs	r0, #0
 8000cec:	f7ff ffb4 	bl	8000c58 <readRegister16>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	80fb      	strh	r3, [r7, #6]
  return t & 0x0FFF;
 8000cf4:	88fb      	ldrh	r3, [r7, #6]
 8000cf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cfa:	b29b      	uxth	r3, r3
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <BMP180_Init>:

/**
 * @brief Initializes the BMP180 temperature/pressure sensor.
 * @param hi2c User I2C handle pointer.
 */
void BMP180_Init(I2C_HandleTypeDef *hi2c) {
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	_bmp180_ui2c = hi2c;
 8000d0c:	4a03      	ldr	r2, [pc, #12]	@ (8000d1c <BMP180_Init+0x18>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6013      	str	r3, [r2, #0]
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr
 8000d1c:	20000280 	.word	0x20000280

08000d20 <BMP180_SetOversampling>:
/**
 * @param oss Enum, oversampling setting.
 * @note Available resolutions: BMP180_LOW, BMP180_STANDARD, BMP180_HIGH, BMP180_ULTRA.
 * @note Refer to section 3.3.1 of datasheet.
 */
void BMP180_SetOversampling(BMP180_OSS oss) {
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
	_bmp180_oss = oss;
 8000d2a:	4a04      	ldr	r2, [pc, #16]	@ (8000d3c <BMP180_SetOversampling+0x1c>)
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	7013      	strb	r3, [r2, #0]
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bc80      	pop	{r7}
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	2000029a 	.word	0x2000029a

08000d40 <BMP180_UpdateCalibrationData>:

/**
 * @brief Updates calibration data.
 * @note Must be called once before main loop.
 */
void BMP180_UpdateCalibrationData(void) {
 8000d40:	b598      	push	{r3, r4, r7, lr}
 8000d42:	af00      	add	r7, sp, #0
	_bmp180_eeprom.BMP180_AC1 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC1]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC1]);
 8000d44:	23aa      	movs	r3, #170	@ 0xaa
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 f8dc 	bl	8000f04 <BMP180_ReadReg>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	021b      	lsls	r3, r3, #8
 8000d50:	b21c      	sxth	r4, r3
 8000d52:	23ab      	movs	r3, #171	@ 0xab
 8000d54:	4618      	mov	r0, r3
 8000d56:	f000 f8d5 	bl	8000f04 <BMP180_ReadReg>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	b21b      	sxth	r3, r3
 8000d5e:	4323      	orrs	r3, r4
 8000d60:	b21a      	sxth	r2, r3
 8000d62:	4b58      	ldr	r3, [pc, #352]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000d64:	801a      	strh	r2, [r3, #0]
	_bmp180_eeprom.BMP180_AC2 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC2]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC2]);
 8000d66:	23ac      	movs	r3, #172	@ 0xac
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f000 f8cb 	bl	8000f04 <BMP180_ReadReg>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	021b      	lsls	r3, r3, #8
 8000d72:	b21c      	sxth	r4, r3
 8000d74:	23ad      	movs	r3, #173	@ 0xad
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 f8c4 	bl	8000f04 <BMP180_ReadReg>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	b21b      	sxth	r3, r3
 8000d80:	4323      	orrs	r3, r4
 8000d82:	b21a      	sxth	r2, r3
 8000d84:	4b4f      	ldr	r3, [pc, #316]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000d86:	805a      	strh	r2, [r3, #2]
	_bmp180_eeprom.BMP180_AC3 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC3]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC3]);
 8000d88:	23ae      	movs	r3, #174	@ 0xae
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 f8ba 	bl	8000f04 <BMP180_ReadReg>
 8000d90:	4603      	mov	r3, r0
 8000d92:	021b      	lsls	r3, r3, #8
 8000d94:	b21c      	sxth	r4, r3
 8000d96:	23af      	movs	r3, #175	@ 0xaf
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f000 f8b3 	bl	8000f04 <BMP180_ReadReg>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	b21b      	sxth	r3, r3
 8000da2:	4323      	orrs	r3, r4
 8000da4:	b21a      	sxth	r2, r3
 8000da6:	4b47      	ldr	r3, [pc, #284]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000da8:	809a      	strh	r2, [r3, #4]
	_bmp180_eeprom.BMP180_AC4 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC4]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC4]);
 8000daa:	23b0      	movs	r3, #176	@ 0xb0
 8000dac:	4618      	mov	r0, r3
 8000dae:	f000 f8a9 	bl	8000f04 <BMP180_ReadReg>
 8000db2:	4603      	mov	r3, r0
 8000db4:	021b      	lsls	r3, r3, #8
 8000db6:	b21c      	sxth	r4, r3
 8000db8:	23b1      	movs	r3, #177	@ 0xb1
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 f8a2 	bl	8000f04 <BMP180_ReadReg>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	b21b      	sxth	r3, r3
 8000dc4:	4323      	orrs	r3, r4
 8000dc6:	b21b      	sxth	r3, r3
 8000dc8:	b29a      	uxth	r2, r3
 8000dca:	4b3e      	ldr	r3, [pc, #248]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000dcc:	80da      	strh	r2, [r3, #6]
	_bmp180_eeprom.BMP180_AC5 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC5]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC5]);
 8000dce:	23b2      	movs	r3, #178	@ 0xb2
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f000 f897 	bl	8000f04 <BMP180_ReadReg>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	021b      	lsls	r3, r3, #8
 8000dda:	b21c      	sxth	r4, r3
 8000ddc:	23b3      	movs	r3, #179	@ 0xb3
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 f890 	bl	8000f04 <BMP180_ReadReg>
 8000de4:	4603      	mov	r3, r0
 8000de6:	b21b      	sxth	r3, r3
 8000de8:	4323      	orrs	r3, r4
 8000dea:	b21b      	sxth	r3, r3
 8000dec:	b29a      	uxth	r2, r3
 8000dee:	4b35      	ldr	r3, [pc, #212]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000df0:	811a      	strh	r2, [r3, #8]
	_bmp180_eeprom.BMP180_AC6 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC6]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC6]);
 8000df2:	23b4      	movs	r3, #180	@ 0xb4
 8000df4:	4618      	mov	r0, r3
 8000df6:	f000 f885 	bl	8000f04 <BMP180_ReadReg>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	021b      	lsls	r3, r3, #8
 8000dfe:	b21c      	sxth	r4, r3
 8000e00:	23b5      	movs	r3, #181	@ 0xb5
 8000e02:	4618      	mov	r0, r3
 8000e04:	f000 f87e 	bl	8000f04 <BMP180_ReadReg>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	b21b      	sxth	r3, r3
 8000e0c:	4323      	orrs	r3, r4
 8000e0e:	b21b      	sxth	r3, r3
 8000e10:	b29a      	uxth	r2, r3
 8000e12:	4b2c      	ldr	r3, [pc, #176]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000e14:	815a      	strh	r2, [r3, #10]
	_bmp180_eeprom.BMP180_B1 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B1]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_B1]);
 8000e16:	23b6      	movs	r3, #182	@ 0xb6
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 f873 	bl	8000f04 <BMP180_ReadReg>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	021b      	lsls	r3, r3, #8
 8000e22:	b21c      	sxth	r4, r3
 8000e24:	23b7      	movs	r3, #183	@ 0xb7
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 f86c 	bl	8000f04 <BMP180_ReadReg>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	b21b      	sxth	r3, r3
 8000e30:	4323      	orrs	r3, r4
 8000e32:	b21a      	sxth	r2, r3
 8000e34:	4b23      	ldr	r3, [pc, #140]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000e36:	819a      	strh	r2, [r3, #12]
	_bmp180_eeprom.BMP180_B2 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B2]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_B2]);
 8000e38:	23b8      	movs	r3, #184	@ 0xb8
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 f862 	bl	8000f04 <BMP180_ReadReg>
 8000e40:	4603      	mov	r3, r0
 8000e42:	021b      	lsls	r3, r3, #8
 8000e44:	b21c      	sxth	r4, r3
 8000e46:	23b9      	movs	r3, #185	@ 0xb9
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f000 f85b 	bl	8000f04 <BMP180_ReadReg>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	b21b      	sxth	r3, r3
 8000e52:	4323      	orrs	r3, r4
 8000e54:	b21a      	sxth	r2, r3
 8000e56:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000e58:	81da      	strh	r2, [r3, #14]
	_bmp180_eeprom.BMP180_MB = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MB]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MB]);
 8000e5a:	23ba      	movs	r3, #186	@ 0xba
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f000 f851 	bl	8000f04 <BMP180_ReadReg>
 8000e62:	4603      	mov	r3, r0
 8000e64:	021b      	lsls	r3, r3, #8
 8000e66:	b21c      	sxth	r4, r3
 8000e68:	23bb      	movs	r3, #187	@ 0xbb
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 f84a 	bl	8000f04 <BMP180_ReadReg>
 8000e70:	4603      	mov	r3, r0
 8000e72:	b21b      	sxth	r3, r3
 8000e74:	4323      	orrs	r3, r4
 8000e76:	b21a      	sxth	r2, r3
 8000e78:	4b12      	ldr	r3, [pc, #72]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000e7a:	821a      	strh	r2, [r3, #16]
	_bmp180_eeprom.BMP180_MC = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MC]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MC]);
 8000e7c:	23bc      	movs	r3, #188	@ 0xbc
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 f840 	bl	8000f04 <BMP180_ReadReg>
 8000e84:	4603      	mov	r3, r0
 8000e86:	021b      	lsls	r3, r3, #8
 8000e88:	b21c      	sxth	r4, r3
 8000e8a:	23bd      	movs	r3, #189	@ 0xbd
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f000 f839 	bl	8000f04 <BMP180_ReadReg>
 8000e92:	4603      	mov	r3, r0
 8000e94:	b21b      	sxth	r3, r3
 8000e96:	4323      	orrs	r3, r4
 8000e98:	b21a      	sxth	r2, r3
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000e9c:	825a      	strh	r2, [r3, #18]
	_bmp180_eeprom.BMP180_MD = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MD]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MD]);
 8000e9e:	23be      	movs	r3, #190	@ 0xbe
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f000 f82f 	bl	8000f04 <BMP180_ReadReg>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	021b      	lsls	r3, r3, #8
 8000eaa:	b21c      	sxth	r4, r3
 8000eac:	23bf      	movs	r3, #191	@ 0xbf
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 f828 	bl	8000f04 <BMP180_ReadReg>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	b21b      	sxth	r3, r3
 8000eb8:	4323      	orrs	r3, r4
 8000eba:	b21a      	sxth	r2, r3
 8000ebc:	4b01      	ldr	r3, [pc, #4]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000ebe:	829a      	strh	r2, [r3, #20]
}
 8000ec0:	bf00      	nop
 8000ec2:	bd98      	pop	{r3, r4, r7, pc}
 8000ec4:	20000284 	.word	0x20000284

08000ec8 <BMP180_WriteReg>:
/**
 * @brief Writes to a specific register.
 * @param reg Address of register to write to.
 * @param cmd Byte to write.
 */
void BMP180_WriteReg(uint8_t reg, uint8_t cmd) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af02      	add	r7, sp, #8
 8000ece:	4603      	mov	r3, r0
 8000ed0:	460a      	mov	r2, r1
 8000ed2:	71fb      	strb	r3, [r7, #7]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	71bb      	strb	r3, [r7, #6]
	uint8_t arr[2] = { reg, cmd };
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	733b      	strb	r3, [r7, #12]
 8000edc:	79bb      	ldrb	r3, [r7, #6]
 8000ede:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, arr, 2, BMP180_I2C_TIMEOUT);
 8000ee0:	4b07      	ldr	r3, [pc, #28]	@ (8000f00 <BMP180_WriteReg+0x38>)
 8000ee2:	6818      	ldr	r0, [r3, #0]
 8000ee4:	f107 020c 	add.w	r2, r7, #12
 8000ee8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	2302      	movs	r3, #2
 8000ef0:	21ee      	movs	r1, #238	@ 0xee
 8000ef2:	f002 fa3d 	bl	8003370 <HAL_I2C_Master_Transmit>
}
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000280 	.word	0x20000280

08000f04 <BMP180_ReadReg>:
/**
 * @brief Reads from a specific register.
 * @param reg Address of register to read from.
 * @return Byte read.
 */
uint8_t BMP180_ReadReg(uint8_t reg) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af02      	add	r7, sp, #8
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 8000f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f44 <BMP180_ReadReg+0x40>)
 8000f10:	6818      	ldr	r0, [r3, #0]
 8000f12:	1dfa      	adds	r2, r7, #7
 8000f14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	21ee      	movs	r1, #238	@ 0xee
 8000f1e:	f002 fa27 	bl	8003370 <HAL_I2C_Master_Transmit>
	uint8_t result;
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 8000f22:	4b08      	ldr	r3, [pc, #32]	@ (8000f44 <BMP180_ReadReg+0x40>)
 8000f24:	6818      	ldr	r0, [r3, #0]
 8000f26:	f107 020f 	add.w	r2, r7, #15
 8000f2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	2301      	movs	r3, #1
 8000f32:	21ee      	movs	r1, #238	@ 0xee
 8000f34:	f002 fb1a 	bl	800356c <HAL_I2C_Master_Receive>
	return result;
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000280 	.word	0x20000280

08000f48 <BMP180_GetRawTemperature>:

/**
 * @brief Measures and calculates temperature.
 * @return Temperature in 0.1 (1/10) degrees Celsius.
 */
int32_t BMP180_GetRawTemperature(void) {
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_TEMP);
 8000f4e:	232e      	movs	r3, #46	@ 0x2e
 8000f50:	4619      	mov	r1, r3
 8000f52:	20f4      	movs	r0, #244	@ 0xf4
 8000f54:	f7ff ffb8 	bl	8000ec8 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_TEMP);
 8000f58:	2305      	movs	r3, #5
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f001 fdf2 	bl	8002b44 <HAL_Delay>
	int32_t ut = (BMP180_ReadReg(BMP180_MSB_REG) << 8) | BMP180_ReadReg(BMP180_LSB_REG);
 8000f60:	20f6      	movs	r0, #246	@ 0xf6
 8000f62:	f7ff ffcf 	bl	8000f04 <BMP180_ReadReg>
 8000f66:	4603      	mov	r3, r0
 8000f68:	021c      	lsls	r4, r3, #8
 8000f6a:	20f7      	movs	r0, #247	@ 0xf7
 8000f6c:	f7ff ffca 	bl	8000f04 <BMP180_ReadReg>
 8000f70:	4603      	mov	r3, r0
 8000f72:	4323      	orrs	r3, r4
 8000f74:	60fb      	str	r3, [r7, #12]
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 8000f76:	4b15      	ldr	r3, [pc, #84]	@ (8000fcc <BMP180_GetRawTemperature+0x84>)
 8000f78:	895b      	ldrh	r3, [r3, #10]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	1a9b      	subs	r3, r3, r2
 8000f80:	4a12      	ldr	r2, [pc, #72]	@ (8000fcc <BMP180_GetRawTemperature+0x84>)
 8000f82:	8912      	ldrh	r2, [r2, #8]
 8000f84:	fb02 f303 	mul.w	r3, r2, r3
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	da02      	bge.n	8000f92 <BMP180_GetRawTemperature+0x4a>
 8000f8c:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8000f90:	337f      	adds	r3, #127	@ 0x7f
 8000f92:	13db      	asrs	r3, r3, #15
 8000f94:	60bb      	str	r3, [r7, #8]
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 8000f96:	4b0d      	ldr	r3, [pc, #52]	@ (8000fcc <BMP180_GetRawTemperature+0x84>)
 8000f98:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000f9c:	02da      	lsls	r2, r3, #11
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fcc <BMP180_GetRawTemperature+0x84>)
 8000fa0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	440b      	add	r3, r1
 8000faa:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fae:	607b      	str	r3, [r7, #4]
	int32_t b5 = x1 + x2;
 8000fb0:	68ba      	ldr	r2, [r7, #8]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	603b      	str	r3, [r7, #0]
	return (b5 + 8) / (1 << 4);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	3308      	adds	r3, #8
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	da00      	bge.n	8000fc2 <BMP180_GetRawTemperature+0x7a>
 8000fc0:	330f      	adds	r3, #15
 8000fc2:	111b      	asrs	r3, r3, #4
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd90      	pop	{r4, r7, pc}
 8000fcc:	20000284 	.word	0x20000284

08000fd0 <BMP180_GetTemperature>:

/**
 * @brief Measures and calculates temperature.
 * @return Temperature in degrees Celsius.
 */
float BMP180_GetTemperature(void) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
	int32_t temp = BMP180_GetRawTemperature();
 8000fd6:	f7ff ffb7 	bl	8000f48 <BMP180_GetRawTemperature>
 8000fda:	6078      	str	r0, [r7, #4]
	return temp / 10.0;
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff fa11 	bl	8000404 <__aeabi_i2d>
 8000fe2:	f04f 0200 	mov.w	r2, #0
 8000fe6:	4b07      	ldr	r3, [pc, #28]	@ (8001004 <BMP180_GetTemperature+0x34>)
 8000fe8:	f7ff fba0 	bl	800072c <__aeabi_ddiv>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	4610      	mov	r0, r2
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f7ff fd48 	bl	8000a88 <__aeabi_d2f>
 8000ff8:	4603      	mov	r3, r0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40240000 	.word	0x40240000

08001008 <BMP180_GetPressure>:

/**
 * @brief Measures and calculates pressure.
 * @return Pressure in Pascal(Pa).
 */
int32_t BMP180_GetPressure(void) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b08c      	sub	sp, #48	@ 0x30
 800100c:	af00      	add	r7, sp, #0
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_TEMP);
 800100e:	232e      	movs	r3, #46	@ 0x2e
 8001010:	4619      	mov	r1, r3
 8001012:	20f4      	movs	r0, #244	@ 0xf4
 8001014:	f7ff ff58 	bl	8000ec8 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_TEMP);
 8001018:	2305      	movs	r3, #5
 800101a:	4618      	mov	r0, r3
 800101c:	f001 fd92 	bl	8002b44 <HAL_Delay>
	int32_t ut = BMP180_GetUT();
 8001020:	f000 f902 	bl	8001228 <BMP180_GetUT>
 8001024:	62b8      	str	r0, [r7, #40]	@ 0x28
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_PRES[_bmp180_oss]);
 8001026:	4b7b      	ldr	r3, [pc, #492]	@ (8001214 <BMP180_GetPressure+0x20c>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	461a      	mov	r2, r3
 800102c:	4b7a      	ldr	r3, [pc, #488]	@ (8001218 <BMP180_GetPressure+0x210>)
 800102e:	5c9b      	ldrb	r3, [r3, r2]
 8001030:	4619      	mov	r1, r3
 8001032:	20f4      	movs	r0, #244	@ 0xf4
 8001034:	f7ff ff48 	bl	8000ec8 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_PRES[_bmp180_oss]);
 8001038:	4b76      	ldr	r3, [pc, #472]	@ (8001214 <BMP180_GetPressure+0x20c>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	4b77      	ldr	r3, [pc, #476]	@ (800121c <BMP180_GetPressure+0x214>)
 8001040:	5c9b      	ldrb	r3, [r3, r2]
 8001042:	4618      	mov	r0, r3
 8001044:	f001 fd7e 	bl	8002b44 <HAL_Delay>
	int32_t up = BMP180_GetUP();
 8001048:	f000 f8fc 	bl	8001244 <BMP180_GetUP>
 800104c:	6278      	str	r0, [r7, #36]	@ 0x24
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 800104e:	4b74      	ldr	r3, [pc, #464]	@ (8001220 <BMP180_GetPressure+0x218>)
 8001050:	895b      	ldrh	r3, [r3, #10]
 8001052:	461a      	mov	r2, r3
 8001054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001056:	1a9b      	subs	r3, r3, r2
 8001058:	4a71      	ldr	r2, [pc, #452]	@ (8001220 <BMP180_GetPressure+0x218>)
 800105a:	8912      	ldrh	r2, [r2, #8]
 800105c:	fb02 f303 	mul.w	r3, r2, r3
 8001060:	2b00      	cmp	r3, #0
 8001062:	da02      	bge.n	800106a <BMP180_GetPressure+0x62>
 8001064:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8001068:	337f      	adds	r3, #127	@ 0x7f
 800106a:	13db      	asrs	r3, r3, #15
 800106c:	623b      	str	r3, [r7, #32]
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 800106e:	4b6c      	ldr	r3, [pc, #432]	@ (8001220 <BMP180_GetPressure+0x218>)
 8001070:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001074:	02da      	lsls	r2, r3, #11
 8001076:	4b6a      	ldr	r3, [pc, #424]	@ (8001220 <BMP180_GetPressure+0x218>)
 8001078:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800107c:	4619      	mov	r1, r3
 800107e:	6a3b      	ldr	r3, [r7, #32]
 8001080:	440b      	add	r3, r1
 8001082:	fb92 f3f3 	sdiv	r3, r2, r3
 8001086:	61fb      	str	r3, [r7, #28]
	int32_t b5 = x1 + x2;
 8001088:	6a3a      	ldr	r2, [r7, #32]
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	4413      	add	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
	int32_t b6 = b5 - 4000;
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 8001096:	617b      	str	r3, [r7, #20]
	x1 = (_bmp180_eeprom.BMP180_B2 * (b6 * b6 / (1 << 12))) / (1 << 11);
 8001098:	4b61      	ldr	r3, [pc, #388]	@ (8001220 <BMP180_GetPressure+0x218>)
 800109a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800109e:	461a      	mov	r2, r3
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fb03 f303 	mul.w	r3, r3, r3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	da01      	bge.n	80010ae <BMP180_GetPressure+0xa6>
 80010aa:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80010ae:	131b      	asrs	r3, r3, #12
 80010b0:	fb02 f303 	mul.w	r3, r2, r3
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	da01      	bge.n	80010bc <BMP180_GetPressure+0xb4>
 80010b8:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 80010bc:	12db      	asrs	r3, r3, #11
 80010be:	623b      	str	r3, [r7, #32]
	x2 = _bmp180_eeprom.BMP180_AC2 * b6 / (1 << 11);
 80010c0:	4b57      	ldr	r3, [pc, #348]	@ (8001220 <BMP180_GetPressure+0x218>)
 80010c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010c6:	461a      	mov	r2, r3
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	fb02 f303 	mul.w	r3, r2, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	da01      	bge.n	80010d6 <BMP180_GetPressure+0xce>
 80010d2:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 80010d6:	12db      	asrs	r3, r3, #11
 80010d8:	61fb      	str	r3, [r7, #28]
	int32_t x3 = x1 + x2;
 80010da:	6a3a      	ldr	r2, [r7, #32]
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	4413      	add	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
	int32_t b3 = (((_bmp180_eeprom.BMP180_AC1 * 4 + x3) << _bmp180_oss) + 2) / 4;
 80010e2:	4b4f      	ldr	r3, [pc, #316]	@ (8001220 <BMP180_GetPressure+0x218>)
 80010e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e8:	009a      	lsls	r2, r3, #2
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	4413      	add	r3, r2
 80010ee:	4a49      	ldr	r2, [pc, #292]	@ (8001214 <BMP180_GetPressure+0x20c>)
 80010f0:	7812      	ldrb	r2, [r2, #0]
 80010f2:	4093      	lsls	r3, r2
 80010f4:	3302      	adds	r3, #2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	da00      	bge.n	80010fc <BMP180_GetPressure+0xf4>
 80010fa:	3303      	adds	r3, #3
 80010fc:	109b      	asrs	r3, r3, #2
 80010fe:	60fb      	str	r3, [r7, #12]
	x1 = _bmp180_eeprom.BMP180_AC3 * b6 / (1 << 13);
 8001100:	4b47      	ldr	r3, [pc, #284]	@ (8001220 <BMP180_GetPressure+0x218>)
 8001102:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001106:	461a      	mov	r2, r3
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	fb02 f303 	mul.w	r3, r2, r3
 800110e:	2b00      	cmp	r3, #0
 8001110:	da02      	bge.n	8001118 <BMP180_GetPressure+0x110>
 8001112:	f503 53ff 	add.w	r3, r3, #8160	@ 0x1fe0
 8001116:	331f      	adds	r3, #31
 8001118:	135b      	asrs	r3, r3, #13
 800111a:	623b      	str	r3, [r7, #32]
	x2 = (_bmp180_eeprom.BMP180_B1 * (b6 * b6 / (1 << 12))) / (1 << 16);
 800111c:	4b40      	ldr	r3, [pc, #256]	@ (8001220 <BMP180_GetPressure+0x218>)
 800111e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001122:	461a      	mov	r2, r3
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	fb03 f303 	mul.w	r3, r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	da01      	bge.n	8001132 <BMP180_GetPressure+0x12a>
 800112e:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8001132:	131b      	asrs	r3, r3, #12
 8001134:	fb02 f303 	mul.w	r3, r2, r3
 8001138:	2b00      	cmp	r3, #0
 800113a:	da02      	bge.n	8001142 <BMP180_GetPressure+0x13a>
 800113c:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001140:	33ff      	adds	r3, #255	@ 0xff
 8001142:	141b      	asrs	r3, r3, #16
 8001144:	61fb      	str	r3, [r7, #28]
	x3 = ((x1 + x2) + 2) / 4;
 8001146:	6a3a      	ldr	r2, [r7, #32]
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	4413      	add	r3, r2
 800114c:	3302      	adds	r3, #2
 800114e:	2b00      	cmp	r3, #0
 8001150:	da00      	bge.n	8001154 <BMP180_GetPressure+0x14c>
 8001152:	3303      	adds	r3, #3
 8001154:	109b      	asrs	r3, r3, #2
 8001156:	613b      	str	r3, [r7, #16]
	uint32_t b4 = _bmp180_eeprom.BMP180_AC4 * (uint32_t) (x3 + 32768) / (1 << 15);
 8001158:	4b31      	ldr	r3, [pc, #196]	@ (8001220 <BMP180_GetPressure+0x218>)
 800115a:	88db      	ldrh	r3, [r3, #6]
 800115c:	461a      	mov	r2, r3
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001164:	fb02 f303 	mul.w	r3, r2, r3
 8001168:	0bdb      	lsrs	r3, r3, #15
 800116a:	60bb      	str	r3, [r7, #8]
	uint32_t b7 = ((uint32_t) up - b3) * (50000 >> _bmp180_oss);
 800116c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	4a28      	ldr	r2, [pc, #160]	@ (8001214 <BMP180_GetPressure+0x20c>)
 8001174:	7812      	ldrb	r2, [r2, #0]
 8001176:	4611      	mov	r1, r2
 8001178:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800117c:	410a      	asrs	r2, r1
 800117e:	fb02 f303 	mul.w	r3, r2, r3
 8001182:	607b      	str	r3, [r7, #4]
	int32_t p;
	if (b7 < 0x80000000)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	db06      	blt.n	8001198 <BMP180_GetPressure+0x190>
		p = (b7 * 2) / b4;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	005a      	lsls	r2, r3, #1
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	fbb2 f3f3 	udiv	r3, r2, r3
 8001194:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001196:	e005      	b.n	80011a4 <BMP180_GetPressure+0x19c>
	else
		p = (b7 / b4) * 2;
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	x1 = (p / (1 << 8)) * (p / (1 << 8));
 80011a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	da00      	bge.n	80011ac <BMP180_GetPressure+0x1a4>
 80011aa:	33ff      	adds	r3, #255	@ 0xff
 80011ac:	121b      	asrs	r3, r3, #8
 80011ae:	461a      	mov	r2, r3
 80011b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	da00      	bge.n	80011b8 <BMP180_GetPressure+0x1b0>
 80011b6:	33ff      	adds	r3, #255	@ 0xff
 80011b8:	121b      	asrs	r3, r3, #8
 80011ba:	fb02 f303 	mul.w	r3, r2, r3
 80011be:	623b      	str	r3, [r7, #32]
	x1 = (x1 * 3038) / (1 << 16);
 80011c0:	6a3b      	ldr	r3, [r7, #32]
 80011c2:	f640 32de 	movw	r2, #3038	@ 0xbde
 80011c6:	fb02 f303 	mul.w	r3, r2, r3
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	da02      	bge.n	80011d4 <BMP180_GetPressure+0x1cc>
 80011ce:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80011d2:	33ff      	adds	r3, #255	@ 0xff
 80011d4:	141b      	asrs	r3, r3, #16
 80011d6:	623b      	str	r3, [r7, #32]
	x2 = (-7357 * p) / (1 << 16);
 80011d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011da:	4a12      	ldr	r2, [pc, #72]	@ (8001224 <BMP180_GetPressure+0x21c>)
 80011dc:	fb02 f303 	mul.w	r3, r2, r3
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	da02      	bge.n	80011ea <BMP180_GetPressure+0x1e2>
 80011e4:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80011e8:	33ff      	adds	r3, #255	@ 0xff
 80011ea:	141b      	asrs	r3, r3, #16
 80011ec:	61fb      	str	r3, [r7, #28]
	p = p + (x1 + x2 + 3791) / (1 << 4);
 80011ee:	6a3a      	ldr	r2, [r7, #32]
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	4413      	add	r3, r2
 80011f4:	f603 63cf 	addw	r3, r3, #3791	@ 0xecf
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	da00      	bge.n	80011fe <BMP180_GetPressure+0x1f6>
 80011fc:	330f      	adds	r3, #15
 80011fe:	111b      	asrs	r3, r3, #4
 8001200:	461a      	mov	r2, r3
 8001202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001204:	4413      	add	r3, r2
 8001206:	62fb      	str	r3, [r7, #44]	@ 0x2c
	return p;
 8001208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800120a:	4618      	mov	r0, r3
 800120c:	3730      	adds	r7, #48	@ 0x30
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	2000029a 	.word	0x2000029a
 8001218:	0800a1f0 	.word	0x0800a1f0
 800121c:	0800a1f4 	.word	0x0800a1f4
 8001220:	20000284 	.word	0x20000284
 8001224:	ffffe343 	.word	0xffffe343

08001228 <BMP180_GetUT>:

int32_t BMP180_GetUT(void){
 8001228:	b598      	push	{r3, r4, r7, lr}
 800122a:	af00      	add	r7, sp, #0
	return (BMP180_ReadReg(BMP180_MSB_REG) << 8) | BMP180_ReadReg(BMP180_LSB_REG);
 800122c:	20f6      	movs	r0, #246	@ 0xf6
 800122e:	f7ff fe69 	bl	8000f04 <BMP180_ReadReg>
 8001232:	4603      	mov	r3, r0
 8001234:	021c      	lsls	r4, r3, #8
 8001236:	20f7      	movs	r0, #247	@ 0xf7
 8001238:	f7ff fe64 	bl	8000f04 <BMP180_ReadReg>
 800123c:	4603      	mov	r3, r0
 800123e:	4323      	orrs	r3, r4
}
 8001240:	4618      	mov	r0, r3
 8001242:	bd98      	pop	{r3, r4, r7, pc}

08001244 <BMP180_GetUP>:

int32_t BMP180_GetUP(void){
 8001244:	b598      	push	{r3, r4, r7, lr}
 8001246:	af00      	add	r7, sp, #0
	return ((BMP180_ReadReg(BMP180_MSB_REG) << 16) | (BMP180_ReadReg(BMP180_LSB_REG) << 8) | BMP180_ReadReg(BMP180_XLSB_REG)) >> (8 - _bmp180_oss);
 8001248:	20f6      	movs	r0, #246	@ 0xf6
 800124a:	f7ff fe5b 	bl	8000f04 <BMP180_ReadReg>
 800124e:	4603      	mov	r3, r0
 8001250:	041c      	lsls	r4, r3, #16
 8001252:	20f7      	movs	r0, #247	@ 0xf7
 8001254:	f7ff fe56 	bl	8000f04 <BMP180_ReadReg>
 8001258:	4603      	mov	r3, r0
 800125a:	021b      	lsls	r3, r3, #8
 800125c:	431c      	orrs	r4, r3
 800125e:	20f8      	movs	r0, #248	@ 0xf8
 8001260:	f7ff fe50 	bl	8000f04 <BMP180_ReadReg>
 8001264:	4603      	mov	r3, r0
 8001266:	ea44 0203 	orr.w	r2, r4, r3
 800126a:	4b04      	ldr	r3, [pc, #16]	@ (800127c <BMP180_GetUP+0x38>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	f1c3 0308 	rsb	r3, r3, #8
 8001272:	fa42 f303 	asr.w	r3, r2, r3
}
 8001276:	4618      	mov	r0, r3
 8001278:	bd98      	pop	{r3, r4, r7, pc}
 800127a:	bf00      	nop
 800127c:	2000029a 	.word	0x2000029a

08001280 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	4a06      	ldr	r2, [pc, #24]	@ (80012a8 <vApplicationGetIdleTaskMemory+0x28>)
 8001290:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	4a05      	ldr	r2, [pc, #20]	@ (80012ac <vApplicationGetIdleTaskMemory+0x2c>)
 8001296:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2280      	movs	r2, #128	@ 0x80
 800129c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800129e:	bf00      	nop
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr
 80012a8:	2000029c 	.word	0x2000029c
 80012ac:	2000033c 	.word	0x2000033c

080012b0 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 80012ba:	4a38      	ldr	r2, [pc, #224]	@ (800139c <HD44780_Init+0xec>)
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 80012c0:	4b37      	ldr	r3, [pc, #220]	@ (80013a0 <HD44780_Init+0xf0>)
 80012c2:	2208      	movs	r2, #8
 80012c4:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80012c6:	4b37      	ldr	r3, [pc, #220]	@ (80013a4 <HD44780_Init+0xf4>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 80012cc:	4b33      	ldr	r3, [pc, #204]	@ (800139c <HD44780_Init+0xec>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d907      	bls.n	80012e4 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 80012d4:	4b33      	ldr	r3, [pc, #204]	@ (80013a4 <HD44780_Init+0xf4>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	f043 0308 	orr.w	r3, r3, #8
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	4b31      	ldr	r3, [pc, #196]	@ (80013a4 <HD44780_Init+0xf4>)
 80012e0:	701a      	strb	r2, [r3, #0]
 80012e2:	e006      	b.n	80012f2 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 80012e4:	4b2f      	ldr	r3, [pc, #188]	@ (80013a4 <HD44780_Init+0xf4>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	f043 0304 	orr.w	r3, r3, #4
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4b2d      	ldr	r3, [pc, #180]	@ (80013a4 <HD44780_Init+0xf4>)
 80012f0:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 80012f2:	f000 f985 	bl	8001600 <DelayInit>
  HAL_Delay(50);
 80012f6:	2032      	movs	r0, #50	@ 0x32
 80012f8:	f001 fc24 	bl	8002b44 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 80012fc:	4b28      	ldr	r3, [pc, #160]	@ (80013a0 <HD44780_Init+0xf0>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f000 f943 	bl	800158c <ExpanderWrite>
  HAL_Delay(1000);
 8001306:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800130a:	f001 fc1b 	bl	8002b44 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 800130e:	2030      	movs	r0, #48	@ 0x30
 8001310:	f000 f92b 	bl	800156a <Write4Bits>
  DelayUS(4500);
 8001314:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001318:	f000 f99a 	bl	8001650 <DelayUS>

  Write4Bits(0x03 << 4);
 800131c:	2030      	movs	r0, #48	@ 0x30
 800131e:	f000 f924 	bl	800156a <Write4Bits>
  DelayUS(4500);
 8001322:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001326:	f000 f993 	bl	8001650 <DelayUS>

  Write4Bits(0x03 << 4);
 800132a:	2030      	movs	r0, #48	@ 0x30
 800132c:	f000 f91d 	bl	800156a <Write4Bits>
  DelayUS(4500);
 8001330:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001334:	f000 f98c 	bl	8001650 <DelayUS>

  Write4Bits(0x02 << 4);
 8001338:	2020      	movs	r0, #32
 800133a:	f000 f916 	bl	800156a <Write4Bits>
  DelayUS(100);
 800133e:	2064      	movs	r0, #100	@ 0x64
 8001340:	f000 f986 	bl	8001650 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8001344:	4b17      	ldr	r3, [pc, #92]	@ (80013a4 <HD44780_Init+0xf4>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	f043 0320 	orr.w	r3, r3, #32
 800134c:	b2db      	uxtb	r3, r3
 800134e:	4618      	mov	r0, r3
 8001350:	f000 f8ce 	bl	80014f0 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001354:	4b14      	ldr	r3, [pc, #80]	@ (80013a8 <HD44780_Init+0xf8>)
 8001356:	2204      	movs	r2, #4
 8001358:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800135a:	f000 f875 	bl	8001448 <HD44780_Display>
  HD44780_Clear();
 800135e:	f000 f82b 	bl	80013b8 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001362:	4b12      	ldr	r3, [pc, #72]	@ (80013ac <HD44780_Init+0xfc>)
 8001364:	2202      	movs	r2, #2
 8001366:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8001368:	4b10      	ldr	r3, [pc, #64]	@ (80013ac <HD44780_Init+0xfc>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	f043 0304 	orr.w	r3, r3, #4
 8001370:	b2db      	uxtb	r3, r3
 8001372:	4618      	mov	r0, r3
 8001374:	f000 f8bc 	bl	80014f0 <SendCommand>
  DelayUS(4500);
 8001378:	f241 1094 	movw	r0, #4500	@ 0x1194
 800137c:	f000 f968 	bl	8001650 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8001380:	490b      	ldr	r1, [pc, #44]	@ (80013b0 <HD44780_Init+0x100>)
 8001382:	2000      	movs	r0, #0
 8001384:	f000 f876 	bl	8001474 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8001388:	490a      	ldr	r1, [pc, #40]	@ (80013b4 <HD44780_Init+0x104>)
 800138a:	2001      	movs	r0, #1
 800138c:	f000 f872 	bl	8001474 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8001390:	f000 f81d 	bl	80013ce <HD44780_Home>
}
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	2000053f 	.word	0x2000053f
 80013a0:	20000540 	.word	0x20000540
 80013a4:	2000053c 	.word	0x2000053c
 80013a8:	2000053d 	.word	0x2000053d
 80013ac:	2000053e 	.word	0x2000053e
 80013b0:	20000000 	.word	0x20000000
 80013b4:	20000008 	.word	0x20000008

080013b8 <HD44780_Clear>:

void HD44780_Clear()
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 80013bc:	2001      	movs	r0, #1
 80013be:	f000 f897 	bl	80014f0 <SendCommand>
  DelayUS(2000);
 80013c2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80013c6:	f000 f943 	bl	8001650 <DelayUS>
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HD44780_Home>:

void HD44780_Home()
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80013d2:	2002      	movs	r0, #2
 80013d4:	f000 f88c 	bl	80014f0 <SendCommand>
  DelayUS(2000);
 80013d8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80013dc:	f000 f938 	bl	8001650 <DelayUS>
}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 80013e4:	b590      	push	{r4, r7, lr}
 80013e6:	b087      	sub	sp, #28
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	460a      	mov	r2, r1
 80013ee:	71fb      	strb	r3, [r7, #7]
 80013f0:	4613      	mov	r3, r2
 80013f2:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80013f4:	4b12      	ldr	r3, [pc, #72]	@ (8001440 <HD44780_SetCursor+0x5c>)
 80013f6:	f107 0408 	add.w	r4, r7, #8
 80013fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8001400:	4b10      	ldr	r3, [pc, #64]	@ (8001444 <HD44780_SetCursor+0x60>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	79ba      	ldrb	r2, [r7, #6]
 8001406:	429a      	cmp	r2, r3
 8001408:	d303      	bcc.n	8001412 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 800140a:	4b0e      	ldr	r3, [pc, #56]	@ (8001444 <HD44780_SetCursor+0x60>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	3b01      	subs	r3, #1
 8001410:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8001412:	79bb      	ldrb	r3, [r7, #6]
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	3318      	adds	r3, #24
 8001418:	443b      	add	r3, r7
 800141a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800141e:	b2da      	uxtb	r2, r3
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	4413      	add	r3, r2
 8001424:	b2db      	uxtb	r3, r3
 8001426:	b25b      	sxtb	r3, r3
 8001428:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800142c:	b25b      	sxtb	r3, r3
 800142e:	b2db      	uxtb	r3, r3
 8001430:	4618      	mov	r0, r3
 8001432:	f000 f85d 	bl	80014f0 <SendCommand>
}
 8001436:	bf00      	nop
 8001438:	371c      	adds	r7, #28
 800143a:	46bd      	mov	sp, r7
 800143c:	bd90      	pop	{r4, r7, pc}
 800143e:	bf00      	nop
 8001440:	0800a080 	.word	0x0800a080
 8001444:	2000053f 	.word	0x2000053f

08001448 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 800144c:	4b08      	ldr	r3, [pc, #32]	@ (8001470 <HD44780_Display+0x28>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	f043 0304 	orr.w	r3, r3, #4
 8001454:	b2da      	uxtb	r2, r3
 8001456:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <HD44780_Display+0x28>)
 8001458:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800145a:	4b05      	ldr	r3, [pc, #20]	@ (8001470 <HD44780_Display+0x28>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	f043 0308 	orr.w	r3, r3, #8
 8001462:	b2db      	uxtb	r3, r3
 8001464:	4618      	mov	r0, r3
 8001466:	f000 f843 	bl	80014f0 <SendCommand>
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	2000053d 	.word	0x2000053d

08001474 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	6039      	str	r1, [r7, #0]
 800147e:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	b25b      	sxtb	r3, r3
 800148e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001492:	b25b      	sxtb	r3, r3
 8001494:	b2db      	uxtb	r3, r3
 8001496:	4618      	mov	r0, r3
 8001498:	f000 f82a 	bl	80014f0 <SendCommand>
  for (int i=0; i<8; i++)
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	e009      	b.n	80014b6 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 f82e 	bl	800150c <SendChar>
  for (int i=0; i<8; i++)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	3301      	adds	r3, #1
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2b07      	cmp	r3, #7
 80014ba:	ddf2      	ble.n	80014a2 <HD44780_CreateSpecialChar+0x2e>
  }
}
 80014bc:	bf00      	nop
 80014be:	bf00      	nop
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80014ce:	e006      	b.n	80014de <HD44780_PrintStr+0x18>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	1c5a      	adds	r2, r3, #1
 80014d4:	607a      	str	r2, [r7, #4]
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	4618      	mov	r0, r3
 80014da:	f000 f817 	bl	800150c <SendChar>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f4      	bne.n	80014d0 <HD44780_PrintStr+0xa>
}
 80014e6:	bf00      	nop
 80014e8:	bf00      	nop
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	2100      	movs	r1, #0
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 f812 	bl	8001528 <Send>
}
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <SendChar>:

static void SendChar(uint8_t ch)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	2101      	movs	r1, #1
 800151a:	4618      	mov	r0, r3
 800151c:	f000 f804 	bl	8001528 <Send>
}
 8001520:	bf00      	nop
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	460a      	mov	r2, r1
 8001532:	71fb      	strb	r3, [r7, #7]
 8001534:	4613      	mov	r3, r2
 8001536:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	f023 030f 	bic.w	r3, r3, #15
 800153e:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	011b      	lsls	r3, r3, #4
 8001544:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8001546:	7bfa      	ldrb	r2, [r7, #15]
 8001548:	79bb      	ldrb	r3, [r7, #6]
 800154a:	4313      	orrs	r3, r2
 800154c:	b2db      	uxtb	r3, r3
 800154e:	4618      	mov	r0, r3
 8001550:	f000 f80b 	bl	800156a <Write4Bits>
  Write4Bits((lownib)|mode);
 8001554:	7bba      	ldrb	r2, [r7, #14]
 8001556:	79bb      	ldrb	r3, [r7, #6]
 8001558:	4313      	orrs	r3, r2
 800155a:	b2db      	uxtb	r3, r3
 800155c:	4618      	mov	r0, r3
 800155e:	f000 f804 	bl	800156a <Write4Bits>
}
 8001562:	bf00      	nop
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	4603      	mov	r3, r0
 8001572:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	4618      	mov	r0, r3
 8001578:	f000 f808 	bl	800158c <ExpanderWrite>
  PulseEnable(value);
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	4618      	mov	r0, r3
 8001580:	f000 f820 	bl	80015c4 <PulseEnable>
}
 8001584:	bf00      	nop
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af02      	add	r7, sp, #8
 8001592:	4603      	mov	r3, r0
 8001594:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8001596:	4b09      	ldr	r3, [pc, #36]	@ (80015bc <ExpanderWrite+0x30>)
 8001598:	781a      	ldrb	r2, [r3, #0]
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	4313      	orrs	r3, r2
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80015a2:	f107 020f 	add.w	r2, r7, #15
 80015a6:	230a      	movs	r3, #10
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	2301      	movs	r3, #1
 80015ac:	214e      	movs	r1, #78	@ 0x4e
 80015ae:	4804      	ldr	r0, [pc, #16]	@ (80015c0 <ExpanderWrite+0x34>)
 80015b0:	f001 fede 	bl	8003370 <HAL_I2C_Master_Transmit>
}
 80015b4:	bf00      	nop
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20000540 	.word	0x20000540
 80015c0:	20000544 	.word	0x20000544

080015c4 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	f043 0304 	orr.w	r3, r3, #4
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff ffd8 	bl	800158c <ExpanderWrite>
  DelayUS(20);
 80015dc:	2014      	movs	r0, #20
 80015de:	f000 f837 	bl	8001650 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	f023 0304 	bic.w	r3, r3, #4
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff ffce 	bl	800158c <ExpanderWrite>
  DelayUS(20);
 80015f0:	2014      	movs	r0, #20
 80015f2:	f000 f82d 	bl	8001650 <DelayUS>
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <DelayInit>:

static void DelayInit(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001604:	4b10      	ldr	r3, [pc, #64]	@ (8001648 <DelayInit+0x48>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	4a0f      	ldr	r2, [pc, #60]	@ (8001648 <DelayInit+0x48>)
 800160a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800160e:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8001610:	4b0d      	ldr	r3, [pc, #52]	@ (8001648 <DelayInit+0x48>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	4a0c      	ldr	r2, [pc, #48]	@ (8001648 <DelayInit+0x48>)
 8001616:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800161a:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800161c:	4b0b      	ldr	r3, [pc, #44]	@ (800164c <DelayInit+0x4c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a0a      	ldr	r2, [pc, #40]	@ (800164c <DelayInit+0x4c>)
 8001622:	f023 0301 	bic.w	r3, r3, #1
 8001626:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001628:	4b08      	ldr	r3, [pc, #32]	@ (800164c <DelayInit+0x4c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a07      	ldr	r2, [pc, #28]	@ (800164c <DelayInit+0x4c>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8001634:	4b05      	ldr	r3, [pc, #20]	@ (800164c <DelayInit+0x4c>)
 8001636:	2200      	movs	r2, #0
 8001638:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800163a:	bf00      	nop
  __ASM volatile ("NOP");
 800163c:	bf00      	nop
  __ASM volatile ("NOP");
 800163e:	bf00      	nop
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr
 8001648:	e000edf0 	.word	0xe000edf0
 800164c:	e0001000 	.word	0xe0001000

08001650 <DelayUS>:

static void DelayUS(uint32_t us) {
 8001650:	b480      	push	{r7}
 8001652:	b087      	sub	sp, #28
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8001658:	4b0d      	ldr	r3, [pc, #52]	@ (8001690 <DelayUS+0x40>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a0d      	ldr	r2, [pc, #52]	@ (8001694 <DelayUS+0x44>)
 800165e:	fba2 2303 	umull	r2, r3, r2, r3
 8001662:	0c9a      	lsrs	r2, r3, #18
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	fb02 f303 	mul.w	r3, r2, r3
 800166a:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 800166c:	4b0a      	ldr	r3, [pc, #40]	@ (8001698 <DelayUS+0x48>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8001672:	4b09      	ldr	r3, [pc, #36]	@ (8001698 <DelayUS+0x48>)
 8001674:	685a      	ldr	r2, [r3, #4]
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	697a      	ldr	r2, [r7, #20]
 8001680:	429a      	cmp	r2, r3
 8001682:	d8f6      	bhi.n	8001672 <DelayUS+0x22>
}
 8001684:	bf00      	nop
 8001686:	bf00      	nop
 8001688:	371c      	adds	r7, #28
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr
 8001690:	2000008c 	.word	0x2000008c
 8001694:	431bde83 	.word	0x431bde83
 8001698:	e0001000 	.word	0xe0001000

0800169c <parse_data>:
    uint8_t Data[MAX_DATA_SIZE];  // Mảng dữ liệu (Data)
    uint16_t Crc;      // CRC
    uint16_t Stop;     // Stop (carriage return + newline)
    uint16_t Len;      // Chiều dài dữ liệu (Data length)
} DataStruct;
void parse_data(const char *input, DataStruct *data) {
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
    // Xác nhận ký tự Start
    char temp[10] = {0};
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	f107 0310 	add.w	r3, r7, #16
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	809a      	strh	r2, [r3, #4]
//    data->Start = input[0];  // Dấu ':'

    memset(data->Data,0,MAX_DATA_SIZE);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	3303      	adds	r3, #3
 80016b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016bc:	2100      	movs	r1, #0
 80016be:	4618      	mov	r0, r3
 80016c0:	f006 fbb1 	bl	8007e26 <memset>
    strncpy(temp, input, 2);
 80016c4:	f107 030c 	add.w	r3, r7, #12
 80016c8:	2202      	movs	r2, #2
 80016ca:	6879      	ldr	r1, [r7, #4]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f006 fbb2 	bl	8007e36 <strncpy>
    data->Start = (uint8_t)strtol(temp, NULL, 16);
 80016d2:	f107 030c 	add.w	r3, r7, #12
 80016d6:	2210      	movs	r2, #16
 80016d8:	2100      	movs	r1, #0
 80016da:	4618      	mov	r0, r3
 80016dc:	f005 fdfe 	bl	80072dc <strtol>
 80016e0:	4603      	mov	r3, r0
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	701a      	strb	r2, [r3, #0]

    // Chuyển đổi Addr
    strncpy(temp, input + 2, 2);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	1c99      	adds	r1, r3, #2
 80016ec:	f107 030c 	add.w	r3, r7, #12
 80016f0:	2202      	movs	r2, #2
 80016f2:	4618      	mov	r0, r3
 80016f4:	f006 fb9f 	bl	8007e36 <strncpy>
    data->Addr = (uint8_t)strtol(temp, NULL, 16);
 80016f8:	f107 030c 	add.w	r3, r7, #12
 80016fc:	2210      	movs	r2, #16
 80016fe:	2100      	movs	r1, #0
 8001700:	4618      	mov	r0, r3
 8001702:	f005 fdeb 	bl	80072dc <strtol>
 8001706:	4603      	mov	r3, r0
 8001708:	b2da      	uxtb	r2, r3
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	705a      	strb	r2, [r3, #1]

    // Chuyển đổi Code
    strncpy(temp, input + 4, 2);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	1d19      	adds	r1, r3, #4
 8001712:	f107 030c 	add.w	r3, r7, #12
 8001716:	2202      	movs	r2, #2
 8001718:	4618      	mov	r0, r3
 800171a:	f006 fb8c 	bl	8007e36 <strncpy>
    data->Code = (uint8_t)strtol(temp, NULL, 16);
 800171e:	f107 030c 	add.w	r3, r7, #12
 8001722:	2210      	movs	r2, #16
 8001724:	2100      	movs	r1, #0
 8001726:	4618      	mov	r0, r3
 8001728:	f005 fdd8 	bl	80072dc <strtol>
 800172c:	4603      	mov	r3, r0
 800172e:	b2da      	uxtb	r2, r3
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	709a      	strb	r2, [r3, #2]

    // Tách phần Data
    size_t dataIndex = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	61fb      	str	r3, [r7, #28]
    size_t inputIndex = 6; // Vị trí bắt đầu dữ liệu (sau Addr và Code)
 8001738:	2306      	movs	r3, #6
 800173a:	61bb      	str	r3, [r7, #24]
    while (input[inputIndex] != '\r' && input[inputIndex] != '\n' && input[inputIndex] != '\0') {
 800173c:	e01b      	b.n	8001776 <parse_data+0xda>
        strncpy(temp, input + inputIndex, 2);
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	18d1      	adds	r1, r2, r3
 8001744:	f107 030c 	add.w	r3, r7, #12
 8001748:	2202      	movs	r2, #2
 800174a:	4618      	mov	r0, r3
 800174c:	f006 fb73 	bl	8007e36 <strncpy>
        data->Data[dataIndex++] = (uint8_t)strtol(temp, NULL, 16);
 8001750:	f107 030c 	add.w	r3, r7, #12
 8001754:	2210      	movs	r2, #16
 8001756:	2100      	movs	r1, #0
 8001758:	4618      	mov	r0, r3
 800175a:	f005 fdbf 	bl	80072dc <strtol>
 800175e:	4601      	mov	r1, r0
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	1c5a      	adds	r2, r3, #1
 8001764:	61fa      	str	r2, [r7, #28]
 8001766:	b2c9      	uxtb	r1, r1
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	4413      	add	r3, r2
 800176c:	460a      	mov	r2, r1
 800176e:	70da      	strb	r2, [r3, #3]
        inputIndex += 2;
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	3302      	adds	r3, #2
 8001774:	61bb      	str	r3, [r7, #24]
    while (input[inputIndex] != '\r' && input[inputIndex] != '\n' && input[inputIndex] != '\0') {
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	4413      	add	r3, r2
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b0d      	cmp	r3, #13
 8001780:	d00b      	beq.n	800179a <parse_data+0xfe>
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	4413      	add	r3, r2
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b0a      	cmp	r3, #10
 800178c:	d005      	beq.n	800179a <parse_data+0xfe>
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	4413      	add	r3, r2
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1d1      	bne.n	800173e <parse_data+0xa2>
    }
    data->Len = dataIndex - 4; // Lưu chiều dài của Data
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	b29b      	uxth	r3, r3
 800179e:	3b04      	subs	r3, #4
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108

    // Chuyển đổi CRC
    strncpy(temp, input + inputIndex - 8, 4);
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	3b08      	subs	r3, #8
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	18d1      	adds	r1, r2, r3
 80017b0:	f107 030c 	add.w	r3, r7, #12
 80017b4:	2204      	movs	r2, #4
 80017b6:	4618      	mov	r0, r3
 80017b8:	f006 fb3d 	bl	8007e36 <strncpy>
    temp[4] = '\0';
 80017bc:	2300      	movs	r3, #0
 80017be:	743b      	strb	r3, [r7, #16]
    data->Crc = (uint16_t)strtol(temp, NULL, 16);
 80017c0:	f107 030c 	add.w	r3, r7, #12
 80017c4:	2210      	movs	r2, #16
 80017c6:	2100      	movs	r1, #0
 80017c8:	4618      	mov	r0, r3
 80017ca:	f005 fd87 	bl	80072dc <strtol>
 80017ce:	4603      	mov	r3, r0
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104

    // Chuyển đổi Stop
    data->Stop = ((uint16_t)input[inputIndex] << 8) | input[inputIndex + 1];
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	4413      	add	r3, r2
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	021b      	lsls	r3, r3, #8
 80017e2:	b21a      	sxth	r2, r3
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	3301      	adds	r3, #1
 80017e8:	6879      	ldr	r1, [r7, #4]
 80017ea:	440b      	add	r3, r1
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	b21b      	sxth	r3, r3
 80017f0:	4313      	orrs	r3, r2
 80017f2:	b21b      	sxth	r3, r3
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
}
 80017fc:	bf00      	nop
 80017fe:	3720      	adds	r7, #32
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <calculate_crc>:

uint16_t calculate_crc(uint8_t *data, size_t length) {
 8001804:	b480      	push	{r7}
 8001806:	b087      	sub	sp, #28
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
    uint16_t crc = 0xFFFF;  // Giá trị bắt đầu CRC-16 (0xFFFF)
 800180e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001812:	82fb      	strh	r3, [r7, #22]

    for (size_t i = 0; i < length; i++) {
 8001814:	2300      	movs	r3, #0
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	e022      	b.n	8001860 <calculate_crc+0x5c>
        crc ^= data[i];  // XOR byte hiện tại với CRC
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	4413      	add	r3, r2
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	8afb      	ldrh	r3, [r7, #22]
 8001826:	4053      	eors	r3, r2
 8001828:	82fb      	strh	r3, [r7, #22]
        for (uint8_t bit = 0; bit < 8; bit++) {  // Lặp qua từng bit
 800182a:	2300      	movs	r3, #0
 800182c:	73fb      	strb	r3, [r7, #15]
 800182e:	e011      	b.n	8001854 <calculate_crc+0x50>
            if (crc & 0x0001) {  // Nếu bit thấp nhất là 1
 8001830:	8afb      	ldrh	r3, [r7, #22]
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	2b00      	cmp	r3, #0
 8001838:	d006      	beq.n	8001848 <calculate_crc+0x44>
                crc = (crc >> 1) ^ 0xA001;  // Dịch sang phải và XOR với 0xA001
 800183a:	8afb      	ldrh	r3, [r7, #22]
 800183c:	085b      	lsrs	r3, r3, #1
 800183e:	b29a      	uxth	r2, r3
 8001840:	4b14      	ldr	r3, [pc, #80]	@ (8001894 <calculate_crc+0x90>)
 8001842:	4053      	eors	r3, r2
 8001844:	82fb      	strh	r3, [r7, #22]
 8001846:	e002      	b.n	800184e <calculate_crc+0x4a>
            } else {
                crc >>= 1;  // Chỉ dịch CRC sang phải nếu bit thấp nhất là 0
 8001848:	8afb      	ldrh	r3, [r7, #22]
 800184a:	085b      	lsrs	r3, r3, #1
 800184c:	82fb      	strh	r3, [r7, #22]
        for (uint8_t bit = 0; bit < 8; bit++) {  // Lặp qua từng bit
 800184e:	7bfb      	ldrb	r3, [r7, #15]
 8001850:	3301      	adds	r3, #1
 8001852:	73fb      	strb	r3, [r7, #15]
 8001854:	7bfb      	ldrb	r3, [r7, #15]
 8001856:	2b07      	cmp	r3, #7
 8001858:	d9ea      	bls.n	8001830 <calculate_crc+0x2c>
    for (size_t i = 0; i < length; i++) {
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	3301      	adds	r3, #1
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	429a      	cmp	r2, r3
 8001866:	d3d8      	bcc.n	800181a <calculate_crc+0x16>
            }
        }
    }
    int16_t L = crc&0xFF;
 8001868:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	81bb      	strh	r3, [r7, #12]
    int16_t H = (crc>>8)&0xFF;
 8001870:	8afb      	ldrh	r3, [r7, #22]
 8001872:	0a1b      	lsrs	r3, r3, #8
 8001874:	b29b      	uxth	r3, r3
 8001876:	817b      	strh	r3, [r7, #10]
    return (L<<8)|H;  // Trả về CRC tính toán
 8001878:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800187c:	021b      	lsls	r3, r3, #8
 800187e:	b21a      	sxth	r2, r3
 8001880:	897b      	ldrh	r3, [r7, #10]
 8001882:	4313      	orrs	r3, r2
 8001884:	b21b      	sxth	r3, r3
 8001886:	b29b      	uxth	r3, r3
}
 8001888:	4618      	mov	r0, r3
 800188a:	371c      	adds	r7, #28
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	ffffa001 	.word	0xffffa001

08001898 <check_crc>:

uint16_t check_crc(DataStruct *data) {
 8001898:	b580      	push	{r7, lr}
 800189a:	b0c6      	sub	sp, #280	@ 0x118
 800189c:	af00      	add	r7, sp, #0
 800189e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80018a2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80018a6:	6018      	str	r0, [r3, #0]
    // Tạo mảng chứa dữ liệu cần tính CRC
    uint8_t temp_data[MAX_DATA_SIZE + 3];  // Start, Addr, Code, Data (tối đa)

    // Sao chép các thành phần dữ liệu vào mảng tạm
    size_t index = 0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    temp_data[index++] = data->Start;  // Start
 80018ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80018b2:	1c5a      	adds	r2, r3, #1
 80018b4:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 80018b8:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80018bc:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 80018c0:	6812      	ldr	r2, [r2, #0]
 80018c2:	7811      	ldrb	r1, [r2, #0]
 80018c4:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80018c8:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80018cc:	54d1      	strb	r1, [r2, r3]
    temp_data[index++] = data->Addr;   // Addr
 80018ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80018d2:	1c5a      	adds	r2, r3, #1
 80018d4:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 80018d8:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80018dc:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 80018e0:	6812      	ldr	r2, [r2, #0]
 80018e2:	7851      	ldrb	r1, [r2, #1]
 80018e4:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80018e8:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80018ec:	54d1      	strb	r1, [r2, r3]
    temp_data[index++] = data->Code;   // Code
 80018ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80018f2:	1c5a      	adds	r2, r3, #1
 80018f4:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 80018f8:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80018fc:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8001900:	6812      	ldr	r2, [r2, #0]
 8001902:	7891      	ldrb	r1, [r2, #2]
 8001904:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8001908:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800190c:	54d1      	strb	r1, [r2, r3]

    // Sao chép dữ liệu vào mảng
    memcpy(&temp_data[index], data->Data, data->Len);
 800190e:	f107 020c 	add.w	r2, r7, #12
 8001912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001916:	18d0      	adds	r0, r2, r3
 8001918:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800191c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	1cd9      	adds	r1, r3, #3
 8001924:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001928:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8001932:	461a      	mov	r2, r3
 8001934:	f006 fb6d 	bl	8008012 <memcpy>

    // Tính toán CRC cho dữ liệu
    uint16_t calculated_crc = calculate_crc(temp_data, index + data->Len);
 8001938:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800193c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8001946:	461a      	mov	r2, r3
 8001948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800194c:	441a      	add	r2, r3
 800194e:	f107 030c 	add.w	r3, r7, #12
 8001952:	4611      	mov	r1, r2
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff55 	bl	8001804 <calculate_crc>
 800195a:	4603      	mov	r3, r0
 800195c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112

    // So sánh CRC tính toán với CRC đã cho
    if (calculated_crc == data->Crc) {
 8001960:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001964:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 800196e:	f8b7 2112 	ldrh.w	r2, [r7, #274]	@ 0x112
 8001972:	429a      	cmp	r2, r3
 8001974:	d102      	bne.n	800197c <check_crc+0xe4>
        return calculated_crc;  // CRC hợp lệ
 8001976:	f8b7 3112 	ldrh.w	r3, [r7, #274]	@ 0x112
 800197a:	e001      	b.n	8001980 <check_crc+0xe8>
    } else {
        return calculated_crc;  // CRC không hợp lệ
 800197c:	f8b7 3112 	ldrh.w	r3, [r7, #274]	@ 0x112
    }
}
 8001980:	4618      	mov	r0, r3
 8001982:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <data_struct_to_string>:
    output[len * 2] = '\0'; // Kết thúc chuỗi
    return len * 2;
}


void data_struct_to_string(DataStruct* data, char* output) {
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af02      	add	r7, sp, #8
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
    // Bắt đầu chuỗi với ký tự Start
    sprintf(output, "%02X%02X%02X", data->Start, data->Addr, data->Code);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	461a      	mov	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	785b      	ldrb	r3, [r3, #1]
 80019a0:	4619      	mov	r1, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	789b      	ldrb	r3, [r3, #2]
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	460b      	mov	r3, r1
 80019aa:	491f      	ldr	r1, [pc, #124]	@ (8001a28 <data_struct_to_string+0x9c>)
 80019ac:	6838      	ldr	r0, [r7, #0]
 80019ae:	f006 f9bd 	bl	8007d2c <siprintf>

    // Thêm Addr và Code vào chuỗi
//    sprintf(output + strlen(output), "");

    // Thêm Data vào chuỗi
    for (int i = 0; i < data->Len; i++) {
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	e011      	b.n	80019dc <data_struct_to_string+0x50>
        sprintf(output + strlen(output), "%02X", data->Data[i]);
 80019b8:	6838      	ldr	r0, [r7, #0]
 80019ba:	f7fe fbc9 	bl	8000150 <strlen>
 80019be:	4602      	mov	r2, r0
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	1898      	adds	r0, r3, r2
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	4413      	add	r3, r2
 80019ca:	3303      	adds	r3, #3
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	461a      	mov	r2, r3
 80019d0:	4916      	ldr	r1, [pc, #88]	@ (8001a2c <data_struct_to_string+0xa0>)
 80019d2:	f006 f9ab 	bl	8007d2c <siprintf>
    for (int i = 0; i < data->Len; i++) {
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	3301      	adds	r3, #1
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 80019e2:	461a      	mov	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	4293      	cmp	r3, r2
 80019e8:	dbe6      	blt.n	80019b8 <data_struct_to_string+0x2c>
    }

    // Thêm CRC vào chuỗi
    sprintf(output + strlen(output), "%04X", data->Crc);
 80019ea:	6838      	ldr	r0, [r7, #0]
 80019ec:	f7fe fbb0 	bl	8000150 <strlen>
 80019f0:	4602      	mov	r2, r0
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	1898      	adds	r0, r3, r2
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 80019fc:	461a      	mov	r2, r3
 80019fe:	490c      	ldr	r1, [pc, #48]	@ (8001a30 <data_struct_to_string+0xa4>)
 8001a00:	f006 f994 	bl	8007d2c <siprintf>

    // Thêm Stop (\r\n) vào chuỗi
    sprintf(output + strlen(output), "%04X",data->Stop);
 8001a04:	6838      	ldr	r0, [r7, #0]
 8001a06:	f7fe fba3 	bl	8000150 <strlen>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	1898      	adds	r0, r3, r2
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 8001a16:	461a      	mov	r2, r3
 8001a18:	4905      	ldr	r1, [pc, #20]	@ (8001a30 <data_struct_to_string+0xa4>)
 8001a1a:	f006 f987 	bl	8007d2c <siprintf>
}
 8001a1e:	bf00      	nop
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	0800a098 	.word	0x0800a098
 8001a2c:	0800a090 	.word	0x0800a090
 8001a30:	0800a0a8 	.word	0x0800a0a8

08001a34 <convert_to_char>:
    }

    return position;
}

char convert_to_char(uint16_t num) {
 8001a34:	b480      	push	{r7}
 8001a36:	b087      	sub	sp, #28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	80fb      	strh	r3, [r7, #6]
    unsigned int count = 0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
    int position = -1;
 8001a42:	f04f 33ff 	mov.w	r3, #4294967295
 8001a46:	613b      	str	r3, [r7, #16]

    // Kiểm tra từng bit trong số 12 bit
    for (int i = 0; i < 12; i++) {
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	e010      	b.n	8001a70 <convert_to_char+0x3c>
        if (num & ArrConv[i]) { // Nếu bit này là 1
 8001a4e:	4a11      	ldr	r2, [pc, #68]	@ (8001a94 <convert_to_char+0x60>)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001a56:	88fb      	ldrh	r3, [r7, #6]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d004      	beq.n	8001a6a <convert_to_char+0x36>
            count++;
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	3301      	adds	r3, #1
 8001a64:	617b      	str	r3, [r7, #20]
            position = i;  // Lưu lại vị trí của bit
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < 12; i++) {
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2b0b      	cmp	r3, #11
 8001a74:	ddeb      	ble.n	8001a4e <convert_to_char+0x1a>
        }
    }

    // Nếu có nhiều hơn 1 bit bằng 1, trả về '\0'
    if (count != 1) {
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d001      	beq.n	8001a80 <convert_to_char+0x4c>
        return '\0';
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	e003      	b.n	8001a88 <convert_to_char+0x54>
    }

    // Nếu chỉ có 1 bit 1, trả về ký tự tương ứng
    return ArrChar[position];
 8001a80:	4a05      	ldr	r2, [pc, #20]	@ (8001a98 <convert_to_char+0x64>)
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	4413      	add	r3, r2
 8001a86:	781b      	ldrb	r3, [r3, #0]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	371c      	adds	r7, #28
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	20000010 	.word	0x20000010
 8001a98:	20000028 	.word	0x20000028

08001a9c <gen_data_send_rs485>:

char* gen_data_send_rs485(uint8_t code, char data[])
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b0c6      	sub	sp, #280	@ 0x118
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001aa8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001aac:	6019      	str	r1, [r3, #0]
 8001aae:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ab2:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8001ab6:	701a      	strb	r2, [r3, #0]
	DataStruct result;
	memset((void*)&result,0,sizeof(result));
 8001ab8:	f107 030c 	add.w	r3, r7, #12
 8001abc:	f44f 7285 	mov.w	r2, #266	@ 0x10a
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f006 f9af 	bl	8007e26 <memset>
	result.Start = 0x3A;
 8001ac8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001acc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001ad0:	223a      	movs	r2, #58	@ 0x3a
 8001ad2:	701a      	strb	r2, [r3, #0]
	result.Addr = MY_ADDRESS;
 8001ad4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ad8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001adc:	226f      	movs	r2, #111	@ 0x6f
 8001ade:	705a      	strb	r2, [r3, #1]
	result.Code = code;
 8001ae0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ae4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001ae8:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8001aec:	f2a2 1211 	subw	r2, r2, #273	@ 0x111
 8001af0:	7812      	ldrb	r2, [r2, #0]
 8001af2:	709a      	strb	r2, [r3, #2]
	result.Len = strlen(data);
 8001af4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001af8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001afc:	6818      	ldr	r0, [r3, #0]
 8001afe:	f7fe fb27 	bl	8000150 <strlen>
 8001b02:	4603      	mov	r3, r0
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b0a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b0e:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
	memcpy((void*)result.Data, (void*)data, strlen(data)+1);
 8001b12:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b16:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001b1a:	6818      	ldr	r0, [r3, #0]
 8001b1c:	f7fe fb18 	bl	8000150 <strlen>
 8001b20:	4603      	mov	r3, r0
 8001b22:	1c59      	adds	r1, r3, #1
 8001b24:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b28:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001b2c:	f107 020c 	add.w	r2, r7, #12
 8001b30:	1cd0      	adds	r0, r2, #3
 8001b32:	460a      	mov	r2, r1
 8001b34:	6819      	ldr	r1, [r3, #0]
 8001b36:	f006 fa6c 	bl	8008012 <memcpy>
	result.Crc = check_crc(&result);
 8001b3a:	f107 030c 	add.w	r3, r7, #12
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff feaa 	bl	8001898 <check_crc>
 8001b44:	4603      	mov	r3, r0
 8001b46:	461a      	mov	r2, r3
 8001b48:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b4c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b50:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
	result.Stop = 0x0D0A;
 8001b54:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b58:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b5c:	f640 520a 	movw	r2, #3338	@ 0xd0a
 8001b60:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
	data_struct_to_string(&result,data);
 8001b64:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b68:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001b6c:	f107 020c 	add.w	r2, r7, #12
 8001b70:	6819      	ldr	r1, [r3, #0]
 8001b72:	4610      	mov	r0, r2
 8001b74:	f7ff ff0a 	bl	800198c <data_struct_to_string>
	return data;
 8001b78:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b7c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001b80:	681b      	ldr	r3, [r3, #0]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <TaskMPR121>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void TaskMPR121()
{
 8001b8c:	b590      	push	{r4, r7, lr}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
	  new_touch = touched();
 8001b92:	f7ff f8a7 	bl	8000ce4 <touched>
 8001b96:	4603      	mov	r3, r0
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4b56      	ldr	r3, [pc, #344]	@ (8001cf4 <TaskMPR121+0x168>)
 8001b9c:	801a      	strh	r2, [r3, #0]
	  if(new_touch != last_touch)
 8001b9e:	4b55      	ldr	r3, [pc, #340]	@ (8001cf4 <TaskMPR121+0x168>)
 8001ba0:	881a      	ldrh	r2, [r3, #0]
 8001ba2:	4b55      	ldr	r3, [pc, #340]	@ (8001cf8 <TaskMPR121+0x16c>)
 8001ba4:	881b      	ldrh	r3, [r3, #0]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	f000 809b 	beq.w	8001ce2 <TaskMPR121+0x156>
	  {
		  if(new_touch == 0)
 8001bac:	4b51      	ldr	r3, [pc, #324]	@ (8001cf4 <TaskMPR121+0x168>)
 8001bae:	881b      	ldrh	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	f040 8096 	bne.w	8001ce2 <TaskMPR121+0x156>
		  {
			  char C = convert_to_char(last_touch);
 8001bb6:	4b50      	ldr	r3, [pc, #320]	@ (8001cf8 <TaskMPR121+0x16c>)
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff ff3a 	bl	8001a34 <convert_to_char>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	71fb      	strb	r3, [r7, #7]
			  if(C != '\0' && C != '*' && C != '#')
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d02c      	beq.n	8001c24 <TaskMPR121+0x98>
 8001bca:	79fb      	ldrb	r3, [r7, #7]
 8001bcc:	2b2a      	cmp	r3, #42	@ 0x2a
 8001bce:	d029      	beq.n	8001c24 <TaskMPR121+0x98>
 8001bd0:	79fb      	ldrb	r3, [r7, #7]
 8001bd2:	2b23      	cmp	r3, #35	@ 0x23
 8001bd4:	d026      	beq.n	8001c24 <TaskMPR121+0x98>
			  {
				  if(len_key_board < 16)
 8001bd6:	4b49      	ldr	r3, [pc, #292]	@ (8001cfc <TaskMPR121+0x170>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b0f      	cmp	r3, #15
 8001bdc:	d810      	bhi.n	8001c00 <TaskMPR121+0x74>
				  {
					  key_board[len_key_board++] = C;
 8001bde:	4b47      	ldr	r3, [pc, #284]	@ (8001cfc <TaskMPR121+0x170>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	1c5a      	adds	r2, r3, #1
 8001be4:	b2d1      	uxtb	r1, r2
 8001be6:	4a45      	ldr	r2, [pc, #276]	@ (8001cfc <TaskMPR121+0x170>)
 8001be8:	7011      	strb	r1, [r2, #0]
 8001bea:	4619      	mov	r1, r3
 8001bec:	4a44      	ldr	r2, [pc, #272]	@ (8001d00 <TaskMPR121+0x174>)
 8001bee:	79fb      	ldrb	r3, [r7, #7]
 8001bf0:	5453      	strb	r3, [r2, r1]
					  key_board[len_key_board] = '\0';
 8001bf2:	4b42      	ldr	r3, [pc, #264]	@ (8001cfc <TaskMPR121+0x170>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	4b41      	ldr	r3, [pc, #260]	@ (8001d00 <TaskMPR121+0x174>)
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	5499      	strb	r1, [r3, r2]
				  if(len_key_board < 16)
 8001bfe:	e058      	b.n	8001cb2 <TaskMPR121+0x126>
				  }
				  else
				  {
					  memmove(key_board,&key_board[1],sizeof(key_board) - 1);
 8001c00:	2213      	movs	r2, #19
 8001c02:	4940      	ldr	r1, [pc, #256]	@ (8001d04 <TaskMPR121+0x178>)
 8001c04:	483e      	ldr	r0, [pc, #248]	@ (8001d00 <TaskMPR121+0x174>)
 8001c06:	f006 f8f4 	bl	8007df2 <memmove>
					  key_board[len_key_board - 1] = C;
 8001c0a:	4b3c      	ldr	r3, [pc, #240]	@ (8001cfc <TaskMPR121+0x170>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	493b      	ldr	r1, [pc, #236]	@ (8001d00 <TaskMPR121+0x174>)
 8001c12:	79fa      	ldrb	r2, [r7, #7]
 8001c14:	54ca      	strb	r2, [r1, r3]
					  key_board[len_key_board] = '\0';
 8001c16:	4b39      	ldr	r3, [pc, #228]	@ (8001cfc <TaskMPR121+0x170>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	4b38      	ldr	r3, [pc, #224]	@ (8001d00 <TaskMPR121+0x174>)
 8001c1e:	2100      	movs	r1, #0
 8001c20:	5499      	strb	r1, [r3, r2]
				  if(len_key_board < 16)
 8001c22:	e046      	b.n	8001cb2 <TaskMPR121+0x126>
				  }
			  }
			  else if(C == '#' && len_key_board > 0)
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	2b23      	cmp	r3, #35	@ 0x23
 8001c28:	d124      	bne.n	8001c74 <TaskMPR121+0xe8>
 8001c2a:	4b34      	ldr	r3, [pc, #208]	@ (8001cfc <TaskMPR121+0x170>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d020      	beq.n	8001c74 <TaskMPR121+0xe8>
			  {
				  memset((void*)print_lcd_row2, 0, sizeof(print_lcd_row2));
 8001c32:	221e      	movs	r2, #30
 8001c34:	2100      	movs	r1, #0
 8001c36:	4834      	ldr	r0, [pc, #208]	@ (8001d08 <TaskMPR121+0x17c>)
 8001c38:	f006 f8f5 	bl	8007e26 <memset>
				  memcpy((void*)print_lcd_row2, (void*)indicate_1, sizeof(indicate_1));
 8001c3c:	4a32      	ldr	r2, [pc, #200]	@ (8001d08 <TaskMPR121+0x17c>)
 8001c3e:	4b33      	ldr	r3, [pc, #204]	@ (8001d0c <TaskMPR121+0x180>)
 8001c40:	4614      	mov	r4, r2
 8001c42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c44:	c407      	stmia	r4!, {r0, r1, r2}
 8001c46:	8023      	strh	r3, [r4, #0]
				  memcpy((void*)send_to_rs485, (void*)key_board, strlen(key_board));
 8001c48:	482d      	ldr	r0, [pc, #180]	@ (8001d00 <TaskMPR121+0x174>)
 8001c4a:	f7fe fa81 	bl	8000150 <strlen>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	461a      	mov	r2, r3
 8001c52:	492b      	ldr	r1, [pc, #172]	@ (8001d00 <TaskMPR121+0x174>)
 8001c54:	482e      	ldr	r0, [pc, #184]	@ (8001d10 <TaskMPR121+0x184>)
 8001c56:	f006 f9dc 	bl	8008012 <memcpy>
				  gen_data_send_rs485(UPGRADE(CODE_KEY),send_to_rs485);
 8001c5a:	492d      	ldr	r1, [pc, #180]	@ (8001d10 <TaskMPR121+0x184>)
 8001c5c:	2082      	movs	r0, #130	@ 0x82
 8001c5e:	f7ff ff1d 	bl	8001a9c <gen_data_send_rs485>
				  memset((void*)key_board, 0, sizeof(key_board));
 8001c62:	2214      	movs	r2, #20
 8001c64:	2100      	movs	r1, #0
 8001c66:	4826      	ldr	r0, [pc, #152]	@ (8001d00 <TaskMPR121+0x174>)
 8001c68:	f006 f8dd 	bl	8007e26 <memset>
				  len_key_board = 0;
 8001c6c:	4b23      	ldr	r3, [pc, #140]	@ (8001cfc <TaskMPR121+0x170>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	701a      	strb	r2, [r3, #0]
 8001c72:	e01e      	b.n	8001cb2 <TaskMPR121+0x126>
			  }
			  else if(C == '*' && len_key_board > 0)
 8001c74:	79fb      	ldrb	r3, [r7, #7]
 8001c76:	2b2a      	cmp	r3, #42	@ 0x2a
 8001c78:	d11b      	bne.n	8001cb2 <TaskMPR121+0x126>
 8001c7a:	4b20      	ldr	r3, [pc, #128]	@ (8001cfc <TaskMPR121+0x170>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d017      	beq.n	8001cb2 <TaskMPR121+0x126>
			  {
				  memset((void*)print_lcd_row2, 0, sizeof(print_lcd_row2));
 8001c82:	221e      	movs	r2, #30
 8001c84:	2100      	movs	r1, #0
 8001c86:	4820      	ldr	r0, [pc, #128]	@ (8001d08 <TaskMPR121+0x17c>)
 8001c88:	f006 f8cd 	bl	8007e26 <memset>
				  key_board[--len_key_board] = '\0';
 8001c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cfc <TaskMPR121+0x170>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	3b01      	subs	r3, #1
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	4b19      	ldr	r3, [pc, #100]	@ (8001cfc <TaskMPR121+0x170>)
 8001c96:	701a      	strb	r2, [r3, #0]
 8001c98:	4b18      	ldr	r3, [pc, #96]	@ (8001cfc <TaskMPR121+0x170>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4b18      	ldr	r3, [pc, #96]	@ (8001d00 <TaskMPR121+0x174>)
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	5499      	strb	r1, [r3, r2]
				  memcpy((void*)print_lcd_row2, (void*)key_board, len_key_board);
 8001ca4:	4b15      	ldr	r3, [pc, #84]	@ (8001cfc <TaskMPR121+0x170>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4915      	ldr	r1, [pc, #84]	@ (8001d00 <TaskMPR121+0x174>)
 8001cac:	4816      	ldr	r0, [pc, #88]	@ (8001d08 <TaskMPR121+0x17c>)
 8001cae:	f006 f9b0 	bl	8008012 <memcpy>
			  }
			  if(C != '\0' && len_key_board > 0 && C != '#')
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d014      	beq.n	8001ce2 <TaskMPR121+0x156>
 8001cb8:	4b10      	ldr	r3, [pc, #64]	@ (8001cfc <TaskMPR121+0x170>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d010      	beq.n	8001ce2 <TaskMPR121+0x156>
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	2b23      	cmp	r3, #35	@ 0x23
 8001cc4:	d00d      	beq.n	8001ce2 <TaskMPR121+0x156>
			  {
				  memset((void*)print_lcd_row2, 0, sizeof(print_lcd_row2));
 8001cc6:	221e      	movs	r2, #30
 8001cc8:	2100      	movs	r1, #0
 8001cca:	480f      	ldr	r0, [pc, #60]	@ (8001d08 <TaskMPR121+0x17c>)
 8001ccc:	f006 f8ab 	bl	8007e26 <memset>
				  memcpy((void*)print_lcd_row2, (void*)key_board, strlen(key_board));
 8001cd0:	480b      	ldr	r0, [pc, #44]	@ (8001d00 <TaskMPR121+0x174>)
 8001cd2:	f7fe fa3d 	bl	8000150 <strlen>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4909      	ldr	r1, [pc, #36]	@ (8001d00 <TaskMPR121+0x174>)
 8001cdc:	480a      	ldr	r0, [pc, #40]	@ (8001d08 <TaskMPR121+0x17c>)
 8001cde:	f006 f998 	bl	8008012 <memcpy>
			  }
		  }
	  }
	  last_touch = new_touch;
 8001ce2:	4b04      	ldr	r3, [pc, #16]	@ (8001cf4 <TaskMPR121+0x168>)
 8001ce4:	881a      	ldrh	r2, [r3, #0]
 8001ce6:	4b04      	ldr	r3, [pc, #16]	@ (8001cf8 <TaskMPR121+0x16c>)
 8001ce8:	801a      	strh	r2, [r3, #0]
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd90      	pop	{r4, r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	200006c0 	.word	0x200006c0
 8001cf8:	200006be 	.word	0x200006be
 8001cfc:	200006bc 	.word	0x200006bc
 8001d00:	200006a0 	.word	0x200006a0
 8001d04:	200006a1 	.word	0x200006a1
 8001d08:	20000618 	.word	0x20000618
 8001d0c:	20000034 	.word	0x20000034
 8001d10:	20000638 	.word	0x20000638

08001d14 <TaskTempBMP180>:

void TaskTempBMP180()
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
	temperature = BMP180_GetTemperature();
 8001d18:	f7ff f95a 	bl	8000fd0 <BMP180_GetTemperature>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	4a02      	ldr	r2, [pc, #8]	@ (8001d28 <TaskTempBMP180+0x14>)
 8001d20:	6013      	str	r3, [r2, #0]
}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	200006b4 	.word	0x200006b4

08001d2c <TaskPressBMP180>:

void TaskPressBMP180()
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
	pressure = BMP180_GetPressure();
 8001d30:	f7ff f96a 	bl	8001008 <BMP180_GetPressure>
 8001d34:	4603      	mov	r3, r0
 8001d36:	4a02      	ldr	r2, [pc, #8]	@ (8001d40 <TaskPressBMP180+0x14>)
 8001d38:	6013      	str	r3, [r2, #0]
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	200006b8 	.word	0x200006b8

08001d44 <TaskLCD>:

void TaskLCD()
{
 8001d44:	b590      	push	{r4, r7, lr}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af02      	add	r7, sp, #8
	if(strlen(print_lcd_row1) > 0)
 8001d4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001dc4 <TaskLCD+0x80>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00c      	beq.n	8001d6c <TaskLCD+0x28>
	{
		  HD44780_SetCursor(0,0);
 8001d52:	2100      	movs	r1, #0
 8001d54:	2000      	movs	r0, #0
 8001d56:	f7ff fb45 	bl	80013e4 <HD44780_SetCursor>
		  HD44780_PrintStr(print_lcd_row1);
 8001d5a:	481a      	ldr	r0, [pc, #104]	@ (8001dc4 <TaskLCD+0x80>)
 8001d5c:	f7ff fbb3 	bl	80014c6 <HD44780_PrintStr>
		  memset((void*)print_lcd_row1, 0, sizeof(print_lcd_row1));
 8001d60:	221e      	movs	r2, #30
 8001d62:	2100      	movs	r1, #0
 8001d64:	4817      	ldr	r0, [pc, #92]	@ (8001dc4 <TaskLCD+0x80>)
 8001d66:	f006 f85e 	bl	8007e26 <memset>
 8001d6a:	e01b      	b.n	8001da4 <TaskLCD+0x60>
	}
	else
	{
		HD44780_Clear();
 8001d6c:	f7ff fb24 	bl	80013b8 <HD44780_Clear>
		sprintf(print_lcd_row1, "%0.1f\t %dKPa %d", temperature, (int)pressure/1000, (int)count_touch);
 8001d70:	4b15      	ldr	r3, [pc, #84]	@ (8001dc8 <TaskLCD+0x84>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7fe fb57 	bl	8000428 <__aeabi_f2d>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	4913      	ldr	r1, [pc, #76]	@ (8001dcc <TaskLCD+0x88>)
 8001d80:	6809      	ldr	r1, [r1, #0]
 8001d82:	4813      	ldr	r0, [pc, #76]	@ (8001dd0 <TaskLCD+0x8c>)
 8001d84:	fb80 4001 	smull	r4, r0, r0, r1
 8001d88:	1180      	asrs	r0, r0, #6
 8001d8a:	17c9      	asrs	r1, r1, #31
 8001d8c:	1a41      	subs	r1, r0, r1
 8001d8e:	4811      	ldr	r0, [pc, #68]	@ (8001dd4 <TaskLCD+0x90>)
 8001d90:	8800      	ldrh	r0, [r0, #0]
 8001d92:	9001      	str	r0, [sp, #4]
 8001d94:	9100      	str	r1, [sp, #0]
 8001d96:	4910      	ldr	r1, [pc, #64]	@ (8001dd8 <TaskLCD+0x94>)
 8001d98:	480a      	ldr	r0, [pc, #40]	@ (8001dc4 <TaskLCD+0x80>)
 8001d9a:	f005 ffc7 	bl	8007d2c <siprintf>
		HD44780_PrintStr(print_lcd_row1);
 8001d9e:	4809      	ldr	r0, [pc, #36]	@ (8001dc4 <TaskLCD+0x80>)
 8001da0:	f7ff fb91 	bl	80014c6 <HD44780_PrintStr>
	}
	if(strlen(print_lcd_row2) > 0)
 8001da4:	4b0d      	ldr	r3, [pc, #52]	@ (8001ddc <TaskLCD+0x98>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d006      	beq.n	8001dba <TaskLCD+0x76>
	{
		  HD44780_SetCursor(0,1);
 8001dac:	2101      	movs	r1, #1
 8001dae:	2000      	movs	r0, #0
 8001db0:	f7ff fb18 	bl	80013e4 <HD44780_SetCursor>
		  HD44780_PrintStr(print_lcd_row2);
 8001db4:	4809      	ldr	r0, [pc, #36]	@ (8001ddc <TaskLCD+0x98>)
 8001db6:	f7ff fb86 	bl	80014c6 <HD44780_PrintStr>
	}
}
 8001dba:	bf00      	nop
 8001dbc:	3704      	adds	r7, #4
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd90      	pop	{r4, r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	200005f8 	.word	0x200005f8
 8001dc8:	200006b4 	.word	0x200006b4
 8001dcc:	200006b8 	.word	0x200006b8
 8001dd0:	10624dd3 	.word	0x10624dd3
 8001dd4:	200006c2 	.word	0x200006c2
 8001dd8:	0800a0b0 	.word	0x0800a0b0
 8001ddc:	20000618 	.word	0x20000618

08001de0 <TaskRX>:

void TaskRX()
{
 8001de0:	b5b0      	push	{r4, r5, r7, lr}
 8001de2:	b0c4      	sub	sp, #272	@ 0x110
 8001de4:	af00      	add	r7, sp, #0
	memset((void*)read_to_rs485,0,sizeof(read_to_rs485));
 8001de6:	2232      	movs	r2, #50	@ 0x32
 8001de8:	2100      	movs	r1, #0
 8001dea:	48a0      	ldr	r0, [pc, #640]	@ (800206c <TaskRX+0x28c>)
 8001dec:	f006 f81b 	bl	8007e26 <memset>
	HAL_UART_Receive(&huart1, (uint8_t *)&read_to_rs485, sizeof (read_to_rs485) , 500);
 8001df0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001df4:	2232      	movs	r2, #50	@ 0x32
 8001df6:	499d      	ldr	r1, [pc, #628]	@ (800206c <TaskRX+0x28c>)
 8001df8:	489d      	ldr	r0, [pc, #628]	@ (8002070 <TaskRX+0x290>)
 8001dfa:	f003 fdee 	bl	80059da <HAL_UART_Receive>
	  if(strlen(read_to_rs485) > 1)
 8001dfe:	489b      	ldr	r0, [pc, #620]	@ (800206c <TaskRX+0x28c>)
 8001e00:	f7fe f9a6 	bl	8000150 <strlen>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	f240 812b 	bls.w	8002062 <TaskRX+0x282>
	  {
		  DataStruct result;
		  parse_data(read_to_rs485,&result);
 8001e0c:	1d3b      	adds	r3, r7, #4
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4896      	ldr	r0, [pc, #600]	@ (800206c <TaskRX+0x28c>)
 8001e12:	f7ff fc43 	bl	800169c <parse_data>
		  if(result.Addr == MY_ADDRESS && check_crc(&result) == result.Crc)
 8001e16:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e1a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e1e:	785b      	ldrb	r3, [r3, #1]
 8001e20:	2b6f      	cmp	r3, #111	@ 0x6f
 8001e22:	f040 80e9 	bne.w	8001ff8 <TaskRX+0x218>
 8001e26:	1d3b      	adds	r3, r7, #4
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff fd35 	bl	8001898 <check_crc>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	461a      	mov	r2, r3
 8001e32:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e36:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e3a:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	f040 80da 	bne.w	8001ff8 <TaskRX+0x218>
		  {
			  if(result.Code == 1)
 8001e44:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e48:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e4c:	789b      	ldrb	r3, [r3, #2]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d171      	bne.n	8001f36 <TaskRX+0x156>
			  {
				  if(result.Data[0] == '1')
 8001e52:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e56:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e5a:	78db      	ldrb	r3, [r3, #3]
 8001e5c:	2b31      	cmp	r3, #49	@ 0x31
 8001e5e:	d121      	bne.n	8001ea4 <TaskRX+0xc4>
				  {
					  memset((void*)send_to_rs485,0,sizeof(send_to_rs485));
 8001e60:	2232      	movs	r2, #50	@ 0x32
 8001e62:	2100      	movs	r1, #0
 8001e64:	4883      	ldr	r0, [pc, #524]	@ (8002074 <TaskRX+0x294>)
 8001e66:	f005 ffde 	bl	8007e26 <memset>
					  sprintf(send_to_rs485, "%.1fC", temperature);
 8001e6a:	4b83      	ldr	r3, [pc, #524]	@ (8002078 <TaskRX+0x298>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7fe fada 	bl	8000428 <__aeabi_f2d>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4980      	ldr	r1, [pc, #512]	@ (800207c <TaskRX+0x29c>)
 8001e7a:	487e      	ldr	r0, [pc, #504]	@ (8002074 <TaskRX+0x294>)
 8001e7c:	f005 ff56 	bl	8007d2c <siprintf>
					  gen_data_send_rs485(RESPONSES(CODE_TEMP),send_to_rs485);
 8001e80:	497c      	ldr	r1, [pc, #496]	@ (8002074 <TaskRX+0x294>)
 8001e82:	2001      	movs	r0, #1
 8001e84:	f7ff fe0a 	bl	8001a9c <gen_data_send_rs485>
					  memset((void*)print_lcd_row2, 0, sizeof(print_lcd_row2));
 8001e88:	221e      	movs	r2, #30
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	487c      	ldr	r0, [pc, #496]	@ (8002080 <TaskRX+0x2a0>)
 8001e8e:	f005 ffca 	bl	8007e26 <memset>
					  memcpy((void*)print_lcd_row2, (void*)indicate_T, sizeof(indicate_T));
 8001e92:	4a7b      	ldr	r2, [pc, #492]	@ (8002080 <TaskRX+0x2a0>)
 8001e94:	4b7b      	ldr	r3, [pc, #492]	@ (8002084 <TaskRX+0x2a4>)
 8001e96:	4614      	mov	r4, r2
 8001e98:	461d      	mov	r5, r3
 8001e9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e9e:	682b      	ldr	r3, [r5, #0]
 8001ea0:	7023      	strb	r3, [r4, #0]
			  if(result.Code == 1)
 8001ea2:	e0dd      	b.n	8002060 <TaskRX+0x280>

				  }
				  else if (result.Data[0] == '2')
 8001ea4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001ea8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001eac:	78db      	ldrb	r3, [r3, #3]
 8001eae:	2b32      	cmp	r3, #50	@ 0x32
 8001eb0:	d11b      	bne.n	8001eea <TaskRX+0x10a>
				  {
					  memset((void*)send_to_rs485,0,sizeof(send_to_rs485));
 8001eb2:	2232      	movs	r2, #50	@ 0x32
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	486f      	ldr	r0, [pc, #444]	@ (8002074 <TaskRX+0x294>)
 8001eb8:	f005 ffb5 	bl	8007e26 <memset>
					  sprintf(send_to_rs485, "%dPa", (int) pressure);
 8001ebc:	4b72      	ldr	r3, [pc, #456]	@ (8002088 <TaskRX+0x2a8>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4972      	ldr	r1, [pc, #456]	@ (800208c <TaskRX+0x2ac>)
 8001ec4:	486b      	ldr	r0, [pc, #428]	@ (8002074 <TaskRX+0x294>)
 8001ec6:	f005 ff31 	bl	8007d2c <siprintf>
					  gen_data_send_rs485(RESPONSES(CODE_PRES),send_to_rs485);
 8001eca:	496a      	ldr	r1, [pc, #424]	@ (8002074 <TaskRX+0x294>)
 8001ecc:	2002      	movs	r0, #2
 8001ece:	f7ff fde5 	bl	8001a9c <gen_data_send_rs485>
					  memset((void*)print_lcd_row2, 0, sizeof(print_lcd_row2));
 8001ed2:	221e      	movs	r2, #30
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	486a      	ldr	r0, [pc, #424]	@ (8002080 <TaskRX+0x2a0>)
 8001ed8:	f005 ffa5 	bl	8007e26 <memset>
					  memcpy((void*)print_lcd_row2, (void*)indicate_P, sizeof(indicate_P));
 8001edc:	4a68      	ldr	r2, [pc, #416]	@ (8002080 <TaskRX+0x2a0>)
 8001ede:	4b6c      	ldr	r3, [pc, #432]	@ (8002090 <TaskRX+0x2b0>)
 8001ee0:	4614      	mov	r4, r2
 8001ee2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ee4:	c407      	stmia	r4!, {r0, r1, r2}
 8001ee6:	8023      	strh	r3, [r4, #0]
			  if(result.Code == 1)
 8001ee8:	e0ba      	b.n	8002060 <TaskRX+0x280>

				  }
				  else if (result.Data[0] == '4')
 8001eea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001eee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001ef2:	78db      	ldrb	r3, [r3, #3]
 8001ef4:	2b34      	cmp	r3, #52	@ 0x34
 8001ef6:	f040 80b3 	bne.w	8002060 <TaskRX+0x280>
				  {
					  memset((void*)send_to_rs485,0,sizeof(send_to_rs485));
 8001efa:	2232      	movs	r2, #50	@ 0x32
 8001efc:	2100      	movs	r1, #0
 8001efe:	485d      	ldr	r0, [pc, #372]	@ (8002074 <TaskRX+0x294>)
 8001f00:	f005 ff91 	bl	8007e26 <memset>
					  sprintf(send_to_rs485, "%dN", (int) count_touch);
 8001f04:	4b63      	ldr	r3, [pc, #396]	@ (8002094 <TaskRX+0x2b4>)
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4963      	ldr	r1, [pc, #396]	@ (8002098 <TaskRX+0x2b8>)
 8001f0c:	4859      	ldr	r0, [pc, #356]	@ (8002074 <TaskRX+0x294>)
 8001f0e:	f005 ff0d 	bl	8007d2c <siprintf>
					  gen_data_send_rs485(RESPONSES(CODE_COUNT),send_to_rs485);
 8001f12:	4958      	ldr	r1, [pc, #352]	@ (8002074 <TaskRX+0x294>)
 8001f14:	2004      	movs	r0, #4
 8001f16:	f7ff fdc1 	bl	8001a9c <gen_data_send_rs485>
					  memset((void*)print_lcd_row2, 0, sizeof(print_lcd_row2));
 8001f1a:	221e      	movs	r2, #30
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	4858      	ldr	r0, [pc, #352]	@ (8002080 <TaskRX+0x2a0>)
 8001f20:	f005 ff81 	bl	8007e26 <memset>
					  memcpy((void*)print_lcd_row2, (void*)indicate_C, sizeof(indicate_C));
 8001f24:	4b56      	ldr	r3, [pc, #344]	@ (8002080 <TaskRX+0x2a0>)
 8001f26:	4a5d      	ldr	r2, [pc, #372]	@ (800209c <TaskRX+0x2bc>)
 8001f28:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f2a:	c303      	stmia	r3!, {r0, r1}
 8001f2c:	801a      	strh	r2, [r3, #0]
 8001f2e:	3302      	adds	r3, #2
 8001f30:	0c12      	lsrs	r2, r2, #16
 8001f32:	701a      	strb	r2, [r3, #0]
			  if(result.Code == 1)
 8001f34:	e094      	b.n	8002060 <TaskRX+0x280>
				  }
			  }
			  else if(result.Code == 2)
 8001f36:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f3a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001f3e:	789b      	ldrb	r3, [r3, #2]
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d12c      	bne.n	8001f9e <TaskRX+0x1be>
			  {
				  result.Data[result.Len] = '\0';
 8001f44:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f48:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001f4c:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8001f50:	461a      	mov	r2, r3
 8001f52:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f56:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001f5a:	4413      	add	r3, r2
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	70da      	strb	r2, [r3, #3]
				  memset((void*)print_lcd_row2, 0, sizeof(print_lcd_row2));
 8001f60:	221e      	movs	r2, #30
 8001f62:	2100      	movs	r1, #0
 8001f64:	4846      	ldr	r0, [pc, #280]	@ (8002080 <TaskRX+0x2a0>)
 8001f66:	f005 ff5e 	bl	8007e26 <memset>
				  memcpy((void*)print_lcd_row2, (void*)(char*)result.Data, strlen((char*)result.Data));
 8001f6a:	1d3b      	adds	r3, r7, #4
 8001f6c:	3303      	adds	r3, #3
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe f8ee 	bl	8000150 <strlen>
 8001f74:	4602      	mov	r2, r0
 8001f76:	1d3b      	adds	r3, r7, #4
 8001f78:	3303      	adds	r3, #3
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4840      	ldr	r0, [pc, #256]	@ (8002080 <TaskRX+0x2a0>)
 8001f7e:	f006 f848 	bl	8008012 <memcpy>
				  memset((void*)send_to_rs485,0,sizeof(send_to_rs485));
 8001f82:	2232      	movs	r2, #50	@ 0x32
 8001f84:	2100      	movs	r1, #0
 8001f86:	483b      	ldr	r0, [pc, #236]	@ (8002074 <TaskRX+0x294>)
 8001f88:	f005 ff4d 	bl	8007e26 <memset>
				  sprintf(send_to_rs485, "Okee");
 8001f8c:	4944      	ldr	r1, [pc, #272]	@ (80020a0 <TaskRX+0x2c0>)
 8001f8e:	4839      	ldr	r0, [pc, #228]	@ (8002074 <TaskRX+0x294>)
 8001f90:	f005 fecc 	bl	8007d2c <siprintf>
				  gen_data_send_rs485(RESPONSES(CODE_RESP),send_to_rs485);
 8001f94:	4937      	ldr	r1, [pc, #220]	@ (8002074 <TaskRX+0x294>)
 8001f96:	2005      	movs	r0, #5
 8001f98:	f7ff fd80 	bl	8001a9c <gen_data_send_rs485>
			  if(result.Code == 1)
 8001f9c:	e060      	b.n	8002060 <TaskRX+0x280>
			  }
			  else if(result.Code == 3)
 8001f9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001fa2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001fa6:	789b      	ldrb	r3, [r3, #2]
 8001fa8:	2b03      	cmp	r3, #3
 8001faa:	d159      	bne.n	8002060 <TaskRX+0x280>
			  {
				  result.Data[result.Len] = '\0';
 8001fac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001fb0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001fb4:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8001fb8:	461a      	mov	r2, r3
 8001fba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001fbe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001fc2:	4413      	add	r3, r2
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	70da      	strb	r2, [r3, #3]
				  memset((void*)print_lcd_row2, 0, sizeof(print_lcd_row2));
 8001fc8:	221e      	movs	r2, #30
 8001fca:	2100      	movs	r1, #0
 8001fcc:	482c      	ldr	r0, [pc, #176]	@ (8002080 <TaskRX+0x2a0>)
 8001fce:	f005 ff2a 	bl	8007e26 <memset>
				  memcpy((void*)print_lcd_row2, (void*)indicate_M, sizeof(indicate_M));
 8001fd2:	4b2b      	ldr	r3, [pc, #172]	@ (8002080 <TaskRX+0x2a0>)
 8001fd4:	4a33      	ldr	r2, [pc, #204]	@ (80020a4 <TaskRX+0x2c4>)
 8001fd6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fd8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				  memset((void*)send_to_rs485,0,sizeof(send_to_rs485));
 8001fdc:	2232      	movs	r2, #50	@ 0x32
 8001fde:	2100      	movs	r1, #0
 8001fe0:	4824      	ldr	r0, [pc, #144]	@ (8002074 <TaskRX+0x294>)
 8001fe2:	f005 ff20 	bl	8007e26 <memset>
				  sprintf(send_to_rs485, "Okee");
 8001fe6:	492e      	ldr	r1, [pc, #184]	@ (80020a0 <TaskRX+0x2c0>)
 8001fe8:	4822      	ldr	r0, [pc, #136]	@ (8002074 <TaskRX+0x294>)
 8001fea:	f005 fe9f 	bl	8007d2c <siprintf>
				  gen_data_send_rs485(RESPONSES(CODE_RESP),send_to_rs485);
 8001fee:	4921      	ldr	r1, [pc, #132]	@ (8002074 <TaskRX+0x294>)
 8001ff0:	2005      	movs	r0, #5
 8001ff2:	f7ff fd53 	bl	8001a9c <gen_data_send_rs485>
			  if(result.Code == 1)
 8001ff6:	e033      	b.n	8002060 <TaskRX+0x280>
			  }
		  }
		  else if(check_crc(&result) != result.Crc)
 8001ff8:	1d3b      	adds	r3, r7, #4
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff fc4c 	bl	8001898 <check_crc>
 8002000:	4603      	mov	r3, r0
 8002002:	461a      	mov	r2, r3
 8002004:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002008:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800200c:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8002010:	429a      	cmp	r2, r3
 8002012:	d026      	beq.n	8002062 <TaskRX+0x282>
		  {
			  result.Data[result.Len] = '\0';
 8002014:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002018:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800201c:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8002020:	461a      	mov	r2, r3
 8002022:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002026:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800202a:	4413      	add	r3, r2
 800202c:	2200      	movs	r2, #0
 800202e:	70da      	strb	r2, [r3, #3]
			  memset((void*)print_lcd_row2, 0, sizeof(print_lcd_row2));
 8002030:	221e      	movs	r2, #30
 8002032:	2100      	movs	r1, #0
 8002034:	4812      	ldr	r0, [pc, #72]	@ (8002080 <TaskRX+0x2a0>)
 8002036:	f005 fef6 	bl	8007e26 <memset>
			  memcpy((void*)print_lcd_row2, (void*)indicate_E, sizeof(indicate_E));
 800203a:	4b11      	ldr	r3, [pc, #68]	@ (8002080 <TaskRX+0x2a0>)
 800203c:	4a1a      	ldr	r2, [pc, #104]	@ (80020a8 <TaskRX+0x2c8>)
 800203e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002040:	c303      	stmia	r3!, {r0, r1}
 8002042:	801a      	strh	r2, [r3, #0]
			  memset((void*)send_to_rs485,0,sizeof(send_to_rs485));
 8002044:	2232      	movs	r2, #50	@ 0x32
 8002046:	2100      	movs	r1, #0
 8002048:	480a      	ldr	r0, [pc, #40]	@ (8002074 <TaskRX+0x294>)
 800204a:	f005 feec 	bl	8007e26 <memset>
			  sprintf(send_to_rs485, "Error Crc");
 800204e:	4917      	ldr	r1, [pc, #92]	@ (80020ac <TaskRX+0x2cc>)
 8002050:	4808      	ldr	r0, [pc, #32]	@ (8002074 <TaskRX+0x294>)
 8002052:	f005 fe6b 	bl	8007d2c <siprintf>
			  gen_data_send_rs485(RESPONSES(CODE_RESP),send_to_rs485);
 8002056:	4907      	ldr	r1, [pc, #28]	@ (8002074 <TaskRX+0x294>)
 8002058:	2005      	movs	r0, #5
 800205a:	f7ff fd1f 	bl	8001a9c <gen_data_send_rs485>
		  }
	  }
}
 800205e:	e000      	b.n	8002062 <TaskRX+0x282>
			  if(result.Code == 1)
 8002060:	bf00      	nop
}
 8002062:	bf00      	nop
 8002064:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8002068:	46bd      	mov	sp, r7
 800206a:	bdb0      	pop	{r4, r5, r7, pc}
 800206c:	2000066c 	.word	0x2000066c
 8002070:	20000598 	.word	0x20000598
 8002074:	20000638 	.word	0x20000638
 8002078:	200006b4 	.word	0x200006b4
 800207c:	0800a0c0 	.word	0x0800a0c0
 8002080:	20000618 	.word	0x20000618
 8002084:	20000044 	.word	0x20000044
 8002088:	200006b8 	.word	0x200006b8
 800208c:	0800a0c8 	.word	0x0800a0c8
 8002090:	20000058 	.word	0x20000058
 8002094:	200006c2 	.word	0x200006c2
 8002098:	0800a0d0 	.word	0x0800a0d0
 800209c:	20000068 	.word	0x20000068
 80020a0:	0800a0d4 	.word	0x0800a0d4
 80020a4:	20000074 	.word	0x20000074
 80020a8:	20000080 	.word	0x20000080
 80020ac:	0800a0dc 	.word	0x0800a0dc

080020b0 <TaskTX>:

void TaskTX()
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
	if(strlen(send_to_rs485) > 0)
 80020b4:	4b3a      	ldr	r3, [pc, #232]	@ (80021a0 <TaskTX+0xf0>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d018      	beq.n	80020ee <TaskTX+0x3e>
	{
		  if(HAL_UART_Transmit(&huart1, (uint8_t *)&send_to_rs485, strlen(send_to_rs485) , 1000) == HAL_OK)
 80020bc:	4838      	ldr	r0, [pc, #224]	@ (80021a0 <TaskTX+0xf0>)
 80020be:	f7fe f847 	bl	8000150 <strlen>
 80020c2:	4603      	mov	r3, r0
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020ca:	4935      	ldr	r1, [pc, #212]	@ (80021a0 <TaskTX+0xf0>)
 80020cc:	4835      	ldr	r0, [pc, #212]	@ (80021a4 <TaskTX+0xf4>)
 80020ce:	f003 fbf9 	bl	80058c4 <HAL_UART_Transmit>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d15b      	bne.n	8002190 <TaskTX+0xe0>
		  {
		  	  memset((void*)send_to_rs485, 0, sizeof(send_to_rs485));
 80020d8:	2232      	movs	r2, #50	@ 0x32
 80020da:	2100      	movs	r1, #0
 80020dc:	4830      	ldr	r0, [pc, #192]	@ (80021a0 <TaskTX+0xf0>)
 80020de:	f005 fea2 	bl	8007e26 <memset>
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80020e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80020e6:	4830      	ldr	r0, [pc, #192]	@ (80021a8 <TaskTX+0xf8>)
 80020e8:	f000 ffcc 	bl	8003084 <HAL_GPIO_TogglePin>
 80020ec:	e050      	b.n	8002190 <TaskTX+0xe0>
		  }
	}
	else if(last_send == 1)
 80020ee:	4b2f      	ldr	r3, [pc, #188]	@ (80021ac <TaskTX+0xfc>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d126      	bne.n	8002144 <TaskTX+0x94>
	{
		  last_send = 1 - last_send;
 80020f6:	4b2d      	ldr	r3, [pc, #180]	@ (80021ac <TaskTX+0xfc>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	f1c3 0301 	rsb	r3, r3, #1
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	4b2a      	ldr	r3, [pc, #168]	@ (80021ac <TaskTX+0xfc>)
 8002102:	701a      	strb	r2, [r3, #0]
		  memset((void*)send_to_rs485,0,sizeof(send_to_rs485));
 8002104:	2232      	movs	r2, #50	@ 0x32
 8002106:	2100      	movs	r1, #0
 8002108:	4825      	ldr	r0, [pc, #148]	@ (80021a0 <TaskTX+0xf0>)
 800210a:	f005 fe8c 	bl	8007e26 <memset>
		  sprintf(send_to_rs485, "%.1fC", temperature);
 800210e:	4b28      	ldr	r3, [pc, #160]	@ (80021b0 <TaskTX+0x100>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe f988 	bl	8000428 <__aeabi_f2d>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	4925      	ldr	r1, [pc, #148]	@ (80021b4 <TaskTX+0x104>)
 800211e:	4820      	ldr	r0, [pc, #128]	@ (80021a0 <TaskTX+0xf0>)
 8002120:	f005 fe04 	bl	8007d2c <siprintf>
		  gen_data_send_rs485(UPGRADE(CODE_TEMP),send_to_rs485);
 8002124:	491e      	ldr	r1, [pc, #120]	@ (80021a0 <TaskTX+0xf0>)
 8002126:	2080      	movs	r0, #128	@ 0x80
 8002128:	f7ff fcb8 	bl	8001a9c <gen_data_send_rs485>
		  HAL_UART_Transmit(&huart1, (uint8_t *)&send_to_rs485, strlen(send_to_rs485) , 1000);
 800212c:	481c      	ldr	r0, [pc, #112]	@ (80021a0 <TaskTX+0xf0>)
 800212e:	f7fe f80f 	bl	8000150 <strlen>
 8002132:	4603      	mov	r3, r0
 8002134:	b29a      	uxth	r2, r3
 8002136:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800213a:	4919      	ldr	r1, [pc, #100]	@ (80021a0 <TaskTX+0xf0>)
 800213c:	4819      	ldr	r0, [pc, #100]	@ (80021a4 <TaskTX+0xf4>)
 800213e:	f003 fbc1 	bl	80058c4 <HAL_UART_Transmit>
 8002142:	e025      	b.n	8002190 <TaskTX+0xe0>
	}
	else if(last_send == 0)
 8002144:	4b19      	ldr	r3, [pc, #100]	@ (80021ac <TaskTX+0xfc>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d121      	bne.n	8002190 <TaskTX+0xe0>
	{
	      last_send = 1 - last_send;
 800214c:	4b17      	ldr	r3, [pc, #92]	@ (80021ac <TaskTX+0xfc>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	f1c3 0301 	rsb	r3, r3, #1
 8002154:	b2da      	uxtb	r2, r3
 8002156:	4b15      	ldr	r3, [pc, #84]	@ (80021ac <TaskTX+0xfc>)
 8002158:	701a      	strb	r2, [r3, #0]
		  memset((void*)send_to_rs485, 0, sizeof(send_to_rs485));
 800215a:	2232      	movs	r2, #50	@ 0x32
 800215c:	2100      	movs	r1, #0
 800215e:	4810      	ldr	r0, [pc, #64]	@ (80021a0 <TaskTX+0xf0>)
 8002160:	f005 fe61 	bl	8007e26 <memset>
		  sprintf(send_to_rs485, "%dPa", (int) pressure);
 8002164:	4b14      	ldr	r3, [pc, #80]	@ (80021b8 <TaskTX+0x108>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	461a      	mov	r2, r3
 800216a:	4914      	ldr	r1, [pc, #80]	@ (80021bc <TaskTX+0x10c>)
 800216c:	480c      	ldr	r0, [pc, #48]	@ (80021a0 <TaskTX+0xf0>)
 800216e:	f005 fddd 	bl	8007d2c <siprintf>
		  gen_data_send_rs485(UPGRADE(CODE_PRES),send_to_rs485);
 8002172:	490b      	ldr	r1, [pc, #44]	@ (80021a0 <TaskTX+0xf0>)
 8002174:	2081      	movs	r0, #129	@ 0x81
 8002176:	f7ff fc91 	bl	8001a9c <gen_data_send_rs485>
		  HAL_UART_Transmit(&huart1, (uint8_t *)&send_to_rs485, strlen(send_to_rs485) , 1000);
 800217a:	4809      	ldr	r0, [pc, #36]	@ (80021a0 <TaskTX+0xf0>)
 800217c:	f7fd ffe8 	bl	8000150 <strlen>
 8002180:	4603      	mov	r3, r0
 8002182:	b29a      	uxth	r2, r3
 8002184:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002188:	4905      	ldr	r1, [pc, #20]	@ (80021a0 <TaskTX+0xf0>)
 800218a:	4806      	ldr	r0, [pc, #24]	@ (80021a4 <TaskTX+0xf4>)
 800218c:	f003 fb9a 	bl	80058c4 <HAL_UART_Transmit>
	}
	memset((void*)send_to_rs485, 0, sizeof(send_to_rs485));
 8002190:	2232      	movs	r2, #50	@ 0x32
 8002192:	2100      	movs	r1, #0
 8002194:	4802      	ldr	r0, [pc, #8]	@ (80021a0 <TaskTX+0xf0>)
 8002196:	f005 fe46 	bl	8007e26 <memset>
}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000638 	.word	0x20000638
 80021a4:	20000598 	.word	0x20000598
 80021a8:	40011000 	.word	0x40011000
 80021ac:	200006bd 	.word	0x200006bd
 80021b0:	200006b4 	.word	0x200006b4
 80021b4:	0800a0c0 	.word	0x0800a0c0
 80021b8:	200006b8 	.word	0x200006b8
 80021bc:	0800a0c8 	.word	0x0800a0c8

080021c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021c0:	b5b0      	push	{r4, r5, r7, lr}
 80021c2:	b0aa      	sub	sp, #168	@ 0xa8
 80021c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021c6:	f000 fc8b 	bl	8002ae0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021ca:	f000 f8ad 	bl	8002328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021ce:	f000 f949 	bl	8002464 <MX_GPIO_Init>
  MX_I2C1_Init();
 80021d2:	f000 f8ef 	bl	80023b4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80021d6:	f000 f91b 	bl	8002410 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init(2);
 80021da:	2002      	movs	r0, #2
 80021dc:	f7ff f868 	bl	80012b0 <HD44780_Init>
  MPR121_Init();
 80021e0:	f7fe fca2 	bl	8000b28 <MPR121_Init>
  BMP180_Init(&hi2c1);
 80021e4:	4842      	ldr	r0, [pc, #264]	@ (80022f0 <main+0x130>)
 80021e6:	f7fe fd8d 	bl	8000d04 <BMP180_Init>
  MPR121_Init();
 80021ea:	f7fe fc9d 	bl	8000b28 <MPR121_Init>
  BMP180_SetOversampling(BMP180_ULTRA);
 80021ee:	2003      	movs	r0, #3
 80021f0:	f7fe fd96 	bl	8000d20 <BMP180_SetOversampling>
  BMP180_UpdateCalibrationData();
 80021f4:	f7fe fda4 	bl	8000d40 <BMP180_UpdateCalibrationData>
  HD44780_SetCursor(0,0);
 80021f8:	2100      	movs	r1, #0
 80021fa:	2000      	movs	r0, #0
 80021fc:	f7ff f8f2 	bl	80013e4 <HD44780_SetCursor>
  HD44780_PrintStr("INIT LCD 1602");
 8002200:	483c      	ldr	r0, [pc, #240]	@ (80022f4 <main+0x134>)
 8002202:	f7ff f960 	bl	80014c6 <HD44780_PrintStr>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of RXUARTTask */
  osThreadDef(RXUARTTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002206:	4b3c      	ldr	r3, [pc, #240]	@ (80022f8 <main+0x138>)
 8002208:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 800220c:	461d      	mov	r5, r3
 800220e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002210:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002212:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002216:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RXUARTTaskHandle = osThreadCreate(osThread(RXUARTTask), NULL);
 800221a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800221e:	2100      	movs	r1, #0
 8002220:	4618      	mov	r0, r3
 8002222:	f003 fdd9 	bl	8005dd8 <osThreadCreate>
 8002226:	4603      	mov	r3, r0
 8002228:	4a34      	ldr	r2, [pc, #208]	@ (80022fc <main+0x13c>)
 800222a:	6013      	str	r3, [r2, #0]

  /* definition and creation of LCDTask */
  osThreadDef(LCDTask, StartTask02, osPriorityIdle, 0, 128);
 800222c:	4b34      	ldr	r3, [pc, #208]	@ (8002300 <main+0x140>)
 800222e:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8002232:	461d      	mov	r5, r3
 8002234:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002236:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002238:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800223c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LCDTaskHandle = osThreadCreate(osThread(LCDTask), NULL);
 8002240:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002244:	2100      	movs	r1, #0
 8002246:	4618      	mov	r0, r3
 8002248:	f003 fdc6 	bl	8005dd8 <osThreadCreate>
 800224c:	4603      	mov	r3, r0
 800224e:	4a2d      	ldr	r2, [pc, #180]	@ (8002304 <main+0x144>)
 8002250:	6013      	str	r3, [r2, #0]

  /* definition and creation of ReadTempTask */
  osThreadDef(ReadTempTask, StartTask03, osPriorityNormal, 0, 128);
 8002252:	4b2d      	ldr	r3, [pc, #180]	@ (8002308 <main+0x148>)
 8002254:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8002258:	461d      	mov	r5, r3
 800225a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800225c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800225e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002262:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadTempTaskHandle = osThreadCreate(osThread(ReadTempTask), NULL);
 8002266:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800226a:	2100      	movs	r1, #0
 800226c:	4618      	mov	r0, r3
 800226e:	f003 fdb3 	bl	8005dd8 <osThreadCreate>
 8002272:	4603      	mov	r3, r0
 8002274:	4a25      	ldr	r2, [pc, #148]	@ (800230c <main+0x14c>)
 8002276:	6013      	str	r3, [r2, #0]

  /* definition and creation of ReadPressTask */
  osThreadDef(ReadPressTask, StartTask04, osPriorityNormal, 0, 128);
 8002278:	4b25      	ldr	r3, [pc, #148]	@ (8002310 <main+0x150>)
 800227a:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 800227e:	461d      	mov	r5, r3
 8002280:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002282:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002284:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002288:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadPressTaskHandle = osThreadCreate(osThread(ReadPressTask), NULL);
 800228c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002290:	2100      	movs	r1, #0
 8002292:	4618      	mov	r0, r3
 8002294:	f003 fda0 	bl	8005dd8 <osThreadCreate>
 8002298:	4603      	mov	r3, r0
 800229a:	4a1e      	ldr	r2, [pc, #120]	@ (8002314 <main+0x154>)
 800229c:	6013      	str	r3, [r2, #0]

  /* definition and creation of KeyTask */
  osThreadDef(KeyTask, StartTask05, osPriorityNormal, 0, 128);
 800229e:	4b1e      	ldr	r3, [pc, #120]	@ (8002318 <main+0x158>)
 80022a0:	f107 041c 	add.w	r4, r7, #28
 80022a4:	461d      	mov	r5, r3
 80022a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  KeyTaskHandle = osThreadCreate(osThread(KeyTask), NULL);
 80022b2:	f107 031c 	add.w	r3, r7, #28
 80022b6:	2100      	movs	r1, #0
 80022b8:	4618      	mov	r0, r3
 80022ba:	f003 fd8d 	bl	8005dd8 <osThreadCreate>
 80022be:	4603      	mov	r3, r0
 80022c0:	4a16      	ldr	r2, [pc, #88]	@ (800231c <main+0x15c>)
 80022c2:	6013      	str	r3, [r2, #0]

  /* definition and creation of TXUARTTask */
  osThreadDef(TXUARTTask, StartTask06, osPriorityNormal, 0, 128);
 80022c4:	4b16      	ldr	r3, [pc, #88]	@ (8002320 <main+0x160>)
 80022c6:	463c      	mov	r4, r7
 80022c8:	461d      	mov	r5, r3
 80022ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TXUARTTaskHandle = osThreadCreate(osThread(TXUARTTask), NULL);
 80022d6:	463b      	mov	r3, r7
 80022d8:	2100      	movs	r1, #0
 80022da:	4618      	mov	r0, r3
 80022dc:	f003 fd7c 	bl	8005dd8 <osThreadCreate>
 80022e0:	4603      	mov	r3, r0
 80022e2:	4a10      	ldr	r2, [pc, #64]	@ (8002324 <main+0x164>)
 80022e4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80022e6:	f003 fd70 	bl	8005dca <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80022ea:	bf00      	nop
 80022ec:	e7fd      	b.n	80022ea <main+0x12a>
 80022ee:	bf00      	nop
 80022f0:	20000544 	.word	0x20000544
 80022f4:	0800a0e8 	.word	0x0800a0e8
 80022f8:	0800a104 	.word	0x0800a104
 80022fc:	200005e0 	.word	0x200005e0
 8002300:	0800a128 	.word	0x0800a128
 8002304:	200005e4 	.word	0x200005e4
 8002308:	0800a154 	.word	0x0800a154
 800230c:	200005e8 	.word	0x200005e8
 8002310:	0800a180 	.word	0x0800a180
 8002314:	200005ec 	.word	0x200005ec
 8002318:	0800a1a4 	.word	0x0800a1a4
 800231c:	200005f0 	.word	0x200005f0
 8002320:	0800a1cc 	.word	0x0800a1cc
 8002324:	200005f4 	.word	0x200005f4

08002328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b090      	sub	sp, #64	@ 0x40
 800232c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800232e:	f107 0318 	add.w	r3, r7, #24
 8002332:	2228      	movs	r2, #40	@ 0x28
 8002334:	2100      	movs	r1, #0
 8002336:	4618      	mov	r0, r3
 8002338:	f005 fd75 	bl	8007e26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800233c:	1d3b      	adds	r3, r7, #4
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	605a      	str	r2, [r3, #4]
 8002344:	609a      	str	r2, [r3, #8]
 8002346:	60da      	str	r2, [r3, #12]
 8002348:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800234a:	2301      	movs	r3, #1
 800234c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800234e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002352:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002354:	2300      	movs	r3, #0
 8002356:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002358:	2301      	movs	r3, #1
 800235a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800235c:	2302      	movs	r3, #2
 800235e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002360:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002364:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002366:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800236a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800236c:	f107 0318 	add.w	r3, r7, #24
 8002370:	4618      	mov	r0, r3
 8002372:	f002 fbd9 	bl	8004b28 <HAL_RCC_OscConfig>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800237c:	f000 f950 	bl	8002620 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002380:	230f      	movs	r3, #15
 8002382:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002384:	2302      	movs	r3, #2
 8002386:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002388:	2300      	movs	r3, #0
 800238a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800238c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002390:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002392:	2300      	movs	r3, #0
 8002394:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002396:	1d3b      	adds	r3, r7, #4
 8002398:	2102      	movs	r1, #2
 800239a:	4618      	mov	r0, r3
 800239c:	f002 fe46 	bl	800502c <HAL_RCC_ClockConfig>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80023a6:	f000 f93b 	bl	8002620 <Error_Handler>
  }
}
 80023aa:	bf00      	nop
 80023ac:	3740      	adds	r7, #64	@ 0x40
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
	...

080023b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023b8:	4b12      	ldr	r3, [pc, #72]	@ (8002404 <MX_I2C1_Init+0x50>)
 80023ba:	4a13      	ldr	r2, [pc, #76]	@ (8002408 <MX_I2C1_Init+0x54>)
 80023bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80023be:	4b11      	ldr	r3, [pc, #68]	@ (8002404 <MX_I2C1_Init+0x50>)
 80023c0:	4a12      	ldr	r2, [pc, #72]	@ (800240c <MX_I2C1_Init+0x58>)
 80023c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002404 <MX_I2C1_Init+0x50>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80023ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002404 <MX_I2C1_Init+0x50>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002404 <MX_I2C1_Init+0x50>)
 80023d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80023d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002404 <MX_I2C1_Init+0x50>)
 80023da:	2200      	movs	r2, #0
 80023dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80023de:	4b09      	ldr	r3, [pc, #36]	@ (8002404 <MX_I2C1_Init+0x50>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023e4:	4b07      	ldr	r3, [pc, #28]	@ (8002404 <MX_I2C1_Init+0x50>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023ea:	4b06      	ldr	r3, [pc, #24]	@ (8002404 <MX_I2C1_Init+0x50>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80023f0:	4804      	ldr	r0, [pc, #16]	@ (8002404 <MX_I2C1_Init+0x50>)
 80023f2:	f000 fe79 	bl	80030e8 <HAL_I2C_Init>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80023fc:	f000 f910 	bl	8002620 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002400:	bf00      	nop
 8002402:	bd80      	pop	{r7, pc}
 8002404:	20000544 	.word	0x20000544
 8002408:	40005400 	.word	0x40005400
 800240c:	000186a0 	.word	0x000186a0

08002410 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002414:	4b11      	ldr	r3, [pc, #68]	@ (800245c <MX_USART1_UART_Init+0x4c>)
 8002416:	4a12      	ldr	r2, [pc, #72]	@ (8002460 <MX_USART1_UART_Init+0x50>)
 8002418:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800241a:	4b10      	ldr	r3, [pc, #64]	@ (800245c <MX_USART1_UART_Init+0x4c>)
 800241c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002420:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002422:	4b0e      	ldr	r3, [pc, #56]	@ (800245c <MX_USART1_UART_Init+0x4c>)
 8002424:	2200      	movs	r2, #0
 8002426:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002428:	4b0c      	ldr	r3, [pc, #48]	@ (800245c <MX_USART1_UART_Init+0x4c>)
 800242a:	2200      	movs	r2, #0
 800242c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800242e:	4b0b      	ldr	r3, [pc, #44]	@ (800245c <MX_USART1_UART_Init+0x4c>)
 8002430:	2200      	movs	r2, #0
 8002432:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002434:	4b09      	ldr	r3, [pc, #36]	@ (800245c <MX_USART1_UART_Init+0x4c>)
 8002436:	220c      	movs	r2, #12
 8002438:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800243a:	4b08      	ldr	r3, [pc, #32]	@ (800245c <MX_USART1_UART_Init+0x4c>)
 800243c:	2200      	movs	r2, #0
 800243e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002440:	4b06      	ldr	r3, [pc, #24]	@ (800245c <MX_USART1_UART_Init+0x4c>)
 8002442:	2200      	movs	r2, #0
 8002444:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002446:	4805      	ldr	r0, [pc, #20]	@ (800245c <MX_USART1_UART_Init+0x4c>)
 8002448:	f003 f9ec 	bl	8005824 <HAL_UART_Init>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002452:	f000 f8e5 	bl	8002620 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	20000598 	.word	0x20000598
 8002460:	40013800 	.word	0x40013800

08002464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b088      	sub	sp, #32
 8002468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800246a:	f107 0310 	add.w	r3, r7, #16
 800246e:	2200      	movs	r2, #0
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	605a      	str	r2, [r3, #4]
 8002474:	609a      	str	r2, [r3, #8]
 8002476:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002478:	4b2e      	ldr	r3, [pc, #184]	@ (8002534 <MX_GPIO_Init+0xd0>)
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	4a2d      	ldr	r2, [pc, #180]	@ (8002534 <MX_GPIO_Init+0xd0>)
 800247e:	f043 0310 	orr.w	r3, r3, #16
 8002482:	6193      	str	r3, [r2, #24]
 8002484:	4b2b      	ldr	r3, [pc, #172]	@ (8002534 <MX_GPIO_Init+0xd0>)
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	f003 0310 	and.w	r3, r3, #16
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002490:	4b28      	ldr	r3, [pc, #160]	@ (8002534 <MX_GPIO_Init+0xd0>)
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	4a27      	ldr	r2, [pc, #156]	@ (8002534 <MX_GPIO_Init+0xd0>)
 8002496:	f043 0320 	orr.w	r3, r3, #32
 800249a:	6193      	str	r3, [r2, #24]
 800249c:	4b25      	ldr	r3, [pc, #148]	@ (8002534 <MX_GPIO_Init+0xd0>)
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	f003 0320 	and.w	r3, r3, #32
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a8:	4b22      	ldr	r3, [pc, #136]	@ (8002534 <MX_GPIO_Init+0xd0>)
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	4a21      	ldr	r2, [pc, #132]	@ (8002534 <MX_GPIO_Init+0xd0>)
 80024ae:	f043 0304 	orr.w	r3, r3, #4
 80024b2:	6193      	str	r3, [r2, #24]
 80024b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002534 <MX_GPIO_Init+0xd0>)
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	607b      	str	r3, [r7, #4]
 80024be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002534 <MX_GPIO_Init+0xd0>)
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	4a1b      	ldr	r2, [pc, #108]	@ (8002534 <MX_GPIO_Init+0xd0>)
 80024c6:	f043 0308 	orr.w	r3, r3, #8
 80024ca:	6193      	str	r3, [r2, #24]
 80024cc:	4b19      	ldr	r3, [pc, #100]	@ (8002534 <MX_GPIO_Init+0xd0>)
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	f003 0308 	and.w	r3, r3, #8
 80024d4:	603b      	str	r3, [r7, #0]
 80024d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80024d8:	2200      	movs	r2, #0
 80024da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80024de:	4816      	ldr	r0, [pc, #88]	@ (8002538 <MX_GPIO_Init+0xd4>)
 80024e0:	f000 fdb8 	bl	8003054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80024e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ea:	2301      	movs	r3, #1
 80024ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f2:	2302      	movs	r3, #2
 80024f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024f6:	f107 0310 	add.w	r3, r7, #16
 80024fa:	4619      	mov	r1, r3
 80024fc:	480e      	ldr	r0, [pc, #56]	@ (8002538 <MX_GPIO_Init+0xd4>)
 80024fe:	f000 fc25 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
 8002502:	2320      	movs	r3, #32
 8002504:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002506:	4b0d      	ldr	r3, [pc, #52]	@ (800253c <MX_GPIO_Init+0xd8>)
 8002508:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800250a:	2301      	movs	r3, #1
 800250c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 800250e:	f107 0310 	add.w	r3, r7, #16
 8002512:	4619      	mov	r1, r3
 8002514:	480a      	ldr	r0, [pc, #40]	@ (8002540 <MX_GPIO_Init+0xdc>)
 8002516:	f000 fc19 	bl	8002d4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800251a:	2200      	movs	r2, #0
 800251c:	2105      	movs	r1, #5
 800251e:	2017      	movs	r0, #23
 8002520:	f000 fbe9 	bl	8002cf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002524:	2017      	movs	r0, #23
 8002526:	f000 fc02 	bl	8002d2e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800252a:	bf00      	nop
 800252c:	3720      	adds	r7, #32
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40021000 	.word	0x40021000
 8002538:	40011000 	.word	0x40011000
 800253c:	10110000 	.word	0x10110000
 8002540:	40010c00 	.word	0x40010c00

08002544 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == INT_Pin) {
 800254e:	88fb      	ldrh	r3, [r7, #6]
 8002550:	2b20      	cmp	r3, #32
 8002552:	d10b      	bne.n	800256c <HAL_GPIO_EXTI_Callback+0x28>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002554:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002558:	4807      	ldr	r0, [pc, #28]	@ (8002578 <HAL_GPIO_EXTI_Callback+0x34>)
 800255a:	f000 fd93 	bl	8003084 <HAL_GPIO_TogglePin>
		count_touch++;
 800255e:	4b07      	ldr	r3, [pc, #28]	@ (800257c <HAL_GPIO_EXTI_Callback+0x38>)
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	3301      	adds	r3, #1
 8002564:	b29a      	uxth	r2, r3
 8002566:	4b05      	ldr	r3, [pc, #20]	@ (800257c <HAL_GPIO_EXTI_Callback+0x38>)
 8002568:	801a      	strh	r2, [r3, #0]
	} else {
		__NOP();
	}
}
 800256a:	e000      	b.n	800256e <HAL_GPIO_EXTI_Callback+0x2a>
		__NOP();
 800256c:	bf00      	nop
}
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40011000 	.word	0x40011000
 800257c:	200006c2 	.word	0x200006c2

08002580 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  TaskMPR121();
 8002588:	f7ff fb00 	bl	8001b8c <TaskMPR121>
	  TaskTempBMP180();
 800258c:	f7ff fbc2 	bl	8001d14 <TaskTempBMP180>
	  TaskPressBMP180();
 8002590:	f7ff fbcc 	bl	8001d2c <TaskPressBMP180>
	  TaskLCD();
 8002594:	f7ff fbd6 	bl	8001d44 <TaskLCD>
	  TaskRX();
 8002598:	f7ff fc22 	bl	8001de0 <TaskRX>
	  TaskTX();
 800259c:	f7ff fd88 	bl	80020b0 <TaskTX>

    osDelay(1);
 80025a0:	2001      	movs	r0, #1
 80025a2:	f003 fc65 	bl	8005e70 <osDelay>
	  TaskMPR121();
 80025a6:	bf00      	nop
 80025a8:	e7ee      	b.n	8002588 <StartDefaultTask+0x8>

080025aa <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b082      	sub	sp, #8
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80025b2:	2001      	movs	r0, #1
 80025b4:	f003 fc5c 	bl	8005e70 <osDelay>
 80025b8:	e7fb      	b.n	80025b2 <StartTask02+0x8>

080025ba <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b082      	sub	sp, #8
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80025c2:	2001      	movs	r0, #1
 80025c4:	f003 fc54 	bl	8005e70 <osDelay>
 80025c8:	e7fb      	b.n	80025c2 <StartTask03+0x8>

080025ca <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b082      	sub	sp, #8
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80025d2:	2001      	movs	r0, #1
 80025d4:	f003 fc4c 	bl	8005e70 <osDelay>
 80025d8:	e7fb      	b.n	80025d2 <StartTask04+0x8>

080025da <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void const * argument)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b082      	sub	sp, #8
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80025e2:	2001      	movs	r0, #1
 80025e4:	f003 fc44 	bl	8005e70 <osDelay>
 80025e8:	e7fb      	b.n	80025e2 <StartTask05+0x8>

080025ea <StartTask06>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask06 */
void StartTask06(void const * argument)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b082      	sub	sp, #8
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask06 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80025f2:	2001      	movs	r0, #1
 80025f4:	f003 fc3c 	bl	8005e70 <osDelay>
 80025f8:	e7fb      	b.n	80025f2 <StartTask06+0x8>
	...

080025fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a04      	ldr	r2, [pc, #16]	@ (800261c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d101      	bne.n	8002612 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800260e:	f000 fa7d 	bl	8002b0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002612:	bf00      	nop
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40000800 	.word	0x40000800

08002620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002624:	b672      	cpsid	i
}
 8002626:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002628:	bf00      	nop
 800262a:	e7fd      	b.n	8002628 <Error_Handler+0x8>

0800262c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002632:	4b18      	ldr	r3, [pc, #96]	@ (8002694 <HAL_MspInit+0x68>)
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	4a17      	ldr	r2, [pc, #92]	@ (8002694 <HAL_MspInit+0x68>)
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	6193      	str	r3, [r2, #24]
 800263e:	4b15      	ldr	r3, [pc, #84]	@ (8002694 <HAL_MspInit+0x68>)
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	60bb      	str	r3, [r7, #8]
 8002648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800264a:	4b12      	ldr	r3, [pc, #72]	@ (8002694 <HAL_MspInit+0x68>)
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	4a11      	ldr	r2, [pc, #68]	@ (8002694 <HAL_MspInit+0x68>)
 8002650:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002654:	61d3      	str	r3, [r2, #28]
 8002656:	4b0f      	ldr	r3, [pc, #60]	@ (8002694 <HAL_MspInit+0x68>)
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800265e:	607b      	str	r3, [r7, #4]
 8002660:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002662:	2200      	movs	r2, #0
 8002664:	210f      	movs	r1, #15
 8002666:	f06f 0001 	mvn.w	r0, #1
 800266a:	f000 fb44 	bl	8002cf6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800266e:	4b0a      	ldr	r3, [pc, #40]	@ (8002698 <HAL_MspInit+0x6c>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	4a04      	ldr	r2, [pc, #16]	@ (8002698 <HAL_MspInit+0x6c>)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800268a:	bf00      	nop
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40021000 	.word	0x40021000
 8002698:	40010000 	.word	0x40010000

0800269c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b088      	sub	sp, #32
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a4:	f107 0310 	add.w	r3, r7, #16
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	605a      	str	r2, [r3, #4]
 80026ae:	609a      	str	r2, [r3, #8]
 80026b0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a15      	ldr	r2, [pc, #84]	@ (800270c <HAL_I2C_MspInit+0x70>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d123      	bne.n	8002704 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026bc:	4b14      	ldr	r3, [pc, #80]	@ (8002710 <HAL_I2C_MspInit+0x74>)
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	4a13      	ldr	r2, [pc, #76]	@ (8002710 <HAL_I2C_MspInit+0x74>)
 80026c2:	f043 0308 	orr.w	r3, r3, #8
 80026c6:	6193      	str	r3, [r2, #24]
 80026c8:	4b11      	ldr	r3, [pc, #68]	@ (8002710 <HAL_I2C_MspInit+0x74>)
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	f003 0308 	and.w	r3, r3, #8
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026d4:	23c0      	movs	r3, #192	@ 0xc0
 80026d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026d8:	2312      	movs	r3, #18
 80026da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026dc:	2303      	movs	r3, #3
 80026de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026e0:	f107 0310 	add.w	r3, r7, #16
 80026e4:	4619      	mov	r1, r3
 80026e6:	480b      	ldr	r0, [pc, #44]	@ (8002714 <HAL_I2C_MspInit+0x78>)
 80026e8:	f000 fb30 	bl	8002d4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026ec:	4b08      	ldr	r3, [pc, #32]	@ (8002710 <HAL_I2C_MspInit+0x74>)
 80026ee:	69db      	ldr	r3, [r3, #28]
 80026f0:	4a07      	ldr	r2, [pc, #28]	@ (8002710 <HAL_I2C_MspInit+0x74>)
 80026f2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80026f6:	61d3      	str	r3, [r2, #28]
 80026f8:	4b05      	ldr	r3, [pc, #20]	@ (8002710 <HAL_I2C_MspInit+0x74>)
 80026fa:	69db      	ldr	r3, [r3, #28]
 80026fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002700:	60bb      	str	r3, [r7, #8]
 8002702:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002704:	bf00      	nop
 8002706:	3720      	adds	r7, #32
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40005400 	.word	0x40005400
 8002710:	40021000 	.word	0x40021000
 8002714:	40010c00 	.word	0x40010c00

08002718 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b088      	sub	sp, #32
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002720:	f107 0310 	add.w	r3, r7, #16
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	605a      	str	r2, [r3, #4]
 800272a:	609a      	str	r2, [r3, #8]
 800272c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a1c      	ldr	r2, [pc, #112]	@ (80027a4 <HAL_UART_MspInit+0x8c>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d131      	bne.n	800279c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002738:	4b1b      	ldr	r3, [pc, #108]	@ (80027a8 <HAL_UART_MspInit+0x90>)
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	4a1a      	ldr	r2, [pc, #104]	@ (80027a8 <HAL_UART_MspInit+0x90>)
 800273e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002742:	6193      	str	r3, [r2, #24]
 8002744:	4b18      	ldr	r3, [pc, #96]	@ (80027a8 <HAL_UART_MspInit+0x90>)
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002750:	4b15      	ldr	r3, [pc, #84]	@ (80027a8 <HAL_UART_MspInit+0x90>)
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	4a14      	ldr	r2, [pc, #80]	@ (80027a8 <HAL_UART_MspInit+0x90>)
 8002756:	f043 0304 	orr.w	r3, r3, #4
 800275a:	6193      	str	r3, [r2, #24]
 800275c:	4b12      	ldr	r3, [pc, #72]	@ (80027a8 <HAL_UART_MspInit+0x90>)
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	60bb      	str	r3, [r7, #8]
 8002766:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002768:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800276c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276e:	2302      	movs	r3, #2
 8002770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002772:	2303      	movs	r3, #3
 8002774:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002776:	f107 0310 	add.w	r3, r7, #16
 800277a:	4619      	mov	r1, r3
 800277c:	480b      	ldr	r0, [pc, #44]	@ (80027ac <HAL_UART_MspInit+0x94>)
 800277e:	f000 fae5 	bl	8002d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002782:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002786:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278c:	2300      	movs	r3, #0
 800278e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002790:	f107 0310 	add.w	r3, r7, #16
 8002794:	4619      	mov	r1, r3
 8002796:	4805      	ldr	r0, [pc, #20]	@ (80027ac <HAL_UART_MspInit+0x94>)
 8002798:	f000 fad8 	bl	8002d4c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800279c:	bf00      	nop
 800279e:	3720      	adds	r7, #32
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40013800 	.word	0x40013800
 80027a8:	40021000 	.word	0x40021000
 80027ac:	40010800 	.word	0x40010800

080027b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08e      	sub	sp, #56	@ 0x38
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80027bc:	2300      	movs	r3, #0
 80027be:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80027c0:	2300      	movs	r3, #0
 80027c2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80027c6:	4b34      	ldr	r3, [pc, #208]	@ (8002898 <HAL_InitTick+0xe8>)
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	4a33      	ldr	r2, [pc, #204]	@ (8002898 <HAL_InitTick+0xe8>)
 80027cc:	f043 0304 	orr.w	r3, r3, #4
 80027d0:	61d3      	str	r3, [r2, #28]
 80027d2:	4b31      	ldr	r3, [pc, #196]	@ (8002898 <HAL_InitTick+0xe8>)
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	f003 0304 	and.w	r3, r3, #4
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80027de:	f107 0210 	add.w	r2, r7, #16
 80027e2:	f107 0314 	add.w	r3, r7, #20
 80027e6:	4611      	mov	r1, r2
 80027e8:	4618      	mov	r0, r3
 80027ea:	f002 fd8f 	bl	800530c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80027ee:	6a3b      	ldr	r3, [r7, #32]
 80027f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80027f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d103      	bne.n	8002800 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80027f8:	f002 fd60 	bl	80052bc <HAL_RCC_GetPCLK1Freq>
 80027fc:	6378      	str	r0, [r7, #52]	@ 0x34
 80027fe:	e004      	b.n	800280a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002800:	f002 fd5c 	bl	80052bc <HAL_RCC_GetPCLK1Freq>
 8002804:	4603      	mov	r3, r0
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800280a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800280c:	4a23      	ldr	r2, [pc, #140]	@ (800289c <HAL_InitTick+0xec>)
 800280e:	fba2 2303 	umull	r2, r3, r2, r3
 8002812:	0c9b      	lsrs	r3, r3, #18
 8002814:	3b01      	subs	r3, #1
 8002816:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002818:	4b21      	ldr	r3, [pc, #132]	@ (80028a0 <HAL_InitTick+0xf0>)
 800281a:	4a22      	ldr	r2, [pc, #136]	@ (80028a4 <HAL_InitTick+0xf4>)
 800281c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800281e:	4b20      	ldr	r3, [pc, #128]	@ (80028a0 <HAL_InitTick+0xf0>)
 8002820:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002824:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002826:	4a1e      	ldr	r2, [pc, #120]	@ (80028a0 <HAL_InitTick+0xf0>)
 8002828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800282a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800282c:	4b1c      	ldr	r3, [pc, #112]	@ (80028a0 <HAL_InitTick+0xf0>)
 800282e:	2200      	movs	r2, #0
 8002830:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002832:	4b1b      	ldr	r3, [pc, #108]	@ (80028a0 <HAL_InitTick+0xf0>)
 8002834:	2200      	movs	r2, #0
 8002836:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002838:	4b19      	ldr	r3, [pc, #100]	@ (80028a0 <HAL_InitTick+0xf0>)
 800283a:	2200      	movs	r2, #0
 800283c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800283e:	4818      	ldr	r0, [pc, #96]	@ (80028a0 <HAL_InitTick+0xf0>)
 8002840:	f002 fdb2 	bl	80053a8 <HAL_TIM_Base_Init>
 8002844:	4603      	mov	r3, r0
 8002846:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800284a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800284e:	2b00      	cmp	r3, #0
 8002850:	d11b      	bne.n	800288a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8002852:	4813      	ldr	r0, [pc, #76]	@ (80028a0 <HAL_InitTick+0xf0>)
 8002854:	f002 fe00 	bl	8005458 <HAL_TIM_Base_Start_IT>
 8002858:	4603      	mov	r3, r0
 800285a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800285e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002862:	2b00      	cmp	r3, #0
 8002864:	d111      	bne.n	800288a <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002866:	201e      	movs	r0, #30
 8002868:	f000 fa61 	bl	8002d2e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b0f      	cmp	r3, #15
 8002870:	d808      	bhi.n	8002884 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8002872:	2200      	movs	r2, #0
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	201e      	movs	r0, #30
 8002878:	f000 fa3d 	bl	8002cf6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800287c:	4a0a      	ldr	r2, [pc, #40]	@ (80028a8 <HAL_InitTick+0xf8>)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	e002      	b.n	800288a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800288a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800288e:	4618      	mov	r0, r3
 8002890:	3738      	adds	r7, #56	@ 0x38
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40021000 	.word	0x40021000
 800289c:	431bde83 	.word	0x431bde83
 80028a0:	200006c4 	.word	0x200006c4
 80028a4:	40000800 	.word	0x40000800
 80028a8:	20000090 	.word	0x20000090

080028ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028b0:	bf00      	nop
 80028b2:	e7fd      	b.n	80028b0 <NMI_Handler+0x4>

080028b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028b8:	bf00      	nop
 80028ba:	e7fd      	b.n	80028b8 <HardFault_Handler+0x4>

080028bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028c0:	bf00      	nop
 80028c2:	e7fd      	b.n	80028c0 <MemManage_Handler+0x4>

080028c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028c8:	bf00      	nop
 80028ca:	e7fd      	b.n	80028c8 <BusFault_Handler+0x4>

080028cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028d0:	bf00      	nop
 80028d2:	e7fd      	b.n	80028d0 <UsageFault_Handler+0x4>

080028d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028d8:	bf00      	nop
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr

080028e0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_Pin);
 80028e4:	2020      	movs	r0, #32
 80028e6:	f000 fbe7 	bl	80030b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80028ea:	bf00      	nop
 80028ec:	bd80      	pop	{r7, pc}
	...

080028f0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80028f4:	4802      	ldr	r0, [pc, #8]	@ (8002900 <TIM4_IRQHandler+0x10>)
 80028f6:	f002 fe01 	bl	80054fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80028fa:	bf00      	nop
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	200006c4 	.word	0x200006c4

08002904 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  return 1;
 8002908:	2301      	movs	r3, #1
}
 800290a:	4618      	mov	r0, r3
 800290c:	46bd      	mov	sp, r7
 800290e:	bc80      	pop	{r7}
 8002910:	4770      	bx	lr

08002912 <_kill>:

int _kill(int pid, int sig)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b082      	sub	sp, #8
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
 800291a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800291c:	f005 fb3e 	bl	8007f9c <__errno>
 8002920:	4603      	mov	r3, r0
 8002922:	2216      	movs	r2, #22
 8002924:	601a      	str	r2, [r3, #0]
  return -1;
 8002926:	f04f 33ff 	mov.w	r3, #4294967295
}
 800292a:	4618      	mov	r0, r3
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <_exit>:

void _exit (int status)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b082      	sub	sp, #8
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800293a:	f04f 31ff 	mov.w	r1, #4294967295
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7ff ffe7 	bl	8002912 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002944:	bf00      	nop
 8002946:	e7fd      	b.n	8002944 <_exit+0x12>

08002948 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002954:	2300      	movs	r3, #0
 8002956:	617b      	str	r3, [r7, #20]
 8002958:	e00a      	b.n	8002970 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800295a:	f3af 8000 	nop.w
 800295e:	4601      	mov	r1, r0
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	1c5a      	adds	r2, r3, #1
 8002964:	60ba      	str	r2, [r7, #8]
 8002966:	b2ca      	uxtb	r2, r1
 8002968:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	3301      	adds	r3, #1
 800296e:	617b      	str	r3, [r7, #20]
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	429a      	cmp	r2, r3
 8002976:	dbf0      	blt.n	800295a <_read+0x12>
  }

  return len;
 8002978:	687b      	ldr	r3, [r7, #4]
}
 800297a:	4618      	mov	r0, r3
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b086      	sub	sp, #24
 8002986:	af00      	add	r7, sp, #0
 8002988:	60f8      	str	r0, [r7, #12]
 800298a:	60b9      	str	r1, [r7, #8]
 800298c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800298e:	2300      	movs	r3, #0
 8002990:	617b      	str	r3, [r7, #20]
 8002992:	e009      	b.n	80029a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	60ba      	str	r2, [r7, #8]
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	3301      	adds	r3, #1
 80029a6:	617b      	str	r3, [r7, #20]
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	dbf1      	blt.n	8002994 <_write+0x12>
  }
  return len;
 80029b0:	687b      	ldr	r3, [r7, #4]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <_close>:

int _close(int file)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80029c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr

080029d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80029e0:	605a      	str	r2, [r3, #4]
  return 0;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bc80      	pop	{r7}
 80029ec:	4770      	bx	lr

080029ee <_isatty>:

int _isatty(int file)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80029f6:	2301      	movs	r3, #1
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr

08002a02 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b085      	sub	sp, #20
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	60f8      	str	r0, [r7, #12]
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc80      	pop	{r7}
 8002a18:	4770      	bx	lr
	...

08002a1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a24:	4a14      	ldr	r2, [pc, #80]	@ (8002a78 <_sbrk+0x5c>)
 8002a26:	4b15      	ldr	r3, [pc, #84]	@ (8002a7c <_sbrk+0x60>)
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a30:	4b13      	ldr	r3, [pc, #76]	@ (8002a80 <_sbrk+0x64>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d102      	bne.n	8002a3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a38:	4b11      	ldr	r3, [pc, #68]	@ (8002a80 <_sbrk+0x64>)
 8002a3a:	4a12      	ldr	r2, [pc, #72]	@ (8002a84 <_sbrk+0x68>)
 8002a3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a3e:	4b10      	ldr	r3, [pc, #64]	@ (8002a80 <_sbrk+0x64>)
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4413      	add	r3, r2
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d207      	bcs.n	8002a5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a4c:	f005 faa6 	bl	8007f9c <__errno>
 8002a50:	4603      	mov	r3, r0
 8002a52:	220c      	movs	r2, #12
 8002a54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a56:	f04f 33ff 	mov.w	r3, #4294967295
 8002a5a:	e009      	b.n	8002a70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a5c:	4b08      	ldr	r3, [pc, #32]	@ (8002a80 <_sbrk+0x64>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a62:	4b07      	ldr	r3, [pc, #28]	@ (8002a80 <_sbrk+0x64>)
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4413      	add	r3, r2
 8002a6a:	4a05      	ldr	r2, [pc, #20]	@ (8002a80 <_sbrk+0x64>)
 8002a6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3718      	adds	r7, #24
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	20005000 	.word	0x20005000
 8002a7c:	00000400 	.word	0x00000400
 8002a80:	2000070c 	.word	0x2000070c
 8002a84:	200049b8 	.word	0x200049b8

08002a88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a8c:	bf00      	nop
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr

08002a94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a94:	f7ff fff8 	bl	8002a88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a98:	480b      	ldr	r0, [pc, #44]	@ (8002ac8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002a9a:	490c      	ldr	r1, [pc, #48]	@ (8002acc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002a9c:	4a0c      	ldr	r2, [pc, #48]	@ (8002ad0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002aa0:	e002      	b.n	8002aa8 <LoopCopyDataInit>

08002aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002aa6:	3304      	adds	r3, #4

08002aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002aac:	d3f9      	bcc.n	8002aa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aae:	4a09      	ldr	r2, [pc, #36]	@ (8002ad4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002ab0:	4c09      	ldr	r4, [pc, #36]	@ (8002ad8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ab4:	e001      	b.n	8002aba <LoopFillZerobss>

08002ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ab8:	3204      	adds	r2, #4

08002aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002abc:	d3fb      	bcc.n	8002ab6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002abe:	f005 fa73 	bl	8007fa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ac2:	f7ff fb7d 	bl	80021c0 <main>
  bx lr
 8002ac6:	4770      	bx	lr
  ldr r0, =_sdata
 8002ac8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002acc:	20000264 	.word	0x20000264
  ldr r2, =_sidata
 8002ad0:	0800a5a8 	.word	0x0800a5a8
  ldr r2, =_sbss
 8002ad4:	20000264 	.word	0x20000264
  ldr r4, =_ebss
 8002ad8:	200049b4 	.word	0x200049b4

08002adc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002adc:	e7fe      	b.n	8002adc <ADC1_2_IRQHandler>
	...

08002ae0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ae4:	4b08      	ldr	r3, [pc, #32]	@ (8002b08 <HAL_Init+0x28>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a07      	ldr	r2, [pc, #28]	@ (8002b08 <HAL_Init+0x28>)
 8002aea:	f043 0310 	orr.w	r3, r3, #16
 8002aee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002af0:	2003      	movs	r0, #3
 8002af2:	f000 f8f5 	bl	8002ce0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002af6:	200f      	movs	r0, #15
 8002af8:	f7ff fe5a 	bl	80027b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002afc:	f7ff fd96 	bl	800262c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40022000 	.word	0x40022000

08002b0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b10:	4b05      	ldr	r3, [pc, #20]	@ (8002b28 <HAL_IncTick+0x1c>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	461a      	mov	r2, r3
 8002b16:	4b05      	ldr	r3, [pc, #20]	@ (8002b2c <HAL_IncTick+0x20>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	4a03      	ldr	r2, [pc, #12]	@ (8002b2c <HAL_IncTick+0x20>)
 8002b1e:	6013      	str	r3, [r2, #0]
}
 8002b20:	bf00      	nop
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc80      	pop	{r7}
 8002b26:	4770      	bx	lr
 8002b28:	20000094 	.word	0x20000094
 8002b2c:	20000710 	.word	0x20000710

08002b30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  return uwTick;
 8002b34:	4b02      	ldr	r3, [pc, #8]	@ (8002b40 <HAL_GetTick+0x10>)
 8002b36:	681b      	ldr	r3, [r3, #0]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr
 8002b40:	20000710 	.word	0x20000710

08002b44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b4c:	f7ff fff0 	bl	8002b30 <HAL_GetTick>
 8002b50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b5c:	d005      	beq.n	8002b6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b88 <HAL_Delay+0x44>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	461a      	mov	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4413      	add	r3, r2
 8002b68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b6a:	bf00      	nop
 8002b6c:	f7ff ffe0 	bl	8002b30 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d8f7      	bhi.n	8002b6c <HAL_Delay+0x28>
  {
  }
}
 8002b7c:	bf00      	nop
 8002b7e:	bf00      	nop
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	20000094 	.word	0x20000094

08002b8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f003 0307 	and.w	r3, r3, #7
 8002b9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ba2:	68ba      	ldr	r2, [r7, #8]
 8002ba4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ba8:	4013      	ands	r3, r2
 8002baa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002bb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bbe:	4a04      	ldr	r2, [pc, #16]	@ (8002bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	60d3      	str	r3, [r2, #12]
}
 8002bc4:	bf00      	nop
 8002bc6:	3714      	adds	r7, #20
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bc80      	pop	{r7}
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	e000ed00 	.word	0xe000ed00

08002bd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bd8:	4b04      	ldr	r3, [pc, #16]	@ (8002bec <__NVIC_GetPriorityGrouping+0x18>)
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	0a1b      	lsrs	r3, r3, #8
 8002bde:	f003 0307 	and.w	r3, r3, #7
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bc80      	pop	{r7}
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	e000ed00 	.word	0xe000ed00

08002bf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	db0b      	blt.n	8002c1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c02:	79fb      	ldrb	r3, [r7, #7]
 8002c04:	f003 021f 	and.w	r2, r3, #31
 8002c08:	4906      	ldr	r1, [pc, #24]	@ (8002c24 <__NVIC_EnableIRQ+0x34>)
 8002c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0e:	095b      	lsrs	r3, r3, #5
 8002c10:	2001      	movs	r0, #1
 8002c12:	fa00 f202 	lsl.w	r2, r0, r2
 8002c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c1a:	bf00      	nop
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr
 8002c24:	e000e100 	.word	0xe000e100

08002c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	6039      	str	r1, [r7, #0]
 8002c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	db0a      	blt.n	8002c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	490c      	ldr	r1, [pc, #48]	@ (8002c74 <__NVIC_SetPriority+0x4c>)
 8002c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c46:	0112      	lsls	r2, r2, #4
 8002c48:	b2d2      	uxtb	r2, r2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c50:	e00a      	b.n	8002c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	4908      	ldr	r1, [pc, #32]	@ (8002c78 <__NVIC_SetPriority+0x50>)
 8002c58:	79fb      	ldrb	r3, [r7, #7]
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	3b04      	subs	r3, #4
 8002c60:	0112      	lsls	r2, r2, #4
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	440b      	add	r3, r1
 8002c66:	761a      	strb	r2, [r3, #24]
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bc80      	pop	{r7}
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	e000e100 	.word	0xe000e100
 8002c78:	e000ed00 	.word	0xe000ed00

08002c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b089      	sub	sp, #36	@ 0x24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	f1c3 0307 	rsb	r3, r3, #7
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	bf28      	it	cs
 8002c9a:	2304      	movcs	r3, #4
 8002c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	2b06      	cmp	r3, #6
 8002ca4:	d902      	bls.n	8002cac <NVIC_EncodePriority+0x30>
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	3b03      	subs	r3, #3
 8002caa:	e000      	b.n	8002cae <NVIC_EncodePriority+0x32>
 8002cac:	2300      	movs	r3, #0
 8002cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	43da      	mvns	r2, r3
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	401a      	ands	r2, r3
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	fa01 f303 	lsl.w	r3, r1, r3
 8002cce:	43d9      	mvns	r1, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd4:	4313      	orrs	r3, r2
         );
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3724      	adds	r7, #36	@ 0x24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr

08002ce0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f7ff ff4f 	bl	8002b8c <__NVIC_SetPriorityGrouping>
}
 8002cee:	bf00      	nop
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b086      	sub	sp, #24
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	60b9      	str	r1, [r7, #8]
 8002d00:	607a      	str	r2, [r7, #4]
 8002d02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d08:	f7ff ff64 	bl	8002bd4 <__NVIC_GetPriorityGrouping>
 8002d0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	68b9      	ldr	r1, [r7, #8]
 8002d12:	6978      	ldr	r0, [r7, #20]
 8002d14:	f7ff ffb2 	bl	8002c7c <NVIC_EncodePriority>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d1e:	4611      	mov	r1, r2
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff ff81 	bl	8002c28 <__NVIC_SetPriority>
}
 8002d26:	bf00      	nop
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b082      	sub	sp, #8
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	4603      	mov	r3, r0
 8002d36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff ff57 	bl	8002bf0 <__NVIC_EnableIRQ>
}
 8002d42:	bf00      	nop
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
	...

08002d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b08b      	sub	sp, #44	@ 0x2c
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d56:	2300      	movs	r3, #0
 8002d58:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d5e:	e169      	b.n	8003034 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d60:	2201      	movs	r2, #1
 8002d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	69fa      	ldr	r2, [r7, #28]
 8002d70:	4013      	ands	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	f040 8158 	bne.w	800302e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	4a9a      	ldr	r2, [pc, #616]	@ (8002fec <HAL_GPIO_Init+0x2a0>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d05e      	beq.n	8002e46 <HAL_GPIO_Init+0xfa>
 8002d88:	4a98      	ldr	r2, [pc, #608]	@ (8002fec <HAL_GPIO_Init+0x2a0>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d875      	bhi.n	8002e7a <HAL_GPIO_Init+0x12e>
 8002d8e:	4a98      	ldr	r2, [pc, #608]	@ (8002ff0 <HAL_GPIO_Init+0x2a4>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d058      	beq.n	8002e46 <HAL_GPIO_Init+0xfa>
 8002d94:	4a96      	ldr	r2, [pc, #600]	@ (8002ff0 <HAL_GPIO_Init+0x2a4>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d86f      	bhi.n	8002e7a <HAL_GPIO_Init+0x12e>
 8002d9a:	4a96      	ldr	r2, [pc, #600]	@ (8002ff4 <HAL_GPIO_Init+0x2a8>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d052      	beq.n	8002e46 <HAL_GPIO_Init+0xfa>
 8002da0:	4a94      	ldr	r2, [pc, #592]	@ (8002ff4 <HAL_GPIO_Init+0x2a8>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d869      	bhi.n	8002e7a <HAL_GPIO_Init+0x12e>
 8002da6:	4a94      	ldr	r2, [pc, #592]	@ (8002ff8 <HAL_GPIO_Init+0x2ac>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d04c      	beq.n	8002e46 <HAL_GPIO_Init+0xfa>
 8002dac:	4a92      	ldr	r2, [pc, #584]	@ (8002ff8 <HAL_GPIO_Init+0x2ac>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d863      	bhi.n	8002e7a <HAL_GPIO_Init+0x12e>
 8002db2:	4a92      	ldr	r2, [pc, #584]	@ (8002ffc <HAL_GPIO_Init+0x2b0>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d046      	beq.n	8002e46 <HAL_GPIO_Init+0xfa>
 8002db8:	4a90      	ldr	r2, [pc, #576]	@ (8002ffc <HAL_GPIO_Init+0x2b0>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d85d      	bhi.n	8002e7a <HAL_GPIO_Init+0x12e>
 8002dbe:	2b12      	cmp	r3, #18
 8002dc0:	d82a      	bhi.n	8002e18 <HAL_GPIO_Init+0xcc>
 8002dc2:	2b12      	cmp	r3, #18
 8002dc4:	d859      	bhi.n	8002e7a <HAL_GPIO_Init+0x12e>
 8002dc6:	a201      	add	r2, pc, #4	@ (adr r2, 8002dcc <HAL_GPIO_Init+0x80>)
 8002dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dcc:	08002e47 	.word	0x08002e47
 8002dd0:	08002e21 	.word	0x08002e21
 8002dd4:	08002e33 	.word	0x08002e33
 8002dd8:	08002e75 	.word	0x08002e75
 8002ddc:	08002e7b 	.word	0x08002e7b
 8002de0:	08002e7b 	.word	0x08002e7b
 8002de4:	08002e7b 	.word	0x08002e7b
 8002de8:	08002e7b 	.word	0x08002e7b
 8002dec:	08002e7b 	.word	0x08002e7b
 8002df0:	08002e7b 	.word	0x08002e7b
 8002df4:	08002e7b 	.word	0x08002e7b
 8002df8:	08002e7b 	.word	0x08002e7b
 8002dfc:	08002e7b 	.word	0x08002e7b
 8002e00:	08002e7b 	.word	0x08002e7b
 8002e04:	08002e7b 	.word	0x08002e7b
 8002e08:	08002e7b 	.word	0x08002e7b
 8002e0c:	08002e7b 	.word	0x08002e7b
 8002e10:	08002e29 	.word	0x08002e29
 8002e14:	08002e3d 	.word	0x08002e3d
 8002e18:	4a79      	ldr	r2, [pc, #484]	@ (8003000 <HAL_GPIO_Init+0x2b4>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d013      	beq.n	8002e46 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e1e:	e02c      	b.n	8002e7a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	623b      	str	r3, [r7, #32]
          break;
 8002e26:	e029      	b.n	8002e7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	3304      	adds	r3, #4
 8002e2e:	623b      	str	r3, [r7, #32]
          break;
 8002e30:	e024      	b.n	8002e7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	3308      	adds	r3, #8
 8002e38:	623b      	str	r3, [r7, #32]
          break;
 8002e3a:	e01f      	b.n	8002e7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	330c      	adds	r3, #12
 8002e42:	623b      	str	r3, [r7, #32]
          break;
 8002e44:	e01a      	b.n	8002e7c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d102      	bne.n	8002e54 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e4e:	2304      	movs	r3, #4
 8002e50:	623b      	str	r3, [r7, #32]
          break;
 8002e52:	e013      	b.n	8002e7c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d105      	bne.n	8002e68 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e5c:	2308      	movs	r3, #8
 8002e5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	69fa      	ldr	r2, [r7, #28]
 8002e64:	611a      	str	r2, [r3, #16]
          break;
 8002e66:	e009      	b.n	8002e7c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e68:	2308      	movs	r3, #8
 8002e6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	69fa      	ldr	r2, [r7, #28]
 8002e70:	615a      	str	r2, [r3, #20]
          break;
 8002e72:	e003      	b.n	8002e7c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e74:	2300      	movs	r3, #0
 8002e76:	623b      	str	r3, [r7, #32]
          break;
 8002e78:	e000      	b.n	8002e7c <HAL_GPIO_Init+0x130>
          break;
 8002e7a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	2bff      	cmp	r3, #255	@ 0xff
 8002e80:	d801      	bhi.n	8002e86 <HAL_GPIO_Init+0x13a>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	e001      	b.n	8002e8a <HAL_GPIO_Init+0x13e>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	3304      	adds	r3, #4
 8002e8a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	2bff      	cmp	r3, #255	@ 0xff
 8002e90:	d802      	bhi.n	8002e98 <HAL_GPIO_Init+0x14c>
 8002e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	e002      	b.n	8002e9e <HAL_GPIO_Init+0x152>
 8002e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9a:	3b08      	subs	r3, #8
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	210f      	movs	r1, #15
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8002eac:	43db      	mvns	r3, r3
 8002eae:	401a      	ands	r2, r3
 8002eb0:	6a39      	ldr	r1, [r7, #32]
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f000 80b1 	beq.w	800302e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ecc:	4b4d      	ldr	r3, [pc, #308]	@ (8003004 <HAL_GPIO_Init+0x2b8>)
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	4a4c      	ldr	r2, [pc, #304]	@ (8003004 <HAL_GPIO_Init+0x2b8>)
 8002ed2:	f043 0301 	orr.w	r3, r3, #1
 8002ed6:	6193      	str	r3, [r2, #24]
 8002ed8:	4b4a      	ldr	r3, [pc, #296]	@ (8003004 <HAL_GPIO_Init+0x2b8>)
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	60bb      	str	r3, [r7, #8]
 8002ee2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ee4:	4a48      	ldr	r2, [pc, #288]	@ (8003008 <HAL_GPIO_Init+0x2bc>)
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee8:	089b      	lsrs	r3, r3, #2
 8002eea:	3302      	adds	r3, #2
 8002eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ef0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef4:	f003 0303 	and.w	r3, r3, #3
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	220f      	movs	r2, #15
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	43db      	mvns	r3, r3
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	4013      	ands	r3, r2
 8002f06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a40      	ldr	r2, [pc, #256]	@ (800300c <HAL_GPIO_Init+0x2c0>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d013      	beq.n	8002f38 <HAL_GPIO_Init+0x1ec>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a3f      	ldr	r2, [pc, #252]	@ (8003010 <HAL_GPIO_Init+0x2c4>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d00d      	beq.n	8002f34 <HAL_GPIO_Init+0x1e8>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a3e      	ldr	r2, [pc, #248]	@ (8003014 <HAL_GPIO_Init+0x2c8>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d007      	beq.n	8002f30 <HAL_GPIO_Init+0x1e4>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a3d      	ldr	r2, [pc, #244]	@ (8003018 <HAL_GPIO_Init+0x2cc>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d101      	bne.n	8002f2c <HAL_GPIO_Init+0x1e0>
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e006      	b.n	8002f3a <HAL_GPIO_Init+0x1ee>
 8002f2c:	2304      	movs	r3, #4
 8002f2e:	e004      	b.n	8002f3a <HAL_GPIO_Init+0x1ee>
 8002f30:	2302      	movs	r3, #2
 8002f32:	e002      	b.n	8002f3a <HAL_GPIO_Init+0x1ee>
 8002f34:	2301      	movs	r3, #1
 8002f36:	e000      	b.n	8002f3a <HAL_GPIO_Init+0x1ee>
 8002f38:	2300      	movs	r3, #0
 8002f3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f3c:	f002 0203 	and.w	r2, r2, #3
 8002f40:	0092      	lsls	r2, r2, #2
 8002f42:	4093      	lsls	r3, r2
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f4a:	492f      	ldr	r1, [pc, #188]	@ (8003008 <HAL_GPIO_Init+0x2bc>)
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4e:	089b      	lsrs	r3, r3, #2
 8002f50:	3302      	adds	r3, #2
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d006      	beq.n	8002f72 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f64:	4b2d      	ldr	r3, [pc, #180]	@ (800301c <HAL_GPIO_Init+0x2d0>)
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	492c      	ldr	r1, [pc, #176]	@ (800301c <HAL_GPIO_Init+0x2d0>)
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	608b      	str	r3, [r1, #8]
 8002f70:	e006      	b.n	8002f80 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f72:	4b2a      	ldr	r3, [pc, #168]	@ (800301c <HAL_GPIO_Init+0x2d0>)
 8002f74:	689a      	ldr	r2, [r3, #8]
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	4928      	ldr	r1, [pc, #160]	@ (800301c <HAL_GPIO_Init+0x2d0>)
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d006      	beq.n	8002f9a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f8c:	4b23      	ldr	r3, [pc, #140]	@ (800301c <HAL_GPIO_Init+0x2d0>)
 8002f8e:	68da      	ldr	r2, [r3, #12]
 8002f90:	4922      	ldr	r1, [pc, #136]	@ (800301c <HAL_GPIO_Init+0x2d0>)
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	60cb      	str	r3, [r1, #12]
 8002f98:	e006      	b.n	8002fa8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f9a:	4b20      	ldr	r3, [pc, #128]	@ (800301c <HAL_GPIO_Init+0x2d0>)
 8002f9c:	68da      	ldr	r2, [r3, #12]
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	491e      	ldr	r1, [pc, #120]	@ (800301c <HAL_GPIO_Init+0x2d0>)
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d006      	beq.n	8002fc2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002fb4:	4b19      	ldr	r3, [pc, #100]	@ (800301c <HAL_GPIO_Init+0x2d0>)
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	4918      	ldr	r1, [pc, #96]	@ (800301c <HAL_GPIO_Init+0x2d0>)
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	604b      	str	r3, [r1, #4]
 8002fc0:	e006      	b.n	8002fd0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002fc2:	4b16      	ldr	r3, [pc, #88]	@ (800301c <HAL_GPIO_Init+0x2d0>)
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	4914      	ldr	r1, [pc, #80]	@ (800301c <HAL_GPIO_Init+0x2d0>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d021      	beq.n	8003020 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800301c <HAL_GPIO_Init+0x2d0>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	490e      	ldr	r1, [pc, #56]	@ (800301c <HAL_GPIO_Init+0x2d0>)
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	600b      	str	r3, [r1, #0]
 8002fe8:	e021      	b.n	800302e <HAL_GPIO_Init+0x2e2>
 8002fea:	bf00      	nop
 8002fec:	10320000 	.word	0x10320000
 8002ff0:	10310000 	.word	0x10310000
 8002ff4:	10220000 	.word	0x10220000
 8002ff8:	10210000 	.word	0x10210000
 8002ffc:	10120000 	.word	0x10120000
 8003000:	10110000 	.word	0x10110000
 8003004:	40021000 	.word	0x40021000
 8003008:	40010000 	.word	0x40010000
 800300c:	40010800 	.word	0x40010800
 8003010:	40010c00 	.word	0x40010c00
 8003014:	40011000 	.word	0x40011000
 8003018:	40011400 	.word	0x40011400
 800301c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003020:	4b0b      	ldr	r3, [pc, #44]	@ (8003050 <HAL_GPIO_Init+0x304>)
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	43db      	mvns	r3, r3
 8003028:	4909      	ldr	r1, [pc, #36]	@ (8003050 <HAL_GPIO_Init+0x304>)
 800302a:	4013      	ands	r3, r2
 800302c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800302e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003030:	3301      	adds	r3, #1
 8003032:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303a:	fa22 f303 	lsr.w	r3, r2, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	f47f ae8e 	bne.w	8002d60 <HAL_GPIO_Init+0x14>
  }
}
 8003044:	bf00      	nop
 8003046:	bf00      	nop
 8003048:	372c      	adds	r7, #44	@ 0x2c
 800304a:	46bd      	mov	sp, r7
 800304c:	bc80      	pop	{r7}
 800304e:	4770      	bx	lr
 8003050:	40010400 	.word	0x40010400

08003054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	460b      	mov	r3, r1
 800305e:	807b      	strh	r3, [r7, #2]
 8003060:	4613      	mov	r3, r2
 8003062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003064:	787b      	ldrb	r3, [r7, #1]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800306a:	887a      	ldrh	r2, [r7, #2]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003070:	e003      	b.n	800307a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003072:	887b      	ldrh	r3, [r7, #2]
 8003074:	041a      	lsls	r2, r3, #16
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	611a      	str	r2, [r3, #16]
}
 800307a:	bf00      	nop
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	bc80      	pop	{r7}
 8003082:	4770      	bx	lr

08003084 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	460b      	mov	r3, r1
 800308e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003096:	887a      	ldrh	r2, [r7, #2]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	4013      	ands	r3, r2
 800309c:	041a      	lsls	r2, r3, #16
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	43d9      	mvns	r1, r3
 80030a2:	887b      	ldrh	r3, [r7, #2]
 80030a4:	400b      	ands	r3, r1
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	611a      	str	r2, [r3, #16]
}
 80030ac:	bf00      	nop
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bc80      	pop	{r7}
 80030b4:	4770      	bx	lr
	...

080030b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	4603      	mov	r3, r0
 80030c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80030c2:	4b08      	ldr	r3, [pc, #32]	@ (80030e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030c4:	695a      	ldr	r2, [r3, #20]
 80030c6:	88fb      	ldrh	r3, [r7, #6]
 80030c8:	4013      	ands	r3, r2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d006      	beq.n	80030dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030ce:	4a05      	ldr	r2, [pc, #20]	@ (80030e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030d0:	88fb      	ldrh	r3, [r7, #6]
 80030d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030d4:	88fb      	ldrh	r3, [r7, #6]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff fa34 	bl	8002544 <HAL_GPIO_EXTI_Callback>
  }
}
 80030dc:	bf00      	nop
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40010400 	.word	0x40010400

080030e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e12b      	b.n	8003352 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d106      	bne.n	8003114 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7ff fac4 	bl	800269c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2224      	movs	r2, #36	@ 0x24
 8003118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 0201 	bic.w	r2, r2, #1
 800312a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800313a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800314a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800314c:	f002 f8b6 	bl	80052bc <HAL_RCC_GetPCLK1Freq>
 8003150:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	4a81      	ldr	r2, [pc, #516]	@ (800335c <HAL_I2C_Init+0x274>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d807      	bhi.n	800316c <HAL_I2C_Init+0x84>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4a80      	ldr	r2, [pc, #512]	@ (8003360 <HAL_I2C_Init+0x278>)
 8003160:	4293      	cmp	r3, r2
 8003162:	bf94      	ite	ls
 8003164:	2301      	movls	r3, #1
 8003166:	2300      	movhi	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	e006      	b.n	800317a <HAL_I2C_Init+0x92>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4a7d      	ldr	r2, [pc, #500]	@ (8003364 <HAL_I2C_Init+0x27c>)
 8003170:	4293      	cmp	r3, r2
 8003172:	bf94      	ite	ls
 8003174:	2301      	movls	r3, #1
 8003176:	2300      	movhi	r3, #0
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e0e7      	b.n	8003352 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	4a78      	ldr	r2, [pc, #480]	@ (8003368 <HAL_I2C_Init+0x280>)
 8003186:	fba2 2303 	umull	r2, r3, r2, r3
 800318a:	0c9b      	lsrs	r3, r3, #18
 800318c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	430a      	orrs	r2, r1
 80031a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	4a6a      	ldr	r2, [pc, #424]	@ (800335c <HAL_I2C_Init+0x274>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d802      	bhi.n	80031bc <HAL_I2C_Init+0xd4>
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	3301      	adds	r3, #1
 80031ba:	e009      	b.n	80031d0 <HAL_I2C_Init+0xe8>
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80031c2:	fb02 f303 	mul.w	r3, r2, r3
 80031c6:	4a69      	ldr	r2, [pc, #420]	@ (800336c <HAL_I2C_Init+0x284>)
 80031c8:	fba2 2303 	umull	r2, r3, r2, r3
 80031cc:	099b      	lsrs	r3, r3, #6
 80031ce:	3301      	adds	r3, #1
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	6812      	ldr	r2, [r2, #0]
 80031d4:	430b      	orrs	r3, r1
 80031d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80031e2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	495c      	ldr	r1, [pc, #368]	@ (800335c <HAL_I2C_Init+0x274>)
 80031ec:	428b      	cmp	r3, r1
 80031ee:	d819      	bhi.n	8003224 <HAL_I2C_Init+0x13c>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	1e59      	subs	r1, r3, #1
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80031fe:	1c59      	adds	r1, r3, #1
 8003200:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003204:	400b      	ands	r3, r1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00a      	beq.n	8003220 <HAL_I2C_Init+0x138>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	1e59      	subs	r1, r3, #1
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	fbb1 f3f3 	udiv	r3, r1, r3
 8003218:	3301      	adds	r3, #1
 800321a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800321e:	e051      	b.n	80032c4 <HAL_I2C_Init+0x1dc>
 8003220:	2304      	movs	r3, #4
 8003222:	e04f      	b.n	80032c4 <HAL_I2C_Init+0x1dc>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d111      	bne.n	8003250 <HAL_I2C_Init+0x168>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	1e58      	subs	r0, r3, #1
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6859      	ldr	r1, [r3, #4]
 8003234:	460b      	mov	r3, r1
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	440b      	add	r3, r1
 800323a:	fbb0 f3f3 	udiv	r3, r0, r3
 800323e:	3301      	adds	r3, #1
 8003240:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003244:	2b00      	cmp	r3, #0
 8003246:	bf0c      	ite	eq
 8003248:	2301      	moveq	r3, #1
 800324a:	2300      	movne	r3, #0
 800324c:	b2db      	uxtb	r3, r3
 800324e:	e012      	b.n	8003276 <HAL_I2C_Init+0x18e>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	1e58      	subs	r0, r3, #1
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6859      	ldr	r1, [r3, #4]
 8003258:	460b      	mov	r3, r1
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	0099      	lsls	r1, r3, #2
 8003260:	440b      	add	r3, r1
 8003262:	fbb0 f3f3 	udiv	r3, r0, r3
 8003266:	3301      	adds	r3, #1
 8003268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800326c:	2b00      	cmp	r3, #0
 800326e:	bf0c      	ite	eq
 8003270:	2301      	moveq	r3, #1
 8003272:	2300      	movne	r3, #0
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <HAL_I2C_Init+0x196>
 800327a:	2301      	movs	r3, #1
 800327c:	e022      	b.n	80032c4 <HAL_I2C_Init+0x1dc>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10e      	bne.n	80032a4 <HAL_I2C_Init+0x1bc>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	1e58      	subs	r0, r3, #1
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6859      	ldr	r1, [r3, #4]
 800328e:	460b      	mov	r3, r1
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	440b      	add	r3, r1
 8003294:	fbb0 f3f3 	udiv	r3, r0, r3
 8003298:	3301      	adds	r3, #1
 800329a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800329e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032a2:	e00f      	b.n	80032c4 <HAL_I2C_Init+0x1dc>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	1e58      	subs	r0, r3, #1
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6859      	ldr	r1, [r3, #4]
 80032ac:	460b      	mov	r3, r1
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	440b      	add	r3, r1
 80032b2:	0099      	lsls	r1, r3, #2
 80032b4:	440b      	add	r3, r1
 80032b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ba:	3301      	adds	r3, #1
 80032bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80032c4:	6879      	ldr	r1, [r7, #4]
 80032c6:	6809      	ldr	r1, [r1, #0]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	69da      	ldr	r2, [r3, #28]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	431a      	orrs	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80032f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	6911      	ldr	r1, [r2, #16]
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	68d2      	ldr	r2, [r2, #12]
 80032fe:	4311      	orrs	r1, r2
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6812      	ldr	r2, [r2, #0]
 8003304:	430b      	orrs	r3, r1
 8003306:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	695a      	ldr	r2, [r3, #20]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	431a      	orrs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	430a      	orrs	r2, r1
 8003322:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0201 	orr.w	r2, r2, #1
 8003332:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2220      	movs	r2, #32
 800333e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	000186a0 	.word	0x000186a0
 8003360:	001e847f 	.word	0x001e847f
 8003364:	003d08ff 	.word	0x003d08ff
 8003368:	431bde83 	.word	0x431bde83
 800336c:	10624dd3 	.word	0x10624dd3

08003370 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b088      	sub	sp, #32
 8003374:	af02      	add	r7, sp, #8
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	607a      	str	r2, [r7, #4]
 800337a:	461a      	mov	r2, r3
 800337c:	460b      	mov	r3, r1
 800337e:	817b      	strh	r3, [r7, #10]
 8003380:	4613      	mov	r3, r2
 8003382:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003384:	f7ff fbd4 	bl	8002b30 <HAL_GetTick>
 8003388:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b20      	cmp	r3, #32
 8003394:	f040 80e0 	bne.w	8003558 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	2319      	movs	r3, #25
 800339e:	2201      	movs	r2, #1
 80033a0:	4970      	ldr	r1, [pc, #448]	@ (8003564 <HAL_I2C_Master_Transmit+0x1f4>)
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f001 f98a 	bl	80046bc <I2C_WaitOnFlagUntilTimeout>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80033ae:	2302      	movs	r3, #2
 80033b0:	e0d3      	b.n	800355a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d101      	bne.n	80033c0 <HAL_I2C_Master_Transmit+0x50>
 80033bc:	2302      	movs	r3, #2
 80033be:	e0cc      	b.n	800355a <HAL_I2C_Master_Transmit+0x1ea>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d007      	beq.n	80033e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f042 0201 	orr.w	r2, r2, #1
 80033e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2221      	movs	r2, #33	@ 0x21
 80033fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2210      	movs	r2, #16
 8003402:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	893a      	ldrh	r2, [r7, #8]
 8003416:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800341c:	b29a      	uxth	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	4a50      	ldr	r2, [pc, #320]	@ (8003568 <HAL_I2C_Master_Transmit+0x1f8>)
 8003426:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003428:	8979      	ldrh	r1, [r7, #10]
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	6a3a      	ldr	r2, [r7, #32]
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f000 fe76 	bl	8004120 <I2C_MasterRequestWrite>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e08d      	b.n	800355a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800343e:	2300      	movs	r3, #0
 8003440:	613b      	str	r3, [r7, #16]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	613b      	str	r3, [r7, #16]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	613b      	str	r3, [r7, #16]
 8003452:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003454:	e066      	b.n	8003524 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	6a39      	ldr	r1, [r7, #32]
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f001 fa48 	bl	80048f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00d      	beq.n	8003482 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346a:	2b04      	cmp	r3, #4
 800346c:	d107      	bne.n	800347e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800347c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e06b      	b.n	800355a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003486:	781a      	ldrb	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003492:	1c5a      	adds	r2, r3, #1
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800349c:	b29b      	uxth	r3, r3
 800349e:	3b01      	subs	r3, #1
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034aa:	3b01      	subs	r3, #1
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b04      	cmp	r3, #4
 80034be:	d11b      	bne.n	80034f8 <HAL_I2C_Master_Transmit+0x188>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d017      	beq.n	80034f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034cc:	781a      	ldrb	r2, [r3, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d8:	1c5a      	adds	r2, r3, #1
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	3b01      	subs	r3, #1
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034f0:	3b01      	subs	r3, #1
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	6a39      	ldr	r1, [r7, #32]
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f001 fa3f 	bl	8004980 <I2C_WaitOnBTFFlagUntilTimeout>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00d      	beq.n	8003524 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350c:	2b04      	cmp	r3, #4
 800350e:	d107      	bne.n	8003520 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800351e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e01a      	b.n	800355a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003528:	2b00      	cmp	r3, #0
 800352a:	d194      	bne.n	8003456 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800353a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2220      	movs	r2, #32
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003554:	2300      	movs	r3, #0
 8003556:	e000      	b.n	800355a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003558:	2302      	movs	r3, #2
  }
}
 800355a:	4618      	mov	r0, r3
 800355c:	3718      	adds	r7, #24
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	00100002 	.word	0x00100002
 8003568:	ffff0000 	.word	0xffff0000

0800356c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b08c      	sub	sp, #48	@ 0x30
 8003570:	af02      	add	r7, sp, #8
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	607a      	str	r2, [r7, #4]
 8003576:	461a      	mov	r2, r3
 8003578:	460b      	mov	r3, r1
 800357a:	817b      	strh	r3, [r7, #10]
 800357c:	4613      	mov	r3, r2
 800357e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003580:	2300      	movs	r3, #0
 8003582:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003584:	f7ff fad4 	bl	8002b30 <HAL_GetTick>
 8003588:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b20      	cmp	r3, #32
 8003594:	f040 824b 	bne.w	8003a2e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	2319      	movs	r3, #25
 800359e:	2201      	movs	r2, #1
 80035a0:	497f      	ldr	r1, [pc, #508]	@ (80037a0 <HAL_I2C_Master_Receive+0x234>)
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f001 f88a 	bl	80046bc <I2C_WaitOnFlagUntilTimeout>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80035ae:	2302      	movs	r3, #2
 80035b0:	e23e      	b.n	8003a30 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d101      	bne.n	80035c0 <HAL_I2C_Master_Receive+0x54>
 80035bc:	2302      	movs	r3, #2
 80035be:	e237      	b.n	8003a30 <HAL_I2C_Master_Receive+0x4c4>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d007      	beq.n	80035e6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f042 0201 	orr.w	r2, r2, #1
 80035e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2222      	movs	r2, #34	@ 0x22
 80035fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2210      	movs	r2, #16
 8003602:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	893a      	ldrh	r2, [r7, #8]
 8003616:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800361c:	b29a      	uxth	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	4a5f      	ldr	r2, [pc, #380]	@ (80037a4 <HAL_I2C_Master_Receive+0x238>)
 8003626:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003628:	8979      	ldrh	r1, [r7, #10]
 800362a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 fdf8 	bl	8004224 <I2C_MasterRequestRead>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e1f8      	b.n	8003a30 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003642:	2b00      	cmp	r3, #0
 8003644:	d113      	bne.n	800366e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003646:	2300      	movs	r3, #0
 8003648:	61fb      	str	r3, [r7, #28]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	61fb      	str	r3, [r7, #28]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	61fb      	str	r3, [r7, #28]
 800365a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	e1cc      	b.n	8003a08 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003672:	2b01      	cmp	r3, #1
 8003674:	d11e      	bne.n	80036b4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003684:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003686:	b672      	cpsid	i
}
 8003688:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800368a:	2300      	movs	r3, #0
 800368c:	61bb      	str	r3, [r7, #24]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	61bb      	str	r3, [r7, #24]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	61bb      	str	r3, [r7, #24]
 800369e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80036b0:	b662      	cpsie	i
}
 80036b2:	e035      	b.n	8003720 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d11e      	bne.n	80036fa <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036ca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80036cc:	b672      	cpsid	i
}
 80036ce:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036d0:	2300      	movs	r3, #0
 80036d2:	617b      	str	r3, [r7, #20]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	617b      	str	r3, [r7, #20]
 80036e4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80036f6:	b662      	cpsie	i
}
 80036f8:	e012      	b.n	8003720 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003708:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800370a:	2300      	movs	r3, #0
 800370c:	613b      	str	r3, [r7, #16]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	613b      	str	r3, [r7, #16]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	613b      	str	r3, [r7, #16]
 800371e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003720:	e172      	b.n	8003a08 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003726:	2b03      	cmp	r3, #3
 8003728:	f200 811f 	bhi.w	800396a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003730:	2b01      	cmp	r3, #1
 8003732:	d123      	bne.n	800377c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003734:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003736:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f001 f969 	bl	8004a10 <I2C_WaitOnRXNEFlagUntilTimeout>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e173      	b.n	8003a30 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	691a      	ldr	r2, [r3, #16]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003764:	3b01      	subs	r3, #1
 8003766:	b29a      	uxth	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003770:	b29b      	uxth	r3, r3
 8003772:	3b01      	subs	r3, #1
 8003774:	b29a      	uxth	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800377a:	e145      	b.n	8003a08 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003780:	2b02      	cmp	r3, #2
 8003782:	d152      	bne.n	800382a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800378a:	2200      	movs	r2, #0
 800378c:	4906      	ldr	r1, [pc, #24]	@ (80037a8 <HAL_I2C_Master_Receive+0x23c>)
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f000 ff94 	bl	80046bc <I2C_WaitOnFlagUntilTimeout>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d008      	beq.n	80037ac <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e148      	b.n	8003a30 <HAL_I2C_Master_Receive+0x4c4>
 800379e:	bf00      	nop
 80037a0:	00100002 	.word	0x00100002
 80037a4:	ffff0000 	.word	0xffff0000
 80037a8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80037ac:	b672      	cpsid	i
}
 80037ae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	691a      	ldr	r2, [r3, #16]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ca:	b2d2      	uxtb	r2, r2
 80037cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d2:	1c5a      	adds	r2, r3, #1
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037dc:	3b01      	subs	r3, #1
 80037de:	b29a      	uxth	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	3b01      	subs	r3, #1
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80037f2:	b662      	cpsie	i
}
 80037f4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	691a      	ldr	r2, [r3, #16]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003800:	b2d2      	uxtb	r2, r2
 8003802:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003808:	1c5a      	adds	r2, r3, #1
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003812:	3b01      	subs	r3, #1
 8003814:	b29a      	uxth	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800381e:	b29b      	uxth	r3, r3
 8003820:	3b01      	subs	r3, #1
 8003822:	b29a      	uxth	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003828:	e0ee      	b.n	8003a08 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800382a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003830:	2200      	movs	r2, #0
 8003832:	4981      	ldr	r1, [pc, #516]	@ (8003a38 <HAL_I2C_Master_Receive+0x4cc>)
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f000 ff41 	bl	80046bc <I2C_WaitOnFlagUntilTimeout>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e0f5      	b.n	8003a30 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003852:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003854:	b672      	cpsid	i
}
 8003856:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	691a      	ldr	r2, [r3, #16]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003862:	b2d2      	uxtb	r2, r2
 8003864:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386a:	1c5a      	adds	r2, r3, #1
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003874:	3b01      	subs	r3, #1
 8003876:	b29a      	uxth	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003880:	b29b      	uxth	r3, r3
 8003882:	3b01      	subs	r3, #1
 8003884:	b29a      	uxth	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800388a:	4b6c      	ldr	r3, [pc, #432]	@ (8003a3c <HAL_I2C_Master_Receive+0x4d0>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	08db      	lsrs	r3, r3, #3
 8003890:	4a6b      	ldr	r2, [pc, #428]	@ (8003a40 <HAL_I2C_Master_Receive+0x4d4>)
 8003892:	fba2 2303 	umull	r2, r3, r2, r3
 8003896:	0a1a      	lsrs	r2, r3, #8
 8003898:	4613      	mov	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4413      	add	r3, r2
 800389e:	00da      	lsls	r2, r3, #3
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	3b01      	subs	r3, #1
 80038a8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d118      	bne.n	80038e2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2220      	movs	r2, #32
 80038ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ca:	f043 0220 	orr.w	r2, r3, #32
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80038d2:	b662      	cpsie	i
}
 80038d4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e0a6      	b.n	8003a30 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b04      	cmp	r3, #4
 80038ee:	d1d9      	bne.n	80038a4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	691a      	ldr	r2, [r3, #16]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390a:	b2d2      	uxtb	r2, r2
 800390c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003912:	1c5a      	adds	r2, r3, #1
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800391c:	3b01      	subs	r3, #1
 800391e:	b29a      	uxth	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003928:	b29b      	uxth	r3, r3
 800392a:	3b01      	subs	r3, #1
 800392c:	b29a      	uxth	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003932:	b662      	cpsie	i
}
 8003934:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	691a      	ldr	r2, [r3, #16]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003940:	b2d2      	uxtb	r2, r2
 8003942:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003948:	1c5a      	adds	r2, r3, #1
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003952:	3b01      	subs	r3, #1
 8003954:	b29a      	uxth	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800395e:	b29b      	uxth	r3, r3
 8003960:	3b01      	subs	r3, #1
 8003962:	b29a      	uxth	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003968:	e04e      	b.n	8003a08 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800396a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800396c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f001 f84e 	bl	8004a10 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e058      	b.n	8003a30 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	691a      	ldr	r2, [r3, #16]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003988:	b2d2      	uxtb	r2, r2
 800398a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003990:	1c5a      	adds	r2, r3, #1
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800399a:	3b01      	subs	r3, #1
 800399c:	b29a      	uxth	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	3b01      	subs	r3, #1
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	f003 0304 	and.w	r3, r3, #4
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	d124      	bne.n	8003a08 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039c2:	2b03      	cmp	r3, #3
 80039c4:	d107      	bne.n	80039d6 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039d4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	691a      	ldr	r2, [r3, #16]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e0:	b2d2      	uxtb	r2, r2
 80039e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e8:	1c5a      	adds	r2, r3, #1
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039f2:	3b01      	subs	r3, #1
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	3b01      	subs	r3, #1
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f47f ae88 	bne.w	8003722 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2220      	movs	r2, #32
 8003a16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	e000      	b.n	8003a30 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8003a2e:	2302      	movs	r3, #2
  }
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3728      	adds	r7, #40	@ 0x28
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	00010004 	.word	0x00010004
 8003a3c:	2000008c 	.word	0x2000008c
 8003a40:	14f8b589 	.word	0x14f8b589

08003a44 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b088      	sub	sp, #32
 8003a48:	af02      	add	r7, sp, #8
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	4608      	mov	r0, r1
 8003a4e:	4611      	mov	r1, r2
 8003a50:	461a      	mov	r2, r3
 8003a52:	4603      	mov	r3, r0
 8003a54:	817b      	strh	r3, [r7, #10]
 8003a56:	460b      	mov	r3, r1
 8003a58:	813b      	strh	r3, [r7, #8]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a5e:	f7ff f867 	bl	8002b30 <HAL_GetTick>
 8003a62:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b20      	cmp	r3, #32
 8003a6e:	f040 80d9 	bne.w	8003c24 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	2319      	movs	r3, #25
 8003a78:	2201      	movs	r2, #1
 8003a7a:	496d      	ldr	r1, [pc, #436]	@ (8003c30 <HAL_I2C_Mem_Write+0x1ec>)
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f000 fe1d 	bl	80046bc <I2C_WaitOnFlagUntilTimeout>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d001      	beq.n	8003a8c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003a88:	2302      	movs	r3, #2
 8003a8a:	e0cc      	b.n	8003c26 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d101      	bne.n	8003a9a <HAL_I2C_Mem_Write+0x56>
 8003a96:	2302      	movs	r3, #2
 8003a98:	e0c5      	b.n	8003c26 <HAL_I2C_Mem_Write+0x1e2>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d007      	beq.n	8003ac0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f042 0201 	orr.w	r2, r2, #1
 8003abe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ace:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2221      	movs	r2, #33	@ 0x21
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2240      	movs	r2, #64	@ 0x40
 8003adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6a3a      	ldr	r2, [r7, #32]
 8003aea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003af0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4a4d      	ldr	r2, [pc, #308]	@ (8003c34 <HAL_I2C_Mem_Write+0x1f0>)
 8003b00:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b02:	88f8      	ldrh	r0, [r7, #6]
 8003b04:	893a      	ldrh	r2, [r7, #8]
 8003b06:	8979      	ldrh	r1, [r7, #10]
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	9301      	str	r3, [sp, #4]
 8003b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	4603      	mov	r3, r0
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f000 fc54 	bl	80043c0 <I2C_RequestMemoryWrite>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d052      	beq.n	8003bc4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e081      	b.n	8003c26 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 fee2 	bl	80048f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00d      	beq.n	8003b4e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b36:	2b04      	cmp	r3, #4
 8003b38:	d107      	bne.n	8003b4a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b48:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e06b      	b.n	8003c26 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b52:	781a      	ldrb	r2, [r3, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5e:	1c5a      	adds	r2, r3, #1
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	3b01      	subs	r3, #1
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	d11b      	bne.n	8003bc4 <HAL_I2C_Mem_Write+0x180>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d017      	beq.n	8003bc4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b98:	781a      	ldrb	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1aa      	bne.n	8003b22 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f000 fed5 	bl	8004980 <I2C_WaitOnBTFFlagUntilTimeout>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00d      	beq.n	8003bf8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be0:	2b04      	cmp	r3, #4
 8003be2:	d107      	bne.n	8003bf4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bf2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e016      	b.n	8003c26 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	e000      	b.n	8003c26 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003c24:	2302      	movs	r3, #2
  }
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3718      	adds	r7, #24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	00100002 	.word	0x00100002
 8003c34:	ffff0000 	.word	0xffff0000

08003c38 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b08c      	sub	sp, #48	@ 0x30
 8003c3c:	af02      	add	r7, sp, #8
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	4608      	mov	r0, r1
 8003c42:	4611      	mov	r1, r2
 8003c44:	461a      	mov	r2, r3
 8003c46:	4603      	mov	r3, r0
 8003c48:	817b      	strh	r3, [r7, #10]
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	813b      	strh	r3, [r7, #8]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003c52:	2300      	movs	r3, #0
 8003c54:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c56:	f7fe ff6b 	bl	8002b30 <HAL_GetTick>
 8003c5a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b20      	cmp	r3, #32
 8003c66:	f040 8250 	bne.w	800410a <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	2319      	movs	r3, #25
 8003c70:	2201      	movs	r2, #1
 8003c72:	4982      	ldr	r1, [pc, #520]	@ (8003e7c <HAL_I2C_Mem_Read+0x244>)
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f000 fd21 	bl	80046bc <I2C_WaitOnFlagUntilTimeout>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003c80:	2302      	movs	r3, #2
 8003c82:	e243      	b.n	800410c <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d101      	bne.n	8003c92 <HAL_I2C_Mem_Read+0x5a>
 8003c8e:	2302      	movs	r3, #2
 8003c90:	e23c      	b.n	800410c <HAL_I2C_Mem_Read+0x4d4>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d007      	beq.n	8003cb8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0201 	orr.w	r2, r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cc6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2222      	movs	r2, #34	@ 0x22
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2240      	movs	r2, #64	@ 0x40
 8003cd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ce2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003ce8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4a62      	ldr	r2, [pc, #392]	@ (8003e80 <HAL_I2C_Mem_Read+0x248>)
 8003cf8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cfa:	88f8      	ldrh	r0, [r7, #6]
 8003cfc:	893a      	ldrh	r2, [r7, #8]
 8003cfe:	8979      	ldrh	r1, [r7, #10]
 8003d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d02:	9301      	str	r3, [sp, #4]
 8003d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	4603      	mov	r3, r0
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f000 fbee 	bl	80044ec <I2C_RequestMemoryRead>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e1f8      	b.n	800410c <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d113      	bne.n	8003d4a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d22:	2300      	movs	r3, #0
 8003d24:	61fb      	str	r3, [r7, #28]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	61fb      	str	r3, [r7, #28]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	61fb      	str	r3, [r7, #28]
 8003d36:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d46:	601a      	str	r2, [r3, #0]
 8003d48:	e1cc      	b.n	80040e4 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d11e      	bne.n	8003d90 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d60:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d62:	b672      	cpsid	i
}
 8003d64:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d66:	2300      	movs	r3, #0
 8003d68:	61bb      	str	r3, [r7, #24]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	61bb      	str	r3, [r7, #24]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	61bb      	str	r3, [r7, #24]
 8003d7a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d8a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003d8c:	b662      	cpsie	i
}
 8003d8e:	e035      	b.n	8003dfc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d11e      	bne.n	8003dd6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003da6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003da8:	b672      	cpsid	i
}
 8003daa:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dac:	2300      	movs	r3, #0
 8003dae:	617b      	str	r3, [r7, #20]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	617b      	str	r3, [r7, #20]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	617b      	str	r3, [r7, #20]
 8003dc0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dd0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003dd2:	b662      	cpsie	i
}
 8003dd4:	e012      	b.n	8003dfc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003de4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003de6:	2300      	movs	r3, #0
 8003de8:	613b      	str	r3, [r7, #16]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	695b      	ldr	r3, [r3, #20]
 8003df0:	613b      	str	r3, [r7, #16]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	613b      	str	r3, [r7, #16]
 8003dfa:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003dfc:	e172      	b.n	80040e4 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e02:	2b03      	cmp	r3, #3
 8003e04:	f200 811f 	bhi.w	8004046 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d123      	bne.n	8003e58 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e12:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003e14:	68f8      	ldr	r0, [r7, #12]
 8003e16:	f000 fdfb 	bl	8004a10 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e173      	b.n	800410c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	691a      	ldr	r2, [r3, #16]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2e:	b2d2      	uxtb	r2, r2
 8003e30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e36:	1c5a      	adds	r2, r3, #1
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e40:	3b01      	subs	r3, #1
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e56:	e145      	b.n	80040e4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d152      	bne.n	8003f06 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e66:	2200      	movs	r2, #0
 8003e68:	4906      	ldr	r1, [pc, #24]	@ (8003e84 <HAL_I2C_Mem_Read+0x24c>)
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f000 fc26 	bl	80046bc <I2C_WaitOnFlagUntilTimeout>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d008      	beq.n	8003e88 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e148      	b.n	800410c <HAL_I2C_Mem_Read+0x4d4>
 8003e7a:	bf00      	nop
 8003e7c:	00100002 	.word	0x00100002
 8003e80:	ffff0000 	.word	0xffff0000
 8003e84:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003e88:	b672      	cpsid	i
}
 8003e8a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	691a      	ldr	r2, [r3, #16]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea6:	b2d2      	uxtb	r2, r2
 8003ea8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eae:	1c5a      	adds	r2, r3, #1
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003ece:	b662      	cpsie	i
}
 8003ed0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	691a      	ldr	r2, [r3, #16]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003edc:	b2d2      	uxtb	r2, r2
 8003ede:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee4:	1c5a      	adds	r2, r3, #1
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	3b01      	subs	r3, #1
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f04:	e0ee      	b.n	80040e4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	4981      	ldr	r1, [pc, #516]	@ (8004114 <HAL_I2C_Mem_Read+0x4dc>)
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 fbd3 	bl	80046bc <I2C_WaitOnFlagUntilTimeout>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e0f5      	b.n	800410c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f2e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f30:	b672      	cpsid	i
}
 8003f32:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	691a      	ldr	r2, [r3, #16]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3e:	b2d2      	uxtb	r2, r2
 8003f40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f46:	1c5a      	adds	r2, r3, #1
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f50:	3b01      	subs	r3, #1
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003f66:	4b6c      	ldr	r3, [pc, #432]	@ (8004118 <HAL_I2C_Mem_Read+0x4e0>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	08db      	lsrs	r3, r3, #3
 8003f6c:	4a6b      	ldr	r2, [pc, #428]	@ (800411c <HAL_I2C_Mem_Read+0x4e4>)
 8003f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f72:	0a1a      	lsrs	r2, r3, #8
 8003f74:	4613      	mov	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	4413      	add	r3, r2
 8003f7a:	00da      	lsls	r2, r3, #3
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003f80:	6a3b      	ldr	r3, [r7, #32]
 8003f82:	3b01      	subs	r3, #1
 8003f84:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003f86:	6a3b      	ldr	r3, [r7, #32]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d118      	bne.n	8003fbe <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2220      	movs	r2, #32
 8003f96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa6:	f043 0220 	orr.w	r2, r3, #32
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003fae:	b662      	cpsie	i
}
 8003fb0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e0a6      	b.n	800410c <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	695b      	ldr	r3, [r3, #20]
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b04      	cmp	r3, #4
 8003fca:	d1d9      	bne.n	8003f80 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	691a      	ldr	r2, [r3, #16]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe6:	b2d2      	uxtb	r2, r2
 8003fe8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fee:	1c5a      	adds	r2, r3, #1
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004004:	b29b      	uxth	r3, r3
 8004006:	3b01      	subs	r3, #1
 8004008:	b29a      	uxth	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800400e:	b662      	cpsie	i
}
 8004010:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	691a      	ldr	r2, [r3, #16]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401c:	b2d2      	uxtb	r2, r2
 800401e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004024:	1c5a      	adds	r2, r3, #1
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800402e:	3b01      	subs	r3, #1
 8004030:	b29a      	uxth	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800403a:	b29b      	uxth	r3, r3
 800403c:	3b01      	subs	r3, #1
 800403e:	b29a      	uxth	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004044:	e04e      	b.n	80040e4 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004046:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004048:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 fce0 	bl	8004a10 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e058      	b.n	800410c <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	691a      	ldr	r2, [r3, #16]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004064:	b2d2      	uxtb	r2, r2
 8004066:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406c:	1c5a      	adds	r2, r3, #1
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004076:	3b01      	subs	r3, #1
 8004078:	b29a      	uxth	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004082:	b29b      	uxth	r3, r3
 8004084:	3b01      	subs	r3, #1
 8004086:	b29a      	uxth	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	f003 0304 	and.w	r3, r3, #4
 8004096:	2b04      	cmp	r3, #4
 8004098:	d124      	bne.n	80040e4 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800409e:	2b03      	cmp	r3, #3
 80040a0:	d107      	bne.n	80040b2 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040b0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	691a      	ldr	r2, [r3, #16]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040bc:	b2d2      	uxtb	r2, r2
 80040be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c4:	1c5a      	adds	r2, r3, #1
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ce:	3b01      	subs	r3, #1
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040da:	b29b      	uxth	r3, r3
 80040dc:	3b01      	subs	r3, #1
 80040de:	b29a      	uxth	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f47f ae88 	bne.w	8003dfe <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2220      	movs	r2, #32
 80040f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004106:	2300      	movs	r3, #0
 8004108:	e000      	b.n	800410c <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 800410a:	2302      	movs	r3, #2
  }
}
 800410c:	4618      	mov	r0, r3
 800410e:	3728      	adds	r7, #40	@ 0x28
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	00010004 	.word	0x00010004
 8004118:	2000008c 	.word	0x2000008c
 800411c:	14f8b589 	.word	0x14f8b589

08004120 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b088      	sub	sp, #32
 8004124:	af02      	add	r7, sp, #8
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	607a      	str	r2, [r7, #4]
 800412a:	603b      	str	r3, [r7, #0]
 800412c:	460b      	mov	r3, r1
 800412e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004134:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	2b08      	cmp	r3, #8
 800413a:	d006      	beq.n	800414a <I2C_MasterRequestWrite+0x2a>
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d003      	beq.n	800414a <I2C_MasterRequestWrite+0x2a>
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004148:	d108      	bne.n	800415c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	e00b      	b.n	8004174 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004160:	2b12      	cmp	r3, #18
 8004162:	d107      	bne.n	8004174 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004172:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f000 fa9b 	bl	80046bc <I2C_WaitOnFlagUntilTimeout>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00d      	beq.n	80041a8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004196:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800419a:	d103      	bne.n	80041a4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041a2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e035      	b.n	8004214 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041b0:	d108      	bne.n	80041c4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041b2:	897b      	ldrh	r3, [r7, #10]
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	461a      	mov	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80041c0:	611a      	str	r2, [r3, #16]
 80041c2:	e01b      	b.n	80041fc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80041c4:	897b      	ldrh	r3, [r7, #10]
 80041c6:	11db      	asrs	r3, r3, #7
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	f003 0306 	and.w	r3, r3, #6
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	f063 030f 	orn	r3, r3, #15
 80041d4:	b2da      	uxtb	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	490e      	ldr	r1, [pc, #56]	@ (800421c <I2C_MasterRequestWrite+0xfc>)
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f000 fae4 	bl	80047b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e010      	b.n	8004214 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80041f2:	897b      	ldrh	r3, [r7, #10]
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	4907      	ldr	r1, [pc, #28]	@ (8004220 <I2C_MasterRequestWrite+0x100>)
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f000 fad4 	bl	80047b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e000      	b.n	8004214 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3718      	adds	r7, #24
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	00010008 	.word	0x00010008
 8004220:	00010002 	.word	0x00010002

08004224 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b088      	sub	sp, #32
 8004228:	af02      	add	r7, sp, #8
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	607a      	str	r2, [r7, #4]
 800422e:	603b      	str	r3, [r7, #0]
 8004230:	460b      	mov	r3, r1
 8004232:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004238:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004248:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	2b08      	cmp	r3, #8
 800424e:	d006      	beq.n	800425e <I2C_MasterRequestRead+0x3a>
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d003      	beq.n	800425e <I2C_MasterRequestRead+0x3a>
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800425c:	d108      	bne.n	8004270 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800426c:	601a      	str	r2, [r3, #0]
 800426e:	e00b      	b.n	8004288 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004274:	2b11      	cmp	r3, #17
 8004276:	d107      	bne.n	8004288 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004286:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f000 fa11 	bl	80046bc <I2C_WaitOnFlagUntilTimeout>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00d      	beq.n	80042bc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042ae:	d103      	bne.n	80042b8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e079      	b.n	80043b0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042c4:	d108      	bne.n	80042d8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80042c6:	897b      	ldrh	r3, [r7, #10]
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	f043 0301 	orr.w	r3, r3, #1
 80042ce:	b2da      	uxtb	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	611a      	str	r2, [r3, #16]
 80042d6:	e05f      	b.n	8004398 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80042d8:	897b      	ldrh	r3, [r7, #10]
 80042da:	11db      	asrs	r3, r3, #7
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	f003 0306 	and.w	r3, r3, #6
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	f063 030f 	orn	r3, r3, #15
 80042e8:	b2da      	uxtb	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	4930      	ldr	r1, [pc, #192]	@ (80043b8 <I2C_MasterRequestRead+0x194>)
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f000 fa5a 	bl	80047b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e054      	b.n	80043b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004306:	897b      	ldrh	r3, [r7, #10]
 8004308:	b2da      	uxtb	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	4929      	ldr	r1, [pc, #164]	@ (80043bc <I2C_MasterRequestRead+0x198>)
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f000 fa4a 	bl	80047b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e044      	b.n	80043b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004326:	2300      	movs	r3, #0
 8004328:	613b      	str	r3, [r7, #16]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	613b      	str	r3, [r7, #16]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	613b      	str	r3, [r7, #16]
 800433a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800434a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	9300      	str	r3, [sp, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f000 f9af 	bl	80046bc <I2C_WaitOnFlagUntilTimeout>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00d      	beq.n	8004380 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800436e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004372:	d103      	bne.n	800437c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800437a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e017      	b.n	80043b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004380:	897b      	ldrh	r3, [r7, #10]
 8004382:	11db      	asrs	r3, r3, #7
 8004384:	b2db      	uxtb	r3, r3
 8004386:	f003 0306 	and.w	r3, r3, #6
 800438a:	b2db      	uxtb	r3, r3
 800438c:	f063 030e 	orn	r3, r3, #14
 8004390:	b2da      	uxtb	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	4907      	ldr	r1, [pc, #28]	@ (80043bc <I2C_MasterRequestRead+0x198>)
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f000 fa06 	bl	80047b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e000      	b.n	80043b0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3718      	adds	r7, #24
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	00010008 	.word	0x00010008
 80043bc:	00010002 	.word	0x00010002

080043c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b088      	sub	sp, #32
 80043c4:	af02      	add	r7, sp, #8
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	4608      	mov	r0, r1
 80043ca:	4611      	mov	r1, r2
 80043cc:	461a      	mov	r2, r3
 80043ce:	4603      	mov	r3, r0
 80043d0:	817b      	strh	r3, [r7, #10]
 80043d2:	460b      	mov	r3, r1
 80043d4:	813b      	strh	r3, [r7, #8]
 80043d6:	4613      	mov	r3, r2
 80043d8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ec:	9300      	str	r3, [sp, #0]
 80043ee:	6a3b      	ldr	r3, [r7, #32]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 f960 	bl	80046bc <I2C_WaitOnFlagUntilTimeout>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00d      	beq.n	800441e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800440c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004410:	d103      	bne.n	800441a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004418:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e05f      	b.n	80044de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800441e:	897b      	ldrh	r3, [r7, #10]
 8004420:	b2db      	uxtb	r3, r3
 8004422:	461a      	mov	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800442c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800442e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004430:	6a3a      	ldr	r2, [r7, #32]
 8004432:	492d      	ldr	r1, [pc, #180]	@ (80044e8 <I2C_RequestMemoryWrite+0x128>)
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f000 f9bb 	bl	80047b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d001      	beq.n	8004444 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e04c      	b.n	80044de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004444:	2300      	movs	r3, #0
 8004446:	617b      	str	r3, [r7, #20]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	617b      	str	r3, [r7, #20]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	617b      	str	r3, [r7, #20]
 8004458:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800445a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800445c:	6a39      	ldr	r1, [r7, #32]
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f000 fa46 	bl	80048f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00d      	beq.n	8004486 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446e:	2b04      	cmp	r3, #4
 8004470:	d107      	bne.n	8004482 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004480:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e02b      	b.n	80044de <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004486:	88fb      	ldrh	r3, [r7, #6]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d105      	bne.n	8004498 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800448c:	893b      	ldrh	r3, [r7, #8]
 800448e:	b2da      	uxtb	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	611a      	str	r2, [r3, #16]
 8004496:	e021      	b.n	80044dc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004498:	893b      	ldrh	r3, [r7, #8]
 800449a:	0a1b      	lsrs	r3, r3, #8
 800449c:	b29b      	uxth	r3, r3
 800449e:	b2da      	uxtb	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044a8:	6a39      	ldr	r1, [r7, #32]
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f000 fa20 	bl	80048f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00d      	beq.n	80044d2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	d107      	bne.n	80044ce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e005      	b.n	80044de <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044d2:	893b      	ldrh	r3, [r7, #8]
 80044d4:	b2da      	uxtb	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3718      	adds	r7, #24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	00010002 	.word	0x00010002

080044ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b088      	sub	sp, #32
 80044f0:	af02      	add	r7, sp, #8
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	4608      	mov	r0, r1
 80044f6:	4611      	mov	r1, r2
 80044f8:	461a      	mov	r2, r3
 80044fa:	4603      	mov	r3, r0
 80044fc:	817b      	strh	r3, [r7, #10]
 80044fe:	460b      	mov	r3, r1
 8004500:	813b      	strh	r3, [r7, #8]
 8004502:	4613      	mov	r3, r2
 8004504:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004514:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004524:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	6a3b      	ldr	r3, [r7, #32]
 800452c:	2200      	movs	r2, #0
 800452e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f000 f8c2 	bl	80046bc <I2C_WaitOnFlagUntilTimeout>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00d      	beq.n	800455a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004548:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800454c:	d103      	bne.n	8004556 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004554:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e0aa      	b.n	80046b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800455a:	897b      	ldrh	r3, [r7, #10]
 800455c:	b2db      	uxtb	r3, r3
 800455e:	461a      	mov	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004568:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800456a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456c:	6a3a      	ldr	r2, [r7, #32]
 800456e:	4952      	ldr	r1, [pc, #328]	@ (80046b8 <I2C_RequestMemoryRead+0x1cc>)
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f000 f91d 	bl	80047b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e097      	b.n	80046b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004580:	2300      	movs	r3, #0
 8004582:	617b      	str	r3, [r7, #20]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	617b      	str	r3, [r7, #20]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	617b      	str	r3, [r7, #20]
 8004594:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004596:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004598:	6a39      	ldr	r1, [r7, #32]
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f000 f9a8 	bl	80048f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00d      	beq.n	80045c2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045aa:	2b04      	cmp	r3, #4
 80045ac:	d107      	bne.n	80045be <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e076      	b.n	80046b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045c2:	88fb      	ldrh	r3, [r7, #6]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d105      	bne.n	80045d4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045c8:	893b      	ldrh	r3, [r7, #8]
 80045ca:	b2da      	uxtb	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	611a      	str	r2, [r3, #16]
 80045d2:	e021      	b.n	8004618 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80045d4:	893b      	ldrh	r3, [r7, #8]
 80045d6:	0a1b      	lsrs	r3, r3, #8
 80045d8:	b29b      	uxth	r3, r3
 80045da:	b2da      	uxtb	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045e4:	6a39      	ldr	r1, [r7, #32]
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f000 f982 	bl	80048f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00d      	beq.n	800460e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f6:	2b04      	cmp	r3, #4
 80045f8:	d107      	bne.n	800460a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004608:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e050      	b.n	80046b0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800460e:	893b      	ldrh	r3, [r7, #8]
 8004610:	b2da      	uxtb	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004618:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800461a:	6a39      	ldr	r1, [r7, #32]
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f000 f967 	bl	80048f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00d      	beq.n	8004644 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800462c:	2b04      	cmp	r3, #4
 800462e:	d107      	bne.n	8004640 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800463e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e035      	b.n	80046b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004652:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004656:	9300      	str	r3, [sp, #0]
 8004658:	6a3b      	ldr	r3, [r7, #32]
 800465a:	2200      	movs	r2, #0
 800465c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f000 f82b 	bl	80046bc <I2C_WaitOnFlagUntilTimeout>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00d      	beq.n	8004688 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004676:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800467a:	d103      	bne.n	8004684 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004682:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e013      	b.n	80046b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004688:	897b      	ldrh	r3, [r7, #10]
 800468a:	b2db      	uxtb	r3, r3
 800468c:	f043 0301 	orr.w	r3, r3, #1
 8004690:	b2da      	uxtb	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469a:	6a3a      	ldr	r2, [r7, #32]
 800469c:	4906      	ldr	r1, [pc, #24]	@ (80046b8 <I2C_RequestMemoryRead+0x1cc>)
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 f886 	bl	80047b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e000      	b.n	80046b0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3718      	adds	r7, #24
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	00010002 	.word	0x00010002

080046bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	603b      	str	r3, [r7, #0]
 80046c8:	4613      	mov	r3, r2
 80046ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046cc:	e048      	b.n	8004760 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d4:	d044      	beq.n	8004760 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046d6:	f7fe fa2b 	bl	8002b30 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d302      	bcc.n	80046ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d139      	bne.n	8004760 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	0c1b      	lsrs	r3, r3, #16
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d10d      	bne.n	8004712 <I2C_WaitOnFlagUntilTimeout+0x56>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	43da      	mvns	r2, r3
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	4013      	ands	r3, r2
 8004702:	b29b      	uxth	r3, r3
 8004704:	2b00      	cmp	r3, #0
 8004706:	bf0c      	ite	eq
 8004708:	2301      	moveq	r3, #1
 800470a:	2300      	movne	r3, #0
 800470c:	b2db      	uxtb	r3, r3
 800470e:	461a      	mov	r2, r3
 8004710:	e00c      	b.n	800472c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	43da      	mvns	r2, r3
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	4013      	ands	r3, r2
 800471e:	b29b      	uxth	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	bf0c      	ite	eq
 8004724:	2301      	moveq	r3, #1
 8004726:	2300      	movne	r3, #0
 8004728:	b2db      	uxtb	r3, r3
 800472a:	461a      	mov	r2, r3
 800472c:	79fb      	ldrb	r3, [r7, #7]
 800472e:	429a      	cmp	r2, r3
 8004730:	d116      	bne.n	8004760 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2220      	movs	r2, #32
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474c:	f043 0220 	orr.w	r2, r3, #32
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e023      	b.n	80047a8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	0c1b      	lsrs	r3, r3, #16
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b01      	cmp	r3, #1
 8004768:	d10d      	bne.n	8004786 <I2C_WaitOnFlagUntilTimeout+0xca>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	695b      	ldr	r3, [r3, #20]
 8004770:	43da      	mvns	r2, r3
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	4013      	ands	r3, r2
 8004776:	b29b      	uxth	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	bf0c      	ite	eq
 800477c:	2301      	moveq	r3, #1
 800477e:	2300      	movne	r3, #0
 8004780:	b2db      	uxtb	r3, r3
 8004782:	461a      	mov	r2, r3
 8004784:	e00c      	b.n	80047a0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	43da      	mvns	r2, r3
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	4013      	ands	r3, r2
 8004792:	b29b      	uxth	r3, r3
 8004794:	2b00      	cmp	r3, #0
 8004796:	bf0c      	ite	eq
 8004798:	2301      	moveq	r3, #1
 800479a:	2300      	movne	r3, #0
 800479c:	b2db      	uxtb	r3, r3
 800479e:	461a      	mov	r2, r3
 80047a0:	79fb      	ldrb	r3, [r7, #7]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d093      	beq.n	80046ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
 80047bc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047be:	e071      	b.n	80048a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047ce:	d123      	bne.n	8004818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047de:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80047e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2220      	movs	r2, #32
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004804:	f043 0204 	orr.w	r2, r3, #4
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e067      	b.n	80048e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481e:	d041      	beq.n	80048a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004820:	f7fe f986 	bl	8002b30 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	429a      	cmp	r2, r3
 800482e:	d302      	bcc.n	8004836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d136      	bne.n	80048a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	0c1b      	lsrs	r3, r3, #16
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b01      	cmp	r3, #1
 800483e:	d10c      	bne.n	800485a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	43da      	mvns	r2, r3
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	4013      	ands	r3, r2
 800484c:	b29b      	uxth	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	bf14      	ite	ne
 8004852:	2301      	movne	r3, #1
 8004854:	2300      	moveq	r3, #0
 8004856:	b2db      	uxtb	r3, r3
 8004858:	e00b      	b.n	8004872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	43da      	mvns	r2, r3
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	4013      	ands	r3, r2
 8004866:	b29b      	uxth	r3, r3
 8004868:	2b00      	cmp	r3, #0
 800486a:	bf14      	ite	ne
 800486c:	2301      	movne	r3, #1
 800486e:	2300      	moveq	r3, #0
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d016      	beq.n	80048a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2220      	movs	r2, #32
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004890:	f043 0220 	orr.w	r2, r3, #32
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e021      	b.n	80048e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	0c1b      	lsrs	r3, r3, #16
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d10c      	bne.n	80048c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	43da      	mvns	r2, r3
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	4013      	ands	r3, r2
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	2b00      	cmp	r3, #0
 80048be:	bf14      	ite	ne
 80048c0:	2301      	movne	r3, #1
 80048c2:	2300      	moveq	r3, #0
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	e00b      	b.n	80048e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	43da      	mvns	r2, r3
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	4013      	ands	r3, r2
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	bf14      	ite	ne
 80048da:	2301      	movne	r3, #1
 80048dc:	2300      	moveq	r3, #0
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f47f af6d 	bne.w	80047c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048fc:	e034      	b.n	8004968 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f000 f8e3 	bl	8004aca <I2C_IsAcknowledgeFailed>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d001      	beq.n	800490e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e034      	b.n	8004978 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004914:	d028      	beq.n	8004968 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004916:	f7fe f90b 	bl	8002b30 <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	429a      	cmp	r2, r3
 8004924:	d302      	bcc.n	800492c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d11d      	bne.n	8004968 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004936:	2b80      	cmp	r3, #128	@ 0x80
 8004938:	d016      	beq.n	8004968 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2220      	movs	r2, #32
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004954:	f043 0220 	orr.w	r2, r3, #32
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e007      	b.n	8004978 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004972:	2b80      	cmp	r3, #128	@ 0x80
 8004974:	d1c3      	bne.n	80048fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3710      	adds	r7, #16
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800498c:	e034      	b.n	80049f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f000 f89b 	bl	8004aca <I2C_IsAcknowledgeFailed>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d001      	beq.n	800499e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e034      	b.n	8004a08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a4:	d028      	beq.n	80049f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049a6:	f7fe f8c3 	bl	8002b30 <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d302      	bcc.n	80049bc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d11d      	bne.n	80049f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	f003 0304 	and.w	r3, r3, #4
 80049c6:	2b04      	cmp	r3, #4
 80049c8:	d016      	beq.n	80049f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2220      	movs	r2, #32
 80049d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e4:	f043 0220 	orr.w	r2, r3, #32
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e007      	b.n	8004a08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	f003 0304 	and.w	r3, r3, #4
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	d1c3      	bne.n	800498e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3710      	adds	r7, #16
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a1c:	e049      	b.n	8004ab2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	f003 0310 	and.w	r3, r3, #16
 8004a28:	2b10      	cmp	r3, #16
 8004a2a:	d119      	bne.n	8004a60 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f06f 0210 	mvn.w	r2, #16
 8004a34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e030      	b.n	8004ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a60:	f7fe f866 	bl	8002b30 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d302      	bcc.n	8004a76 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d11d      	bne.n	8004ab2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a80:	2b40      	cmp	r3, #64	@ 0x40
 8004a82:	d016      	beq.n	8004ab2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2220      	movs	r2, #32
 8004a8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a9e:	f043 0220 	orr.w	r2, r3, #32
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e007      	b.n	8004ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	695b      	ldr	r3, [r3, #20]
 8004ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004abc:	2b40      	cmp	r3, #64	@ 0x40
 8004abe:	d1ae      	bne.n	8004a1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b083      	sub	sp, #12
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	695b      	ldr	r3, [r3, #20]
 8004ad8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004adc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ae0:	d11b      	bne.n	8004b1a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004aea:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2220      	movs	r2, #32
 8004af6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b06:	f043 0204 	orr.w	r2, r3, #4
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e000      	b.n	8004b1c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bc80      	pop	{r7}
 8004b24:	4770      	bx	lr
	...

08004b28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b086      	sub	sp, #24
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e272      	b.n	8005020 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	f000 8087 	beq.w	8004c56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b48:	4b92      	ldr	r3, [pc, #584]	@ (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f003 030c 	and.w	r3, r3, #12
 8004b50:	2b04      	cmp	r3, #4
 8004b52:	d00c      	beq.n	8004b6e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b54:	4b8f      	ldr	r3, [pc, #572]	@ (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f003 030c 	and.w	r3, r3, #12
 8004b5c:	2b08      	cmp	r3, #8
 8004b5e:	d112      	bne.n	8004b86 <HAL_RCC_OscConfig+0x5e>
 8004b60:	4b8c      	ldr	r3, [pc, #560]	@ (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b6c:	d10b      	bne.n	8004b86 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b6e:	4b89      	ldr	r3, [pc, #548]	@ (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d06c      	beq.n	8004c54 <HAL_RCC_OscConfig+0x12c>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d168      	bne.n	8004c54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e24c      	b.n	8005020 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b8e:	d106      	bne.n	8004b9e <HAL_RCC_OscConfig+0x76>
 8004b90:	4b80      	ldr	r3, [pc, #512]	@ (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a7f      	ldr	r2, [pc, #508]	@ (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004b96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b9a:	6013      	str	r3, [r2, #0]
 8004b9c:	e02e      	b.n	8004bfc <HAL_RCC_OscConfig+0xd4>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10c      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x98>
 8004ba6:	4b7b      	ldr	r3, [pc, #492]	@ (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a7a      	ldr	r2, [pc, #488]	@ (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004bac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bb0:	6013      	str	r3, [r2, #0]
 8004bb2:	4b78      	ldr	r3, [pc, #480]	@ (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a77      	ldr	r2, [pc, #476]	@ (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004bb8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004bbc:	6013      	str	r3, [r2, #0]
 8004bbe:	e01d      	b.n	8004bfc <HAL_RCC_OscConfig+0xd4>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004bc8:	d10c      	bne.n	8004be4 <HAL_RCC_OscConfig+0xbc>
 8004bca:	4b72      	ldr	r3, [pc, #456]	@ (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a71      	ldr	r2, [pc, #452]	@ (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004bd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004bd4:	6013      	str	r3, [r2, #0]
 8004bd6:	4b6f      	ldr	r3, [pc, #444]	@ (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a6e      	ldr	r2, [pc, #440]	@ (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004bdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004be0:	6013      	str	r3, [r2, #0]
 8004be2:	e00b      	b.n	8004bfc <HAL_RCC_OscConfig+0xd4>
 8004be4:	4b6b      	ldr	r3, [pc, #428]	@ (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a6a      	ldr	r2, [pc, #424]	@ (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004bea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bee:	6013      	str	r3, [r2, #0]
 8004bf0:	4b68      	ldr	r3, [pc, #416]	@ (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a67      	ldr	r2, [pc, #412]	@ (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004bf6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004bfa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d013      	beq.n	8004c2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c04:	f7fd ff94 	bl	8002b30 <HAL_GetTick>
 8004c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c0a:	e008      	b.n	8004c1e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c0c:	f7fd ff90 	bl	8002b30 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	2b64      	cmp	r3, #100	@ 0x64
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e200      	b.n	8005020 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c1e:	4b5d      	ldr	r3, [pc, #372]	@ (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d0f0      	beq.n	8004c0c <HAL_RCC_OscConfig+0xe4>
 8004c2a:	e014      	b.n	8004c56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c2c:	f7fd ff80 	bl	8002b30 <HAL_GetTick>
 8004c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c32:	e008      	b.n	8004c46 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c34:	f7fd ff7c 	bl	8002b30 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	2b64      	cmp	r3, #100	@ 0x64
 8004c40:	d901      	bls.n	8004c46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e1ec      	b.n	8005020 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c46:	4b53      	ldr	r3, [pc, #332]	@ (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1f0      	bne.n	8004c34 <HAL_RCC_OscConfig+0x10c>
 8004c52:	e000      	b.n	8004c56 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d063      	beq.n	8004d2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c62:	4b4c      	ldr	r3, [pc, #304]	@ (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f003 030c 	and.w	r3, r3, #12
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00b      	beq.n	8004c86 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004c6e:	4b49      	ldr	r3, [pc, #292]	@ (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f003 030c 	and.w	r3, r3, #12
 8004c76:	2b08      	cmp	r3, #8
 8004c78:	d11c      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x18c>
 8004c7a:	4b46      	ldr	r3, [pc, #280]	@ (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d116      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c86:	4b43      	ldr	r3, [pc, #268]	@ (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d005      	beq.n	8004c9e <HAL_RCC_OscConfig+0x176>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d001      	beq.n	8004c9e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e1c0      	b.n	8005020 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c9e:	4b3d      	ldr	r3, [pc, #244]	@ (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	00db      	lsls	r3, r3, #3
 8004cac:	4939      	ldr	r1, [pc, #228]	@ (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cb2:	e03a      	b.n	8004d2a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d020      	beq.n	8004cfe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cbc:	4b36      	ldr	r3, [pc, #216]	@ (8004d98 <HAL_RCC_OscConfig+0x270>)
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc2:	f7fd ff35 	bl	8002b30 <HAL_GetTick>
 8004cc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cc8:	e008      	b.n	8004cdc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cca:	f7fd ff31 	bl	8002b30 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d901      	bls.n	8004cdc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e1a1      	b.n	8005020 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cdc:	4b2d      	ldr	r3, [pc, #180]	@ (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0302 	and.w	r3, r3, #2
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d0f0      	beq.n	8004cca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ce8:	4b2a      	ldr	r3, [pc, #168]	@ (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	695b      	ldr	r3, [r3, #20]
 8004cf4:	00db      	lsls	r3, r3, #3
 8004cf6:	4927      	ldr	r1, [pc, #156]	@ (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	600b      	str	r3, [r1, #0]
 8004cfc:	e015      	b.n	8004d2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cfe:	4b26      	ldr	r3, [pc, #152]	@ (8004d98 <HAL_RCC_OscConfig+0x270>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d04:	f7fd ff14 	bl	8002b30 <HAL_GetTick>
 8004d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d0a:	e008      	b.n	8004d1e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d0c:	f7fd ff10 	bl	8002b30 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e180      	b.n	8005020 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d1e:	4b1d      	ldr	r3, [pc, #116]	@ (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1f0      	bne.n	8004d0c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0308 	and.w	r3, r3, #8
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d03a      	beq.n	8004dac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d019      	beq.n	8004d72 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d3e:	4b17      	ldr	r3, [pc, #92]	@ (8004d9c <HAL_RCC_OscConfig+0x274>)
 8004d40:	2201      	movs	r2, #1
 8004d42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d44:	f7fd fef4 	bl	8002b30 <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d4a:	e008      	b.n	8004d5e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d4c:	f7fd fef0 	bl	8002b30 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e160      	b.n	8005020 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d0f0      	beq.n	8004d4c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004d6a:	2001      	movs	r0, #1
 8004d6c:	f000 fafe 	bl	800536c <RCC_Delay>
 8004d70:	e01c      	b.n	8004dac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d72:	4b0a      	ldr	r3, [pc, #40]	@ (8004d9c <HAL_RCC_OscConfig+0x274>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d78:	f7fd feda 	bl	8002b30 <HAL_GetTick>
 8004d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d7e:	e00f      	b.n	8004da0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d80:	f7fd fed6 	bl	8002b30 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d908      	bls.n	8004da0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e146      	b.n	8005020 <HAL_RCC_OscConfig+0x4f8>
 8004d92:	bf00      	nop
 8004d94:	40021000 	.word	0x40021000
 8004d98:	42420000 	.word	0x42420000
 8004d9c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004da0:	4b92      	ldr	r3, [pc, #584]	@ (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da4:	f003 0302 	and.w	r3, r3, #2
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1e9      	bne.n	8004d80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0304 	and.w	r3, r3, #4
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f000 80a6 	beq.w	8004f06 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dbe:	4b8b      	ldr	r3, [pc, #556]	@ (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004dc0:	69db      	ldr	r3, [r3, #28]
 8004dc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10d      	bne.n	8004de6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dca:	4b88      	ldr	r3, [pc, #544]	@ (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	4a87      	ldr	r2, [pc, #540]	@ (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004dd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dd4:	61d3      	str	r3, [r2, #28]
 8004dd6:	4b85      	ldr	r3, [pc, #532]	@ (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004dd8:	69db      	ldr	r3, [r3, #28]
 8004dda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dde:	60bb      	str	r3, [r7, #8]
 8004de0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004de2:	2301      	movs	r3, #1
 8004de4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004de6:	4b82      	ldr	r3, [pc, #520]	@ (8004ff0 <HAL_RCC_OscConfig+0x4c8>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d118      	bne.n	8004e24 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004df2:	4b7f      	ldr	r3, [pc, #508]	@ (8004ff0 <HAL_RCC_OscConfig+0x4c8>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a7e      	ldr	r2, [pc, #504]	@ (8004ff0 <HAL_RCC_OscConfig+0x4c8>)
 8004df8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dfe:	f7fd fe97 	bl	8002b30 <HAL_GetTick>
 8004e02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e04:	e008      	b.n	8004e18 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e06:	f7fd fe93 	bl	8002b30 <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b64      	cmp	r3, #100	@ 0x64
 8004e12:	d901      	bls.n	8004e18 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e103      	b.n	8005020 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e18:	4b75      	ldr	r3, [pc, #468]	@ (8004ff0 <HAL_RCC_OscConfig+0x4c8>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d0f0      	beq.n	8004e06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d106      	bne.n	8004e3a <HAL_RCC_OscConfig+0x312>
 8004e2c:	4b6f      	ldr	r3, [pc, #444]	@ (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004e2e:	6a1b      	ldr	r3, [r3, #32]
 8004e30:	4a6e      	ldr	r2, [pc, #440]	@ (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004e32:	f043 0301 	orr.w	r3, r3, #1
 8004e36:	6213      	str	r3, [r2, #32]
 8004e38:	e02d      	b.n	8004e96 <HAL_RCC_OscConfig+0x36e>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10c      	bne.n	8004e5c <HAL_RCC_OscConfig+0x334>
 8004e42:	4b6a      	ldr	r3, [pc, #424]	@ (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	4a69      	ldr	r2, [pc, #420]	@ (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004e48:	f023 0301 	bic.w	r3, r3, #1
 8004e4c:	6213      	str	r3, [r2, #32]
 8004e4e:	4b67      	ldr	r3, [pc, #412]	@ (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	4a66      	ldr	r2, [pc, #408]	@ (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004e54:	f023 0304 	bic.w	r3, r3, #4
 8004e58:	6213      	str	r3, [r2, #32]
 8004e5a:	e01c      	b.n	8004e96 <HAL_RCC_OscConfig+0x36e>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	2b05      	cmp	r3, #5
 8004e62:	d10c      	bne.n	8004e7e <HAL_RCC_OscConfig+0x356>
 8004e64:	4b61      	ldr	r3, [pc, #388]	@ (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	4a60      	ldr	r2, [pc, #384]	@ (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004e6a:	f043 0304 	orr.w	r3, r3, #4
 8004e6e:	6213      	str	r3, [r2, #32]
 8004e70:	4b5e      	ldr	r3, [pc, #376]	@ (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004e72:	6a1b      	ldr	r3, [r3, #32]
 8004e74:	4a5d      	ldr	r2, [pc, #372]	@ (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004e76:	f043 0301 	orr.w	r3, r3, #1
 8004e7a:	6213      	str	r3, [r2, #32]
 8004e7c:	e00b      	b.n	8004e96 <HAL_RCC_OscConfig+0x36e>
 8004e7e:	4b5b      	ldr	r3, [pc, #364]	@ (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	4a5a      	ldr	r2, [pc, #360]	@ (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004e84:	f023 0301 	bic.w	r3, r3, #1
 8004e88:	6213      	str	r3, [r2, #32]
 8004e8a:	4b58      	ldr	r3, [pc, #352]	@ (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	4a57      	ldr	r2, [pc, #348]	@ (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004e90:	f023 0304 	bic.w	r3, r3, #4
 8004e94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d015      	beq.n	8004eca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e9e:	f7fd fe47 	bl	8002b30 <HAL_GetTick>
 8004ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ea4:	e00a      	b.n	8004ebc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ea6:	f7fd fe43 	bl	8002b30 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d901      	bls.n	8004ebc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e0b1      	b.n	8005020 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ebc:	4b4b      	ldr	r3, [pc, #300]	@ (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004ebe:	6a1b      	ldr	r3, [r3, #32]
 8004ec0:	f003 0302 	and.w	r3, r3, #2
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d0ee      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x37e>
 8004ec8:	e014      	b.n	8004ef4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eca:	f7fd fe31 	bl	8002b30 <HAL_GetTick>
 8004ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ed0:	e00a      	b.n	8004ee8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ed2:	f7fd fe2d 	bl	8002b30 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d901      	bls.n	8004ee8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e09b      	b.n	8005020 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ee8:	4b40      	ldr	r3, [pc, #256]	@ (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004eea:	6a1b      	ldr	r3, [r3, #32]
 8004eec:	f003 0302 	and.w	r3, r3, #2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1ee      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004ef4:	7dfb      	ldrb	r3, [r7, #23]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d105      	bne.n	8004f06 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004efa:	4b3c      	ldr	r3, [pc, #240]	@ (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	4a3b      	ldr	r2, [pc, #236]	@ (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004f00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	69db      	ldr	r3, [r3, #28]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	f000 8087 	beq.w	800501e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f10:	4b36      	ldr	r3, [pc, #216]	@ (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f003 030c 	and.w	r3, r3, #12
 8004f18:	2b08      	cmp	r3, #8
 8004f1a:	d061      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	69db      	ldr	r3, [r3, #28]
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d146      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f24:	4b33      	ldr	r3, [pc, #204]	@ (8004ff4 <HAL_RCC_OscConfig+0x4cc>)
 8004f26:	2200      	movs	r2, #0
 8004f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f2a:	f7fd fe01 	bl	8002b30 <HAL_GetTick>
 8004f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f30:	e008      	b.n	8004f44 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f32:	f7fd fdfd 	bl	8002b30 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d901      	bls.n	8004f44 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e06d      	b.n	8005020 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f44:	4b29      	ldr	r3, [pc, #164]	@ (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1f0      	bne.n	8004f32 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a1b      	ldr	r3, [r3, #32]
 8004f54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f58:	d108      	bne.n	8004f6c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004f5a:	4b24      	ldr	r3, [pc, #144]	@ (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	4921      	ldr	r1, [pc, #132]	@ (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f6c:	4b1f      	ldr	r3, [pc, #124]	@ (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a19      	ldr	r1, [r3, #32]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7c:	430b      	orrs	r3, r1
 8004f7e:	491b      	ldr	r1, [pc, #108]	@ (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f84:	4b1b      	ldr	r3, [pc, #108]	@ (8004ff4 <HAL_RCC_OscConfig+0x4cc>)
 8004f86:	2201      	movs	r2, #1
 8004f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f8a:	f7fd fdd1 	bl	8002b30 <HAL_GetTick>
 8004f8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f90:	e008      	b.n	8004fa4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f92:	f7fd fdcd 	bl	8002b30 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d901      	bls.n	8004fa4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e03d      	b.n	8005020 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004fa4:	4b11      	ldr	r3, [pc, #68]	@ (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d0f0      	beq.n	8004f92 <HAL_RCC_OscConfig+0x46a>
 8004fb0:	e035      	b.n	800501e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fb2:	4b10      	ldr	r3, [pc, #64]	@ (8004ff4 <HAL_RCC_OscConfig+0x4cc>)
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fb8:	f7fd fdba 	bl	8002b30 <HAL_GetTick>
 8004fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fbe:	e008      	b.n	8004fd2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fc0:	f7fd fdb6 	bl	8002b30 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d901      	bls.n	8004fd2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e026      	b.n	8005020 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fd2:	4b06      	ldr	r3, [pc, #24]	@ (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1f0      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x498>
 8004fde:	e01e      	b.n	800501e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	69db      	ldr	r3, [r3, #28]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d107      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e019      	b.n	8005020 <HAL_RCC_OscConfig+0x4f8>
 8004fec:	40021000 	.word	0x40021000
 8004ff0:	40007000 	.word	0x40007000
 8004ff4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8005028 <HAL_RCC_OscConfig+0x500>)
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a1b      	ldr	r3, [r3, #32]
 8005008:	429a      	cmp	r2, r3
 800500a:	d106      	bne.n	800501a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005016:	429a      	cmp	r2, r3
 8005018:	d001      	beq.n	800501e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e000      	b.n	8005020 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3718      	adds	r7, #24
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	40021000 	.word	0x40021000

0800502c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d101      	bne.n	8005040 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e0d0      	b.n	80051e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005040:	4b6a      	ldr	r3, [pc, #424]	@ (80051ec <HAL_RCC_ClockConfig+0x1c0>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0307 	and.w	r3, r3, #7
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	429a      	cmp	r2, r3
 800504c:	d910      	bls.n	8005070 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800504e:	4b67      	ldr	r3, [pc, #412]	@ (80051ec <HAL_RCC_ClockConfig+0x1c0>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f023 0207 	bic.w	r2, r3, #7
 8005056:	4965      	ldr	r1, [pc, #404]	@ (80051ec <HAL_RCC_ClockConfig+0x1c0>)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	4313      	orrs	r3, r2
 800505c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800505e:	4b63      	ldr	r3, [pc, #396]	@ (80051ec <HAL_RCC_ClockConfig+0x1c0>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0307 	and.w	r3, r3, #7
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	429a      	cmp	r2, r3
 800506a:	d001      	beq.n	8005070 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e0b8      	b.n	80051e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0302 	and.w	r3, r3, #2
 8005078:	2b00      	cmp	r3, #0
 800507a:	d020      	beq.n	80050be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0304 	and.w	r3, r3, #4
 8005084:	2b00      	cmp	r3, #0
 8005086:	d005      	beq.n	8005094 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005088:	4b59      	ldr	r3, [pc, #356]	@ (80051f0 <HAL_RCC_ClockConfig+0x1c4>)
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	4a58      	ldr	r2, [pc, #352]	@ (80051f0 <HAL_RCC_ClockConfig+0x1c4>)
 800508e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005092:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0308 	and.w	r3, r3, #8
 800509c:	2b00      	cmp	r3, #0
 800509e:	d005      	beq.n	80050ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050a0:	4b53      	ldr	r3, [pc, #332]	@ (80051f0 <HAL_RCC_ClockConfig+0x1c4>)
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	4a52      	ldr	r2, [pc, #328]	@ (80051f0 <HAL_RCC_ClockConfig+0x1c4>)
 80050a6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80050aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050ac:	4b50      	ldr	r3, [pc, #320]	@ (80051f0 <HAL_RCC_ClockConfig+0x1c4>)
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	494d      	ldr	r1, [pc, #308]	@ (80051f0 <HAL_RCC_ClockConfig+0x1c4>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d040      	beq.n	800514c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d107      	bne.n	80050e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050d2:	4b47      	ldr	r3, [pc, #284]	@ (80051f0 <HAL_RCC_ClockConfig+0x1c4>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d115      	bne.n	800510a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e07f      	b.n	80051e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d107      	bne.n	80050fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ea:	4b41      	ldr	r3, [pc, #260]	@ (80051f0 <HAL_RCC_ClockConfig+0x1c4>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d109      	bne.n	800510a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e073      	b.n	80051e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050fa:	4b3d      	ldr	r3, [pc, #244]	@ (80051f0 <HAL_RCC_ClockConfig+0x1c4>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0302 	and.w	r3, r3, #2
 8005102:	2b00      	cmp	r3, #0
 8005104:	d101      	bne.n	800510a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e06b      	b.n	80051e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800510a:	4b39      	ldr	r3, [pc, #228]	@ (80051f0 <HAL_RCC_ClockConfig+0x1c4>)
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f023 0203 	bic.w	r2, r3, #3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	4936      	ldr	r1, [pc, #216]	@ (80051f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005118:	4313      	orrs	r3, r2
 800511a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800511c:	f7fd fd08 	bl	8002b30 <HAL_GetTick>
 8005120:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005122:	e00a      	b.n	800513a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005124:	f7fd fd04 	bl	8002b30 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005132:	4293      	cmp	r3, r2
 8005134:	d901      	bls.n	800513a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e053      	b.n	80051e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800513a:	4b2d      	ldr	r3, [pc, #180]	@ (80051f0 <HAL_RCC_ClockConfig+0x1c4>)
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f003 020c 	and.w	r2, r3, #12
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	429a      	cmp	r2, r3
 800514a:	d1eb      	bne.n	8005124 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800514c:	4b27      	ldr	r3, [pc, #156]	@ (80051ec <HAL_RCC_ClockConfig+0x1c0>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0307 	and.w	r3, r3, #7
 8005154:	683a      	ldr	r2, [r7, #0]
 8005156:	429a      	cmp	r2, r3
 8005158:	d210      	bcs.n	800517c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800515a:	4b24      	ldr	r3, [pc, #144]	@ (80051ec <HAL_RCC_ClockConfig+0x1c0>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f023 0207 	bic.w	r2, r3, #7
 8005162:	4922      	ldr	r1, [pc, #136]	@ (80051ec <HAL_RCC_ClockConfig+0x1c0>)
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	4313      	orrs	r3, r2
 8005168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800516a:	4b20      	ldr	r3, [pc, #128]	@ (80051ec <HAL_RCC_ClockConfig+0x1c0>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0307 	and.w	r3, r3, #7
 8005172:	683a      	ldr	r2, [r7, #0]
 8005174:	429a      	cmp	r2, r3
 8005176:	d001      	beq.n	800517c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e032      	b.n	80051e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0304 	and.w	r3, r3, #4
 8005184:	2b00      	cmp	r3, #0
 8005186:	d008      	beq.n	800519a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005188:	4b19      	ldr	r3, [pc, #100]	@ (80051f0 <HAL_RCC_ClockConfig+0x1c4>)
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	4916      	ldr	r1, [pc, #88]	@ (80051f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005196:	4313      	orrs	r3, r2
 8005198:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0308 	and.w	r3, r3, #8
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d009      	beq.n	80051ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80051a6:	4b12      	ldr	r3, [pc, #72]	@ (80051f0 <HAL_RCC_ClockConfig+0x1c4>)
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	00db      	lsls	r3, r3, #3
 80051b4:	490e      	ldr	r1, [pc, #56]	@ (80051f0 <HAL_RCC_ClockConfig+0x1c4>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80051ba:	f000 f821 	bl	8005200 <HAL_RCC_GetSysClockFreq>
 80051be:	4602      	mov	r2, r0
 80051c0:	4b0b      	ldr	r3, [pc, #44]	@ (80051f0 <HAL_RCC_ClockConfig+0x1c4>)
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	091b      	lsrs	r3, r3, #4
 80051c6:	f003 030f 	and.w	r3, r3, #15
 80051ca:	490a      	ldr	r1, [pc, #40]	@ (80051f4 <HAL_RCC_ClockConfig+0x1c8>)
 80051cc:	5ccb      	ldrb	r3, [r1, r3]
 80051ce:	fa22 f303 	lsr.w	r3, r2, r3
 80051d2:	4a09      	ldr	r2, [pc, #36]	@ (80051f8 <HAL_RCC_ClockConfig+0x1cc>)
 80051d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80051d6:	4b09      	ldr	r3, [pc, #36]	@ (80051fc <HAL_RCC_ClockConfig+0x1d0>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4618      	mov	r0, r3
 80051dc:	f7fd fae8 	bl	80027b0 <HAL_InitTick>

  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3710      	adds	r7, #16
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	40022000 	.word	0x40022000
 80051f0:	40021000 	.word	0x40021000
 80051f4:	0800a1f8 	.word	0x0800a1f8
 80051f8:	2000008c 	.word	0x2000008c
 80051fc:	20000090 	.word	0x20000090

08005200 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005200:	b480      	push	{r7}
 8005202:	b087      	sub	sp, #28
 8005204:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005206:	2300      	movs	r3, #0
 8005208:	60fb      	str	r3, [r7, #12]
 800520a:	2300      	movs	r3, #0
 800520c:	60bb      	str	r3, [r7, #8]
 800520e:	2300      	movs	r3, #0
 8005210:	617b      	str	r3, [r7, #20]
 8005212:	2300      	movs	r3, #0
 8005214:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005216:	2300      	movs	r3, #0
 8005218:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800521a:	4b1e      	ldr	r3, [pc, #120]	@ (8005294 <HAL_RCC_GetSysClockFreq+0x94>)
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f003 030c 	and.w	r3, r3, #12
 8005226:	2b04      	cmp	r3, #4
 8005228:	d002      	beq.n	8005230 <HAL_RCC_GetSysClockFreq+0x30>
 800522a:	2b08      	cmp	r3, #8
 800522c:	d003      	beq.n	8005236 <HAL_RCC_GetSysClockFreq+0x36>
 800522e:	e027      	b.n	8005280 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005230:	4b19      	ldr	r3, [pc, #100]	@ (8005298 <HAL_RCC_GetSysClockFreq+0x98>)
 8005232:	613b      	str	r3, [r7, #16]
      break;
 8005234:	e027      	b.n	8005286 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	0c9b      	lsrs	r3, r3, #18
 800523a:	f003 030f 	and.w	r3, r3, #15
 800523e:	4a17      	ldr	r2, [pc, #92]	@ (800529c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005240:	5cd3      	ldrb	r3, [r2, r3]
 8005242:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d010      	beq.n	8005270 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800524e:	4b11      	ldr	r3, [pc, #68]	@ (8005294 <HAL_RCC_GetSysClockFreq+0x94>)
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	0c5b      	lsrs	r3, r3, #17
 8005254:	f003 0301 	and.w	r3, r3, #1
 8005258:	4a11      	ldr	r2, [pc, #68]	@ (80052a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800525a:	5cd3      	ldrb	r3, [r2, r3]
 800525c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a0d      	ldr	r2, [pc, #52]	@ (8005298 <HAL_RCC_GetSysClockFreq+0x98>)
 8005262:	fb03 f202 	mul.w	r2, r3, r2
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	fbb2 f3f3 	udiv	r3, r2, r3
 800526c:	617b      	str	r3, [r7, #20]
 800526e:	e004      	b.n	800527a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a0c      	ldr	r2, [pc, #48]	@ (80052a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005274:	fb02 f303 	mul.w	r3, r2, r3
 8005278:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	613b      	str	r3, [r7, #16]
      break;
 800527e:	e002      	b.n	8005286 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005280:	4b05      	ldr	r3, [pc, #20]	@ (8005298 <HAL_RCC_GetSysClockFreq+0x98>)
 8005282:	613b      	str	r3, [r7, #16]
      break;
 8005284:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005286:	693b      	ldr	r3, [r7, #16]
}
 8005288:	4618      	mov	r0, r3
 800528a:	371c      	adds	r7, #28
 800528c:	46bd      	mov	sp, r7
 800528e:	bc80      	pop	{r7}
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	40021000 	.word	0x40021000
 8005298:	007a1200 	.word	0x007a1200
 800529c:	0800a210 	.word	0x0800a210
 80052a0:	0800a220 	.word	0x0800a220
 80052a4:	003d0900 	.word	0x003d0900

080052a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052a8:	b480      	push	{r7}
 80052aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052ac:	4b02      	ldr	r3, [pc, #8]	@ (80052b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80052ae:	681b      	ldr	r3, [r3, #0]
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bc80      	pop	{r7}
 80052b6:	4770      	bx	lr
 80052b8:	2000008c 	.word	0x2000008c

080052bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80052c0:	f7ff fff2 	bl	80052a8 <HAL_RCC_GetHCLKFreq>
 80052c4:	4602      	mov	r2, r0
 80052c6:	4b05      	ldr	r3, [pc, #20]	@ (80052dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	0a1b      	lsrs	r3, r3, #8
 80052cc:	f003 0307 	and.w	r3, r3, #7
 80052d0:	4903      	ldr	r1, [pc, #12]	@ (80052e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052d2:	5ccb      	ldrb	r3, [r1, r3]
 80052d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052d8:	4618      	mov	r0, r3
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	40021000 	.word	0x40021000
 80052e0:	0800a208 	.word	0x0800a208

080052e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80052e8:	f7ff ffde 	bl	80052a8 <HAL_RCC_GetHCLKFreq>
 80052ec:	4602      	mov	r2, r0
 80052ee:	4b05      	ldr	r3, [pc, #20]	@ (8005304 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	0adb      	lsrs	r3, r3, #11
 80052f4:	f003 0307 	and.w	r3, r3, #7
 80052f8:	4903      	ldr	r1, [pc, #12]	@ (8005308 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052fa:	5ccb      	ldrb	r3, [r1, r3]
 80052fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005300:	4618      	mov	r0, r3
 8005302:	bd80      	pop	{r7, pc}
 8005304:	40021000 	.word	0x40021000
 8005308:	0800a208 	.word	0x0800a208

0800530c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	220f      	movs	r2, #15
 800531a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800531c:	4b11      	ldr	r3, [pc, #68]	@ (8005364 <HAL_RCC_GetClockConfig+0x58>)
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f003 0203 	and.w	r2, r3, #3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005328:	4b0e      	ldr	r3, [pc, #56]	@ (8005364 <HAL_RCC_GetClockConfig+0x58>)
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005334:	4b0b      	ldr	r3, [pc, #44]	@ (8005364 <HAL_RCC_GetClockConfig+0x58>)
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005340:	4b08      	ldr	r3, [pc, #32]	@ (8005364 <HAL_RCC_GetClockConfig+0x58>)
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	08db      	lsrs	r3, r3, #3
 8005346:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800534e:	4b06      	ldr	r3, [pc, #24]	@ (8005368 <HAL_RCC_GetClockConfig+0x5c>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0207 	and.w	r2, r3, #7
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800535a:	bf00      	nop
 800535c:	370c      	adds	r7, #12
 800535e:	46bd      	mov	sp, r7
 8005360:	bc80      	pop	{r7}
 8005362:	4770      	bx	lr
 8005364:	40021000 	.word	0x40021000
 8005368:	40022000 	.word	0x40022000

0800536c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005374:	4b0a      	ldr	r3, [pc, #40]	@ (80053a0 <RCC_Delay+0x34>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a0a      	ldr	r2, [pc, #40]	@ (80053a4 <RCC_Delay+0x38>)
 800537a:	fba2 2303 	umull	r2, r3, r2, r3
 800537e:	0a5b      	lsrs	r3, r3, #9
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	fb02 f303 	mul.w	r3, r2, r3
 8005386:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005388:	bf00      	nop
  }
  while (Delay --);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	1e5a      	subs	r2, r3, #1
 800538e:	60fa      	str	r2, [r7, #12]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1f9      	bne.n	8005388 <RCC_Delay+0x1c>
}
 8005394:	bf00      	nop
 8005396:	bf00      	nop
 8005398:	3714      	adds	r7, #20
 800539a:	46bd      	mov	sp, r7
 800539c:	bc80      	pop	{r7}
 800539e:	4770      	bx	lr
 80053a0:	2000008c 	.word	0x2000008c
 80053a4:	10624dd3 	.word	0x10624dd3

080053a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d101      	bne.n	80053ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e041      	b.n	800543e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d106      	bne.n	80053d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 f839 	bl	8005446 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2202      	movs	r2, #2
 80053d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	3304      	adds	r3, #4
 80053e4:	4619      	mov	r1, r3
 80053e6:	4610      	mov	r0, r2
 80053e8:	f000 f99c 	bl	8005724 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3708      	adds	r7, #8
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005446:	b480      	push	{r7}
 8005448:	b083      	sub	sp, #12
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800544e:	bf00      	nop
 8005450:	370c      	adds	r7, #12
 8005452:	46bd      	mov	sp, r7
 8005454:	bc80      	pop	{r7}
 8005456:	4770      	bx	lr

08005458 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b01      	cmp	r3, #1
 800546a:	d001      	beq.n	8005470 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e03a      	b.n	80054e6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2202      	movs	r2, #2
 8005474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68da      	ldr	r2, [r3, #12]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f042 0201 	orr.w	r2, r2, #1
 8005486:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a18      	ldr	r2, [pc, #96]	@ (80054f0 <HAL_TIM_Base_Start_IT+0x98>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d00e      	beq.n	80054b0 <HAL_TIM_Base_Start_IT+0x58>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800549a:	d009      	beq.n	80054b0 <HAL_TIM_Base_Start_IT+0x58>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a14      	ldr	r2, [pc, #80]	@ (80054f4 <HAL_TIM_Base_Start_IT+0x9c>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d004      	beq.n	80054b0 <HAL_TIM_Base_Start_IT+0x58>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a13      	ldr	r2, [pc, #76]	@ (80054f8 <HAL_TIM_Base_Start_IT+0xa0>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d111      	bne.n	80054d4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f003 0307 	and.w	r3, r3, #7
 80054ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2b06      	cmp	r3, #6
 80054c0:	d010      	beq.n	80054e4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f042 0201 	orr.w	r2, r2, #1
 80054d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054d2:	e007      	b.n	80054e4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f042 0201 	orr.w	r2, r2, #1
 80054e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bc80      	pop	{r7}
 80054ee:	4770      	bx	lr
 80054f0:	40012c00 	.word	0x40012c00
 80054f4:	40000400 	.word	0x40000400
 80054f8:	40000800 	.word	0x40000800

080054fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	f003 0302 	and.w	r3, r3, #2
 800551a:	2b00      	cmp	r3, #0
 800551c:	d020      	beq.n	8005560 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f003 0302 	and.w	r3, r3, #2
 8005524:	2b00      	cmp	r3, #0
 8005526:	d01b      	beq.n	8005560 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f06f 0202 	mvn.w	r2, #2
 8005530:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2201      	movs	r2, #1
 8005536:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	f003 0303 	and.w	r3, r3, #3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f8d1 	bl	80056ee <HAL_TIM_IC_CaptureCallback>
 800554c:	e005      	b.n	800555a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f8c4 	bl	80056dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 f8d3 	bl	8005700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	f003 0304 	and.w	r3, r3, #4
 8005566:	2b00      	cmp	r3, #0
 8005568:	d020      	beq.n	80055ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f003 0304 	and.w	r3, r3, #4
 8005570:	2b00      	cmp	r3, #0
 8005572:	d01b      	beq.n	80055ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f06f 0204 	mvn.w	r2, #4
 800557c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2202      	movs	r2, #2
 8005582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800558e:	2b00      	cmp	r3, #0
 8005590:	d003      	beq.n	800559a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f8ab 	bl	80056ee <HAL_TIM_IC_CaptureCallback>
 8005598:	e005      	b.n	80055a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 f89e 	bl	80056dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 f8ad 	bl	8005700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	f003 0308 	and.w	r3, r3, #8
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d020      	beq.n	80055f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f003 0308 	and.w	r3, r3, #8
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d01b      	beq.n	80055f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f06f 0208 	mvn.w	r2, #8
 80055c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2204      	movs	r2, #4
 80055ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	69db      	ldr	r3, [r3, #28]
 80055d6:	f003 0303 	and.w	r3, r3, #3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f885 	bl	80056ee <HAL_TIM_IC_CaptureCallback>
 80055e4:	e005      	b.n	80055f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f878 	bl	80056dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 f887 	bl	8005700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	f003 0310 	and.w	r3, r3, #16
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d020      	beq.n	8005644 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f003 0310 	and.w	r3, r3, #16
 8005608:	2b00      	cmp	r3, #0
 800560a:	d01b      	beq.n	8005644 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f06f 0210 	mvn.w	r2, #16
 8005614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2208      	movs	r2, #8
 800561a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005626:	2b00      	cmp	r3, #0
 8005628:	d003      	beq.n	8005632 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 f85f 	bl	80056ee <HAL_TIM_IC_CaptureCallback>
 8005630:	e005      	b.n	800563e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f852 	bl	80056dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 f861 	bl	8005700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00c      	beq.n	8005668 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f003 0301 	and.w	r3, r3, #1
 8005654:	2b00      	cmp	r3, #0
 8005656:	d007      	beq.n	8005668 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f06f 0201 	mvn.w	r2, #1
 8005660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f7fc ffca 	bl	80025fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00c      	beq.n	800568c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005678:	2b00      	cmp	r3, #0
 800567a:	d007      	beq.n	800568c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f8c3 	bl	8005812 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00c      	beq.n	80056b0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800569c:	2b00      	cmp	r3, #0
 800569e:	d007      	beq.n	80056b0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80056a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 f831 	bl	8005712 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	f003 0320 	and.w	r3, r3, #32
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00c      	beq.n	80056d4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f003 0320 	and.w	r3, r3, #32
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d007      	beq.n	80056d4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f06f 0220 	mvn.w	r2, #32
 80056cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f896 	bl	8005800 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056d4:	bf00      	nop
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bc80      	pop	{r7}
 80056ec:	4770      	bx	lr

080056ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056ee:	b480      	push	{r7}
 80056f0:	b083      	sub	sp, #12
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056f6:	bf00      	nop
 80056f8:	370c      	adds	r7, #12
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bc80      	pop	{r7}
 80056fe:	4770      	bx	lr

08005700 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	bc80      	pop	{r7}
 8005710:	4770      	bx	lr

08005712 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005712:	b480      	push	{r7}
 8005714:	b083      	sub	sp, #12
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800571a:	bf00      	nop
 800571c:	370c      	adds	r7, #12
 800571e:	46bd      	mov	sp, r7
 8005720:	bc80      	pop	{r7}
 8005722:	4770      	bx	lr

08005724 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a2f      	ldr	r2, [pc, #188]	@ (80057f4 <TIM_Base_SetConfig+0xd0>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d00b      	beq.n	8005754 <TIM_Base_SetConfig+0x30>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005742:	d007      	beq.n	8005754 <TIM_Base_SetConfig+0x30>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a2c      	ldr	r2, [pc, #176]	@ (80057f8 <TIM_Base_SetConfig+0xd4>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d003      	beq.n	8005754 <TIM_Base_SetConfig+0x30>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a2b      	ldr	r2, [pc, #172]	@ (80057fc <TIM_Base_SetConfig+0xd8>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d108      	bne.n	8005766 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800575a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	4313      	orrs	r3, r2
 8005764:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a22      	ldr	r2, [pc, #136]	@ (80057f4 <TIM_Base_SetConfig+0xd0>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d00b      	beq.n	8005786 <TIM_Base_SetConfig+0x62>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005774:	d007      	beq.n	8005786 <TIM_Base_SetConfig+0x62>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a1f      	ldr	r2, [pc, #124]	@ (80057f8 <TIM_Base_SetConfig+0xd4>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d003      	beq.n	8005786 <TIM_Base_SetConfig+0x62>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a1e      	ldr	r2, [pc, #120]	@ (80057fc <TIM_Base_SetConfig+0xd8>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d108      	bne.n	8005798 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800578c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	4313      	orrs	r3, r2
 8005796:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	689a      	ldr	r2, [r3, #8]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a0d      	ldr	r2, [pc, #52]	@ (80057f4 <TIM_Base_SetConfig+0xd0>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d103      	bne.n	80057cc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	691a      	ldr	r2, [r3, #16]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d005      	beq.n	80057ea <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	f023 0201 	bic.w	r2, r3, #1
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	611a      	str	r2, [r3, #16]
  }
}
 80057ea:	bf00      	nop
 80057ec:	3714      	adds	r7, #20
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bc80      	pop	{r7}
 80057f2:	4770      	bx	lr
 80057f4:	40012c00 	.word	0x40012c00
 80057f8:	40000400 	.word	0x40000400
 80057fc:	40000800 	.word	0x40000800

08005800 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	bc80      	pop	{r7}
 8005810:	4770      	bx	lr

08005812 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005812:	b480      	push	{r7}
 8005814:	b083      	sub	sp, #12
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800581a:	bf00      	nop
 800581c:	370c      	adds	r7, #12
 800581e:	46bd      	mov	sp, r7
 8005820:	bc80      	pop	{r7}
 8005822:	4770      	bx	lr

08005824 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e042      	b.n	80058bc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d106      	bne.n	8005850 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f7fc ff64 	bl	8002718 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2224      	movs	r2, #36	@ 0x24
 8005854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68da      	ldr	r2, [r3, #12]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005866:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 fa09 	bl	8005c80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	691a      	ldr	r2, [r3, #16]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800587c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	695a      	ldr	r2, [r3, #20]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800588c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68da      	ldr	r2, [r3, #12]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800589c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2220      	movs	r2, #32
 80058a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2220      	movs	r2, #32
 80058b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3708      	adds	r7, #8
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b08a      	sub	sp, #40	@ 0x28
 80058c8:	af02      	add	r7, sp, #8
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	603b      	str	r3, [r7, #0]
 80058d0:	4613      	mov	r3, r2
 80058d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80058d4:	2300      	movs	r3, #0
 80058d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	2b20      	cmp	r3, #32
 80058e2:	d175      	bne.n	80059d0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d002      	beq.n	80058f0 <HAL_UART_Transmit+0x2c>
 80058ea:	88fb      	ldrh	r3, [r7, #6]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d101      	bne.n	80058f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e06e      	b.n	80059d2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2221      	movs	r2, #33	@ 0x21
 80058fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005902:	f7fd f915 	bl	8002b30 <HAL_GetTick>
 8005906:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	88fa      	ldrh	r2, [r7, #6]
 800590c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	88fa      	ldrh	r2, [r7, #6]
 8005912:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800591c:	d108      	bne.n	8005930 <HAL_UART_Transmit+0x6c>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d104      	bne.n	8005930 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005926:	2300      	movs	r3, #0
 8005928:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	61bb      	str	r3, [r7, #24]
 800592e:	e003      	b.n	8005938 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005934:	2300      	movs	r3, #0
 8005936:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005938:	e02e      	b.n	8005998 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	2200      	movs	r2, #0
 8005942:	2180      	movs	r1, #128	@ 0x80
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f000 f8df 	bl	8005b08 <UART_WaitOnFlagUntilTimeout>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d005      	beq.n	800595c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2220      	movs	r2, #32
 8005954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005958:	2303      	movs	r3, #3
 800595a:	e03a      	b.n	80059d2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d10b      	bne.n	800597a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	881b      	ldrh	r3, [r3, #0]
 8005966:	461a      	mov	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005970:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	3302      	adds	r3, #2
 8005976:	61bb      	str	r3, [r7, #24]
 8005978:	e007      	b.n	800598a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	781a      	ldrb	r2, [r3, #0]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	3301      	adds	r3, #1
 8005988:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800598e:	b29b      	uxth	r3, r3
 8005990:	3b01      	subs	r3, #1
 8005992:	b29a      	uxth	r2, r3
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800599c:	b29b      	uxth	r3, r3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1cb      	bne.n	800593a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	9300      	str	r3, [sp, #0]
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	2200      	movs	r2, #0
 80059aa:	2140      	movs	r1, #64	@ 0x40
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f000 f8ab 	bl	8005b08 <UART_WaitOnFlagUntilTimeout>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d005      	beq.n	80059c4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2220      	movs	r2, #32
 80059bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e006      	b.n	80059d2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2220      	movs	r2, #32
 80059c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80059cc:	2300      	movs	r3, #0
 80059ce:	e000      	b.n	80059d2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80059d0:	2302      	movs	r3, #2
  }
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3720      	adds	r7, #32
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b08a      	sub	sp, #40	@ 0x28
 80059de:	af02      	add	r7, sp, #8
 80059e0:	60f8      	str	r0, [r7, #12]
 80059e2:	60b9      	str	r1, [r7, #8]
 80059e4:	603b      	str	r3, [r7, #0]
 80059e6:	4613      	mov	r3, r2
 80059e8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80059ea:	2300      	movs	r3, #0
 80059ec:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b20      	cmp	r3, #32
 80059f8:	f040 8081 	bne.w	8005afe <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d002      	beq.n	8005a08 <HAL_UART_Receive+0x2e>
 8005a02:	88fb      	ldrh	r3, [r7, #6]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d101      	bne.n	8005a0c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e079      	b.n	8005b00 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2222      	movs	r2, #34	@ 0x22
 8005a16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a20:	f7fd f886 	bl	8002b30 <HAL_GetTick>
 8005a24:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	88fa      	ldrh	r2, [r7, #6]
 8005a2a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	88fa      	ldrh	r2, [r7, #6]
 8005a30:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a3a:	d108      	bne.n	8005a4e <HAL_UART_Receive+0x74>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d104      	bne.n	8005a4e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8005a44:	2300      	movs	r3, #0
 8005a46:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	61bb      	str	r3, [r7, #24]
 8005a4c:	e003      	b.n	8005a56 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a52:	2300      	movs	r3, #0
 8005a54:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005a56:	e047      	b.n	8005ae8 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	9300      	str	r3, [sp, #0]
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	2120      	movs	r1, #32
 8005a62:	68f8      	ldr	r0, [r7, #12]
 8005a64:	f000 f850 	bl	8005b08 <UART_WaitOnFlagUntilTimeout>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d005      	beq.n	8005a7a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2220      	movs	r2, #32
 8005a72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e042      	b.n	8005b00 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d10c      	bne.n	8005a9a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	3302      	adds	r3, #2
 8005a96:	61bb      	str	r3, [r7, #24]
 8005a98:	e01f      	b.n	8005ada <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005aa2:	d007      	beq.n	8005ab4 <HAL_UART_Receive+0xda>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d10a      	bne.n	8005ac2 <HAL_UART_Receive+0xe8>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d106      	bne.n	8005ac2 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	b2da      	uxtb	r2, r3
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	701a      	strb	r2, [r3, #0]
 8005ac0:	e008      	b.n	8005ad4 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ace:	b2da      	uxtb	r2, r3
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1b2      	bne.n	8005a58 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2220      	movs	r2, #32
 8005af6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8005afa:	2300      	movs	r3, #0
 8005afc:	e000      	b.n	8005b00 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005afe:	2302      	movs	r3, #2
  }
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3720      	adds	r7, #32
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b086      	sub	sp, #24
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	603b      	str	r3, [r7, #0]
 8005b14:	4613      	mov	r3, r2
 8005b16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b18:	e03b      	b.n	8005b92 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b20:	d037      	beq.n	8005b92 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b22:	f7fd f805 	bl	8002b30 <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	6a3a      	ldr	r2, [r7, #32]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d302      	bcc.n	8005b38 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b32:	6a3b      	ldr	r3, [r7, #32]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d101      	bne.n	8005b3c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e03a      	b.n	8005bb2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	f003 0304 	and.w	r3, r3, #4
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d023      	beq.n	8005b92 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	2b80      	cmp	r3, #128	@ 0x80
 8005b4e:	d020      	beq.n	8005b92 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	2b40      	cmp	r3, #64	@ 0x40
 8005b54:	d01d      	beq.n	8005b92 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0308 	and.w	r3, r3, #8
 8005b60:	2b08      	cmp	r3, #8
 8005b62:	d116      	bne.n	8005b92 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005b64:	2300      	movs	r3, #0
 8005b66:	617b      	str	r3, [r7, #20]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	617b      	str	r3, [r7, #20]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	617b      	str	r3, [r7, #20]
 8005b78:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	f000 f81d 	bl	8005bba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2208      	movs	r2, #8
 8005b84:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e00f      	b.n	8005bb2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	68ba      	ldr	r2, [r7, #8]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	bf0c      	ite	eq
 8005ba2:	2301      	moveq	r3, #1
 8005ba4:	2300      	movne	r3, #0
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	461a      	mov	r2, r3
 8005baa:	79fb      	ldrb	r3, [r7, #7]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d0b4      	beq.n	8005b1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3718      	adds	r7, #24
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bba:	b480      	push	{r7}
 8005bbc:	b095      	sub	sp, #84	@ 0x54
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	330c      	adds	r3, #12
 8005bc8:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bcc:	e853 3f00 	ldrex	r3, [r3]
 8005bd0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	330c      	adds	r3, #12
 8005be0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005be2:	643a      	str	r2, [r7, #64]	@ 0x40
 8005be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005be8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005bea:	e841 2300 	strex	r3, r2, [r1]
 8005bee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1e5      	bne.n	8005bc2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	3314      	adds	r3, #20
 8005bfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfe:	6a3b      	ldr	r3, [r7, #32]
 8005c00:	e853 3f00 	ldrex	r3, [r3]
 8005c04:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	f023 0301 	bic.w	r3, r3, #1
 8005c0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	3314      	adds	r3, #20
 8005c14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c18:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c1e:	e841 2300 	strex	r3, r2, [r1]
 8005c22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1e5      	bne.n	8005bf6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d119      	bne.n	8005c66 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	330c      	adds	r3, #12
 8005c38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	e853 3f00 	ldrex	r3, [r3]
 8005c40:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	f023 0310 	bic.w	r3, r3, #16
 8005c48:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	330c      	adds	r3, #12
 8005c50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c52:	61ba      	str	r2, [r7, #24]
 8005c54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c56:	6979      	ldr	r1, [r7, #20]
 8005c58:	69ba      	ldr	r2, [r7, #24]
 8005c5a:	e841 2300 	strex	r3, r2, [r1]
 8005c5e:	613b      	str	r3, [r7, #16]
   return(result);
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1e5      	bne.n	8005c32 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2220      	movs	r2, #32
 8005c6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005c74:	bf00      	nop
 8005c76:	3754      	adds	r7, #84	@ 0x54
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bc80      	pop	{r7}
 8005c7c:	4770      	bx	lr
	...

08005c80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	68da      	ldr	r2, [r3, #12]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	430a      	orrs	r2, r1
 8005c9c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	689a      	ldr	r2, [r3, #8]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	431a      	orrs	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	695b      	ldr	r3, [r3, #20]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005cba:	f023 030c 	bic.w	r3, r3, #12
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	6812      	ldr	r2, [r2, #0]
 8005cc2:	68b9      	ldr	r1, [r7, #8]
 8005cc4:	430b      	orrs	r3, r1
 8005cc6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	699a      	ldr	r2, [r3, #24]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a2c      	ldr	r2, [pc, #176]	@ (8005d94 <UART_SetConfig+0x114>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d103      	bne.n	8005cf0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005ce8:	f7ff fafc 	bl	80052e4 <HAL_RCC_GetPCLK2Freq>
 8005cec:	60f8      	str	r0, [r7, #12]
 8005cee:	e002      	b.n	8005cf6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005cf0:	f7ff fae4 	bl	80052bc <HAL_RCC_GetPCLK1Freq>
 8005cf4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	4413      	add	r3, r2
 8005cfe:	009a      	lsls	r2, r3, #2
 8005d00:	441a      	add	r2, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d0c:	4a22      	ldr	r2, [pc, #136]	@ (8005d98 <UART_SetConfig+0x118>)
 8005d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d12:	095b      	lsrs	r3, r3, #5
 8005d14:	0119      	lsls	r1, r3, #4
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	4413      	add	r3, r2
 8005d1e:	009a      	lsls	r2, r3, #2
 8005d20:	441a      	add	r2, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d2c:	4b1a      	ldr	r3, [pc, #104]	@ (8005d98 <UART_SetConfig+0x118>)
 8005d2e:	fba3 0302 	umull	r0, r3, r3, r2
 8005d32:	095b      	lsrs	r3, r3, #5
 8005d34:	2064      	movs	r0, #100	@ 0x64
 8005d36:	fb00 f303 	mul.w	r3, r0, r3
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	011b      	lsls	r3, r3, #4
 8005d3e:	3332      	adds	r3, #50	@ 0x32
 8005d40:	4a15      	ldr	r2, [pc, #84]	@ (8005d98 <UART_SetConfig+0x118>)
 8005d42:	fba2 2303 	umull	r2, r3, r2, r3
 8005d46:	095b      	lsrs	r3, r3, #5
 8005d48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d4c:	4419      	add	r1, r3
 8005d4e:	68fa      	ldr	r2, [r7, #12]
 8005d50:	4613      	mov	r3, r2
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	4413      	add	r3, r2
 8005d56:	009a      	lsls	r2, r3, #2
 8005d58:	441a      	add	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d64:	4b0c      	ldr	r3, [pc, #48]	@ (8005d98 <UART_SetConfig+0x118>)
 8005d66:	fba3 0302 	umull	r0, r3, r3, r2
 8005d6a:	095b      	lsrs	r3, r3, #5
 8005d6c:	2064      	movs	r0, #100	@ 0x64
 8005d6e:	fb00 f303 	mul.w	r3, r0, r3
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	011b      	lsls	r3, r3, #4
 8005d76:	3332      	adds	r3, #50	@ 0x32
 8005d78:	4a07      	ldr	r2, [pc, #28]	@ (8005d98 <UART_SetConfig+0x118>)
 8005d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d7e:	095b      	lsrs	r3, r3, #5
 8005d80:	f003 020f 	and.w	r2, r3, #15
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	440a      	add	r2, r1
 8005d8a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005d8c:	bf00      	nop
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	40013800 	.word	0x40013800
 8005d98:	51eb851f 	.word	0x51eb851f

08005d9c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	4603      	mov	r3, r0
 8005da4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005da6:	2300      	movs	r3, #0
 8005da8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005daa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005dae:	2b84      	cmp	r3, #132	@ 0x84
 8005db0:	d005      	beq.n	8005dbe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005db2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	4413      	add	r3, r2
 8005dba:	3303      	adds	r3, #3
 8005dbc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3714      	adds	r7, #20
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bc80      	pop	{r7}
 8005dc8:	4770      	bx	lr

08005dca <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005dce:	f000 faf7 	bl	80063c0 <vTaskStartScheduler>
  
  return osOK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dda:	b089      	sub	sp, #36	@ 0x24
 8005ddc:	af04      	add	r7, sp, #16
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d020      	beq.n	8005e2c <osThreadCreate+0x54>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d01c      	beq.n	8005e2c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685c      	ldr	r4, [r3, #4]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	691e      	ldr	r6, [r3, #16]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7ff ffc9 	bl	8005d9c <makeFreeRtosPriority>
 8005e0a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	695b      	ldr	r3, [r3, #20]
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e14:	9202      	str	r2, [sp, #8]
 8005e16:	9301      	str	r3, [sp, #4]
 8005e18:	9100      	str	r1, [sp, #0]
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	4632      	mov	r2, r6
 8005e1e:	4629      	mov	r1, r5
 8005e20:	4620      	mov	r0, r4
 8005e22:	f000 f8e8 	bl	8005ff6 <xTaskCreateStatic>
 8005e26:	4603      	mov	r3, r0
 8005e28:	60fb      	str	r3, [r7, #12]
 8005e2a:	e01c      	b.n	8005e66 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685c      	ldr	r4, [r3, #4]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e38:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7ff ffab 	bl	8005d9c <makeFreeRtosPriority>
 8005e46:	4602      	mov	r2, r0
 8005e48:	f107 030c 	add.w	r3, r7, #12
 8005e4c:	9301      	str	r3, [sp, #4]
 8005e4e:	9200      	str	r2, [sp, #0]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	4632      	mov	r2, r6
 8005e54:	4629      	mov	r1, r5
 8005e56:	4620      	mov	r0, r4
 8005e58:	f000 f92d 	bl	80060b6 <xTaskCreate>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d001      	beq.n	8005e66 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005e62:	2300      	movs	r3, #0
 8005e64:	e000      	b.n	8005e68 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005e66:	68fb      	ldr	r3, [r7, #12]
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3714      	adds	r7, #20
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e70 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d001      	beq.n	8005e86 <osDelay+0x16>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	e000      	b.n	8005e88 <osDelay+0x18>
 8005e86:	2301      	movs	r3, #1
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f000 fa63 	bl	8006354 <vTaskDelay>
  
  return osOK;
 8005e8e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f103 0208 	add.w	r2, r3, #8
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f04f 32ff 	mov.w	r2, #4294967295
 8005eb0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f103 0208 	add.w	r2, r3, #8
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f103 0208 	add.w	r2, r3, #8
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bc80      	pop	{r7}
 8005ed4:	4770      	bx	lr

08005ed6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005ed6:	b480      	push	{r7}
 8005ed8:	b083      	sub	sp, #12
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005ee4:	bf00      	nop
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bc80      	pop	{r7}
 8005eec:	4770      	bx	lr

08005eee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b085      	sub	sp, #20
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
 8005ef6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	689a      	ldr	r2, [r3, #8]
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	683a      	ldr	r2, [r7, #0]
 8005f12:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	683a      	ldr	r2, [r7, #0]
 8005f18:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	1c5a      	adds	r2, r3, #1
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	601a      	str	r2, [r3, #0]
}
 8005f2a:	bf00      	nop
 8005f2c:	3714      	adds	r7, #20
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bc80      	pop	{r7}
 8005f32:	4770      	bx	lr

08005f34 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f34:	b480      	push	{r7}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f4a:	d103      	bne.n	8005f54 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	60fb      	str	r3, [r7, #12]
 8005f52:	e00c      	b.n	8005f6e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	3308      	adds	r3, #8
 8005f58:	60fb      	str	r3, [r7, #12]
 8005f5a:	e002      	b.n	8005f62 <vListInsert+0x2e>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	60fb      	str	r3, [r7, #12]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68ba      	ldr	r2, [r7, #8]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d2f6      	bcs.n	8005f5c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	685a      	ldr	r2, [r3, #4]
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	683a      	ldr	r2, [r7, #0]
 8005f7c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	683a      	ldr	r2, [r7, #0]
 8005f88:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	1c5a      	adds	r2, r3, #1
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	601a      	str	r2, [r3, #0]
}
 8005f9a:	bf00      	nop
 8005f9c:	3714      	adds	r7, #20
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bc80      	pop	{r7}
 8005fa2:	4770      	bx	lr

08005fa4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	6892      	ldr	r2, [r2, #8]
 8005fba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	6852      	ldr	r2, [r2, #4]
 8005fc4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d103      	bne.n	8005fd8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	689a      	ldr	r2, [r3, #8]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	1e5a      	subs	r2, r3, #1
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3714      	adds	r7, #20
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bc80      	pop	{r7}
 8005ff4:	4770      	bx	lr

08005ff6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b08e      	sub	sp, #56	@ 0x38
 8005ffa:	af04      	add	r7, sp, #16
 8005ffc:	60f8      	str	r0, [r7, #12]
 8005ffe:	60b9      	str	r1, [r7, #8]
 8006000:	607a      	str	r2, [r7, #4]
 8006002:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006004:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10b      	bne.n	8006022 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800600a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800600e:	f383 8811 	msr	BASEPRI, r3
 8006012:	f3bf 8f6f 	isb	sy
 8006016:	f3bf 8f4f 	dsb	sy
 800601a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800601c:	bf00      	nop
 800601e:	bf00      	nop
 8006020:	e7fd      	b.n	800601e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10b      	bne.n	8006040 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800602c:	f383 8811 	msr	BASEPRI, r3
 8006030:	f3bf 8f6f 	isb	sy
 8006034:	f3bf 8f4f 	dsb	sy
 8006038:	61fb      	str	r3, [r7, #28]
}
 800603a:	bf00      	nop
 800603c:	bf00      	nop
 800603e:	e7fd      	b.n	800603c <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006040:	23a0      	movs	r3, #160	@ 0xa0
 8006042:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	2ba0      	cmp	r3, #160	@ 0xa0
 8006048:	d00b      	beq.n	8006062 <xTaskCreateStatic+0x6c>
	__asm volatile
 800604a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800604e:	f383 8811 	msr	BASEPRI, r3
 8006052:	f3bf 8f6f 	isb	sy
 8006056:	f3bf 8f4f 	dsb	sy
 800605a:	61bb      	str	r3, [r7, #24]
}
 800605c:	bf00      	nop
 800605e:	bf00      	nop
 8006060:	e7fd      	b.n	800605e <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006062:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006066:	2b00      	cmp	r3, #0
 8006068:	d01e      	beq.n	80060a8 <xTaskCreateStatic+0xb2>
 800606a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800606c:	2b00      	cmp	r3, #0
 800606e:	d01b      	beq.n	80060a8 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006072:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006076:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006078:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800607a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800607c:	2202      	movs	r2, #2
 800607e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006082:	2300      	movs	r3, #0
 8006084:	9303      	str	r3, [sp, #12]
 8006086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006088:	9302      	str	r3, [sp, #8]
 800608a:	f107 0314 	add.w	r3, r7, #20
 800608e:	9301      	str	r3, [sp, #4]
 8006090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006092:	9300      	str	r3, [sp, #0]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	68b9      	ldr	r1, [r7, #8]
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f000 f850 	bl	8006140 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80060a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80060a2:	f000 f8ed 	bl	8006280 <prvAddNewTaskToReadyList>
 80060a6:	e001      	b.n	80060ac <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80060a8:	2300      	movs	r3, #0
 80060aa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80060ac:	697b      	ldr	r3, [r7, #20]
	}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3728      	adds	r7, #40	@ 0x28
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b08c      	sub	sp, #48	@ 0x30
 80060ba:	af04      	add	r7, sp, #16
 80060bc:	60f8      	str	r0, [r7, #12]
 80060be:	60b9      	str	r1, [r7, #8]
 80060c0:	603b      	str	r3, [r7, #0]
 80060c2:	4613      	mov	r3, r2
 80060c4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80060c6:	88fb      	ldrh	r3, [r7, #6]
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	4618      	mov	r0, r3
 80060cc:	f000 fea0 	bl	8006e10 <pvPortMalloc>
 80060d0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d00e      	beq.n	80060f6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80060d8:	20a0      	movs	r0, #160	@ 0xa0
 80060da:	f000 fe99 	bl	8006e10 <pvPortMalloc>
 80060de:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d003      	beq.n	80060ee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80060ec:	e005      	b.n	80060fa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80060ee:	6978      	ldr	r0, [r7, #20]
 80060f0:	f000 ff5c 	bl	8006fac <vPortFree>
 80060f4:	e001      	b.n	80060fa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80060f6:	2300      	movs	r3, #0
 80060f8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d017      	beq.n	8006130 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	2200      	movs	r2, #0
 8006104:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006108:	88fa      	ldrh	r2, [r7, #6]
 800610a:	2300      	movs	r3, #0
 800610c:	9303      	str	r3, [sp, #12]
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	9302      	str	r3, [sp, #8]
 8006112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006114:	9301      	str	r3, [sp, #4]
 8006116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006118:	9300      	str	r3, [sp, #0]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	68b9      	ldr	r1, [r7, #8]
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f000 f80e 	bl	8006140 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006124:	69f8      	ldr	r0, [r7, #28]
 8006126:	f000 f8ab 	bl	8006280 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800612a:	2301      	movs	r3, #1
 800612c:	61bb      	str	r3, [r7, #24]
 800612e:	e002      	b.n	8006136 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006130:	f04f 33ff 	mov.w	r3, #4294967295
 8006134:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006136:	69bb      	ldr	r3, [r7, #24]
	}
 8006138:	4618      	mov	r0, r3
 800613a:	3720      	adds	r7, #32
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b088      	sub	sp, #32
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]
 800614c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800614e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006150:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006158:	3b01      	subs	r3, #1
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	4413      	add	r3, r2
 800615e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	f023 0307 	bic.w	r3, r3, #7
 8006166:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	f003 0307 	and.w	r3, r3, #7
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00b      	beq.n	800618a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8006172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006176:	f383 8811 	msr	BASEPRI, r3
 800617a:	f3bf 8f6f 	isb	sy
 800617e:	f3bf 8f4f 	dsb	sy
 8006182:	617b      	str	r3, [r7, #20]
}
 8006184:	bf00      	nop
 8006186:	bf00      	nop
 8006188:	e7fd      	b.n	8006186 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d01f      	beq.n	80061d0 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006190:	2300      	movs	r3, #0
 8006192:	61fb      	str	r3, [r7, #28]
 8006194:	e012      	b.n	80061bc <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006196:	68ba      	ldr	r2, [r7, #8]
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	4413      	add	r3, r2
 800619c:	7819      	ldrb	r1, [r3, #0]
 800619e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	4413      	add	r3, r2
 80061a4:	3334      	adds	r3, #52	@ 0x34
 80061a6:	460a      	mov	r2, r1
 80061a8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	4413      	add	r3, r2
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d006      	beq.n	80061c4 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	3301      	adds	r3, #1
 80061ba:	61fb      	str	r3, [r7, #28]
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	2b0f      	cmp	r3, #15
 80061c0:	d9e9      	bls.n	8006196 <prvInitialiseNewTask+0x56>
 80061c2:	e000      	b.n	80061c6 <prvInitialiseNewTask+0x86>
			{
				break;
 80061c4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80061c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80061ce:	e003      	b.n	80061d8 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80061d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80061d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061da:	2b06      	cmp	r3, #6
 80061dc:	d901      	bls.n	80061e2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80061de:	2306      	movs	r3, #6
 80061e0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80061e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061e6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80061e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061ec:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80061ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f0:	2200      	movs	r2, #0
 80061f2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80061f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f6:	3304      	adds	r3, #4
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7ff fe6c 	bl	8005ed6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80061fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006200:	3318      	adds	r3, #24
 8006202:	4618      	mov	r0, r3
 8006204:	f7ff fe67 	bl	8005ed6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800620a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800620c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800620e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006210:	f1c3 0207 	rsb	r2, r3, #7
 8006214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006216:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800621a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800621c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800621e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006220:	2200      	movs	r2, #0
 8006222:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006228:	2200      	movs	r2, #0
 800622a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800622e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006230:	334c      	adds	r3, #76	@ 0x4c
 8006232:	224c      	movs	r2, #76	@ 0x4c
 8006234:	2100      	movs	r1, #0
 8006236:	4618      	mov	r0, r3
 8006238:	f001 fdf5 	bl	8007e26 <memset>
 800623c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800623e:	4a0d      	ldr	r2, [pc, #52]	@ (8006274 <prvInitialiseNewTask+0x134>)
 8006240:	651a      	str	r2, [r3, #80]	@ 0x50
 8006242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006244:	4a0c      	ldr	r2, [pc, #48]	@ (8006278 <prvInitialiseNewTask+0x138>)
 8006246:	655a      	str	r2, [r3, #84]	@ 0x54
 8006248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800624a:	4a0c      	ldr	r2, [pc, #48]	@ (800627c <prvInitialiseNewTask+0x13c>)
 800624c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800624e:	683a      	ldr	r2, [r7, #0]
 8006250:	68f9      	ldr	r1, [r7, #12]
 8006252:	69b8      	ldr	r0, [r7, #24]
 8006254:	f000 fc28 	bl	8006aa8 <pxPortInitialiseStack>
 8006258:	4602      	mov	r2, r0
 800625a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800625c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800625e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006260:	2b00      	cmp	r3, #0
 8006262:	d002      	beq.n	800626a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006266:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006268:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800626a:	bf00      	nop
 800626c:	3720      	adds	r7, #32
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	20004868 	.word	0x20004868
 8006278:	200048d0 	.word	0x200048d0
 800627c:	20004938 	.word	0x20004938

08006280 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006288:	f000 fd00 	bl	8006c8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800628c:	4b2a      	ldr	r3, [pc, #168]	@ (8006338 <prvAddNewTaskToReadyList+0xb8>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	3301      	adds	r3, #1
 8006292:	4a29      	ldr	r2, [pc, #164]	@ (8006338 <prvAddNewTaskToReadyList+0xb8>)
 8006294:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006296:	4b29      	ldr	r3, [pc, #164]	@ (800633c <prvAddNewTaskToReadyList+0xbc>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d109      	bne.n	80062b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800629e:	4a27      	ldr	r2, [pc, #156]	@ (800633c <prvAddNewTaskToReadyList+0xbc>)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80062a4:	4b24      	ldr	r3, [pc, #144]	@ (8006338 <prvAddNewTaskToReadyList+0xb8>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d110      	bne.n	80062ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80062ac:	f000 fad2 	bl	8006854 <prvInitialiseTaskLists>
 80062b0:	e00d      	b.n	80062ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80062b2:	4b23      	ldr	r3, [pc, #140]	@ (8006340 <prvAddNewTaskToReadyList+0xc0>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d109      	bne.n	80062ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80062ba:	4b20      	ldr	r3, [pc, #128]	@ (800633c <prvAddNewTaskToReadyList+0xbc>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d802      	bhi.n	80062ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80062c8:	4a1c      	ldr	r2, [pc, #112]	@ (800633c <prvAddNewTaskToReadyList+0xbc>)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80062ce:	4b1d      	ldr	r3, [pc, #116]	@ (8006344 <prvAddNewTaskToReadyList+0xc4>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	3301      	adds	r3, #1
 80062d4:	4a1b      	ldr	r2, [pc, #108]	@ (8006344 <prvAddNewTaskToReadyList+0xc4>)
 80062d6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062dc:	2201      	movs	r2, #1
 80062de:	409a      	lsls	r2, r3
 80062e0:	4b19      	ldr	r3, [pc, #100]	@ (8006348 <prvAddNewTaskToReadyList+0xc8>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	4a18      	ldr	r2, [pc, #96]	@ (8006348 <prvAddNewTaskToReadyList+0xc8>)
 80062e8:	6013      	str	r3, [r2, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062ee:	4613      	mov	r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	4413      	add	r3, r2
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	4a15      	ldr	r2, [pc, #84]	@ (800634c <prvAddNewTaskToReadyList+0xcc>)
 80062f8:	441a      	add	r2, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	3304      	adds	r3, #4
 80062fe:	4619      	mov	r1, r3
 8006300:	4610      	mov	r0, r2
 8006302:	f7ff fdf4 	bl	8005eee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006306:	f000 fcf1 	bl	8006cec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800630a:	4b0d      	ldr	r3, [pc, #52]	@ (8006340 <prvAddNewTaskToReadyList+0xc0>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00e      	beq.n	8006330 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006312:	4b0a      	ldr	r3, [pc, #40]	@ (800633c <prvAddNewTaskToReadyList+0xbc>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800631c:	429a      	cmp	r2, r3
 800631e:	d207      	bcs.n	8006330 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006320:	4b0b      	ldr	r3, [pc, #44]	@ (8006350 <prvAddNewTaskToReadyList+0xd0>)
 8006322:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006326:	601a      	str	r2, [r3, #0]
 8006328:	f3bf 8f4f 	dsb	sy
 800632c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006330:	bf00      	nop
 8006332:	3708      	adds	r7, #8
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}
 8006338:	20000814 	.word	0x20000814
 800633c:	20000714 	.word	0x20000714
 8006340:	20000820 	.word	0x20000820
 8006344:	20000830 	.word	0x20000830
 8006348:	2000081c 	.word	0x2000081c
 800634c:	20000718 	.word	0x20000718
 8006350:	e000ed04 	.word	0xe000ed04

08006354 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800635c:	2300      	movs	r3, #0
 800635e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d018      	beq.n	8006398 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006366:	4b14      	ldr	r3, [pc, #80]	@ (80063b8 <vTaskDelay+0x64>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00b      	beq.n	8006386 <vTaskDelay+0x32>
	__asm volatile
 800636e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006372:	f383 8811 	msr	BASEPRI, r3
 8006376:	f3bf 8f6f 	isb	sy
 800637a:	f3bf 8f4f 	dsb	sy
 800637e:	60bb      	str	r3, [r7, #8]
}
 8006380:	bf00      	nop
 8006382:	bf00      	nop
 8006384:	e7fd      	b.n	8006382 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006386:	f000 f885 	bl	8006494 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800638a:	2100      	movs	r1, #0
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f000 fb25 	bl	80069dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006392:	f000 f88d 	bl	80064b0 <xTaskResumeAll>
 8006396:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d107      	bne.n	80063ae <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800639e:	4b07      	ldr	r3, [pc, #28]	@ (80063bc <vTaskDelay+0x68>)
 80063a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063a4:	601a      	str	r2, [r3, #0]
 80063a6:	f3bf 8f4f 	dsb	sy
 80063aa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80063ae:	bf00      	nop
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	2000083c 	.word	0x2000083c
 80063bc:	e000ed04 	.word	0xe000ed04

080063c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b08a      	sub	sp, #40	@ 0x28
 80063c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80063c6:	2300      	movs	r3, #0
 80063c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80063ca:	2300      	movs	r3, #0
 80063cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80063ce:	463a      	mov	r2, r7
 80063d0:	1d39      	adds	r1, r7, #4
 80063d2:	f107 0308 	add.w	r3, r7, #8
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7fa ff52 	bl	8001280 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80063dc:	6839      	ldr	r1, [r7, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	9202      	str	r2, [sp, #8]
 80063e4:	9301      	str	r3, [sp, #4]
 80063e6:	2300      	movs	r3, #0
 80063e8:	9300      	str	r3, [sp, #0]
 80063ea:	2300      	movs	r3, #0
 80063ec:	460a      	mov	r2, r1
 80063ee:	4921      	ldr	r1, [pc, #132]	@ (8006474 <vTaskStartScheduler+0xb4>)
 80063f0:	4821      	ldr	r0, [pc, #132]	@ (8006478 <vTaskStartScheduler+0xb8>)
 80063f2:	f7ff fe00 	bl	8005ff6 <xTaskCreateStatic>
 80063f6:	4603      	mov	r3, r0
 80063f8:	4a20      	ldr	r2, [pc, #128]	@ (800647c <vTaskStartScheduler+0xbc>)
 80063fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80063fc:	4b1f      	ldr	r3, [pc, #124]	@ (800647c <vTaskStartScheduler+0xbc>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d002      	beq.n	800640a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006404:	2301      	movs	r3, #1
 8006406:	617b      	str	r3, [r7, #20]
 8006408:	e001      	b.n	800640e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800640a:	2300      	movs	r3, #0
 800640c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d11b      	bne.n	800644c <vTaskStartScheduler+0x8c>
	__asm volatile
 8006414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006418:	f383 8811 	msr	BASEPRI, r3
 800641c:	f3bf 8f6f 	isb	sy
 8006420:	f3bf 8f4f 	dsb	sy
 8006424:	613b      	str	r3, [r7, #16]
}
 8006426:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006428:	4b15      	ldr	r3, [pc, #84]	@ (8006480 <vTaskStartScheduler+0xc0>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	334c      	adds	r3, #76	@ 0x4c
 800642e:	4a15      	ldr	r2, [pc, #84]	@ (8006484 <vTaskStartScheduler+0xc4>)
 8006430:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006432:	4b15      	ldr	r3, [pc, #84]	@ (8006488 <vTaskStartScheduler+0xc8>)
 8006434:	f04f 32ff 	mov.w	r2, #4294967295
 8006438:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800643a:	4b14      	ldr	r3, [pc, #80]	@ (800648c <vTaskStartScheduler+0xcc>)
 800643c:	2201      	movs	r2, #1
 800643e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006440:	4b13      	ldr	r3, [pc, #76]	@ (8006490 <vTaskStartScheduler+0xd0>)
 8006442:	2200      	movs	r2, #0
 8006444:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006446:	f000 fbaf 	bl	8006ba8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800644a:	e00f      	b.n	800646c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006452:	d10b      	bne.n	800646c <vTaskStartScheduler+0xac>
	__asm volatile
 8006454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006458:	f383 8811 	msr	BASEPRI, r3
 800645c:	f3bf 8f6f 	isb	sy
 8006460:	f3bf 8f4f 	dsb	sy
 8006464:	60fb      	str	r3, [r7, #12]
}
 8006466:	bf00      	nop
 8006468:	bf00      	nop
 800646a:	e7fd      	b.n	8006468 <vTaskStartScheduler+0xa8>
}
 800646c:	bf00      	nop
 800646e:	3718      	adds	r7, #24
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}
 8006474:	0800a1e8 	.word	0x0800a1e8
 8006478:	08006825 	.word	0x08006825
 800647c:	20000838 	.word	0x20000838
 8006480:	20000714 	.word	0x20000714
 8006484:	200000a8 	.word	0x200000a8
 8006488:	20000834 	.word	0x20000834
 800648c:	20000820 	.word	0x20000820
 8006490:	20000818 	.word	0x20000818

08006494 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006494:	b480      	push	{r7}
 8006496:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006498:	4b04      	ldr	r3, [pc, #16]	@ (80064ac <vTaskSuspendAll+0x18>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	3301      	adds	r3, #1
 800649e:	4a03      	ldr	r2, [pc, #12]	@ (80064ac <vTaskSuspendAll+0x18>)
 80064a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80064a2:	bf00      	nop
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bc80      	pop	{r7}
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	2000083c 	.word	0x2000083c

080064b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80064b6:	2300      	movs	r3, #0
 80064b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80064ba:	2300      	movs	r3, #0
 80064bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80064be:	4b42      	ldr	r3, [pc, #264]	@ (80065c8 <xTaskResumeAll+0x118>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d10b      	bne.n	80064de <xTaskResumeAll+0x2e>
	__asm volatile
 80064c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ca:	f383 8811 	msr	BASEPRI, r3
 80064ce:	f3bf 8f6f 	isb	sy
 80064d2:	f3bf 8f4f 	dsb	sy
 80064d6:	603b      	str	r3, [r7, #0]
}
 80064d8:	bf00      	nop
 80064da:	bf00      	nop
 80064dc:	e7fd      	b.n	80064da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80064de:	f000 fbd5 	bl	8006c8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80064e2:	4b39      	ldr	r3, [pc, #228]	@ (80065c8 <xTaskResumeAll+0x118>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	3b01      	subs	r3, #1
 80064e8:	4a37      	ldr	r2, [pc, #220]	@ (80065c8 <xTaskResumeAll+0x118>)
 80064ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064ec:	4b36      	ldr	r3, [pc, #216]	@ (80065c8 <xTaskResumeAll+0x118>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d161      	bne.n	80065b8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80064f4:	4b35      	ldr	r3, [pc, #212]	@ (80065cc <xTaskResumeAll+0x11c>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d05d      	beq.n	80065b8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064fc:	e02e      	b.n	800655c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064fe:	4b34      	ldr	r3, [pc, #208]	@ (80065d0 <xTaskResumeAll+0x120>)
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	3318      	adds	r3, #24
 800650a:	4618      	mov	r0, r3
 800650c:	f7ff fd4a 	bl	8005fa4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	3304      	adds	r3, #4
 8006514:	4618      	mov	r0, r3
 8006516:	f7ff fd45 	bl	8005fa4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800651e:	2201      	movs	r2, #1
 8006520:	409a      	lsls	r2, r3
 8006522:	4b2c      	ldr	r3, [pc, #176]	@ (80065d4 <xTaskResumeAll+0x124>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4313      	orrs	r3, r2
 8006528:	4a2a      	ldr	r2, [pc, #168]	@ (80065d4 <xTaskResumeAll+0x124>)
 800652a:	6013      	str	r3, [r2, #0]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006530:	4613      	mov	r3, r2
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	4413      	add	r3, r2
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	4a27      	ldr	r2, [pc, #156]	@ (80065d8 <xTaskResumeAll+0x128>)
 800653a:	441a      	add	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	3304      	adds	r3, #4
 8006540:	4619      	mov	r1, r3
 8006542:	4610      	mov	r0, r2
 8006544:	f7ff fcd3 	bl	8005eee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800654c:	4b23      	ldr	r3, [pc, #140]	@ (80065dc <xTaskResumeAll+0x12c>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006552:	429a      	cmp	r2, r3
 8006554:	d302      	bcc.n	800655c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006556:	4b22      	ldr	r3, [pc, #136]	@ (80065e0 <xTaskResumeAll+0x130>)
 8006558:	2201      	movs	r2, #1
 800655a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800655c:	4b1c      	ldr	r3, [pc, #112]	@ (80065d0 <xTaskResumeAll+0x120>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d1cc      	bne.n	80064fe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d001      	beq.n	800656e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800656a:	f000 fa17 	bl	800699c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800656e:	4b1d      	ldr	r3, [pc, #116]	@ (80065e4 <xTaskResumeAll+0x134>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d010      	beq.n	800659c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800657a:	f000 f837 	bl	80065ec <xTaskIncrementTick>
 800657e:	4603      	mov	r3, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d002      	beq.n	800658a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006584:	4b16      	ldr	r3, [pc, #88]	@ (80065e0 <xTaskResumeAll+0x130>)
 8006586:	2201      	movs	r2, #1
 8006588:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	3b01      	subs	r3, #1
 800658e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d1f1      	bne.n	800657a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006596:	4b13      	ldr	r3, [pc, #76]	@ (80065e4 <xTaskResumeAll+0x134>)
 8006598:	2200      	movs	r2, #0
 800659a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800659c:	4b10      	ldr	r3, [pc, #64]	@ (80065e0 <xTaskResumeAll+0x130>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d009      	beq.n	80065b8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80065a4:	2301      	movs	r3, #1
 80065a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80065a8:	4b0f      	ldr	r3, [pc, #60]	@ (80065e8 <xTaskResumeAll+0x138>)
 80065aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065ae:	601a      	str	r2, [r3, #0]
 80065b0:	f3bf 8f4f 	dsb	sy
 80065b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80065b8:	f000 fb98 	bl	8006cec <vPortExitCritical>

	return xAlreadyYielded;
 80065bc:	68bb      	ldr	r3, [r7, #8]
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	2000083c 	.word	0x2000083c
 80065cc:	20000814 	.word	0x20000814
 80065d0:	200007d4 	.word	0x200007d4
 80065d4:	2000081c 	.word	0x2000081c
 80065d8:	20000718 	.word	0x20000718
 80065dc:	20000714 	.word	0x20000714
 80065e0:	20000828 	.word	0x20000828
 80065e4:	20000824 	.word	0x20000824
 80065e8:	e000ed04 	.word	0xe000ed04

080065ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b086      	sub	sp, #24
 80065f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80065f2:	2300      	movs	r3, #0
 80065f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065f6:	4b4f      	ldr	r3, [pc, #316]	@ (8006734 <xTaskIncrementTick+0x148>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f040 808f 	bne.w	800671e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006600:	4b4d      	ldr	r3, [pc, #308]	@ (8006738 <xTaskIncrementTick+0x14c>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	3301      	adds	r3, #1
 8006606:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006608:	4a4b      	ldr	r2, [pc, #300]	@ (8006738 <xTaskIncrementTick+0x14c>)
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d121      	bne.n	8006658 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006614:	4b49      	ldr	r3, [pc, #292]	@ (800673c <xTaskIncrementTick+0x150>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00b      	beq.n	8006636 <xTaskIncrementTick+0x4a>
	__asm volatile
 800661e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006622:	f383 8811 	msr	BASEPRI, r3
 8006626:	f3bf 8f6f 	isb	sy
 800662a:	f3bf 8f4f 	dsb	sy
 800662e:	603b      	str	r3, [r7, #0]
}
 8006630:	bf00      	nop
 8006632:	bf00      	nop
 8006634:	e7fd      	b.n	8006632 <xTaskIncrementTick+0x46>
 8006636:	4b41      	ldr	r3, [pc, #260]	@ (800673c <xTaskIncrementTick+0x150>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	60fb      	str	r3, [r7, #12]
 800663c:	4b40      	ldr	r3, [pc, #256]	@ (8006740 <xTaskIncrementTick+0x154>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a3e      	ldr	r2, [pc, #248]	@ (800673c <xTaskIncrementTick+0x150>)
 8006642:	6013      	str	r3, [r2, #0]
 8006644:	4a3e      	ldr	r2, [pc, #248]	@ (8006740 <xTaskIncrementTick+0x154>)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6013      	str	r3, [r2, #0]
 800664a:	4b3e      	ldr	r3, [pc, #248]	@ (8006744 <xTaskIncrementTick+0x158>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	3301      	adds	r3, #1
 8006650:	4a3c      	ldr	r2, [pc, #240]	@ (8006744 <xTaskIncrementTick+0x158>)
 8006652:	6013      	str	r3, [r2, #0]
 8006654:	f000 f9a2 	bl	800699c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006658:	4b3b      	ldr	r3, [pc, #236]	@ (8006748 <xTaskIncrementTick+0x15c>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	693a      	ldr	r2, [r7, #16]
 800665e:	429a      	cmp	r2, r3
 8006660:	d348      	bcc.n	80066f4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006662:	4b36      	ldr	r3, [pc, #216]	@ (800673c <xTaskIncrementTick+0x150>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d104      	bne.n	8006676 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800666c:	4b36      	ldr	r3, [pc, #216]	@ (8006748 <xTaskIncrementTick+0x15c>)
 800666e:	f04f 32ff 	mov.w	r2, #4294967295
 8006672:	601a      	str	r2, [r3, #0]
					break;
 8006674:	e03e      	b.n	80066f4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006676:	4b31      	ldr	r3, [pc, #196]	@ (800673c <xTaskIncrementTick+0x150>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006686:	693a      	ldr	r2, [r7, #16]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	429a      	cmp	r2, r3
 800668c:	d203      	bcs.n	8006696 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800668e:	4a2e      	ldr	r2, [pc, #184]	@ (8006748 <xTaskIncrementTick+0x15c>)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006694:	e02e      	b.n	80066f4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	3304      	adds	r3, #4
 800669a:	4618      	mov	r0, r3
 800669c:	f7ff fc82 	bl	8005fa4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d004      	beq.n	80066b2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	3318      	adds	r3, #24
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7ff fc79 	bl	8005fa4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066b6:	2201      	movs	r2, #1
 80066b8:	409a      	lsls	r2, r3
 80066ba:	4b24      	ldr	r3, [pc, #144]	@ (800674c <xTaskIncrementTick+0x160>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4313      	orrs	r3, r2
 80066c0:	4a22      	ldr	r2, [pc, #136]	@ (800674c <xTaskIncrementTick+0x160>)
 80066c2:	6013      	str	r3, [r2, #0]
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066c8:	4613      	mov	r3, r2
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	4413      	add	r3, r2
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	4a1f      	ldr	r2, [pc, #124]	@ (8006750 <xTaskIncrementTick+0x164>)
 80066d2:	441a      	add	r2, r3
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	3304      	adds	r3, #4
 80066d8:	4619      	mov	r1, r3
 80066da:	4610      	mov	r0, r2
 80066dc:	f7ff fc07 	bl	8005eee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066e4:	4b1b      	ldr	r3, [pc, #108]	@ (8006754 <xTaskIncrementTick+0x168>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d3b9      	bcc.n	8006662 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80066ee:	2301      	movs	r3, #1
 80066f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066f2:	e7b6      	b.n	8006662 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80066f4:	4b17      	ldr	r3, [pc, #92]	@ (8006754 <xTaskIncrementTick+0x168>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066fa:	4915      	ldr	r1, [pc, #84]	@ (8006750 <xTaskIncrementTick+0x164>)
 80066fc:	4613      	mov	r3, r2
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	4413      	add	r3, r2
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	440b      	add	r3, r1
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2b01      	cmp	r3, #1
 800670a:	d901      	bls.n	8006710 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800670c:	2301      	movs	r3, #1
 800670e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006710:	4b11      	ldr	r3, [pc, #68]	@ (8006758 <xTaskIncrementTick+0x16c>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d007      	beq.n	8006728 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006718:	2301      	movs	r3, #1
 800671a:	617b      	str	r3, [r7, #20]
 800671c:	e004      	b.n	8006728 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800671e:	4b0f      	ldr	r3, [pc, #60]	@ (800675c <xTaskIncrementTick+0x170>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	3301      	adds	r3, #1
 8006724:	4a0d      	ldr	r2, [pc, #52]	@ (800675c <xTaskIncrementTick+0x170>)
 8006726:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006728:	697b      	ldr	r3, [r7, #20]
}
 800672a:	4618      	mov	r0, r3
 800672c:	3718      	adds	r7, #24
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	2000083c 	.word	0x2000083c
 8006738:	20000818 	.word	0x20000818
 800673c:	200007cc 	.word	0x200007cc
 8006740:	200007d0 	.word	0x200007d0
 8006744:	2000082c 	.word	0x2000082c
 8006748:	20000834 	.word	0x20000834
 800674c:	2000081c 	.word	0x2000081c
 8006750:	20000718 	.word	0x20000718
 8006754:	20000714 	.word	0x20000714
 8006758:	20000828 	.word	0x20000828
 800675c:	20000824 	.word	0x20000824

08006760 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006760:	b480      	push	{r7}
 8006762:	b087      	sub	sp, #28
 8006764:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006766:	4b29      	ldr	r3, [pc, #164]	@ (800680c <vTaskSwitchContext+0xac>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d003      	beq.n	8006776 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800676e:	4b28      	ldr	r3, [pc, #160]	@ (8006810 <vTaskSwitchContext+0xb0>)
 8006770:	2201      	movs	r2, #1
 8006772:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006774:	e045      	b.n	8006802 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8006776:	4b26      	ldr	r3, [pc, #152]	@ (8006810 <vTaskSwitchContext+0xb0>)
 8006778:	2200      	movs	r2, #0
 800677a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800677c:	4b25      	ldr	r3, [pc, #148]	@ (8006814 <vTaskSwitchContext+0xb4>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	fab3 f383 	clz	r3, r3
 8006788:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800678a:	7afb      	ldrb	r3, [r7, #11]
 800678c:	f1c3 031f 	rsb	r3, r3, #31
 8006790:	617b      	str	r3, [r7, #20]
 8006792:	4921      	ldr	r1, [pc, #132]	@ (8006818 <vTaskSwitchContext+0xb8>)
 8006794:	697a      	ldr	r2, [r7, #20]
 8006796:	4613      	mov	r3, r2
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	4413      	add	r3, r2
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	440b      	add	r3, r1
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d10b      	bne.n	80067be <vTaskSwitchContext+0x5e>
	__asm volatile
 80067a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067aa:	f383 8811 	msr	BASEPRI, r3
 80067ae:	f3bf 8f6f 	isb	sy
 80067b2:	f3bf 8f4f 	dsb	sy
 80067b6:	607b      	str	r3, [r7, #4]
}
 80067b8:	bf00      	nop
 80067ba:	bf00      	nop
 80067bc:	e7fd      	b.n	80067ba <vTaskSwitchContext+0x5a>
 80067be:	697a      	ldr	r2, [r7, #20]
 80067c0:	4613      	mov	r3, r2
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	4413      	add	r3, r2
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	4a13      	ldr	r2, [pc, #76]	@ (8006818 <vTaskSwitchContext+0xb8>)
 80067ca:	4413      	add	r3, r2
 80067cc:	613b      	str	r3, [r7, #16]
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	685a      	ldr	r2, [r3, #4]
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	605a      	str	r2, [r3, #4]
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	685a      	ldr	r2, [r3, #4]
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	3308      	adds	r3, #8
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d104      	bne.n	80067ee <vTaskSwitchContext+0x8e>
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	685a      	ldr	r2, [r3, #4]
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	605a      	str	r2, [r3, #4]
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	4a09      	ldr	r2, [pc, #36]	@ (800681c <vTaskSwitchContext+0xbc>)
 80067f6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80067f8:	4b08      	ldr	r3, [pc, #32]	@ (800681c <vTaskSwitchContext+0xbc>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	334c      	adds	r3, #76	@ 0x4c
 80067fe:	4a08      	ldr	r2, [pc, #32]	@ (8006820 <vTaskSwitchContext+0xc0>)
 8006800:	6013      	str	r3, [r2, #0]
}
 8006802:	bf00      	nop
 8006804:	371c      	adds	r7, #28
 8006806:	46bd      	mov	sp, r7
 8006808:	bc80      	pop	{r7}
 800680a:	4770      	bx	lr
 800680c:	2000083c 	.word	0x2000083c
 8006810:	20000828 	.word	0x20000828
 8006814:	2000081c 	.word	0x2000081c
 8006818:	20000718 	.word	0x20000718
 800681c:	20000714 	.word	0x20000714
 8006820:	200000a8 	.word	0x200000a8

08006824 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b082      	sub	sp, #8
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800682c:	f000 f852 	bl	80068d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006830:	4b06      	ldr	r3, [pc, #24]	@ (800684c <prvIdleTask+0x28>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2b01      	cmp	r3, #1
 8006836:	d9f9      	bls.n	800682c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006838:	4b05      	ldr	r3, [pc, #20]	@ (8006850 <prvIdleTask+0x2c>)
 800683a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800683e:	601a      	str	r2, [r3, #0]
 8006840:	f3bf 8f4f 	dsb	sy
 8006844:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006848:	e7f0      	b.n	800682c <prvIdleTask+0x8>
 800684a:	bf00      	nop
 800684c:	20000718 	.word	0x20000718
 8006850:	e000ed04 	.word	0xe000ed04

08006854 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800685a:	2300      	movs	r3, #0
 800685c:	607b      	str	r3, [r7, #4]
 800685e:	e00c      	b.n	800687a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	4613      	mov	r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	4413      	add	r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	4a12      	ldr	r2, [pc, #72]	@ (80068b4 <prvInitialiseTaskLists+0x60>)
 800686c:	4413      	add	r3, r2
 800686e:	4618      	mov	r0, r3
 8006870:	f7ff fb12 	bl	8005e98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	3301      	adds	r3, #1
 8006878:	607b      	str	r3, [r7, #4]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2b06      	cmp	r3, #6
 800687e:	d9ef      	bls.n	8006860 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006880:	480d      	ldr	r0, [pc, #52]	@ (80068b8 <prvInitialiseTaskLists+0x64>)
 8006882:	f7ff fb09 	bl	8005e98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006886:	480d      	ldr	r0, [pc, #52]	@ (80068bc <prvInitialiseTaskLists+0x68>)
 8006888:	f7ff fb06 	bl	8005e98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800688c:	480c      	ldr	r0, [pc, #48]	@ (80068c0 <prvInitialiseTaskLists+0x6c>)
 800688e:	f7ff fb03 	bl	8005e98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006892:	480c      	ldr	r0, [pc, #48]	@ (80068c4 <prvInitialiseTaskLists+0x70>)
 8006894:	f7ff fb00 	bl	8005e98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006898:	480b      	ldr	r0, [pc, #44]	@ (80068c8 <prvInitialiseTaskLists+0x74>)
 800689a:	f7ff fafd 	bl	8005e98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800689e:	4b0b      	ldr	r3, [pc, #44]	@ (80068cc <prvInitialiseTaskLists+0x78>)
 80068a0:	4a05      	ldr	r2, [pc, #20]	@ (80068b8 <prvInitialiseTaskLists+0x64>)
 80068a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80068a4:	4b0a      	ldr	r3, [pc, #40]	@ (80068d0 <prvInitialiseTaskLists+0x7c>)
 80068a6:	4a05      	ldr	r2, [pc, #20]	@ (80068bc <prvInitialiseTaskLists+0x68>)
 80068a8:	601a      	str	r2, [r3, #0]
}
 80068aa:	bf00      	nop
 80068ac:	3708      	adds	r7, #8
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	20000718 	.word	0x20000718
 80068b8:	200007a4 	.word	0x200007a4
 80068bc:	200007b8 	.word	0x200007b8
 80068c0:	200007d4 	.word	0x200007d4
 80068c4:	200007e8 	.word	0x200007e8
 80068c8:	20000800 	.word	0x20000800
 80068cc:	200007cc 	.word	0x200007cc
 80068d0:	200007d0 	.word	0x200007d0

080068d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068da:	e019      	b.n	8006910 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80068dc:	f000 f9d6 	bl	8006c8c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068e0:	4b10      	ldr	r3, [pc, #64]	@ (8006924 <prvCheckTasksWaitingTermination+0x50>)
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	3304      	adds	r3, #4
 80068ec:	4618      	mov	r0, r3
 80068ee:	f7ff fb59 	bl	8005fa4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80068f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006928 <prvCheckTasksWaitingTermination+0x54>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	3b01      	subs	r3, #1
 80068f8:	4a0b      	ldr	r2, [pc, #44]	@ (8006928 <prvCheckTasksWaitingTermination+0x54>)
 80068fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80068fc:	4b0b      	ldr	r3, [pc, #44]	@ (800692c <prvCheckTasksWaitingTermination+0x58>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	3b01      	subs	r3, #1
 8006902:	4a0a      	ldr	r2, [pc, #40]	@ (800692c <prvCheckTasksWaitingTermination+0x58>)
 8006904:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006906:	f000 f9f1 	bl	8006cec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 f810 	bl	8006930 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006910:	4b06      	ldr	r3, [pc, #24]	@ (800692c <prvCheckTasksWaitingTermination+0x58>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1e1      	bne.n	80068dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006918:	bf00      	nop
 800691a:	bf00      	nop
 800691c:	3708      	adds	r7, #8
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	200007e8 	.word	0x200007e8
 8006928:	20000814 	.word	0x20000814
 800692c:	200007fc 	.word	0x200007fc

08006930 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	334c      	adds	r3, #76	@ 0x4c
 800693c:	4618      	mov	r0, r3
 800693e:	f001 faa1 	bl	8007e84 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006948:	2b00      	cmp	r3, #0
 800694a:	d108      	bne.n	800695e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006950:	4618      	mov	r0, r3
 8006952:	f000 fb2b 	bl	8006fac <vPortFree>
				vPortFree( pxTCB );
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 fb28 	bl	8006fac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800695c:	e019      	b.n	8006992 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006964:	2b01      	cmp	r3, #1
 8006966:	d103      	bne.n	8006970 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 fb1f 	bl	8006fac <vPortFree>
	}
 800696e:	e010      	b.n	8006992 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006976:	2b02      	cmp	r3, #2
 8006978:	d00b      	beq.n	8006992 <prvDeleteTCB+0x62>
	__asm volatile
 800697a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800697e:	f383 8811 	msr	BASEPRI, r3
 8006982:	f3bf 8f6f 	isb	sy
 8006986:	f3bf 8f4f 	dsb	sy
 800698a:	60fb      	str	r3, [r7, #12]
}
 800698c:	bf00      	nop
 800698e:	bf00      	nop
 8006990:	e7fd      	b.n	800698e <prvDeleteTCB+0x5e>
	}
 8006992:	bf00      	nop
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
	...

0800699c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069a2:	4b0c      	ldr	r3, [pc, #48]	@ (80069d4 <prvResetNextTaskUnblockTime+0x38>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d104      	bne.n	80069b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80069ac:	4b0a      	ldr	r3, [pc, #40]	@ (80069d8 <prvResetNextTaskUnblockTime+0x3c>)
 80069ae:	f04f 32ff 	mov.w	r2, #4294967295
 80069b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80069b4:	e008      	b.n	80069c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069b6:	4b07      	ldr	r3, [pc, #28]	@ (80069d4 <prvResetNextTaskUnblockTime+0x38>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	4a04      	ldr	r2, [pc, #16]	@ (80069d8 <prvResetNextTaskUnblockTime+0x3c>)
 80069c6:	6013      	str	r3, [r2, #0]
}
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bc80      	pop	{r7}
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	200007cc 	.word	0x200007cc
 80069d8:	20000834 	.word	0x20000834

080069dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80069e6:	4b29      	ldr	r3, [pc, #164]	@ (8006a8c <prvAddCurrentTaskToDelayedList+0xb0>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069ec:	4b28      	ldr	r3, [pc, #160]	@ (8006a90 <prvAddCurrentTaskToDelayedList+0xb4>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	3304      	adds	r3, #4
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7ff fad6 	bl	8005fa4 <uxListRemove>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d10b      	bne.n	8006a16 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80069fe:	4b24      	ldr	r3, [pc, #144]	@ (8006a90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a04:	2201      	movs	r2, #1
 8006a06:	fa02 f303 	lsl.w	r3, r2, r3
 8006a0a:	43da      	mvns	r2, r3
 8006a0c:	4b21      	ldr	r3, [pc, #132]	@ (8006a94 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4013      	ands	r3, r2
 8006a12:	4a20      	ldr	r2, [pc, #128]	@ (8006a94 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006a14:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a1c:	d10a      	bne.n	8006a34 <prvAddCurrentTaskToDelayedList+0x58>
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d007      	beq.n	8006a34 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a24:	4b1a      	ldr	r3, [pc, #104]	@ (8006a90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	3304      	adds	r3, #4
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	481a      	ldr	r0, [pc, #104]	@ (8006a98 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006a2e:	f7ff fa5e 	bl	8005eee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006a32:	e026      	b.n	8006a82 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4413      	add	r3, r2
 8006a3a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a3c:	4b14      	ldr	r3, [pc, #80]	@ (8006a90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68ba      	ldr	r2, [r7, #8]
 8006a42:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006a44:	68ba      	ldr	r2, [r7, #8]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d209      	bcs.n	8006a60 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a4c:	4b13      	ldr	r3, [pc, #76]	@ (8006a9c <prvAddCurrentTaskToDelayedList+0xc0>)
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	4b0f      	ldr	r3, [pc, #60]	@ (8006a90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	3304      	adds	r3, #4
 8006a56:	4619      	mov	r1, r3
 8006a58:	4610      	mov	r0, r2
 8006a5a:	f7ff fa6b 	bl	8005f34 <vListInsert>
}
 8006a5e:	e010      	b.n	8006a82 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a60:	4b0f      	ldr	r3, [pc, #60]	@ (8006aa0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	4b0a      	ldr	r3, [pc, #40]	@ (8006a90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	3304      	adds	r3, #4
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	4610      	mov	r0, r2
 8006a6e:	f7ff fa61 	bl	8005f34 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006a72:	4b0c      	ldr	r3, [pc, #48]	@ (8006aa4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68ba      	ldr	r2, [r7, #8]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d202      	bcs.n	8006a82 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006a7c:	4a09      	ldr	r2, [pc, #36]	@ (8006aa4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	6013      	str	r3, [r2, #0]
}
 8006a82:	bf00      	nop
 8006a84:	3710      	adds	r7, #16
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	20000818 	.word	0x20000818
 8006a90:	20000714 	.word	0x20000714
 8006a94:	2000081c 	.word	0x2000081c
 8006a98:	20000800 	.word	0x20000800
 8006a9c:	200007d0 	.word	0x200007d0
 8006aa0:	200007cc 	.word	0x200007cc
 8006aa4:	20000834 	.word	0x20000834

08006aa8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	3b04      	subs	r3, #4
 8006ab8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006ac0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	3b04      	subs	r3, #4
 8006ac6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	f023 0201 	bic.w	r2, r3, #1
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	3b04      	subs	r3, #4
 8006ad6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ad8:	4a08      	ldr	r2, [pc, #32]	@ (8006afc <pxPortInitialiseStack+0x54>)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	3b14      	subs	r3, #20
 8006ae2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	3b20      	subs	r3, #32
 8006aee:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006af0:	68fb      	ldr	r3, [r7, #12]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3714      	adds	r7, #20
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bc80      	pop	{r7}
 8006afa:	4770      	bx	lr
 8006afc:	08006b01 	.word	0x08006b01

08006b00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006b06:	2300      	movs	r3, #0
 8006b08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006b0a:	4b12      	ldr	r3, [pc, #72]	@ (8006b54 <prvTaskExitError+0x54>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b12:	d00b      	beq.n	8006b2c <prvTaskExitError+0x2c>
	__asm volatile
 8006b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b18:	f383 8811 	msr	BASEPRI, r3
 8006b1c:	f3bf 8f6f 	isb	sy
 8006b20:	f3bf 8f4f 	dsb	sy
 8006b24:	60fb      	str	r3, [r7, #12]
}
 8006b26:	bf00      	nop
 8006b28:	bf00      	nop
 8006b2a:	e7fd      	b.n	8006b28 <prvTaskExitError+0x28>
	__asm volatile
 8006b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b30:	f383 8811 	msr	BASEPRI, r3
 8006b34:	f3bf 8f6f 	isb	sy
 8006b38:	f3bf 8f4f 	dsb	sy
 8006b3c:	60bb      	str	r3, [r7, #8]
}
 8006b3e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006b40:	bf00      	nop
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d0fc      	beq.n	8006b42 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006b48:	bf00      	nop
 8006b4a:	bf00      	nop
 8006b4c:	3714      	adds	r7, #20
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bc80      	pop	{r7}
 8006b52:	4770      	bx	lr
 8006b54:	20000098 	.word	0x20000098
	...

08006b60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006b60:	4b07      	ldr	r3, [pc, #28]	@ (8006b80 <pxCurrentTCBConst2>)
 8006b62:	6819      	ldr	r1, [r3, #0]
 8006b64:	6808      	ldr	r0, [r1, #0]
 8006b66:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006b6a:	f380 8809 	msr	PSP, r0
 8006b6e:	f3bf 8f6f 	isb	sy
 8006b72:	f04f 0000 	mov.w	r0, #0
 8006b76:	f380 8811 	msr	BASEPRI, r0
 8006b7a:	f04e 0e0d 	orr.w	lr, lr, #13
 8006b7e:	4770      	bx	lr

08006b80 <pxCurrentTCBConst2>:
 8006b80:	20000714 	.word	0x20000714
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006b84:	bf00      	nop
 8006b86:	bf00      	nop

08006b88 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006b88:	4806      	ldr	r0, [pc, #24]	@ (8006ba4 <prvPortStartFirstTask+0x1c>)
 8006b8a:	6800      	ldr	r0, [r0, #0]
 8006b8c:	6800      	ldr	r0, [r0, #0]
 8006b8e:	f380 8808 	msr	MSP, r0
 8006b92:	b662      	cpsie	i
 8006b94:	b661      	cpsie	f
 8006b96:	f3bf 8f4f 	dsb	sy
 8006b9a:	f3bf 8f6f 	isb	sy
 8006b9e:	df00      	svc	0
 8006ba0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006ba2:	bf00      	nop
 8006ba4:	e000ed08 	.word	0xe000ed08

08006ba8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006bae:	4b32      	ldr	r3, [pc, #200]	@ (8006c78 <xPortStartScheduler+0xd0>)
 8006bb0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	22ff      	movs	r2, #255	@ 0xff
 8006bbe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006bc8:	78fb      	ldrb	r3, [r7, #3]
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006bd0:	b2da      	uxtb	r2, r3
 8006bd2:	4b2a      	ldr	r3, [pc, #168]	@ (8006c7c <xPortStartScheduler+0xd4>)
 8006bd4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006bd6:	4b2a      	ldr	r3, [pc, #168]	@ (8006c80 <xPortStartScheduler+0xd8>)
 8006bd8:	2207      	movs	r2, #7
 8006bda:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006bdc:	e009      	b.n	8006bf2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006bde:	4b28      	ldr	r3, [pc, #160]	@ (8006c80 <xPortStartScheduler+0xd8>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	3b01      	subs	r3, #1
 8006be4:	4a26      	ldr	r2, [pc, #152]	@ (8006c80 <xPortStartScheduler+0xd8>)
 8006be6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006be8:	78fb      	ldrb	r3, [r7, #3]
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	005b      	lsls	r3, r3, #1
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006bf2:	78fb      	ldrb	r3, [r7, #3]
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bfa:	2b80      	cmp	r3, #128	@ 0x80
 8006bfc:	d0ef      	beq.n	8006bde <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006bfe:	4b20      	ldr	r3, [pc, #128]	@ (8006c80 <xPortStartScheduler+0xd8>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f1c3 0307 	rsb	r3, r3, #7
 8006c06:	2b04      	cmp	r3, #4
 8006c08:	d00b      	beq.n	8006c22 <xPortStartScheduler+0x7a>
	__asm volatile
 8006c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c0e:	f383 8811 	msr	BASEPRI, r3
 8006c12:	f3bf 8f6f 	isb	sy
 8006c16:	f3bf 8f4f 	dsb	sy
 8006c1a:	60bb      	str	r3, [r7, #8]
}
 8006c1c:	bf00      	nop
 8006c1e:	bf00      	nop
 8006c20:	e7fd      	b.n	8006c1e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006c22:	4b17      	ldr	r3, [pc, #92]	@ (8006c80 <xPortStartScheduler+0xd8>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	021b      	lsls	r3, r3, #8
 8006c28:	4a15      	ldr	r2, [pc, #84]	@ (8006c80 <xPortStartScheduler+0xd8>)
 8006c2a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006c2c:	4b14      	ldr	r3, [pc, #80]	@ (8006c80 <xPortStartScheduler+0xd8>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006c34:	4a12      	ldr	r2, [pc, #72]	@ (8006c80 <xPortStartScheduler+0xd8>)
 8006c36:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	b2da      	uxtb	r2, r3
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006c40:	4b10      	ldr	r3, [pc, #64]	@ (8006c84 <xPortStartScheduler+0xdc>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a0f      	ldr	r2, [pc, #60]	@ (8006c84 <xPortStartScheduler+0xdc>)
 8006c46:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006c4a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8006c84 <xPortStartScheduler+0xdc>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a0c      	ldr	r2, [pc, #48]	@ (8006c84 <xPortStartScheduler+0xdc>)
 8006c52:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006c56:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006c58:	f000 f8b8 	bl	8006dcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8006c88 <xPortStartScheduler+0xe0>)
 8006c5e:	2200      	movs	r2, #0
 8006c60:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006c62:	f7ff ff91 	bl	8006b88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006c66:	f7ff fd7b 	bl	8006760 <vTaskSwitchContext>
	prvTaskExitError();
 8006c6a:	f7ff ff49 	bl	8006b00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006c6e:	2300      	movs	r3, #0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3710      	adds	r7, #16
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	e000e400 	.word	0xe000e400
 8006c7c:	20000840 	.word	0x20000840
 8006c80:	20000844 	.word	0x20000844
 8006c84:	e000ed20 	.word	0xe000ed20
 8006c88:	20000098 	.word	0x20000098

08006c8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
	__asm volatile
 8006c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c96:	f383 8811 	msr	BASEPRI, r3
 8006c9a:	f3bf 8f6f 	isb	sy
 8006c9e:	f3bf 8f4f 	dsb	sy
 8006ca2:	607b      	str	r3, [r7, #4]
}
 8006ca4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8006ce4 <vPortEnterCritical+0x58>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	3301      	adds	r3, #1
 8006cac:	4a0d      	ldr	r2, [pc, #52]	@ (8006ce4 <vPortEnterCritical+0x58>)
 8006cae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8006ce4 <vPortEnterCritical+0x58>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d110      	bne.n	8006cda <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8006ce8 <vPortEnterCritical+0x5c>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00b      	beq.n	8006cda <vPortEnterCritical+0x4e>
	__asm volatile
 8006cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc6:	f383 8811 	msr	BASEPRI, r3
 8006cca:	f3bf 8f6f 	isb	sy
 8006cce:	f3bf 8f4f 	dsb	sy
 8006cd2:	603b      	str	r3, [r7, #0]
}
 8006cd4:	bf00      	nop
 8006cd6:	bf00      	nop
 8006cd8:	e7fd      	b.n	8006cd6 <vPortEnterCritical+0x4a>
	}
}
 8006cda:	bf00      	nop
 8006cdc:	370c      	adds	r7, #12
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bc80      	pop	{r7}
 8006ce2:	4770      	bx	lr
 8006ce4:	20000098 	.word	0x20000098
 8006ce8:	e000ed04 	.word	0xe000ed04

08006cec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006cf2:	4b12      	ldr	r3, [pc, #72]	@ (8006d3c <vPortExitCritical+0x50>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d10b      	bne.n	8006d12 <vPortExitCritical+0x26>
	__asm volatile
 8006cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cfe:	f383 8811 	msr	BASEPRI, r3
 8006d02:	f3bf 8f6f 	isb	sy
 8006d06:	f3bf 8f4f 	dsb	sy
 8006d0a:	607b      	str	r3, [r7, #4]
}
 8006d0c:	bf00      	nop
 8006d0e:	bf00      	nop
 8006d10:	e7fd      	b.n	8006d0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006d12:	4b0a      	ldr	r3, [pc, #40]	@ (8006d3c <vPortExitCritical+0x50>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	3b01      	subs	r3, #1
 8006d18:	4a08      	ldr	r2, [pc, #32]	@ (8006d3c <vPortExitCritical+0x50>)
 8006d1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006d1c:	4b07      	ldr	r3, [pc, #28]	@ (8006d3c <vPortExitCritical+0x50>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d105      	bne.n	8006d30 <vPortExitCritical+0x44>
 8006d24:	2300      	movs	r3, #0
 8006d26:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006d2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bc80      	pop	{r7}
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	20000098 	.word	0x20000098

08006d40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006d40:	f3ef 8009 	mrs	r0, PSP
 8006d44:	f3bf 8f6f 	isb	sy
 8006d48:	4b0d      	ldr	r3, [pc, #52]	@ (8006d80 <pxCurrentTCBConst>)
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006d50:	6010      	str	r0, [r2, #0]
 8006d52:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006d56:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006d5a:	f380 8811 	msr	BASEPRI, r0
 8006d5e:	f7ff fcff 	bl	8006760 <vTaskSwitchContext>
 8006d62:	f04f 0000 	mov.w	r0, #0
 8006d66:	f380 8811 	msr	BASEPRI, r0
 8006d6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006d6e:	6819      	ldr	r1, [r3, #0]
 8006d70:	6808      	ldr	r0, [r1, #0]
 8006d72:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006d76:	f380 8809 	msr	PSP, r0
 8006d7a:	f3bf 8f6f 	isb	sy
 8006d7e:	4770      	bx	lr

08006d80 <pxCurrentTCBConst>:
 8006d80:	20000714 	.word	0x20000714
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006d84:	bf00      	nop
 8006d86:	bf00      	nop

08006d88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
	__asm volatile
 8006d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d92:	f383 8811 	msr	BASEPRI, r3
 8006d96:	f3bf 8f6f 	isb	sy
 8006d9a:	f3bf 8f4f 	dsb	sy
 8006d9e:	607b      	str	r3, [r7, #4]
}
 8006da0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006da2:	f7ff fc23 	bl	80065ec <xTaskIncrementTick>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d003      	beq.n	8006db4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006dac:	4b06      	ldr	r3, [pc, #24]	@ (8006dc8 <SysTick_Handler+0x40>)
 8006dae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006db2:	601a      	str	r2, [r3, #0]
 8006db4:	2300      	movs	r3, #0
 8006db6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	f383 8811 	msr	BASEPRI, r3
}
 8006dbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006dc0:	bf00      	nop
 8006dc2:	3708      	adds	r7, #8
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	e000ed04 	.word	0xe000ed04

08006dcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006dcc:	b480      	push	{r7}
 8006dce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8006dfc <vPortSetupTimerInterrupt+0x30>)
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8006e00 <vPortSetupTimerInterrupt+0x34>)
 8006dd8:	2200      	movs	r2, #0
 8006dda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006ddc:	4b09      	ldr	r3, [pc, #36]	@ (8006e04 <vPortSetupTimerInterrupt+0x38>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a09      	ldr	r2, [pc, #36]	@ (8006e08 <vPortSetupTimerInterrupt+0x3c>)
 8006de2:	fba2 2303 	umull	r2, r3, r2, r3
 8006de6:	099b      	lsrs	r3, r3, #6
 8006de8:	4a08      	ldr	r2, [pc, #32]	@ (8006e0c <vPortSetupTimerInterrupt+0x40>)
 8006dea:	3b01      	subs	r3, #1
 8006dec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006dee:	4b03      	ldr	r3, [pc, #12]	@ (8006dfc <vPortSetupTimerInterrupt+0x30>)
 8006df0:	2207      	movs	r2, #7
 8006df2:	601a      	str	r2, [r3, #0]
}
 8006df4:	bf00      	nop
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bc80      	pop	{r7}
 8006dfa:	4770      	bx	lr
 8006dfc:	e000e010 	.word	0xe000e010
 8006e00:	e000e018 	.word	0xe000e018
 8006e04:	2000008c 	.word	0x2000008c
 8006e08:	10624dd3 	.word	0x10624dd3
 8006e0c:	e000e014 	.word	0xe000e014

08006e10 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b08a      	sub	sp, #40	@ 0x28
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006e1c:	f7ff fb3a 	bl	8006494 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006e20:	4b5c      	ldr	r3, [pc, #368]	@ (8006f94 <pvPortMalloc+0x184>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d101      	bne.n	8006e2c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006e28:	f000 f924 	bl	8007074 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006e2c:	4b5a      	ldr	r3, [pc, #360]	@ (8006f98 <pvPortMalloc+0x188>)
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4013      	ands	r3, r2
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f040 8095 	bne.w	8006f64 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d01e      	beq.n	8006e7e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006e40:	2208      	movs	r2, #8
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4413      	add	r3, r2
 8006e46:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f003 0307 	and.w	r3, r3, #7
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d015      	beq.n	8006e7e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f023 0307 	bic.w	r3, r3, #7
 8006e58:	3308      	adds	r3, #8
 8006e5a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f003 0307 	and.w	r3, r3, #7
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00b      	beq.n	8006e7e <pvPortMalloc+0x6e>
	__asm volatile
 8006e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e6a:	f383 8811 	msr	BASEPRI, r3
 8006e6e:	f3bf 8f6f 	isb	sy
 8006e72:	f3bf 8f4f 	dsb	sy
 8006e76:	617b      	str	r3, [r7, #20]
}
 8006e78:	bf00      	nop
 8006e7a:	bf00      	nop
 8006e7c:	e7fd      	b.n	8006e7a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d06f      	beq.n	8006f64 <pvPortMalloc+0x154>
 8006e84:	4b45      	ldr	r3, [pc, #276]	@ (8006f9c <pvPortMalloc+0x18c>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d86a      	bhi.n	8006f64 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006e8e:	4b44      	ldr	r3, [pc, #272]	@ (8006fa0 <pvPortMalloc+0x190>)
 8006e90:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006e92:	4b43      	ldr	r3, [pc, #268]	@ (8006fa0 <pvPortMalloc+0x190>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e98:	e004      	b.n	8006ea4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e9c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d903      	bls.n	8006eb6 <pvPortMalloc+0xa6>
 8006eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d1f1      	bne.n	8006e9a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006eb6:	4b37      	ldr	r3, [pc, #220]	@ (8006f94 <pvPortMalloc+0x184>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d051      	beq.n	8006f64 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006ec0:	6a3b      	ldr	r3, [r7, #32]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2208      	movs	r2, #8
 8006ec6:	4413      	add	r3, r2
 8006ec8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	6a3b      	ldr	r3, [r7, #32]
 8006ed0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed4:	685a      	ldr	r2, [r3, #4]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	1ad2      	subs	r2, r2, r3
 8006eda:	2308      	movs	r3, #8
 8006edc:	005b      	lsls	r3, r3, #1
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d920      	bls.n	8006f24 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006ee2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	f003 0307 	and.w	r3, r3, #7
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00b      	beq.n	8006f0c <pvPortMalloc+0xfc>
	__asm volatile
 8006ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ef8:	f383 8811 	msr	BASEPRI, r3
 8006efc:	f3bf 8f6f 	isb	sy
 8006f00:	f3bf 8f4f 	dsb	sy
 8006f04:	613b      	str	r3, [r7, #16]
}
 8006f06:	bf00      	nop
 8006f08:	bf00      	nop
 8006f0a:	e7fd      	b.n	8006f08 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0e:	685a      	ldr	r2, [r3, #4]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	1ad2      	subs	r2, r2, r3
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f1e:	69b8      	ldr	r0, [r7, #24]
 8006f20:	f000 f90a 	bl	8007138 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f24:	4b1d      	ldr	r3, [pc, #116]	@ (8006f9c <pvPortMalloc+0x18c>)
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	4a1b      	ldr	r2, [pc, #108]	@ (8006f9c <pvPortMalloc+0x18c>)
 8006f30:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f32:	4b1a      	ldr	r3, [pc, #104]	@ (8006f9c <pvPortMalloc+0x18c>)
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	4b1b      	ldr	r3, [pc, #108]	@ (8006fa4 <pvPortMalloc+0x194>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d203      	bcs.n	8006f46 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006f3e:	4b17      	ldr	r3, [pc, #92]	@ (8006f9c <pvPortMalloc+0x18c>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a18      	ldr	r2, [pc, #96]	@ (8006fa4 <pvPortMalloc+0x194>)
 8006f44:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f48:	685a      	ldr	r2, [r3, #4]
 8006f4a:	4b13      	ldr	r3, [pc, #76]	@ (8006f98 <pvPortMalloc+0x188>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	431a      	orrs	r2, r3
 8006f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f52:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f56:	2200      	movs	r2, #0
 8006f58:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006f5a:	4b13      	ldr	r3, [pc, #76]	@ (8006fa8 <pvPortMalloc+0x198>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	3301      	adds	r3, #1
 8006f60:	4a11      	ldr	r2, [pc, #68]	@ (8006fa8 <pvPortMalloc+0x198>)
 8006f62:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006f64:	f7ff faa4 	bl	80064b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	f003 0307 	and.w	r3, r3, #7
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00b      	beq.n	8006f8a <pvPortMalloc+0x17a>
	__asm volatile
 8006f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f76:	f383 8811 	msr	BASEPRI, r3
 8006f7a:	f3bf 8f6f 	isb	sy
 8006f7e:	f3bf 8f4f 	dsb	sy
 8006f82:	60fb      	str	r3, [r7, #12]
}
 8006f84:	bf00      	nop
 8006f86:	bf00      	nop
 8006f88:	e7fd      	b.n	8006f86 <pvPortMalloc+0x176>
	return pvReturn;
 8006f8a:	69fb      	ldr	r3, [r7, #28]
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3728      	adds	r7, #40	@ 0x28
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	20004850 	.word	0x20004850
 8006f98:	20004864 	.word	0x20004864
 8006f9c:	20004854 	.word	0x20004854
 8006fa0:	20004848 	.word	0x20004848
 8006fa4:	20004858 	.word	0x20004858
 8006fa8:	2000485c 	.word	0x2000485c

08006fac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b086      	sub	sp, #24
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d04f      	beq.n	800705e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006fbe:	2308      	movs	r3, #8
 8006fc0:	425b      	negs	r3, r3
 8006fc2:	697a      	ldr	r2, [r7, #20]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	685a      	ldr	r2, [r3, #4]
 8006fd0:	4b25      	ldr	r3, [pc, #148]	@ (8007068 <vPortFree+0xbc>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d10b      	bne.n	8006ff2 <vPortFree+0x46>
	__asm volatile
 8006fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fde:	f383 8811 	msr	BASEPRI, r3
 8006fe2:	f3bf 8f6f 	isb	sy
 8006fe6:	f3bf 8f4f 	dsb	sy
 8006fea:	60fb      	str	r3, [r7, #12]
}
 8006fec:	bf00      	nop
 8006fee:	bf00      	nop
 8006ff0:	e7fd      	b.n	8006fee <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00b      	beq.n	8007012 <vPortFree+0x66>
	__asm volatile
 8006ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ffe:	f383 8811 	msr	BASEPRI, r3
 8007002:	f3bf 8f6f 	isb	sy
 8007006:	f3bf 8f4f 	dsb	sy
 800700a:	60bb      	str	r3, [r7, #8]
}
 800700c:	bf00      	nop
 800700e:	bf00      	nop
 8007010:	e7fd      	b.n	800700e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	685a      	ldr	r2, [r3, #4]
 8007016:	4b14      	ldr	r3, [pc, #80]	@ (8007068 <vPortFree+0xbc>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4013      	ands	r3, r2
 800701c:	2b00      	cmp	r3, #0
 800701e:	d01e      	beq.n	800705e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d11a      	bne.n	800705e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	4b0e      	ldr	r3, [pc, #56]	@ (8007068 <vPortFree+0xbc>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	43db      	mvns	r3, r3
 8007032:	401a      	ands	r2, r3
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007038:	f7ff fa2c 	bl	8006494 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	685a      	ldr	r2, [r3, #4]
 8007040:	4b0a      	ldr	r3, [pc, #40]	@ (800706c <vPortFree+0xc0>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4413      	add	r3, r2
 8007046:	4a09      	ldr	r2, [pc, #36]	@ (800706c <vPortFree+0xc0>)
 8007048:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800704a:	6938      	ldr	r0, [r7, #16]
 800704c:	f000 f874 	bl	8007138 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007050:	4b07      	ldr	r3, [pc, #28]	@ (8007070 <vPortFree+0xc4>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	3301      	adds	r3, #1
 8007056:	4a06      	ldr	r2, [pc, #24]	@ (8007070 <vPortFree+0xc4>)
 8007058:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800705a:	f7ff fa29 	bl	80064b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800705e:	bf00      	nop
 8007060:	3718      	adds	r7, #24
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	20004864 	.word	0x20004864
 800706c:	20004854 	.word	0x20004854
 8007070:	20004860 	.word	0x20004860

08007074 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007074:	b480      	push	{r7}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800707a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800707e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007080:	4b27      	ldr	r3, [pc, #156]	@ (8007120 <prvHeapInit+0xac>)
 8007082:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f003 0307 	and.w	r3, r3, #7
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00c      	beq.n	80070a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	3307      	adds	r3, #7
 8007092:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f023 0307 	bic.w	r3, r3, #7
 800709a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	4a1f      	ldr	r2, [pc, #124]	@ (8007120 <prvHeapInit+0xac>)
 80070a4:	4413      	add	r3, r2
 80070a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80070ac:	4a1d      	ldr	r2, [pc, #116]	@ (8007124 <prvHeapInit+0xb0>)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80070b2:	4b1c      	ldr	r3, [pc, #112]	@ (8007124 <prvHeapInit+0xb0>)
 80070b4:	2200      	movs	r2, #0
 80070b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	68ba      	ldr	r2, [r7, #8]
 80070bc:	4413      	add	r3, r2
 80070be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80070c0:	2208      	movs	r2, #8
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	1a9b      	subs	r3, r3, r2
 80070c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f023 0307 	bic.w	r3, r3, #7
 80070ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	4a15      	ldr	r2, [pc, #84]	@ (8007128 <prvHeapInit+0xb4>)
 80070d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80070d6:	4b14      	ldr	r3, [pc, #80]	@ (8007128 <prvHeapInit+0xb4>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2200      	movs	r2, #0
 80070dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80070de:	4b12      	ldr	r3, [pc, #72]	@ (8007128 <prvHeapInit+0xb4>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	2200      	movs	r2, #0
 80070e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	1ad2      	subs	r2, r2, r3
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80070f4:	4b0c      	ldr	r3, [pc, #48]	@ (8007128 <prvHeapInit+0xb4>)
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	4a0a      	ldr	r2, [pc, #40]	@ (800712c <prvHeapInit+0xb8>)
 8007102:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	4a09      	ldr	r2, [pc, #36]	@ (8007130 <prvHeapInit+0xbc>)
 800710a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800710c:	4b09      	ldr	r3, [pc, #36]	@ (8007134 <prvHeapInit+0xc0>)
 800710e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007112:	601a      	str	r2, [r3, #0]
}
 8007114:	bf00      	nop
 8007116:	3714      	adds	r7, #20
 8007118:	46bd      	mov	sp, r7
 800711a:	bc80      	pop	{r7}
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	20000848 	.word	0x20000848
 8007124:	20004848 	.word	0x20004848
 8007128:	20004850 	.word	0x20004850
 800712c:	20004858 	.word	0x20004858
 8007130:	20004854 	.word	0x20004854
 8007134:	20004864 	.word	0x20004864

08007138 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007140:	4b27      	ldr	r3, [pc, #156]	@ (80071e0 <prvInsertBlockIntoFreeList+0xa8>)
 8007142:	60fb      	str	r3, [r7, #12]
 8007144:	e002      	b.n	800714c <prvInsertBlockIntoFreeList+0x14>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	60fb      	str	r3, [r7, #12]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	429a      	cmp	r2, r3
 8007154:	d8f7      	bhi.n	8007146 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	68ba      	ldr	r2, [r7, #8]
 8007160:	4413      	add	r3, r2
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	429a      	cmp	r2, r3
 8007166:	d108      	bne.n	800717a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	685a      	ldr	r2, [r3, #4]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	441a      	add	r2, r3
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	441a      	add	r2, r3
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	429a      	cmp	r2, r3
 800718c:	d118      	bne.n	80071c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	4b14      	ldr	r3, [pc, #80]	@ (80071e4 <prvInsertBlockIntoFreeList+0xac>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	429a      	cmp	r2, r3
 8007198:	d00d      	beq.n	80071b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	685a      	ldr	r2, [r3, #4]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	441a      	add	r2, r3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	601a      	str	r2, [r3, #0]
 80071b4:	e008      	b.n	80071c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80071b6:	4b0b      	ldr	r3, [pc, #44]	@ (80071e4 <prvInsertBlockIntoFreeList+0xac>)
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	601a      	str	r2, [r3, #0]
 80071be:	e003      	b.n	80071c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d002      	beq.n	80071d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071d6:	bf00      	nop
 80071d8:	3714      	adds	r7, #20
 80071da:	46bd      	mov	sp, r7
 80071dc:	bc80      	pop	{r7}
 80071de:	4770      	bx	lr
 80071e0:	20004848 	.word	0x20004848
 80071e4:	20004850 	.word	0x20004850

080071e8 <_strtol_l.constprop.0>:
 80071e8:	2b24      	cmp	r3, #36	@ 0x24
 80071ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071ee:	4686      	mov	lr, r0
 80071f0:	4690      	mov	r8, r2
 80071f2:	d801      	bhi.n	80071f8 <_strtol_l.constprop.0+0x10>
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d106      	bne.n	8007206 <_strtol_l.constprop.0+0x1e>
 80071f8:	f000 fed0 	bl	8007f9c <__errno>
 80071fc:	2316      	movs	r3, #22
 80071fe:	6003      	str	r3, [r0, #0]
 8007200:	2000      	movs	r0, #0
 8007202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007206:	460d      	mov	r5, r1
 8007208:	4833      	ldr	r0, [pc, #204]	@ (80072d8 <_strtol_l.constprop.0+0xf0>)
 800720a:	462a      	mov	r2, r5
 800720c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007210:	5d06      	ldrb	r6, [r0, r4]
 8007212:	f016 0608 	ands.w	r6, r6, #8
 8007216:	d1f8      	bne.n	800720a <_strtol_l.constprop.0+0x22>
 8007218:	2c2d      	cmp	r4, #45	@ 0x2d
 800721a:	d12d      	bne.n	8007278 <_strtol_l.constprop.0+0x90>
 800721c:	2601      	movs	r6, #1
 800721e:	782c      	ldrb	r4, [r5, #0]
 8007220:	1c95      	adds	r5, r2, #2
 8007222:	f033 0210 	bics.w	r2, r3, #16
 8007226:	d109      	bne.n	800723c <_strtol_l.constprop.0+0x54>
 8007228:	2c30      	cmp	r4, #48	@ 0x30
 800722a:	d12a      	bne.n	8007282 <_strtol_l.constprop.0+0x9a>
 800722c:	782a      	ldrb	r2, [r5, #0]
 800722e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007232:	2a58      	cmp	r2, #88	@ 0x58
 8007234:	d125      	bne.n	8007282 <_strtol_l.constprop.0+0x9a>
 8007236:	2310      	movs	r3, #16
 8007238:	786c      	ldrb	r4, [r5, #1]
 800723a:	3502      	adds	r5, #2
 800723c:	2200      	movs	r2, #0
 800723e:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007242:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007246:	fbbc f9f3 	udiv	r9, ip, r3
 800724a:	4610      	mov	r0, r2
 800724c:	fb03 ca19 	mls	sl, r3, r9, ip
 8007250:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007254:	2f09      	cmp	r7, #9
 8007256:	d81b      	bhi.n	8007290 <_strtol_l.constprop.0+0xa8>
 8007258:	463c      	mov	r4, r7
 800725a:	42a3      	cmp	r3, r4
 800725c:	dd27      	ble.n	80072ae <_strtol_l.constprop.0+0xc6>
 800725e:	1c57      	adds	r7, r2, #1
 8007260:	d007      	beq.n	8007272 <_strtol_l.constprop.0+0x8a>
 8007262:	4581      	cmp	r9, r0
 8007264:	d320      	bcc.n	80072a8 <_strtol_l.constprop.0+0xc0>
 8007266:	d101      	bne.n	800726c <_strtol_l.constprop.0+0x84>
 8007268:	45a2      	cmp	sl, r4
 800726a:	db1d      	blt.n	80072a8 <_strtol_l.constprop.0+0xc0>
 800726c:	2201      	movs	r2, #1
 800726e:	fb00 4003 	mla	r0, r0, r3, r4
 8007272:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007276:	e7eb      	b.n	8007250 <_strtol_l.constprop.0+0x68>
 8007278:	2c2b      	cmp	r4, #43	@ 0x2b
 800727a:	bf04      	itt	eq
 800727c:	782c      	ldrbeq	r4, [r5, #0]
 800727e:	1c95      	addeq	r5, r2, #2
 8007280:	e7cf      	b.n	8007222 <_strtol_l.constprop.0+0x3a>
 8007282:	2b00      	cmp	r3, #0
 8007284:	d1da      	bne.n	800723c <_strtol_l.constprop.0+0x54>
 8007286:	2c30      	cmp	r4, #48	@ 0x30
 8007288:	bf0c      	ite	eq
 800728a:	2308      	moveq	r3, #8
 800728c:	230a      	movne	r3, #10
 800728e:	e7d5      	b.n	800723c <_strtol_l.constprop.0+0x54>
 8007290:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007294:	2f19      	cmp	r7, #25
 8007296:	d801      	bhi.n	800729c <_strtol_l.constprop.0+0xb4>
 8007298:	3c37      	subs	r4, #55	@ 0x37
 800729a:	e7de      	b.n	800725a <_strtol_l.constprop.0+0x72>
 800729c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80072a0:	2f19      	cmp	r7, #25
 80072a2:	d804      	bhi.n	80072ae <_strtol_l.constprop.0+0xc6>
 80072a4:	3c57      	subs	r4, #87	@ 0x57
 80072a6:	e7d8      	b.n	800725a <_strtol_l.constprop.0+0x72>
 80072a8:	f04f 32ff 	mov.w	r2, #4294967295
 80072ac:	e7e1      	b.n	8007272 <_strtol_l.constprop.0+0x8a>
 80072ae:	1c53      	adds	r3, r2, #1
 80072b0:	d108      	bne.n	80072c4 <_strtol_l.constprop.0+0xdc>
 80072b2:	2322      	movs	r3, #34	@ 0x22
 80072b4:	4660      	mov	r0, ip
 80072b6:	f8ce 3000 	str.w	r3, [lr]
 80072ba:	f1b8 0f00 	cmp.w	r8, #0
 80072be:	d0a0      	beq.n	8007202 <_strtol_l.constprop.0+0x1a>
 80072c0:	1e69      	subs	r1, r5, #1
 80072c2:	e006      	b.n	80072d2 <_strtol_l.constprop.0+0xea>
 80072c4:	b106      	cbz	r6, 80072c8 <_strtol_l.constprop.0+0xe0>
 80072c6:	4240      	negs	r0, r0
 80072c8:	f1b8 0f00 	cmp.w	r8, #0
 80072cc:	d099      	beq.n	8007202 <_strtol_l.constprop.0+0x1a>
 80072ce:	2a00      	cmp	r2, #0
 80072d0:	d1f6      	bne.n	80072c0 <_strtol_l.constprop.0+0xd8>
 80072d2:	f8c8 1000 	str.w	r1, [r8]
 80072d6:	e794      	b.n	8007202 <_strtol_l.constprop.0+0x1a>
 80072d8:	0800a223 	.word	0x0800a223

080072dc <strtol>:
 80072dc:	4613      	mov	r3, r2
 80072de:	460a      	mov	r2, r1
 80072e0:	4601      	mov	r1, r0
 80072e2:	4802      	ldr	r0, [pc, #8]	@ (80072ec <strtol+0x10>)
 80072e4:	6800      	ldr	r0, [r0, #0]
 80072e6:	f7ff bf7f 	b.w	80071e8 <_strtol_l.constprop.0>
 80072ea:	bf00      	nop
 80072ec:	200000a8 	.word	0x200000a8

080072f0 <__cvt>:
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072f6:	461d      	mov	r5, r3
 80072f8:	bfbb      	ittet	lt
 80072fa:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80072fe:	461d      	movlt	r5, r3
 8007300:	2300      	movge	r3, #0
 8007302:	232d      	movlt	r3, #45	@ 0x2d
 8007304:	b088      	sub	sp, #32
 8007306:	4614      	mov	r4, r2
 8007308:	bfb8      	it	lt
 800730a:	4614      	movlt	r4, r2
 800730c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800730e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8007310:	7013      	strb	r3, [r2, #0]
 8007312:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007314:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8007318:	f023 0820 	bic.w	r8, r3, #32
 800731c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007320:	d005      	beq.n	800732e <__cvt+0x3e>
 8007322:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007326:	d100      	bne.n	800732a <__cvt+0x3a>
 8007328:	3601      	adds	r6, #1
 800732a:	2302      	movs	r3, #2
 800732c:	e000      	b.n	8007330 <__cvt+0x40>
 800732e:	2303      	movs	r3, #3
 8007330:	aa07      	add	r2, sp, #28
 8007332:	9204      	str	r2, [sp, #16]
 8007334:	aa06      	add	r2, sp, #24
 8007336:	e9cd a202 	strd	sl, r2, [sp, #8]
 800733a:	e9cd 3600 	strd	r3, r6, [sp]
 800733e:	4622      	mov	r2, r4
 8007340:	462b      	mov	r3, r5
 8007342:	f000 fefd 	bl	8008140 <_dtoa_r>
 8007346:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800734a:	4607      	mov	r7, r0
 800734c:	d119      	bne.n	8007382 <__cvt+0x92>
 800734e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007350:	07db      	lsls	r3, r3, #31
 8007352:	d50e      	bpl.n	8007372 <__cvt+0x82>
 8007354:	eb00 0906 	add.w	r9, r0, r6
 8007358:	2200      	movs	r2, #0
 800735a:	2300      	movs	r3, #0
 800735c:	4620      	mov	r0, r4
 800735e:	4629      	mov	r1, r5
 8007360:	f7f9 fb22 	bl	80009a8 <__aeabi_dcmpeq>
 8007364:	b108      	cbz	r0, 800736a <__cvt+0x7a>
 8007366:	f8cd 901c 	str.w	r9, [sp, #28]
 800736a:	2230      	movs	r2, #48	@ 0x30
 800736c:	9b07      	ldr	r3, [sp, #28]
 800736e:	454b      	cmp	r3, r9
 8007370:	d31e      	bcc.n	80073b0 <__cvt+0xc0>
 8007372:	4638      	mov	r0, r7
 8007374:	9b07      	ldr	r3, [sp, #28]
 8007376:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007378:	1bdb      	subs	r3, r3, r7
 800737a:	6013      	str	r3, [r2, #0]
 800737c:	b008      	add	sp, #32
 800737e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007382:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007386:	eb00 0906 	add.w	r9, r0, r6
 800738a:	d1e5      	bne.n	8007358 <__cvt+0x68>
 800738c:	7803      	ldrb	r3, [r0, #0]
 800738e:	2b30      	cmp	r3, #48	@ 0x30
 8007390:	d10a      	bne.n	80073a8 <__cvt+0xb8>
 8007392:	2200      	movs	r2, #0
 8007394:	2300      	movs	r3, #0
 8007396:	4620      	mov	r0, r4
 8007398:	4629      	mov	r1, r5
 800739a:	f7f9 fb05 	bl	80009a8 <__aeabi_dcmpeq>
 800739e:	b918      	cbnz	r0, 80073a8 <__cvt+0xb8>
 80073a0:	f1c6 0601 	rsb	r6, r6, #1
 80073a4:	f8ca 6000 	str.w	r6, [sl]
 80073a8:	f8da 3000 	ldr.w	r3, [sl]
 80073ac:	4499      	add	r9, r3
 80073ae:	e7d3      	b.n	8007358 <__cvt+0x68>
 80073b0:	1c59      	adds	r1, r3, #1
 80073b2:	9107      	str	r1, [sp, #28]
 80073b4:	701a      	strb	r2, [r3, #0]
 80073b6:	e7d9      	b.n	800736c <__cvt+0x7c>

080073b8 <__exponent>:
 80073b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073ba:	2900      	cmp	r1, #0
 80073bc:	bfb6      	itet	lt
 80073be:	232d      	movlt	r3, #45	@ 0x2d
 80073c0:	232b      	movge	r3, #43	@ 0x2b
 80073c2:	4249      	neglt	r1, r1
 80073c4:	2909      	cmp	r1, #9
 80073c6:	7002      	strb	r2, [r0, #0]
 80073c8:	7043      	strb	r3, [r0, #1]
 80073ca:	dd29      	ble.n	8007420 <__exponent+0x68>
 80073cc:	f10d 0307 	add.w	r3, sp, #7
 80073d0:	461d      	mov	r5, r3
 80073d2:	270a      	movs	r7, #10
 80073d4:	fbb1 f6f7 	udiv	r6, r1, r7
 80073d8:	461a      	mov	r2, r3
 80073da:	fb07 1416 	mls	r4, r7, r6, r1
 80073de:	3430      	adds	r4, #48	@ 0x30
 80073e0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80073e4:	460c      	mov	r4, r1
 80073e6:	2c63      	cmp	r4, #99	@ 0x63
 80073e8:	4631      	mov	r1, r6
 80073ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80073ee:	dcf1      	bgt.n	80073d4 <__exponent+0x1c>
 80073f0:	3130      	adds	r1, #48	@ 0x30
 80073f2:	1e94      	subs	r4, r2, #2
 80073f4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80073f8:	4623      	mov	r3, r4
 80073fa:	1c41      	adds	r1, r0, #1
 80073fc:	42ab      	cmp	r3, r5
 80073fe:	d30a      	bcc.n	8007416 <__exponent+0x5e>
 8007400:	f10d 0309 	add.w	r3, sp, #9
 8007404:	1a9b      	subs	r3, r3, r2
 8007406:	42ac      	cmp	r4, r5
 8007408:	bf88      	it	hi
 800740a:	2300      	movhi	r3, #0
 800740c:	3302      	adds	r3, #2
 800740e:	4403      	add	r3, r0
 8007410:	1a18      	subs	r0, r3, r0
 8007412:	b003      	add	sp, #12
 8007414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007416:	f813 6b01 	ldrb.w	r6, [r3], #1
 800741a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800741e:	e7ed      	b.n	80073fc <__exponent+0x44>
 8007420:	2330      	movs	r3, #48	@ 0x30
 8007422:	3130      	adds	r1, #48	@ 0x30
 8007424:	7083      	strb	r3, [r0, #2]
 8007426:	70c1      	strb	r1, [r0, #3]
 8007428:	1d03      	adds	r3, r0, #4
 800742a:	e7f1      	b.n	8007410 <__exponent+0x58>

0800742c <_printf_float>:
 800742c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007430:	b091      	sub	sp, #68	@ 0x44
 8007432:	460c      	mov	r4, r1
 8007434:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8007438:	4616      	mov	r6, r2
 800743a:	461f      	mov	r7, r3
 800743c:	4605      	mov	r5, r0
 800743e:	f000 fd0d 	bl	8007e5c <_localeconv_r>
 8007442:	6803      	ldr	r3, [r0, #0]
 8007444:	4618      	mov	r0, r3
 8007446:	9308      	str	r3, [sp, #32]
 8007448:	f7f8 fe82 	bl	8000150 <strlen>
 800744c:	2300      	movs	r3, #0
 800744e:	930e      	str	r3, [sp, #56]	@ 0x38
 8007450:	f8d8 3000 	ldr.w	r3, [r8]
 8007454:	9009      	str	r0, [sp, #36]	@ 0x24
 8007456:	3307      	adds	r3, #7
 8007458:	f023 0307 	bic.w	r3, r3, #7
 800745c:	f103 0208 	add.w	r2, r3, #8
 8007460:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007464:	f8d4 b000 	ldr.w	fp, [r4]
 8007468:	f8c8 2000 	str.w	r2, [r8]
 800746c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007470:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007474:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007476:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800747a:	f04f 32ff 	mov.w	r2, #4294967295
 800747e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007482:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007486:	4b9c      	ldr	r3, [pc, #624]	@ (80076f8 <_printf_float+0x2cc>)
 8007488:	f7f9 fac0 	bl	8000a0c <__aeabi_dcmpun>
 800748c:	bb70      	cbnz	r0, 80074ec <_printf_float+0xc0>
 800748e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007492:	f04f 32ff 	mov.w	r2, #4294967295
 8007496:	4b98      	ldr	r3, [pc, #608]	@ (80076f8 <_printf_float+0x2cc>)
 8007498:	f7f9 fa9a 	bl	80009d0 <__aeabi_dcmple>
 800749c:	bb30      	cbnz	r0, 80074ec <_printf_float+0xc0>
 800749e:	2200      	movs	r2, #0
 80074a0:	2300      	movs	r3, #0
 80074a2:	4640      	mov	r0, r8
 80074a4:	4649      	mov	r1, r9
 80074a6:	f7f9 fa89 	bl	80009bc <__aeabi_dcmplt>
 80074aa:	b110      	cbz	r0, 80074b2 <_printf_float+0x86>
 80074ac:	232d      	movs	r3, #45	@ 0x2d
 80074ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074b2:	4a92      	ldr	r2, [pc, #584]	@ (80076fc <_printf_float+0x2d0>)
 80074b4:	4b92      	ldr	r3, [pc, #584]	@ (8007700 <_printf_float+0x2d4>)
 80074b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80074ba:	bf94      	ite	ls
 80074bc:	4690      	movls	r8, r2
 80074be:	4698      	movhi	r8, r3
 80074c0:	2303      	movs	r3, #3
 80074c2:	f04f 0900 	mov.w	r9, #0
 80074c6:	6123      	str	r3, [r4, #16]
 80074c8:	f02b 0304 	bic.w	r3, fp, #4
 80074cc:	6023      	str	r3, [r4, #0]
 80074ce:	4633      	mov	r3, r6
 80074d0:	4621      	mov	r1, r4
 80074d2:	4628      	mov	r0, r5
 80074d4:	9700      	str	r7, [sp, #0]
 80074d6:	aa0f      	add	r2, sp, #60	@ 0x3c
 80074d8:	f000 f9d4 	bl	8007884 <_printf_common>
 80074dc:	3001      	adds	r0, #1
 80074de:	f040 8090 	bne.w	8007602 <_printf_float+0x1d6>
 80074e2:	f04f 30ff 	mov.w	r0, #4294967295
 80074e6:	b011      	add	sp, #68	@ 0x44
 80074e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074ec:	4642      	mov	r2, r8
 80074ee:	464b      	mov	r3, r9
 80074f0:	4640      	mov	r0, r8
 80074f2:	4649      	mov	r1, r9
 80074f4:	f7f9 fa8a 	bl	8000a0c <__aeabi_dcmpun>
 80074f8:	b148      	cbz	r0, 800750e <_printf_float+0xe2>
 80074fa:	464b      	mov	r3, r9
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	bfb8      	it	lt
 8007500:	232d      	movlt	r3, #45	@ 0x2d
 8007502:	4a80      	ldr	r2, [pc, #512]	@ (8007704 <_printf_float+0x2d8>)
 8007504:	bfb8      	it	lt
 8007506:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800750a:	4b7f      	ldr	r3, [pc, #508]	@ (8007708 <_printf_float+0x2dc>)
 800750c:	e7d3      	b.n	80074b6 <_printf_float+0x8a>
 800750e:	6863      	ldr	r3, [r4, #4]
 8007510:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8007514:	1c5a      	adds	r2, r3, #1
 8007516:	d13f      	bne.n	8007598 <_printf_float+0x16c>
 8007518:	2306      	movs	r3, #6
 800751a:	6063      	str	r3, [r4, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8007522:	6023      	str	r3, [r4, #0]
 8007524:	9206      	str	r2, [sp, #24]
 8007526:	aa0e      	add	r2, sp, #56	@ 0x38
 8007528:	e9cd a204 	strd	sl, r2, [sp, #16]
 800752c:	aa0d      	add	r2, sp, #52	@ 0x34
 800752e:	9203      	str	r2, [sp, #12]
 8007530:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8007534:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007538:	6863      	ldr	r3, [r4, #4]
 800753a:	4642      	mov	r2, r8
 800753c:	9300      	str	r3, [sp, #0]
 800753e:	4628      	mov	r0, r5
 8007540:	464b      	mov	r3, r9
 8007542:	910a      	str	r1, [sp, #40]	@ 0x28
 8007544:	f7ff fed4 	bl	80072f0 <__cvt>
 8007548:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800754a:	4680      	mov	r8, r0
 800754c:	2947      	cmp	r1, #71	@ 0x47
 800754e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007550:	d128      	bne.n	80075a4 <_printf_float+0x178>
 8007552:	1cc8      	adds	r0, r1, #3
 8007554:	db02      	blt.n	800755c <_printf_float+0x130>
 8007556:	6863      	ldr	r3, [r4, #4]
 8007558:	4299      	cmp	r1, r3
 800755a:	dd40      	ble.n	80075de <_printf_float+0x1b2>
 800755c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007560:	fa5f fa8a 	uxtb.w	sl, sl
 8007564:	4652      	mov	r2, sl
 8007566:	3901      	subs	r1, #1
 8007568:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800756c:	910d      	str	r1, [sp, #52]	@ 0x34
 800756e:	f7ff ff23 	bl	80073b8 <__exponent>
 8007572:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007574:	4681      	mov	r9, r0
 8007576:	1813      	adds	r3, r2, r0
 8007578:	2a01      	cmp	r2, #1
 800757a:	6123      	str	r3, [r4, #16]
 800757c:	dc02      	bgt.n	8007584 <_printf_float+0x158>
 800757e:	6822      	ldr	r2, [r4, #0]
 8007580:	07d2      	lsls	r2, r2, #31
 8007582:	d501      	bpl.n	8007588 <_printf_float+0x15c>
 8007584:	3301      	adds	r3, #1
 8007586:	6123      	str	r3, [r4, #16]
 8007588:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800758c:	2b00      	cmp	r3, #0
 800758e:	d09e      	beq.n	80074ce <_printf_float+0xa2>
 8007590:	232d      	movs	r3, #45	@ 0x2d
 8007592:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007596:	e79a      	b.n	80074ce <_printf_float+0xa2>
 8007598:	2947      	cmp	r1, #71	@ 0x47
 800759a:	d1bf      	bne.n	800751c <_printf_float+0xf0>
 800759c:	2b00      	cmp	r3, #0
 800759e:	d1bd      	bne.n	800751c <_printf_float+0xf0>
 80075a0:	2301      	movs	r3, #1
 80075a2:	e7ba      	b.n	800751a <_printf_float+0xee>
 80075a4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80075a8:	d9dc      	bls.n	8007564 <_printf_float+0x138>
 80075aa:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80075ae:	d118      	bne.n	80075e2 <_printf_float+0x1b6>
 80075b0:	2900      	cmp	r1, #0
 80075b2:	6863      	ldr	r3, [r4, #4]
 80075b4:	dd0b      	ble.n	80075ce <_printf_float+0x1a2>
 80075b6:	6121      	str	r1, [r4, #16]
 80075b8:	b913      	cbnz	r3, 80075c0 <_printf_float+0x194>
 80075ba:	6822      	ldr	r2, [r4, #0]
 80075bc:	07d0      	lsls	r0, r2, #31
 80075be:	d502      	bpl.n	80075c6 <_printf_float+0x19a>
 80075c0:	3301      	adds	r3, #1
 80075c2:	440b      	add	r3, r1
 80075c4:	6123      	str	r3, [r4, #16]
 80075c6:	f04f 0900 	mov.w	r9, #0
 80075ca:	65a1      	str	r1, [r4, #88]	@ 0x58
 80075cc:	e7dc      	b.n	8007588 <_printf_float+0x15c>
 80075ce:	b913      	cbnz	r3, 80075d6 <_printf_float+0x1aa>
 80075d0:	6822      	ldr	r2, [r4, #0]
 80075d2:	07d2      	lsls	r2, r2, #31
 80075d4:	d501      	bpl.n	80075da <_printf_float+0x1ae>
 80075d6:	3302      	adds	r3, #2
 80075d8:	e7f4      	b.n	80075c4 <_printf_float+0x198>
 80075da:	2301      	movs	r3, #1
 80075dc:	e7f2      	b.n	80075c4 <_printf_float+0x198>
 80075de:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80075e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075e4:	4299      	cmp	r1, r3
 80075e6:	db05      	blt.n	80075f4 <_printf_float+0x1c8>
 80075e8:	6823      	ldr	r3, [r4, #0]
 80075ea:	6121      	str	r1, [r4, #16]
 80075ec:	07d8      	lsls	r0, r3, #31
 80075ee:	d5ea      	bpl.n	80075c6 <_printf_float+0x19a>
 80075f0:	1c4b      	adds	r3, r1, #1
 80075f2:	e7e7      	b.n	80075c4 <_printf_float+0x198>
 80075f4:	2900      	cmp	r1, #0
 80075f6:	bfcc      	ite	gt
 80075f8:	2201      	movgt	r2, #1
 80075fa:	f1c1 0202 	rsble	r2, r1, #2
 80075fe:	4413      	add	r3, r2
 8007600:	e7e0      	b.n	80075c4 <_printf_float+0x198>
 8007602:	6823      	ldr	r3, [r4, #0]
 8007604:	055a      	lsls	r2, r3, #21
 8007606:	d407      	bmi.n	8007618 <_printf_float+0x1ec>
 8007608:	6923      	ldr	r3, [r4, #16]
 800760a:	4642      	mov	r2, r8
 800760c:	4631      	mov	r1, r6
 800760e:	4628      	mov	r0, r5
 8007610:	47b8      	blx	r7
 8007612:	3001      	adds	r0, #1
 8007614:	d12b      	bne.n	800766e <_printf_float+0x242>
 8007616:	e764      	b.n	80074e2 <_printf_float+0xb6>
 8007618:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800761c:	f240 80dc 	bls.w	80077d8 <_printf_float+0x3ac>
 8007620:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007624:	2200      	movs	r2, #0
 8007626:	2300      	movs	r3, #0
 8007628:	f7f9 f9be 	bl	80009a8 <__aeabi_dcmpeq>
 800762c:	2800      	cmp	r0, #0
 800762e:	d033      	beq.n	8007698 <_printf_float+0x26c>
 8007630:	2301      	movs	r3, #1
 8007632:	4631      	mov	r1, r6
 8007634:	4628      	mov	r0, r5
 8007636:	4a35      	ldr	r2, [pc, #212]	@ (800770c <_printf_float+0x2e0>)
 8007638:	47b8      	blx	r7
 800763a:	3001      	adds	r0, #1
 800763c:	f43f af51 	beq.w	80074e2 <_printf_float+0xb6>
 8007640:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8007644:	4543      	cmp	r3, r8
 8007646:	db02      	blt.n	800764e <_printf_float+0x222>
 8007648:	6823      	ldr	r3, [r4, #0]
 800764a:	07d8      	lsls	r0, r3, #31
 800764c:	d50f      	bpl.n	800766e <_printf_float+0x242>
 800764e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007652:	4631      	mov	r1, r6
 8007654:	4628      	mov	r0, r5
 8007656:	47b8      	blx	r7
 8007658:	3001      	adds	r0, #1
 800765a:	f43f af42 	beq.w	80074e2 <_printf_float+0xb6>
 800765e:	f04f 0900 	mov.w	r9, #0
 8007662:	f108 38ff 	add.w	r8, r8, #4294967295
 8007666:	f104 0a1a 	add.w	sl, r4, #26
 800766a:	45c8      	cmp	r8, r9
 800766c:	dc09      	bgt.n	8007682 <_printf_float+0x256>
 800766e:	6823      	ldr	r3, [r4, #0]
 8007670:	079b      	lsls	r3, r3, #30
 8007672:	f100 8102 	bmi.w	800787a <_printf_float+0x44e>
 8007676:	68e0      	ldr	r0, [r4, #12]
 8007678:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800767a:	4298      	cmp	r0, r3
 800767c:	bfb8      	it	lt
 800767e:	4618      	movlt	r0, r3
 8007680:	e731      	b.n	80074e6 <_printf_float+0xba>
 8007682:	2301      	movs	r3, #1
 8007684:	4652      	mov	r2, sl
 8007686:	4631      	mov	r1, r6
 8007688:	4628      	mov	r0, r5
 800768a:	47b8      	blx	r7
 800768c:	3001      	adds	r0, #1
 800768e:	f43f af28 	beq.w	80074e2 <_printf_float+0xb6>
 8007692:	f109 0901 	add.w	r9, r9, #1
 8007696:	e7e8      	b.n	800766a <_printf_float+0x23e>
 8007698:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800769a:	2b00      	cmp	r3, #0
 800769c:	dc38      	bgt.n	8007710 <_printf_float+0x2e4>
 800769e:	2301      	movs	r3, #1
 80076a0:	4631      	mov	r1, r6
 80076a2:	4628      	mov	r0, r5
 80076a4:	4a19      	ldr	r2, [pc, #100]	@ (800770c <_printf_float+0x2e0>)
 80076a6:	47b8      	blx	r7
 80076a8:	3001      	adds	r0, #1
 80076aa:	f43f af1a 	beq.w	80074e2 <_printf_float+0xb6>
 80076ae:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80076b2:	ea59 0303 	orrs.w	r3, r9, r3
 80076b6:	d102      	bne.n	80076be <_printf_float+0x292>
 80076b8:	6823      	ldr	r3, [r4, #0]
 80076ba:	07d9      	lsls	r1, r3, #31
 80076bc:	d5d7      	bpl.n	800766e <_printf_float+0x242>
 80076be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80076c2:	4631      	mov	r1, r6
 80076c4:	4628      	mov	r0, r5
 80076c6:	47b8      	blx	r7
 80076c8:	3001      	adds	r0, #1
 80076ca:	f43f af0a 	beq.w	80074e2 <_printf_float+0xb6>
 80076ce:	f04f 0a00 	mov.w	sl, #0
 80076d2:	f104 0b1a 	add.w	fp, r4, #26
 80076d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80076d8:	425b      	negs	r3, r3
 80076da:	4553      	cmp	r3, sl
 80076dc:	dc01      	bgt.n	80076e2 <_printf_float+0x2b6>
 80076de:	464b      	mov	r3, r9
 80076e0:	e793      	b.n	800760a <_printf_float+0x1de>
 80076e2:	2301      	movs	r3, #1
 80076e4:	465a      	mov	r2, fp
 80076e6:	4631      	mov	r1, r6
 80076e8:	4628      	mov	r0, r5
 80076ea:	47b8      	blx	r7
 80076ec:	3001      	adds	r0, #1
 80076ee:	f43f aef8 	beq.w	80074e2 <_printf_float+0xb6>
 80076f2:	f10a 0a01 	add.w	sl, sl, #1
 80076f6:	e7ee      	b.n	80076d6 <_printf_float+0x2aa>
 80076f8:	7fefffff 	.word	0x7fefffff
 80076fc:	0800a323 	.word	0x0800a323
 8007700:	0800a327 	.word	0x0800a327
 8007704:	0800a32b 	.word	0x0800a32b
 8007708:	0800a32f 	.word	0x0800a32f
 800770c:	0800a333 	.word	0x0800a333
 8007710:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007712:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007716:	4553      	cmp	r3, sl
 8007718:	bfa8      	it	ge
 800771a:	4653      	movge	r3, sl
 800771c:	2b00      	cmp	r3, #0
 800771e:	4699      	mov	r9, r3
 8007720:	dc36      	bgt.n	8007790 <_printf_float+0x364>
 8007722:	f04f 0b00 	mov.w	fp, #0
 8007726:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800772a:	f104 021a 	add.w	r2, r4, #26
 800772e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007730:	930a      	str	r3, [sp, #40]	@ 0x28
 8007732:	eba3 0309 	sub.w	r3, r3, r9
 8007736:	455b      	cmp	r3, fp
 8007738:	dc31      	bgt.n	800779e <_printf_float+0x372>
 800773a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800773c:	459a      	cmp	sl, r3
 800773e:	dc3a      	bgt.n	80077b6 <_printf_float+0x38a>
 8007740:	6823      	ldr	r3, [r4, #0]
 8007742:	07da      	lsls	r2, r3, #31
 8007744:	d437      	bmi.n	80077b6 <_printf_float+0x38a>
 8007746:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007748:	ebaa 0903 	sub.w	r9, sl, r3
 800774c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800774e:	ebaa 0303 	sub.w	r3, sl, r3
 8007752:	4599      	cmp	r9, r3
 8007754:	bfa8      	it	ge
 8007756:	4699      	movge	r9, r3
 8007758:	f1b9 0f00 	cmp.w	r9, #0
 800775c:	dc33      	bgt.n	80077c6 <_printf_float+0x39a>
 800775e:	f04f 0800 	mov.w	r8, #0
 8007762:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007766:	f104 0b1a 	add.w	fp, r4, #26
 800776a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800776c:	ebaa 0303 	sub.w	r3, sl, r3
 8007770:	eba3 0309 	sub.w	r3, r3, r9
 8007774:	4543      	cmp	r3, r8
 8007776:	f77f af7a 	ble.w	800766e <_printf_float+0x242>
 800777a:	2301      	movs	r3, #1
 800777c:	465a      	mov	r2, fp
 800777e:	4631      	mov	r1, r6
 8007780:	4628      	mov	r0, r5
 8007782:	47b8      	blx	r7
 8007784:	3001      	adds	r0, #1
 8007786:	f43f aeac 	beq.w	80074e2 <_printf_float+0xb6>
 800778a:	f108 0801 	add.w	r8, r8, #1
 800778e:	e7ec      	b.n	800776a <_printf_float+0x33e>
 8007790:	4642      	mov	r2, r8
 8007792:	4631      	mov	r1, r6
 8007794:	4628      	mov	r0, r5
 8007796:	47b8      	blx	r7
 8007798:	3001      	adds	r0, #1
 800779a:	d1c2      	bne.n	8007722 <_printf_float+0x2f6>
 800779c:	e6a1      	b.n	80074e2 <_printf_float+0xb6>
 800779e:	2301      	movs	r3, #1
 80077a0:	4631      	mov	r1, r6
 80077a2:	4628      	mov	r0, r5
 80077a4:	920a      	str	r2, [sp, #40]	@ 0x28
 80077a6:	47b8      	blx	r7
 80077a8:	3001      	adds	r0, #1
 80077aa:	f43f ae9a 	beq.w	80074e2 <_printf_float+0xb6>
 80077ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80077b0:	f10b 0b01 	add.w	fp, fp, #1
 80077b4:	e7bb      	b.n	800772e <_printf_float+0x302>
 80077b6:	4631      	mov	r1, r6
 80077b8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80077bc:	4628      	mov	r0, r5
 80077be:	47b8      	blx	r7
 80077c0:	3001      	adds	r0, #1
 80077c2:	d1c0      	bne.n	8007746 <_printf_float+0x31a>
 80077c4:	e68d      	b.n	80074e2 <_printf_float+0xb6>
 80077c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80077c8:	464b      	mov	r3, r9
 80077ca:	4631      	mov	r1, r6
 80077cc:	4628      	mov	r0, r5
 80077ce:	4442      	add	r2, r8
 80077d0:	47b8      	blx	r7
 80077d2:	3001      	adds	r0, #1
 80077d4:	d1c3      	bne.n	800775e <_printf_float+0x332>
 80077d6:	e684      	b.n	80074e2 <_printf_float+0xb6>
 80077d8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80077dc:	f1ba 0f01 	cmp.w	sl, #1
 80077e0:	dc01      	bgt.n	80077e6 <_printf_float+0x3ba>
 80077e2:	07db      	lsls	r3, r3, #31
 80077e4:	d536      	bpl.n	8007854 <_printf_float+0x428>
 80077e6:	2301      	movs	r3, #1
 80077e8:	4642      	mov	r2, r8
 80077ea:	4631      	mov	r1, r6
 80077ec:	4628      	mov	r0, r5
 80077ee:	47b8      	blx	r7
 80077f0:	3001      	adds	r0, #1
 80077f2:	f43f ae76 	beq.w	80074e2 <_printf_float+0xb6>
 80077f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80077fa:	4631      	mov	r1, r6
 80077fc:	4628      	mov	r0, r5
 80077fe:	47b8      	blx	r7
 8007800:	3001      	adds	r0, #1
 8007802:	f43f ae6e 	beq.w	80074e2 <_printf_float+0xb6>
 8007806:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800780a:	2200      	movs	r2, #0
 800780c:	2300      	movs	r3, #0
 800780e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007812:	f7f9 f8c9 	bl	80009a8 <__aeabi_dcmpeq>
 8007816:	b9c0      	cbnz	r0, 800784a <_printf_float+0x41e>
 8007818:	4653      	mov	r3, sl
 800781a:	f108 0201 	add.w	r2, r8, #1
 800781e:	4631      	mov	r1, r6
 8007820:	4628      	mov	r0, r5
 8007822:	47b8      	blx	r7
 8007824:	3001      	adds	r0, #1
 8007826:	d10c      	bne.n	8007842 <_printf_float+0x416>
 8007828:	e65b      	b.n	80074e2 <_printf_float+0xb6>
 800782a:	2301      	movs	r3, #1
 800782c:	465a      	mov	r2, fp
 800782e:	4631      	mov	r1, r6
 8007830:	4628      	mov	r0, r5
 8007832:	47b8      	blx	r7
 8007834:	3001      	adds	r0, #1
 8007836:	f43f ae54 	beq.w	80074e2 <_printf_float+0xb6>
 800783a:	f108 0801 	add.w	r8, r8, #1
 800783e:	45d0      	cmp	r8, sl
 8007840:	dbf3      	blt.n	800782a <_printf_float+0x3fe>
 8007842:	464b      	mov	r3, r9
 8007844:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007848:	e6e0      	b.n	800760c <_printf_float+0x1e0>
 800784a:	f04f 0800 	mov.w	r8, #0
 800784e:	f104 0b1a 	add.w	fp, r4, #26
 8007852:	e7f4      	b.n	800783e <_printf_float+0x412>
 8007854:	2301      	movs	r3, #1
 8007856:	4642      	mov	r2, r8
 8007858:	e7e1      	b.n	800781e <_printf_float+0x3f2>
 800785a:	2301      	movs	r3, #1
 800785c:	464a      	mov	r2, r9
 800785e:	4631      	mov	r1, r6
 8007860:	4628      	mov	r0, r5
 8007862:	47b8      	blx	r7
 8007864:	3001      	adds	r0, #1
 8007866:	f43f ae3c 	beq.w	80074e2 <_printf_float+0xb6>
 800786a:	f108 0801 	add.w	r8, r8, #1
 800786e:	68e3      	ldr	r3, [r4, #12]
 8007870:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007872:	1a5b      	subs	r3, r3, r1
 8007874:	4543      	cmp	r3, r8
 8007876:	dcf0      	bgt.n	800785a <_printf_float+0x42e>
 8007878:	e6fd      	b.n	8007676 <_printf_float+0x24a>
 800787a:	f04f 0800 	mov.w	r8, #0
 800787e:	f104 0919 	add.w	r9, r4, #25
 8007882:	e7f4      	b.n	800786e <_printf_float+0x442>

08007884 <_printf_common>:
 8007884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007888:	4616      	mov	r6, r2
 800788a:	4698      	mov	r8, r3
 800788c:	688a      	ldr	r2, [r1, #8]
 800788e:	690b      	ldr	r3, [r1, #16]
 8007890:	4607      	mov	r7, r0
 8007892:	4293      	cmp	r3, r2
 8007894:	bfb8      	it	lt
 8007896:	4613      	movlt	r3, r2
 8007898:	6033      	str	r3, [r6, #0]
 800789a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800789e:	460c      	mov	r4, r1
 80078a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80078a4:	b10a      	cbz	r2, 80078aa <_printf_common+0x26>
 80078a6:	3301      	adds	r3, #1
 80078a8:	6033      	str	r3, [r6, #0]
 80078aa:	6823      	ldr	r3, [r4, #0]
 80078ac:	0699      	lsls	r1, r3, #26
 80078ae:	bf42      	ittt	mi
 80078b0:	6833      	ldrmi	r3, [r6, #0]
 80078b2:	3302      	addmi	r3, #2
 80078b4:	6033      	strmi	r3, [r6, #0]
 80078b6:	6825      	ldr	r5, [r4, #0]
 80078b8:	f015 0506 	ands.w	r5, r5, #6
 80078bc:	d106      	bne.n	80078cc <_printf_common+0x48>
 80078be:	f104 0a19 	add.w	sl, r4, #25
 80078c2:	68e3      	ldr	r3, [r4, #12]
 80078c4:	6832      	ldr	r2, [r6, #0]
 80078c6:	1a9b      	subs	r3, r3, r2
 80078c8:	42ab      	cmp	r3, r5
 80078ca:	dc2b      	bgt.n	8007924 <_printf_common+0xa0>
 80078cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80078d0:	6822      	ldr	r2, [r4, #0]
 80078d2:	3b00      	subs	r3, #0
 80078d4:	bf18      	it	ne
 80078d6:	2301      	movne	r3, #1
 80078d8:	0692      	lsls	r2, r2, #26
 80078da:	d430      	bmi.n	800793e <_printf_common+0xba>
 80078dc:	4641      	mov	r1, r8
 80078de:	4638      	mov	r0, r7
 80078e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80078e4:	47c8      	blx	r9
 80078e6:	3001      	adds	r0, #1
 80078e8:	d023      	beq.n	8007932 <_printf_common+0xae>
 80078ea:	6823      	ldr	r3, [r4, #0]
 80078ec:	6922      	ldr	r2, [r4, #16]
 80078ee:	f003 0306 	and.w	r3, r3, #6
 80078f2:	2b04      	cmp	r3, #4
 80078f4:	bf14      	ite	ne
 80078f6:	2500      	movne	r5, #0
 80078f8:	6833      	ldreq	r3, [r6, #0]
 80078fa:	f04f 0600 	mov.w	r6, #0
 80078fe:	bf08      	it	eq
 8007900:	68e5      	ldreq	r5, [r4, #12]
 8007902:	f104 041a 	add.w	r4, r4, #26
 8007906:	bf08      	it	eq
 8007908:	1aed      	subeq	r5, r5, r3
 800790a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800790e:	bf08      	it	eq
 8007910:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007914:	4293      	cmp	r3, r2
 8007916:	bfc4      	itt	gt
 8007918:	1a9b      	subgt	r3, r3, r2
 800791a:	18ed      	addgt	r5, r5, r3
 800791c:	42b5      	cmp	r5, r6
 800791e:	d11a      	bne.n	8007956 <_printf_common+0xd2>
 8007920:	2000      	movs	r0, #0
 8007922:	e008      	b.n	8007936 <_printf_common+0xb2>
 8007924:	2301      	movs	r3, #1
 8007926:	4652      	mov	r2, sl
 8007928:	4641      	mov	r1, r8
 800792a:	4638      	mov	r0, r7
 800792c:	47c8      	blx	r9
 800792e:	3001      	adds	r0, #1
 8007930:	d103      	bne.n	800793a <_printf_common+0xb6>
 8007932:	f04f 30ff 	mov.w	r0, #4294967295
 8007936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800793a:	3501      	adds	r5, #1
 800793c:	e7c1      	b.n	80078c2 <_printf_common+0x3e>
 800793e:	2030      	movs	r0, #48	@ 0x30
 8007940:	18e1      	adds	r1, r4, r3
 8007942:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007946:	1c5a      	adds	r2, r3, #1
 8007948:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800794c:	4422      	add	r2, r4
 800794e:	3302      	adds	r3, #2
 8007950:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007954:	e7c2      	b.n	80078dc <_printf_common+0x58>
 8007956:	2301      	movs	r3, #1
 8007958:	4622      	mov	r2, r4
 800795a:	4641      	mov	r1, r8
 800795c:	4638      	mov	r0, r7
 800795e:	47c8      	blx	r9
 8007960:	3001      	adds	r0, #1
 8007962:	d0e6      	beq.n	8007932 <_printf_common+0xae>
 8007964:	3601      	adds	r6, #1
 8007966:	e7d9      	b.n	800791c <_printf_common+0x98>

08007968 <_printf_i>:
 8007968:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800796c:	7e0f      	ldrb	r7, [r1, #24]
 800796e:	4691      	mov	r9, r2
 8007970:	2f78      	cmp	r7, #120	@ 0x78
 8007972:	4680      	mov	r8, r0
 8007974:	460c      	mov	r4, r1
 8007976:	469a      	mov	sl, r3
 8007978:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800797a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800797e:	d807      	bhi.n	8007990 <_printf_i+0x28>
 8007980:	2f62      	cmp	r7, #98	@ 0x62
 8007982:	d80a      	bhi.n	800799a <_printf_i+0x32>
 8007984:	2f00      	cmp	r7, #0
 8007986:	f000 80d3 	beq.w	8007b30 <_printf_i+0x1c8>
 800798a:	2f58      	cmp	r7, #88	@ 0x58
 800798c:	f000 80ba 	beq.w	8007b04 <_printf_i+0x19c>
 8007990:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007994:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007998:	e03a      	b.n	8007a10 <_printf_i+0xa8>
 800799a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800799e:	2b15      	cmp	r3, #21
 80079a0:	d8f6      	bhi.n	8007990 <_printf_i+0x28>
 80079a2:	a101      	add	r1, pc, #4	@ (adr r1, 80079a8 <_printf_i+0x40>)
 80079a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079a8:	08007a01 	.word	0x08007a01
 80079ac:	08007a15 	.word	0x08007a15
 80079b0:	08007991 	.word	0x08007991
 80079b4:	08007991 	.word	0x08007991
 80079b8:	08007991 	.word	0x08007991
 80079bc:	08007991 	.word	0x08007991
 80079c0:	08007a15 	.word	0x08007a15
 80079c4:	08007991 	.word	0x08007991
 80079c8:	08007991 	.word	0x08007991
 80079cc:	08007991 	.word	0x08007991
 80079d0:	08007991 	.word	0x08007991
 80079d4:	08007b17 	.word	0x08007b17
 80079d8:	08007a3f 	.word	0x08007a3f
 80079dc:	08007ad1 	.word	0x08007ad1
 80079e0:	08007991 	.word	0x08007991
 80079e4:	08007991 	.word	0x08007991
 80079e8:	08007b39 	.word	0x08007b39
 80079ec:	08007991 	.word	0x08007991
 80079f0:	08007a3f 	.word	0x08007a3f
 80079f4:	08007991 	.word	0x08007991
 80079f8:	08007991 	.word	0x08007991
 80079fc:	08007ad9 	.word	0x08007ad9
 8007a00:	6833      	ldr	r3, [r6, #0]
 8007a02:	1d1a      	adds	r2, r3, #4
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	6032      	str	r2, [r6, #0]
 8007a08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007a10:	2301      	movs	r3, #1
 8007a12:	e09e      	b.n	8007b52 <_printf_i+0x1ea>
 8007a14:	6833      	ldr	r3, [r6, #0]
 8007a16:	6820      	ldr	r0, [r4, #0]
 8007a18:	1d19      	adds	r1, r3, #4
 8007a1a:	6031      	str	r1, [r6, #0]
 8007a1c:	0606      	lsls	r6, r0, #24
 8007a1e:	d501      	bpl.n	8007a24 <_printf_i+0xbc>
 8007a20:	681d      	ldr	r5, [r3, #0]
 8007a22:	e003      	b.n	8007a2c <_printf_i+0xc4>
 8007a24:	0645      	lsls	r5, r0, #25
 8007a26:	d5fb      	bpl.n	8007a20 <_printf_i+0xb8>
 8007a28:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007a2c:	2d00      	cmp	r5, #0
 8007a2e:	da03      	bge.n	8007a38 <_printf_i+0xd0>
 8007a30:	232d      	movs	r3, #45	@ 0x2d
 8007a32:	426d      	negs	r5, r5
 8007a34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a38:	230a      	movs	r3, #10
 8007a3a:	4859      	ldr	r0, [pc, #356]	@ (8007ba0 <_printf_i+0x238>)
 8007a3c:	e011      	b.n	8007a62 <_printf_i+0xfa>
 8007a3e:	6821      	ldr	r1, [r4, #0]
 8007a40:	6833      	ldr	r3, [r6, #0]
 8007a42:	0608      	lsls	r0, r1, #24
 8007a44:	f853 5b04 	ldr.w	r5, [r3], #4
 8007a48:	d402      	bmi.n	8007a50 <_printf_i+0xe8>
 8007a4a:	0649      	lsls	r1, r1, #25
 8007a4c:	bf48      	it	mi
 8007a4e:	b2ad      	uxthmi	r5, r5
 8007a50:	2f6f      	cmp	r7, #111	@ 0x6f
 8007a52:	6033      	str	r3, [r6, #0]
 8007a54:	bf14      	ite	ne
 8007a56:	230a      	movne	r3, #10
 8007a58:	2308      	moveq	r3, #8
 8007a5a:	4851      	ldr	r0, [pc, #324]	@ (8007ba0 <_printf_i+0x238>)
 8007a5c:	2100      	movs	r1, #0
 8007a5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007a62:	6866      	ldr	r6, [r4, #4]
 8007a64:	2e00      	cmp	r6, #0
 8007a66:	bfa8      	it	ge
 8007a68:	6821      	ldrge	r1, [r4, #0]
 8007a6a:	60a6      	str	r6, [r4, #8]
 8007a6c:	bfa4      	itt	ge
 8007a6e:	f021 0104 	bicge.w	r1, r1, #4
 8007a72:	6021      	strge	r1, [r4, #0]
 8007a74:	b90d      	cbnz	r5, 8007a7a <_printf_i+0x112>
 8007a76:	2e00      	cmp	r6, #0
 8007a78:	d04b      	beq.n	8007b12 <_printf_i+0x1aa>
 8007a7a:	4616      	mov	r6, r2
 8007a7c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a80:	fb03 5711 	mls	r7, r3, r1, r5
 8007a84:	5dc7      	ldrb	r7, [r0, r7]
 8007a86:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a8a:	462f      	mov	r7, r5
 8007a8c:	42bb      	cmp	r3, r7
 8007a8e:	460d      	mov	r5, r1
 8007a90:	d9f4      	bls.n	8007a7c <_printf_i+0x114>
 8007a92:	2b08      	cmp	r3, #8
 8007a94:	d10b      	bne.n	8007aae <_printf_i+0x146>
 8007a96:	6823      	ldr	r3, [r4, #0]
 8007a98:	07df      	lsls	r7, r3, #31
 8007a9a:	d508      	bpl.n	8007aae <_printf_i+0x146>
 8007a9c:	6923      	ldr	r3, [r4, #16]
 8007a9e:	6861      	ldr	r1, [r4, #4]
 8007aa0:	4299      	cmp	r1, r3
 8007aa2:	bfde      	ittt	le
 8007aa4:	2330      	movle	r3, #48	@ 0x30
 8007aa6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007aaa:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007aae:	1b92      	subs	r2, r2, r6
 8007ab0:	6122      	str	r2, [r4, #16]
 8007ab2:	464b      	mov	r3, r9
 8007ab4:	4621      	mov	r1, r4
 8007ab6:	4640      	mov	r0, r8
 8007ab8:	f8cd a000 	str.w	sl, [sp]
 8007abc:	aa03      	add	r2, sp, #12
 8007abe:	f7ff fee1 	bl	8007884 <_printf_common>
 8007ac2:	3001      	adds	r0, #1
 8007ac4:	d14a      	bne.n	8007b5c <_printf_i+0x1f4>
 8007ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8007aca:	b004      	add	sp, #16
 8007acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ad0:	6823      	ldr	r3, [r4, #0]
 8007ad2:	f043 0320 	orr.w	r3, r3, #32
 8007ad6:	6023      	str	r3, [r4, #0]
 8007ad8:	2778      	movs	r7, #120	@ 0x78
 8007ada:	4832      	ldr	r0, [pc, #200]	@ (8007ba4 <_printf_i+0x23c>)
 8007adc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007ae0:	6823      	ldr	r3, [r4, #0]
 8007ae2:	6831      	ldr	r1, [r6, #0]
 8007ae4:	061f      	lsls	r7, r3, #24
 8007ae6:	f851 5b04 	ldr.w	r5, [r1], #4
 8007aea:	d402      	bmi.n	8007af2 <_printf_i+0x18a>
 8007aec:	065f      	lsls	r7, r3, #25
 8007aee:	bf48      	it	mi
 8007af0:	b2ad      	uxthmi	r5, r5
 8007af2:	6031      	str	r1, [r6, #0]
 8007af4:	07d9      	lsls	r1, r3, #31
 8007af6:	bf44      	itt	mi
 8007af8:	f043 0320 	orrmi.w	r3, r3, #32
 8007afc:	6023      	strmi	r3, [r4, #0]
 8007afe:	b11d      	cbz	r5, 8007b08 <_printf_i+0x1a0>
 8007b00:	2310      	movs	r3, #16
 8007b02:	e7ab      	b.n	8007a5c <_printf_i+0xf4>
 8007b04:	4826      	ldr	r0, [pc, #152]	@ (8007ba0 <_printf_i+0x238>)
 8007b06:	e7e9      	b.n	8007adc <_printf_i+0x174>
 8007b08:	6823      	ldr	r3, [r4, #0]
 8007b0a:	f023 0320 	bic.w	r3, r3, #32
 8007b0e:	6023      	str	r3, [r4, #0]
 8007b10:	e7f6      	b.n	8007b00 <_printf_i+0x198>
 8007b12:	4616      	mov	r6, r2
 8007b14:	e7bd      	b.n	8007a92 <_printf_i+0x12a>
 8007b16:	6833      	ldr	r3, [r6, #0]
 8007b18:	6825      	ldr	r5, [r4, #0]
 8007b1a:	1d18      	adds	r0, r3, #4
 8007b1c:	6961      	ldr	r1, [r4, #20]
 8007b1e:	6030      	str	r0, [r6, #0]
 8007b20:	062e      	lsls	r6, r5, #24
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	d501      	bpl.n	8007b2a <_printf_i+0x1c2>
 8007b26:	6019      	str	r1, [r3, #0]
 8007b28:	e002      	b.n	8007b30 <_printf_i+0x1c8>
 8007b2a:	0668      	lsls	r0, r5, #25
 8007b2c:	d5fb      	bpl.n	8007b26 <_printf_i+0x1be>
 8007b2e:	8019      	strh	r1, [r3, #0]
 8007b30:	2300      	movs	r3, #0
 8007b32:	4616      	mov	r6, r2
 8007b34:	6123      	str	r3, [r4, #16]
 8007b36:	e7bc      	b.n	8007ab2 <_printf_i+0x14a>
 8007b38:	6833      	ldr	r3, [r6, #0]
 8007b3a:	2100      	movs	r1, #0
 8007b3c:	1d1a      	adds	r2, r3, #4
 8007b3e:	6032      	str	r2, [r6, #0]
 8007b40:	681e      	ldr	r6, [r3, #0]
 8007b42:	6862      	ldr	r2, [r4, #4]
 8007b44:	4630      	mov	r0, r6
 8007b46:	f000 fa56 	bl	8007ff6 <memchr>
 8007b4a:	b108      	cbz	r0, 8007b50 <_printf_i+0x1e8>
 8007b4c:	1b80      	subs	r0, r0, r6
 8007b4e:	6060      	str	r0, [r4, #4]
 8007b50:	6863      	ldr	r3, [r4, #4]
 8007b52:	6123      	str	r3, [r4, #16]
 8007b54:	2300      	movs	r3, #0
 8007b56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b5a:	e7aa      	b.n	8007ab2 <_printf_i+0x14a>
 8007b5c:	4632      	mov	r2, r6
 8007b5e:	4649      	mov	r1, r9
 8007b60:	4640      	mov	r0, r8
 8007b62:	6923      	ldr	r3, [r4, #16]
 8007b64:	47d0      	blx	sl
 8007b66:	3001      	adds	r0, #1
 8007b68:	d0ad      	beq.n	8007ac6 <_printf_i+0x15e>
 8007b6a:	6823      	ldr	r3, [r4, #0]
 8007b6c:	079b      	lsls	r3, r3, #30
 8007b6e:	d413      	bmi.n	8007b98 <_printf_i+0x230>
 8007b70:	68e0      	ldr	r0, [r4, #12]
 8007b72:	9b03      	ldr	r3, [sp, #12]
 8007b74:	4298      	cmp	r0, r3
 8007b76:	bfb8      	it	lt
 8007b78:	4618      	movlt	r0, r3
 8007b7a:	e7a6      	b.n	8007aca <_printf_i+0x162>
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	4632      	mov	r2, r6
 8007b80:	4649      	mov	r1, r9
 8007b82:	4640      	mov	r0, r8
 8007b84:	47d0      	blx	sl
 8007b86:	3001      	adds	r0, #1
 8007b88:	d09d      	beq.n	8007ac6 <_printf_i+0x15e>
 8007b8a:	3501      	adds	r5, #1
 8007b8c:	68e3      	ldr	r3, [r4, #12]
 8007b8e:	9903      	ldr	r1, [sp, #12]
 8007b90:	1a5b      	subs	r3, r3, r1
 8007b92:	42ab      	cmp	r3, r5
 8007b94:	dcf2      	bgt.n	8007b7c <_printf_i+0x214>
 8007b96:	e7eb      	b.n	8007b70 <_printf_i+0x208>
 8007b98:	2500      	movs	r5, #0
 8007b9a:	f104 0619 	add.w	r6, r4, #25
 8007b9e:	e7f5      	b.n	8007b8c <_printf_i+0x224>
 8007ba0:	0800a335 	.word	0x0800a335
 8007ba4:	0800a346 	.word	0x0800a346

08007ba8 <std>:
 8007ba8:	2300      	movs	r3, #0
 8007baa:	b510      	push	{r4, lr}
 8007bac:	4604      	mov	r4, r0
 8007bae:	e9c0 3300 	strd	r3, r3, [r0]
 8007bb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007bb6:	6083      	str	r3, [r0, #8]
 8007bb8:	8181      	strh	r1, [r0, #12]
 8007bba:	6643      	str	r3, [r0, #100]	@ 0x64
 8007bbc:	81c2      	strh	r2, [r0, #14]
 8007bbe:	6183      	str	r3, [r0, #24]
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	2208      	movs	r2, #8
 8007bc4:	305c      	adds	r0, #92	@ 0x5c
 8007bc6:	f000 f92e 	bl	8007e26 <memset>
 8007bca:	4b0d      	ldr	r3, [pc, #52]	@ (8007c00 <std+0x58>)
 8007bcc:	6224      	str	r4, [r4, #32]
 8007bce:	6263      	str	r3, [r4, #36]	@ 0x24
 8007bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8007c04 <std+0x5c>)
 8007bd2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8007c08 <std+0x60>)
 8007bd6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8007c0c <std+0x64>)
 8007bda:	6323      	str	r3, [r4, #48]	@ 0x30
 8007bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8007c10 <std+0x68>)
 8007bde:	429c      	cmp	r4, r3
 8007be0:	d006      	beq.n	8007bf0 <std+0x48>
 8007be2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007be6:	4294      	cmp	r4, r2
 8007be8:	d002      	beq.n	8007bf0 <std+0x48>
 8007bea:	33d0      	adds	r3, #208	@ 0xd0
 8007bec:	429c      	cmp	r4, r3
 8007bee:	d105      	bne.n	8007bfc <std+0x54>
 8007bf0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bf8:	f000 b9fa 	b.w	8007ff0 <__retarget_lock_init_recursive>
 8007bfc:	bd10      	pop	{r4, pc}
 8007bfe:	bf00      	nop
 8007c00:	08007d6d 	.word	0x08007d6d
 8007c04:	08007d8f 	.word	0x08007d8f
 8007c08:	08007dc7 	.word	0x08007dc7
 8007c0c:	08007deb 	.word	0x08007deb
 8007c10:	20004868 	.word	0x20004868

08007c14 <stdio_exit_handler>:
 8007c14:	4a02      	ldr	r2, [pc, #8]	@ (8007c20 <stdio_exit_handler+0xc>)
 8007c16:	4903      	ldr	r1, [pc, #12]	@ (8007c24 <stdio_exit_handler+0x10>)
 8007c18:	4803      	ldr	r0, [pc, #12]	@ (8007c28 <stdio_exit_handler+0x14>)
 8007c1a:	f000 b869 	b.w	8007cf0 <_fwalk_sglue>
 8007c1e:	bf00      	nop
 8007c20:	2000009c 	.word	0x2000009c
 8007c24:	0800997d 	.word	0x0800997d
 8007c28:	200000ac 	.word	0x200000ac

08007c2c <cleanup_stdio>:
 8007c2c:	6841      	ldr	r1, [r0, #4]
 8007c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8007c60 <cleanup_stdio+0x34>)
 8007c30:	b510      	push	{r4, lr}
 8007c32:	4299      	cmp	r1, r3
 8007c34:	4604      	mov	r4, r0
 8007c36:	d001      	beq.n	8007c3c <cleanup_stdio+0x10>
 8007c38:	f001 fea0 	bl	800997c <_fflush_r>
 8007c3c:	68a1      	ldr	r1, [r4, #8]
 8007c3e:	4b09      	ldr	r3, [pc, #36]	@ (8007c64 <cleanup_stdio+0x38>)
 8007c40:	4299      	cmp	r1, r3
 8007c42:	d002      	beq.n	8007c4a <cleanup_stdio+0x1e>
 8007c44:	4620      	mov	r0, r4
 8007c46:	f001 fe99 	bl	800997c <_fflush_r>
 8007c4a:	68e1      	ldr	r1, [r4, #12]
 8007c4c:	4b06      	ldr	r3, [pc, #24]	@ (8007c68 <cleanup_stdio+0x3c>)
 8007c4e:	4299      	cmp	r1, r3
 8007c50:	d004      	beq.n	8007c5c <cleanup_stdio+0x30>
 8007c52:	4620      	mov	r0, r4
 8007c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c58:	f001 be90 	b.w	800997c <_fflush_r>
 8007c5c:	bd10      	pop	{r4, pc}
 8007c5e:	bf00      	nop
 8007c60:	20004868 	.word	0x20004868
 8007c64:	200048d0 	.word	0x200048d0
 8007c68:	20004938 	.word	0x20004938

08007c6c <global_stdio_init.part.0>:
 8007c6c:	b510      	push	{r4, lr}
 8007c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8007c9c <global_stdio_init.part.0+0x30>)
 8007c70:	4c0b      	ldr	r4, [pc, #44]	@ (8007ca0 <global_stdio_init.part.0+0x34>)
 8007c72:	4a0c      	ldr	r2, [pc, #48]	@ (8007ca4 <global_stdio_init.part.0+0x38>)
 8007c74:	4620      	mov	r0, r4
 8007c76:	601a      	str	r2, [r3, #0]
 8007c78:	2104      	movs	r1, #4
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f7ff ff94 	bl	8007ba8 <std>
 8007c80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007c84:	2201      	movs	r2, #1
 8007c86:	2109      	movs	r1, #9
 8007c88:	f7ff ff8e 	bl	8007ba8 <std>
 8007c8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007c90:	2202      	movs	r2, #2
 8007c92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c96:	2112      	movs	r1, #18
 8007c98:	f7ff bf86 	b.w	8007ba8 <std>
 8007c9c:	200049a0 	.word	0x200049a0
 8007ca0:	20004868 	.word	0x20004868
 8007ca4:	08007c15 	.word	0x08007c15

08007ca8 <__sfp_lock_acquire>:
 8007ca8:	4801      	ldr	r0, [pc, #4]	@ (8007cb0 <__sfp_lock_acquire+0x8>)
 8007caa:	f000 b9a2 	b.w	8007ff2 <__retarget_lock_acquire_recursive>
 8007cae:	bf00      	nop
 8007cb0:	200049a9 	.word	0x200049a9

08007cb4 <__sfp_lock_release>:
 8007cb4:	4801      	ldr	r0, [pc, #4]	@ (8007cbc <__sfp_lock_release+0x8>)
 8007cb6:	f000 b99d 	b.w	8007ff4 <__retarget_lock_release_recursive>
 8007cba:	bf00      	nop
 8007cbc:	200049a9 	.word	0x200049a9

08007cc0 <__sinit>:
 8007cc0:	b510      	push	{r4, lr}
 8007cc2:	4604      	mov	r4, r0
 8007cc4:	f7ff fff0 	bl	8007ca8 <__sfp_lock_acquire>
 8007cc8:	6a23      	ldr	r3, [r4, #32]
 8007cca:	b11b      	cbz	r3, 8007cd4 <__sinit+0x14>
 8007ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cd0:	f7ff bff0 	b.w	8007cb4 <__sfp_lock_release>
 8007cd4:	4b04      	ldr	r3, [pc, #16]	@ (8007ce8 <__sinit+0x28>)
 8007cd6:	6223      	str	r3, [r4, #32]
 8007cd8:	4b04      	ldr	r3, [pc, #16]	@ (8007cec <__sinit+0x2c>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d1f5      	bne.n	8007ccc <__sinit+0xc>
 8007ce0:	f7ff ffc4 	bl	8007c6c <global_stdio_init.part.0>
 8007ce4:	e7f2      	b.n	8007ccc <__sinit+0xc>
 8007ce6:	bf00      	nop
 8007ce8:	08007c2d 	.word	0x08007c2d
 8007cec:	200049a0 	.word	0x200049a0

08007cf0 <_fwalk_sglue>:
 8007cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cf4:	4607      	mov	r7, r0
 8007cf6:	4688      	mov	r8, r1
 8007cf8:	4614      	mov	r4, r2
 8007cfa:	2600      	movs	r6, #0
 8007cfc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d00:	f1b9 0901 	subs.w	r9, r9, #1
 8007d04:	d505      	bpl.n	8007d12 <_fwalk_sglue+0x22>
 8007d06:	6824      	ldr	r4, [r4, #0]
 8007d08:	2c00      	cmp	r4, #0
 8007d0a:	d1f7      	bne.n	8007cfc <_fwalk_sglue+0xc>
 8007d0c:	4630      	mov	r0, r6
 8007d0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d12:	89ab      	ldrh	r3, [r5, #12]
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d907      	bls.n	8007d28 <_fwalk_sglue+0x38>
 8007d18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	d003      	beq.n	8007d28 <_fwalk_sglue+0x38>
 8007d20:	4629      	mov	r1, r5
 8007d22:	4638      	mov	r0, r7
 8007d24:	47c0      	blx	r8
 8007d26:	4306      	orrs	r6, r0
 8007d28:	3568      	adds	r5, #104	@ 0x68
 8007d2a:	e7e9      	b.n	8007d00 <_fwalk_sglue+0x10>

08007d2c <siprintf>:
 8007d2c:	b40e      	push	{r1, r2, r3}
 8007d2e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007d32:	b500      	push	{lr}
 8007d34:	b09c      	sub	sp, #112	@ 0x70
 8007d36:	ab1d      	add	r3, sp, #116	@ 0x74
 8007d38:	9002      	str	r0, [sp, #8]
 8007d3a:	9006      	str	r0, [sp, #24]
 8007d3c:	9107      	str	r1, [sp, #28]
 8007d3e:	9104      	str	r1, [sp, #16]
 8007d40:	4808      	ldr	r0, [pc, #32]	@ (8007d64 <siprintf+0x38>)
 8007d42:	4909      	ldr	r1, [pc, #36]	@ (8007d68 <siprintf+0x3c>)
 8007d44:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d48:	9105      	str	r1, [sp, #20]
 8007d4a:	6800      	ldr	r0, [r0, #0]
 8007d4c:	a902      	add	r1, sp, #8
 8007d4e:	9301      	str	r3, [sp, #4]
 8007d50:	f001 fc98 	bl	8009684 <_svfiprintf_r>
 8007d54:	2200      	movs	r2, #0
 8007d56:	9b02      	ldr	r3, [sp, #8]
 8007d58:	701a      	strb	r2, [r3, #0]
 8007d5a:	b01c      	add	sp, #112	@ 0x70
 8007d5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d60:	b003      	add	sp, #12
 8007d62:	4770      	bx	lr
 8007d64:	200000a8 	.word	0x200000a8
 8007d68:	ffff0208 	.word	0xffff0208

08007d6c <__sread>:
 8007d6c:	b510      	push	{r4, lr}
 8007d6e:	460c      	mov	r4, r1
 8007d70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d74:	f000 f8ee 	bl	8007f54 <_read_r>
 8007d78:	2800      	cmp	r0, #0
 8007d7a:	bfab      	itete	ge
 8007d7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007d7e:	89a3      	ldrhlt	r3, [r4, #12]
 8007d80:	181b      	addge	r3, r3, r0
 8007d82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007d86:	bfac      	ite	ge
 8007d88:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007d8a:	81a3      	strhlt	r3, [r4, #12]
 8007d8c:	bd10      	pop	{r4, pc}

08007d8e <__swrite>:
 8007d8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d92:	461f      	mov	r7, r3
 8007d94:	898b      	ldrh	r3, [r1, #12]
 8007d96:	4605      	mov	r5, r0
 8007d98:	05db      	lsls	r3, r3, #23
 8007d9a:	460c      	mov	r4, r1
 8007d9c:	4616      	mov	r6, r2
 8007d9e:	d505      	bpl.n	8007dac <__swrite+0x1e>
 8007da0:	2302      	movs	r3, #2
 8007da2:	2200      	movs	r2, #0
 8007da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007da8:	f000 f8c2 	bl	8007f30 <_lseek_r>
 8007dac:	89a3      	ldrh	r3, [r4, #12]
 8007dae:	4632      	mov	r2, r6
 8007db0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007db4:	81a3      	strh	r3, [r4, #12]
 8007db6:	4628      	mov	r0, r5
 8007db8:	463b      	mov	r3, r7
 8007dba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dc2:	f000 b8d9 	b.w	8007f78 <_write_r>

08007dc6 <__sseek>:
 8007dc6:	b510      	push	{r4, lr}
 8007dc8:	460c      	mov	r4, r1
 8007dca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dce:	f000 f8af 	bl	8007f30 <_lseek_r>
 8007dd2:	1c43      	adds	r3, r0, #1
 8007dd4:	89a3      	ldrh	r3, [r4, #12]
 8007dd6:	bf15      	itete	ne
 8007dd8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007dda:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007dde:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007de2:	81a3      	strheq	r3, [r4, #12]
 8007de4:	bf18      	it	ne
 8007de6:	81a3      	strhne	r3, [r4, #12]
 8007de8:	bd10      	pop	{r4, pc}

08007dea <__sclose>:
 8007dea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dee:	f000 b839 	b.w	8007e64 <_close_r>

08007df2 <memmove>:
 8007df2:	4288      	cmp	r0, r1
 8007df4:	b510      	push	{r4, lr}
 8007df6:	eb01 0402 	add.w	r4, r1, r2
 8007dfa:	d902      	bls.n	8007e02 <memmove+0x10>
 8007dfc:	4284      	cmp	r4, r0
 8007dfe:	4623      	mov	r3, r4
 8007e00:	d807      	bhi.n	8007e12 <memmove+0x20>
 8007e02:	1e43      	subs	r3, r0, #1
 8007e04:	42a1      	cmp	r1, r4
 8007e06:	d008      	beq.n	8007e1a <memmove+0x28>
 8007e08:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e0c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e10:	e7f8      	b.n	8007e04 <memmove+0x12>
 8007e12:	4601      	mov	r1, r0
 8007e14:	4402      	add	r2, r0
 8007e16:	428a      	cmp	r2, r1
 8007e18:	d100      	bne.n	8007e1c <memmove+0x2a>
 8007e1a:	bd10      	pop	{r4, pc}
 8007e1c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e20:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e24:	e7f7      	b.n	8007e16 <memmove+0x24>

08007e26 <memset>:
 8007e26:	4603      	mov	r3, r0
 8007e28:	4402      	add	r2, r0
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d100      	bne.n	8007e30 <memset+0xa>
 8007e2e:	4770      	bx	lr
 8007e30:	f803 1b01 	strb.w	r1, [r3], #1
 8007e34:	e7f9      	b.n	8007e2a <memset+0x4>

08007e36 <strncpy>:
 8007e36:	4603      	mov	r3, r0
 8007e38:	b510      	push	{r4, lr}
 8007e3a:	3901      	subs	r1, #1
 8007e3c:	b132      	cbz	r2, 8007e4c <strncpy+0x16>
 8007e3e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007e42:	3a01      	subs	r2, #1
 8007e44:	f803 4b01 	strb.w	r4, [r3], #1
 8007e48:	2c00      	cmp	r4, #0
 8007e4a:	d1f7      	bne.n	8007e3c <strncpy+0x6>
 8007e4c:	2100      	movs	r1, #0
 8007e4e:	441a      	add	r2, r3
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d100      	bne.n	8007e56 <strncpy+0x20>
 8007e54:	bd10      	pop	{r4, pc}
 8007e56:	f803 1b01 	strb.w	r1, [r3], #1
 8007e5a:	e7f9      	b.n	8007e50 <strncpy+0x1a>

08007e5c <_localeconv_r>:
 8007e5c:	4800      	ldr	r0, [pc, #0]	@ (8007e60 <_localeconv_r+0x4>)
 8007e5e:	4770      	bx	lr
 8007e60:	200001e8 	.word	0x200001e8

08007e64 <_close_r>:
 8007e64:	b538      	push	{r3, r4, r5, lr}
 8007e66:	2300      	movs	r3, #0
 8007e68:	4d05      	ldr	r5, [pc, #20]	@ (8007e80 <_close_r+0x1c>)
 8007e6a:	4604      	mov	r4, r0
 8007e6c:	4608      	mov	r0, r1
 8007e6e:	602b      	str	r3, [r5, #0]
 8007e70:	f7fa fda3 	bl	80029ba <_close>
 8007e74:	1c43      	adds	r3, r0, #1
 8007e76:	d102      	bne.n	8007e7e <_close_r+0x1a>
 8007e78:	682b      	ldr	r3, [r5, #0]
 8007e7a:	b103      	cbz	r3, 8007e7e <_close_r+0x1a>
 8007e7c:	6023      	str	r3, [r4, #0]
 8007e7e:	bd38      	pop	{r3, r4, r5, pc}
 8007e80:	200049a4 	.word	0x200049a4

08007e84 <_reclaim_reent>:
 8007e84:	4b29      	ldr	r3, [pc, #164]	@ (8007f2c <_reclaim_reent+0xa8>)
 8007e86:	b570      	push	{r4, r5, r6, lr}
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4604      	mov	r4, r0
 8007e8c:	4283      	cmp	r3, r0
 8007e8e:	d04b      	beq.n	8007f28 <_reclaim_reent+0xa4>
 8007e90:	69c3      	ldr	r3, [r0, #28]
 8007e92:	b1ab      	cbz	r3, 8007ec0 <_reclaim_reent+0x3c>
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	b16b      	cbz	r3, 8007eb4 <_reclaim_reent+0x30>
 8007e98:	2500      	movs	r5, #0
 8007e9a:	69e3      	ldr	r3, [r4, #28]
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	5959      	ldr	r1, [r3, r5]
 8007ea0:	2900      	cmp	r1, #0
 8007ea2:	d13b      	bne.n	8007f1c <_reclaim_reent+0x98>
 8007ea4:	3504      	adds	r5, #4
 8007ea6:	2d80      	cmp	r5, #128	@ 0x80
 8007ea8:	d1f7      	bne.n	8007e9a <_reclaim_reent+0x16>
 8007eaa:	69e3      	ldr	r3, [r4, #28]
 8007eac:	4620      	mov	r0, r4
 8007eae:	68d9      	ldr	r1, [r3, #12]
 8007eb0:	f000 ff0e 	bl	8008cd0 <_free_r>
 8007eb4:	69e3      	ldr	r3, [r4, #28]
 8007eb6:	6819      	ldr	r1, [r3, #0]
 8007eb8:	b111      	cbz	r1, 8007ec0 <_reclaim_reent+0x3c>
 8007eba:	4620      	mov	r0, r4
 8007ebc:	f000 ff08 	bl	8008cd0 <_free_r>
 8007ec0:	6961      	ldr	r1, [r4, #20]
 8007ec2:	b111      	cbz	r1, 8007eca <_reclaim_reent+0x46>
 8007ec4:	4620      	mov	r0, r4
 8007ec6:	f000 ff03 	bl	8008cd0 <_free_r>
 8007eca:	69e1      	ldr	r1, [r4, #28]
 8007ecc:	b111      	cbz	r1, 8007ed4 <_reclaim_reent+0x50>
 8007ece:	4620      	mov	r0, r4
 8007ed0:	f000 fefe 	bl	8008cd0 <_free_r>
 8007ed4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007ed6:	b111      	cbz	r1, 8007ede <_reclaim_reent+0x5a>
 8007ed8:	4620      	mov	r0, r4
 8007eda:	f000 fef9 	bl	8008cd0 <_free_r>
 8007ede:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ee0:	b111      	cbz	r1, 8007ee8 <_reclaim_reent+0x64>
 8007ee2:	4620      	mov	r0, r4
 8007ee4:	f000 fef4 	bl	8008cd0 <_free_r>
 8007ee8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007eea:	b111      	cbz	r1, 8007ef2 <_reclaim_reent+0x6e>
 8007eec:	4620      	mov	r0, r4
 8007eee:	f000 feef 	bl	8008cd0 <_free_r>
 8007ef2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007ef4:	b111      	cbz	r1, 8007efc <_reclaim_reent+0x78>
 8007ef6:	4620      	mov	r0, r4
 8007ef8:	f000 feea 	bl	8008cd0 <_free_r>
 8007efc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007efe:	b111      	cbz	r1, 8007f06 <_reclaim_reent+0x82>
 8007f00:	4620      	mov	r0, r4
 8007f02:	f000 fee5 	bl	8008cd0 <_free_r>
 8007f06:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007f08:	b111      	cbz	r1, 8007f10 <_reclaim_reent+0x8c>
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	f000 fee0 	bl	8008cd0 <_free_r>
 8007f10:	6a23      	ldr	r3, [r4, #32]
 8007f12:	b14b      	cbz	r3, 8007f28 <_reclaim_reent+0xa4>
 8007f14:	4620      	mov	r0, r4
 8007f16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007f1a:	4718      	bx	r3
 8007f1c:	680e      	ldr	r6, [r1, #0]
 8007f1e:	4620      	mov	r0, r4
 8007f20:	f000 fed6 	bl	8008cd0 <_free_r>
 8007f24:	4631      	mov	r1, r6
 8007f26:	e7bb      	b.n	8007ea0 <_reclaim_reent+0x1c>
 8007f28:	bd70      	pop	{r4, r5, r6, pc}
 8007f2a:	bf00      	nop
 8007f2c:	200000a8 	.word	0x200000a8

08007f30 <_lseek_r>:
 8007f30:	b538      	push	{r3, r4, r5, lr}
 8007f32:	4604      	mov	r4, r0
 8007f34:	4608      	mov	r0, r1
 8007f36:	4611      	mov	r1, r2
 8007f38:	2200      	movs	r2, #0
 8007f3a:	4d05      	ldr	r5, [pc, #20]	@ (8007f50 <_lseek_r+0x20>)
 8007f3c:	602a      	str	r2, [r5, #0]
 8007f3e:	461a      	mov	r2, r3
 8007f40:	f7fa fd5f 	bl	8002a02 <_lseek>
 8007f44:	1c43      	adds	r3, r0, #1
 8007f46:	d102      	bne.n	8007f4e <_lseek_r+0x1e>
 8007f48:	682b      	ldr	r3, [r5, #0]
 8007f4a:	b103      	cbz	r3, 8007f4e <_lseek_r+0x1e>
 8007f4c:	6023      	str	r3, [r4, #0]
 8007f4e:	bd38      	pop	{r3, r4, r5, pc}
 8007f50:	200049a4 	.word	0x200049a4

08007f54 <_read_r>:
 8007f54:	b538      	push	{r3, r4, r5, lr}
 8007f56:	4604      	mov	r4, r0
 8007f58:	4608      	mov	r0, r1
 8007f5a:	4611      	mov	r1, r2
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	4d05      	ldr	r5, [pc, #20]	@ (8007f74 <_read_r+0x20>)
 8007f60:	602a      	str	r2, [r5, #0]
 8007f62:	461a      	mov	r2, r3
 8007f64:	f7fa fcf0 	bl	8002948 <_read>
 8007f68:	1c43      	adds	r3, r0, #1
 8007f6a:	d102      	bne.n	8007f72 <_read_r+0x1e>
 8007f6c:	682b      	ldr	r3, [r5, #0]
 8007f6e:	b103      	cbz	r3, 8007f72 <_read_r+0x1e>
 8007f70:	6023      	str	r3, [r4, #0]
 8007f72:	bd38      	pop	{r3, r4, r5, pc}
 8007f74:	200049a4 	.word	0x200049a4

08007f78 <_write_r>:
 8007f78:	b538      	push	{r3, r4, r5, lr}
 8007f7a:	4604      	mov	r4, r0
 8007f7c:	4608      	mov	r0, r1
 8007f7e:	4611      	mov	r1, r2
 8007f80:	2200      	movs	r2, #0
 8007f82:	4d05      	ldr	r5, [pc, #20]	@ (8007f98 <_write_r+0x20>)
 8007f84:	602a      	str	r2, [r5, #0]
 8007f86:	461a      	mov	r2, r3
 8007f88:	f7fa fcfb 	bl	8002982 <_write>
 8007f8c:	1c43      	adds	r3, r0, #1
 8007f8e:	d102      	bne.n	8007f96 <_write_r+0x1e>
 8007f90:	682b      	ldr	r3, [r5, #0]
 8007f92:	b103      	cbz	r3, 8007f96 <_write_r+0x1e>
 8007f94:	6023      	str	r3, [r4, #0]
 8007f96:	bd38      	pop	{r3, r4, r5, pc}
 8007f98:	200049a4 	.word	0x200049a4

08007f9c <__errno>:
 8007f9c:	4b01      	ldr	r3, [pc, #4]	@ (8007fa4 <__errno+0x8>)
 8007f9e:	6818      	ldr	r0, [r3, #0]
 8007fa0:	4770      	bx	lr
 8007fa2:	bf00      	nop
 8007fa4:	200000a8 	.word	0x200000a8

08007fa8 <__libc_init_array>:
 8007fa8:	b570      	push	{r4, r5, r6, lr}
 8007faa:	2600      	movs	r6, #0
 8007fac:	4d0c      	ldr	r5, [pc, #48]	@ (8007fe0 <__libc_init_array+0x38>)
 8007fae:	4c0d      	ldr	r4, [pc, #52]	@ (8007fe4 <__libc_init_array+0x3c>)
 8007fb0:	1b64      	subs	r4, r4, r5
 8007fb2:	10a4      	asrs	r4, r4, #2
 8007fb4:	42a6      	cmp	r6, r4
 8007fb6:	d109      	bne.n	8007fcc <__libc_init_array+0x24>
 8007fb8:	f002 f854 	bl	800a064 <_init>
 8007fbc:	2600      	movs	r6, #0
 8007fbe:	4d0a      	ldr	r5, [pc, #40]	@ (8007fe8 <__libc_init_array+0x40>)
 8007fc0:	4c0a      	ldr	r4, [pc, #40]	@ (8007fec <__libc_init_array+0x44>)
 8007fc2:	1b64      	subs	r4, r4, r5
 8007fc4:	10a4      	asrs	r4, r4, #2
 8007fc6:	42a6      	cmp	r6, r4
 8007fc8:	d105      	bne.n	8007fd6 <__libc_init_array+0x2e>
 8007fca:	bd70      	pop	{r4, r5, r6, pc}
 8007fcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fd0:	4798      	blx	r3
 8007fd2:	3601      	adds	r6, #1
 8007fd4:	e7ee      	b.n	8007fb4 <__libc_init_array+0xc>
 8007fd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fda:	4798      	blx	r3
 8007fdc:	3601      	adds	r6, #1
 8007fde:	e7f2      	b.n	8007fc6 <__libc_init_array+0x1e>
 8007fe0:	0800a5a0 	.word	0x0800a5a0
 8007fe4:	0800a5a0 	.word	0x0800a5a0
 8007fe8:	0800a5a0 	.word	0x0800a5a0
 8007fec:	0800a5a4 	.word	0x0800a5a4

08007ff0 <__retarget_lock_init_recursive>:
 8007ff0:	4770      	bx	lr

08007ff2 <__retarget_lock_acquire_recursive>:
 8007ff2:	4770      	bx	lr

08007ff4 <__retarget_lock_release_recursive>:
 8007ff4:	4770      	bx	lr

08007ff6 <memchr>:
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	b510      	push	{r4, lr}
 8007ffa:	b2c9      	uxtb	r1, r1
 8007ffc:	4402      	add	r2, r0
 8007ffe:	4293      	cmp	r3, r2
 8008000:	4618      	mov	r0, r3
 8008002:	d101      	bne.n	8008008 <memchr+0x12>
 8008004:	2000      	movs	r0, #0
 8008006:	e003      	b.n	8008010 <memchr+0x1a>
 8008008:	7804      	ldrb	r4, [r0, #0]
 800800a:	3301      	adds	r3, #1
 800800c:	428c      	cmp	r4, r1
 800800e:	d1f6      	bne.n	8007ffe <memchr+0x8>
 8008010:	bd10      	pop	{r4, pc}

08008012 <memcpy>:
 8008012:	440a      	add	r2, r1
 8008014:	4291      	cmp	r1, r2
 8008016:	f100 33ff 	add.w	r3, r0, #4294967295
 800801a:	d100      	bne.n	800801e <memcpy+0xc>
 800801c:	4770      	bx	lr
 800801e:	b510      	push	{r4, lr}
 8008020:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008024:	4291      	cmp	r1, r2
 8008026:	f803 4f01 	strb.w	r4, [r3, #1]!
 800802a:	d1f9      	bne.n	8008020 <memcpy+0xe>
 800802c:	bd10      	pop	{r4, pc}

0800802e <quorem>:
 800802e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008032:	6903      	ldr	r3, [r0, #16]
 8008034:	690c      	ldr	r4, [r1, #16]
 8008036:	4607      	mov	r7, r0
 8008038:	42a3      	cmp	r3, r4
 800803a:	db7e      	blt.n	800813a <quorem+0x10c>
 800803c:	3c01      	subs	r4, #1
 800803e:	00a3      	lsls	r3, r4, #2
 8008040:	f100 0514 	add.w	r5, r0, #20
 8008044:	f101 0814 	add.w	r8, r1, #20
 8008048:	9300      	str	r3, [sp, #0]
 800804a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800804e:	9301      	str	r3, [sp, #4]
 8008050:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008054:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008058:	3301      	adds	r3, #1
 800805a:	429a      	cmp	r2, r3
 800805c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008060:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008064:	d32e      	bcc.n	80080c4 <quorem+0x96>
 8008066:	f04f 0a00 	mov.w	sl, #0
 800806a:	46c4      	mov	ip, r8
 800806c:	46ae      	mov	lr, r5
 800806e:	46d3      	mov	fp, sl
 8008070:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008074:	b298      	uxth	r0, r3
 8008076:	fb06 a000 	mla	r0, r6, r0, sl
 800807a:	0c1b      	lsrs	r3, r3, #16
 800807c:	0c02      	lsrs	r2, r0, #16
 800807e:	fb06 2303 	mla	r3, r6, r3, r2
 8008082:	f8de 2000 	ldr.w	r2, [lr]
 8008086:	b280      	uxth	r0, r0
 8008088:	b292      	uxth	r2, r2
 800808a:	1a12      	subs	r2, r2, r0
 800808c:	445a      	add	r2, fp
 800808e:	f8de 0000 	ldr.w	r0, [lr]
 8008092:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008096:	b29b      	uxth	r3, r3
 8008098:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800809c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80080a0:	b292      	uxth	r2, r2
 80080a2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80080a6:	45e1      	cmp	r9, ip
 80080a8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80080ac:	f84e 2b04 	str.w	r2, [lr], #4
 80080b0:	d2de      	bcs.n	8008070 <quorem+0x42>
 80080b2:	9b00      	ldr	r3, [sp, #0]
 80080b4:	58eb      	ldr	r3, [r5, r3]
 80080b6:	b92b      	cbnz	r3, 80080c4 <quorem+0x96>
 80080b8:	9b01      	ldr	r3, [sp, #4]
 80080ba:	3b04      	subs	r3, #4
 80080bc:	429d      	cmp	r5, r3
 80080be:	461a      	mov	r2, r3
 80080c0:	d32f      	bcc.n	8008122 <quorem+0xf4>
 80080c2:	613c      	str	r4, [r7, #16]
 80080c4:	4638      	mov	r0, r7
 80080c6:	f001 f979 	bl	80093bc <__mcmp>
 80080ca:	2800      	cmp	r0, #0
 80080cc:	db25      	blt.n	800811a <quorem+0xec>
 80080ce:	4629      	mov	r1, r5
 80080d0:	2000      	movs	r0, #0
 80080d2:	f858 2b04 	ldr.w	r2, [r8], #4
 80080d6:	f8d1 c000 	ldr.w	ip, [r1]
 80080da:	fa1f fe82 	uxth.w	lr, r2
 80080de:	fa1f f38c 	uxth.w	r3, ip
 80080e2:	eba3 030e 	sub.w	r3, r3, lr
 80080e6:	4403      	add	r3, r0
 80080e8:	0c12      	lsrs	r2, r2, #16
 80080ea:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80080ee:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080f8:	45c1      	cmp	r9, r8
 80080fa:	ea4f 4022 	mov.w	r0, r2, asr #16
 80080fe:	f841 3b04 	str.w	r3, [r1], #4
 8008102:	d2e6      	bcs.n	80080d2 <quorem+0xa4>
 8008104:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008108:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800810c:	b922      	cbnz	r2, 8008118 <quorem+0xea>
 800810e:	3b04      	subs	r3, #4
 8008110:	429d      	cmp	r5, r3
 8008112:	461a      	mov	r2, r3
 8008114:	d30b      	bcc.n	800812e <quorem+0x100>
 8008116:	613c      	str	r4, [r7, #16]
 8008118:	3601      	adds	r6, #1
 800811a:	4630      	mov	r0, r6
 800811c:	b003      	add	sp, #12
 800811e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008122:	6812      	ldr	r2, [r2, #0]
 8008124:	3b04      	subs	r3, #4
 8008126:	2a00      	cmp	r2, #0
 8008128:	d1cb      	bne.n	80080c2 <quorem+0x94>
 800812a:	3c01      	subs	r4, #1
 800812c:	e7c6      	b.n	80080bc <quorem+0x8e>
 800812e:	6812      	ldr	r2, [r2, #0]
 8008130:	3b04      	subs	r3, #4
 8008132:	2a00      	cmp	r2, #0
 8008134:	d1ef      	bne.n	8008116 <quorem+0xe8>
 8008136:	3c01      	subs	r4, #1
 8008138:	e7ea      	b.n	8008110 <quorem+0xe2>
 800813a:	2000      	movs	r0, #0
 800813c:	e7ee      	b.n	800811c <quorem+0xee>
	...

08008140 <_dtoa_r>:
 8008140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008144:	4614      	mov	r4, r2
 8008146:	461d      	mov	r5, r3
 8008148:	69c7      	ldr	r7, [r0, #28]
 800814a:	b097      	sub	sp, #92	@ 0x5c
 800814c:	4683      	mov	fp, r0
 800814e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008152:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8008154:	b97f      	cbnz	r7, 8008176 <_dtoa_r+0x36>
 8008156:	2010      	movs	r0, #16
 8008158:	f000 fe02 	bl	8008d60 <malloc>
 800815c:	4602      	mov	r2, r0
 800815e:	f8cb 001c 	str.w	r0, [fp, #28]
 8008162:	b920      	cbnz	r0, 800816e <_dtoa_r+0x2e>
 8008164:	21ef      	movs	r1, #239	@ 0xef
 8008166:	4ba8      	ldr	r3, [pc, #672]	@ (8008408 <_dtoa_r+0x2c8>)
 8008168:	48a8      	ldr	r0, [pc, #672]	@ (800840c <_dtoa_r+0x2cc>)
 800816a:	f001 fc3f 	bl	80099ec <__assert_func>
 800816e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008172:	6007      	str	r7, [r0, #0]
 8008174:	60c7      	str	r7, [r0, #12]
 8008176:	f8db 301c 	ldr.w	r3, [fp, #28]
 800817a:	6819      	ldr	r1, [r3, #0]
 800817c:	b159      	cbz	r1, 8008196 <_dtoa_r+0x56>
 800817e:	685a      	ldr	r2, [r3, #4]
 8008180:	2301      	movs	r3, #1
 8008182:	4093      	lsls	r3, r2
 8008184:	604a      	str	r2, [r1, #4]
 8008186:	608b      	str	r3, [r1, #8]
 8008188:	4658      	mov	r0, fp
 800818a:	f000 fedf 	bl	8008f4c <_Bfree>
 800818e:	2200      	movs	r2, #0
 8008190:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008194:	601a      	str	r2, [r3, #0]
 8008196:	1e2b      	subs	r3, r5, #0
 8008198:	bfaf      	iteee	ge
 800819a:	2300      	movge	r3, #0
 800819c:	2201      	movlt	r2, #1
 800819e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80081a2:	9303      	strlt	r3, [sp, #12]
 80081a4:	bfa8      	it	ge
 80081a6:	6033      	strge	r3, [r6, #0]
 80081a8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80081ac:	4b98      	ldr	r3, [pc, #608]	@ (8008410 <_dtoa_r+0x2d0>)
 80081ae:	bfb8      	it	lt
 80081b0:	6032      	strlt	r2, [r6, #0]
 80081b2:	ea33 0308 	bics.w	r3, r3, r8
 80081b6:	d112      	bne.n	80081de <_dtoa_r+0x9e>
 80081b8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80081bc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80081be:	6013      	str	r3, [r2, #0]
 80081c0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80081c4:	4323      	orrs	r3, r4
 80081c6:	f000 8550 	beq.w	8008c6a <_dtoa_r+0xb2a>
 80081ca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80081cc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8008414 <_dtoa_r+0x2d4>
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	f000 8552 	beq.w	8008c7a <_dtoa_r+0xb3a>
 80081d6:	f10a 0303 	add.w	r3, sl, #3
 80081da:	f000 bd4c 	b.w	8008c76 <_dtoa_r+0xb36>
 80081de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081e2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80081e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80081ea:	2200      	movs	r2, #0
 80081ec:	2300      	movs	r3, #0
 80081ee:	f7f8 fbdb 	bl	80009a8 <__aeabi_dcmpeq>
 80081f2:	4607      	mov	r7, r0
 80081f4:	b158      	cbz	r0, 800820e <_dtoa_r+0xce>
 80081f6:	2301      	movs	r3, #1
 80081f8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80081fa:	6013      	str	r3, [r2, #0]
 80081fc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80081fe:	b113      	cbz	r3, 8008206 <_dtoa_r+0xc6>
 8008200:	4b85      	ldr	r3, [pc, #532]	@ (8008418 <_dtoa_r+0x2d8>)
 8008202:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008204:	6013      	str	r3, [r2, #0]
 8008206:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800841c <_dtoa_r+0x2dc>
 800820a:	f000 bd36 	b.w	8008c7a <_dtoa_r+0xb3a>
 800820e:	ab14      	add	r3, sp, #80	@ 0x50
 8008210:	9301      	str	r3, [sp, #4]
 8008212:	ab15      	add	r3, sp, #84	@ 0x54
 8008214:	9300      	str	r3, [sp, #0]
 8008216:	4658      	mov	r0, fp
 8008218:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800821c:	f001 f97e 	bl	800951c <__d2b>
 8008220:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8008224:	4681      	mov	r9, r0
 8008226:	2e00      	cmp	r6, #0
 8008228:	d077      	beq.n	800831a <_dtoa_r+0x1da>
 800822a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800822e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008230:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008234:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008238:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800823c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008240:	9712      	str	r7, [sp, #72]	@ 0x48
 8008242:	4619      	mov	r1, r3
 8008244:	2200      	movs	r2, #0
 8008246:	4b76      	ldr	r3, [pc, #472]	@ (8008420 <_dtoa_r+0x2e0>)
 8008248:	f7f7 ff8e 	bl	8000168 <__aeabi_dsub>
 800824c:	a368      	add	r3, pc, #416	@ (adr r3, 80083f0 <_dtoa_r+0x2b0>)
 800824e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008252:	f7f8 f941 	bl	80004d8 <__aeabi_dmul>
 8008256:	a368      	add	r3, pc, #416	@ (adr r3, 80083f8 <_dtoa_r+0x2b8>)
 8008258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825c:	f7f7 ff86 	bl	800016c <__adddf3>
 8008260:	4604      	mov	r4, r0
 8008262:	4630      	mov	r0, r6
 8008264:	460d      	mov	r5, r1
 8008266:	f7f8 f8cd 	bl	8000404 <__aeabi_i2d>
 800826a:	a365      	add	r3, pc, #404	@ (adr r3, 8008400 <_dtoa_r+0x2c0>)
 800826c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008270:	f7f8 f932 	bl	80004d8 <__aeabi_dmul>
 8008274:	4602      	mov	r2, r0
 8008276:	460b      	mov	r3, r1
 8008278:	4620      	mov	r0, r4
 800827a:	4629      	mov	r1, r5
 800827c:	f7f7 ff76 	bl	800016c <__adddf3>
 8008280:	4604      	mov	r4, r0
 8008282:	460d      	mov	r5, r1
 8008284:	f7f8 fbd8 	bl	8000a38 <__aeabi_d2iz>
 8008288:	2200      	movs	r2, #0
 800828a:	4607      	mov	r7, r0
 800828c:	2300      	movs	r3, #0
 800828e:	4620      	mov	r0, r4
 8008290:	4629      	mov	r1, r5
 8008292:	f7f8 fb93 	bl	80009bc <__aeabi_dcmplt>
 8008296:	b140      	cbz	r0, 80082aa <_dtoa_r+0x16a>
 8008298:	4638      	mov	r0, r7
 800829a:	f7f8 f8b3 	bl	8000404 <__aeabi_i2d>
 800829e:	4622      	mov	r2, r4
 80082a0:	462b      	mov	r3, r5
 80082a2:	f7f8 fb81 	bl	80009a8 <__aeabi_dcmpeq>
 80082a6:	b900      	cbnz	r0, 80082aa <_dtoa_r+0x16a>
 80082a8:	3f01      	subs	r7, #1
 80082aa:	2f16      	cmp	r7, #22
 80082ac:	d853      	bhi.n	8008356 <_dtoa_r+0x216>
 80082ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80082b2:	4b5c      	ldr	r3, [pc, #368]	@ (8008424 <_dtoa_r+0x2e4>)
 80082b4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80082b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082bc:	f7f8 fb7e 	bl	80009bc <__aeabi_dcmplt>
 80082c0:	2800      	cmp	r0, #0
 80082c2:	d04a      	beq.n	800835a <_dtoa_r+0x21a>
 80082c4:	2300      	movs	r3, #0
 80082c6:	3f01      	subs	r7, #1
 80082c8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80082ca:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80082cc:	1b9b      	subs	r3, r3, r6
 80082ce:	1e5a      	subs	r2, r3, #1
 80082d0:	bf46      	itte	mi
 80082d2:	f1c3 0801 	rsbmi	r8, r3, #1
 80082d6:	2300      	movmi	r3, #0
 80082d8:	f04f 0800 	movpl.w	r8, #0
 80082dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80082de:	bf48      	it	mi
 80082e0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80082e2:	2f00      	cmp	r7, #0
 80082e4:	db3b      	blt.n	800835e <_dtoa_r+0x21e>
 80082e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082e8:	970e      	str	r7, [sp, #56]	@ 0x38
 80082ea:	443b      	add	r3, r7
 80082ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80082ee:	2300      	movs	r3, #0
 80082f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80082f2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80082f4:	2b09      	cmp	r3, #9
 80082f6:	d866      	bhi.n	80083c6 <_dtoa_r+0x286>
 80082f8:	2b05      	cmp	r3, #5
 80082fa:	bfc4      	itt	gt
 80082fc:	3b04      	subgt	r3, #4
 80082fe:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8008300:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008302:	bfc8      	it	gt
 8008304:	2400      	movgt	r4, #0
 8008306:	f1a3 0302 	sub.w	r3, r3, #2
 800830a:	bfd8      	it	le
 800830c:	2401      	movle	r4, #1
 800830e:	2b03      	cmp	r3, #3
 8008310:	d864      	bhi.n	80083dc <_dtoa_r+0x29c>
 8008312:	e8df f003 	tbb	[pc, r3]
 8008316:	382b      	.short	0x382b
 8008318:	5636      	.short	0x5636
 800831a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800831e:	441e      	add	r6, r3
 8008320:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008324:	2b20      	cmp	r3, #32
 8008326:	bfc1      	itttt	gt
 8008328:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800832c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008330:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008334:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008338:	bfd6      	itet	le
 800833a:	f1c3 0320 	rsble	r3, r3, #32
 800833e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008342:	fa04 f003 	lslle.w	r0, r4, r3
 8008346:	f7f8 f84d 	bl	80003e4 <__aeabi_ui2d>
 800834a:	2201      	movs	r2, #1
 800834c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008350:	3e01      	subs	r6, #1
 8008352:	9212      	str	r2, [sp, #72]	@ 0x48
 8008354:	e775      	b.n	8008242 <_dtoa_r+0x102>
 8008356:	2301      	movs	r3, #1
 8008358:	e7b6      	b.n	80082c8 <_dtoa_r+0x188>
 800835a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800835c:	e7b5      	b.n	80082ca <_dtoa_r+0x18a>
 800835e:	427b      	negs	r3, r7
 8008360:	930a      	str	r3, [sp, #40]	@ 0x28
 8008362:	2300      	movs	r3, #0
 8008364:	eba8 0807 	sub.w	r8, r8, r7
 8008368:	930e      	str	r3, [sp, #56]	@ 0x38
 800836a:	e7c2      	b.n	80082f2 <_dtoa_r+0x1b2>
 800836c:	2300      	movs	r3, #0
 800836e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008370:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008372:	2b00      	cmp	r3, #0
 8008374:	dc35      	bgt.n	80083e2 <_dtoa_r+0x2a2>
 8008376:	2301      	movs	r3, #1
 8008378:	461a      	mov	r2, r3
 800837a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800837e:	9221      	str	r2, [sp, #132]	@ 0x84
 8008380:	e00b      	b.n	800839a <_dtoa_r+0x25a>
 8008382:	2301      	movs	r3, #1
 8008384:	e7f3      	b.n	800836e <_dtoa_r+0x22e>
 8008386:	2300      	movs	r3, #0
 8008388:	930b      	str	r3, [sp, #44]	@ 0x2c
 800838a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800838c:	18fb      	adds	r3, r7, r3
 800838e:	9308      	str	r3, [sp, #32]
 8008390:	3301      	adds	r3, #1
 8008392:	2b01      	cmp	r3, #1
 8008394:	9307      	str	r3, [sp, #28]
 8008396:	bfb8      	it	lt
 8008398:	2301      	movlt	r3, #1
 800839a:	2100      	movs	r1, #0
 800839c:	2204      	movs	r2, #4
 800839e:	f8db 001c 	ldr.w	r0, [fp, #28]
 80083a2:	f102 0514 	add.w	r5, r2, #20
 80083a6:	429d      	cmp	r5, r3
 80083a8:	d91f      	bls.n	80083ea <_dtoa_r+0x2aa>
 80083aa:	6041      	str	r1, [r0, #4]
 80083ac:	4658      	mov	r0, fp
 80083ae:	f000 fd8d 	bl	8008ecc <_Balloc>
 80083b2:	4682      	mov	sl, r0
 80083b4:	2800      	cmp	r0, #0
 80083b6:	d139      	bne.n	800842c <_dtoa_r+0x2ec>
 80083b8:	4602      	mov	r2, r0
 80083ba:	f240 11af 	movw	r1, #431	@ 0x1af
 80083be:	4b1a      	ldr	r3, [pc, #104]	@ (8008428 <_dtoa_r+0x2e8>)
 80083c0:	e6d2      	b.n	8008168 <_dtoa_r+0x28>
 80083c2:	2301      	movs	r3, #1
 80083c4:	e7e0      	b.n	8008388 <_dtoa_r+0x248>
 80083c6:	2401      	movs	r4, #1
 80083c8:	2300      	movs	r3, #0
 80083ca:	940b      	str	r4, [sp, #44]	@ 0x2c
 80083cc:	9320      	str	r3, [sp, #128]	@ 0x80
 80083ce:	f04f 33ff 	mov.w	r3, #4294967295
 80083d2:	2200      	movs	r2, #0
 80083d4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80083d8:	2312      	movs	r3, #18
 80083da:	e7d0      	b.n	800837e <_dtoa_r+0x23e>
 80083dc:	2301      	movs	r3, #1
 80083de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80083e0:	e7f5      	b.n	80083ce <_dtoa_r+0x28e>
 80083e2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80083e4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80083e8:	e7d7      	b.n	800839a <_dtoa_r+0x25a>
 80083ea:	3101      	adds	r1, #1
 80083ec:	0052      	lsls	r2, r2, #1
 80083ee:	e7d8      	b.n	80083a2 <_dtoa_r+0x262>
 80083f0:	636f4361 	.word	0x636f4361
 80083f4:	3fd287a7 	.word	0x3fd287a7
 80083f8:	8b60c8b3 	.word	0x8b60c8b3
 80083fc:	3fc68a28 	.word	0x3fc68a28
 8008400:	509f79fb 	.word	0x509f79fb
 8008404:	3fd34413 	.word	0x3fd34413
 8008408:	0800a364 	.word	0x0800a364
 800840c:	0800a37b 	.word	0x0800a37b
 8008410:	7ff00000 	.word	0x7ff00000
 8008414:	0800a360 	.word	0x0800a360
 8008418:	0800a334 	.word	0x0800a334
 800841c:	0800a333 	.word	0x0800a333
 8008420:	3ff80000 	.word	0x3ff80000
 8008424:	0800a478 	.word	0x0800a478
 8008428:	0800a3d3 	.word	0x0800a3d3
 800842c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008430:	6018      	str	r0, [r3, #0]
 8008432:	9b07      	ldr	r3, [sp, #28]
 8008434:	2b0e      	cmp	r3, #14
 8008436:	f200 80a4 	bhi.w	8008582 <_dtoa_r+0x442>
 800843a:	2c00      	cmp	r4, #0
 800843c:	f000 80a1 	beq.w	8008582 <_dtoa_r+0x442>
 8008440:	2f00      	cmp	r7, #0
 8008442:	dd33      	ble.n	80084ac <_dtoa_r+0x36c>
 8008444:	4b86      	ldr	r3, [pc, #536]	@ (8008660 <_dtoa_r+0x520>)
 8008446:	f007 020f 	and.w	r2, r7, #15
 800844a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800844e:	05f8      	lsls	r0, r7, #23
 8008450:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008454:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008458:	ea4f 1427 	mov.w	r4, r7, asr #4
 800845c:	d516      	bpl.n	800848c <_dtoa_r+0x34c>
 800845e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008462:	4b80      	ldr	r3, [pc, #512]	@ (8008664 <_dtoa_r+0x524>)
 8008464:	2603      	movs	r6, #3
 8008466:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800846a:	f7f8 f95f 	bl	800072c <__aeabi_ddiv>
 800846e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008472:	f004 040f 	and.w	r4, r4, #15
 8008476:	4d7b      	ldr	r5, [pc, #492]	@ (8008664 <_dtoa_r+0x524>)
 8008478:	b954      	cbnz	r4, 8008490 <_dtoa_r+0x350>
 800847a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800847e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008482:	f7f8 f953 	bl	800072c <__aeabi_ddiv>
 8008486:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800848a:	e028      	b.n	80084de <_dtoa_r+0x39e>
 800848c:	2602      	movs	r6, #2
 800848e:	e7f2      	b.n	8008476 <_dtoa_r+0x336>
 8008490:	07e1      	lsls	r1, r4, #31
 8008492:	d508      	bpl.n	80084a6 <_dtoa_r+0x366>
 8008494:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008498:	e9d5 2300 	ldrd	r2, r3, [r5]
 800849c:	f7f8 f81c 	bl	80004d8 <__aeabi_dmul>
 80084a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084a4:	3601      	adds	r6, #1
 80084a6:	1064      	asrs	r4, r4, #1
 80084a8:	3508      	adds	r5, #8
 80084aa:	e7e5      	b.n	8008478 <_dtoa_r+0x338>
 80084ac:	f000 80d2 	beq.w	8008654 <_dtoa_r+0x514>
 80084b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80084b4:	427c      	negs	r4, r7
 80084b6:	4b6a      	ldr	r3, [pc, #424]	@ (8008660 <_dtoa_r+0x520>)
 80084b8:	f004 020f 	and.w	r2, r4, #15
 80084bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c4:	f7f8 f808 	bl	80004d8 <__aeabi_dmul>
 80084c8:	2602      	movs	r6, #2
 80084ca:	2300      	movs	r3, #0
 80084cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084d0:	4d64      	ldr	r5, [pc, #400]	@ (8008664 <_dtoa_r+0x524>)
 80084d2:	1124      	asrs	r4, r4, #4
 80084d4:	2c00      	cmp	r4, #0
 80084d6:	f040 80b2 	bne.w	800863e <_dtoa_r+0x4fe>
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d1d3      	bne.n	8008486 <_dtoa_r+0x346>
 80084de:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80084e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f000 80b7 	beq.w	8008658 <_dtoa_r+0x518>
 80084ea:	2200      	movs	r2, #0
 80084ec:	4620      	mov	r0, r4
 80084ee:	4629      	mov	r1, r5
 80084f0:	4b5d      	ldr	r3, [pc, #372]	@ (8008668 <_dtoa_r+0x528>)
 80084f2:	f7f8 fa63 	bl	80009bc <__aeabi_dcmplt>
 80084f6:	2800      	cmp	r0, #0
 80084f8:	f000 80ae 	beq.w	8008658 <_dtoa_r+0x518>
 80084fc:	9b07      	ldr	r3, [sp, #28]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	f000 80aa 	beq.w	8008658 <_dtoa_r+0x518>
 8008504:	9b08      	ldr	r3, [sp, #32]
 8008506:	2b00      	cmp	r3, #0
 8008508:	dd37      	ble.n	800857a <_dtoa_r+0x43a>
 800850a:	1e7b      	subs	r3, r7, #1
 800850c:	4620      	mov	r0, r4
 800850e:	9304      	str	r3, [sp, #16]
 8008510:	2200      	movs	r2, #0
 8008512:	4629      	mov	r1, r5
 8008514:	4b55      	ldr	r3, [pc, #340]	@ (800866c <_dtoa_r+0x52c>)
 8008516:	f7f7 ffdf 	bl	80004d8 <__aeabi_dmul>
 800851a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800851e:	9c08      	ldr	r4, [sp, #32]
 8008520:	3601      	adds	r6, #1
 8008522:	4630      	mov	r0, r6
 8008524:	f7f7 ff6e 	bl	8000404 <__aeabi_i2d>
 8008528:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800852c:	f7f7 ffd4 	bl	80004d8 <__aeabi_dmul>
 8008530:	2200      	movs	r2, #0
 8008532:	4b4f      	ldr	r3, [pc, #316]	@ (8008670 <_dtoa_r+0x530>)
 8008534:	f7f7 fe1a 	bl	800016c <__adddf3>
 8008538:	4605      	mov	r5, r0
 800853a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800853e:	2c00      	cmp	r4, #0
 8008540:	f040 809a 	bne.w	8008678 <_dtoa_r+0x538>
 8008544:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008548:	2200      	movs	r2, #0
 800854a:	4b4a      	ldr	r3, [pc, #296]	@ (8008674 <_dtoa_r+0x534>)
 800854c:	f7f7 fe0c 	bl	8000168 <__aeabi_dsub>
 8008550:	4602      	mov	r2, r0
 8008552:	460b      	mov	r3, r1
 8008554:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008558:	462a      	mov	r2, r5
 800855a:	4633      	mov	r3, r6
 800855c:	f7f8 fa4c 	bl	80009f8 <__aeabi_dcmpgt>
 8008560:	2800      	cmp	r0, #0
 8008562:	f040 828e 	bne.w	8008a82 <_dtoa_r+0x942>
 8008566:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800856a:	462a      	mov	r2, r5
 800856c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008570:	f7f8 fa24 	bl	80009bc <__aeabi_dcmplt>
 8008574:	2800      	cmp	r0, #0
 8008576:	f040 8127 	bne.w	80087c8 <_dtoa_r+0x688>
 800857a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800857e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008582:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008584:	2b00      	cmp	r3, #0
 8008586:	f2c0 8163 	blt.w	8008850 <_dtoa_r+0x710>
 800858a:	2f0e      	cmp	r7, #14
 800858c:	f300 8160 	bgt.w	8008850 <_dtoa_r+0x710>
 8008590:	4b33      	ldr	r3, [pc, #204]	@ (8008660 <_dtoa_r+0x520>)
 8008592:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008596:	e9d3 3400 	ldrd	r3, r4, [r3]
 800859a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800859e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	da03      	bge.n	80085ac <_dtoa_r+0x46c>
 80085a4:	9b07      	ldr	r3, [sp, #28]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	f340 8100 	ble.w	80087ac <_dtoa_r+0x66c>
 80085ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80085b0:	4656      	mov	r6, sl
 80085b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085b6:	4620      	mov	r0, r4
 80085b8:	4629      	mov	r1, r5
 80085ba:	f7f8 f8b7 	bl	800072c <__aeabi_ddiv>
 80085be:	f7f8 fa3b 	bl	8000a38 <__aeabi_d2iz>
 80085c2:	4680      	mov	r8, r0
 80085c4:	f7f7 ff1e 	bl	8000404 <__aeabi_i2d>
 80085c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085cc:	f7f7 ff84 	bl	80004d8 <__aeabi_dmul>
 80085d0:	4602      	mov	r2, r0
 80085d2:	460b      	mov	r3, r1
 80085d4:	4620      	mov	r0, r4
 80085d6:	4629      	mov	r1, r5
 80085d8:	f7f7 fdc6 	bl	8000168 <__aeabi_dsub>
 80085dc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80085e0:	9d07      	ldr	r5, [sp, #28]
 80085e2:	f806 4b01 	strb.w	r4, [r6], #1
 80085e6:	eba6 040a 	sub.w	r4, r6, sl
 80085ea:	42a5      	cmp	r5, r4
 80085ec:	4602      	mov	r2, r0
 80085ee:	460b      	mov	r3, r1
 80085f0:	f040 8116 	bne.w	8008820 <_dtoa_r+0x6e0>
 80085f4:	f7f7 fdba 	bl	800016c <__adddf3>
 80085f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085fc:	4604      	mov	r4, r0
 80085fe:	460d      	mov	r5, r1
 8008600:	f7f8 f9fa 	bl	80009f8 <__aeabi_dcmpgt>
 8008604:	2800      	cmp	r0, #0
 8008606:	f040 80f8 	bne.w	80087fa <_dtoa_r+0x6ba>
 800860a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800860e:	4620      	mov	r0, r4
 8008610:	4629      	mov	r1, r5
 8008612:	f7f8 f9c9 	bl	80009a8 <__aeabi_dcmpeq>
 8008616:	b118      	cbz	r0, 8008620 <_dtoa_r+0x4e0>
 8008618:	f018 0f01 	tst.w	r8, #1
 800861c:	f040 80ed 	bne.w	80087fa <_dtoa_r+0x6ba>
 8008620:	4649      	mov	r1, r9
 8008622:	4658      	mov	r0, fp
 8008624:	f000 fc92 	bl	8008f4c <_Bfree>
 8008628:	2300      	movs	r3, #0
 800862a:	7033      	strb	r3, [r6, #0]
 800862c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800862e:	3701      	adds	r7, #1
 8008630:	601f      	str	r7, [r3, #0]
 8008632:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008634:	2b00      	cmp	r3, #0
 8008636:	f000 8320 	beq.w	8008c7a <_dtoa_r+0xb3a>
 800863a:	601e      	str	r6, [r3, #0]
 800863c:	e31d      	b.n	8008c7a <_dtoa_r+0xb3a>
 800863e:	07e2      	lsls	r2, r4, #31
 8008640:	d505      	bpl.n	800864e <_dtoa_r+0x50e>
 8008642:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008646:	f7f7 ff47 	bl	80004d8 <__aeabi_dmul>
 800864a:	2301      	movs	r3, #1
 800864c:	3601      	adds	r6, #1
 800864e:	1064      	asrs	r4, r4, #1
 8008650:	3508      	adds	r5, #8
 8008652:	e73f      	b.n	80084d4 <_dtoa_r+0x394>
 8008654:	2602      	movs	r6, #2
 8008656:	e742      	b.n	80084de <_dtoa_r+0x39e>
 8008658:	9c07      	ldr	r4, [sp, #28]
 800865a:	9704      	str	r7, [sp, #16]
 800865c:	e761      	b.n	8008522 <_dtoa_r+0x3e2>
 800865e:	bf00      	nop
 8008660:	0800a478 	.word	0x0800a478
 8008664:	0800a450 	.word	0x0800a450
 8008668:	3ff00000 	.word	0x3ff00000
 800866c:	40240000 	.word	0x40240000
 8008670:	401c0000 	.word	0x401c0000
 8008674:	40140000 	.word	0x40140000
 8008678:	4b70      	ldr	r3, [pc, #448]	@ (800883c <_dtoa_r+0x6fc>)
 800867a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800867c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008680:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008684:	4454      	add	r4, sl
 8008686:	2900      	cmp	r1, #0
 8008688:	d045      	beq.n	8008716 <_dtoa_r+0x5d6>
 800868a:	2000      	movs	r0, #0
 800868c:	496c      	ldr	r1, [pc, #432]	@ (8008840 <_dtoa_r+0x700>)
 800868e:	f7f8 f84d 	bl	800072c <__aeabi_ddiv>
 8008692:	4633      	mov	r3, r6
 8008694:	462a      	mov	r2, r5
 8008696:	f7f7 fd67 	bl	8000168 <__aeabi_dsub>
 800869a:	4656      	mov	r6, sl
 800869c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80086a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086a4:	f7f8 f9c8 	bl	8000a38 <__aeabi_d2iz>
 80086a8:	4605      	mov	r5, r0
 80086aa:	f7f7 feab 	bl	8000404 <__aeabi_i2d>
 80086ae:	4602      	mov	r2, r0
 80086b0:	460b      	mov	r3, r1
 80086b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086b6:	f7f7 fd57 	bl	8000168 <__aeabi_dsub>
 80086ba:	4602      	mov	r2, r0
 80086bc:	460b      	mov	r3, r1
 80086be:	3530      	adds	r5, #48	@ 0x30
 80086c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80086c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80086c8:	f806 5b01 	strb.w	r5, [r6], #1
 80086cc:	f7f8 f976 	bl	80009bc <__aeabi_dcmplt>
 80086d0:	2800      	cmp	r0, #0
 80086d2:	d163      	bne.n	800879c <_dtoa_r+0x65c>
 80086d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086d8:	2000      	movs	r0, #0
 80086da:	495a      	ldr	r1, [pc, #360]	@ (8008844 <_dtoa_r+0x704>)
 80086dc:	f7f7 fd44 	bl	8000168 <__aeabi_dsub>
 80086e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80086e4:	f7f8 f96a 	bl	80009bc <__aeabi_dcmplt>
 80086e8:	2800      	cmp	r0, #0
 80086ea:	f040 8087 	bne.w	80087fc <_dtoa_r+0x6bc>
 80086ee:	42a6      	cmp	r6, r4
 80086f0:	f43f af43 	beq.w	800857a <_dtoa_r+0x43a>
 80086f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80086f8:	2200      	movs	r2, #0
 80086fa:	4b53      	ldr	r3, [pc, #332]	@ (8008848 <_dtoa_r+0x708>)
 80086fc:	f7f7 feec 	bl	80004d8 <__aeabi_dmul>
 8008700:	2200      	movs	r2, #0
 8008702:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008706:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800870a:	4b4f      	ldr	r3, [pc, #316]	@ (8008848 <_dtoa_r+0x708>)
 800870c:	f7f7 fee4 	bl	80004d8 <__aeabi_dmul>
 8008710:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008714:	e7c4      	b.n	80086a0 <_dtoa_r+0x560>
 8008716:	4631      	mov	r1, r6
 8008718:	4628      	mov	r0, r5
 800871a:	f7f7 fedd 	bl	80004d8 <__aeabi_dmul>
 800871e:	4656      	mov	r6, sl
 8008720:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008724:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008726:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800872a:	f7f8 f985 	bl	8000a38 <__aeabi_d2iz>
 800872e:	4605      	mov	r5, r0
 8008730:	f7f7 fe68 	bl	8000404 <__aeabi_i2d>
 8008734:	4602      	mov	r2, r0
 8008736:	460b      	mov	r3, r1
 8008738:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800873c:	f7f7 fd14 	bl	8000168 <__aeabi_dsub>
 8008740:	4602      	mov	r2, r0
 8008742:	460b      	mov	r3, r1
 8008744:	3530      	adds	r5, #48	@ 0x30
 8008746:	f806 5b01 	strb.w	r5, [r6], #1
 800874a:	42a6      	cmp	r6, r4
 800874c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008750:	f04f 0200 	mov.w	r2, #0
 8008754:	d124      	bne.n	80087a0 <_dtoa_r+0x660>
 8008756:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800875a:	4b39      	ldr	r3, [pc, #228]	@ (8008840 <_dtoa_r+0x700>)
 800875c:	f7f7 fd06 	bl	800016c <__adddf3>
 8008760:	4602      	mov	r2, r0
 8008762:	460b      	mov	r3, r1
 8008764:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008768:	f7f8 f946 	bl	80009f8 <__aeabi_dcmpgt>
 800876c:	2800      	cmp	r0, #0
 800876e:	d145      	bne.n	80087fc <_dtoa_r+0x6bc>
 8008770:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008774:	2000      	movs	r0, #0
 8008776:	4932      	ldr	r1, [pc, #200]	@ (8008840 <_dtoa_r+0x700>)
 8008778:	f7f7 fcf6 	bl	8000168 <__aeabi_dsub>
 800877c:	4602      	mov	r2, r0
 800877e:	460b      	mov	r3, r1
 8008780:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008784:	f7f8 f91a 	bl	80009bc <__aeabi_dcmplt>
 8008788:	2800      	cmp	r0, #0
 800878a:	f43f aef6 	beq.w	800857a <_dtoa_r+0x43a>
 800878e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008790:	1e73      	subs	r3, r6, #1
 8008792:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008794:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008798:	2b30      	cmp	r3, #48	@ 0x30
 800879a:	d0f8      	beq.n	800878e <_dtoa_r+0x64e>
 800879c:	9f04      	ldr	r7, [sp, #16]
 800879e:	e73f      	b.n	8008620 <_dtoa_r+0x4e0>
 80087a0:	4b29      	ldr	r3, [pc, #164]	@ (8008848 <_dtoa_r+0x708>)
 80087a2:	f7f7 fe99 	bl	80004d8 <__aeabi_dmul>
 80087a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087aa:	e7bc      	b.n	8008726 <_dtoa_r+0x5e6>
 80087ac:	d10c      	bne.n	80087c8 <_dtoa_r+0x688>
 80087ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087b2:	2200      	movs	r2, #0
 80087b4:	4b25      	ldr	r3, [pc, #148]	@ (800884c <_dtoa_r+0x70c>)
 80087b6:	f7f7 fe8f 	bl	80004d8 <__aeabi_dmul>
 80087ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80087be:	f7f8 f911 	bl	80009e4 <__aeabi_dcmpge>
 80087c2:	2800      	cmp	r0, #0
 80087c4:	f000 815b 	beq.w	8008a7e <_dtoa_r+0x93e>
 80087c8:	2400      	movs	r4, #0
 80087ca:	4625      	mov	r5, r4
 80087cc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80087ce:	4656      	mov	r6, sl
 80087d0:	43db      	mvns	r3, r3
 80087d2:	9304      	str	r3, [sp, #16]
 80087d4:	2700      	movs	r7, #0
 80087d6:	4621      	mov	r1, r4
 80087d8:	4658      	mov	r0, fp
 80087da:	f000 fbb7 	bl	8008f4c <_Bfree>
 80087de:	2d00      	cmp	r5, #0
 80087e0:	d0dc      	beq.n	800879c <_dtoa_r+0x65c>
 80087e2:	b12f      	cbz	r7, 80087f0 <_dtoa_r+0x6b0>
 80087e4:	42af      	cmp	r7, r5
 80087e6:	d003      	beq.n	80087f0 <_dtoa_r+0x6b0>
 80087e8:	4639      	mov	r1, r7
 80087ea:	4658      	mov	r0, fp
 80087ec:	f000 fbae 	bl	8008f4c <_Bfree>
 80087f0:	4629      	mov	r1, r5
 80087f2:	4658      	mov	r0, fp
 80087f4:	f000 fbaa 	bl	8008f4c <_Bfree>
 80087f8:	e7d0      	b.n	800879c <_dtoa_r+0x65c>
 80087fa:	9704      	str	r7, [sp, #16]
 80087fc:	4633      	mov	r3, r6
 80087fe:	461e      	mov	r6, r3
 8008800:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008804:	2a39      	cmp	r2, #57	@ 0x39
 8008806:	d107      	bne.n	8008818 <_dtoa_r+0x6d8>
 8008808:	459a      	cmp	sl, r3
 800880a:	d1f8      	bne.n	80087fe <_dtoa_r+0x6be>
 800880c:	9a04      	ldr	r2, [sp, #16]
 800880e:	3201      	adds	r2, #1
 8008810:	9204      	str	r2, [sp, #16]
 8008812:	2230      	movs	r2, #48	@ 0x30
 8008814:	f88a 2000 	strb.w	r2, [sl]
 8008818:	781a      	ldrb	r2, [r3, #0]
 800881a:	3201      	adds	r2, #1
 800881c:	701a      	strb	r2, [r3, #0]
 800881e:	e7bd      	b.n	800879c <_dtoa_r+0x65c>
 8008820:	2200      	movs	r2, #0
 8008822:	4b09      	ldr	r3, [pc, #36]	@ (8008848 <_dtoa_r+0x708>)
 8008824:	f7f7 fe58 	bl	80004d8 <__aeabi_dmul>
 8008828:	2200      	movs	r2, #0
 800882a:	2300      	movs	r3, #0
 800882c:	4604      	mov	r4, r0
 800882e:	460d      	mov	r5, r1
 8008830:	f7f8 f8ba 	bl	80009a8 <__aeabi_dcmpeq>
 8008834:	2800      	cmp	r0, #0
 8008836:	f43f aebc 	beq.w	80085b2 <_dtoa_r+0x472>
 800883a:	e6f1      	b.n	8008620 <_dtoa_r+0x4e0>
 800883c:	0800a478 	.word	0x0800a478
 8008840:	3fe00000 	.word	0x3fe00000
 8008844:	3ff00000 	.word	0x3ff00000
 8008848:	40240000 	.word	0x40240000
 800884c:	40140000 	.word	0x40140000
 8008850:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008852:	2a00      	cmp	r2, #0
 8008854:	f000 80db 	beq.w	8008a0e <_dtoa_r+0x8ce>
 8008858:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800885a:	2a01      	cmp	r2, #1
 800885c:	f300 80bf 	bgt.w	80089de <_dtoa_r+0x89e>
 8008860:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008862:	2a00      	cmp	r2, #0
 8008864:	f000 80b7 	beq.w	80089d6 <_dtoa_r+0x896>
 8008868:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800886c:	4646      	mov	r6, r8
 800886e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008870:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008872:	2101      	movs	r1, #1
 8008874:	441a      	add	r2, r3
 8008876:	4658      	mov	r0, fp
 8008878:	4498      	add	r8, r3
 800887a:	9209      	str	r2, [sp, #36]	@ 0x24
 800887c:	f000 fc1a 	bl	80090b4 <__i2b>
 8008880:	4605      	mov	r5, r0
 8008882:	b15e      	cbz	r6, 800889c <_dtoa_r+0x75c>
 8008884:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008886:	2b00      	cmp	r3, #0
 8008888:	dd08      	ble.n	800889c <_dtoa_r+0x75c>
 800888a:	42b3      	cmp	r3, r6
 800888c:	bfa8      	it	ge
 800888e:	4633      	movge	r3, r6
 8008890:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008892:	eba8 0803 	sub.w	r8, r8, r3
 8008896:	1af6      	subs	r6, r6, r3
 8008898:	1ad3      	subs	r3, r2, r3
 800889a:	9309      	str	r3, [sp, #36]	@ 0x24
 800889c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800889e:	b1f3      	cbz	r3, 80088de <_dtoa_r+0x79e>
 80088a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	f000 80b7 	beq.w	8008a16 <_dtoa_r+0x8d6>
 80088a8:	b18c      	cbz	r4, 80088ce <_dtoa_r+0x78e>
 80088aa:	4629      	mov	r1, r5
 80088ac:	4622      	mov	r2, r4
 80088ae:	4658      	mov	r0, fp
 80088b0:	f000 fcbe 	bl	8009230 <__pow5mult>
 80088b4:	464a      	mov	r2, r9
 80088b6:	4601      	mov	r1, r0
 80088b8:	4605      	mov	r5, r0
 80088ba:	4658      	mov	r0, fp
 80088bc:	f000 fc10 	bl	80090e0 <__multiply>
 80088c0:	4649      	mov	r1, r9
 80088c2:	9004      	str	r0, [sp, #16]
 80088c4:	4658      	mov	r0, fp
 80088c6:	f000 fb41 	bl	8008f4c <_Bfree>
 80088ca:	9b04      	ldr	r3, [sp, #16]
 80088cc:	4699      	mov	r9, r3
 80088ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088d0:	1b1a      	subs	r2, r3, r4
 80088d2:	d004      	beq.n	80088de <_dtoa_r+0x79e>
 80088d4:	4649      	mov	r1, r9
 80088d6:	4658      	mov	r0, fp
 80088d8:	f000 fcaa 	bl	8009230 <__pow5mult>
 80088dc:	4681      	mov	r9, r0
 80088de:	2101      	movs	r1, #1
 80088e0:	4658      	mov	r0, fp
 80088e2:	f000 fbe7 	bl	80090b4 <__i2b>
 80088e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088e8:	4604      	mov	r4, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	f000 81c9 	beq.w	8008c82 <_dtoa_r+0xb42>
 80088f0:	461a      	mov	r2, r3
 80088f2:	4601      	mov	r1, r0
 80088f4:	4658      	mov	r0, fp
 80088f6:	f000 fc9b 	bl	8009230 <__pow5mult>
 80088fa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80088fc:	4604      	mov	r4, r0
 80088fe:	2b01      	cmp	r3, #1
 8008900:	f300 808f 	bgt.w	8008a22 <_dtoa_r+0x8e2>
 8008904:	9b02      	ldr	r3, [sp, #8]
 8008906:	2b00      	cmp	r3, #0
 8008908:	f040 8087 	bne.w	8008a1a <_dtoa_r+0x8da>
 800890c:	9b03      	ldr	r3, [sp, #12]
 800890e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008912:	2b00      	cmp	r3, #0
 8008914:	f040 8083 	bne.w	8008a1e <_dtoa_r+0x8de>
 8008918:	9b03      	ldr	r3, [sp, #12]
 800891a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800891e:	0d1b      	lsrs	r3, r3, #20
 8008920:	051b      	lsls	r3, r3, #20
 8008922:	b12b      	cbz	r3, 8008930 <_dtoa_r+0x7f0>
 8008924:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008926:	f108 0801 	add.w	r8, r8, #1
 800892a:	3301      	adds	r3, #1
 800892c:	9309      	str	r3, [sp, #36]	@ 0x24
 800892e:	2301      	movs	r3, #1
 8008930:	930a      	str	r3, [sp, #40]	@ 0x28
 8008932:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008934:	2b00      	cmp	r3, #0
 8008936:	f000 81aa 	beq.w	8008c8e <_dtoa_r+0xb4e>
 800893a:	6923      	ldr	r3, [r4, #16]
 800893c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008940:	6918      	ldr	r0, [r3, #16]
 8008942:	f000 fb6b 	bl	800901c <__hi0bits>
 8008946:	f1c0 0020 	rsb	r0, r0, #32
 800894a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800894c:	4418      	add	r0, r3
 800894e:	f010 001f 	ands.w	r0, r0, #31
 8008952:	d071      	beq.n	8008a38 <_dtoa_r+0x8f8>
 8008954:	f1c0 0320 	rsb	r3, r0, #32
 8008958:	2b04      	cmp	r3, #4
 800895a:	dd65      	ble.n	8008a28 <_dtoa_r+0x8e8>
 800895c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800895e:	f1c0 001c 	rsb	r0, r0, #28
 8008962:	4403      	add	r3, r0
 8008964:	4480      	add	r8, r0
 8008966:	4406      	add	r6, r0
 8008968:	9309      	str	r3, [sp, #36]	@ 0x24
 800896a:	f1b8 0f00 	cmp.w	r8, #0
 800896e:	dd05      	ble.n	800897c <_dtoa_r+0x83c>
 8008970:	4649      	mov	r1, r9
 8008972:	4642      	mov	r2, r8
 8008974:	4658      	mov	r0, fp
 8008976:	f000 fcb5 	bl	80092e4 <__lshift>
 800897a:	4681      	mov	r9, r0
 800897c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800897e:	2b00      	cmp	r3, #0
 8008980:	dd05      	ble.n	800898e <_dtoa_r+0x84e>
 8008982:	4621      	mov	r1, r4
 8008984:	461a      	mov	r2, r3
 8008986:	4658      	mov	r0, fp
 8008988:	f000 fcac 	bl	80092e4 <__lshift>
 800898c:	4604      	mov	r4, r0
 800898e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008990:	2b00      	cmp	r3, #0
 8008992:	d053      	beq.n	8008a3c <_dtoa_r+0x8fc>
 8008994:	4621      	mov	r1, r4
 8008996:	4648      	mov	r0, r9
 8008998:	f000 fd10 	bl	80093bc <__mcmp>
 800899c:	2800      	cmp	r0, #0
 800899e:	da4d      	bge.n	8008a3c <_dtoa_r+0x8fc>
 80089a0:	1e7b      	subs	r3, r7, #1
 80089a2:	4649      	mov	r1, r9
 80089a4:	9304      	str	r3, [sp, #16]
 80089a6:	220a      	movs	r2, #10
 80089a8:	2300      	movs	r3, #0
 80089aa:	4658      	mov	r0, fp
 80089ac:	f000 faf0 	bl	8008f90 <__multadd>
 80089b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089b2:	4681      	mov	r9, r0
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	f000 816c 	beq.w	8008c92 <_dtoa_r+0xb52>
 80089ba:	2300      	movs	r3, #0
 80089bc:	4629      	mov	r1, r5
 80089be:	220a      	movs	r2, #10
 80089c0:	4658      	mov	r0, fp
 80089c2:	f000 fae5 	bl	8008f90 <__multadd>
 80089c6:	9b08      	ldr	r3, [sp, #32]
 80089c8:	4605      	mov	r5, r0
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	dc61      	bgt.n	8008a92 <_dtoa_r+0x952>
 80089ce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80089d0:	2b02      	cmp	r3, #2
 80089d2:	dc3b      	bgt.n	8008a4c <_dtoa_r+0x90c>
 80089d4:	e05d      	b.n	8008a92 <_dtoa_r+0x952>
 80089d6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80089d8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80089dc:	e746      	b.n	800886c <_dtoa_r+0x72c>
 80089de:	9b07      	ldr	r3, [sp, #28]
 80089e0:	1e5c      	subs	r4, r3, #1
 80089e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089e4:	42a3      	cmp	r3, r4
 80089e6:	bfbf      	itttt	lt
 80089e8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80089ea:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80089ec:	1ae3      	sublt	r3, r4, r3
 80089ee:	18d2      	addlt	r2, r2, r3
 80089f0:	bfa8      	it	ge
 80089f2:	1b1c      	subge	r4, r3, r4
 80089f4:	9b07      	ldr	r3, [sp, #28]
 80089f6:	bfbe      	ittt	lt
 80089f8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80089fa:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80089fc:	2400      	movlt	r4, #0
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	bfb5      	itete	lt
 8008a02:	eba8 0603 	sublt.w	r6, r8, r3
 8008a06:	4646      	movge	r6, r8
 8008a08:	2300      	movlt	r3, #0
 8008a0a:	9b07      	ldrge	r3, [sp, #28]
 8008a0c:	e730      	b.n	8008870 <_dtoa_r+0x730>
 8008a0e:	4646      	mov	r6, r8
 8008a10:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008a12:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008a14:	e735      	b.n	8008882 <_dtoa_r+0x742>
 8008a16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008a18:	e75c      	b.n	80088d4 <_dtoa_r+0x794>
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	e788      	b.n	8008930 <_dtoa_r+0x7f0>
 8008a1e:	9b02      	ldr	r3, [sp, #8]
 8008a20:	e786      	b.n	8008930 <_dtoa_r+0x7f0>
 8008a22:	2300      	movs	r3, #0
 8008a24:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a26:	e788      	b.n	800893a <_dtoa_r+0x7fa>
 8008a28:	d09f      	beq.n	800896a <_dtoa_r+0x82a>
 8008a2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a2c:	331c      	adds	r3, #28
 8008a2e:	441a      	add	r2, r3
 8008a30:	4498      	add	r8, r3
 8008a32:	441e      	add	r6, r3
 8008a34:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a36:	e798      	b.n	800896a <_dtoa_r+0x82a>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	e7f6      	b.n	8008a2a <_dtoa_r+0x8ea>
 8008a3c:	9b07      	ldr	r3, [sp, #28]
 8008a3e:	9704      	str	r7, [sp, #16]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	dc20      	bgt.n	8008a86 <_dtoa_r+0x946>
 8008a44:	9308      	str	r3, [sp, #32]
 8008a46:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008a48:	2b02      	cmp	r3, #2
 8008a4a:	dd1e      	ble.n	8008a8a <_dtoa_r+0x94a>
 8008a4c:	9b08      	ldr	r3, [sp, #32]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	f47f aebc 	bne.w	80087cc <_dtoa_r+0x68c>
 8008a54:	4621      	mov	r1, r4
 8008a56:	2205      	movs	r2, #5
 8008a58:	4658      	mov	r0, fp
 8008a5a:	f000 fa99 	bl	8008f90 <__multadd>
 8008a5e:	4601      	mov	r1, r0
 8008a60:	4604      	mov	r4, r0
 8008a62:	4648      	mov	r0, r9
 8008a64:	f000 fcaa 	bl	80093bc <__mcmp>
 8008a68:	2800      	cmp	r0, #0
 8008a6a:	f77f aeaf 	ble.w	80087cc <_dtoa_r+0x68c>
 8008a6e:	2331      	movs	r3, #49	@ 0x31
 8008a70:	4656      	mov	r6, sl
 8008a72:	f806 3b01 	strb.w	r3, [r6], #1
 8008a76:	9b04      	ldr	r3, [sp, #16]
 8008a78:	3301      	adds	r3, #1
 8008a7a:	9304      	str	r3, [sp, #16]
 8008a7c:	e6aa      	b.n	80087d4 <_dtoa_r+0x694>
 8008a7e:	9c07      	ldr	r4, [sp, #28]
 8008a80:	9704      	str	r7, [sp, #16]
 8008a82:	4625      	mov	r5, r4
 8008a84:	e7f3      	b.n	8008a6e <_dtoa_r+0x92e>
 8008a86:	9b07      	ldr	r3, [sp, #28]
 8008a88:	9308      	str	r3, [sp, #32]
 8008a8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	f000 8104 	beq.w	8008c9a <_dtoa_r+0xb5a>
 8008a92:	2e00      	cmp	r6, #0
 8008a94:	dd05      	ble.n	8008aa2 <_dtoa_r+0x962>
 8008a96:	4629      	mov	r1, r5
 8008a98:	4632      	mov	r2, r6
 8008a9a:	4658      	mov	r0, fp
 8008a9c:	f000 fc22 	bl	80092e4 <__lshift>
 8008aa0:	4605      	mov	r5, r0
 8008aa2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d05a      	beq.n	8008b5e <_dtoa_r+0xa1e>
 8008aa8:	4658      	mov	r0, fp
 8008aaa:	6869      	ldr	r1, [r5, #4]
 8008aac:	f000 fa0e 	bl	8008ecc <_Balloc>
 8008ab0:	4606      	mov	r6, r0
 8008ab2:	b928      	cbnz	r0, 8008ac0 <_dtoa_r+0x980>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008aba:	4b83      	ldr	r3, [pc, #524]	@ (8008cc8 <_dtoa_r+0xb88>)
 8008abc:	f7ff bb54 	b.w	8008168 <_dtoa_r+0x28>
 8008ac0:	692a      	ldr	r2, [r5, #16]
 8008ac2:	f105 010c 	add.w	r1, r5, #12
 8008ac6:	3202      	adds	r2, #2
 8008ac8:	0092      	lsls	r2, r2, #2
 8008aca:	300c      	adds	r0, #12
 8008acc:	f7ff faa1 	bl	8008012 <memcpy>
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	4631      	mov	r1, r6
 8008ad4:	4658      	mov	r0, fp
 8008ad6:	f000 fc05 	bl	80092e4 <__lshift>
 8008ada:	462f      	mov	r7, r5
 8008adc:	4605      	mov	r5, r0
 8008ade:	f10a 0301 	add.w	r3, sl, #1
 8008ae2:	9307      	str	r3, [sp, #28]
 8008ae4:	9b08      	ldr	r3, [sp, #32]
 8008ae6:	4453      	add	r3, sl
 8008ae8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008aea:	9b02      	ldr	r3, [sp, #8]
 8008aec:	f003 0301 	and.w	r3, r3, #1
 8008af0:	930a      	str	r3, [sp, #40]	@ 0x28
 8008af2:	9b07      	ldr	r3, [sp, #28]
 8008af4:	4621      	mov	r1, r4
 8008af6:	3b01      	subs	r3, #1
 8008af8:	4648      	mov	r0, r9
 8008afa:	9302      	str	r3, [sp, #8]
 8008afc:	f7ff fa97 	bl	800802e <quorem>
 8008b00:	4639      	mov	r1, r7
 8008b02:	9008      	str	r0, [sp, #32]
 8008b04:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008b08:	4648      	mov	r0, r9
 8008b0a:	f000 fc57 	bl	80093bc <__mcmp>
 8008b0e:	462a      	mov	r2, r5
 8008b10:	9009      	str	r0, [sp, #36]	@ 0x24
 8008b12:	4621      	mov	r1, r4
 8008b14:	4658      	mov	r0, fp
 8008b16:	f000 fc6d 	bl	80093f4 <__mdiff>
 8008b1a:	68c2      	ldr	r2, [r0, #12]
 8008b1c:	4606      	mov	r6, r0
 8008b1e:	bb02      	cbnz	r2, 8008b62 <_dtoa_r+0xa22>
 8008b20:	4601      	mov	r1, r0
 8008b22:	4648      	mov	r0, r9
 8008b24:	f000 fc4a 	bl	80093bc <__mcmp>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	4631      	mov	r1, r6
 8008b2c:	4658      	mov	r0, fp
 8008b2e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008b30:	f000 fa0c 	bl	8008f4c <_Bfree>
 8008b34:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008b36:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008b38:	9e07      	ldr	r6, [sp, #28]
 8008b3a:	ea43 0102 	orr.w	r1, r3, r2
 8008b3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b40:	4319      	orrs	r1, r3
 8008b42:	d110      	bne.n	8008b66 <_dtoa_r+0xa26>
 8008b44:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008b48:	d029      	beq.n	8008b9e <_dtoa_r+0xa5e>
 8008b4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	dd02      	ble.n	8008b56 <_dtoa_r+0xa16>
 8008b50:	9b08      	ldr	r3, [sp, #32]
 8008b52:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008b56:	9b02      	ldr	r3, [sp, #8]
 8008b58:	f883 8000 	strb.w	r8, [r3]
 8008b5c:	e63b      	b.n	80087d6 <_dtoa_r+0x696>
 8008b5e:	4628      	mov	r0, r5
 8008b60:	e7bb      	b.n	8008ada <_dtoa_r+0x99a>
 8008b62:	2201      	movs	r2, #1
 8008b64:	e7e1      	b.n	8008b2a <_dtoa_r+0x9ea>
 8008b66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	db04      	blt.n	8008b76 <_dtoa_r+0xa36>
 8008b6c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8008b6e:	430b      	orrs	r3, r1
 8008b70:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008b72:	430b      	orrs	r3, r1
 8008b74:	d120      	bne.n	8008bb8 <_dtoa_r+0xa78>
 8008b76:	2a00      	cmp	r2, #0
 8008b78:	dded      	ble.n	8008b56 <_dtoa_r+0xa16>
 8008b7a:	4649      	mov	r1, r9
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	4658      	mov	r0, fp
 8008b80:	f000 fbb0 	bl	80092e4 <__lshift>
 8008b84:	4621      	mov	r1, r4
 8008b86:	4681      	mov	r9, r0
 8008b88:	f000 fc18 	bl	80093bc <__mcmp>
 8008b8c:	2800      	cmp	r0, #0
 8008b8e:	dc03      	bgt.n	8008b98 <_dtoa_r+0xa58>
 8008b90:	d1e1      	bne.n	8008b56 <_dtoa_r+0xa16>
 8008b92:	f018 0f01 	tst.w	r8, #1
 8008b96:	d0de      	beq.n	8008b56 <_dtoa_r+0xa16>
 8008b98:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008b9c:	d1d8      	bne.n	8008b50 <_dtoa_r+0xa10>
 8008b9e:	2339      	movs	r3, #57	@ 0x39
 8008ba0:	9a02      	ldr	r2, [sp, #8]
 8008ba2:	7013      	strb	r3, [r2, #0]
 8008ba4:	4633      	mov	r3, r6
 8008ba6:	461e      	mov	r6, r3
 8008ba8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008bac:	3b01      	subs	r3, #1
 8008bae:	2a39      	cmp	r2, #57	@ 0x39
 8008bb0:	d052      	beq.n	8008c58 <_dtoa_r+0xb18>
 8008bb2:	3201      	adds	r2, #1
 8008bb4:	701a      	strb	r2, [r3, #0]
 8008bb6:	e60e      	b.n	80087d6 <_dtoa_r+0x696>
 8008bb8:	2a00      	cmp	r2, #0
 8008bba:	dd07      	ble.n	8008bcc <_dtoa_r+0xa8c>
 8008bbc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008bc0:	d0ed      	beq.n	8008b9e <_dtoa_r+0xa5e>
 8008bc2:	9a02      	ldr	r2, [sp, #8]
 8008bc4:	f108 0301 	add.w	r3, r8, #1
 8008bc8:	7013      	strb	r3, [r2, #0]
 8008bca:	e604      	b.n	80087d6 <_dtoa_r+0x696>
 8008bcc:	9b07      	ldr	r3, [sp, #28]
 8008bce:	9a07      	ldr	r2, [sp, #28]
 8008bd0:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008bd4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d028      	beq.n	8008c2c <_dtoa_r+0xaec>
 8008bda:	4649      	mov	r1, r9
 8008bdc:	2300      	movs	r3, #0
 8008bde:	220a      	movs	r2, #10
 8008be0:	4658      	mov	r0, fp
 8008be2:	f000 f9d5 	bl	8008f90 <__multadd>
 8008be6:	42af      	cmp	r7, r5
 8008be8:	4681      	mov	r9, r0
 8008bea:	f04f 0300 	mov.w	r3, #0
 8008bee:	f04f 020a 	mov.w	r2, #10
 8008bf2:	4639      	mov	r1, r7
 8008bf4:	4658      	mov	r0, fp
 8008bf6:	d107      	bne.n	8008c08 <_dtoa_r+0xac8>
 8008bf8:	f000 f9ca 	bl	8008f90 <__multadd>
 8008bfc:	4607      	mov	r7, r0
 8008bfe:	4605      	mov	r5, r0
 8008c00:	9b07      	ldr	r3, [sp, #28]
 8008c02:	3301      	adds	r3, #1
 8008c04:	9307      	str	r3, [sp, #28]
 8008c06:	e774      	b.n	8008af2 <_dtoa_r+0x9b2>
 8008c08:	f000 f9c2 	bl	8008f90 <__multadd>
 8008c0c:	4629      	mov	r1, r5
 8008c0e:	4607      	mov	r7, r0
 8008c10:	2300      	movs	r3, #0
 8008c12:	220a      	movs	r2, #10
 8008c14:	4658      	mov	r0, fp
 8008c16:	f000 f9bb 	bl	8008f90 <__multadd>
 8008c1a:	4605      	mov	r5, r0
 8008c1c:	e7f0      	b.n	8008c00 <_dtoa_r+0xac0>
 8008c1e:	9b08      	ldr	r3, [sp, #32]
 8008c20:	2700      	movs	r7, #0
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	bfcc      	ite	gt
 8008c26:	461e      	movgt	r6, r3
 8008c28:	2601      	movle	r6, #1
 8008c2a:	4456      	add	r6, sl
 8008c2c:	4649      	mov	r1, r9
 8008c2e:	2201      	movs	r2, #1
 8008c30:	4658      	mov	r0, fp
 8008c32:	f000 fb57 	bl	80092e4 <__lshift>
 8008c36:	4621      	mov	r1, r4
 8008c38:	4681      	mov	r9, r0
 8008c3a:	f000 fbbf 	bl	80093bc <__mcmp>
 8008c3e:	2800      	cmp	r0, #0
 8008c40:	dcb0      	bgt.n	8008ba4 <_dtoa_r+0xa64>
 8008c42:	d102      	bne.n	8008c4a <_dtoa_r+0xb0a>
 8008c44:	f018 0f01 	tst.w	r8, #1
 8008c48:	d1ac      	bne.n	8008ba4 <_dtoa_r+0xa64>
 8008c4a:	4633      	mov	r3, r6
 8008c4c:	461e      	mov	r6, r3
 8008c4e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c52:	2a30      	cmp	r2, #48	@ 0x30
 8008c54:	d0fa      	beq.n	8008c4c <_dtoa_r+0xb0c>
 8008c56:	e5be      	b.n	80087d6 <_dtoa_r+0x696>
 8008c58:	459a      	cmp	sl, r3
 8008c5a:	d1a4      	bne.n	8008ba6 <_dtoa_r+0xa66>
 8008c5c:	9b04      	ldr	r3, [sp, #16]
 8008c5e:	3301      	adds	r3, #1
 8008c60:	9304      	str	r3, [sp, #16]
 8008c62:	2331      	movs	r3, #49	@ 0x31
 8008c64:	f88a 3000 	strb.w	r3, [sl]
 8008c68:	e5b5      	b.n	80087d6 <_dtoa_r+0x696>
 8008c6a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008c6c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008ccc <_dtoa_r+0xb8c>
 8008c70:	b11b      	cbz	r3, 8008c7a <_dtoa_r+0xb3a>
 8008c72:	f10a 0308 	add.w	r3, sl, #8
 8008c76:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008c78:	6013      	str	r3, [r2, #0]
 8008c7a:	4650      	mov	r0, sl
 8008c7c:	b017      	add	sp, #92	@ 0x5c
 8008c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c82:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	f77f ae3d 	ble.w	8008904 <_dtoa_r+0x7c4>
 8008c8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c8c:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c8e:	2001      	movs	r0, #1
 8008c90:	e65b      	b.n	800894a <_dtoa_r+0x80a>
 8008c92:	9b08      	ldr	r3, [sp, #32]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	f77f aed6 	ble.w	8008a46 <_dtoa_r+0x906>
 8008c9a:	4656      	mov	r6, sl
 8008c9c:	4621      	mov	r1, r4
 8008c9e:	4648      	mov	r0, r9
 8008ca0:	f7ff f9c5 	bl	800802e <quorem>
 8008ca4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008ca8:	9b08      	ldr	r3, [sp, #32]
 8008caa:	f806 8b01 	strb.w	r8, [r6], #1
 8008cae:	eba6 020a 	sub.w	r2, r6, sl
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	ddb3      	ble.n	8008c1e <_dtoa_r+0xade>
 8008cb6:	4649      	mov	r1, r9
 8008cb8:	2300      	movs	r3, #0
 8008cba:	220a      	movs	r2, #10
 8008cbc:	4658      	mov	r0, fp
 8008cbe:	f000 f967 	bl	8008f90 <__multadd>
 8008cc2:	4681      	mov	r9, r0
 8008cc4:	e7ea      	b.n	8008c9c <_dtoa_r+0xb5c>
 8008cc6:	bf00      	nop
 8008cc8:	0800a3d3 	.word	0x0800a3d3
 8008ccc:	0800a357 	.word	0x0800a357

08008cd0 <_free_r>:
 8008cd0:	b538      	push	{r3, r4, r5, lr}
 8008cd2:	4605      	mov	r5, r0
 8008cd4:	2900      	cmp	r1, #0
 8008cd6:	d040      	beq.n	8008d5a <_free_r+0x8a>
 8008cd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cdc:	1f0c      	subs	r4, r1, #4
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	bfb8      	it	lt
 8008ce2:	18e4      	addlt	r4, r4, r3
 8008ce4:	f000 f8e6 	bl	8008eb4 <__malloc_lock>
 8008ce8:	4a1c      	ldr	r2, [pc, #112]	@ (8008d5c <_free_r+0x8c>)
 8008cea:	6813      	ldr	r3, [r2, #0]
 8008cec:	b933      	cbnz	r3, 8008cfc <_free_r+0x2c>
 8008cee:	6063      	str	r3, [r4, #4]
 8008cf0:	6014      	str	r4, [r2, #0]
 8008cf2:	4628      	mov	r0, r5
 8008cf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cf8:	f000 b8e2 	b.w	8008ec0 <__malloc_unlock>
 8008cfc:	42a3      	cmp	r3, r4
 8008cfe:	d908      	bls.n	8008d12 <_free_r+0x42>
 8008d00:	6820      	ldr	r0, [r4, #0]
 8008d02:	1821      	adds	r1, r4, r0
 8008d04:	428b      	cmp	r3, r1
 8008d06:	bf01      	itttt	eq
 8008d08:	6819      	ldreq	r1, [r3, #0]
 8008d0a:	685b      	ldreq	r3, [r3, #4]
 8008d0c:	1809      	addeq	r1, r1, r0
 8008d0e:	6021      	streq	r1, [r4, #0]
 8008d10:	e7ed      	b.n	8008cee <_free_r+0x1e>
 8008d12:	461a      	mov	r2, r3
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	b10b      	cbz	r3, 8008d1c <_free_r+0x4c>
 8008d18:	42a3      	cmp	r3, r4
 8008d1a:	d9fa      	bls.n	8008d12 <_free_r+0x42>
 8008d1c:	6811      	ldr	r1, [r2, #0]
 8008d1e:	1850      	adds	r0, r2, r1
 8008d20:	42a0      	cmp	r0, r4
 8008d22:	d10b      	bne.n	8008d3c <_free_r+0x6c>
 8008d24:	6820      	ldr	r0, [r4, #0]
 8008d26:	4401      	add	r1, r0
 8008d28:	1850      	adds	r0, r2, r1
 8008d2a:	4283      	cmp	r3, r0
 8008d2c:	6011      	str	r1, [r2, #0]
 8008d2e:	d1e0      	bne.n	8008cf2 <_free_r+0x22>
 8008d30:	6818      	ldr	r0, [r3, #0]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	4408      	add	r0, r1
 8008d36:	6010      	str	r0, [r2, #0]
 8008d38:	6053      	str	r3, [r2, #4]
 8008d3a:	e7da      	b.n	8008cf2 <_free_r+0x22>
 8008d3c:	d902      	bls.n	8008d44 <_free_r+0x74>
 8008d3e:	230c      	movs	r3, #12
 8008d40:	602b      	str	r3, [r5, #0]
 8008d42:	e7d6      	b.n	8008cf2 <_free_r+0x22>
 8008d44:	6820      	ldr	r0, [r4, #0]
 8008d46:	1821      	adds	r1, r4, r0
 8008d48:	428b      	cmp	r3, r1
 8008d4a:	bf01      	itttt	eq
 8008d4c:	6819      	ldreq	r1, [r3, #0]
 8008d4e:	685b      	ldreq	r3, [r3, #4]
 8008d50:	1809      	addeq	r1, r1, r0
 8008d52:	6021      	streq	r1, [r4, #0]
 8008d54:	6063      	str	r3, [r4, #4]
 8008d56:	6054      	str	r4, [r2, #4]
 8008d58:	e7cb      	b.n	8008cf2 <_free_r+0x22>
 8008d5a:	bd38      	pop	{r3, r4, r5, pc}
 8008d5c:	200049b0 	.word	0x200049b0

08008d60 <malloc>:
 8008d60:	4b02      	ldr	r3, [pc, #8]	@ (8008d6c <malloc+0xc>)
 8008d62:	4601      	mov	r1, r0
 8008d64:	6818      	ldr	r0, [r3, #0]
 8008d66:	f000 b825 	b.w	8008db4 <_malloc_r>
 8008d6a:	bf00      	nop
 8008d6c:	200000a8 	.word	0x200000a8

08008d70 <sbrk_aligned>:
 8008d70:	b570      	push	{r4, r5, r6, lr}
 8008d72:	4e0f      	ldr	r6, [pc, #60]	@ (8008db0 <sbrk_aligned+0x40>)
 8008d74:	460c      	mov	r4, r1
 8008d76:	6831      	ldr	r1, [r6, #0]
 8008d78:	4605      	mov	r5, r0
 8008d7a:	b911      	cbnz	r1, 8008d82 <sbrk_aligned+0x12>
 8008d7c:	f000 fe26 	bl	80099cc <_sbrk_r>
 8008d80:	6030      	str	r0, [r6, #0]
 8008d82:	4621      	mov	r1, r4
 8008d84:	4628      	mov	r0, r5
 8008d86:	f000 fe21 	bl	80099cc <_sbrk_r>
 8008d8a:	1c43      	adds	r3, r0, #1
 8008d8c:	d103      	bne.n	8008d96 <sbrk_aligned+0x26>
 8008d8e:	f04f 34ff 	mov.w	r4, #4294967295
 8008d92:	4620      	mov	r0, r4
 8008d94:	bd70      	pop	{r4, r5, r6, pc}
 8008d96:	1cc4      	adds	r4, r0, #3
 8008d98:	f024 0403 	bic.w	r4, r4, #3
 8008d9c:	42a0      	cmp	r0, r4
 8008d9e:	d0f8      	beq.n	8008d92 <sbrk_aligned+0x22>
 8008da0:	1a21      	subs	r1, r4, r0
 8008da2:	4628      	mov	r0, r5
 8008da4:	f000 fe12 	bl	80099cc <_sbrk_r>
 8008da8:	3001      	adds	r0, #1
 8008daa:	d1f2      	bne.n	8008d92 <sbrk_aligned+0x22>
 8008dac:	e7ef      	b.n	8008d8e <sbrk_aligned+0x1e>
 8008dae:	bf00      	nop
 8008db0:	200049ac 	.word	0x200049ac

08008db4 <_malloc_r>:
 8008db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008db8:	1ccd      	adds	r5, r1, #3
 8008dba:	f025 0503 	bic.w	r5, r5, #3
 8008dbe:	3508      	adds	r5, #8
 8008dc0:	2d0c      	cmp	r5, #12
 8008dc2:	bf38      	it	cc
 8008dc4:	250c      	movcc	r5, #12
 8008dc6:	2d00      	cmp	r5, #0
 8008dc8:	4606      	mov	r6, r0
 8008dca:	db01      	blt.n	8008dd0 <_malloc_r+0x1c>
 8008dcc:	42a9      	cmp	r1, r5
 8008dce:	d904      	bls.n	8008dda <_malloc_r+0x26>
 8008dd0:	230c      	movs	r3, #12
 8008dd2:	6033      	str	r3, [r6, #0]
 8008dd4:	2000      	movs	r0, #0
 8008dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008eb0 <_malloc_r+0xfc>
 8008dde:	f000 f869 	bl	8008eb4 <__malloc_lock>
 8008de2:	f8d8 3000 	ldr.w	r3, [r8]
 8008de6:	461c      	mov	r4, r3
 8008de8:	bb44      	cbnz	r4, 8008e3c <_malloc_r+0x88>
 8008dea:	4629      	mov	r1, r5
 8008dec:	4630      	mov	r0, r6
 8008dee:	f7ff ffbf 	bl	8008d70 <sbrk_aligned>
 8008df2:	1c43      	adds	r3, r0, #1
 8008df4:	4604      	mov	r4, r0
 8008df6:	d158      	bne.n	8008eaa <_malloc_r+0xf6>
 8008df8:	f8d8 4000 	ldr.w	r4, [r8]
 8008dfc:	4627      	mov	r7, r4
 8008dfe:	2f00      	cmp	r7, #0
 8008e00:	d143      	bne.n	8008e8a <_malloc_r+0xd6>
 8008e02:	2c00      	cmp	r4, #0
 8008e04:	d04b      	beq.n	8008e9e <_malloc_r+0xea>
 8008e06:	6823      	ldr	r3, [r4, #0]
 8008e08:	4639      	mov	r1, r7
 8008e0a:	4630      	mov	r0, r6
 8008e0c:	eb04 0903 	add.w	r9, r4, r3
 8008e10:	f000 fddc 	bl	80099cc <_sbrk_r>
 8008e14:	4581      	cmp	r9, r0
 8008e16:	d142      	bne.n	8008e9e <_malloc_r+0xea>
 8008e18:	6821      	ldr	r1, [r4, #0]
 8008e1a:	4630      	mov	r0, r6
 8008e1c:	1a6d      	subs	r5, r5, r1
 8008e1e:	4629      	mov	r1, r5
 8008e20:	f7ff ffa6 	bl	8008d70 <sbrk_aligned>
 8008e24:	3001      	adds	r0, #1
 8008e26:	d03a      	beq.n	8008e9e <_malloc_r+0xea>
 8008e28:	6823      	ldr	r3, [r4, #0]
 8008e2a:	442b      	add	r3, r5
 8008e2c:	6023      	str	r3, [r4, #0]
 8008e2e:	f8d8 3000 	ldr.w	r3, [r8]
 8008e32:	685a      	ldr	r2, [r3, #4]
 8008e34:	bb62      	cbnz	r2, 8008e90 <_malloc_r+0xdc>
 8008e36:	f8c8 7000 	str.w	r7, [r8]
 8008e3a:	e00f      	b.n	8008e5c <_malloc_r+0xa8>
 8008e3c:	6822      	ldr	r2, [r4, #0]
 8008e3e:	1b52      	subs	r2, r2, r5
 8008e40:	d420      	bmi.n	8008e84 <_malloc_r+0xd0>
 8008e42:	2a0b      	cmp	r2, #11
 8008e44:	d917      	bls.n	8008e76 <_malloc_r+0xc2>
 8008e46:	1961      	adds	r1, r4, r5
 8008e48:	42a3      	cmp	r3, r4
 8008e4a:	6025      	str	r5, [r4, #0]
 8008e4c:	bf18      	it	ne
 8008e4e:	6059      	strne	r1, [r3, #4]
 8008e50:	6863      	ldr	r3, [r4, #4]
 8008e52:	bf08      	it	eq
 8008e54:	f8c8 1000 	streq.w	r1, [r8]
 8008e58:	5162      	str	r2, [r4, r5]
 8008e5a:	604b      	str	r3, [r1, #4]
 8008e5c:	4630      	mov	r0, r6
 8008e5e:	f000 f82f 	bl	8008ec0 <__malloc_unlock>
 8008e62:	f104 000b 	add.w	r0, r4, #11
 8008e66:	1d23      	adds	r3, r4, #4
 8008e68:	f020 0007 	bic.w	r0, r0, #7
 8008e6c:	1ac2      	subs	r2, r0, r3
 8008e6e:	bf1c      	itt	ne
 8008e70:	1a1b      	subne	r3, r3, r0
 8008e72:	50a3      	strne	r3, [r4, r2]
 8008e74:	e7af      	b.n	8008dd6 <_malloc_r+0x22>
 8008e76:	6862      	ldr	r2, [r4, #4]
 8008e78:	42a3      	cmp	r3, r4
 8008e7a:	bf0c      	ite	eq
 8008e7c:	f8c8 2000 	streq.w	r2, [r8]
 8008e80:	605a      	strne	r2, [r3, #4]
 8008e82:	e7eb      	b.n	8008e5c <_malloc_r+0xa8>
 8008e84:	4623      	mov	r3, r4
 8008e86:	6864      	ldr	r4, [r4, #4]
 8008e88:	e7ae      	b.n	8008de8 <_malloc_r+0x34>
 8008e8a:	463c      	mov	r4, r7
 8008e8c:	687f      	ldr	r7, [r7, #4]
 8008e8e:	e7b6      	b.n	8008dfe <_malloc_r+0x4a>
 8008e90:	461a      	mov	r2, r3
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	42a3      	cmp	r3, r4
 8008e96:	d1fb      	bne.n	8008e90 <_malloc_r+0xdc>
 8008e98:	2300      	movs	r3, #0
 8008e9a:	6053      	str	r3, [r2, #4]
 8008e9c:	e7de      	b.n	8008e5c <_malloc_r+0xa8>
 8008e9e:	230c      	movs	r3, #12
 8008ea0:	4630      	mov	r0, r6
 8008ea2:	6033      	str	r3, [r6, #0]
 8008ea4:	f000 f80c 	bl	8008ec0 <__malloc_unlock>
 8008ea8:	e794      	b.n	8008dd4 <_malloc_r+0x20>
 8008eaa:	6005      	str	r5, [r0, #0]
 8008eac:	e7d6      	b.n	8008e5c <_malloc_r+0xa8>
 8008eae:	bf00      	nop
 8008eb0:	200049b0 	.word	0x200049b0

08008eb4 <__malloc_lock>:
 8008eb4:	4801      	ldr	r0, [pc, #4]	@ (8008ebc <__malloc_lock+0x8>)
 8008eb6:	f7ff b89c 	b.w	8007ff2 <__retarget_lock_acquire_recursive>
 8008eba:	bf00      	nop
 8008ebc:	200049a8 	.word	0x200049a8

08008ec0 <__malloc_unlock>:
 8008ec0:	4801      	ldr	r0, [pc, #4]	@ (8008ec8 <__malloc_unlock+0x8>)
 8008ec2:	f7ff b897 	b.w	8007ff4 <__retarget_lock_release_recursive>
 8008ec6:	bf00      	nop
 8008ec8:	200049a8 	.word	0x200049a8

08008ecc <_Balloc>:
 8008ecc:	b570      	push	{r4, r5, r6, lr}
 8008ece:	69c6      	ldr	r6, [r0, #28]
 8008ed0:	4604      	mov	r4, r0
 8008ed2:	460d      	mov	r5, r1
 8008ed4:	b976      	cbnz	r6, 8008ef4 <_Balloc+0x28>
 8008ed6:	2010      	movs	r0, #16
 8008ed8:	f7ff ff42 	bl	8008d60 <malloc>
 8008edc:	4602      	mov	r2, r0
 8008ede:	61e0      	str	r0, [r4, #28]
 8008ee0:	b920      	cbnz	r0, 8008eec <_Balloc+0x20>
 8008ee2:	216b      	movs	r1, #107	@ 0x6b
 8008ee4:	4b17      	ldr	r3, [pc, #92]	@ (8008f44 <_Balloc+0x78>)
 8008ee6:	4818      	ldr	r0, [pc, #96]	@ (8008f48 <_Balloc+0x7c>)
 8008ee8:	f000 fd80 	bl	80099ec <__assert_func>
 8008eec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ef0:	6006      	str	r6, [r0, #0]
 8008ef2:	60c6      	str	r6, [r0, #12]
 8008ef4:	69e6      	ldr	r6, [r4, #28]
 8008ef6:	68f3      	ldr	r3, [r6, #12]
 8008ef8:	b183      	cbz	r3, 8008f1c <_Balloc+0x50>
 8008efa:	69e3      	ldr	r3, [r4, #28]
 8008efc:	68db      	ldr	r3, [r3, #12]
 8008efe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008f02:	b9b8      	cbnz	r0, 8008f34 <_Balloc+0x68>
 8008f04:	2101      	movs	r1, #1
 8008f06:	fa01 f605 	lsl.w	r6, r1, r5
 8008f0a:	1d72      	adds	r2, r6, #5
 8008f0c:	4620      	mov	r0, r4
 8008f0e:	0092      	lsls	r2, r2, #2
 8008f10:	f000 fd8a 	bl	8009a28 <_calloc_r>
 8008f14:	b160      	cbz	r0, 8008f30 <_Balloc+0x64>
 8008f16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008f1a:	e00e      	b.n	8008f3a <_Balloc+0x6e>
 8008f1c:	2221      	movs	r2, #33	@ 0x21
 8008f1e:	2104      	movs	r1, #4
 8008f20:	4620      	mov	r0, r4
 8008f22:	f000 fd81 	bl	8009a28 <_calloc_r>
 8008f26:	69e3      	ldr	r3, [r4, #28]
 8008f28:	60f0      	str	r0, [r6, #12]
 8008f2a:	68db      	ldr	r3, [r3, #12]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d1e4      	bne.n	8008efa <_Balloc+0x2e>
 8008f30:	2000      	movs	r0, #0
 8008f32:	bd70      	pop	{r4, r5, r6, pc}
 8008f34:	6802      	ldr	r2, [r0, #0]
 8008f36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008f40:	e7f7      	b.n	8008f32 <_Balloc+0x66>
 8008f42:	bf00      	nop
 8008f44:	0800a364 	.word	0x0800a364
 8008f48:	0800a3e4 	.word	0x0800a3e4

08008f4c <_Bfree>:
 8008f4c:	b570      	push	{r4, r5, r6, lr}
 8008f4e:	69c6      	ldr	r6, [r0, #28]
 8008f50:	4605      	mov	r5, r0
 8008f52:	460c      	mov	r4, r1
 8008f54:	b976      	cbnz	r6, 8008f74 <_Bfree+0x28>
 8008f56:	2010      	movs	r0, #16
 8008f58:	f7ff ff02 	bl	8008d60 <malloc>
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	61e8      	str	r0, [r5, #28]
 8008f60:	b920      	cbnz	r0, 8008f6c <_Bfree+0x20>
 8008f62:	218f      	movs	r1, #143	@ 0x8f
 8008f64:	4b08      	ldr	r3, [pc, #32]	@ (8008f88 <_Bfree+0x3c>)
 8008f66:	4809      	ldr	r0, [pc, #36]	@ (8008f8c <_Bfree+0x40>)
 8008f68:	f000 fd40 	bl	80099ec <__assert_func>
 8008f6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f70:	6006      	str	r6, [r0, #0]
 8008f72:	60c6      	str	r6, [r0, #12]
 8008f74:	b13c      	cbz	r4, 8008f86 <_Bfree+0x3a>
 8008f76:	69eb      	ldr	r3, [r5, #28]
 8008f78:	6862      	ldr	r2, [r4, #4]
 8008f7a:	68db      	ldr	r3, [r3, #12]
 8008f7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f80:	6021      	str	r1, [r4, #0]
 8008f82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008f86:	bd70      	pop	{r4, r5, r6, pc}
 8008f88:	0800a364 	.word	0x0800a364
 8008f8c:	0800a3e4 	.word	0x0800a3e4

08008f90 <__multadd>:
 8008f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f94:	4607      	mov	r7, r0
 8008f96:	460c      	mov	r4, r1
 8008f98:	461e      	mov	r6, r3
 8008f9a:	2000      	movs	r0, #0
 8008f9c:	690d      	ldr	r5, [r1, #16]
 8008f9e:	f101 0c14 	add.w	ip, r1, #20
 8008fa2:	f8dc 3000 	ldr.w	r3, [ip]
 8008fa6:	3001      	adds	r0, #1
 8008fa8:	b299      	uxth	r1, r3
 8008faa:	fb02 6101 	mla	r1, r2, r1, r6
 8008fae:	0c1e      	lsrs	r6, r3, #16
 8008fb0:	0c0b      	lsrs	r3, r1, #16
 8008fb2:	fb02 3306 	mla	r3, r2, r6, r3
 8008fb6:	b289      	uxth	r1, r1
 8008fb8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008fbc:	4285      	cmp	r5, r0
 8008fbe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008fc2:	f84c 1b04 	str.w	r1, [ip], #4
 8008fc6:	dcec      	bgt.n	8008fa2 <__multadd+0x12>
 8008fc8:	b30e      	cbz	r6, 800900e <__multadd+0x7e>
 8008fca:	68a3      	ldr	r3, [r4, #8]
 8008fcc:	42ab      	cmp	r3, r5
 8008fce:	dc19      	bgt.n	8009004 <__multadd+0x74>
 8008fd0:	6861      	ldr	r1, [r4, #4]
 8008fd2:	4638      	mov	r0, r7
 8008fd4:	3101      	adds	r1, #1
 8008fd6:	f7ff ff79 	bl	8008ecc <_Balloc>
 8008fda:	4680      	mov	r8, r0
 8008fdc:	b928      	cbnz	r0, 8008fea <__multadd+0x5a>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	21ba      	movs	r1, #186	@ 0xba
 8008fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8009014 <__multadd+0x84>)
 8008fe4:	480c      	ldr	r0, [pc, #48]	@ (8009018 <__multadd+0x88>)
 8008fe6:	f000 fd01 	bl	80099ec <__assert_func>
 8008fea:	6922      	ldr	r2, [r4, #16]
 8008fec:	f104 010c 	add.w	r1, r4, #12
 8008ff0:	3202      	adds	r2, #2
 8008ff2:	0092      	lsls	r2, r2, #2
 8008ff4:	300c      	adds	r0, #12
 8008ff6:	f7ff f80c 	bl	8008012 <memcpy>
 8008ffa:	4621      	mov	r1, r4
 8008ffc:	4638      	mov	r0, r7
 8008ffe:	f7ff ffa5 	bl	8008f4c <_Bfree>
 8009002:	4644      	mov	r4, r8
 8009004:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009008:	3501      	adds	r5, #1
 800900a:	615e      	str	r6, [r3, #20]
 800900c:	6125      	str	r5, [r4, #16]
 800900e:	4620      	mov	r0, r4
 8009010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009014:	0800a3d3 	.word	0x0800a3d3
 8009018:	0800a3e4 	.word	0x0800a3e4

0800901c <__hi0bits>:
 800901c:	4603      	mov	r3, r0
 800901e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009022:	bf3a      	itte	cc
 8009024:	0403      	lslcc	r3, r0, #16
 8009026:	2010      	movcc	r0, #16
 8009028:	2000      	movcs	r0, #0
 800902a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800902e:	bf3c      	itt	cc
 8009030:	021b      	lslcc	r3, r3, #8
 8009032:	3008      	addcc	r0, #8
 8009034:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009038:	bf3c      	itt	cc
 800903a:	011b      	lslcc	r3, r3, #4
 800903c:	3004      	addcc	r0, #4
 800903e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009042:	bf3c      	itt	cc
 8009044:	009b      	lslcc	r3, r3, #2
 8009046:	3002      	addcc	r0, #2
 8009048:	2b00      	cmp	r3, #0
 800904a:	db05      	blt.n	8009058 <__hi0bits+0x3c>
 800904c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009050:	f100 0001 	add.w	r0, r0, #1
 8009054:	bf08      	it	eq
 8009056:	2020      	moveq	r0, #32
 8009058:	4770      	bx	lr

0800905a <__lo0bits>:
 800905a:	6803      	ldr	r3, [r0, #0]
 800905c:	4602      	mov	r2, r0
 800905e:	f013 0007 	ands.w	r0, r3, #7
 8009062:	d00b      	beq.n	800907c <__lo0bits+0x22>
 8009064:	07d9      	lsls	r1, r3, #31
 8009066:	d421      	bmi.n	80090ac <__lo0bits+0x52>
 8009068:	0798      	lsls	r0, r3, #30
 800906a:	bf49      	itett	mi
 800906c:	085b      	lsrmi	r3, r3, #1
 800906e:	089b      	lsrpl	r3, r3, #2
 8009070:	2001      	movmi	r0, #1
 8009072:	6013      	strmi	r3, [r2, #0]
 8009074:	bf5c      	itt	pl
 8009076:	2002      	movpl	r0, #2
 8009078:	6013      	strpl	r3, [r2, #0]
 800907a:	4770      	bx	lr
 800907c:	b299      	uxth	r1, r3
 800907e:	b909      	cbnz	r1, 8009084 <__lo0bits+0x2a>
 8009080:	2010      	movs	r0, #16
 8009082:	0c1b      	lsrs	r3, r3, #16
 8009084:	b2d9      	uxtb	r1, r3
 8009086:	b909      	cbnz	r1, 800908c <__lo0bits+0x32>
 8009088:	3008      	adds	r0, #8
 800908a:	0a1b      	lsrs	r3, r3, #8
 800908c:	0719      	lsls	r1, r3, #28
 800908e:	bf04      	itt	eq
 8009090:	091b      	lsreq	r3, r3, #4
 8009092:	3004      	addeq	r0, #4
 8009094:	0799      	lsls	r1, r3, #30
 8009096:	bf04      	itt	eq
 8009098:	089b      	lsreq	r3, r3, #2
 800909a:	3002      	addeq	r0, #2
 800909c:	07d9      	lsls	r1, r3, #31
 800909e:	d403      	bmi.n	80090a8 <__lo0bits+0x4e>
 80090a0:	085b      	lsrs	r3, r3, #1
 80090a2:	f100 0001 	add.w	r0, r0, #1
 80090a6:	d003      	beq.n	80090b0 <__lo0bits+0x56>
 80090a8:	6013      	str	r3, [r2, #0]
 80090aa:	4770      	bx	lr
 80090ac:	2000      	movs	r0, #0
 80090ae:	4770      	bx	lr
 80090b0:	2020      	movs	r0, #32
 80090b2:	4770      	bx	lr

080090b4 <__i2b>:
 80090b4:	b510      	push	{r4, lr}
 80090b6:	460c      	mov	r4, r1
 80090b8:	2101      	movs	r1, #1
 80090ba:	f7ff ff07 	bl	8008ecc <_Balloc>
 80090be:	4602      	mov	r2, r0
 80090c0:	b928      	cbnz	r0, 80090ce <__i2b+0x1a>
 80090c2:	f240 1145 	movw	r1, #325	@ 0x145
 80090c6:	4b04      	ldr	r3, [pc, #16]	@ (80090d8 <__i2b+0x24>)
 80090c8:	4804      	ldr	r0, [pc, #16]	@ (80090dc <__i2b+0x28>)
 80090ca:	f000 fc8f 	bl	80099ec <__assert_func>
 80090ce:	2301      	movs	r3, #1
 80090d0:	6144      	str	r4, [r0, #20]
 80090d2:	6103      	str	r3, [r0, #16]
 80090d4:	bd10      	pop	{r4, pc}
 80090d6:	bf00      	nop
 80090d8:	0800a3d3 	.word	0x0800a3d3
 80090dc:	0800a3e4 	.word	0x0800a3e4

080090e0 <__multiply>:
 80090e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090e4:	4614      	mov	r4, r2
 80090e6:	690a      	ldr	r2, [r1, #16]
 80090e8:	6923      	ldr	r3, [r4, #16]
 80090ea:	460f      	mov	r7, r1
 80090ec:	429a      	cmp	r2, r3
 80090ee:	bfa2      	ittt	ge
 80090f0:	4623      	movge	r3, r4
 80090f2:	460c      	movge	r4, r1
 80090f4:	461f      	movge	r7, r3
 80090f6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80090fa:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80090fe:	68a3      	ldr	r3, [r4, #8]
 8009100:	6861      	ldr	r1, [r4, #4]
 8009102:	eb0a 0609 	add.w	r6, sl, r9
 8009106:	42b3      	cmp	r3, r6
 8009108:	b085      	sub	sp, #20
 800910a:	bfb8      	it	lt
 800910c:	3101      	addlt	r1, #1
 800910e:	f7ff fedd 	bl	8008ecc <_Balloc>
 8009112:	b930      	cbnz	r0, 8009122 <__multiply+0x42>
 8009114:	4602      	mov	r2, r0
 8009116:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800911a:	4b43      	ldr	r3, [pc, #268]	@ (8009228 <__multiply+0x148>)
 800911c:	4843      	ldr	r0, [pc, #268]	@ (800922c <__multiply+0x14c>)
 800911e:	f000 fc65 	bl	80099ec <__assert_func>
 8009122:	f100 0514 	add.w	r5, r0, #20
 8009126:	462b      	mov	r3, r5
 8009128:	2200      	movs	r2, #0
 800912a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800912e:	4543      	cmp	r3, r8
 8009130:	d321      	bcc.n	8009176 <__multiply+0x96>
 8009132:	f107 0114 	add.w	r1, r7, #20
 8009136:	f104 0214 	add.w	r2, r4, #20
 800913a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800913e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009142:	9302      	str	r3, [sp, #8]
 8009144:	1b13      	subs	r3, r2, r4
 8009146:	3b15      	subs	r3, #21
 8009148:	f023 0303 	bic.w	r3, r3, #3
 800914c:	3304      	adds	r3, #4
 800914e:	f104 0715 	add.w	r7, r4, #21
 8009152:	42ba      	cmp	r2, r7
 8009154:	bf38      	it	cc
 8009156:	2304      	movcc	r3, #4
 8009158:	9301      	str	r3, [sp, #4]
 800915a:	9b02      	ldr	r3, [sp, #8]
 800915c:	9103      	str	r1, [sp, #12]
 800915e:	428b      	cmp	r3, r1
 8009160:	d80c      	bhi.n	800917c <__multiply+0x9c>
 8009162:	2e00      	cmp	r6, #0
 8009164:	dd03      	ble.n	800916e <__multiply+0x8e>
 8009166:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800916a:	2b00      	cmp	r3, #0
 800916c:	d05a      	beq.n	8009224 <__multiply+0x144>
 800916e:	6106      	str	r6, [r0, #16]
 8009170:	b005      	add	sp, #20
 8009172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009176:	f843 2b04 	str.w	r2, [r3], #4
 800917a:	e7d8      	b.n	800912e <__multiply+0x4e>
 800917c:	f8b1 a000 	ldrh.w	sl, [r1]
 8009180:	f1ba 0f00 	cmp.w	sl, #0
 8009184:	d023      	beq.n	80091ce <__multiply+0xee>
 8009186:	46a9      	mov	r9, r5
 8009188:	f04f 0c00 	mov.w	ip, #0
 800918c:	f104 0e14 	add.w	lr, r4, #20
 8009190:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009194:	f8d9 3000 	ldr.w	r3, [r9]
 8009198:	fa1f fb87 	uxth.w	fp, r7
 800919c:	b29b      	uxth	r3, r3
 800919e:	fb0a 330b 	mla	r3, sl, fp, r3
 80091a2:	4463      	add	r3, ip
 80091a4:	f8d9 c000 	ldr.w	ip, [r9]
 80091a8:	0c3f      	lsrs	r7, r7, #16
 80091aa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80091ae:	fb0a c707 	mla	r7, sl, r7, ip
 80091b2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80091b6:	b29b      	uxth	r3, r3
 80091b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80091bc:	4572      	cmp	r2, lr
 80091be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80091c2:	f849 3b04 	str.w	r3, [r9], #4
 80091c6:	d8e3      	bhi.n	8009190 <__multiply+0xb0>
 80091c8:	9b01      	ldr	r3, [sp, #4]
 80091ca:	f845 c003 	str.w	ip, [r5, r3]
 80091ce:	9b03      	ldr	r3, [sp, #12]
 80091d0:	3104      	adds	r1, #4
 80091d2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80091d6:	f1b9 0f00 	cmp.w	r9, #0
 80091da:	d021      	beq.n	8009220 <__multiply+0x140>
 80091dc:	46ae      	mov	lr, r5
 80091de:	f04f 0a00 	mov.w	sl, #0
 80091e2:	682b      	ldr	r3, [r5, #0]
 80091e4:	f104 0c14 	add.w	ip, r4, #20
 80091e8:	f8bc b000 	ldrh.w	fp, [ip]
 80091ec:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80091f0:	b29b      	uxth	r3, r3
 80091f2:	fb09 770b 	mla	r7, r9, fp, r7
 80091f6:	4457      	add	r7, sl
 80091f8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80091fc:	f84e 3b04 	str.w	r3, [lr], #4
 8009200:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009204:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009208:	f8be 3000 	ldrh.w	r3, [lr]
 800920c:	4562      	cmp	r2, ip
 800920e:	fb09 330a 	mla	r3, r9, sl, r3
 8009212:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009216:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800921a:	d8e5      	bhi.n	80091e8 <__multiply+0x108>
 800921c:	9f01      	ldr	r7, [sp, #4]
 800921e:	51eb      	str	r3, [r5, r7]
 8009220:	3504      	adds	r5, #4
 8009222:	e79a      	b.n	800915a <__multiply+0x7a>
 8009224:	3e01      	subs	r6, #1
 8009226:	e79c      	b.n	8009162 <__multiply+0x82>
 8009228:	0800a3d3 	.word	0x0800a3d3
 800922c:	0800a3e4 	.word	0x0800a3e4

08009230 <__pow5mult>:
 8009230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009234:	4615      	mov	r5, r2
 8009236:	f012 0203 	ands.w	r2, r2, #3
 800923a:	4607      	mov	r7, r0
 800923c:	460e      	mov	r6, r1
 800923e:	d007      	beq.n	8009250 <__pow5mult+0x20>
 8009240:	4c25      	ldr	r4, [pc, #148]	@ (80092d8 <__pow5mult+0xa8>)
 8009242:	3a01      	subs	r2, #1
 8009244:	2300      	movs	r3, #0
 8009246:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800924a:	f7ff fea1 	bl	8008f90 <__multadd>
 800924e:	4606      	mov	r6, r0
 8009250:	10ad      	asrs	r5, r5, #2
 8009252:	d03d      	beq.n	80092d0 <__pow5mult+0xa0>
 8009254:	69fc      	ldr	r4, [r7, #28]
 8009256:	b97c      	cbnz	r4, 8009278 <__pow5mult+0x48>
 8009258:	2010      	movs	r0, #16
 800925a:	f7ff fd81 	bl	8008d60 <malloc>
 800925e:	4602      	mov	r2, r0
 8009260:	61f8      	str	r0, [r7, #28]
 8009262:	b928      	cbnz	r0, 8009270 <__pow5mult+0x40>
 8009264:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009268:	4b1c      	ldr	r3, [pc, #112]	@ (80092dc <__pow5mult+0xac>)
 800926a:	481d      	ldr	r0, [pc, #116]	@ (80092e0 <__pow5mult+0xb0>)
 800926c:	f000 fbbe 	bl	80099ec <__assert_func>
 8009270:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009274:	6004      	str	r4, [r0, #0]
 8009276:	60c4      	str	r4, [r0, #12]
 8009278:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800927c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009280:	b94c      	cbnz	r4, 8009296 <__pow5mult+0x66>
 8009282:	f240 2171 	movw	r1, #625	@ 0x271
 8009286:	4638      	mov	r0, r7
 8009288:	f7ff ff14 	bl	80090b4 <__i2b>
 800928c:	2300      	movs	r3, #0
 800928e:	4604      	mov	r4, r0
 8009290:	f8c8 0008 	str.w	r0, [r8, #8]
 8009294:	6003      	str	r3, [r0, #0]
 8009296:	f04f 0900 	mov.w	r9, #0
 800929a:	07eb      	lsls	r3, r5, #31
 800929c:	d50a      	bpl.n	80092b4 <__pow5mult+0x84>
 800929e:	4631      	mov	r1, r6
 80092a0:	4622      	mov	r2, r4
 80092a2:	4638      	mov	r0, r7
 80092a4:	f7ff ff1c 	bl	80090e0 <__multiply>
 80092a8:	4680      	mov	r8, r0
 80092aa:	4631      	mov	r1, r6
 80092ac:	4638      	mov	r0, r7
 80092ae:	f7ff fe4d 	bl	8008f4c <_Bfree>
 80092b2:	4646      	mov	r6, r8
 80092b4:	106d      	asrs	r5, r5, #1
 80092b6:	d00b      	beq.n	80092d0 <__pow5mult+0xa0>
 80092b8:	6820      	ldr	r0, [r4, #0]
 80092ba:	b938      	cbnz	r0, 80092cc <__pow5mult+0x9c>
 80092bc:	4622      	mov	r2, r4
 80092be:	4621      	mov	r1, r4
 80092c0:	4638      	mov	r0, r7
 80092c2:	f7ff ff0d 	bl	80090e0 <__multiply>
 80092c6:	6020      	str	r0, [r4, #0]
 80092c8:	f8c0 9000 	str.w	r9, [r0]
 80092cc:	4604      	mov	r4, r0
 80092ce:	e7e4      	b.n	800929a <__pow5mult+0x6a>
 80092d0:	4630      	mov	r0, r6
 80092d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092d6:	bf00      	nop
 80092d8:	0800a440 	.word	0x0800a440
 80092dc:	0800a364 	.word	0x0800a364
 80092e0:	0800a3e4 	.word	0x0800a3e4

080092e4 <__lshift>:
 80092e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092e8:	460c      	mov	r4, r1
 80092ea:	4607      	mov	r7, r0
 80092ec:	4691      	mov	r9, r2
 80092ee:	6923      	ldr	r3, [r4, #16]
 80092f0:	6849      	ldr	r1, [r1, #4]
 80092f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80092f6:	68a3      	ldr	r3, [r4, #8]
 80092f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80092fc:	f108 0601 	add.w	r6, r8, #1
 8009300:	42b3      	cmp	r3, r6
 8009302:	db0b      	blt.n	800931c <__lshift+0x38>
 8009304:	4638      	mov	r0, r7
 8009306:	f7ff fde1 	bl	8008ecc <_Balloc>
 800930a:	4605      	mov	r5, r0
 800930c:	b948      	cbnz	r0, 8009322 <__lshift+0x3e>
 800930e:	4602      	mov	r2, r0
 8009310:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009314:	4b27      	ldr	r3, [pc, #156]	@ (80093b4 <__lshift+0xd0>)
 8009316:	4828      	ldr	r0, [pc, #160]	@ (80093b8 <__lshift+0xd4>)
 8009318:	f000 fb68 	bl	80099ec <__assert_func>
 800931c:	3101      	adds	r1, #1
 800931e:	005b      	lsls	r3, r3, #1
 8009320:	e7ee      	b.n	8009300 <__lshift+0x1c>
 8009322:	2300      	movs	r3, #0
 8009324:	f100 0114 	add.w	r1, r0, #20
 8009328:	f100 0210 	add.w	r2, r0, #16
 800932c:	4618      	mov	r0, r3
 800932e:	4553      	cmp	r3, sl
 8009330:	db33      	blt.n	800939a <__lshift+0xb6>
 8009332:	6920      	ldr	r0, [r4, #16]
 8009334:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009338:	f104 0314 	add.w	r3, r4, #20
 800933c:	f019 091f 	ands.w	r9, r9, #31
 8009340:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009344:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009348:	d02b      	beq.n	80093a2 <__lshift+0xbe>
 800934a:	468a      	mov	sl, r1
 800934c:	2200      	movs	r2, #0
 800934e:	f1c9 0e20 	rsb	lr, r9, #32
 8009352:	6818      	ldr	r0, [r3, #0]
 8009354:	fa00 f009 	lsl.w	r0, r0, r9
 8009358:	4310      	orrs	r0, r2
 800935a:	f84a 0b04 	str.w	r0, [sl], #4
 800935e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009362:	459c      	cmp	ip, r3
 8009364:	fa22 f20e 	lsr.w	r2, r2, lr
 8009368:	d8f3      	bhi.n	8009352 <__lshift+0x6e>
 800936a:	ebac 0304 	sub.w	r3, ip, r4
 800936e:	3b15      	subs	r3, #21
 8009370:	f023 0303 	bic.w	r3, r3, #3
 8009374:	3304      	adds	r3, #4
 8009376:	f104 0015 	add.w	r0, r4, #21
 800937a:	4584      	cmp	ip, r0
 800937c:	bf38      	it	cc
 800937e:	2304      	movcc	r3, #4
 8009380:	50ca      	str	r2, [r1, r3]
 8009382:	b10a      	cbz	r2, 8009388 <__lshift+0xa4>
 8009384:	f108 0602 	add.w	r6, r8, #2
 8009388:	3e01      	subs	r6, #1
 800938a:	4638      	mov	r0, r7
 800938c:	4621      	mov	r1, r4
 800938e:	612e      	str	r6, [r5, #16]
 8009390:	f7ff fddc 	bl	8008f4c <_Bfree>
 8009394:	4628      	mov	r0, r5
 8009396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800939a:	f842 0f04 	str.w	r0, [r2, #4]!
 800939e:	3301      	adds	r3, #1
 80093a0:	e7c5      	b.n	800932e <__lshift+0x4a>
 80093a2:	3904      	subs	r1, #4
 80093a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80093a8:	459c      	cmp	ip, r3
 80093aa:	f841 2f04 	str.w	r2, [r1, #4]!
 80093ae:	d8f9      	bhi.n	80093a4 <__lshift+0xc0>
 80093b0:	e7ea      	b.n	8009388 <__lshift+0xa4>
 80093b2:	bf00      	nop
 80093b4:	0800a3d3 	.word	0x0800a3d3
 80093b8:	0800a3e4 	.word	0x0800a3e4

080093bc <__mcmp>:
 80093bc:	4603      	mov	r3, r0
 80093be:	690a      	ldr	r2, [r1, #16]
 80093c0:	6900      	ldr	r0, [r0, #16]
 80093c2:	b530      	push	{r4, r5, lr}
 80093c4:	1a80      	subs	r0, r0, r2
 80093c6:	d10e      	bne.n	80093e6 <__mcmp+0x2a>
 80093c8:	3314      	adds	r3, #20
 80093ca:	3114      	adds	r1, #20
 80093cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80093d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80093d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80093d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80093dc:	4295      	cmp	r5, r2
 80093de:	d003      	beq.n	80093e8 <__mcmp+0x2c>
 80093e0:	d205      	bcs.n	80093ee <__mcmp+0x32>
 80093e2:	f04f 30ff 	mov.w	r0, #4294967295
 80093e6:	bd30      	pop	{r4, r5, pc}
 80093e8:	42a3      	cmp	r3, r4
 80093ea:	d3f3      	bcc.n	80093d4 <__mcmp+0x18>
 80093ec:	e7fb      	b.n	80093e6 <__mcmp+0x2a>
 80093ee:	2001      	movs	r0, #1
 80093f0:	e7f9      	b.n	80093e6 <__mcmp+0x2a>
	...

080093f4 <__mdiff>:
 80093f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093f8:	4689      	mov	r9, r1
 80093fa:	4606      	mov	r6, r0
 80093fc:	4611      	mov	r1, r2
 80093fe:	4648      	mov	r0, r9
 8009400:	4614      	mov	r4, r2
 8009402:	f7ff ffdb 	bl	80093bc <__mcmp>
 8009406:	1e05      	subs	r5, r0, #0
 8009408:	d112      	bne.n	8009430 <__mdiff+0x3c>
 800940a:	4629      	mov	r1, r5
 800940c:	4630      	mov	r0, r6
 800940e:	f7ff fd5d 	bl	8008ecc <_Balloc>
 8009412:	4602      	mov	r2, r0
 8009414:	b928      	cbnz	r0, 8009422 <__mdiff+0x2e>
 8009416:	f240 2137 	movw	r1, #567	@ 0x237
 800941a:	4b3e      	ldr	r3, [pc, #248]	@ (8009514 <__mdiff+0x120>)
 800941c:	483e      	ldr	r0, [pc, #248]	@ (8009518 <__mdiff+0x124>)
 800941e:	f000 fae5 	bl	80099ec <__assert_func>
 8009422:	2301      	movs	r3, #1
 8009424:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009428:	4610      	mov	r0, r2
 800942a:	b003      	add	sp, #12
 800942c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009430:	bfbc      	itt	lt
 8009432:	464b      	movlt	r3, r9
 8009434:	46a1      	movlt	r9, r4
 8009436:	4630      	mov	r0, r6
 8009438:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800943c:	bfba      	itte	lt
 800943e:	461c      	movlt	r4, r3
 8009440:	2501      	movlt	r5, #1
 8009442:	2500      	movge	r5, #0
 8009444:	f7ff fd42 	bl	8008ecc <_Balloc>
 8009448:	4602      	mov	r2, r0
 800944a:	b918      	cbnz	r0, 8009454 <__mdiff+0x60>
 800944c:	f240 2145 	movw	r1, #581	@ 0x245
 8009450:	4b30      	ldr	r3, [pc, #192]	@ (8009514 <__mdiff+0x120>)
 8009452:	e7e3      	b.n	800941c <__mdiff+0x28>
 8009454:	f100 0b14 	add.w	fp, r0, #20
 8009458:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800945c:	f109 0310 	add.w	r3, r9, #16
 8009460:	60c5      	str	r5, [r0, #12]
 8009462:	f04f 0c00 	mov.w	ip, #0
 8009466:	f109 0514 	add.w	r5, r9, #20
 800946a:	46d9      	mov	r9, fp
 800946c:	6926      	ldr	r6, [r4, #16]
 800946e:	f104 0e14 	add.w	lr, r4, #20
 8009472:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009476:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800947a:	9301      	str	r3, [sp, #4]
 800947c:	9b01      	ldr	r3, [sp, #4]
 800947e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009482:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009486:	b281      	uxth	r1, r0
 8009488:	9301      	str	r3, [sp, #4]
 800948a:	fa1f f38a 	uxth.w	r3, sl
 800948e:	1a5b      	subs	r3, r3, r1
 8009490:	0c00      	lsrs	r0, r0, #16
 8009492:	4463      	add	r3, ip
 8009494:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009498:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800949c:	b29b      	uxth	r3, r3
 800949e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80094a2:	4576      	cmp	r6, lr
 80094a4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80094a8:	f849 3b04 	str.w	r3, [r9], #4
 80094ac:	d8e6      	bhi.n	800947c <__mdiff+0x88>
 80094ae:	1b33      	subs	r3, r6, r4
 80094b0:	3b15      	subs	r3, #21
 80094b2:	f023 0303 	bic.w	r3, r3, #3
 80094b6:	3415      	adds	r4, #21
 80094b8:	3304      	adds	r3, #4
 80094ba:	42a6      	cmp	r6, r4
 80094bc:	bf38      	it	cc
 80094be:	2304      	movcc	r3, #4
 80094c0:	441d      	add	r5, r3
 80094c2:	445b      	add	r3, fp
 80094c4:	461e      	mov	r6, r3
 80094c6:	462c      	mov	r4, r5
 80094c8:	4544      	cmp	r4, r8
 80094ca:	d30e      	bcc.n	80094ea <__mdiff+0xf6>
 80094cc:	f108 0103 	add.w	r1, r8, #3
 80094d0:	1b49      	subs	r1, r1, r5
 80094d2:	f021 0103 	bic.w	r1, r1, #3
 80094d6:	3d03      	subs	r5, #3
 80094d8:	45a8      	cmp	r8, r5
 80094da:	bf38      	it	cc
 80094dc:	2100      	movcc	r1, #0
 80094de:	440b      	add	r3, r1
 80094e0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80094e4:	b199      	cbz	r1, 800950e <__mdiff+0x11a>
 80094e6:	6117      	str	r7, [r2, #16]
 80094e8:	e79e      	b.n	8009428 <__mdiff+0x34>
 80094ea:	46e6      	mov	lr, ip
 80094ec:	f854 1b04 	ldr.w	r1, [r4], #4
 80094f0:	fa1f fc81 	uxth.w	ip, r1
 80094f4:	44f4      	add	ip, lr
 80094f6:	0c08      	lsrs	r0, r1, #16
 80094f8:	4471      	add	r1, lr
 80094fa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80094fe:	b289      	uxth	r1, r1
 8009500:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009504:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009508:	f846 1b04 	str.w	r1, [r6], #4
 800950c:	e7dc      	b.n	80094c8 <__mdiff+0xd4>
 800950e:	3f01      	subs	r7, #1
 8009510:	e7e6      	b.n	80094e0 <__mdiff+0xec>
 8009512:	bf00      	nop
 8009514:	0800a3d3 	.word	0x0800a3d3
 8009518:	0800a3e4 	.word	0x0800a3e4

0800951c <__d2b>:
 800951c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009520:	2101      	movs	r1, #1
 8009522:	4690      	mov	r8, r2
 8009524:	4699      	mov	r9, r3
 8009526:	9e08      	ldr	r6, [sp, #32]
 8009528:	f7ff fcd0 	bl	8008ecc <_Balloc>
 800952c:	4604      	mov	r4, r0
 800952e:	b930      	cbnz	r0, 800953e <__d2b+0x22>
 8009530:	4602      	mov	r2, r0
 8009532:	f240 310f 	movw	r1, #783	@ 0x30f
 8009536:	4b23      	ldr	r3, [pc, #140]	@ (80095c4 <__d2b+0xa8>)
 8009538:	4823      	ldr	r0, [pc, #140]	@ (80095c8 <__d2b+0xac>)
 800953a:	f000 fa57 	bl	80099ec <__assert_func>
 800953e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009542:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009546:	b10d      	cbz	r5, 800954c <__d2b+0x30>
 8009548:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800954c:	9301      	str	r3, [sp, #4]
 800954e:	f1b8 0300 	subs.w	r3, r8, #0
 8009552:	d024      	beq.n	800959e <__d2b+0x82>
 8009554:	4668      	mov	r0, sp
 8009556:	9300      	str	r3, [sp, #0]
 8009558:	f7ff fd7f 	bl	800905a <__lo0bits>
 800955c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009560:	b1d8      	cbz	r0, 800959a <__d2b+0x7e>
 8009562:	f1c0 0320 	rsb	r3, r0, #32
 8009566:	fa02 f303 	lsl.w	r3, r2, r3
 800956a:	430b      	orrs	r3, r1
 800956c:	40c2      	lsrs	r2, r0
 800956e:	6163      	str	r3, [r4, #20]
 8009570:	9201      	str	r2, [sp, #4]
 8009572:	9b01      	ldr	r3, [sp, #4]
 8009574:	2b00      	cmp	r3, #0
 8009576:	bf0c      	ite	eq
 8009578:	2201      	moveq	r2, #1
 800957a:	2202      	movne	r2, #2
 800957c:	61a3      	str	r3, [r4, #24]
 800957e:	6122      	str	r2, [r4, #16]
 8009580:	b1ad      	cbz	r5, 80095ae <__d2b+0x92>
 8009582:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009586:	4405      	add	r5, r0
 8009588:	6035      	str	r5, [r6, #0]
 800958a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800958e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009590:	6018      	str	r0, [r3, #0]
 8009592:	4620      	mov	r0, r4
 8009594:	b002      	add	sp, #8
 8009596:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800959a:	6161      	str	r1, [r4, #20]
 800959c:	e7e9      	b.n	8009572 <__d2b+0x56>
 800959e:	a801      	add	r0, sp, #4
 80095a0:	f7ff fd5b 	bl	800905a <__lo0bits>
 80095a4:	9b01      	ldr	r3, [sp, #4]
 80095a6:	2201      	movs	r2, #1
 80095a8:	6163      	str	r3, [r4, #20]
 80095aa:	3020      	adds	r0, #32
 80095ac:	e7e7      	b.n	800957e <__d2b+0x62>
 80095ae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80095b2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80095b6:	6030      	str	r0, [r6, #0]
 80095b8:	6918      	ldr	r0, [r3, #16]
 80095ba:	f7ff fd2f 	bl	800901c <__hi0bits>
 80095be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80095c2:	e7e4      	b.n	800958e <__d2b+0x72>
 80095c4:	0800a3d3 	.word	0x0800a3d3
 80095c8:	0800a3e4 	.word	0x0800a3e4

080095cc <__ssputs_r>:
 80095cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095d0:	461f      	mov	r7, r3
 80095d2:	688e      	ldr	r6, [r1, #8]
 80095d4:	4682      	mov	sl, r0
 80095d6:	42be      	cmp	r6, r7
 80095d8:	460c      	mov	r4, r1
 80095da:	4690      	mov	r8, r2
 80095dc:	680b      	ldr	r3, [r1, #0]
 80095de:	d82d      	bhi.n	800963c <__ssputs_r+0x70>
 80095e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80095e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80095e8:	d026      	beq.n	8009638 <__ssputs_r+0x6c>
 80095ea:	6965      	ldr	r5, [r4, #20]
 80095ec:	6909      	ldr	r1, [r1, #16]
 80095ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80095f2:	eba3 0901 	sub.w	r9, r3, r1
 80095f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80095fa:	1c7b      	adds	r3, r7, #1
 80095fc:	444b      	add	r3, r9
 80095fe:	106d      	asrs	r5, r5, #1
 8009600:	429d      	cmp	r5, r3
 8009602:	bf38      	it	cc
 8009604:	461d      	movcc	r5, r3
 8009606:	0553      	lsls	r3, r2, #21
 8009608:	d527      	bpl.n	800965a <__ssputs_r+0x8e>
 800960a:	4629      	mov	r1, r5
 800960c:	f7ff fbd2 	bl	8008db4 <_malloc_r>
 8009610:	4606      	mov	r6, r0
 8009612:	b360      	cbz	r0, 800966e <__ssputs_r+0xa2>
 8009614:	464a      	mov	r2, r9
 8009616:	6921      	ldr	r1, [r4, #16]
 8009618:	f7fe fcfb 	bl	8008012 <memcpy>
 800961c:	89a3      	ldrh	r3, [r4, #12]
 800961e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009622:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009626:	81a3      	strh	r3, [r4, #12]
 8009628:	6126      	str	r6, [r4, #16]
 800962a:	444e      	add	r6, r9
 800962c:	6026      	str	r6, [r4, #0]
 800962e:	463e      	mov	r6, r7
 8009630:	6165      	str	r5, [r4, #20]
 8009632:	eba5 0509 	sub.w	r5, r5, r9
 8009636:	60a5      	str	r5, [r4, #8]
 8009638:	42be      	cmp	r6, r7
 800963a:	d900      	bls.n	800963e <__ssputs_r+0x72>
 800963c:	463e      	mov	r6, r7
 800963e:	4632      	mov	r2, r6
 8009640:	4641      	mov	r1, r8
 8009642:	6820      	ldr	r0, [r4, #0]
 8009644:	f7fe fbd5 	bl	8007df2 <memmove>
 8009648:	2000      	movs	r0, #0
 800964a:	68a3      	ldr	r3, [r4, #8]
 800964c:	1b9b      	subs	r3, r3, r6
 800964e:	60a3      	str	r3, [r4, #8]
 8009650:	6823      	ldr	r3, [r4, #0]
 8009652:	4433      	add	r3, r6
 8009654:	6023      	str	r3, [r4, #0]
 8009656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800965a:	462a      	mov	r2, r5
 800965c:	f000 fa0a 	bl	8009a74 <_realloc_r>
 8009660:	4606      	mov	r6, r0
 8009662:	2800      	cmp	r0, #0
 8009664:	d1e0      	bne.n	8009628 <__ssputs_r+0x5c>
 8009666:	4650      	mov	r0, sl
 8009668:	6921      	ldr	r1, [r4, #16]
 800966a:	f7ff fb31 	bl	8008cd0 <_free_r>
 800966e:	230c      	movs	r3, #12
 8009670:	f8ca 3000 	str.w	r3, [sl]
 8009674:	89a3      	ldrh	r3, [r4, #12]
 8009676:	f04f 30ff 	mov.w	r0, #4294967295
 800967a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800967e:	81a3      	strh	r3, [r4, #12]
 8009680:	e7e9      	b.n	8009656 <__ssputs_r+0x8a>
	...

08009684 <_svfiprintf_r>:
 8009684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009688:	4698      	mov	r8, r3
 800968a:	898b      	ldrh	r3, [r1, #12]
 800968c:	4607      	mov	r7, r0
 800968e:	061b      	lsls	r3, r3, #24
 8009690:	460d      	mov	r5, r1
 8009692:	4614      	mov	r4, r2
 8009694:	b09d      	sub	sp, #116	@ 0x74
 8009696:	d510      	bpl.n	80096ba <_svfiprintf_r+0x36>
 8009698:	690b      	ldr	r3, [r1, #16]
 800969a:	b973      	cbnz	r3, 80096ba <_svfiprintf_r+0x36>
 800969c:	2140      	movs	r1, #64	@ 0x40
 800969e:	f7ff fb89 	bl	8008db4 <_malloc_r>
 80096a2:	6028      	str	r0, [r5, #0]
 80096a4:	6128      	str	r0, [r5, #16]
 80096a6:	b930      	cbnz	r0, 80096b6 <_svfiprintf_r+0x32>
 80096a8:	230c      	movs	r3, #12
 80096aa:	603b      	str	r3, [r7, #0]
 80096ac:	f04f 30ff 	mov.w	r0, #4294967295
 80096b0:	b01d      	add	sp, #116	@ 0x74
 80096b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096b6:	2340      	movs	r3, #64	@ 0x40
 80096b8:	616b      	str	r3, [r5, #20]
 80096ba:	2300      	movs	r3, #0
 80096bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80096be:	2320      	movs	r3, #32
 80096c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80096c4:	2330      	movs	r3, #48	@ 0x30
 80096c6:	f04f 0901 	mov.w	r9, #1
 80096ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80096ce:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009868 <_svfiprintf_r+0x1e4>
 80096d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80096d6:	4623      	mov	r3, r4
 80096d8:	469a      	mov	sl, r3
 80096da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096de:	b10a      	cbz	r2, 80096e4 <_svfiprintf_r+0x60>
 80096e0:	2a25      	cmp	r2, #37	@ 0x25
 80096e2:	d1f9      	bne.n	80096d8 <_svfiprintf_r+0x54>
 80096e4:	ebba 0b04 	subs.w	fp, sl, r4
 80096e8:	d00b      	beq.n	8009702 <_svfiprintf_r+0x7e>
 80096ea:	465b      	mov	r3, fp
 80096ec:	4622      	mov	r2, r4
 80096ee:	4629      	mov	r1, r5
 80096f0:	4638      	mov	r0, r7
 80096f2:	f7ff ff6b 	bl	80095cc <__ssputs_r>
 80096f6:	3001      	adds	r0, #1
 80096f8:	f000 80a7 	beq.w	800984a <_svfiprintf_r+0x1c6>
 80096fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096fe:	445a      	add	r2, fp
 8009700:	9209      	str	r2, [sp, #36]	@ 0x24
 8009702:	f89a 3000 	ldrb.w	r3, [sl]
 8009706:	2b00      	cmp	r3, #0
 8009708:	f000 809f 	beq.w	800984a <_svfiprintf_r+0x1c6>
 800970c:	2300      	movs	r3, #0
 800970e:	f04f 32ff 	mov.w	r2, #4294967295
 8009712:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009716:	f10a 0a01 	add.w	sl, sl, #1
 800971a:	9304      	str	r3, [sp, #16]
 800971c:	9307      	str	r3, [sp, #28]
 800971e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009722:	931a      	str	r3, [sp, #104]	@ 0x68
 8009724:	4654      	mov	r4, sl
 8009726:	2205      	movs	r2, #5
 8009728:	f814 1b01 	ldrb.w	r1, [r4], #1
 800972c:	484e      	ldr	r0, [pc, #312]	@ (8009868 <_svfiprintf_r+0x1e4>)
 800972e:	f7fe fc62 	bl	8007ff6 <memchr>
 8009732:	9a04      	ldr	r2, [sp, #16]
 8009734:	b9d8      	cbnz	r0, 800976e <_svfiprintf_r+0xea>
 8009736:	06d0      	lsls	r0, r2, #27
 8009738:	bf44      	itt	mi
 800973a:	2320      	movmi	r3, #32
 800973c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009740:	0711      	lsls	r1, r2, #28
 8009742:	bf44      	itt	mi
 8009744:	232b      	movmi	r3, #43	@ 0x2b
 8009746:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800974a:	f89a 3000 	ldrb.w	r3, [sl]
 800974e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009750:	d015      	beq.n	800977e <_svfiprintf_r+0xfa>
 8009752:	4654      	mov	r4, sl
 8009754:	2000      	movs	r0, #0
 8009756:	f04f 0c0a 	mov.w	ip, #10
 800975a:	9a07      	ldr	r2, [sp, #28]
 800975c:	4621      	mov	r1, r4
 800975e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009762:	3b30      	subs	r3, #48	@ 0x30
 8009764:	2b09      	cmp	r3, #9
 8009766:	d94b      	bls.n	8009800 <_svfiprintf_r+0x17c>
 8009768:	b1b0      	cbz	r0, 8009798 <_svfiprintf_r+0x114>
 800976a:	9207      	str	r2, [sp, #28]
 800976c:	e014      	b.n	8009798 <_svfiprintf_r+0x114>
 800976e:	eba0 0308 	sub.w	r3, r0, r8
 8009772:	fa09 f303 	lsl.w	r3, r9, r3
 8009776:	4313      	orrs	r3, r2
 8009778:	46a2      	mov	sl, r4
 800977a:	9304      	str	r3, [sp, #16]
 800977c:	e7d2      	b.n	8009724 <_svfiprintf_r+0xa0>
 800977e:	9b03      	ldr	r3, [sp, #12]
 8009780:	1d19      	adds	r1, r3, #4
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	9103      	str	r1, [sp, #12]
 8009786:	2b00      	cmp	r3, #0
 8009788:	bfbb      	ittet	lt
 800978a:	425b      	neglt	r3, r3
 800978c:	f042 0202 	orrlt.w	r2, r2, #2
 8009790:	9307      	strge	r3, [sp, #28]
 8009792:	9307      	strlt	r3, [sp, #28]
 8009794:	bfb8      	it	lt
 8009796:	9204      	strlt	r2, [sp, #16]
 8009798:	7823      	ldrb	r3, [r4, #0]
 800979a:	2b2e      	cmp	r3, #46	@ 0x2e
 800979c:	d10a      	bne.n	80097b4 <_svfiprintf_r+0x130>
 800979e:	7863      	ldrb	r3, [r4, #1]
 80097a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80097a2:	d132      	bne.n	800980a <_svfiprintf_r+0x186>
 80097a4:	9b03      	ldr	r3, [sp, #12]
 80097a6:	3402      	adds	r4, #2
 80097a8:	1d1a      	adds	r2, r3, #4
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	9203      	str	r2, [sp, #12]
 80097ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80097b2:	9305      	str	r3, [sp, #20]
 80097b4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800986c <_svfiprintf_r+0x1e8>
 80097b8:	2203      	movs	r2, #3
 80097ba:	4650      	mov	r0, sl
 80097bc:	7821      	ldrb	r1, [r4, #0]
 80097be:	f7fe fc1a 	bl	8007ff6 <memchr>
 80097c2:	b138      	cbz	r0, 80097d4 <_svfiprintf_r+0x150>
 80097c4:	2240      	movs	r2, #64	@ 0x40
 80097c6:	9b04      	ldr	r3, [sp, #16]
 80097c8:	eba0 000a 	sub.w	r0, r0, sl
 80097cc:	4082      	lsls	r2, r0
 80097ce:	4313      	orrs	r3, r2
 80097d0:	3401      	adds	r4, #1
 80097d2:	9304      	str	r3, [sp, #16]
 80097d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097d8:	2206      	movs	r2, #6
 80097da:	4825      	ldr	r0, [pc, #148]	@ (8009870 <_svfiprintf_r+0x1ec>)
 80097dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80097e0:	f7fe fc09 	bl	8007ff6 <memchr>
 80097e4:	2800      	cmp	r0, #0
 80097e6:	d036      	beq.n	8009856 <_svfiprintf_r+0x1d2>
 80097e8:	4b22      	ldr	r3, [pc, #136]	@ (8009874 <_svfiprintf_r+0x1f0>)
 80097ea:	bb1b      	cbnz	r3, 8009834 <_svfiprintf_r+0x1b0>
 80097ec:	9b03      	ldr	r3, [sp, #12]
 80097ee:	3307      	adds	r3, #7
 80097f0:	f023 0307 	bic.w	r3, r3, #7
 80097f4:	3308      	adds	r3, #8
 80097f6:	9303      	str	r3, [sp, #12]
 80097f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097fa:	4433      	add	r3, r6
 80097fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80097fe:	e76a      	b.n	80096d6 <_svfiprintf_r+0x52>
 8009800:	460c      	mov	r4, r1
 8009802:	2001      	movs	r0, #1
 8009804:	fb0c 3202 	mla	r2, ip, r2, r3
 8009808:	e7a8      	b.n	800975c <_svfiprintf_r+0xd8>
 800980a:	2300      	movs	r3, #0
 800980c:	f04f 0c0a 	mov.w	ip, #10
 8009810:	4619      	mov	r1, r3
 8009812:	3401      	adds	r4, #1
 8009814:	9305      	str	r3, [sp, #20]
 8009816:	4620      	mov	r0, r4
 8009818:	f810 2b01 	ldrb.w	r2, [r0], #1
 800981c:	3a30      	subs	r2, #48	@ 0x30
 800981e:	2a09      	cmp	r2, #9
 8009820:	d903      	bls.n	800982a <_svfiprintf_r+0x1a6>
 8009822:	2b00      	cmp	r3, #0
 8009824:	d0c6      	beq.n	80097b4 <_svfiprintf_r+0x130>
 8009826:	9105      	str	r1, [sp, #20]
 8009828:	e7c4      	b.n	80097b4 <_svfiprintf_r+0x130>
 800982a:	4604      	mov	r4, r0
 800982c:	2301      	movs	r3, #1
 800982e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009832:	e7f0      	b.n	8009816 <_svfiprintf_r+0x192>
 8009834:	ab03      	add	r3, sp, #12
 8009836:	9300      	str	r3, [sp, #0]
 8009838:	462a      	mov	r2, r5
 800983a:	4638      	mov	r0, r7
 800983c:	4b0e      	ldr	r3, [pc, #56]	@ (8009878 <_svfiprintf_r+0x1f4>)
 800983e:	a904      	add	r1, sp, #16
 8009840:	f7fd fdf4 	bl	800742c <_printf_float>
 8009844:	1c42      	adds	r2, r0, #1
 8009846:	4606      	mov	r6, r0
 8009848:	d1d6      	bne.n	80097f8 <_svfiprintf_r+0x174>
 800984a:	89ab      	ldrh	r3, [r5, #12]
 800984c:	065b      	lsls	r3, r3, #25
 800984e:	f53f af2d 	bmi.w	80096ac <_svfiprintf_r+0x28>
 8009852:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009854:	e72c      	b.n	80096b0 <_svfiprintf_r+0x2c>
 8009856:	ab03      	add	r3, sp, #12
 8009858:	9300      	str	r3, [sp, #0]
 800985a:	462a      	mov	r2, r5
 800985c:	4638      	mov	r0, r7
 800985e:	4b06      	ldr	r3, [pc, #24]	@ (8009878 <_svfiprintf_r+0x1f4>)
 8009860:	a904      	add	r1, sp, #16
 8009862:	f7fe f881 	bl	8007968 <_printf_i>
 8009866:	e7ed      	b.n	8009844 <_svfiprintf_r+0x1c0>
 8009868:	0800a540 	.word	0x0800a540
 800986c:	0800a546 	.word	0x0800a546
 8009870:	0800a54a 	.word	0x0800a54a
 8009874:	0800742d 	.word	0x0800742d
 8009878:	080095cd 	.word	0x080095cd

0800987c <__sflush_r>:
 800987c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009882:	0716      	lsls	r6, r2, #28
 8009884:	4605      	mov	r5, r0
 8009886:	460c      	mov	r4, r1
 8009888:	d454      	bmi.n	8009934 <__sflush_r+0xb8>
 800988a:	684b      	ldr	r3, [r1, #4]
 800988c:	2b00      	cmp	r3, #0
 800988e:	dc02      	bgt.n	8009896 <__sflush_r+0x1a>
 8009890:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009892:	2b00      	cmp	r3, #0
 8009894:	dd48      	ble.n	8009928 <__sflush_r+0xac>
 8009896:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009898:	2e00      	cmp	r6, #0
 800989a:	d045      	beq.n	8009928 <__sflush_r+0xac>
 800989c:	2300      	movs	r3, #0
 800989e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80098a2:	682f      	ldr	r7, [r5, #0]
 80098a4:	6a21      	ldr	r1, [r4, #32]
 80098a6:	602b      	str	r3, [r5, #0]
 80098a8:	d030      	beq.n	800990c <__sflush_r+0x90>
 80098aa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80098ac:	89a3      	ldrh	r3, [r4, #12]
 80098ae:	0759      	lsls	r1, r3, #29
 80098b0:	d505      	bpl.n	80098be <__sflush_r+0x42>
 80098b2:	6863      	ldr	r3, [r4, #4]
 80098b4:	1ad2      	subs	r2, r2, r3
 80098b6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80098b8:	b10b      	cbz	r3, 80098be <__sflush_r+0x42>
 80098ba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80098bc:	1ad2      	subs	r2, r2, r3
 80098be:	2300      	movs	r3, #0
 80098c0:	4628      	mov	r0, r5
 80098c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80098c4:	6a21      	ldr	r1, [r4, #32]
 80098c6:	47b0      	blx	r6
 80098c8:	1c43      	adds	r3, r0, #1
 80098ca:	89a3      	ldrh	r3, [r4, #12]
 80098cc:	d106      	bne.n	80098dc <__sflush_r+0x60>
 80098ce:	6829      	ldr	r1, [r5, #0]
 80098d0:	291d      	cmp	r1, #29
 80098d2:	d82b      	bhi.n	800992c <__sflush_r+0xb0>
 80098d4:	4a28      	ldr	r2, [pc, #160]	@ (8009978 <__sflush_r+0xfc>)
 80098d6:	410a      	asrs	r2, r1
 80098d8:	07d6      	lsls	r6, r2, #31
 80098da:	d427      	bmi.n	800992c <__sflush_r+0xb0>
 80098dc:	2200      	movs	r2, #0
 80098de:	6062      	str	r2, [r4, #4]
 80098e0:	6922      	ldr	r2, [r4, #16]
 80098e2:	04d9      	lsls	r1, r3, #19
 80098e4:	6022      	str	r2, [r4, #0]
 80098e6:	d504      	bpl.n	80098f2 <__sflush_r+0x76>
 80098e8:	1c42      	adds	r2, r0, #1
 80098ea:	d101      	bne.n	80098f0 <__sflush_r+0x74>
 80098ec:	682b      	ldr	r3, [r5, #0]
 80098ee:	b903      	cbnz	r3, 80098f2 <__sflush_r+0x76>
 80098f0:	6560      	str	r0, [r4, #84]	@ 0x54
 80098f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80098f4:	602f      	str	r7, [r5, #0]
 80098f6:	b1b9      	cbz	r1, 8009928 <__sflush_r+0xac>
 80098f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80098fc:	4299      	cmp	r1, r3
 80098fe:	d002      	beq.n	8009906 <__sflush_r+0x8a>
 8009900:	4628      	mov	r0, r5
 8009902:	f7ff f9e5 	bl	8008cd0 <_free_r>
 8009906:	2300      	movs	r3, #0
 8009908:	6363      	str	r3, [r4, #52]	@ 0x34
 800990a:	e00d      	b.n	8009928 <__sflush_r+0xac>
 800990c:	2301      	movs	r3, #1
 800990e:	4628      	mov	r0, r5
 8009910:	47b0      	blx	r6
 8009912:	4602      	mov	r2, r0
 8009914:	1c50      	adds	r0, r2, #1
 8009916:	d1c9      	bne.n	80098ac <__sflush_r+0x30>
 8009918:	682b      	ldr	r3, [r5, #0]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d0c6      	beq.n	80098ac <__sflush_r+0x30>
 800991e:	2b1d      	cmp	r3, #29
 8009920:	d001      	beq.n	8009926 <__sflush_r+0xaa>
 8009922:	2b16      	cmp	r3, #22
 8009924:	d11d      	bne.n	8009962 <__sflush_r+0xe6>
 8009926:	602f      	str	r7, [r5, #0]
 8009928:	2000      	movs	r0, #0
 800992a:	e021      	b.n	8009970 <__sflush_r+0xf4>
 800992c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009930:	b21b      	sxth	r3, r3
 8009932:	e01a      	b.n	800996a <__sflush_r+0xee>
 8009934:	690f      	ldr	r7, [r1, #16]
 8009936:	2f00      	cmp	r7, #0
 8009938:	d0f6      	beq.n	8009928 <__sflush_r+0xac>
 800993a:	0793      	lsls	r3, r2, #30
 800993c:	bf18      	it	ne
 800993e:	2300      	movne	r3, #0
 8009940:	680e      	ldr	r6, [r1, #0]
 8009942:	bf08      	it	eq
 8009944:	694b      	ldreq	r3, [r1, #20]
 8009946:	1bf6      	subs	r6, r6, r7
 8009948:	600f      	str	r7, [r1, #0]
 800994a:	608b      	str	r3, [r1, #8]
 800994c:	2e00      	cmp	r6, #0
 800994e:	ddeb      	ble.n	8009928 <__sflush_r+0xac>
 8009950:	4633      	mov	r3, r6
 8009952:	463a      	mov	r2, r7
 8009954:	4628      	mov	r0, r5
 8009956:	6a21      	ldr	r1, [r4, #32]
 8009958:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800995c:	47e0      	blx	ip
 800995e:	2800      	cmp	r0, #0
 8009960:	dc07      	bgt.n	8009972 <__sflush_r+0xf6>
 8009962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009966:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800996a:	f04f 30ff 	mov.w	r0, #4294967295
 800996e:	81a3      	strh	r3, [r4, #12]
 8009970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009972:	4407      	add	r7, r0
 8009974:	1a36      	subs	r6, r6, r0
 8009976:	e7e9      	b.n	800994c <__sflush_r+0xd0>
 8009978:	dfbffffe 	.word	0xdfbffffe

0800997c <_fflush_r>:
 800997c:	b538      	push	{r3, r4, r5, lr}
 800997e:	690b      	ldr	r3, [r1, #16]
 8009980:	4605      	mov	r5, r0
 8009982:	460c      	mov	r4, r1
 8009984:	b913      	cbnz	r3, 800998c <_fflush_r+0x10>
 8009986:	2500      	movs	r5, #0
 8009988:	4628      	mov	r0, r5
 800998a:	bd38      	pop	{r3, r4, r5, pc}
 800998c:	b118      	cbz	r0, 8009996 <_fflush_r+0x1a>
 800998e:	6a03      	ldr	r3, [r0, #32]
 8009990:	b90b      	cbnz	r3, 8009996 <_fflush_r+0x1a>
 8009992:	f7fe f995 	bl	8007cc0 <__sinit>
 8009996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d0f3      	beq.n	8009986 <_fflush_r+0xa>
 800999e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80099a0:	07d0      	lsls	r0, r2, #31
 80099a2:	d404      	bmi.n	80099ae <_fflush_r+0x32>
 80099a4:	0599      	lsls	r1, r3, #22
 80099a6:	d402      	bmi.n	80099ae <_fflush_r+0x32>
 80099a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099aa:	f7fe fb22 	bl	8007ff2 <__retarget_lock_acquire_recursive>
 80099ae:	4628      	mov	r0, r5
 80099b0:	4621      	mov	r1, r4
 80099b2:	f7ff ff63 	bl	800987c <__sflush_r>
 80099b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80099b8:	4605      	mov	r5, r0
 80099ba:	07da      	lsls	r2, r3, #31
 80099bc:	d4e4      	bmi.n	8009988 <_fflush_r+0xc>
 80099be:	89a3      	ldrh	r3, [r4, #12]
 80099c0:	059b      	lsls	r3, r3, #22
 80099c2:	d4e1      	bmi.n	8009988 <_fflush_r+0xc>
 80099c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099c6:	f7fe fb15 	bl	8007ff4 <__retarget_lock_release_recursive>
 80099ca:	e7dd      	b.n	8009988 <_fflush_r+0xc>

080099cc <_sbrk_r>:
 80099cc:	b538      	push	{r3, r4, r5, lr}
 80099ce:	2300      	movs	r3, #0
 80099d0:	4d05      	ldr	r5, [pc, #20]	@ (80099e8 <_sbrk_r+0x1c>)
 80099d2:	4604      	mov	r4, r0
 80099d4:	4608      	mov	r0, r1
 80099d6:	602b      	str	r3, [r5, #0]
 80099d8:	f7f9 f820 	bl	8002a1c <_sbrk>
 80099dc:	1c43      	adds	r3, r0, #1
 80099de:	d102      	bne.n	80099e6 <_sbrk_r+0x1a>
 80099e0:	682b      	ldr	r3, [r5, #0]
 80099e2:	b103      	cbz	r3, 80099e6 <_sbrk_r+0x1a>
 80099e4:	6023      	str	r3, [r4, #0]
 80099e6:	bd38      	pop	{r3, r4, r5, pc}
 80099e8:	200049a4 	.word	0x200049a4

080099ec <__assert_func>:
 80099ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80099ee:	4614      	mov	r4, r2
 80099f0:	461a      	mov	r2, r3
 80099f2:	4b09      	ldr	r3, [pc, #36]	@ (8009a18 <__assert_func+0x2c>)
 80099f4:	4605      	mov	r5, r0
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	68d8      	ldr	r0, [r3, #12]
 80099fa:	b954      	cbnz	r4, 8009a12 <__assert_func+0x26>
 80099fc:	4b07      	ldr	r3, [pc, #28]	@ (8009a1c <__assert_func+0x30>)
 80099fe:	461c      	mov	r4, r3
 8009a00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a04:	9100      	str	r1, [sp, #0]
 8009a06:	462b      	mov	r3, r5
 8009a08:	4905      	ldr	r1, [pc, #20]	@ (8009a20 <__assert_func+0x34>)
 8009a0a:	f000 f86f 	bl	8009aec <fiprintf>
 8009a0e:	f000 f87f 	bl	8009b10 <abort>
 8009a12:	4b04      	ldr	r3, [pc, #16]	@ (8009a24 <__assert_func+0x38>)
 8009a14:	e7f4      	b.n	8009a00 <__assert_func+0x14>
 8009a16:	bf00      	nop
 8009a18:	200000a8 	.word	0x200000a8
 8009a1c:	0800a596 	.word	0x0800a596
 8009a20:	0800a568 	.word	0x0800a568
 8009a24:	0800a55b 	.word	0x0800a55b

08009a28 <_calloc_r>:
 8009a28:	b570      	push	{r4, r5, r6, lr}
 8009a2a:	fba1 5402 	umull	r5, r4, r1, r2
 8009a2e:	b93c      	cbnz	r4, 8009a40 <_calloc_r+0x18>
 8009a30:	4629      	mov	r1, r5
 8009a32:	f7ff f9bf 	bl	8008db4 <_malloc_r>
 8009a36:	4606      	mov	r6, r0
 8009a38:	b928      	cbnz	r0, 8009a46 <_calloc_r+0x1e>
 8009a3a:	2600      	movs	r6, #0
 8009a3c:	4630      	mov	r0, r6
 8009a3e:	bd70      	pop	{r4, r5, r6, pc}
 8009a40:	220c      	movs	r2, #12
 8009a42:	6002      	str	r2, [r0, #0]
 8009a44:	e7f9      	b.n	8009a3a <_calloc_r+0x12>
 8009a46:	462a      	mov	r2, r5
 8009a48:	4621      	mov	r1, r4
 8009a4a:	f7fe f9ec 	bl	8007e26 <memset>
 8009a4e:	e7f5      	b.n	8009a3c <_calloc_r+0x14>

08009a50 <__ascii_mbtowc>:
 8009a50:	b082      	sub	sp, #8
 8009a52:	b901      	cbnz	r1, 8009a56 <__ascii_mbtowc+0x6>
 8009a54:	a901      	add	r1, sp, #4
 8009a56:	b142      	cbz	r2, 8009a6a <__ascii_mbtowc+0x1a>
 8009a58:	b14b      	cbz	r3, 8009a6e <__ascii_mbtowc+0x1e>
 8009a5a:	7813      	ldrb	r3, [r2, #0]
 8009a5c:	600b      	str	r3, [r1, #0]
 8009a5e:	7812      	ldrb	r2, [r2, #0]
 8009a60:	1e10      	subs	r0, r2, #0
 8009a62:	bf18      	it	ne
 8009a64:	2001      	movne	r0, #1
 8009a66:	b002      	add	sp, #8
 8009a68:	4770      	bx	lr
 8009a6a:	4610      	mov	r0, r2
 8009a6c:	e7fb      	b.n	8009a66 <__ascii_mbtowc+0x16>
 8009a6e:	f06f 0001 	mvn.w	r0, #1
 8009a72:	e7f8      	b.n	8009a66 <__ascii_mbtowc+0x16>

08009a74 <_realloc_r>:
 8009a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a78:	4680      	mov	r8, r0
 8009a7a:	4615      	mov	r5, r2
 8009a7c:	460c      	mov	r4, r1
 8009a7e:	b921      	cbnz	r1, 8009a8a <_realloc_r+0x16>
 8009a80:	4611      	mov	r1, r2
 8009a82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a86:	f7ff b995 	b.w	8008db4 <_malloc_r>
 8009a8a:	b92a      	cbnz	r2, 8009a98 <_realloc_r+0x24>
 8009a8c:	f7ff f920 	bl	8008cd0 <_free_r>
 8009a90:	2400      	movs	r4, #0
 8009a92:	4620      	mov	r0, r4
 8009a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a98:	f000 f841 	bl	8009b1e <_malloc_usable_size_r>
 8009a9c:	4285      	cmp	r5, r0
 8009a9e:	4606      	mov	r6, r0
 8009aa0:	d802      	bhi.n	8009aa8 <_realloc_r+0x34>
 8009aa2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009aa6:	d8f4      	bhi.n	8009a92 <_realloc_r+0x1e>
 8009aa8:	4629      	mov	r1, r5
 8009aaa:	4640      	mov	r0, r8
 8009aac:	f7ff f982 	bl	8008db4 <_malloc_r>
 8009ab0:	4607      	mov	r7, r0
 8009ab2:	2800      	cmp	r0, #0
 8009ab4:	d0ec      	beq.n	8009a90 <_realloc_r+0x1c>
 8009ab6:	42b5      	cmp	r5, r6
 8009ab8:	462a      	mov	r2, r5
 8009aba:	4621      	mov	r1, r4
 8009abc:	bf28      	it	cs
 8009abe:	4632      	movcs	r2, r6
 8009ac0:	f7fe faa7 	bl	8008012 <memcpy>
 8009ac4:	4621      	mov	r1, r4
 8009ac6:	4640      	mov	r0, r8
 8009ac8:	f7ff f902 	bl	8008cd0 <_free_r>
 8009acc:	463c      	mov	r4, r7
 8009ace:	e7e0      	b.n	8009a92 <_realloc_r+0x1e>

08009ad0 <__ascii_wctomb>:
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	4608      	mov	r0, r1
 8009ad4:	b141      	cbz	r1, 8009ae8 <__ascii_wctomb+0x18>
 8009ad6:	2aff      	cmp	r2, #255	@ 0xff
 8009ad8:	d904      	bls.n	8009ae4 <__ascii_wctomb+0x14>
 8009ada:	228a      	movs	r2, #138	@ 0x8a
 8009adc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ae0:	601a      	str	r2, [r3, #0]
 8009ae2:	4770      	bx	lr
 8009ae4:	2001      	movs	r0, #1
 8009ae6:	700a      	strb	r2, [r1, #0]
 8009ae8:	4770      	bx	lr
	...

08009aec <fiprintf>:
 8009aec:	b40e      	push	{r1, r2, r3}
 8009aee:	b503      	push	{r0, r1, lr}
 8009af0:	4601      	mov	r1, r0
 8009af2:	ab03      	add	r3, sp, #12
 8009af4:	4805      	ldr	r0, [pc, #20]	@ (8009b0c <fiprintf+0x20>)
 8009af6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009afa:	6800      	ldr	r0, [r0, #0]
 8009afc:	9301      	str	r3, [sp, #4]
 8009afe:	f000 f83d 	bl	8009b7c <_vfiprintf_r>
 8009b02:	b002      	add	sp, #8
 8009b04:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b08:	b003      	add	sp, #12
 8009b0a:	4770      	bx	lr
 8009b0c:	200000a8 	.word	0x200000a8

08009b10 <abort>:
 8009b10:	2006      	movs	r0, #6
 8009b12:	b508      	push	{r3, lr}
 8009b14:	f000 fa06 	bl	8009f24 <raise>
 8009b18:	2001      	movs	r0, #1
 8009b1a:	f7f8 ff0a 	bl	8002932 <_exit>

08009b1e <_malloc_usable_size_r>:
 8009b1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b22:	1f18      	subs	r0, r3, #4
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	bfbc      	itt	lt
 8009b28:	580b      	ldrlt	r3, [r1, r0]
 8009b2a:	18c0      	addlt	r0, r0, r3
 8009b2c:	4770      	bx	lr

08009b2e <__sfputc_r>:
 8009b2e:	6893      	ldr	r3, [r2, #8]
 8009b30:	b410      	push	{r4}
 8009b32:	3b01      	subs	r3, #1
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	6093      	str	r3, [r2, #8]
 8009b38:	da07      	bge.n	8009b4a <__sfputc_r+0x1c>
 8009b3a:	6994      	ldr	r4, [r2, #24]
 8009b3c:	42a3      	cmp	r3, r4
 8009b3e:	db01      	blt.n	8009b44 <__sfputc_r+0x16>
 8009b40:	290a      	cmp	r1, #10
 8009b42:	d102      	bne.n	8009b4a <__sfputc_r+0x1c>
 8009b44:	bc10      	pop	{r4}
 8009b46:	f000 b931 	b.w	8009dac <__swbuf_r>
 8009b4a:	6813      	ldr	r3, [r2, #0]
 8009b4c:	1c58      	adds	r0, r3, #1
 8009b4e:	6010      	str	r0, [r2, #0]
 8009b50:	7019      	strb	r1, [r3, #0]
 8009b52:	4608      	mov	r0, r1
 8009b54:	bc10      	pop	{r4}
 8009b56:	4770      	bx	lr

08009b58 <__sfputs_r>:
 8009b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b5a:	4606      	mov	r6, r0
 8009b5c:	460f      	mov	r7, r1
 8009b5e:	4614      	mov	r4, r2
 8009b60:	18d5      	adds	r5, r2, r3
 8009b62:	42ac      	cmp	r4, r5
 8009b64:	d101      	bne.n	8009b6a <__sfputs_r+0x12>
 8009b66:	2000      	movs	r0, #0
 8009b68:	e007      	b.n	8009b7a <__sfputs_r+0x22>
 8009b6a:	463a      	mov	r2, r7
 8009b6c:	4630      	mov	r0, r6
 8009b6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b72:	f7ff ffdc 	bl	8009b2e <__sfputc_r>
 8009b76:	1c43      	adds	r3, r0, #1
 8009b78:	d1f3      	bne.n	8009b62 <__sfputs_r+0xa>
 8009b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009b7c <_vfiprintf_r>:
 8009b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b80:	460d      	mov	r5, r1
 8009b82:	4614      	mov	r4, r2
 8009b84:	4698      	mov	r8, r3
 8009b86:	4606      	mov	r6, r0
 8009b88:	b09d      	sub	sp, #116	@ 0x74
 8009b8a:	b118      	cbz	r0, 8009b94 <_vfiprintf_r+0x18>
 8009b8c:	6a03      	ldr	r3, [r0, #32]
 8009b8e:	b90b      	cbnz	r3, 8009b94 <_vfiprintf_r+0x18>
 8009b90:	f7fe f896 	bl	8007cc0 <__sinit>
 8009b94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b96:	07d9      	lsls	r1, r3, #31
 8009b98:	d405      	bmi.n	8009ba6 <_vfiprintf_r+0x2a>
 8009b9a:	89ab      	ldrh	r3, [r5, #12]
 8009b9c:	059a      	lsls	r2, r3, #22
 8009b9e:	d402      	bmi.n	8009ba6 <_vfiprintf_r+0x2a>
 8009ba0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ba2:	f7fe fa26 	bl	8007ff2 <__retarget_lock_acquire_recursive>
 8009ba6:	89ab      	ldrh	r3, [r5, #12]
 8009ba8:	071b      	lsls	r3, r3, #28
 8009baa:	d501      	bpl.n	8009bb0 <_vfiprintf_r+0x34>
 8009bac:	692b      	ldr	r3, [r5, #16]
 8009bae:	b99b      	cbnz	r3, 8009bd8 <_vfiprintf_r+0x5c>
 8009bb0:	4629      	mov	r1, r5
 8009bb2:	4630      	mov	r0, r6
 8009bb4:	f000 f938 	bl	8009e28 <__swsetup_r>
 8009bb8:	b170      	cbz	r0, 8009bd8 <_vfiprintf_r+0x5c>
 8009bba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009bbc:	07dc      	lsls	r4, r3, #31
 8009bbe:	d504      	bpl.n	8009bca <_vfiprintf_r+0x4e>
 8009bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8009bc4:	b01d      	add	sp, #116	@ 0x74
 8009bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bca:	89ab      	ldrh	r3, [r5, #12]
 8009bcc:	0598      	lsls	r0, r3, #22
 8009bce:	d4f7      	bmi.n	8009bc0 <_vfiprintf_r+0x44>
 8009bd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009bd2:	f7fe fa0f 	bl	8007ff4 <__retarget_lock_release_recursive>
 8009bd6:	e7f3      	b.n	8009bc0 <_vfiprintf_r+0x44>
 8009bd8:	2300      	movs	r3, #0
 8009bda:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bdc:	2320      	movs	r3, #32
 8009bde:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009be2:	2330      	movs	r3, #48	@ 0x30
 8009be4:	f04f 0901 	mov.w	r9, #1
 8009be8:	f8cd 800c 	str.w	r8, [sp, #12]
 8009bec:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009d98 <_vfiprintf_r+0x21c>
 8009bf0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009bf4:	4623      	mov	r3, r4
 8009bf6:	469a      	mov	sl, r3
 8009bf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bfc:	b10a      	cbz	r2, 8009c02 <_vfiprintf_r+0x86>
 8009bfe:	2a25      	cmp	r2, #37	@ 0x25
 8009c00:	d1f9      	bne.n	8009bf6 <_vfiprintf_r+0x7a>
 8009c02:	ebba 0b04 	subs.w	fp, sl, r4
 8009c06:	d00b      	beq.n	8009c20 <_vfiprintf_r+0xa4>
 8009c08:	465b      	mov	r3, fp
 8009c0a:	4622      	mov	r2, r4
 8009c0c:	4629      	mov	r1, r5
 8009c0e:	4630      	mov	r0, r6
 8009c10:	f7ff ffa2 	bl	8009b58 <__sfputs_r>
 8009c14:	3001      	adds	r0, #1
 8009c16:	f000 80a7 	beq.w	8009d68 <_vfiprintf_r+0x1ec>
 8009c1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c1c:	445a      	add	r2, fp
 8009c1e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c20:	f89a 3000 	ldrb.w	r3, [sl]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	f000 809f 	beq.w	8009d68 <_vfiprintf_r+0x1ec>
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8009c30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c34:	f10a 0a01 	add.w	sl, sl, #1
 8009c38:	9304      	str	r3, [sp, #16]
 8009c3a:	9307      	str	r3, [sp, #28]
 8009c3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009c40:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c42:	4654      	mov	r4, sl
 8009c44:	2205      	movs	r2, #5
 8009c46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c4a:	4853      	ldr	r0, [pc, #332]	@ (8009d98 <_vfiprintf_r+0x21c>)
 8009c4c:	f7fe f9d3 	bl	8007ff6 <memchr>
 8009c50:	9a04      	ldr	r2, [sp, #16]
 8009c52:	b9d8      	cbnz	r0, 8009c8c <_vfiprintf_r+0x110>
 8009c54:	06d1      	lsls	r1, r2, #27
 8009c56:	bf44      	itt	mi
 8009c58:	2320      	movmi	r3, #32
 8009c5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c5e:	0713      	lsls	r3, r2, #28
 8009c60:	bf44      	itt	mi
 8009c62:	232b      	movmi	r3, #43	@ 0x2b
 8009c64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c68:	f89a 3000 	ldrb.w	r3, [sl]
 8009c6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c6e:	d015      	beq.n	8009c9c <_vfiprintf_r+0x120>
 8009c70:	4654      	mov	r4, sl
 8009c72:	2000      	movs	r0, #0
 8009c74:	f04f 0c0a 	mov.w	ip, #10
 8009c78:	9a07      	ldr	r2, [sp, #28]
 8009c7a:	4621      	mov	r1, r4
 8009c7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c80:	3b30      	subs	r3, #48	@ 0x30
 8009c82:	2b09      	cmp	r3, #9
 8009c84:	d94b      	bls.n	8009d1e <_vfiprintf_r+0x1a2>
 8009c86:	b1b0      	cbz	r0, 8009cb6 <_vfiprintf_r+0x13a>
 8009c88:	9207      	str	r2, [sp, #28]
 8009c8a:	e014      	b.n	8009cb6 <_vfiprintf_r+0x13a>
 8009c8c:	eba0 0308 	sub.w	r3, r0, r8
 8009c90:	fa09 f303 	lsl.w	r3, r9, r3
 8009c94:	4313      	orrs	r3, r2
 8009c96:	46a2      	mov	sl, r4
 8009c98:	9304      	str	r3, [sp, #16]
 8009c9a:	e7d2      	b.n	8009c42 <_vfiprintf_r+0xc6>
 8009c9c:	9b03      	ldr	r3, [sp, #12]
 8009c9e:	1d19      	adds	r1, r3, #4
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	9103      	str	r1, [sp, #12]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	bfbb      	ittet	lt
 8009ca8:	425b      	neglt	r3, r3
 8009caa:	f042 0202 	orrlt.w	r2, r2, #2
 8009cae:	9307      	strge	r3, [sp, #28]
 8009cb0:	9307      	strlt	r3, [sp, #28]
 8009cb2:	bfb8      	it	lt
 8009cb4:	9204      	strlt	r2, [sp, #16]
 8009cb6:	7823      	ldrb	r3, [r4, #0]
 8009cb8:	2b2e      	cmp	r3, #46	@ 0x2e
 8009cba:	d10a      	bne.n	8009cd2 <_vfiprintf_r+0x156>
 8009cbc:	7863      	ldrb	r3, [r4, #1]
 8009cbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8009cc0:	d132      	bne.n	8009d28 <_vfiprintf_r+0x1ac>
 8009cc2:	9b03      	ldr	r3, [sp, #12]
 8009cc4:	3402      	adds	r4, #2
 8009cc6:	1d1a      	adds	r2, r3, #4
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	9203      	str	r2, [sp, #12]
 8009ccc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009cd0:	9305      	str	r3, [sp, #20]
 8009cd2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009d9c <_vfiprintf_r+0x220>
 8009cd6:	2203      	movs	r2, #3
 8009cd8:	4650      	mov	r0, sl
 8009cda:	7821      	ldrb	r1, [r4, #0]
 8009cdc:	f7fe f98b 	bl	8007ff6 <memchr>
 8009ce0:	b138      	cbz	r0, 8009cf2 <_vfiprintf_r+0x176>
 8009ce2:	2240      	movs	r2, #64	@ 0x40
 8009ce4:	9b04      	ldr	r3, [sp, #16]
 8009ce6:	eba0 000a 	sub.w	r0, r0, sl
 8009cea:	4082      	lsls	r2, r0
 8009cec:	4313      	orrs	r3, r2
 8009cee:	3401      	adds	r4, #1
 8009cf0:	9304      	str	r3, [sp, #16]
 8009cf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cf6:	2206      	movs	r2, #6
 8009cf8:	4829      	ldr	r0, [pc, #164]	@ (8009da0 <_vfiprintf_r+0x224>)
 8009cfa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009cfe:	f7fe f97a 	bl	8007ff6 <memchr>
 8009d02:	2800      	cmp	r0, #0
 8009d04:	d03f      	beq.n	8009d86 <_vfiprintf_r+0x20a>
 8009d06:	4b27      	ldr	r3, [pc, #156]	@ (8009da4 <_vfiprintf_r+0x228>)
 8009d08:	bb1b      	cbnz	r3, 8009d52 <_vfiprintf_r+0x1d6>
 8009d0a:	9b03      	ldr	r3, [sp, #12]
 8009d0c:	3307      	adds	r3, #7
 8009d0e:	f023 0307 	bic.w	r3, r3, #7
 8009d12:	3308      	adds	r3, #8
 8009d14:	9303      	str	r3, [sp, #12]
 8009d16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d18:	443b      	add	r3, r7
 8009d1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d1c:	e76a      	b.n	8009bf4 <_vfiprintf_r+0x78>
 8009d1e:	460c      	mov	r4, r1
 8009d20:	2001      	movs	r0, #1
 8009d22:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d26:	e7a8      	b.n	8009c7a <_vfiprintf_r+0xfe>
 8009d28:	2300      	movs	r3, #0
 8009d2a:	f04f 0c0a 	mov.w	ip, #10
 8009d2e:	4619      	mov	r1, r3
 8009d30:	3401      	adds	r4, #1
 8009d32:	9305      	str	r3, [sp, #20]
 8009d34:	4620      	mov	r0, r4
 8009d36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d3a:	3a30      	subs	r2, #48	@ 0x30
 8009d3c:	2a09      	cmp	r2, #9
 8009d3e:	d903      	bls.n	8009d48 <_vfiprintf_r+0x1cc>
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d0c6      	beq.n	8009cd2 <_vfiprintf_r+0x156>
 8009d44:	9105      	str	r1, [sp, #20]
 8009d46:	e7c4      	b.n	8009cd2 <_vfiprintf_r+0x156>
 8009d48:	4604      	mov	r4, r0
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d50:	e7f0      	b.n	8009d34 <_vfiprintf_r+0x1b8>
 8009d52:	ab03      	add	r3, sp, #12
 8009d54:	9300      	str	r3, [sp, #0]
 8009d56:	462a      	mov	r2, r5
 8009d58:	4630      	mov	r0, r6
 8009d5a:	4b13      	ldr	r3, [pc, #76]	@ (8009da8 <_vfiprintf_r+0x22c>)
 8009d5c:	a904      	add	r1, sp, #16
 8009d5e:	f7fd fb65 	bl	800742c <_printf_float>
 8009d62:	4607      	mov	r7, r0
 8009d64:	1c78      	adds	r0, r7, #1
 8009d66:	d1d6      	bne.n	8009d16 <_vfiprintf_r+0x19a>
 8009d68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d6a:	07d9      	lsls	r1, r3, #31
 8009d6c:	d405      	bmi.n	8009d7a <_vfiprintf_r+0x1fe>
 8009d6e:	89ab      	ldrh	r3, [r5, #12]
 8009d70:	059a      	lsls	r2, r3, #22
 8009d72:	d402      	bmi.n	8009d7a <_vfiprintf_r+0x1fe>
 8009d74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d76:	f7fe f93d 	bl	8007ff4 <__retarget_lock_release_recursive>
 8009d7a:	89ab      	ldrh	r3, [r5, #12]
 8009d7c:	065b      	lsls	r3, r3, #25
 8009d7e:	f53f af1f 	bmi.w	8009bc0 <_vfiprintf_r+0x44>
 8009d82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009d84:	e71e      	b.n	8009bc4 <_vfiprintf_r+0x48>
 8009d86:	ab03      	add	r3, sp, #12
 8009d88:	9300      	str	r3, [sp, #0]
 8009d8a:	462a      	mov	r2, r5
 8009d8c:	4630      	mov	r0, r6
 8009d8e:	4b06      	ldr	r3, [pc, #24]	@ (8009da8 <_vfiprintf_r+0x22c>)
 8009d90:	a904      	add	r1, sp, #16
 8009d92:	f7fd fde9 	bl	8007968 <_printf_i>
 8009d96:	e7e4      	b.n	8009d62 <_vfiprintf_r+0x1e6>
 8009d98:	0800a540 	.word	0x0800a540
 8009d9c:	0800a546 	.word	0x0800a546
 8009da0:	0800a54a 	.word	0x0800a54a
 8009da4:	0800742d 	.word	0x0800742d
 8009da8:	08009b59 	.word	0x08009b59

08009dac <__swbuf_r>:
 8009dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dae:	460e      	mov	r6, r1
 8009db0:	4614      	mov	r4, r2
 8009db2:	4605      	mov	r5, r0
 8009db4:	b118      	cbz	r0, 8009dbe <__swbuf_r+0x12>
 8009db6:	6a03      	ldr	r3, [r0, #32]
 8009db8:	b90b      	cbnz	r3, 8009dbe <__swbuf_r+0x12>
 8009dba:	f7fd ff81 	bl	8007cc0 <__sinit>
 8009dbe:	69a3      	ldr	r3, [r4, #24]
 8009dc0:	60a3      	str	r3, [r4, #8]
 8009dc2:	89a3      	ldrh	r3, [r4, #12]
 8009dc4:	071a      	lsls	r2, r3, #28
 8009dc6:	d501      	bpl.n	8009dcc <__swbuf_r+0x20>
 8009dc8:	6923      	ldr	r3, [r4, #16]
 8009dca:	b943      	cbnz	r3, 8009dde <__swbuf_r+0x32>
 8009dcc:	4621      	mov	r1, r4
 8009dce:	4628      	mov	r0, r5
 8009dd0:	f000 f82a 	bl	8009e28 <__swsetup_r>
 8009dd4:	b118      	cbz	r0, 8009dde <__swbuf_r+0x32>
 8009dd6:	f04f 37ff 	mov.w	r7, #4294967295
 8009dda:	4638      	mov	r0, r7
 8009ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009dde:	6823      	ldr	r3, [r4, #0]
 8009de0:	6922      	ldr	r2, [r4, #16]
 8009de2:	b2f6      	uxtb	r6, r6
 8009de4:	1a98      	subs	r0, r3, r2
 8009de6:	6963      	ldr	r3, [r4, #20]
 8009de8:	4637      	mov	r7, r6
 8009dea:	4283      	cmp	r3, r0
 8009dec:	dc05      	bgt.n	8009dfa <__swbuf_r+0x4e>
 8009dee:	4621      	mov	r1, r4
 8009df0:	4628      	mov	r0, r5
 8009df2:	f7ff fdc3 	bl	800997c <_fflush_r>
 8009df6:	2800      	cmp	r0, #0
 8009df8:	d1ed      	bne.n	8009dd6 <__swbuf_r+0x2a>
 8009dfa:	68a3      	ldr	r3, [r4, #8]
 8009dfc:	3b01      	subs	r3, #1
 8009dfe:	60a3      	str	r3, [r4, #8]
 8009e00:	6823      	ldr	r3, [r4, #0]
 8009e02:	1c5a      	adds	r2, r3, #1
 8009e04:	6022      	str	r2, [r4, #0]
 8009e06:	701e      	strb	r6, [r3, #0]
 8009e08:	6962      	ldr	r2, [r4, #20]
 8009e0a:	1c43      	adds	r3, r0, #1
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d004      	beq.n	8009e1a <__swbuf_r+0x6e>
 8009e10:	89a3      	ldrh	r3, [r4, #12]
 8009e12:	07db      	lsls	r3, r3, #31
 8009e14:	d5e1      	bpl.n	8009dda <__swbuf_r+0x2e>
 8009e16:	2e0a      	cmp	r6, #10
 8009e18:	d1df      	bne.n	8009dda <__swbuf_r+0x2e>
 8009e1a:	4621      	mov	r1, r4
 8009e1c:	4628      	mov	r0, r5
 8009e1e:	f7ff fdad 	bl	800997c <_fflush_r>
 8009e22:	2800      	cmp	r0, #0
 8009e24:	d0d9      	beq.n	8009dda <__swbuf_r+0x2e>
 8009e26:	e7d6      	b.n	8009dd6 <__swbuf_r+0x2a>

08009e28 <__swsetup_r>:
 8009e28:	b538      	push	{r3, r4, r5, lr}
 8009e2a:	4b29      	ldr	r3, [pc, #164]	@ (8009ed0 <__swsetup_r+0xa8>)
 8009e2c:	4605      	mov	r5, r0
 8009e2e:	6818      	ldr	r0, [r3, #0]
 8009e30:	460c      	mov	r4, r1
 8009e32:	b118      	cbz	r0, 8009e3c <__swsetup_r+0x14>
 8009e34:	6a03      	ldr	r3, [r0, #32]
 8009e36:	b90b      	cbnz	r3, 8009e3c <__swsetup_r+0x14>
 8009e38:	f7fd ff42 	bl	8007cc0 <__sinit>
 8009e3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e40:	0719      	lsls	r1, r3, #28
 8009e42:	d422      	bmi.n	8009e8a <__swsetup_r+0x62>
 8009e44:	06da      	lsls	r2, r3, #27
 8009e46:	d407      	bmi.n	8009e58 <__swsetup_r+0x30>
 8009e48:	2209      	movs	r2, #9
 8009e4a:	602a      	str	r2, [r5, #0]
 8009e4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e50:	f04f 30ff 	mov.w	r0, #4294967295
 8009e54:	81a3      	strh	r3, [r4, #12]
 8009e56:	e033      	b.n	8009ec0 <__swsetup_r+0x98>
 8009e58:	0758      	lsls	r0, r3, #29
 8009e5a:	d512      	bpl.n	8009e82 <__swsetup_r+0x5a>
 8009e5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009e5e:	b141      	cbz	r1, 8009e72 <__swsetup_r+0x4a>
 8009e60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009e64:	4299      	cmp	r1, r3
 8009e66:	d002      	beq.n	8009e6e <__swsetup_r+0x46>
 8009e68:	4628      	mov	r0, r5
 8009e6a:	f7fe ff31 	bl	8008cd0 <_free_r>
 8009e6e:	2300      	movs	r3, #0
 8009e70:	6363      	str	r3, [r4, #52]	@ 0x34
 8009e72:	89a3      	ldrh	r3, [r4, #12]
 8009e74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009e78:	81a3      	strh	r3, [r4, #12]
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	6063      	str	r3, [r4, #4]
 8009e7e:	6923      	ldr	r3, [r4, #16]
 8009e80:	6023      	str	r3, [r4, #0]
 8009e82:	89a3      	ldrh	r3, [r4, #12]
 8009e84:	f043 0308 	orr.w	r3, r3, #8
 8009e88:	81a3      	strh	r3, [r4, #12]
 8009e8a:	6923      	ldr	r3, [r4, #16]
 8009e8c:	b94b      	cbnz	r3, 8009ea2 <__swsetup_r+0x7a>
 8009e8e:	89a3      	ldrh	r3, [r4, #12]
 8009e90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009e94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e98:	d003      	beq.n	8009ea2 <__swsetup_r+0x7a>
 8009e9a:	4621      	mov	r1, r4
 8009e9c:	4628      	mov	r0, r5
 8009e9e:	f000 f882 	bl	8009fa6 <__smakebuf_r>
 8009ea2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ea6:	f013 0201 	ands.w	r2, r3, #1
 8009eaa:	d00a      	beq.n	8009ec2 <__swsetup_r+0x9a>
 8009eac:	2200      	movs	r2, #0
 8009eae:	60a2      	str	r2, [r4, #8]
 8009eb0:	6962      	ldr	r2, [r4, #20]
 8009eb2:	4252      	negs	r2, r2
 8009eb4:	61a2      	str	r2, [r4, #24]
 8009eb6:	6922      	ldr	r2, [r4, #16]
 8009eb8:	b942      	cbnz	r2, 8009ecc <__swsetup_r+0xa4>
 8009eba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009ebe:	d1c5      	bne.n	8009e4c <__swsetup_r+0x24>
 8009ec0:	bd38      	pop	{r3, r4, r5, pc}
 8009ec2:	0799      	lsls	r1, r3, #30
 8009ec4:	bf58      	it	pl
 8009ec6:	6962      	ldrpl	r2, [r4, #20]
 8009ec8:	60a2      	str	r2, [r4, #8]
 8009eca:	e7f4      	b.n	8009eb6 <__swsetup_r+0x8e>
 8009ecc:	2000      	movs	r0, #0
 8009ece:	e7f7      	b.n	8009ec0 <__swsetup_r+0x98>
 8009ed0:	200000a8 	.word	0x200000a8

08009ed4 <_raise_r>:
 8009ed4:	291f      	cmp	r1, #31
 8009ed6:	b538      	push	{r3, r4, r5, lr}
 8009ed8:	4605      	mov	r5, r0
 8009eda:	460c      	mov	r4, r1
 8009edc:	d904      	bls.n	8009ee8 <_raise_r+0x14>
 8009ede:	2316      	movs	r3, #22
 8009ee0:	6003      	str	r3, [r0, #0]
 8009ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ee6:	bd38      	pop	{r3, r4, r5, pc}
 8009ee8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009eea:	b112      	cbz	r2, 8009ef2 <_raise_r+0x1e>
 8009eec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ef0:	b94b      	cbnz	r3, 8009f06 <_raise_r+0x32>
 8009ef2:	4628      	mov	r0, r5
 8009ef4:	f000 f830 	bl	8009f58 <_getpid_r>
 8009ef8:	4622      	mov	r2, r4
 8009efa:	4601      	mov	r1, r0
 8009efc:	4628      	mov	r0, r5
 8009efe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f02:	f000 b817 	b.w	8009f34 <_kill_r>
 8009f06:	2b01      	cmp	r3, #1
 8009f08:	d00a      	beq.n	8009f20 <_raise_r+0x4c>
 8009f0a:	1c59      	adds	r1, r3, #1
 8009f0c:	d103      	bne.n	8009f16 <_raise_r+0x42>
 8009f0e:	2316      	movs	r3, #22
 8009f10:	6003      	str	r3, [r0, #0]
 8009f12:	2001      	movs	r0, #1
 8009f14:	e7e7      	b.n	8009ee6 <_raise_r+0x12>
 8009f16:	2100      	movs	r1, #0
 8009f18:	4620      	mov	r0, r4
 8009f1a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009f1e:	4798      	blx	r3
 8009f20:	2000      	movs	r0, #0
 8009f22:	e7e0      	b.n	8009ee6 <_raise_r+0x12>

08009f24 <raise>:
 8009f24:	4b02      	ldr	r3, [pc, #8]	@ (8009f30 <raise+0xc>)
 8009f26:	4601      	mov	r1, r0
 8009f28:	6818      	ldr	r0, [r3, #0]
 8009f2a:	f7ff bfd3 	b.w	8009ed4 <_raise_r>
 8009f2e:	bf00      	nop
 8009f30:	200000a8 	.word	0x200000a8

08009f34 <_kill_r>:
 8009f34:	b538      	push	{r3, r4, r5, lr}
 8009f36:	2300      	movs	r3, #0
 8009f38:	4d06      	ldr	r5, [pc, #24]	@ (8009f54 <_kill_r+0x20>)
 8009f3a:	4604      	mov	r4, r0
 8009f3c:	4608      	mov	r0, r1
 8009f3e:	4611      	mov	r1, r2
 8009f40:	602b      	str	r3, [r5, #0]
 8009f42:	f7f8 fce6 	bl	8002912 <_kill>
 8009f46:	1c43      	adds	r3, r0, #1
 8009f48:	d102      	bne.n	8009f50 <_kill_r+0x1c>
 8009f4a:	682b      	ldr	r3, [r5, #0]
 8009f4c:	b103      	cbz	r3, 8009f50 <_kill_r+0x1c>
 8009f4e:	6023      	str	r3, [r4, #0]
 8009f50:	bd38      	pop	{r3, r4, r5, pc}
 8009f52:	bf00      	nop
 8009f54:	200049a4 	.word	0x200049a4

08009f58 <_getpid_r>:
 8009f58:	f7f8 bcd4 	b.w	8002904 <_getpid>

08009f5c <__swhatbuf_r>:
 8009f5c:	b570      	push	{r4, r5, r6, lr}
 8009f5e:	460c      	mov	r4, r1
 8009f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f64:	4615      	mov	r5, r2
 8009f66:	2900      	cmp	r1, #0
 8009f68:	461e      	mov	r6, r3
 8009f6a:	b096      	sub	sp, #88	@ 0x58
 8009f6c:	da0c      	bge.n	8009f88 <__swhatbuf_r+0x2c>
 8009f6e:	89a3      	ldrh	r3, [r4, #12]
 8009f70:	2100      	movs	r1, #0
 8009f72:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009f76:	bf14      	ite	ne
 8009f78:	2340      	movne	r3, #64	@ 0x40
 8009f7a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009f7e:	2000      	movs	r0, #0
 8009f80:	6031      	str	r1, [r6, #0]
 8009f82:	602b      	str	r3, [r5, #0]
 8009f84:	b016      	add	sp, #88	@ 0x58
 8009f86:	bd70      	pop	{r4, r5, r6, pc}
 8009f88:	466a      	mov	r2, sp
 8009f8a:	f000 f849 	bl	800a020 <_fstat_r>
 8009f8e:	2800      	cmp	r0, #0
 8009f90:	dbed      	blt.n	8009f6e <__swhatbuf_r+0x12>
 8009f92:	9901      	ldr	r1, [sp, #4]
 8009f94:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009f98:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009f9c:	4259      	negs	r1, r3
 8009f9e:	4159      	adcs	r1, r3
 8009fa0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009fa4:	e7eb      	b.n	8009f7e <__swhatbuf_r+0x22>

08009fa6 <__smakebuf_r>:
 8009fa6:	898b      	ldrh	r3, [r1, #12]
 8009fa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009faa:	079d      	lsls	r5, r3, #30
 8009fac:	4606      	mov	r6, r0
 8009fae:	460c      	mov	r4, r1
 8009fb0:	d507      	bpl.n	8009fc2 <__smakebuf_r+0x1c>
 8009fb2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009fb6:	6023      	str	r3, [r4, #0]
 8009fb8:	6123      	str	r3, [r4, #16]
 8009fba:	2301      	movs	r3, #1
 8009fbc:	6163      	str	r3, [r4, #20]
 8009fbe:	b003      	add	sp, #12
 8009fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fc2:	466a      	mov	r2, sp
 8009fc4:	ab01      	add	r3, sp, #4
 8009fc6:	f7ff ffc9 	bl	8009f5c <__swhatbuf_r>
 8009fca:	9f00      	ldr	r7, [sp, #0]
 8009fcc:	4605      	mov	r5, r0
 8009fce:	4639      	mov	r1, r7
 8009fd0:	4630      	mov	r0, r6
 8009fd2:	f7fe feef 	bl	8008db4 <_malloc_r>
 8009fd6:	b948      	cbnz	r0, 8009fec <__smakebuf_r+0x46>
 8009fd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fdc:	059a      	lsls	r2, r3, #22
 8009fde:	d4ee      	bmi.n	8009fbe <__smakebuf_r+0x18>
 8009fe0:	f023 0303 	bic.w	r3, r3, #3
 8009fe4:	f043 0302 	orr.w	r3, r3, #2
 8009fe8:	81a3      	strh	r3, [r4, #12]
 8009fea:	e7e2      	b.n	8009fb2 <__smakebuf_r+0xc>
 8009fec:	89a3      	ldrh	r3, [r4, #12]
 8009fee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009ff2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ff6:	81a3      	strh	r3, [r4, #12]
 8009ff8:	9b01      	ldr	r3, [sp, #4]
 8009ffa:	6020      	str	r0, [r4, #0]
 8009ffc:	b15b      	cbz	r3, 800a016 <__smakebuf_r+0x70>
 8009ffe:	4630      	mov	r0, r6
 800a000:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a004:	f000 f81e 	bl	800a044 <_isatty_r>
 800a008:	b128      	cbz	r0, 800a016 <__smakebuf_r+0x70>
 800a00a:	89a3      	ldrh	r3, [r4, #12]
 800a00c:	f023 0303 	bic.w	r3, r3, #3
 800a010:	f043 0301 	orr.w	r3, r3, #1
 800a014:	81a3      	strh	r3, [r4, #12]
 800a016:	89a3      	ldrh	r3, [r4, #12]
 800a018:	431d      	orrs	r5, r3
 800a01a:	81a5      	strh	r5, [r4, #12]
 800a01c:	e7cf      	b.n	8009fbe <__smakebuf_r+0x18>
	...

0800a020 <_fstat_r>:
 800a020:	b538      	push	{r3, r4, r5, lr}
 800a022:	2300      	movs	r3, #0
 800a024:	4d06      	ldr	r5, [pc, #24]	@ (800a040 <_fstat_r+0x20>)
 800a026:	4604      	mov	r4, r0
 800a028:	4608      	mov	r0, r1
 800a02a:	4611      	mov	r1, r2
 800a02c:	602b      	str	r3, [r5, #0]
 800a02e:	f7f8 fccf 	bl	80029d0 <_fstat>
 800a032:	1c43      	adds	r3, r0, #1
 800a034:	d102      	bne.n	800a03c <_fstat_r+0x1c>
 800a036:	682b      	ldr	r3, [r5, #0]
 800a038:	b103      	cbz	r3, 800a03c <_fstat_r+0x1c>
 800a03a:	6023      	str	r3, [r4, #0]
 800a03c:	bd38      	pop	{r3, r4, r5, pc}
 800a03e:	bf00      	nop
 800a040:	200049a4 	.word	0x200049a4

0800a044 <_isatty_r>:
 800a044:	b538      	push	{r3, r4, r5, lr}
 800a046:	2300      	movs	r3, #0
 800a048:	4d05      	ldr	r5, [pc, #20]	@ (800a060 <_isatty_r+0x1c>)
 800a04a:	4604      	mov	r4, r0
 800a04c:	4608      	mov	r0, r1
 800a04e:	602b      	str	r3, [r5, #0]
 800a050:	f7f8 fccd 	bl	80029ee <_isatty>
 800a054:	1c43      	adds	r3, r0, #1
 800a056:	d102      	bne.n	800a05e <_isatty_r+0x1a>
 800a058:	682b      	ldr	r3, [r5, #0]
 800a05a:	b103      	cbz	r3, 800a05e <_isatty_r+0x1a>
 800a05c:	6023      	str	r3, [r4, #0]
 800a05e:	bd38      	pop	{r3, r4, r5, pc}
 800a060:	200049a4 	.word	0x200049a4

0800a064 <_init>:
 800a064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a066:	bf00      	nop
 800a068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a06a:	bc08      	pop	{r3}
 800a06c:	469e      	mov	lr, r3
 800a06e:	4770      	bx	lr

0800a070 <_fini>:
 800a070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a072:	bf00      	nop
 800a074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a076:	bc08      	pop	{r3}
 800a078:	469e      	mov	lr, r3
 800a07a:	4770      	bx	lr
