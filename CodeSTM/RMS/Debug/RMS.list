
RMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba5c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  0800bb70  0800bb70  0000cb70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0d8  0800c0d8  0000e254  2**0
                  CONTENTS
  4 .ARM          00000008  0800c0d8  0800c0d8  0000d0d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c0e0  0800c0e0  0000e254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0e0  0800c0e0  0000d0e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c0e4  0800c0e4  0000d0e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000254  20000000  0800c0e8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000046b0  20000254  0800c33c  0000e254  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004904  0800c33c  0000e904  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e254  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019c5f  00000000  00000000  0000e27d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003baf  00000000  00000000  00027edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001778  00000000  00000000  0002ba90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001252  00000000  00000000  0002d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b320  00000000  00000000  0002e45a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a7a3  00000000  00000000  0004977a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098ab8  00000000  00000000  00063f1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fc9d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000742c  00000000  00000000  000fca18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  00103e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000254 	.word	0x20000254
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bb54 	.word	0x0800bb54

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000258 	.word	0x20000258
 800014c:	0800bb54 	.word	0x0800bb54

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <MPR121_Init>:
#include "MPR121.h"


uint8_t MPR121_Init(void) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
    
    writeRegister(MPR121_SOFTRESET, 0x63);
 8000b2e:	2163      	movs	r1, #99	@ 0x63
 8000b30:	2080      	movs	r0, #128	@ 0x80
 8000b32:	f000 f859 	bl	8000be8 <writeRegister>
    HAL_Delay(1);
 8000b36:	2001      	movs	r0, #1
 8000b38:	f002 f94c 	bl	8002dd4 <HAL_Delay>
    writeRegister(MPR121_ECR, 0x0);
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	205e      	movs	r0, #94	@ 0x5e
 8000b40:	f000 f852 	bl	8000be8 <writeRegister>

  uint8_t c = readRegister8(MPR121_CONFIG2);
 8000b44:	205d      	movs	r0, #93	@ 0x5d
 8000b46:	f000 f86b 	bl	8000c20 <readRegister8>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]

  if (c != 0x24)
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	2b24      	cmp	r3, #36	@ 0x24
 8000b52:	d001      	beq.n	8000b58 <MPR121_Init+0x30>
    return c;
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	e043      	b.n	8000be0 <MPR121_Init+0xb8>

  setThresholds(MPR121_TOUCH_THRESHOLD_DEFAULT, MPR121_RELEASE_THRESHOLD_DEFAULT);
 8000b58:	2106      	movs	r1, #6
 8000b5a:	200c      	movs	r0, #12
 8000b5c:	f000 f898 	bl	8000c90 <setThresholds>
  writeRegister(MPR121_MHDR, 0x01);
 8000b60:	2101      	movs	r1, #1
 8000b62:	202b      	movs	r0, #43	@ 0x2b
 8000b64:	f000 f840 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_NHDR, 0x01);
 8000b68:	2101      	movs	r1, #1
 8000b6a:	202c      	movs	r0, #44	@ 0x2c
 8000b6c:	f000 f83c 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_NCLR, 0x0E);
 8000b70:	210e      	movs	r1, #14
 8000b72:	202d      	movs	r0, #45	@ 0x2d
 8000b74:	f000 f838 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_FDLR, 0x00);
 8000b78:	2100      	movs	r1, #0
 8000b7a:	202e      	movs	r0, #46	@ 0x2e
 8000b7c:	f000 f834 	bl	8000be8 <writeRegister>

  writeRegister(MPR121_MHDF, 0x01);
 8000b80:	2101      	movs	r1, #1
 8000b82:	202f      	movs	r0, #47	@ 0x2f
 8000b84:	f000 f830 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_NHDF, 0x05);
 8000b88:	2105      	movs	r1, #5
 8000b8a:	2030      	movs	r0, #48	@ 0x30
 8000b8c:	f000 f82c 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_NCLF, 0x01);
 8000b90:	2101      	movs	r1, #1
 8000b92:	2031      	movs	r0, #49	@ 0x31
 8000b94:	f000 f828 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_FDLF, 0x00);
 8000b98:	2100      	movs	r1, #0
 8000b9a:	2032      	movs	r0, #50	@ 0x32
 8000b9c:	f000 f824 	bl	8000be8 <writeRegister>

  writeRegister(MPR121_NHDT, 0x00);
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	2033      	movs	r0, #51	@ 0x33
 8000ba4:	f000 f820 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_NCLT, 0x00);
 8000ba8:	2100      	movs	r1, #0
 8000baa:	2034      	movs	r0, #52	@ 0x34
 8000bac:	f000 f81c 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_FDLT, 0x00);
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	2035      	movs	r0, #53	@ 0x35
 8000bb4:	f000 f818 	bl	8000be8 <writeRegister>

  writeRegister(MPR121_DEBOUNCE, 0);
 8000bb8:	2100      	movs	r1, #0
 8000bba:	205b      	movs	r0, #91	@ 0x5b
 8000bbc:	f000 f814 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_CONFIG1, 0x10); // default, 16uA charge current
 8000bc0:	2110      	movs	r1, #16
 8000bc2:	205c      	movs	r0, #92	@ 0x5c
 8000bc4:	f000 f810 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_CONFIG2, 0x20); // 0.5uS encoding, 1ms period
 8000bc8:	2120      	movs	r1, #32
 8000bca:	205d      	movs	r0, #93	@ 0x5d
 8000bcc:	f000 f80c 	bl	8000be8 <writeRegister>
    uint8_t ECR_SETTING =
 8000bd0:	238c      	movs	r3, #140	@ 0x8c
 8000bd2:	71bb      	strb	r3, [r7, #6]
      B10000000 + 12; // 5 bits for baseline tracking & proximity disabled + X
                      // amount of electrodes running (12)
  writeRegister(MPR121_ECR, ECR_SETTING); // start with above ECR setting
 8000bd4:	79bb      	ldrb	r3, [r7, #6]
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	205e      	movs	r0, #94	@ 0x5e
 8000bda:	f000 f805 	bl	8000be8 <writeRegister>

    return c; 
 8000bde:	79fb      	ldrb	r3, [r7, #7]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <writeRegister>:
    
//     uint16_t touchData = (touchStatus[1] << 8) | touchStatus[0];
//     return (touchData != 0) ? 1 : 0;
// }

void writeRegister(uint8_t reg, uint8_t cmd) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af04      	add	r7, sp, #16
 8000bee:	4603      	mov	r3, r0
 8000bf0:	460a      	mov	r2, r1
 8000bf2:	71fb      	strb	r3, [r7, #7]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	71bb      	strb	r3, [r7, #6]
	// uint8_t arr[2] = { reg, cmd };
	// HAL_I2C_Master_Transmit(&hi2c1, MPR121_I2C_ADDR, arr, 2, HAL_MAX_DELAY);
    HAL_I2C_Mem_Write(&hi2c1, MPR121_I2C_ADDR|0x01,reg,1,&cmd,1,HAL_MAX_DELAY);
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000c00:	9302      	str	r3, [sp, #8]
 8000c02:	2301      	movs	r3, #1
 8000c04:	9301      	str	r3, [sp, #4]
 8000c06:	1dbb      	adds	r3, r7, #6
 8000c08:	9300      	str	r3, [sp, #0]
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	21b5      	movs	r1, #181	@ 0xb5
 8000c0e:	4803      	ldr	r0, [pc, #12]	@ (8000c1c <writeRegister+0x34>)
 8000c10:	f003 f860 	bl	8003cd4 <HAL_I2C_Mem_Write>
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000540 	.word	0x20000540

08000c20 <readRegister8>:
/**
 * @brief Reads from a specific register.
 * @param reg Address of register to read from.
 * @return Byte read.
 */
uint8_t readRegister8(uint8_t reg) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b088      	sub	sp, #32
 8000c24:	af04      	add	r7, sp, #16
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
	// HAL_I2C_Master_Transmit(&hi2c1, MPR121_I2C_ADDR, &reg, 1, HAL_MAX_DELAY);
	uint8_t result;
	// HAL_I2C_Master_Receive(&hi2c1, MPR121_I2C_ADDR, &result, 1, HAL_MAX_DELAY);
    HAL_I2C_Mem_Read(&hi2c1,MPR121_I2C_ADDR,reg,1,&result,1,HAL_MAX_DELAY);
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	b29a      	uxth	r2, r3
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c32:	9302      	str	r3, [sp, #8]
 8000c34:	2301      	movs	r3, #1
 8000c36:	9301      	str	r3, [sp, #4]
 8000c38:	f107 030f 	add.w	r3, r7, #15
 8000c3c:	9300      	str	r3, [sp, #0]
 8000c3e:	2301      	movs	r3, #1
 8000c40:	21b4      	movs	r1, #180	@ 0xb4
 8000c42:	4804      	ldr	r0, [pc, #16]	@ (8000c54 <readRegister8+0x34>)
 8000c44:	f003 f940 	bl	8003ec8 <HAL_I2C_Mem_Read>
	return result;
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000540 	.word	0x20000540

08000c58 <readRegister16>:

uint16_t readRegister16(uint8_t reg) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b088      	sub	sp, #32
 8000c5c:	af04      	add	r7, sp, #16
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
	// HAL_I2C_Master_Transmit(&hi2c1, MPR121_I2C_ADDR, &reg, 1, HAL_MAX_DELAY);
	// uint8_t result[2];
	// HAL_I2C_Master_Receive(&hi2c1, MPR121_I2C_ADDR, (uint8_t*)&result, 2, HAL_MAX_DELAY);
	// return result[0]|(result[1]<<8);
	uint16_t result;
    HAL_I2C_Mem_Read(&hi2c1,MPR121_I2C_ADDR,reg,1,(uint8_t*)&result,2,HAL_MAX_DELAY);
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	b29a      	uxth	r2, r3
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6a:	9302      	str	r3, [sp, #8]
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	9301      	str	r3, [sp, #4]
 8000c70:	f107 030e 	add.w	r3, r7, #14
 8000c74:	9300      	str	r3, [sp, #0]
 8000c76:	2301      	movs	r3, #1
 8000c78:	21b4      	movs	r1, #180	@ 0xb4
 8000c7a:	4804      	ldr	r0, [pc, #16]	@ (8000c8c <readRegister16+0x34>)
 8000c7c:	f003 f924 	bl	8003ec8 <HAL_I2C_Mem_Read>
    return result;
 8000c80:	89fb      	ldrh	r3, [r7, #14]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000540 	.word	0x20000540

08000c90 <setThresholds>:

void setThresholds(uint8_t touch, uint8_t release) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	460a      	mov	r2, r1
 8000c9a:	71fb      	strb	r3, [r7, #7]
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	71bb      	strb	r3, [r7, #6]
  // set all thresholds (the same)
  for (uint8_t i = 0; i < 12; i++) {
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	73fb      	strb	r3, [r7, #15]
 8000ca4:	e016      	b.n	8000cd4 <setThresholds+0x44>
    writeRegister(MPR121_TOUCHTH_0 + 2 * i, touch);
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	3341      	adds	r3, #65	@ 0x41
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	79fa      	ldrb	r2, [r7, #7]
 8000cb2:	4611      	mov	r1, r2
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff ff97 	bl	8000be8 <writeRegister>
    writeRegister(MPR121_RELEASETH_0 + 2 * i, release);
 8000cba:	7bfb      	ldrb	r3, [r7, #15]
 8000cbc:	3321      	adds	r3, #33	@ 0x21
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	79ba      	ldrb	r2, [r7, #6]
 8000cc6:	4611      	mov	r1, r2
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ff8d 	bl	8000be8 <writeRegister>
  for (uint8_t i = 0; i < 12; i++) {
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	73fb      	strb	r3, [r7, #15]
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
 8000cd6:	2b0b      	cmp	r3, #11
 8000cd8:	d9e5      	bls.n	8000ca6 <setThresholds+0x16>
  }
}
 8000cda:	bf00      	nop
 8000cdc:	bf00      	nop
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <touched>:
  if (t > 12)
    return 0;
  return readRegister16(MPR121_FILTDATA_0L + t * 2);
}

uint16_t touched(void) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
  uint16_t t = readRegister16(MPR121_TOUCHSTATUS_L);
 8000cea:	2000      	movs	r0, #0
 8000cec:	f7ff ffb4 	bl	8000c58 <readRegister16>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	80fb      	strh	r3, [r7, #6]
  return t & 0x0FFF;
 8000cf4:	88fb      	ldrh	r3, [r7, #6]
 8000cf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cfa:	b29b      	uxth	r3, r3
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <BMP180_Init>:

/**
 * @brief Initializes the BMP180 temperature/pressure sensor.
 * @param hi2c User I2C handle pointer.
 */
void BMP180_Init(I2C_HandleTypeDef *hi2c) {
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	_bmp180_ui2c = hi2c;
 8000d0c:	4a03      	ldr	r2, [pc, #12]	@ (8000d1c <BMP180_Init+0x18>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6013      	str	r3, [r2, #0]
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr
 8000d1c:	20000270 	.word	0x20000270

08000d20 <BMP180_SetOversampling>:
/**
 * @param oss Enum, oversampling setting.
 * @note Available resolutions: BMP180_LOW, BMP180_STANDARD, BMP180_HIGH, BMP180_ULTRA.
 * @note Refer to section 3.3.1 of datasheet.
 */
void BMP180_SetOversampling(BMP180_OSS oss) {
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
	_bmp180_oss = oss;
 8000d2a:	4a04      	ldr	r2, [pc, #16]	@ (8000d3c <BMP180_SetOversampling+0x1c>)
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	7013      	strb	r3, [r2, #0]
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bc80      	pop	{r7}
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	2000028a 	.word	0x2000028a

08000d40 <BMP180_UpdateCalibrationData>:

/**
 * @brief Updates calibration data.
 * @note Must be called once before main loop.
 */
void BMP180_UpdateCalibrationData(void) {
 8000d40:	b598      	push	{r3, r4, r7, lr}
 8000d42:	af00      	add	r7, sp, #0
	_bmp180_eeprom.BMP180_AC1 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC1]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC1]);
 8000d44:	23aa      	movs	r3, #170	@ 0xaa
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 f8dc 	bl	8000f04 <BMP180_ReadReg>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	021b      	lsls	r3, r3, #8
 8000d50:	b21c      	sxth	r4, r3
 8000d52:	23ab      	movs	r3, #171	@ 0xab
 8000d54:	4618      	mov	r0, r3
 8000d56:	f000 f8d5 	bl	8000f04 <BMP180_ReadReg>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	b21b      	sxth	r3, r3
 8000d5e:	4323      	orrs	r3, r4
 8000d60:	b21a      	sxth	r2, r3
 8000d62:	4b58      	ldr	r3, [pc, #352]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000d64:	801a      	strh	r2, [r3, #0]
	_bmp180_eeprom.BMP180_AC2 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC2]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC2]);
 8000d66:	23ac      	movs	r3, #172	@ 0xac
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f000 f8cb 	bl	8000f04 <BMP180_ReadReg>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	021b      	lsls	r3, r3, #8
 8000d72:	b21c      	sxth	r4, r3
 8000d74:	23ad      	movs	r3, #173	@ 0xad
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 f8c4 	bl	8000f04 <BMP180_ReadReg>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	b21b      	sxth	r3, r3
 8000d80:	4323      	orrs	r3, r4
 8000d82:	b21a      	sxth	r2, r3
 8000d84:	4b4f      	ldr	r3, [pc, #316]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000d86:	805a      	strh	r2, [r3, #2]
	_bmp180_eeprom.BMP180_AC3 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC3]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC3]);
 8000d88:	23ae      	movs	r3, #174	@ 0xae
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 f8ba 	bl	8000f04 <BMP180_ReadReg>
 8000d90:	4603      	mov	r3, r0
 8000d92:	021b      	lsls	r3, r3, #8
 8000d94:	b21c      	sxth	r4, r3
 8000d96:	23af      	movs	r3, #175	@ 0xaf
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f000 f8b3 	bl	8000f04 <BMP180_ReadReg>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	b21b      	sxth	r3, r3
 8000da2:	4323      	orrs	r3, r4
 8000da4:	b21a      	sxth	r2, r3
 8000da6:	4b47      	ldr	r3, [pc, #284]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000da8:	809a      	strh	r2, [r3, #4]
	_bmp180_eeprom.BMP180_AC4 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC4]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC4]);
 8000daa:	23b0      	movs	r3, #176	@ 0xb0
 8000dac:	4618      	mov	r0, r3
 8000dae:	f000 f8a9 	bl	8000f04 <BMP180_ReadReg>
 8000db2:	4603      	mov	r3, r0
 8000db4:	021b      	lsls	r3, r3, #8
 8000db6:	b21c      	sxth	r4, r3
 8000db8:	23b1      	movs	r3, #177	@ 0xb1
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 f8a2 	bl	8000f04 <BMP180_ReadReg>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	b21b      	sxth	r3, r3
 8000dc4:	4323      	orrs	r3, r4
 8000dc6:	b21b      	sxth	r3, r3
 8000dc8:	b29a      	uxth	r2, r3
 8000dca:	4b3e      	ldr	r3, [pc, #248]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000dcc:	80da      	strh	r2, [r3, #6]
	_bmp180_eeprom.BMP180_AC5 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC5]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC5]);
 8000dce:	23b2      	movs	r3, #178	@ 0xb2
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f000 f897 	bl	8000f04 <BMP180_ReadReg>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	021b      	lsls	r3, r3, #8
 8000dda:	b21c      	sxth	r4, r3
 8000ddc:	23b3      	movs	r3, #179	@ 0xb3
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 f890 	bl	8000f04 <BMP180_ReadReg>
 8000de4:	4603      	mov	r3, r0
 8000de6:	b21b      	sxth	r3, r3
 8000de8:	4323      	orrs	r3, r4
 8000dea:	b21b      	sxth	r3, r3
 8000dec:	b29a      	uxth	r2, r3
 8000dee:	4b35      	ldr	r3, [pc, #212]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000df0:	811a      	strh	r2, [r3, #8]
	_bmp180_eeprom.BMP180_AC6 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC6]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC6]);
 8000df2:	23b4      	movs	r3, #180	@ 0xb4
 8000df4:	4618      	mov	r0, r3
 8000df6:	f000 f885 	bl	8000f04 <BMP180_ReadReg>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	021b      	lsls	r3, r3, #8
 8000dfe:	b21c      	sxth	r4, r3
 8000e00:	23b5      	movs	r3, #181	@ 0xb5
 8000e02:	4618      	mov	r0, r3
 8000e04:	f000 f87e 	bl	8000f04 <BMP180_ReadReg>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	b21b      	sxth	r3, r3
 8000e0c:	4323      	orrs	r3, r4
 8000e0e:	b21b      	sxth	r3, r3
 8000e10:	b29a      	uxth	r2, r3
 8000e12:	4b2c      	ldr	r3, [pc, #176]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000e14:	815a      	strh	r2, [r3, #10]
	_bmp180_eeprom.BMP180_B1 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B1]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_B1]);
 8000e16:	23b6      	movs	r3, #182	@ 0xb6
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 f873 	bl	8000f04 <BMP180_ReadReg>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	021b      	lsls	r3, r3, #8
 8000e22:	b21c      	sxth	r4, r3
 8000e24:	23b7      	movs	r3, #183	@ 0xb7
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 f86c 	bl	8000f04 <BMP180_ReadReg>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	b21b      	sxth	r3, r3
 8000e30:	4323      	orrs	r3, r4
 8000e32:	b21a      	sxth	r2, r3
 8000e34:	4b23      	ldr	r3, [pc, #140]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000e36:	819a      	strh	r2, [r3, #12]
	_bmp180_eeprom.BMP180_B2 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B2]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_B2]);
 8000e38:	23b8      	movs	r3, #184	@ 0xb8
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 f862 	bl	8000f04 <BMP180_ReadReg>
 8000e40:	4603      	mov	r3, r0
 8000e42:	021b      	lsls	r3, r3, #8
 8000e44:	b21c      	sxth	r4, r3
 8000e46:	23b9      	movs	r3, #185	@ 0xb9
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f000 f85b 	bl	8000f04 <BMP180_ReadReg>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	b21b      	sxth	r3, r3
 8000e52:	4323      	orrs	r3, r4
 8000e54:	b21a      	sxth	r2, r3
 8000e56:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000e58:	81da      	strh	r2, [r3, #14]
	_bmp180_eeprom.BMP180_MB = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MB]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MB]);
 8000e5a:	23ba      	movs	r3, #186	@ 0xba
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f000 f851 	bl	8000f04 <BMP180_ReadReg>
 8000e62:	4603      	mov	r3, r0
 8000e64:	021b      	lsls	r3, r3, #8
 8000e66:	b21c      	sxth	r4, r3
 8000e68:	23bb      	movs	r3, #187	@ 0xbb
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 f84a 	bl	8000f04 <BMP180_ReadReg>
 8000e70:	4603      	mov	r3, r0
 8000e72:	b21b      	sxth	r3, r3
 8000e74:	4323      	orrs	r3, r4
 8000e76:	b21a      	sxth	r2, r3
 8000e78:	4b12      	ldr	r3, [pc, #72]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000e7a:	821a      	strh	r2, [r3, #16]
	_bmp180_eeprom.BMP180_MC = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MC]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MC]);
 8000e7c:	23bc      	movs	r3, #188	@ 0xbc
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 f840 	bl	8000f04 <BMP180_ReadReg>
 8000e84:	4603      	mov	r3, r0
 8000e86:	021b      	lsls	r3, r3, #8
 8000e88:	b21c      	sxth	r4, r3
 8000e8a:	23bd      	movs	r3, #189	@ 0xbd
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f000 f839 	bl	8000f04 <BMP180_ReadReg>
 8000e92:	4603      	mov	r3, r0
 8000e94:	b21b      	sxth	r3, r3
 8000e96:	4323      	orrs	r3, r4
 8000e98:	b21a      	sxth	r2, r3
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000e9c:	825a      	strh	r2, [r3, #18]
	_bmp180_eeprom.BMP180_MD = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MD]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MD]);
 8000e9e:	23be      	movs	r3, #190	@ 0xbe
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f000 f82f 	bl	8000f04 <BMP180_ReadReg>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	021b      	lsls	r3, r3, #8
 8000eaa:	b21c      	sxth	r4, r3
 8000eac:	23bf      	movs	r3, #191	@ 0xbf
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 f828 	bl	8000f04 <BMP180_ReadReg>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	b21b      	sxth	r3, r3
 8000eb8:	4323      	orrs	r3, r4
 8000eba:	b21a      	sxth	r2, r3
 8000ebc:	4b01      	ldr	r3, [pc, #4]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000ebe:	829a      	strh	r2, [r3, #20]
}
 8000ec0:	bf00      	nop
 8000ec2:	bd98      	pop	{r3, r4, r7, pc}
 8000ec4:	20000274 	.word	0x20000274

08000ec8 <BMP180_WriteReg>:
/**
 * @brief Writes to a specific register.
 * @param reg Address of register to write to.
 * @param cmd Byte to write.
 */
void BMP180_WriteReg(uint8_t reg, uint8_t cmd) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af02      	add	r7, sp, #8
 8000ece:	4603      	mov	r3, r0
 8000ed0:	460a      	mov	r2, r1
 8000ed2:	71fb      	strb	r3, [r7, #7]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	71bb      	strb	r3, [r7, #6]
	uint8_t arr[2] = { reg, cmd };
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	733b      	strb	r3, [r7, #12]
 8000edc:	79bb      	ldrb	r3, [r7, #6]
 8000ede:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, arr, 2, BMP180_I2C_TIMEOUT);
 8000ee0:	4b07      	ldr	r3, [pc, #28]	@ (8000f00 <BMP180_WriteReg+0x38>)
 8000ee2:	6818      	ldr	r0, [r3, #0]
 8000ee4:	f107 020c 	add.w	r2, r7, #12
 8000ee8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	2302      	movs	r3, #2
 8000ef0:	21ee      	movs	r1, #238	@ 0xee
 8000ef2:	f002 fb85 	bl	8003600 <HAL_I2C_Master_Transmit>
}
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000270 	.word	0x20000270

08000f04 <BMP180_ReadReg>:
/**
 * @brief Reads from a specific register.
 * @param reg Address of register to read from.
 * @return Byte read.
 */
uint8_t BMP180_ReadReg(uint8_t reg) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af02      	add	r7, sp, #8
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 8000f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f44 <BMP180_ReadReg+0x40>)
 8000f10:	6818      	ldr	r0, [r3, #0]
 8000f12:	1dfa      	adds	r2, r7, #7
 8000f14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	21ee      	movs	r1, #238	@ 0xee
 8000f1e:	f002 fb6f 	bl	8003600 <HAL_I2C_Master_Transmit>
	uint8_t result;
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 8000f22:	4b08      	ldr	r3, [pc, #32]	@ (8000f44 <BMP180_ReadReg+0x40>)
 8000f24:	6818      	ldr	r0, [r3, #0]
 8000f26:	f107 020f 	add.w	r2, r7, #15
 8000f2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	2301      	movs	r3, #1
 8000f32:	21ee      	movs	r1, #238	@ 0xee
 8000f34:	f002 fc62 	bl	80037fc <HAL_I2C_Master_Receive>
	return result;
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000270 	.word	0x20000270

08000f48 <BMP180_GetRawTemperature>:

/**
 * @brief Measures and calculates temperature.
 * @return Temperature in 0.1 (1/10) degrees Celsius.
 */
int32_t BMP180_GetRawTemperature(void) {
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_TEMP);
 8000f4e:	232e      	movs	r3, #46	@ 0x2e
 8000f50:	4619      	mov	r1, r3
 8000f52:	20f4      	movs	r0, #244	@ 0xf4
 8000f54:	f7ff ffb8 	bl	8000ec8 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_TEMP);
 8000f58:	2305      	movs	r3, #5
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f001 ff3a 	bl	8002dd4 <HAL_Delay>
	int32_t ut = (BMP180_ReadReg(BMP180_MSB_REG) << 8) | BMP180_ReadReg(BMP180_LSB_REG);
 8000f60:	20f6      	movs	r0, #246	@ 0xf6
 8000f62:	f7ff ffcf 	bl	8000f04 <BMP180_ReadReg>
 8000f66:	4603      	mov	r3, r0
 8000f68:	021c      	lsls	r4, r3, #8
 8000f6a:	20f7      	movs	r0, #247	@ 0xf7
 8000f6c:	f7ff ffca 	bl	8000f04 <BMP180_ReadReg>
 8000f70:	4603      	mov	r3, r0
 8000f72:	4323      	orrs	r3, r4
 8000f74:	60fb      	str	r3, [r7, #12]
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 8000f76:	4b15      	ldr	r3, [pc, #84]	@ (8000fcc <BMP180_GetRawTemperature+0x84>)
 8000f78:	895b      	ldrh	r3, [r3, #10]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	1a9b      	subs	r3, r3, r2
 8000f80:	4a12      	ldr	r2, [pc, #72]	@ (8000fcc <BMP180_GetRawTemperature+0x84>)
 8000f82:	8912      	ldrh	r2, [r2, #8]
 8000f84:	fb02 f303 	mul.w	r3, r2, r3
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	da02      	bge.n	8000f92 <BMP180_GetRawTemperature+0x4a>
 8000f8c:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8000f90:	337f      	adds	r3, #127	@ 0x7f
 8000f92:	13db      	asrs	r3, r3, #15
 8000f94:	60bb      	str	r3, [r7, #8]
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 8000f96:	4b0d      	ldr	r3, [pc, #52]	@ (8000fcc <BMP180_GetRawTemperature+0x84>)
 8000f98:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000f9c:	02da      	lsls	r2, r3, #11
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fcc <BMP180_GetRawTemperature+0x84>)
 8000fa0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	440b      	add	r3, r1
 8000faa:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fae:	607b      	str	r3, [r7, #4]
	int32_t b5 = x1 + x2;
 8000fb0:	68ba      	ldr	r2, [r7, #8]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	603b      	str	r3, [r7, #0]
	return (b5 + 8) / (1 << 4);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	3308      	adds	r3, #8
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	da00      	bge.n	8000fc2 <BMP180_GetRawTemperature+0x7a>
 8000fc0:	330f      	adds	r3, #15
 8000fc2:	111b      	asrs	r3, r3, #4
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd90      	pop	{r4, r7, pc}
 8000fcc:	20000274 	.word	0x20000274

08000fd0 <BMP180_GetTemperature>:

/**
 * @brief Measures and calculates temperature.
 * @return Temperature in degrees Celsius.
 */
float BMP180_GetTemperature(void) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
	int32_t temp = BMP180_GetRawTemperature();
 8000fd6:	f7ff ffb7 	bl	8000f48 <BMP180_GetRawTemperature>
 8000fda:	6078      	str	r0, [r7, #4]
	return temp / 10.0;
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff fa11 	bl	8000404 <__aeabi_i2d>
 8000fe2:	f04f 0200 	mov.w	r2, #0
 8000fe6:	4b07      	ldr	r3, [pc, #28]	@ (8001004 <BMP180_GetTemperature+0x34>)
 8000fe8:	f7ff fba0 	bl	800072c <__aeabi_ddiv>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	4610      	mov	r0, r2
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f7ff fd48 	bl	8000a88 <__aeabi_d2f>
 8000ff8:	4603      	mov	r3, r0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40240000 	.word	0x40240000

08001008 <BMP180_GetPressure>:

/**
 * @brief Measures and calculates pressure.
 * @return Pressure in Pascal(Pa).
 */
int32_t BMP180_GetPressure(void) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b08c      	sub	sp, #48	@ 0x30
 800100c:	af00      	add	r7, sp, #0
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_TEMP);
 800100e:	232e      	movs	r3, #46	@ 0x2e
 8001010:	4619      	mov	r1, r3
 8001012:	20f4      	movs	r0, #244	@ 0xf4
 8001014:	f7ff ff58 	bl	8000ec8 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_TEMP);
 8001018:	2305      	movs	r3, #5
 800101a:	4618      	mov	r0, r3
 800101c:	f001 feda 	bl	8002dd4 <HAL_Delay>
	int32_t ut = BMP180_GetUT();
 8001020:	f000 f902 	bl	8001228 <BMP180_GetUT>
 8001024:	62b8      	str	r0, [r7, #40]	@ 0x28
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_PRES[_bmp180_oss]);
 8001026:	4b7b      	ldr	r3, [pc, #492]	@ (8001214 <BMP180_GetPressure+0x20c>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	461a      	mov	r2, r3
 800102c:	4b7a      	ldr	r3, [pc, #488]	@ (8001218 <BMP180_GetPressure+0x210>)
 800102e:	5c9b      	ldrb	r3, [r3, r2]
 8001030:	4619      	mov	r1, r3
 8001032:	20f4      	movs	r0, #244	@ 0xf4
 8001034:	f7ff ff48 	bl	8000ec8 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_PRES[_bmp180_oss]);
 8001038:	4b76      	ldr	r3, [pc, #472]	@ (8001214 <BMP180_GetPressure+0x20c>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	4b77      	ldr	r3, [pc, #476]	@ (800121c <BMP180_GetPressure+0x214>)
 8001040:	5c9b      	ldrb	r3, [r3, r2]
 8001042:	4618      	mov	r0, r3
 8001044:	f001 fec6 	bl	8002dd4 <HAL_Delay>
	int32_t up = BMP180_GetUP();
 8001048:	f000 f8fc 	bl	8001244 <BMP180_GetUP>
 800104c:	6278      	str	r0, [r7, #36]	@ 0x24
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 800104e:	4b74      	ldr	r3, [pc, #464]	@ (8001220 <BMP180_GetPressure+0x218>)
 8001050:	895b      	ldrh	r3, [r3, #10]
 8001052:	461a      	mov	r2, r3
 8001054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001056:	1a9b      	subs	r3, r3, r2
 8001058:	4a71      	ldr	r2, [pc, #452]	@ (8001220 <BMP180_GetPressure+0x218>)
 800105a:	8912      	ldrh	r2, [r2, #8]
 800105c:	fb02 f303 	mul.w	r3, r2, r3
 8001060:	2b00      	cmp	r3, #0
 8001062:	da02      	bge.n	800106a <BMP180_GetPressure+0x62>
 8001064:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8001068:	337f      	adds	r3, #127	@ 0x7f
 800106a:	13db      	asrs	r3, r3, #15
 800106c:	623b      	str	r3, [r7, #32]
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 800106e:	4b6c      	ldr	r3, [pc, #432]	@ (8001220 <BMP180_GetPressure+0x218>)
 8001070:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001074:	02da      	lsls	r2, r3, #11
 8001076:	4b6a      	ldr	r3, [pc, #424]	@ (8001220 <BMP180_GetPressure+0x218>)
 8001078:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800107c:	4619      	mov	r1, r3
 800107e:	6a3b      	ldr	r3, [r7, #32]
 8001080:	440b      	add	r3, r1
 8001082:	fb92 f3f3 	sdiv	r3, r2, r3
 8001086:	61fb      	str	r3, [r7, #28]
	int32_t b5 = x1 + x2;
 8001088:	6a3a      	ldr	r2, [r7, #32]
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	4413      	add	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
	int32_t b6 = b5 - 4000;
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 8001096:	617b      	str	r3, [r7, #20]
	x1 = (_bmp180_eeprom.BMP180_B2 * (b6 * b6 / (1 << 12))) / (1 << 11);
 8001098:	4b61      	ldr	r3, [pc, #388]	@ (8001220 <BMP180_GetPressure+0x218>)
 800109a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800109e:	461a      	mov	r2, r3
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fb03 f303 	mul.w	r3, r3, r3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	da01      	bge.n	80010ae <BMP180_GetPressure+0xa6>
 80010aa:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80010ae:	131b      	asrs	r3, r3, #12
 80010b0:	fb02 f303 	mul.w	r3, r2, r3
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	da01      	bge.n	80010bc <BMP180_GetPressure+0xb4>
 80010b8:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 80010bc:	12db      	asrs	r3, r3, #11
 80010be:	623b      	str	r3, [r7, #32]
	x2 = _bmp180_eeprom.BMP180_AC2 * b6 / (1 << 11);
 80010c0:	4b57      	ldr	r3, [pc, #348]	@ (8001220 <BMP180_GetPressure+0x218>)
 80010c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010c6:	461a      	mov	r2, r3
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	fb02 f303 	mul.w	r3, r2, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	da01      	bge.n	80010d6 <BMP180_GetPressure+0xce>
 80010d2:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 80010d6:	12db      	asrs	r3, r3, #11
 80010d8:	61fb      	str	r3, [r7, #28]
	int32_t x3 = x1 + x2;
 80010da:	6a3a      	ldr	r2, [r7, #32]
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	4413      	add	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
	int32_t b3 = (((_bmp180_eeprom.BMP180_AC1 * 4 + x3) << _bmp180_oss) + 2) / 4;
 80010e2:	4b4f      	ldr	r3, [pc, #316]	@ (8001220 <BMP180_GetPressure+0x218>)
 80010e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e8:	009a      	lsls	r2, r3, #2
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	4413      	add	r3, r2
 80010ee:	4a49      	ldr	r2, [pc, #292]	@ (8001214 <BMP180_GetPressure+0x20c>)
 80010f0:	7812      	ldrb	r2, [r2, #0]
 80010f2:	4093      	lsls	r3, r2
 80010f4:	3302      	adds	r3, #2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	da00      	bge.n	80010fc <BMP180_GetPressure+0xf4>
 80010fa:	3303      	adds	r3, #3
 80010fc:	109b      	asrs	r3, r3, #2
 80010fe:	60fb      	str	r3, [r7, #12]
	x1 = _bmp180_eeprom.BMP180_AC3 * b6 / (1 << 13);
 8001100:	4b47      	ldr	r3, [pc, #284]	@ (8001220 <BMP180_GetPressure+0x218>)
 8001102:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001106:	461a      	mov	r2, r3
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	fb02 f303 	mul.w	r3, r2, r3
 800110e:	2b00      	cmp	r3, #0
 8001110:	da02      	bge.n	8001118 <BMP180_GetPressure+0x110>
 8001112:	f503 53ff 	add.w	r3, r3, #8160	@ 0x1fe0
 8001116:	331f      	adds	r3, #31
 8001118:	135b      	asrs	r3, r3, #13
 800111a:	623b      	str	r3, [r7, #32]
	x2 = (_bmp180_eeprom.BMP180_B1 * (b6 * b6 / (1 << 12))) / (1 << 16);
 800111c:	4b40      	ldr	r3, [pc, #256]	@ (8001220 <BMP180_GetPressure+0x218>)
 800111e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001122:	461a      	mov	r2, r3
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	fb03 f303 	mul.w	r3, r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	da01      	bge.n	8001132 <BMP180_GetPressure+0x12a>
 800112e:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8001132:	131b      	asrs	r3, r3, #12
 8001134:	fb02 f303 	mul.w	r3, r2, r3
 8001138:	2b00      	cmp	r3, #0
 800113a:	da02      	bge.n	8001142 <BMP180_GetPressure+0x13a>
 800113c:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001140:	33ff      	adds	r3, #255	@ 0xff
 8001142:	141b      	asrs	r3, r3, #16
 8001144:	61fb      	str	r3, [r7, #28]
	x3 = ((x1 + x2) + 2) / 4;
 8001146:	6a3a      	ldr	r2, [r7, #32]
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	4413      	add	r3, r2
 800114c:	3302      	adds	r3, #2
 800114e:	2b00      	cmp	r3, #0
 8001150:	da00      	bge.n	8001154 <BMP180_GetPressure+0x14c>
 8001152:	3303      	adds	r3, #3
 8001154:	109b      	asrs	r3, r3, #2
 8001156:	613b      	str	r3, [r7, #16]
	uint32_t b4 = _bmp180_eeprom.BMP180_AC4 * (uint32_t) (x3 + 32768) / (1 << 15);
 8001158:	4b31      	ldr	r3, [pc, #196]	@ (8001220 <BMP180_GetPressure+0x218>)
 800115a:	88db      	ldrh	r3, [r3, #6]
 800115c:	461a      	mov	r2, r3
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001164:	fb02 f303 	mul.w	r3, r2, r3
 8001168:	0bdb      	lsrs	r3, r3, #15
 800116a:	60bb      	str	r3, [r7, #8]
	uint32_t b7 = ((uint32_t) up - b3) * (50000 >> _bmp180_oss);
 800116c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	4a28      	ldr	r2, [pc, #160]	@ (8001214 <BMP180_GetPressure+0x20c>)
 8001174:	7812      	ldrb	r2, [r2, #0]
 8001176:	4611      	mov	r1, r2
 8001178:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800117c:	410a      	asrs	r2, r1
 800117e:	fb02 f303 	mul.w	r3, r2, r3
 8001182:	607b      	str	r3, [r7, #4]
	int32_t p;
	if (b7 < 0x80000000)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	db06      	blt.n	8001198 <BMP180_GetPressure+0x190>
		p = (b7 * 2) / b4;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	005a      	lsls	r2, r3, #1
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	fbb2 f3f3 	udiv	r3, r2, r3
 8001194:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001196:	e005      	b.n	80011a4 <BMP180_GetPressure+0x19c>
	else
		p = (b7 / b4) * 2;
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	x1 = (p / (1 << 8)) * (p / (1 << 8));
 80011a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	da00      	bge.n	80011ac <BMP180_GetPressure+0x1a4>
 80011aa:	33ff      	adds	r3, #255	@ 0xff
 80011ac:	121b      	asrs	r3, r3, #8
 80011ae:	461a      	mov	r2, r3
 80011b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	da00      	bge.n	80011b8 <BMP180_GetPressure+0x1b0>
 80011b6:	33ff      	adds	r3, #255	@ 0xff
 80011b8:	121b      	asrs	r3, r3, #8
 80011ba:	fb02 f303 	mul.w	r3, r2, r3
 80011be:	623b      	str	r3, [r7, #32]
	x1 = (x1 * 3038) / (1 << 16);
 80011c0:	6a3b      	ldr	r3, [r7, #32]
 80011c2:	f640 32de 	movw	r2, #3038	@ 0xbde
 80011c6:	fb02 f303 	mul.w	r3, r2, r3
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	da02      	bge.n	80011d4 <BMP180_GetPressure+0x1cc>
 80011ce:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80011d2:	33ff      	adds	r3, #255	@ 0xff
 80011d4:	141b      	asrs	r3, r3, #16
 80011d6:	623b      	str	r3, [r7, #32]
	x2 = (-7357 * p) / (1 << 16);
 80011d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011da:	4a12      	ldr	r2, [pc, #72]	@ (8001224 <BMP180_GetPressure+0x21c>)
 80011dc:	fb02 f303 	mul.w	r3, r2, r3
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	da02      	bge.n	80011ea <BMP180_GetPressure+0x1e2>
 80011e4:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80011e8:	33ff      	adds	r3, #255	@ 0xff
 80011ea:	141b      	asrs	r3, r3, #16
 80011ec:	61fb      	str	r3, [r7, #28]
	p = p + (x1 + x2 + 3791) / (1 << 4);
 80011ee:	6a3a      	ldr	r2, [r7, #32]
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	4413      	add	r3, r2
 80011f4:	f603 63cf 	addw	r3, r3, #3791	@ 0xecf
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	da00      	bge.n	80011fe <BMP180_GetPressure+0x1f6>
 80011fc:	330f      	adds	r3, #15
 80011fe:	111b      	asrs	r3, r3, #4
 8001200:	461a      	mov	r2, r3
 8001202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001204:	4413      	add	r3, r2
 8001206:	62fb      	str	r3, [r7, #44]	@ 0x2c
	return p;
 8001208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800120a:	4618      	mov	r0, r3
 800120c:	3730      	adds	r7, #48	@ 0x30
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	2000028a 	.word	0x2000028a
 8001218:	0800bd30 	.word	0x0800bd30
 800121c:	0800bd34 	.word	0x0800bd34
 8001220:	20000274 	.word	0x20000274
 8001224:	ffffe343 	.word	0xffffe343

08001228 <BMP180_GetUT>:

int32_t BMP180_GetUT(void){
 8001228:	b598      	push	{r3, r4, r7, lr}
 800122a:	af00      	add	r7, sp, #0
	return (BMP180_ReadReg(BMP180_MSB_REG) << 8) | BMP180_ReadReg(BMP180_LSB_REG);
 800122c:	20f6      	movs	r0, #246	@ 0xf6
 800122e:	f7ff fe69 	bl	8000f04 <BMP180_ReadReg>
 8001232:	4603      	mov	r3, r0
 8001234:	021c      	lsls	r4, r3, #8
 8001236:	20f7      	movs	r0, #247	@ 0xf7
 8001238:	f7ff fe64 	bl	8000f04 <BMP180_ReadReg>
 800123c:	4603      	mov	r3, r0
 800123e:	4323      	orrs	r3, r4
}
 8001240:	4618      	mov	r0, r3
 8001242:	bd98      	pop	{r3, r4, r7, pc}

08001244 <BMP180_GetUP>:

int32_t BMP180_GetUP(void){
 8001244:	b598      	push	{r3, r4, r7, lr}
 8001246:	af00      	add	r7, sp, #0
	return ((BMP180_ReadReg(BMP180_MSB_REG) << 16) | (BMP180_ReadReg(BMP180_LSB_REG) << 8) | BMP180_ReadReg(BMP180_XLSB_REG)) >> (8 - _bmp180_oss);
 8001248:	20f6      	movs	r0, #246	@ 0xf6
 800124a:	f7ff fe5b 	bl	8000f04 <BMP180_ReadReg>
 800124e:	4603      	mov	r3, r0
 8001250:	041c      	lsls	r4, r3, #16
 8001252:	20f7      	movs	r0, #247	@ 0xf7
 8001254:	f7ff fe56 	bl	8000f04 <BMP180_ReadReg>
 8001258:	4603      	mov	r3, r0
 800125a:	021b      	lsls	r3, r3, #8
 800125c:	431c      	orrs	r4, r3
 800125e:	20f8      	movs	r0, #248	@ 0xf8
 8001260:	f7ff fe50 	bl	8000f04 <BMP180_ReadReg>
 8001264:	4603      	mov	r3, r0
 8001266:	ea44 0203 	orr.w	r2, r4, r3
 800126a:	4b04      	ldr	r3, [pc, #16]	@ (800127c <BMP180_GetUP+0x38>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	f1c3 0308 	rsb	r3, r3, #8
 8001272:	fa42 f303 	asr.w	r3, r2, r3
}
 8001276:	4618      	mov	r0, r3
 8001278:	bd98      	pop	{r3, r4, r7, pc}
 800127a:	bf00      	nop
 800127c:	2000028a 	.word	0x2000028a

08001280 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0

}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr

0800128c <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
return 0;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr
	...

0800129c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4a06      	ldr	r2, [pc, #24]	@ (80012c4 <vApplicationGetIdleTaskMemory+0x28>)
 80012ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	4a05      	ldr	r2, [pc, #20]	@ (80012c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80012b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2280      	movs	r2, #128	@ 0x80
 80012b8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80012ba:	bf00      	nop
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr
 80012c4:	2000028c 	.word	0x2000028c
 80012c8:	20000338 	.word	0x20000338

080012cc <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 80012d6:	4a38      	ldr	r2, [pc, #224]	@ (80013b8 <HD44780_Init+0xec>)
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 80012dc:	4b37      	ldr	r3, [pc, #220]	@ (80013bc <HD44780_Init+0xf0>)
 80012de:	2208      	movs	r2, #8
 80012e0:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80012e2:	4b37      	ldr	r3, [pc, #220]	@ (80013c0 <HD44780_Init+0xf4>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 80012e8:	4b33      	ldr	r3, [pc, #204]	@ (80013b8 <HD44780_Init+0xec>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d907      	bls.n	8001300 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 80012f0:	4b33      	ldr	r3, [pc, #204]	@ (80013c0 <HD44780_Init+0xf4>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	f043 0308 	orr.w	r3, r3, #8
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	4b31      	ldr	r3, [pc, #196]	@ (80013c0 <HD44780_Init+0xf4>)
 80012fc:	701a      	strb	r2, [r3, #0]
 80012fe:	e006      	b.n	800130e <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8001300:	4b2f      	ldr	r3, [pc, #188]	@ (80013c0 <HD44780_Init+0xf4>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	f043 0304 	orr.w	r3, r3, #4
 8001308:	b2da      	uxtb	r2, r3
 800130a:	4b2d      	ldr	r3, [pc, #180]	@ (80013c0 <HD44780_Init+0xf4>)
 800130c:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800130e:	f000 f985 	bl	800161c <DelayInit>
  HAL_Delay(50);
 8001312:	2032      	movs	r0, #50	@ 0x32
 8001314:	f001 fd5e 	bl	8002dd4 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8001318:	4b28      	ldr	r3, [pc, #160]	@ (80013bc <HD44780_Init+0xf0>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f000 f943 	bl	80015a8 <ExpanderWrite>
  HAL_Delay(1000);
 8001322:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001326:	f001 fd55 	bl	8002dd4 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 800132a:	2030      	movs	r0, #48	@ 0x30
 800132c:	f000 f92b 	bl	8001586 <Write4Bits>
  DelayUS(4500);
 8001330:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001334:	f000 f99a 	bl	800166c <DelayUS>

  Write4Bits(0x03 << 4);
 8001338:	2030      	movs	r0, #48	@ 0x30
 800133a:	f000 f924 	bl	8001586 <Write4Bits>
  DelayUS(4500);
 800133e:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001342:	f000 f993 	bl	800166c <DelayUS>

  Write4Bits(0x03 << 4);
 8001346:	2030      	movs	r0, #48	@ 0x30
 8001348:	f000 f91d 	bl	8001586 <Write4Bits>
  DelayUS(4500);
 800134c:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001350:	f000 f98c 	bl	800166c <DelayUS>

  Write4Bits(0x02 << 4);
 8001354:	2020      	movs	r0, #32
 8001356:	f000 f916 	bl	8001586 <Write4Bits>
  DelayUS(100);
 800135a:	2064      	movs	r0, #100	@ 0x64
 800135c:	f000 f986 	bl	800166c <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8001360:	4b17      	ldr	r3, [pc, #92]	@ (80013c0 <HD44780_Init+0xf4>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	f043 0320 	orr.w	r3, r3, #32
 8001368:	b2db      	uxtb	r3, r3
 800136a:	4618      	mov	r0, r3
 800136c:	f000 f8ce 	bl	800150c <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001370:	4b14      	ldr	r3, [pc, #80]	@ (80013c4 <HD44780_Init+0xf8>)
 8001372:	2204      	movs	r2, #4
 8001374:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8001376:	f000 f875 	bl	8001464 <HD44780_Display>
  HD44780_Clear();
 800137a:	f000 f82b 	bl	80013d4 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800137e:	4b12      	ldr	r3, [pc, #72]	@ (80013c8 <HD44780_Init+0xfc>)
 8001380:	2202      	movs	r2, #2
 8001382:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8001384:	4b10      	ldr	r3, [pc, #64]	@ (80013c8 <HD44780_Init+0xfc>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	f043 0304 	orr.w	r3, r3, #4
 800138c:	b2db      	uxtb	r3, r3
 800138e:	4618      	mov	r0, r3
 8001390:	f000 f8bc 	bl	800150c <SendCommand>
  DelayUS(4500);
 8001394:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001398:	f000 f968 	bl	800166c <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 800139c:	490b      	ldr	r1, [pc, #44]	@ (80013cc <HD44780_Init+0x100>)
 800139e:	2000      	movs	r0, #0
 80013a0:	f000 f876 	bl	8001490 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80013a4:	490a      	ldr	r1, [pc, #40]	@ (80013d0 <HD44780_Init+0x104>)
 80013a6:	2001      	movs	r0, #1
 80013a8:	f000 f872 	bl	8001490 <HD44780_CreateSpecialChar>

  HD44780_Home();
 80013ac:	f000 f81d 	bl	80013ea <HD44780_Home>
}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	2000053b 	.word	0x2000053b
 80013bc:	2000053c 	.word	0x2000053c
 80013c0:	20000538 	.word	0x20000538
 80013c4:	20000539 	.word	0x20000539
 80013c8:	2000053a 	.word	0x2000053a
 80013cc:	20000000 	.word	0x20000000
 80013d0:	20000008 	.word	0x20000008

080013d4 <HD44780_Clear>:

void HD44780_Clear()
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 80013d8:	2001      	movs	r0, #1
 80013da:	f000 f897 	bl	800150c <SendCommand>
  DelayUS(2000);
 80013de:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80013e2:	f000 f943 	bl	800166c <DelayUS>
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HD44780_Home>:

void HD44780_Home()
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80013ee:	2002      	movs	r0, #2
 80013f0:	f000 f88c 	bl	800150c <SendCommand>
  DelayUS(2000);
 80013f4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80013f8:	f000 f938 	bl	800166c <DelayUS>
}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}

08001400 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8001400:	b590      	push	{r4, r7, lr}
 8001402:	b087      	sub	sp, #28
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	460a      	mov	r2, r1
 800140a:	71fb      	strb	r3, [r7, #7]
 800140c:	4613      	mov	r3, r2
 800140e:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8001410:	4b12      	ldr	r3, [pc, #72]	@ (800145c <HD44780_SetCursor+0x5c>)
 8001412:	f107 0408 	add.w	r4, r7, #8
 8001416:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001418:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 800141c:	4b10      	ldr	r3, [pc, #64]	@ (8001460 <HD44780_SetCursor+0x60>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	79ba      	ldrb	r2, [r7, #6]
 8001422:	429a      	cmp	r2, r3
 8001424:	d303      	bcc.n	800142e <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8001426:	4b0e      	ldr	r3, [pc, #56]	@ (8001460 <HD44780_SetCursor+0x60>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	3b01      	subs	r3, #1
 800142c:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800142e:	79bb      	ldrb	r3, [r7, #6]
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	3318      	adds	r3, #24
 8001434:	443b      	add	r3, r7
 8001436:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800143a:	b2da      	uxtb	r2, r3
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	4413      	add	r3, r2
 8001440:	b2db      	uxtb	r3, r3
 8001442:	b25b      	sxtb	r3, r3
 8001444:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001448:	b25b      	sxtb	r3, r3
 800144a:	b2db      	uxtb	r3, r3
 800144c:	4618      	mov	r0, r3
 800144e:	f000 f85d 	bl	800150c <SendCommand>
}
 8001452:	bf00      	nop
 8001454:	371c      	adds	r7, #28
 8001456:	46bd      	mov	sp, r7
 8001458:	bd90      	pop	{r4, r7, pc}
 800145a:	bf00      	nop
 800145c:	0800bb70 	.word	0x0800bb70
 8001460:	2000053b 	.word	0x2000053b

08001464 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8001468:	4b08      	ldr	r3, [pc, #32]	@ (800148c <HD44780_Display+0x28>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	f043 0304 	orr.w	r3, r3, #4
 8001470:	b2da      	uxtb	r2, r3
 8001472:	4b06      	ldr	r3, [pc, #24]	@ (800148c <HD44780_Display+0x28>)
 8001474:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8001476:	4b05      	ldr	r3, [pc, #20]	@ (800148c <HD44780_Display+0x28>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	f043 0308 	orr.w	r3, r3, #8
 800147e:	b2db      	uxtb	r3, r3
 8001480:	4618      	mov	r0, r3
 8001482:	f000 f843 	bl	800150c <SendCommand>
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000539 	.word	0x20000539

08001490 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	6039      	str	r1, [r7, #0]
 800149a:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	b25b      	sxtb	r3, r3
 80014aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014ae:	b25b      	sxtb	r3, r3
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	4618      	mov	r0, r3
 80014b4:	f000 f82a 	bl	800150c <SendCommand>
  for (int i=0; i<8; i++)
 80014b8:	2300      	movs	r3, #0
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	e009      	b.n	80014d2 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	4413      	add	r3, r2
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 f82e 	bl	8001528 <SendChar>
  for (int i=0; i<8; i++)
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	3301      	adds	r3, #1
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2b07      	cmp	r3, #7
 80014d6:	ddf2      	ble.n	80014be <HD44780_CreateSpecialChar+0x2e>
  }
}
 80014d8:	bf00      	nop
 80014da:	bf00      	nop
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80014ea:	e006      	b.n	80014fa <HD44780_PrintStr+0x18>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	1c5a      	adds	r2, r3, #1
 80014f0:	607a      	str	r2, [r7, #4]
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f000 f817 	bl	8001528 <SendChar>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1f4      	bne.n	80014ec <HD44780_PrintStr+0xa>
}
 8001502:	bf00      	nop
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	2100      	movs	r1, #0
 800151a:	4618      	mov	r0, r3
 800151c:	f000 f812 	bl	8001544 <Send>
}
 8001520:	bf00      	nop
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <SendChar>:

static void SendChar(uint8_t ch)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	2101      	movs	r1, #1
 8001536:	4618      	mov	r0, r3
 8001538:	f000 f804 	bl	8001544 <Send>
}
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	460a      	mov	r2, r1
 800154e:	71fb      	strb	r3, [r7, #7]
 8001550:	4613      	mov	r3, r2
 8001552:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	f023 030f 	bic.w	r3, r3, #15
 800155a:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	011b      	lsls	r3, r3, #4
 8001560:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8001562:	7bfa      	ldrb	r2, [r7, #15]
 8001564:	79bb      	ldrb	r3, [r7, #6]
 8001566:	4313      	orrs	r3, r2
 8001568:	b2db      	uxtb	r3, r3
 800156a:	4618      	mov	r0, r3
 800156c:	f000 f80b 	bl	8001586 <Write4Bits>
  Write4Bits((lownib)|mode);
 8001570:	7bba      	ldrb	r2, [r7, #14]
 8001572:	79bb      	ldrb	r3, [r7, #6]
 8001574:	4313      	orrs	r3, r2
 8001576:	b2db      	uxtb	r3, r3
 8001578:	4618      	mov	r0, r3
 800157a:	f000 f804 	bl	8001586 <Write4Bits>
}
 800157e:	bf00      	nop
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	4603      	mov	r3, r0
 800158e:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	4618      	mov	r0, r3
 8001594:	f000 f808 	bl	80015a8 <ExpanderWrite>
  PulseEnable(value);
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	4618      	mov	r0, r3
 800159c:	f000 f820 	bl	80015e0 <PulseEnable>
}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af02      	add	r7, sp, #8
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 80015b2:	4b09      	ldr	r3, [pc, #36]	@ (80015d8 <ExpanderWrite+0x30>)
 80015b4:	781a      	ldrb	r2, [r3, #0]
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80015be:	f107 020f 	add.w	r2, r7, #15
 80015c2:	230a      	movs	r3, #10
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	2301      	movs	r3, #1
 80015c8:	214e      	movs	r1, #78	@ 0x4e
 80015ca:	4804      	ldr	r0, [pc, #16]	@ (80015dc <ExpanderWrite+0x34>)
 80015cc:	f002 f818 	bl	8003600 <HAL_I2C_Master_Transmit>
}
 80015d0:	bf00      	nop
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	2000053c 	.word	0x2000053c
 80015dc:	20000540 	.word	0x20000540

080015e0 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	f043 0304 	orr.w	r3, r3, #4
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff ffd8 	bl	80015a8 <ExpanderWrite>
  DelayUS(20);
 80015f8:	2014      	movs	r0, #20
 80015fa:	f000 f837 	bl	800166c <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	f023 0304 	bic.w	r3, r3, #4
 8001604:	b2db      	uxtb	r3, r3
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff ffce 	bl	80015a8 <ExpanderWrite>
  DelayUS(20);
 800160c:	2014      	movs	r0, #20
 800160e:	f000 f82d 	bl	800166c <DelayUS>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <DelayInit>:

static void DelayInit(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001620:	4b10      	ldr	r3, [pc, #64]	@ (8001664 <DelayInit+0x48>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	4a0f      	ldr	r2, [pc, #60]	@ (8001664 <DelayInit+0x48>)
 8001626:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800162a:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 800162c:	4b0d      	ldr	r3, [pc, #52]	@ (8001664 <DelayInit+0x48>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	4a0c      	ldr	r2, [pc, #48]	@ (8001664 <DelayInit+0x48>)
 8001632:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001636:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001638:	4b0b      	ldr	r3, [pc, #44]	@ (8001668 <DelayInit+0x4c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a0a      	ldr	r2, [pc, #40]	@ (8001668 <DelayInit+0x4c>)
 800163e:	f023 0301 	bic.w	r3, r3, #1
 8001642:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001644:	4b08      	ldr	r3, [pc, #32]	@ (8001668 <DelayInit+0x4c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a07      	ldr	r2, [pc, #28]	@ (8001668 <DelayInit+0x4c>)
 800164a:	f043 0301 	orr.w	r3, r3, #1
 800164e:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8001650:	4b05      	ldr	r3, [pc, #20]	@ (8001668 <DelayInit+0x4c>)
 8001652:	2200      	movs	r2, #0
 8001654:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8001656:	bf00      	nop
  __ASM volatile ("NOP");
 8001658:	bf00      	nop
  __ASM volatile ("NOP");
 800165a:	bf00      	nop
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr
 8001664:	e000edf0 	.word	0xe000edf0
 8001668:	e0001000 	.word	0xe0001000

0800166c <DelayUS>:

static void DelayUS(uint32_t us) {
 800166c:	b480      	push	{r7}
 800166e:	b087      	sub	sp, #28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8001674:	4b0d      	ldr	r3, [pc, #52]	@ (80016ac <DelayUS+0x40>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a0d      	ldr	r2, [pc, #52]	@ (80016b0 <DelayUS+0x44>)
 800167a:	fba2 2303 	umull	r2, r3, r2, r3
 800167e:	0c9a      	lsrs	r2, r3, #18
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	fb02 f303 	mul.w	r3, r2, r3
 8001686:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8001688:	4b0a      	ldr	r3, [pc, #40]	@ (80016b4 <DelayUS+0x48>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800168e:	4b09      	ldr	r3, [pc, #36]	@ (80016b4 <DelayUS+0x48>)
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	697a      	ldr	r2, [r7, #20]
 800169c:	429a      	cmp	r2, r3
 800169e:	d8f6      	bhi.n	800168e <DelayUS+0x22>
}
 80016a0:	bf00      	nop
 80016a2:	bf00      	nop
 80016a4:	371c      	adds	r7, #28
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr
 80016ac:	2000007c 	.word	0x2000007c
 80016b0:	431bde83 	.word	0x431bde83
 80016b4:	e0001000 	.word	0xe0001000

080016b8 <parse_data>:
    uint8_t Data[MAX_DATA_SIZE];  // Mảng dữ liệu (Data)
    uint16_t Crc;      // CRC
    uint16_t Stop;     // Stop (carriage return + newline)
    uint16_t Len;      // Chiều dài dữ liệu (Data length)
} DataStruct;
void parse_data(const char *input, DataStruct *data) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b088      	sub	sp, #32
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
    // Xác nhận ký tự Start
    char temp[10] = {0};
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	f107 0310 	add.w	r3, r7, #16
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	809a      	strh	r2, [r3, #4]
//    data->Start = input[0];  // Dấu ':'

    memset(data->Data,0,MAX_DATA_SIZE);
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	3303      	adds	r3, #3
 80016d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016d8:	2100      	movs	r1, #0
 80016da:	4618      	mov	r0, r3
 80016dc:	f008 f91b 	bl	8009916 <memset>
    strncpy(temp, input, 2);
 80016e0:	f107 030c 	add.w	r3, r7, #12
 80016e4:	2202      	movs	r2, #2
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f008 f91c 	bl	8009926 <strncpy>
    data->Start = (uint8_t)strtol(temp, NULL, 16);
 80016ee:	f107 030c 	add.w	r3, r7, #12
 80016f2:	2210      	movs	r2, #16
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f007 fb68 	bl	8008dcc <strtol>
 80016fc:	4603      	mov	r3, r0
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	701a      	strb	r2, [r3, #0]

    // Chuyển đổi Addr
    strncpy(temp, input + 2, 2);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	1c99      	adds	r1, r3, #2
 8001708:	f107 030c 	add.w	r3, r7, #12
 800170c:	2202      	movs	r2, #2
 800170e:	4618      	mov	r0, r3
 8001710:	f008 f909 	bl	8009926 <strncpy>
    data->Addr = (uint8_t)strtol(temp, NULL, 16);
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	2210      	movs	r2, #16
 800171a:	2100      	movs	r1, #0
 800171c:	4618      	mov	r0, r3
 800171e:	f007 fb55 	bl	8008dcc <strtol>
 8001722:	4603      	mov	r3, r0
 8001724:	b2da      	uxtb	r2, r3
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	705a      	strb	r2, [r3, #1]

    // Chuyển đổi Code
    strncpy(temp, input + 4, 2);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	1d19      	adds	r1, r3, #4
 800172e:	f107 030c 	add.w	r3, r7, #12
 8001732:	2202      	movs	r2, #2
 8001734:	4618      	mov	r0, r3
 8001736:	f008 f8f6 	bl	8009926 <strncpy>
    data->Code = (uint8_t)strtol(temp, NULL, 16);
 800173a:	f107 030c 	add.w	r3, r7, #12
 800173e:	2210      	movs	r2, #16
 8001740:	2100      	movs	r1, #0
 8001742:	4618      	mov	r0, r3
 8001744:	f007 fb42 	bl	8008dcc <strtol>
 8001748:	4603      	mov	r3, r0
 800174a:	b2da      	uxtb	r2, r3
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	709a      	strb	r2, [r3, #2]

    // Tách phần Data
    size_t dataIndex = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	61fb      	str	r3, [r7, #28]
    size_t inputIndex = 6; // Vị trí bắt đầu dữ liệu (sau Addr và Code)
 8001754:	2306      	movs	r3, #6
 8001756:	61bb      	str	r3, [r7, #24]
    while (input[inputIndex] != '\r' && input[inputIndex] != '\n' && input[inputIndex] != '\0') {
 8001758:	e01b      	b.n	8001792 <parse_data+0xda>
        strncpy(temp, input + inputIndex, 2);
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	18d1      	adds	r1, r2, r3
 8001760:	f107 030c 	add.w	r3, r7, #12
 8001764:	2202      	movs	r2, #2
 8001766:	4618      	mov	r0, r3
 8001768:	f008 f8dd 	bl	8009926 <strncpy>
        data->Data[dataIndex++] = (uint8_t)strtol(temp, NULL, 16);
 800176c:	f107 030c 	add.w	r3, r7, #12
 8001770:	2210      	movs	r2, #16
 8001772:	2100      	movs	r1, #0
 8001774:	4618      	mov	r0, r3
 8001776:	f007 fb29 	bl	8008dcc <strtol>
 800177a:	4601      	mov	r1, r0
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	1c5a      	adds	r2, r3, #1
 8001780:	61fa      	str	r2, [r7, #28]
 8001782:	b2c9      	uxtb	r1, r1
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	4413      	add	r3, r2
 8001788:	460a      	mov	r2, r1
 800178a:	70da      	strb	r2, [r3, #3]
        inputIndex += 2;
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	3302      	adds	r3, #2
 8001790:	61bb      	str	r3, [r7, #24]
    while (input[inputIndex] != '\r' && input[inputIndex] != '\n' && input[inputIndex] != '\0') {
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	4413      	add	r3, r2
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b0d      	cmp	r3, #13
 800179c:	d00b      	beq.n	80017b6 <parse_data+0xfe>
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	4413      	add	r3, r2
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b0a      	cmp	r3, #10
 80017a8:	d005      	beq.n	80017b6 <parse_data+0xfe>
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	4413      	add	r3, r2
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1d1      	bne.n	800175a <parse_data+0xa2>
    }
    data->Len = dataIndex - 4; // Lưu chiều dài của Data
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	3b04      	subs	r3, #4
 80017bc:	b29a      	uxth	r2, r3
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108

    // Chuyển đổi CRC
    strncpy(temp, input + inputIndex - 8, 4);
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	3b08      	subs	r3, #8
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	18d1      	adds	r1, r2, r3
 80017cc:	f107 030c 	add.w	r3, r7, #12
 80017d0:	2204      	movs	r2, #4
 80017d2:	4618      	mov	r0, r3
 80017d4:	f008 f8a7 	bl	8009926 <strncpy>
    temp[4] = '\0';
 80017d8:	2300      	movs	r3, #0
 80017da:	743b      	strb	r3, [r7, #16]
    data->Crc = (uint16_t)strtol(temp, NULL, 16);
 80017dc:	f107 030c 	add.w	r3, r7, #12
 80017e0:	2210      	movs	r2, #16
 80017e2:	2100      	movs	r1, #0
 80017e4:	4618      	mov	r0, r3
 80017e6:	f007 faf1 	bl	8008dcc <strtol>
 80017ea:	4603      	mov	r3, r0
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104

    // Chuyển đổi Stop
    data->Stop = ((uint16_t)input[inputIndex] << 8) | input[inputIndex + 1];
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	4413      	add	r3, r2
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	021b      	lsls	r3, r3, #8
 80017fe:	b21a      	sxth	r2, r3
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	3301      	adds	r3, #1
 8001804:	6879      	ldr	r1, [r7, #4]
 8001806:	440b      	add	r3, r1
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	b21b      	sxth	r3, r3
 800180c:	4313      	orrs	r3, r2
 800180e:	b21b      	sxth	r3, r3
 8001810:	b29a      	uxth	r2, r3
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
}
 8001818:	bf00      	nop
 800181a:	3720      	adds	r7, #32
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <calculate_crc>:

uint16_t calculate_crc(uint8_t *data, size_t length) {
 8001820:	b480      	push	{r7}
 8001822:	b087      	sub	sp, #28
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
    uint16_t crc = 0xFFFF;  // Giá trị bắt đầu CRC-16 (0xFFFF)
 800182a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800182e:	82fb      	strh	r3, [r7, #22]

    for (size_t i = 0; i < length; i++) {
 8001830:	2300      	movs	r3, #0
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	e022      	b.n	800187c <calculate_crc+0x5c>
        crc ^= data[i];  // XOR byte hiện tại với CRC
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	4413      	add	r3, r2
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	461a      	mov	r2, r3
 8001840:	8afb      	ldrh	r3, [r7, #22]
 8001842:	4053      	eors	r3, r2
 8001844:	82fb      	strh	r3, [r7, #22]
        for (uint8_t bit = 0; bit < 8; bit++) {  // Lặp qua từng bit
 8001846:	2300      	movs	r3, #0
 8001848:	73fb      	strb	r3, [r7, #15]
 800184a:	e011      	b.n	8001870 <calculate_crc+0x50>
            if (crc & 0x0001) {  // Nếu bit thấp nhất là 1
 800184c:	8afb      	ldrh	r3, [r7, #22]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d006      	beq.n	8001864 <calculate_crc+0x44>
                crc = (crc >> 1) ^ 0xA001;  // Dịch sang phải và XOR với 0xA001
 8001856:	8afb      	ldrh	r3, [r7, #22]
 8001858:	085b      	lsrs	r3, r3, #1
 800185a:	b29a      	uxth	r2, r3
 800185c:	4b14      	ldr	r3, [pc, #80]	@ (80018b0 <calculate_crc+0x90>)
 800185e:	4053      	eors	r3, r2
 8001860:	82fb      	strh	r3, [r7, #22]
 8001862:	e002      	b.n	800186a <calculate_crc+0x4a>
            } else {
                crc >>= 1;  // Chỉ dịch CRC sang phải nếu bit thấp nhất là 0
 8001864:	8afb      	ldrh	r3, [r7, #22]
 8001866:	085b      	lsrs	r3, r3, #1
 8001868:	82fb      	strh	r3, [r7, #22]
        for (uint8_t bit = 0; bit < 8; bit++) {  // Lặp qua từng bit
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	3301      	adds	r3, #1
 800186e:	73fb      	strb	r3, [r7, #15]
 8001870:	7bfb      	ldrb	r3, [r7, #15]
 8001872:	2b07      	cmp	r3, #7
 8001874:	d9ea      	bls.n	800184c <calculate_crc+0x2c>
    for (size_t i = 0; i < length; i++) {
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	3301      	adds	r3, #1
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	d3d8      	bcc.n	8001836 <calculate_crc+0x16>
            }
        }
    }
    int16_t L = crc&0xFF;
 8001884:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001888:	b2db      	uxtb	r3, r3
 800188a:	81bb      	strh	r3, [r7, #12]
    int16_t H = (crc>>8)&0xFF;
 800188c:	8afb      	ldrh	r3, [r7, #22]
 800188e:	0a1b      	lsrs	r3, r3, #8
 8001890:	b29b      	uxth	r3, r3
 8001892:	817b      	strh	r3, [r7, #10]
    return (L<<8)|H;  // Trả về CRC tính toán
 8001894:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001898:	021b      	lsls	r3, r3, #8
 800189a:	b21a      	sxth	r2, r3
 800189c:	897b      	ldrh	r3, [r7, #10]
 800189e:	4313      	orrs	r3, r2
 80018a0:	b21b      	sxth	r3, r3
 80018a2:	b29b      	uxth	r3, r3
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	371c      	adds	r7, #28
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	ffffa001 	.word	0xffffa001

080018b4 <check_crc>:

uint16_t check_crc(DataStruct *data) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b0c6      	sub	sp, #280	@ 0x118
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80018be:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80018c2:	6018      	str	r0, [r3, #0]
    // Tạo mảng chứa dữ liệu cần tính CRC
    uint8_t temp_data[MAX_DATA_SIZE + 3];  // Start, Addr, Code, Data (tối đa)

    // Sao chép các thành phần dữ liệu vào mảng tạm
    size_t index = 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    temp_data[index++] = data->Start;  // Start
 80018ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80018ce:	1c5a      	adds	r2, r3, #1
 80018d0:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 80018d4:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80018d8:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 80018dc:	6812      	ldr	r2, [r2, #0]
 80018de:	7811      	ldrb	r1, [r2, #0]
 80018e0:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80018e4:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80018e8:	54d1      	strb	r1, [r2, r3]
    temp_data[index++] = data->Addr;   // Addr
 80018ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80018ee:	1c5a      	adds	r2, r3, #1
 80018f0:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 80018f4:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80018f8:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 80018fc:	6812      	ldr	r2, [r2, #0]
 80018fe:	7851      	ldrb	r1, [r2, #1]
 8001900:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8001904:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001908:	54d1      	strb	r1, [r2, r3]
    temp_data[index++] = data->Code;   // Code
 800190a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800190e:	1c5a      	adds	r2, r3, #1
 8001910:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 8001914:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8001918:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 800191c:	6812      	ldr	r2, [r2, #0]
 800191e:	7891      	ldrb	r1, [r2, #2]
 8001920:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8001924:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001928:	54d1      	strb	r1, [r2, r3]

    // Sao chép dữ liệu vào mảng
    memcpy(&temp_data[index], data->Data, data->Len);
 800192a:	f107 020c 	add.w	r2, r7, #12
 800192e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001932:	18d0      	adds	r0, r2, r3
 8001934:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001938:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	1cd9      	adds	r1, r3, #3
 8001940:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001944:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 800194e:	461a      	mov	r2, r3
 8001950:	f008 f8d7 	bl	8009b02 <memcpy>

    // Tính toán CRC cho dữ liệu
    uint16_t calculated_crc = calculate_crc(temp_data, index + data->Len);
 8001954:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001958:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8001962:	461a      	mov	r2, r3
 8001964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001968:	441a      	add	r2, r3
 800196a:	f107 030c 	add.w	r3, r7, #12
 800196e:	4611      	mov	r1, r2
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff55 	bl	8001820 <calculate_crc>
 8001976:	4603      	mov	r3, r0
 8001978:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112

    // So sánh CRC tính toán với CRC đã cho
    if (calculated_crc == data->Crc) {
 800197c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001980:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 800198a:	f8b7 2112 	ldrh.w	r2, [r7, #274]	@ 0x112
 800198e:	429a      	cmp	r2, r3
 8001990:	d102      	bne.n	8001998 <check_crc+0xe4>
        return calculated_crc;  // CRC hợp lệ
 8001992:	f8b7 3112 	ldrh.w	r3, [r7, #274]	@ 0x112
 8001996:	e001      	b.n	800199c <check_crc+0xe8>
    } else {
        return calculated_crc;  // CRC không hợp lệ
 8001998:	f8b7 3112 	ldrh.w	r3, [r7, #274]	@ 0x112
    }
}
 800199c:	4618      	mov	r0, r3
 800199e:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <data_struct_to_string>:
    output[len * 2] = '\0'; // Kết thúc chuỗi
    return len * 2;
}


void data_struct_to_string(DataStruct* data, char* output) {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af02      	add	r7, sp, #8
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
    // Bắt đầu chuỗi với ký tự Start
    sprintf(output, "%02X%02X%02X", data->Start, data->Addr, data->Code);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	461a      	mov	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	785b      	ldrb	r3, [r3, #1]
 80019bc:	4619      	mov	r1, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	789b      	ldrb	r3, [r3, #2]
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	460b      	mov	r3, r1
 80019c6:	491f      	ldr	r1, [pc, #124]	@ (8001a44 <data_struct_to_string+0x9c>)
 80019c8:	6838      	ldr	r0, [r7, #0]
 80019ca:	f007 ff27 	bl	800981c <siprintf>

    // Thêm Addr và Code vào chuỗi
//    sprintf(output + strlen(output), "");

    // Thêm Data vào chuỗi
    for (int i = 0; i < data->Len; i++) {
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	e011      	b.n	80019f8 <data_struct_to_string+0x50>
        sprintf(output + strlen(output), "%02X", data->Data[i]);
 80019d4:	6838      	ldr	r0, [r7, #0]
 80019d6:	f7fe fbbb 	bl	8000150 <strlen>
 80019da:	4602      	mov	r2, r0
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	1898      	adds	r0, r3, r2
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	4413      	add	r3, r2
 80019e6:	3303      	adds	r3, #3
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	461a      	mov	r2, r3
 80019ec:	4916      	ldr	r1, [pc, #88]	@ (8001a48 <data_struct_to_string+0xa0>)
 80019ee:	f007 ff15 	bl	800981c <siprintf>
    for (int i = 0; i < data->Len; i++) {
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	3301      	adds	r3, #1
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 80019fe:	461a      	mov	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4293      	cmp	r3, r2
 8001a04:	dbe6      	blt.n	80019d4 <data_struct_to_string+0x2c>
    }

    // Thêm CRC vào chuỗi
    sprintf(output + strlen(output), "%04X", data->Crc);
 8001a06:	6838      	ldr	r0, [r7, #0]
 8001a08:	f7fe fba2 	bl	8000150 <strlen>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	1898      	adds	r0, r3, r2
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8001a18:	461a      	mov	r2, r3
 8001a1a:	490c      	ldr	r1, [pc, #48]	@ (8001a4c <data_struct_to_string+0xa4>)
 8001a1c:	f007 fefe 	bl	800981c <siprintf>

    // Thêm Stop (\r\n) vào chuỗi
    sprintf(output + strlen(output), "%04X",data->Stop);
 8001a20:	6838      	ldr	r0, [r7, #0]
 8001a22:	f7fe fb95 	bl	8000150 <strlen>
 8001a26:	4602      	mov	r2, r0
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	1898      	adds	r0, r3, r2
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 8001a32:	461a      	mov	r2, r3
 8001a34:	4905      	ldr	r1, [pc, #20]	@ (8001a4c <data_struct_to_string+0xa4>)
 8001a36:	f007 fef1 	bl	800981c <siprintf>
}
 8001a3a:	bf00      	nop
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	0800bb88 	.word	0x0800bb88
 8001a48:	0800bb80 	.word	0x0800bb80
 8001a4c:	0800bb98 	.word	0x0800bb98

08001a50 <convert_to_char>:
    }

    return position;
}

char convert_to_char(uint16_t num) {
 8001a50:	b480      	push	{r7}
 8001a52:	b087      	sub	sp, #28
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	80fb      	strh	r3, [r7, #6]
    unsigned int count = 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
    int position = -1;
 8001a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a62:	613b      	str	r3, [r7, #16]

    // Kiểm tra từng bit trong số 12 bit
    for (int i = 0; i < 12; i++) {
 8001a64:	2300      	movs	r3, #0
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	e010      	b.n	8001a8c <convert_to_char+0x3c>
        if (num & ArrConv[i]) { // Nếu bit này là 1
 8001a6a:	4a11      	ldr	r2, [pc, #68]	@ (8001ab0 <convert_to_char+0x60>)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001a72:	88fb      	ldrh	r3, [r7, #6]
 8001a74:	4013      	ands	r3, r2
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d004      	beq.n	8001a86 <convert_to_char+0x36>
            count++;
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	617b      	str	r3, [r7, #20]
            position = i;  // Lưu lại vị trí của bit
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < 12; i++) {
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2b0b      	cmp	r3, #11
 8001a90:	ddeb      	ble.n	8001a6a <convert_to_char+0x1a>
        }
    }

    // Nếu có nhiều hơn 1 bit bằng 1, trả về '\0'
    if (count != 1) {
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d001      	beq.n	8001a9c <convert_to_char+0x4c>
        return '\0';
 8001a98:	2300      	movs	r3, #0
 8001a9a:	e003      	b.n	8001aa4 <convert_to_char+0x54>
    }

    // Nếu chỉ có 1 bit 1, trả về ký tự tương ứng
    return ArrChar[position];
 8001a9c:	4a05      	ldr	r2, [pc, #20]	@ (8001ab4 <convert_to_char+0x64>)
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	781b      	ldrb	r3, [r3, #0]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	371c      	adds	r7, #28
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	20000010 	.word	0x20000010
 8001ab4:	20000028 	.word	0x20000028

08001ab8 <gen_data_send_rs485>:

char* gen_data_send_rs485(uint8_t code, char data[])
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b0c6      	sub	sp, #280	@ 0x118
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4602      	mov	r2, r0
 8001ac0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ac4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001ac8:	6019      	str	r1, [r3, #0]
 8001aca:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ace:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8001ad2:	701a      	strb	r2, [r3, #0]
	DataStruct result;
	memset((void*)&result,0,sizeof(result));
 8001ad4:	f107 030c 	add.w	r3, r7, #12
 8001ad8:	f44f 7285 	mov.w	r2, #266	@ 0x10a
 8001adc:	2100      	movs	r1, #0
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f007 ff19 	bl	8009916 <memset>
	result.Start = 0x3A;
 8001ae4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ae8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001aec:	223a      	movs	r2, #58	@ 0x3a
 8001aee:	701a      	strb	r2, [r3, #0]
	result.Addr = MY_ADDRESS;
 8001af0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001af4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001af8:	226f      	movs	r2, #111	@ 0x6f
 8001afa:	705a      	strb	r2, [r3, #1]
	result.Code = code;
 8001afc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b00:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b04:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8001b08:	f2a2 1211 	subw	r2, r2, #273	@ 0x111
 8001b0c:	7812      	ldrb	r2, [r2, #0]
 8001b0e:	709a      	strb	r2, [r3, #2]
	result.Len = strlen(data);
 8001b10:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b14:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001b18:	6818      	ldr	r0, [r3, #0]
 8001b1a:	f7fe fb19 	bl	8000150 <strlen>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b26:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b2a:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
	memcpy((void*)result.Data, (void*)data, strlen(data)+1);
 8001b2e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b32:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001b36:	6818      	ldr	r0, [r3, #0]
 8001b38:	f7fe fb0a 	bl	8000150 <strlen>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	1c59      	adds	r1, r3, #1
 8001b40:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b44:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001b48:	f107 020c 	add.w	r2, r7, #12
 8001b4c:	1cd0      	adds	r0, r2, #3
 8001b4e:	460a      	mov	r2, r1
 8001b50:	6819      	ldr	r1, [r3, #0]
 8001b52:	f007 ffd6 	bl	8009b02 <memcpy>
	result.Crc = check_crc(&result);
 8001b56:	f107 030c 	add.w	r3, r7, #12
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff feaa 	bl	80018b4 <check_crc>
 8001b60:	4603      	mov	r3, r0
 8001b62:	461a      	mov	r2, r3
 8001b64:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b68:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b6c:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
	result.Stop = 0x0D0A;
 8001b70:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b74:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b78:	f640 520a 	movw	r2, #3338	@ 0xd0a
 8001b7c:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
	data_struct_to_string(&result,data);
 8001b80:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b84:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001b88:	f107 020c 	add.w	r2, r7, #12
 8001b8c:	6819      	ldr	r1, [r3, #0]
 8001b8e:	4610      	mov	r0, r2
 8001b90:	f7ff ff0a 	bl	80019a8 <data_struct_to_string>
	return data;
 8001b94:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b98:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001b9c:	681b      	ldr	r3, [r3, #0]
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <UserDelayUntil>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void UserDelayUntil(uint32_t *lastTick, uint32_t periodMs)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
    uint32_t currentTick = xTaskGetTickCount();  // Lấy tick hiện tại
 8001bb2:	f005 ff5b 	bl	8007a6c <xTaskGetTickCount>
 8001bb6:	60f8      	str	r0, [r7, #12]
    uint32_t nextTick = *lastTick + pdMS_TO_TICKS(periodMs);  // Tính tick tiếp theo
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001bc2:	fb01 f303 	mul.w	r3, r1, r3
 8001bc6:	490c      	ldr	r1, [pc, #48]	@ (8001bf8 <UserDelayUntil+0x50>)
 8001bc8:	fba1 1303 	umull	r1, r3, r1, r3
 8001bcc:	099b      	lsrs	r3, r3, #6
 8001bce:	4413      	add	r3, r2
 8001bd0:	60bb      	str	r3, [r7, #8]
    if ((int32_t)(nextTick - currentTick) > 0)
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	dd05      	ble.n	8001be8 <UserDelayUntil+0x40>
    {
        vTaskDelay(nextTick - currentTick);  // Delay nếu chưa tới thời gian tiếp theo
 8001bdc:	68ba      	ldr	r2, [r7, #8]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	4618      	mov	r0, r3
 8001be4:	f005 fdf4 	bl	80077d0 <vTaskDelay>
    }
    *lastTick = nextTick;  // Cập nhật tick cho lần tiếp theo
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	601a      	str	r2, [r3, #0]
}
 8001bee:	bf00      	nop
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	10624dd3 	.word	0x10624dd3

08001bfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bfc:	b5b0      	push	{r4, r5, r7, lr}
 8001bfe:	b0b4      	sub	sp, #208	@ 0xd0
 8001c00:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c02:	f001 f8b5 	bl	8002d70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c06:	f000 f8e1 	bl	8001dcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c0a:	f000 f97d 	bl	8001f08 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001c0e:	f000 f923 	bl	8001e58 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001c12:	f000 f94f 	bl	8001eb4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init(2);
 8001c16:	2002      	movs	r0, #2
 8001c18:	f7ff fb58 	bl	80012cc <HD44780_Init>
  MPR121_Init();
 8001c1c:	f7fe ff84 	bl	8000b28 <MPR121_Init>
  BMP180_Init(&hi2c1);
 8001c20:	4858      	ldr	r0, [pc, #352]	@ (8001d84 <main+0x188>)
 8001c22:	f7ff f86f 	bl	8000d04 <BMP180_Init>
  MPR121_Init();
 8001c26:	f7fe ff7f 	bl	8000b28 <MPR121_Init>
  BMP180_SetOversampling(BMP180_ULTRA);
 8001c2a:	2003      	movs	r0, #3
 8001c2c:	f7ff f878 	bl	8000d20 <BMP180_SetOversampling>
  BMP180_UpdateCalibrationData();
 8001c30:	f7ff f886 	bl	8000d40 <BMP180_UpdateCalibrationData>
  HD44780_SetCursor(0,0);
 8001c34:	2100      	movs	r1, #0
 8001c36:	2000      	movs	r0, #0
 8001c38:	f7ff fbe2 	bl	8001400 <HD44780_SetCursor>
  HD44780_PrintStr("INIT LCD 1602");
 8001c3c:	4852      	ldr	r0, [pc, #328]	@ (8001d88 <main+0x18c>)
 8001c3e:	f7ff fc50 	bl	80014e2 <HD44780_PrintStr>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of I2C_Bus */
  osMutexDef(I2C_Bus);
 8001c42:	2300      	movs	r3, #0
 8001c44:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001c48:	2300      	movs	r3, #0
 8001c4a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  I2C_BusHandle = osMutexCreate(osMutex(I2C_Bus));
 8001c4e:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8001c52:	4618      	mov	r0, r3
 8001c54:	f004 fa79 	bl	800614a <osMutexCreate>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	4a4c      	ldr	r2, [pc, #304]	@ (8001d8c <main+0x190>)
 8001c5c:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of StringPrint */
  osMessageQDef(StringPrint, 5, 20);
 8001c5e:	4b4c      	ldr	r3, [pc, #304]	@ (8001d90 <main+0x194>)
 8001c60:	f107 04b8 	add.w	r4, r7, #184	@ 0xb8
 8001c64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  StringPrintHandle = osMessageCreate(osMessageQ(StringPrint), NULL);
 8001c6a:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8001c6e:	2100      	movs	r1, #0
 8001c70:	4618      	mov	r0, r3
 8001c72:	f004 fb07 	bl	8006284 <osMessageCreate>
 8001c76:	4603      	mov	r3, r0
 8001c78:	4a46      	ldr	r2, [pc, #280]	@ (8001d94 <main+0x198>)
 8001c7a:	6013      	str	r3, [r2, #0]

  /* definition and creation of StringRS485 */
  osMessageQDef(StringRS485, 5, 50);
 8001c7c:	4b44      	ldr	r3, [pc, #272]	@ (8001d90 <main+0x194>)
 8001c7e:	f107 04a8 	add.w	r4, r7, #168	@ 0xa8
 8001c82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  StringRS485Handle = osMessageCreate(osMessageQ(StringRS485), NULL);
 8001c88:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f004 faf8 	bl	8006284 <osMessageCreate>
 8001c94:	4603      	mov	r3, r0
 8001c96:	4a40      	ldr	r2, [pc, #256]	@ (8001d98 <main+0x19c>)
 8001c98:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of RXUARTTask */
  osThreadDef(RXUARTTask, RX_Task, osPriorityAboveNormal, 0, 512);
 8001c9a:	4b40      	ldr	r3, [pc, #256]	@ (8001d9c <main+0x1a0>)
 8001c9c:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8001ca0:	461d      	mov	r5, r3
 8001ca2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ca4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ca6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001caa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RXUARTTaskHandle = osThreadCreate(osThread(RXUARTTask), NULL);
 8001cae:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f004 f9e8 	bl	800608a <osThreadCreate>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	4a38      	ldr	r2, [pc, #224]	@ (8001da0 <main+0x1a4>)
 8001cbe:	6013      	str	r3, [r2, #0]

  /* definition and creation of LCD */
  osThreadDef(LCD, LCD_Task, osPriorityHigh, 0, 512);
 8001cc0:	4b38      	ldr	r3, [pc, #224]	@ (8001da4 <main+0x1a8>)
 8001cc2:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8001cc6:	461d      	mov	r5, r3
 8001cc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ccc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001cd0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LCDHandle = osThreadCreate(osThread(LCD), NULL);
 8001cd4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001cd8:	2100      	movs	r1, #0
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f004 f9d5 	bl	800608a <osThreadCreate>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	4a31      	ldr	r2, [pc, #196]	@ (8001da8 <main+0x1ac>)
 8001ce4:	6013      	str	r3, [r2, #0]

  /* definition and creation of ReadTempTask */
  osThreadDef(ReadTempTask, Temp_Task, osPriorityNormal, 0, 256);
 8001ce6:	4b31      	ldr	r3, [pc, #196]	@ (8001dac <main+0x1b0>)
 8001ce8:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8001cec:	461d      	mov	r5, r3
 8001cee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cf2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001cf6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadTempTaskHandle = osThreadCreate(osThread(ReadTempTask), NULL);
 8001cfa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001cfe:	2100      	movs	r1, #0
 8001d00:	4618      	mov	r0, r3
 8001d02:	f004 f9c2 	bl	800608a <osThreadCreate>
 8001d06:	4603      	mov	r3, r0
 8001d08:	4a29      	ldr	r2, [pc, #164]	@ (8001db0 <main+0x1b4>)
 8001d0a:	6013      	str	r3, [r2, #0]

  /* definition and creation of ReadPressTask */
  osThreadDef(ReadPressTask, Press_Task, osPriorityNormal, 0, 256);
 8001d0c:	4b29      	ldr	r3, [pc, #164]	@ (8001db4 <main+0x1b8>)
 8001d0e:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8001d12:	461d      	mov	r5, r3
 8001d14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d18:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadPressTaskHandle = osThreadCreate(osThread(ReadPressTask), NULL);
 8001d20:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d24:	2100      	movs	r1, #0
 8001d26:	4618      	mov	r0, r3
 8001d28:	f004 f9af 	bl	800608a <osThreadCreate>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	4a22      	ldr	r2, [pc, #136]	@ (8001db8 <main+0x1bc>)
 8001d30:	6013      	str	r3, [r2, #0]

  /* definition and creation of KeyTask */
  osThreadDef(KeyTask, Key_Task, osPriorityRealtime, 0, 512);
 8001d32:	4b22      	ldr	r3, [pc, #136]	@ (8001dbc <main+0x1c0>)
 8001d34:	f107 041c 	add.w	r4, r7, #28
 8001d38:	461d      	mov	r5, r3
 8001d3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  KeyTaskHandle = osThreadCreate(osThread(KeyTask), NULL);
 8001d46:	f107 031c 	add.w	r3, r7, #28
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f004 f99c 	bl	800608a <osThreadCreate>
 8001d52:	4603      	mov	r3, r0
 8001d54:	4a1a      	ldr	r2, [pc, #104]	@ (8001dc0 <main+0x1c4>)
 8001d56:	6013      	str	r3, [r2, #0]

  /* definition and creation of TXUARTTask */
  osThreadDef(TXUARTTask, TX_Task, osPriorityNormal, 0, 512);
 8001d58:	4b1a      	ldr	r3, [pc, #104]	@ (8001dc4 <main+0x1c8>)
 8001d5a:	463c      	mov	r4, r7
 8001d5c:	461d      	mov	r5, r3
 8001d5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d62:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d66:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TXUARTTaskHandle = osThreadCreate(osThread(TXUARTTask), NULL);
 8001d6a:	463b      	mov	r3, r7
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f004 f98b 	bl	800608a <osThreadCreate>
 8001d74:	4603      	mov	r3, r0
 8001d76:	4a14      	ldr	r2, [pc, #80]	@ (8001dc8 <main+0x1cc>)
 8001d78:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001d7a:	f004 f97f 	bl	800607c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d7e:	bf00      	nop
 8001d80:	e7fd      	b.n	8001d7e <main+0x182>
 8001d82:	bf00      	nop
 8001d84:	20000540 	.word	0x20000540
 8001d88:	0800bba0 	.word	0x0800bba0
 8001d8c:	200005fc 	.word	0x200005fc
 8001d90:	0800bbb0 	.word	0x0800bbb0
 8001d94:	200005f4 	.word	0x200005f4
 8001d98:	200005f8 	.word	0x200005f8
 8001d9c:	0800bbcc 	.word	0x0800bbcc
 8001da0:	200005dc 	.word	0x200005dc
 8001da4:	0800bbec 	.word	0x0800bbec
 8001da8:	200005e0 	.word	0x200005e0
 8001dac:	0800bc18 	.word	0x0800bc18
 8001db0:	200005e4 	.word	0x200005e4
 8001db4:	0800bc44 	.word	0x0800bc44
 8001db8:	200005e8 	.word	0x200005e8
 8001dbc:	0800bc68 	.word	0x0800bc68
 8001dc0:	200005ec 	.word	0x200005ec
 8001dc4:	0800bc90 	.word	0x0800bc90
 8001dc8:	200005f0 	.word	0x200005f0

08001dcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b090      	sub	sp, #64	@ 0x40
 8001dd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dd2:	f107 0318 	add.w	r3, r7, #24
 8001dd6:	2228      	movs	r2, #40	@ 0x28
 8001dd8:	2100      	movs	r1, #0
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f007 fd9b 	bl	8009916 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001de0:	1d3b      	adds	r3, r7, #4
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	605a      	str	r2, [r3, #4]
 8001de8:	609a      	str	r2, [r3, #8]
 8001dea:	60da      	str	r2, [r3, #12]
 8001dec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001dee:	2301      	movs	r3, #1
 8001df0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001df2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001df6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e00:	2302      	movs	r3, #2
 8001e02:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e04:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e08:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e0a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e10:	f107 0318 	add.w	r3, r7, #24
 8001e14:	4618      	mov	r0, r3
 8001e16:	f002 ffcf 	bl	8004db8 <HAL_RCC_OscConfig>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001e20:	f000 fd46 	bl	80028b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e24:	230f      	movs	r3, #15
 8001e26:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e3a:	1d3b      	adds	r3, r7, #4
 8001e3c:	2102      	movs	r1, #2
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f003 fa3c 	bl	80052bc <HAL_RCC_ClockConfig>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001e4a:	f000 fd31 	bl	80028b0 <Error_Handler>
  }
}
 8001e4e:	bf00      	nop
 8001e50:	3740      	adds	r7, #64	@ 0x40
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
	...

08001e58 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e5c:	4b12      	ldr	r3, [pc, #72]	@ (8001ea8 <MX_I2C1_Init+0x50>)
 8001e5e:	4a13      	ldr	r2, [pc, #76]	@ (8001eac <MX_I2C1_Init+0x54>)
 8001e60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001e62:	4b11      	ldr	r3, [pc, #68]	@ (8001ea8 <MX_I2C1_Init+0x50>)
 8001e64:	4a12      	ldr	r2, [pc, #72]	@ (8001eb0 <MX_I2C1_Init+0x58>)
 8001e66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e68:	4b0f      	ldr	r3, [pc, #60]	@ (8001ea8 <MX_I2C1_Init+0x50>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea8 <MX_I2C1_Init+0x50>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e74:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea8 <MX_I2C1_Init+0x50>)
 8001e76:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e7a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea8 <MX_I2C1_Init+0x50>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e82:	4b09      	ldr	r3, [pc, #36]	@ (8001ea8 <MX_I2C1_Init+0x50>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e88:	4b07      	ldr	r3, [pc, #28]	@ (8001ea8 <MX_I2C1_Init+0x50>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e8e:	4b06      	ldr	r3, [pc, #24]	@ (8001ea8 <MX_I2C1_Init+0x50>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e94:	4804      	ldr	r0, [pc, #16]	@ (8001ea8 <MX_I2C1_Init+0x50>)
 8001e96:	f001 fa6f 	bl	8003378 <HAL_I2C_Init>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ea0:	f000 fd06 	bl	80028b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ea4:	bf00      	nop
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	20000540 	.word	0x20000540
 8001eac:	40005400 	.word	0x40005400
 8001eb0:	000186a0 	.word	0x000186a0

08001eb4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001eb8:	4b11      	ldr	r3, [pc, #68]	@ (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001eba:	4a12      	ldr	r2, [pc, #72]	@ (8001f04 <MX_USART1_UART_Init+0x50>)
 8001ebc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ebe:	4b10      	ldr	r3, [pc, #64]	@ (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001ec0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ec4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ec6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ed8:	4b09      	ldr	r3, [pc, #36]	@ (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001eda:	220c      	movs	r2, #12
 8001edc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ede:	4b08      	ldr	r3, [pc, #32]	@ (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ee4:	4b06      	ldr	r3, [pc, #24]	@ (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001eea:	4805      	ldr	r0, [pc, #20]	@ (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001eec:	f003 fde2 	bl	8005ab4 <HAL_UART_Init>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ef6:	f000 fcdb 	bl	80028b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000594 	.word	0x20000594
 8001f04:	40013800 	.word	0x40013800

08001f08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b088      	sub	sp, #32
 8001f0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f0e:	f107 0310 	add.w	r3, r7, #16
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	605a      	str	r2, [r3, #4]
 8001f18:	609a      	str	r2, [r3, #8]
 8001f1a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f1c:	4b2e      	ldr	r3, [pc, #184]	@ (8001fd8 <MX_GPIO_Init+0xd0>)
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	4a2d      	ldr	r2, [pc, #180]	@ (8001fd8 <MX_GPIO_Init+0xd0>)
 8001f22:	f043 0310 	orr.w	r3, r3, #16
 8001f26:	6193      	str	r3, [r2, #24]
 8001f28:	4b2b      	ldr	r3, [pc, #172]	@ (8001fd8 <MX_GPIO_Init+0xd0>)
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	f003 0310 	and.w	r3, r3, #16
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f34:	4b28      	ldr	r3, [pc, #160]	@ (8001fd8 <MX_GPIO_Init+0xd0>)
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	4a27      	ldr	r2, [pc, #156]	@ (8001fd8 <MX_GPIO_Init+0xd0>)
 8001f3a:	f043 0320 	orr.w	r3, r3, #32
 8001f3e:	6193      	str	r3, [r2, #24]
 8001f40:	4b25      	ldr	r3, [pc, #148]	@ (8001fd8 <MX_GPIO_Init+0xd0>)
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	f003 0320 	and.w	r3, r3, #32
 8001f48:	60bb      	str	r3, [r7, #8]
 8001f4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4c:	4b22      	ldr	r3, [pc, #136]	@ (8001fd8 <MX_GPIO_Init+0xd0>)
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	4a21      	ldr	r2, [pc, #132]	@ (8001fd8 <MX_GPIO_Init+0xd0>)
 8001f52:	f043 0304 	orr.w	r3, r3, #4
 8001f56:	6193      	str	r3, [r2, #24]
 8001f58:	4b1f      	ldr	r3, [pc, #124]	@ (8001fd8 <MX_GPIO_Init+0xd0>)
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	607b      	str	r3, [r7, #4]
 8001f62:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f64:	4b1c      	ldr	r3, [pc, #112]	@ (8001fd8 <MX_GPIO_Init+0xd0>)
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	4a1b      	ldr	r2, [pc, #108]	@ (8001fd8 <MX_GPIO_Init+0xd0>)
 8001f6a:	f043 0308 	orr.w	r3, r3, #8
 8001f6e:	6193      	str	r3, [r2, #24]
 8001f70:	4b19      	ldr	r3, [pc, #100]	@ (8001fd8 <MX_GPIO_Init+0xd0>)
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	f003 0308 	and.w	r3, r3, #8
 8001f78:	603b      	str	r3, [r7, #0]
 8001f7a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f82:	4816      	ldr	r0, [pc, #88]	@ (8001fdc <MX_GPIO_Init+0xd4>)
 8001f84:	f001 f9ae 	bl	80032e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001f88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f96:	2302      	movs	r3, #2
 8001f98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f9a:	f107 0310 	add.w	r3, r7, #16
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	480e      	ldr	r0, [pc, #56]	@ (8001fdc <MX_GPIO_Init+0xd4>)
 8001fa2:	f001 f81b 	bl	8002fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
 8001fa6:	2320      	movs	r3, #32
 8001fa8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001faa:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe0 <MX_GPIO_Init+0xd8>)
 8001fac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8001fb2:	f107 0310 	add.w	r3, r7, #16
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	480a      	ldr	r0, [pc, #40]	@ (8001fe4 <MX_GPIO_Init+0xdc>)
 8001fba:	f001 f80f 	bl	8002fdc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	2105      	movs	r1, #5
 8001fc2:	2017      	movs	r0, #23
 8001fc4:	f000 ffdf 	bl	8002f86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001fc8:	2017      	movs	r0, #23
 8001fca:	f000 fff8 	bl	8002fbe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001fce:	bf00      	nop
 8001fd0:	3720      	adds	r7, #32
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	40011000 	.word	0x40011000
 8001fe0:	10110000 	.word	0x10110000
 8001fe4:	40010c00 	.word	0x40010c00

08001fe8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == INT_Pin) {
 8001ff2:	88fb      	ldrh	r3, [r7, #6]
 8001ff4:	2b20      	cmp	r3, #32
 8001ff6:	d10b      	bne.n	8002010 <HAL_GPIO_EXTI_Callback+0x28>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001ff8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ffc:	4807      	ldr	r0, [pc, #28]	@ (800201c <HAL_GPIO_EXTI_Callback+0x34>)
 8001ffe:	f001 f989 	bl	8003314 <HAL_GPIO_TogglePin>
		count_touch++;
 8002002:	4b07      	ldr	r3, [pc, #28]	@ (8002020 <HAL_GPIO_EXTI_Callback+0x38>)
 8002004:	881b      	ldrh	r3, [r3, #0]
 8002006:	3301      	adds	r3, #1
 8002008:	b29a      	uxth	r2, r3
 800200a:	4b05      	ldr	r3, [pc, #20]	@ (8002020 <HAL_GPIO_EXTI_Callback+0x38>)
 800200c:	801a      	strh	r2, [r3, #0]
	} else {
		__NOP();
	}
}
 800200e:	e000      	b.n	8002012 <HAL_GPIO_EXTI_Callback+0x2a>
		__NOP();
 8002010:	bf00      	nop
}
 8002012:	bf00      	nop
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40011000 	.word	0x40011000
 8002020:	20000608 	.word	0x20000608

08002024 <RX_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_RX_Task */
void RX_Task(void const * argument)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b0e0      	sub	sp, #384	@ 0x180
 8002028:	af00      	add	r7, sp, #0
 800202a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800202e:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8002032:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	char read_to_rs485[50];
	char send_to_rs485[50];
	uint32_t GetTick = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  for(;;)
  {

		memset((void*)read_to_rs485,0,sizeof(read_to_rs485));
 800203a:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 800203e:	2232      	movs	r2, #50	@ 0x32
 8002040:	2100      	movs	r1, #0
 8002042:	4618      	mov	r0, r3
 8002044:	f007 fc67 	bl	8009916 <memset>
		HAL_UART_Receive(&huart1, (uint8_t *)&read_to_rs485, sizeof (read_to_rs485) , 100);
 8002048:	f507 71a6 	add.w	r1, r7, #332	@ 0x14c
 800204c:	2364      	movs	r3, #100	@ 0x64
 800204e:	2232      	movs	r2, #50	@ 0x32
 8002050:	48d2      	ldr	r0, [pc, #840]	@ (800239c <RX_Task+0x378>)
 8002052:	f003 fe0a 	bl	8005c6a <HAL_UART_Receive>
		  if(strlen(read_to_rs485) > 1)
 8002056:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe f878 	bl	8000150 <strlen>
 8002060:	4603      	mov	r3, r0
 8002062:	2b01      	cmp	r3, #1
 8002064:	f240 8193 	bls.w	800238e <RX_Task+0x36a>
		  {
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002068:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800206c:	48cc      	ldr	r0, [pc, #816]	@ (80023a0 <RX_Task+0x37c>)
 800206e:	f001 f951 	bl	8003314 <HAL_GPIO_TogglePin>
			  DataStruct result;
			  parse_data(read_to_rs485,&result);
 8002072:	f107 0208 	add.w	r2, r7, #8
 8002076:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 800207a:	4611      	mov	r1, r2
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff fb1b 	bl	80016b8 <parse_data>
			  if(result.Addr == MY_ADDRESS && check_crc(&result) == result.Crc)
 8002082:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8002086:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800208a:	785b      	ldrb	r3, [r3, #1]
 800208c:	2b6f      	cmp	r3, #111	@ 0x6f
 800208e:	f040 8141 	bne.w	8002314 <RX_Task+0x2f0>
 8002092:	f107 0308 	add.w	r3, r7, #8
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff fc0c 	bl	80018b4 <check_crc>
 800209c:	4603      	mov	r3, r0
 800209e:	461a      	mov	r2, r3
 80020a0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80020a4:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80020a8:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 80020ac:	429a      	cmp	r2, r3
 80020ae:	f040 8131 	bne.w	8002314 <RX_Task+0x2f0>
			  {
				  if(result.Code == 1)
 80020b2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80020b6:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80020ba:	789b      	ldrb	r3, [r3, #2]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	f040 80a5 	bne.w	800220c <RX_Task+0x1e8>
				  {
					  if(result.Data[0] == '1')
 80020c2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80020c6:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80020ca:	78db      	ldrb	r3, [r3, #3]
 80020cc:	2b31      	cmp	r3, #49	@ 0x31
 80020ce:	d131      	bne.n	8002134 <RX_Task+0x110>
					  {
						  memset((void*)send_to_rs485,0,sizeof(send_to_rs485));
 80020d0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80020d4:	2232      	movs	r2, #50	@ 0x32
 80020d6:	2100      	movs	r1, #0
 80020d8:	4618      	mov	r0, r3
 80020da:	f007 fc1c 	bl	8009916 <memset>
						  sprintf(send_to_rs485, "%.1fC", temperature);
 80020de:	4bb1      	ldr	r3, [pc, #708]	@ (80023a4 <RX_Task+0x380>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7fe f9a0 	bl	8000428 <__aeabi_f2d>
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 80020f0:	49ad      	ldr	r1, [pc, #692]	@ (80023a8 <RX_Task+0x384>)
 80020f2:	f007 fb93 	bl	800981c <siprintf>
						  send_to_rs485[strlen(send_to_rs485)+1] = RESPONSES(CODE_TEMP);
 80020f6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7fe f828 	bl	8000150 <strlen>
 8002100:	4603      	mov	r3, r0
 8002102:	3301      	adds	r3, #1
 8002104:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8002108:	443b      	add	r3, r7
 800210a:	2201      	movs	r2, #1
 800210c:	f803 2c68 	strb.w	r2, [r3, #-104]
						  osMessagePut(StringRS485Handle, (uint32_t)send_to_rs485, osWaitForever);
 8002110:	4ba6      	ldr	r3, [pc, #664]	@ (80023ac <RX_Task+0x388>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8002118:	f04f 32ff 	mov.w	r2, #4294967295
 800211c:	4618      	mov	r0, r3
 800211e:	f004 f8d9 	bl	80062d4 <osMessagePut>
						  osMessagePut(StringPrintHandle, (uint32_t)indicate_T, osWaitForever);
 8002122:	4ba3      	ldr	r3, [pc, #652]	@ (80023b0 <RX_Task+0x38c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	49a3      	ldr	r1, [pc, #652]	@ (80023b4 <RX_Task+0x390>)
 8002128:	f04f 32ff 	mov.w	r2, #4294967295
 800212c:	4618      	mov	r0, r3
 800212e:	f004 f8d1 	bl	80062d4 <osMessagePut>
				  if(result.Code == 1)
 8002132:	e12b      	b.n	800238c <RX_Task+0x368>
					  }
					  else if (result.Data[0] == '2')
 8002134:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8002138:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800213c:	78db      	ldrb	r3, [r3, #3]
 800213e:	2b32      	cmp	r3, #50	@ 0x32
 8002140:	d12d      	bne.n	800219e <RX_Task+0x17a>
					  {
						  memset((void*)send_to_rs485,0,sizeof(send_to_rs485));
 8002142:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002146:	2232      	movs	r2, #50	@ 0x32
 8002148:	2100      	movs	r1, #0
 800214a:	4618      	mov	r0, r3
 800214c:	f007 fbe3 	bl	8009916 <memset>
						  sprintf(send_to_rs485, "%dPa", (int) pressure);
 8002150:	4b99      	ldr	r3, [pc, #612]	@ (80023b8 <RX_Task+0x394>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002158:	4998      	ldr	r1, [pc, #608]	@ (80023bc <RX_Task+0x398>)
 800215a:	4618      	mov	r0, r3
 800215c:	f007 fb5e 	bl	800981c <siprintf>
						  send_to_rs485[strlen(send_to_rs485)+1] = RESPONSES(CODE_PRES);
 8002160:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002164:	4618      	mov	r0, r3
 8002166:	f7fd fff3 	bl	8000150 <strlen>
 800216a:	4603      	mov	r3, r0
 800216c:	3301      	adds	r3, #1
 800216e:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8002172:	443b      	add	r3, r7
 8002174:	2202      	movs	r2, #2
 8002176:	f803 2c68 	strb.w	r2, [r3, #-104]
						  osMessagePut(StringRS485Handle, (uint32_t)send_to_rs485, osWaitForever);
 800217a:	4b8c      	ldr	r3, [pc, #560]	@ (80023ac <RX_Task+0x388>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8002182:	f04f 32ff 	mov.w	r2, #4294967295
 8002186:	4618      	mov	r0, r3
 8002188:	f004 f8a4 	bl	80062d4 <osMessagePut>
						  osMessagePut(StringPrintHandle, (uint32_t)indicate_P, osWaitForever);
 800218c:	4b88      	ldr	r3, [pc, #544]	@ (80023b0 <RX_Task+0x38c>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	498b      	ldr	r1, [pc, #556]	@ (80023c0 <RX_Task+0x39c>)
 8002192:	f04f 32ff 	mov.w	r2, #4294967295
 8002196:	4618      	mov	r0, r3
 8002198:	f004 f89c 	bl	80062d4 <osMessagePut>
				  if(result.Code == 1)
 800219c:	e0f6      	b.n	800238c <RX_Task+0x368>
					  }
					  else if (result.Data[0] == '4')
 800219e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80021a2:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80021a6:	78db      	ldrb	r3, [r3, #3]
 80021a8:	2b34      	cmp	r3, #52	@ 0x34
 80021aa:	f040 80ef 	bne.w	800238c <RX_Task+0x368>
					  {
						  memset((void*)send_to_rs485,0,sizeof(send_to_rs485));
 80021ae:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80021b2:	2232      	movs	r2, #50	@ 0x32
 80021b4:	2100      	movs	r1, #0
 80021b6:	4618      	mov	r0, r3
 80021b8:	f007 fbad 	bl	8009916 <memset>
						  sprintf(send_to_rs485, "%dN", (int) count_touch);
 80021bc:	4b81      	ldr	r3, [pc, #516]	@ (80023c4 <RX_Task+0x3a0>)
 80021be:	881b      	ldrh	r3, [r3, #0]
 80021c0:	461a      	mov	r2, r3
 80021c2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80021c6:	4980      	ldr	r1, [pc, #512]	@ (80023c8 <RX_Task+0x3a4>)
 80021c8:	4618      	mov	r0, r3
 80021ca:	f007 fb27 	bl	800981c <siprintf>
						  send_to_rs485[strlen(send_to_rs485)+1] = RESPONSES(CODE_COUNT);
 80021ce:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7fd ffbc 	bl	8000150 <strlen>
 80021d8:	4603      	mov	r3, r0
 80021da:	3301      	adds	r3, #1
 80021dc:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80021e0:	443b      	add	r3, r7
 80021e2:	2204      	movs	r2, #4
 80021e4:	f803 2c68 	strb.w	r2, [r3, #-104]
						  osMessagePut(StringRS485Handle, (uint32_t)send_to_rs485, osWaitForever);
 80021e8:	4b70      	ldr	r3, [pc, #448]	@ (80023ac <RX_Task+0x388>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 80021f0:	f04f 32ff 	mov.w	r2, #4294967295
 80021f4:	4618      	mov	r0, r3
 80021f6:	f004 f86d 	bl	80062d4 <osMessagePut>
						  osMessagePut(StringPrintHandle, (uint32_t)indicate_C, osWaitForever);
 80021fa:	4b6d      	ldr	r3, [pc, #436]	@ (80023b0 <RX_Task+0x38c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4973      	ldr	r1, [pc, #460]	@ (80023cc <RX_Task+0x3a8>)
 8002200:	f04f 32ff 	mov.w	r2, #4294967295
 8002204:	4618      	mov	r0, r3
 8002206:	f004 f865 	bl	80062d4 <osMessagePut>
				  if(result.Code == 1)
 800220a:	e0bf      	b.n	800238c <RX_Task+0x368>
					  }
				  }
				  else if(result.Code == 2)
 800220c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8002210:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002214:	789b      	ldrb	r3, [r3, #2]
 8002216:	2b02      	cmp	r3, #2
 8002218:	d13b      	bne.n	8002292 <RX_Task+0x26e>
				  {
					  result.Data[result.Len] = '\0';
 800221a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800221e:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002222:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8002226:	461a      	mov	r2, r3
 8002228:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800222c:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002230:	4413      	add	r3, r2
 8002232:	2200      	movs	r2, #0
 8002234:	70da      	strb	r2, [r3, #3]
					  memset((void*)send_to_rs485,0,sizeof(send_to_rs485));
 8002236:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800223a:	2232      	movs	r2, #50	@ 0x32
 800223c:	2100      	movs	r1, #0
 800223e:	4618      	mov	r0, r3
 8002240:	f007 fb69 	bl	8009916 <memset>
					  sprintf(send_to_rs485, "Okee");
 8002244:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002248:	4961      	ldr	r1, [pc, #388]	@ (80023d0 <RX_Task+0x3ac>)
 800224a:	4618      	mov	r0, r3
 800224c:	f007 fae6 	bl	800981c <siprintf>
					  send_to_rs485[strlen(send_to_rs485)+1] = RESPONSES(CODE_RESP);
 8002250:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002254:	4618      	mov	r0, r3
 8002256:	f7fd ff7b 	bl	8000150 <strlen>
 800225a:	4603      	mov	r3, r0
 800225c:	3301      	adds	r3, #1
 800225e:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8002262:	443b      	add	r3, r7
 8002264:	2205      	movs	r2, #5
 8002266:	f803 2c68 	strb.w	r2, [r3, #-104]
					  osMessagePut(StringRS485Handle, (uint32_t)send_to_rs485, osWaitForever);
 800226a:	4b50      	ldr	r3, [pc, #320]	@ (80023ac <RX_Task+0x388>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8002272:	f04f 32ff 	mov.w	r2, #4294967295
 8002276:	4618      	mov	r0, r3
 8002278:	f004 f82c 	bl	80062d4 <osMessagePut>
					  osMessagePut(StringPrintHandle, (uint32_t)result.Data, osWaitForever);
 800227c:	4b4c      	ldr	r3, [pc, #304]	@ (80023b0 <RX_Task+0x38c>)
 800227e:	6818      	ldr	r0, [r3, #0]
 8002280:	f107 0308 	add.w	r3, r7, #8
 8002284:	3303      	adds	r3, #3
 8002286:	f04f 32ff 	mov.w	r2, #4294967295
 800228a:	4619      	mov	r1, r3
 800228c:	f004 f822 	bl	80062d4 <osMessagePut>
				  if(result.Code == 1)
 8002290:	e07c      	b.n	800238c <RX_Task+0x368>
				  }
				  else if(result.Code == 3)
 8002292:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8002296:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800229a:	789b      	ldrb	r3, [r3, #2]
 800229c:	2b03      	cmp	r3, #3
 800229e:	d175      	bne.n	800238c <RX_Task+0x368>
				  {
					  result.Data[result.Len] = '\0';
 80022a0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80022a4:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80022a8:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 80022ac:	461a      	mov	r2, r3
 80022ae:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80022b2:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80022b6:	4413      	add	r3, r2
 80022b8:	2200      	movs	r2, #0
 80022ba:	70da      	strb	r2, [r3, #3]
					  memset((void*)send_to_rs485,0,sizeof(send_to_rs485));
 80022bc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022c0:	2232      	movs	r2, #50	@ 0x32
 80022c2:	2100      	movs	r1, #0
 80022c4:	4618      	mov	r0, r3
 80022c6:	f007 fb26 	bl	8009916 <memset>
					  sprintf(send_to_rs485, "Okee");
 80022ca:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022ce:	4940      	ldr	r1, [pc, #256]	@ (80023d0 <RX_Task+0x3ac>)
 80022d0:	4618      	mov	r0, r3
 80022d2:	f007 faa3 	bl	800981c <siprintf>
					  send_to_rs485[strlen(send_to_rs485)+1] = RESPONSES(CODE_RESP);
 80022d6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022da:	4618      	mov	r0, r3
 80022dc:	f7fd ff38 	bl	8000150 <strlen>
 80022e0:	4603      	mov	r3, r0
 80022e2:	3301      	adds	r3, #1
 80022e4:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80022e8:	443b      	add	r3, r7
 80022ea:	2205      	movs	r2, #5
 80022ec:	f803 2c68 	strb.w	r2, [r3, #-104]
					  osMessagePut(StringRS485Handle, (uint32_t)send_to_rs485, osWaitForever);
 80022f0:	4b2e      	ldr	r3, [pc, #184]	@ (80023ac <RX_Task+0x388>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 80022f8:	f04f 32ff 	mov.w	r2, #4294967295
 80022fc:	4618      	mov	r0, r3
 80022fe:	f003 ffe9 	bl	80062d4 <osMessagePut>
					  osMessagePut(StringPrintHandle, (uint32_t)indicate_M, osWaitForever);
 8002302:	4b2b      	ldr	r3, [pc, #172]	@ (80023b0 <RX_Task+0x38c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4933      	ldr	r1, [pc, #204]	@ (80023d4 <RX_Task+0x3b0>)
 8002308:	f04f 32ff 	mov.w	r2, #4294967295
 800230c:	4618      	mov	r0, r3
 800230e:	f003 ffe1 	bl	80062d4 <osMessagePut>
				  if(result.Code == 1)
 8002312:	e03b      	b.n	800238c <RX_Task+0x368>
				  }
			  }
			  else if(check_crc(&result) != result.Crc)
 8002314:	f107 0308 	add.w	r3, r7, #8
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff facb 	bl	80018b4 <check_crc>
 800231e:	4603      	mov	r3, r0
 8002320:	461a      	mov	r2, r3
 8002322:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8002326:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800232a:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 800232e:	429a      	cmp	r2, r3
 8002330:	d02d      	beq.n	800238e <RX_Task+0x36a>
			  {
				  result.Data[result.Len] = '\0';
 8002332:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8002336:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800233a:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 800233e:	461a      	mov	r2, r3
 8002340:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8002344:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002348:	4413      	add	r3, r2
 800234a:	2200      	movs	r2, #0
 800234c:	70da      	strb	r2, [r3, #3]
				  memset((void*)send_to_rs485,0,sizeof(send_to_rs485));
 800234e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002352:	2232      	movs	r2, #50	@ 0x32
 8002354:	2100      	movs	r1, #0
 8002356:	4618      	mov	r0, r3
 8002358:	f007 fadd 	bl	8009916 <memset>
				  sprintf(send_to_rs485, "Error Crc");
 800235c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002360:	491d      	ldr	r1, [pc, #116]	@ (80023d8 <RX_Task+0x3b4>)
 8002362:	4618      	mov	r0, r3
 8002364:	f007 fa5a 	bl	800981c <siprintf>
				  osMessagePut(StringRS485Handle, (uint32_t)send_to_rs485, osWaitForever);
 8002368:	4b10      	ldr	r3, [pc, #64]	@ (80023ac <RX_Task+0x388>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8002370:	f04f 32ff 	mov.w	r2, #4294967295
 8002374:	4618      	mov	r0, r3
 8002376:	f003 ffad 	bl	80062d4 <osMessagePut>
				  osMessagePut(StringPrintHandle, (uint32_t)indicate_E, osWaitForever);
 800237a:	4b0d      	ldr	r3, [pc, #52]	@ (80023b0 <RX_Task+0x38c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4917      	ldr	r1, [pc, #92]	@ (80023dc <RX_Task+0x3b8>)
 8002380:	f04f 32ff 	mov.w	r2, #4294967295
 8002384:	4618      	mov	r0, r3
 8002386:	f003 ffa5 	bl	80062d4 <osMessagePut>
 800238a:	e000      	b.n	800238e <RX_Task+0x36a>
				  if(result.Code == 1)
 800238c:	bf00      	nop
			  }
		  }
		  UserDelayUntil(&GetTick,200);
 800238e:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002392:	21c8      	movs	r1, #200	@ 0xc8
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff fc07 	bl	8001ba8 <UserDelayUntil>
		memset((void*)read_to_rs485,0,sizeof(read_to_rs485));
 800239a:	e64e      	b.n	800203a <RX_Task+0x16>
 800239c:	20000594 	.word	0x20000594
 80023a0:	40011000 	.word	0x40011000
 80023a4:	20000600 	.word	0x20000600
 80023a8:	0800bcac 	.word	0x0800bcac
 80023ac:	200005f8 	.word	0x200005f8
 80023b0:	200005f4 	.word	0x200005f4
 80023b4:	20000034 	.word	0x20000034
 80023b8:	20000604 	.word	0x20000604
 80023bc:	0800bcb4 	.word	0x0800bcb4
 80023c0:	20000048 	.word	0x20000048
 80023c4:	20000608 	.word	0x20000608
 80023c8:	0800bcbc 	.word	0x0800bcbc
 80023cc:	20000058 	.word	0x20000058
 80023d0:	0800bcc0 	.word	0x0800bcc0
 80023d4:	20000064 	.word	0x20000064
 80023d8:	0800bcc8 	.word	0x0800bcc8
 80023dc:	20000070 	.word	0x20000070

080023e0 <LCD_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LCD_Task */
void LCD_Task(void const * argument)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b08c      	sub	sp, #48	@ 0x30
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LCD_Task */
  /* Infinite loop */
	  osEvent event;
	  char LastMessage[20] = "Init LCD";
 80023e8:	4a2e      	ldr	r2, [pc, #184]	@ (80024a4 <LCD_Task+0xc4>)
 80023ea:	f107 030c 	add.w	r3, r7, #12
 80023ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80023f0:	c303      	stmia	r3!, {r0, r1}
 80023f2:	701a      	strb	r2, [r3, #0]
 80023f4:	f107 0315 	add.w	r3, r7, #21
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	f8c3 2007 	str.w	r2, [r3, #7]
	  char *NewMessage = NULL;
 8002402:	2300      	movs	r3, #0
 8002404:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  uint32_t GetTick = 0;
 8002406:	2300      	movs	r3, #0
 8002408:	60bb      	str	r3, [r7, #8]
  for(;;)
  {
	  event = osMessageGet(StringPrintHandle, osWaitForever);
 800240a:	4b27      	ldr	r3, [pc, #156]	@ (80024a8 <LCD_Task+0xc8>)
 800240c:	6819      	ldr	r1, [r3, #0]
 800240e:	f107 0320 	add.w	r3, r7, #32
 8002412:	f04f 32ff 	mov.w	r2, #4294967295
 8002416:	4618      	mov	r0, r3
 8002418:	f003 ff9c 	bl	8006354 <osMessageGet>
	  if (event.status == osEventMessage)
 800241c:	6a3b      	ldr	r3, [r7, #32]
 800241e:	2b10      	cmp	r3, #16
 8002420:	d138      	bne.n	8002494 <LCD_Task+0xb4>
	  {
		  NewMessage = (char*)event.value.v;
 8002422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002424:	62fb      	str	r3, [r7, #44]	@ 0x2c
		  if (osMutexWait(I2C_BusHandle, osWaitForever) == osOK)
 8002426:	4b21      	ldr	r3, [pc, #132]	@ (80024ac <LCD_Task+0xcc>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f04f 31ff 	mov.w	r1, #4294967295
 800242e:	4618      	mov	r0, r3
 8002430:	f003 fea4 	bl	800617c <osMutexWait>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d116      	bne.n	8002468 <LCD_Task+0x88>
		  {
			HD44780_Clear();
 800243a:	f7fe ffcb 	bl	80013d4 <HD44780_Clear>
	        HD44780_SetCursor(0,0);
 800243e:	2100      	movs	r1, #0
 8002440:	2000      	movs	r0, #0
 8002442:	f7fe ffdd 	bl	8001400 <HD44780_SetCursor>
			HD44780_PrintStr(LastMessage);
 8002446:	f107 030c 	add.w	r3, r7, #12
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff f849 	bl	80014e2 <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 8002450:	2101      	movs	r1, #1
 8002452:	2000      	movs	r0, #0
 8002454:	f7fe ffd4 	bl	8001400 <HD44780_SetCursor>
			HD44780_PrintStr(NewMessage);
 8002458:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800245a:	f7ff f842 	bl	80014e2 <HD44780_PrintStr>
	        osMutexRelease(I2C_BusHandle);
 800245e:	4b13      	ldr	r3, [pc, #76]	@ (80024ac <LCD_Task+0xcc>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f003 fed8 	bl	8006218 <osMutexRelease>
		  }
		  if(NewMessage != NULL)
 8002468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800246a:	2b00      	cmp	r3, #0
 800246c:	d012      	beq.n	8002494 <LCD_Task+0xb4>
		  {
			  memcpy(LastMessage, NewMessage, strlen(NewMessage));
 800246e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002470:	f7fd fe6e 	bl	8000150 <strlen>
 8002474:	4602      	mov	r2, r0
 8002476:	f107 030c 	add.w	r3, r7, #12
 800247a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800247c:	4618      	mov	r0, r3
 800247e:	f007 fb40 	bl	8009b02 <memcpy>
			  LastMessage[strlen(NewMessage)] = '\0';
 8002482:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002484:	f7fd fe64 	bl	8000150 <strlen>
 8002488:	4603      	mov	r3, r0
 800248a:	3330      	adds	r3, #48	@ 0x30
 800248c:	443b      	add	r3, r7
 800248e:	2200      	movs	r2, #0
 8002490:	f803 2c24 	strb.w	r2, [r3, #-36]
		  }
	  }
	  UserDelayUntil(&GetTick,1000);
 8002494:	f107 0308 	add.w	r3, r7, #8
 8002498:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff fb83 	bl	8001ba8 <UserDelayUntil>
	  event = osMessageGet(StringPrintHandle, osWaitForever);
 80024a2:	e7b2      	b.n	800240a <LCD_Task+0x2a>
 80024a4:	0800bcd4 	.word	0x0800bcd4
 80024a8:	200005f4 	.word	0x200005f4
 80024ac:	200005fc 	.word	0x200005fc

080024b0 <Temp_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Temp_Task */
void Temp_Task(void const * argument)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b088      	sub	sp, #32
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Temp_Task */
  /* Infinite loop */
//	float temperature;
	uint32_t GetTick = 0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	61fb      	str	r3, [r7, #28]
  for(;;)
  {
	    if (osMutexWait(I2C_BusHandle, osWaitForever) == osOK)
 80024bc:	4b27      	ldr	r3, [pc, #156]	@ (800255c <Temp_Task+0xac>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f04f 31ff 	mov.w	r1, #4294967295
 80024c4:	4618      	mov	r0, r3
 80024c6:	f003 fe59 	bl	800617c <osMutexWait>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d109      	bne.n	80024e4 <Temp_Task+0x34>
	    {
	    	temperature = BMP180_GetTemperature();
 80024d0:	f7fe fd7e 	bl	8000fd0 <BMP180_GetTemperature>
 80024d4:	4603      	mov	r3, r0
 80024d6:	4a22      	ldr	r2, [pc, #136]	@ (8002560 <Temp_Task+0xb0>)
 80024d8:	6013      	str	r3, [r2, #0]
	        osMutexRelease(I2C_BusHandle);
 80024da:	4b20      	ldr	r3, [pc, #128]	@ (800255c <Temp_Task+0xac>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f003 fe9a 	bl	8006218 <osMutexRelease>
	    }
	    char sen_to_lcd[20] = "";
 80024e4:	2300      	movs	r3, #0
 80024e6:	60bb      	str	r3, [r7, #8]
 80024e8:	f107 030c 	add.w	r3, r7, #12
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	60da      	str	r2, [r3, #12]
	    sprintf(sen_to_lcd,"%0.1fC", temperature);
 80024f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002560 <Temp_Task+0xb0>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7fd ff94 	bl	8000428 <__aeabi_f2d>
 8002500:	4602      	mov	r2, r0
 8002502:	460b      	mov	r3, r1
 8002504:	f107 0008 	add.w	r0, r7, #8
 8002508:	4916      	ldr	r1, [pc, #88]	@ (8002564 <Temp_Task+0xb4>)
 800250a:	f007 f987 	bl	800981c <siprintf>
	    osMessagePut(StringPrintHandle, (uint32_t)sen_to_lcd, osWaitForever);
 800250e:	4b16      	ldr	r3, [pc, #88]	@ (8002568 <Temp_Task+0xb8>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f107 0108 	add.w	r1, r7, #8
 8002516:	f04f 32ff 	mov.w	r2, #4294967295
 800251a:	4618      	mov	r0, r3
 800251c:	f003 feda 	bl	80062d4 <osMessagePut>
	    sen_to_lcd[strlen(sen_to_lcd)+1] = UPGRADE(CODE_TEMP);
 8002520:	f107 0308 	add.w	r3, r7, #8
 8002524:	4618      	mov	r0, r3
 8002526:	f7fd fe13 	bl	8000150 <strlen>
 800252a:	4603      	mov	r3, r0
 800252c:	3301      	adds	r3, #1
 800252e:	3320      	adds	r3, #32
 8002530:	443b      	add	r3, r7
 8002532:	2280      	movs	r2, #128	@ 0x80
 8002534:	f803 2c18 	strb.w	r2, [r3, #-24]
	    osMessagePut(StringRS485Handle, (uint32_t)sen_to_lcd, osWaitForever);
 8002538:	4b0c      	ldr	r3, [pc, #48]	@ (800256c <Temp_Task+0xbc>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f107 0108 	add.w	r1, r7, #8
 8002540:	f04f 32ff 	mov.w	r2, #4294967295
 8002544:	4618      	mov	r0, r3
 8002546:	f003 fec5 	bl	80062d4 <osMessagePut>
//	    osDelay(5000);
	    UserDelayUntil(&GetTick,5000);
 800254a:	f107 031c 	add.w	r3, r7, #28
 800254e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff fb28 	bl	8001ba8 <UserDelayUntil>
  {
 8002558:	e7b0      	b.n	80024bc <Temp_Task+0xc>
 800255a:	bf00      	nop
 800255c:	200005fc 	.word	0x200005fc
 8002560:	20000600 	.word	0x20000600
 8002564:	0800bce8 	.word	0x0800bce8
 8002568:	200005f4 	.word	0x200005f4
 800256c:	200005f8 	.word	0x200005f8

08002570 <Press_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Press_Task */
void Press_Task(void const * argument)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b088      	sub	sp, #32
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Press_Task */
  /* Infinite loop */
//	int32_t pressure;
	osDelay(2500);
 8002578:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 800257c:	f003 fdd1 	bl	8006122 <osDelay>
	uint32_t GetTick = 0;
 8002580:	2300      	movs	r3, #0
 8002582:	61fb      	str	r3, [r7, #28]
  for(;;)
  {
	    if (osMutexWait(I2C_BusHandle, osWaitForever) == osOK)
 8002584:	4b22      	ldr	r3, [pc, #136]	@ (8002610 <Press_Task+0xa0>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f04f 31ff 	mov.w	r1, #4294967295
 800258c:	4618      	mov	r0, r3
 800258e:	f003 fdf5 	bl	800617c <osMutexWait>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d109      	bne.n	80025ac <Press_Task+0x3c>
	    {
	    	pressure = BMP180_GetPressure();
 8002598:	f7fe fd36 	bl	8001008 <BMP180_GetPressure>
 800259c:	4603      	mov	r3, r0
 800259e:	4a1d      	ldr	r2, [pc, #116]	@ (8002614 <Press_Task+0xa4>)
 80025a0:	6013      	str	r3, [r2, #0]
	        osMutexRelease(I2C_BusHandle);
 80025a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002610 <Press_Task+0xa0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f003 fe36 	bl	8006218 <osMutexRelease>
	    }
	    osDelay(2500);
 80025ac:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80025b0:	f003 fdb7 	bl	8006122 <osDelay>
	    char sen_to_lcd[20];
	    sprintf(sen_to_lcd,"%dPa", (int)pressure);
 80025b4:	4b17      	ldr	r3, [pc, #92]	@ (8002614 <Press_Task+0xa4>)
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	f107 0308 	add.w	r3, r7, #8
 80025bc:	4916      	ldr	r1, [pc, #88]	@ (8002618 <Press_Task+0xa8>)
 80025be:	4618      	mov	r0, r3
 80025c0:	f007 f92c 	bl	800981c <siprintf>
	    osMessagePut(StringPrintHandle, (uint32_t)sen_to_lcd, osWaitForever);
 80025c4:	4b15      	ldr	r3, [pc, #84]	@ (800261c <Press_Task+0xac>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f107 0108 	add.w	r1, r7, #8
 80025cc:	f04f 32ff 	mov.w	r2, #4294967295
 80025d0:	4618      	mov	r0, r3
 80025d2:	f003 fe7f 	bl	80062d4 <osMessagePut>
	    sen_to_lcd[strlen(sen_to_lcd)+1] = UPGRADE(CODE_PRES);
 80025d6:	f107 0308 	add.w	r3, r7, #8
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fd fdb8 	bl	8000150 <strlen>
 80025e0:	4603      	mov	r3, r0
 80025e2:	3301      	adds	r3, #1
 80025e4:	3320      	adds	r3, #32
 80025e6:	443b      	add	r3, r7
 80025e8:	2281      	movs	r2, #129	@ 0x81
 80025ea:	f803 2c18 	strb.w	r2, [r3, #-24]
	    osMessagePut(StringRS485Handle, (uint32_t)sen_to_lcd, osWaitForever);
 80025ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002620 <Press_Task+0xb0>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f107 0108 	add.w	r1, r7, #8
 80025f6:	f04f 32ff 	mov.w	r2, #4294967295
 80025fa:	4618      	mov	r0, r3
 80025fc:	f003 fe6a 	bl	80062d4 <osMessagePut>
	    UserDelayUntil(&GetTick,5000);
 8002600:	f107 031c 	add.w	r3, r7, #28
 8002604:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff facd 	bl	8001ba8 <UserDelayUntil>
  {
 800260e:	e7b9      	b.n	8002584 <Press_Task+0x14>
 8002610:	200005fc 	.word	0x200005fc
 8002614:	20000604 	.word	0x20000604
 8002618:	0800bcb4 	.word	0x0800bcb4
 800261c:	200005f4 	.word	0x200005f4
 8002620:	200005f8 	.word	0x200005f8

08002624 <Key_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Key_Task */
void Key_Task(void const * argument)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b090      	sub	sp, #64	@ 0x40
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Key_Task */
  /* Infinite loop */
	char key_board[20];
	uint8_t len_key_board = 0;
 800262c:	2300      	movs	r3, #0
 800262e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint16_t last_touch = 0, new_touch = 0;
 8002632:	2300      	movs	r3, #0
 8002634:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8002636:	2300      	movs	r3, #0
 8002638:	877b      	strh	r3, [r7, #58]	@ 0x3a
	uint32_t GetTick = 0;
 800263a:	2300      	movs	r3, #0
 800263c:	623b      	str	r3, [r7, #32]
  for(;;)
  {
		if (osMutexWait(I2C_BusHandle, osWaitForever) == osOK)
 800263e:	4b61      	ldr	r3, [pc, #388]	@ (80027c4 <Key_Task+0x1a0>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f04f 31ff 	mov.w	r1, #4294967295
 8002646:	4618      	mov	r0, r3
 8002648:	f003 fd98 	bl	800617c <osMutexWait>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d108      	bne.n	8002664 <Key_Task+0x40>
		{
			new_touch = touched();
 8002652:	f7fe fb47 	bl	8000ce4 <touched>
 8002656:	4603      	mov	r3, r0
 8002658:	877b      	strh	r3, [r7, #58]	@ 0x3a
			osMutexRelease(I2C_BusHandle);
 800265a:	4b5a      	ldr	r3, [pc, #360]	@ (80027c4 <Key_Task+0x1a0>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f003 fdda 	bl	8006218 <osMutexRelease>
		}
	  if(new_touch != last_touch)
 8002664:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8002666:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002668:	429a      	cmp	r2, r3
 800266a:	f000 80a1 	beq.w	80027b0 <Key_Task+0x18c>
	  {
		  if(new_touch == 0)
 800266e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002670:	2b00      	cmp	r3, #0
 8002672:	f040 809d 	bne.w	80027b0 <Key_Task+0x18c>
		  {
			  char C = convert_to_char(last_touch);
 8002676:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff f9e9 	bl	8001a50 <convert_to_char>
 800267e:	4603      	mov	r3, r0
 8002680:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
			  if(C != '\0' && C != '*' && C != '#')
 8002684:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002688:	2b00      	cmp	r3, #0
 800268a:	d04a      	beq.n	8002722 <Key_Task+0xfe>
 800268c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002690:	2b2a      	cmp	r3, #42	@ 0x2a
 8002692:	d046      	beq.n	8002722 <Key_Task+0xfe>
 8002694:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002698:	2b23      	cmp	r3, #35	@ 0x23
 800269a:	d042      	beq.n	8002722 <Key_Task+0xfe>
			  {
				  if(len_key_board < 16)
 800269c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80026a0:	2b0f      	cmp	r3, #15
 80026a2:	d812      	bhi.n	80026ca <Key_Task+0xa6>
				  {
					  key_board[len_key_board++] = C;
 80026a4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80026a8:	1c5a      	adds	r2, r3, #1
 80026aa:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80026ae:	3340      	adds	r3, #64	@ 0x40
 80026b0:	443b      	add	r3, r7
 80026b2:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80026b6:	f803 2c1c 	strb.w	r2, [r3, #-28]
					  key_board[len_key_board] = '\0';
 80026ba:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80026be:	3340      	adds	r3, #64	@ 0x40
 80026c0:	443b      	add	r3, r7
 80026c2:	2200      	movs	r2, #0
 80026c4:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80026c8:	e018      	b.n	80026fc <Key_Task+0xd8>
				  }
				  else
				  {
					  memmove(key_board,&key_board[1],sizeof(key_board) - 1);
 80026ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026ce:	1c59      	adds	r1, r3, #1
 80026d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026d4:	2213      	movs	r2, #19
 80026d6:	4618      	mov	r0, r3
 80026d8:	f007 f903 	bl	80098e2 <memmove>
					  key_board[len_key_board - 1] = C;
 80026dc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80026e0:	3b01      	subs	r3, #1
 80026e2:	3340      	adds	r3, #64	@ 0x40
 80026e4:	443b      	add	r3, r7
 80026e6:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80026ea:	f803 2c1c 	strb.w	r2, [r3, #-28]
					  key_board[len_key_board] = '\0';
 80026ee:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80026f2:	3340      	adds	r3, #64	@ 0x40
 80026f4:	443b      	add	r3, r7
 80026f6:	2200      	movs	r2, #0
 80026f8:	f803 2c1c 	strb.w	r2, [r3, #-28]
				  }
				  char sen_to_lcd[20];
				  sprintf(sen_to_lcd, "Detect Touch %d",count_touch);
 80026fc:	4b32      	ldr	r3, [pc, #200]	@ (80027c8 <Key_Task+0x1a4>)
 80026fe:	881b      	ldrh	r3, [r3, #0]
 8002700:	461a      	mov	r2, r3
 8002702:	f107 030c 	add.w	r3, r7, #12
 8002706:	4931      	ldr	r1, [pc, #196]	@ (80027cc <Key_Task+0x1a8>)
 8002708:	4618      	mov	r0, r3
 800270a:	f007 f887 	bl	800981c <siprintf>
				  osMessagePut(StringPrintHandle, (uint32_t)sen_to_lcd, osWaitForever);
 800270e:	4b30      	ldr	r3, [pc, #192]	@ (80027d0 <Key_Task+0x1ac>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f107 010c 	add.w	r1, r7, #12
 8002716:	f04f 32ff 	mov.w	r2, #4294967295
 800271a:	4618      	mov	r0, r3
 800271c:	f003 fdda 	bl	80062d4 <osMessagePut>
			  {
 8002720:	e046      	b.n	80027b0 <Key_Task+0x18c>
			  }
			  else if(C == '#' && len_key_board > 0)
 8002722:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002726:	2b23      	cmp	r3, #35	@ 0x23
 8002728:	d125      	bne.n	8002776 <Key_Task+0x152>
 800272a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800272e:	2b00      	cmp	r3, #0
 8002730:	d021      	beq.n	8002776 <Key_Task+0x152>
			  {
//				  osMessagePut(StringPrintHandle, (uint32_t)indicate_1, osWaitForever);
				  osMessagePut(StringPrintHandle, (uint32_t)key_board, osWaitForever);
 8002732:	4b27      	ldr	r3, [pc, #156]	@ (80027d0 <Key_Task+0x1ac>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800273a:	f04f 32ff 	mov.w	r2, #4294967295
 800273e:	4618      	mov	r0, r3
 8002740:	f003 fdc8 	bl	80062d4 <osMessagePut>
				  key_board[strlen(key_board)+1] = UPGRADE(CODE_KEY);
 8002744:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002748:	4618      	mov	r0, r3
 800274a:	f7fd fd01 	bl	8000150 <strlen>
 800274e:	4603      	mov	r3, r0
 8002750:	3301      	adds	r3, #1
 8002752:	3340      	adds	r3, #64	@ 0x40
 8002754:	443b      	add	r3, r7
 8002756:	2282      	movs	r2, #130	@ 0x82
 8002758:	f803 2c1c 	strb.w	r2, [r3, #-28]
				  osMessagePut(StringRS485Handle, (uint32_t)key_board, osWaitForever);
 800275c:	4b1d      	ldr	r3, [pc, #116]	@ (80027d4 <Key_Task+0x1b0>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8002764:	f04f 32ff 	mov.w	r2, #4294967295
 8002768:	4618      	mov	r0, r3
 800276a:	f003 fdb3 	bl	80062d4 <osMessagePut>
				  len_key_board = 0;
 800276e:	2300      	movs	r3, #0
 8002770:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8002774:	e01c      	b.n	80027b0 <Key_Task+0x18c>
			  }
			  else if(C == '*' && len_key_board > 0)
 8002776:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800277a:	2b2a      	cmp	r3, #42	@ 0x2a
 800277c:	d118      	bne.n	80027b0 <Key_Task+0x18c>
 800277e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002782:	2b00      	cmp	r3, #0
 8002784:	d014      	beq.n	80027b0 <Key_Task+0x18c>
			  {
				  key_board[--len_key_board] = '\0';
 8002786:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800278a:	3b01      	subs	r3, #1
 800278c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8002790:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002794:	3340      	adds	r3, #64	@ 0x40
 8002796:	443b      	add	r3, r7
 8002798:	2200      	movs	r2, #0
 800279a:	f803 2c1c 	strb.w	r2, [r3, #-28]
				  osMessagePut(StringPrintHandle, (uint32_t)key_board, osWaitForever);
 800279e:	4b0c      	ldr	r3, [pc, #48]	@ (80027d0 <Key_Task+0x1ac>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80027a6:	f04f 32ff 	mov.w	r2, #4294967295
 80027aa:	4618      	mov	r0, r3
 80027ac:	f003 fd92 	bl	80062d4 <osMessagePut>
			  }
		  }
	  }
	  last_touch = new_touch;
 80027b0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80027b2:	87bb      	strh	r3, [r7, #60]	@ 0x3c

	  UserDelayUntil(&GetTick,200);
 80027b4:	f107 0320 	add.w	r3, r7, #32
 80027b8:	21c8      	movs	r1, #200	@ 0xc8
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff f9f4 	bl	8001ba8 <UserDelayUntil>
		if (osMutexWait(I2C_BusHandle, osWaitForever) == osOK)
 80027c0:	e73d      	b.n	800263e <Key_Task+0x1a>
 80027c2:	bf00      	nop
 80027c4:	200005fc 	.word	0x200005fc
 80027c8:	20000608 	.word	0x20000608
 80027cc:	0800bcf0 	.word	0x0800bcf0
 80027d0:	200005f4 	.word	0x200005f4
 80027d4:	200005f8 	.word	0x200005f8

080027d8 <TX_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TX_Task */
void TX_Task(void const * argument)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b094      	sub	sp, #80	@ 0x50
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TX_Task */
  /* Infinite loop */
	char *receivedMessageTX = NULL;
 80027e0:	2300      	movs	r3, #0
 80027e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	char send_to_bus_rs485[50];
	osEvent event;
	uint32_t GetTick = 0;
 80027e4:	2300      	movs	r3, #0
 80027e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  for(;;)
  {
	  event = osMessageGet(StringRS485Handle, osWaitForever);
 80027e8:	4b25      	ldr	r3, [pc, #148]	@ (8002880 <TX_Task+0xa8>)
 80027ea:	6819      	ldr	r1, [r3, #0]
 80027ec:	f107 0308 	add.w	r3, r7, #8
 80027f0:	f04f 32ff 	mov.w	r2, #4294967295
 80027f4:	4618      	mov	r0, r3
 80027f6:	f003 fdad 	bl	8006354 <osMessageGet>
	  if (event.status == osEventMessage) {
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	2b10      	cmp	r3, #16
 80027fe:	d13a      	bne.n	8002876 <TX_Task+0x9e>
		  receivedMessageTX = (char*)event.value.v;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	64fb      	str	r3, [r7, #76]	@ 0x4c
		  memset(send_to_bus_rs485,0,sizeof(send_to_bus_rs485));
 8002804:	f107 0314 	add.w	r3, r7, #20
 8002808:	2232      	movs	r2, #50	@ 0x32
 800280a:	2100      	movs	r1, #0
 800280c:	4618      	mov	r0, r3
 800280e:	f007 f882 	bl	8009916 <memset>
		  uint8_t Code = receivedMessageTX[strlen(receivedMessageTX)+1];
 8002812:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002814:	f7fd fc9c 	bl	8000150 <strlen>
 8002818:	4603      	mov	r3, r0
 800281a:	3301      	adds	r3, #1
 800281c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800281e:	4413      	add	r3, r2
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		  memcpy(send_to_bus_rs485, receivedMessageTX, strlen(receivedMessageTX));
 8002826:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002828:	f7fd fc92 	bl	8000150 <strlen>
 800282c:	4602      	mov	r2, r0
 800282e:	f107 0314 	add.w	r3, r7, #20
 8002832:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002834:	4618      	mov	r0, r3
 8002836:	f007 f964 	bl	8009b02 <memcpy>
		  gen_data_send_rs485(Code,send_to_bus_rs485);
 800283a:	f107 0214 	add.w	r2, r7, #20
 800283e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002842:	4611      	mov	r1, r2
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff f937 	bl	8001ab8 <gen_data_send_rs485>
		  if(HAL_UART_Transmit(&huart1, (uint8_t *)send_to_bus_rs485, strlen(send_to_bus_rs485) , 1000) == HAL_OK)
 800284a:	f107 0314 	add.w	r3, r7, #20
 800284e:	4618      	mov	r0, r3
 8002850:	f7fd fc7e 	bl	8000150 <strlen>
 8002854:	4603      	mov	r3, r0
 8002856:	b29a      	uxth	r2, r3
 8002858:	f107 0114 	add.w	r1, r7, #20
 800285c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002860:	4808      	ldr	r0, [pc, #32]	@ (8002884 <TX_Task+0xac>)
 8002862:	f003 f977 	bl	8005b54 <HAL_UART_Transmit>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d104      	bne.n	8002876 <TX_Task+0x9e>
		  {
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800286c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002870:	4805      	ldr	r0, [pc, #20]	@ (8002888 <TX_Task+0xb0>)
 8002872:	f000 fd4f 	bl	8003314 <HAL_GPIO_TogglePin>
		  }
	  }
//	  UserDelayUntil(&GetTick,1000);
	  osDelay(500);
 8002876:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800287a:	f003 fc52 	bl	8006122 <osDelay>
	  event = osMessageGet(StringRS485Handle, osWaitForever);
 800287e:	e7b3      	b.n	80027e8 <TX_Task+0x10>
 8002880:	200005f8 	.word	0x200005f8
 8002884:	20000594 	.word	0x20000594
 8002888:	40011000 	.word	0x40011000

0800288c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a04      	ldr	r2, [pc, #16]	@ (80028ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d101      	bne.n	80028a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800289e:	f000 fa7d 	bl	8002d9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	40000800 	.word	0x40000800

080028b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028b4:	b672      	cpsid	i
}
 80028b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028b8:	bf00      	nop
 80028ba:	e7fd      	b.n	80028b8 <Error_Handler+0x8>

080028bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80028c2:	4b18      	ldr	r3, [pc, #96]	@ (8002924 <HAL_MspInit+0x68>)
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	4a17      	ldr	r2, [pc, #92]	@ (8002924 <HAL_MspInit+0x68>)
 80028c8:	f043 0301 	orr.w	r3, r3, #1
 80028cc:	6193      	str	r3, [r2, #24]
 80028ce:	4b15      	ldr	r3, [pc, #84]	@ (8002924 <HAL_MspInit+0x68>)
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	60bb      	str	r3, [r7, #8]
 80028d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028da:	4b12      	ldr	r3, [pc, #72]	@ (8002924 <HAL_MspInit+0x68>)
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	4a11      	ldr	r2, [pc, #68]	@ (8002924 <HAL_MspInit+0x68>)
 80028e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028e4:	61d3      	str	r3, [r2, #28]
 80028e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002924 <HAL_MspInit+0x68>)
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ee:	607b      	str	r3, [r7, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80028f2:	2200      	movs	r2, #0
 80028f4:	210f      	movs	r1, #15
 80028f6:	f06f 0001 	mvn.w	r0, #1
 80028fa:	f000 fb44 	bl	8002f86 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80028fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002928 <HAL_MspInit+0x6c>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	60fb      	str	r3, [r7, #12]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	4a04      	ldr	r2, [pc, #16]	@ (8002928 <HAL_MspInit+0x6c>)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800291a:	bf00      	nop
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40021000 	.word	0x40021000
 8002928:	40010000 	.word	0x40010000

0800292c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b088      	sub	sp, #32
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002934:	f107 0310 	add.w	r3, r7, #16
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	605a      	str	r2, [r3, #4]
 800293e:	609a      	str	r2, [r3, #8]
 8002940:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a15      	ldr	r2, [pc, #84]	@ (800299c <HAL_I2C_MspInit+0x70>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d123      	bne.n	8002994 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800294c:	4b14      	ldr	r3, [pc, #80]	@ (80029a0 <HAL_I2C_MspInit+0x74>)
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	4a13      	ldr	r2, [pc, #76]	@ (80029a0 <HAL_I2C_MspInit+0x74>)
 8002952:	f043 0308 	orr.w	r3, r3, #8
 8002956:	6193      	str	r3, [r2, #24]
 8002958:	4b11      	ldr	r3, [pc, #68]	@ (80029a0 <HAL_I2C_MspInit+0x74>)
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	f003 0308 	and.w	r3, r3, #8
 8002960:	60fb      	str	r3, [r7, #12]
 8002962:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002964:	23c0      	movs	r3, #192	@ 0xc0
 8002966:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002968:	2312      	movs	r3, #18
 800296a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800296c:	2303      	movs	r3, #3
 800296e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002970:	f107 0310 	add.w	r3, r7, #16
 8002974:	4619      	mov	r1, r3
 8002976:	480b      	ldr	r0, [pc, #44]	@ (80029a4 <HAL_I2C_MspInit+0x78>)
 8002978:	f000 fb30 	bl	8002fdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800297c:	4b08      	ldr	r3, [pc, #32]	@ (80029a0 <HAL_I2C_MspInit+0x74>)
 800297e:	69db      	ldr	r3, [r3, #28]
 8002980:	4a07      	ldr	r2, [pc, #28]	@ (80029a0 <HAL_I2C_MspInit+0x74>)
 8002982:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002986:	61d3      	str	r3, [r2, #28]
 8002988:	4b05      	ldr	r3, [pc, #20]	@ (80029a0 <HAL_I2C_MspInit+0x74>)
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002990:	60bb      	str	r3, [r7, #8]
 8002992:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002994:	bf00      	nop
 8002996:	3720      	adds	r7, #32
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40005400 	.word	0x40005400
 80029a0:	40021000 	.word	0x40021000
 80029a4:	40010c00 	.word	0x40010c00

080029a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b088      	sub	sp, #32
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b0:	f107 0310 	add.w	r3, r7, #16
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	605a      	str	r2, [r3, #4]
 80029ba:	609a      	str	r2, [r3, #8]
 80029bc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a1c      	ldr	r2, [pc, #112]	@ (8002a34 <HAL_UART_MspInit+0x8c>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d131      	bne.n	8002a2c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a38 <HAL_UART_MspInit+0x90>)
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	4a1a      	ldr	r2, [pc, #104]	@ (8002a38 <HAL_UART_MspInit+0x90>)
 80029ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029d2:	6193      	str	r3, [r2, #24]
 80029d4:	4b18      	ldr	r3, [pc, #96]	@ (8002a38 <HAL_UART_MspInit+0x90>)
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e0:	4b15      	ldr	r3, [pc, #84]	@ (8002a38 <HAL_UART_MspInit+0x90>)
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	4a14      	ldr	r2, [pc, #80]	@ (8002a38 <HAL_UART_MspInit+0x90>)
 80029e6:	f043 0304 	orr.w	r3, r3, #4
 80029ea:	6193      	str	r3, [r2, #24]
 80029ec:	4b12      	ldr	r3, [pc, #72]	@ (8002a38 <HAL_UART_MspInit+0x90>)
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	60bb      	str	r3, [r7, #8]
 80029f6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80029f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80029fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fe:	2302      	movs	r3, #2
 8002a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a02:	2303      	movs	r3, #3
 8002a04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a06:	f107 0310 	add.w	r3, r7, #16
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	480b      	ldr	r0, [pc, #44]	@ (8002a3c <HAL_UART_MspInit+0x94>)
 8002a0e:	f000 fae5 	bl	8002fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002a12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a20:	f107 0310 	add.w	r3, r7, #16
 8002a24:	4619      	mov	r1, r3
 8002a26:	4805      	ldr	r0, [pc, #20]	@ (8002a3c <HAL_UART_MspInit+0x94>)
 8002a28:	f000 fad8 	bl	8002fdc <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002a2c:	bf00      	nop
 8002a2e:	3720      	adds	r7, #32
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40013800 	.word	0x40013800
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	40010800 	.word	0x40010800

08002a40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b08e      	sub	sp, #56	@ 0x38
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8002a50:	2300      	movs	r3, #0
 8002a52:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002a56:	4b34      	ldr	r3, [pc, #208]	@ (8002b28 <HAL_InitTick+0xe8>)
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	4a33      	ldr	r2, [pc, #204]	@ (8002b28 <HAL_InitTick+0xe8>)
 8002a5c:	f043 0304 	orr.w	r3, r3, #4
 8002a60:	61d3      	str	r3, [r2, #28]
 8002a62:	4b31      	ldr	r3, [pc, #196]	@ (8002b28 <HAL_InitTick+0xe8>)
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	f003 0304 	and.w	r3, r3, #4
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a6e:	f107 0210 	add.w	r2, r7, #16
 8002a72:	f107 0314 	add.w	r3, r7, #20
 8002a76:	4611      	mov	r1, r2
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f002 fd8f 	bl	800559c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002a7e:	6a3b      	ldr	r3, [r7, #32]
 8002a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d103      	bne.n	8002a90 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002a88:	f002 fd60 	bl	800554c <HAL_RCC_GetPCLK1Freq>
 8002a8c:	6378      	str	r0, [r7, #52]	@ 0x34
 8002a8e:	e004      	b.n	8002a9a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002a90:	f002 fd5c 	bl	800554c <HAL_RCC_GetPCLK1Freq>
 8002a94:	4603      	mov	r3, r0
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002a9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a9c:	4a23      	ldr	r2, [pc, #140]	@ (8002b2c <HAL_InitTick+0xec>)
 8002a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa2:	0c9b      	lsrs	r3, r3, #18
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002aa8:	4b21      	ldr	r3, [pc, #132]	@ (8002b30 <HAL_InitTick+0xf0>)
 8002aaa:	4a22      	ldr	r2, [pc, #136]	@ (8002b34 <HAL_InitTick+0xf4>)
 8002aac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002aae:	4b20      	ldr	r3, [pc, #128]	@ (8002b30 <HAL_InitTick+0xf0>)
 8002ab0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002ab4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002ab6:	4a1e      	ldr	r2, [pc, #120]	@ (8002b30 <HAL_InitTick+0xf0>)
 8002ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aba:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002abc:	4b1c      	ldr	r3, [pc, #112]	@ (8002b30 <HAL_InitTick+0xf0>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8002b30 <HAL_InitTick+0xf0>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ac8:	4b19      	ldr	r3, [pc, #100]	@ (8002b30 <HAL_InitTick+0xf0>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8002ace:	4818      	ldr	r0, [pc, #96]	@ (8002b30 <HAL_InitTick+0xf0>)
 8002ad0:	f002 fdb2 	bl	8005638 <HAL_TIM_Base_Init>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002ada:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d11b      	bne.n	8002b1a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8002ae2:	4813      	ldr	r0, [pc, #76]	@ (8002b30 <HAL_InitTick+0xf0>)
 8002ae4:	f002 fe00 	bl	80056e8 <HAL_TIM_Base_Start_IT>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002aee:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d111      	bne.n	8002b1a <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002af6:	201e      	movs	r0, #30
 8002af8:	f000 fa61 	bl	8002fbe <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b0f      	cmp	r3, #15
 8002b00:	d808      	bhi.n	8002b14 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8002b02:	2200      	movs	r2, #0
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	201e      	movs	r0, #30
 8002b08:	f000 fa3d 	bl	8002f86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b0c:	4a0a      	ldr	r2, [pc, #40]	@ (8002b38 <HAL_InitTick+0xf8>)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6013      	str	r3, [r2, #0]
 8002b12:	e002      	b.n	8002b1a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002b1a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3738      	adds	r7, #56	@ 0x38
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	431bde83 	.word	0x431bde83
 8002b30:	2000060c 	.word	0x2000060c
 8002b34:	40000800 	.word	0x40000800
 8002b38:	20000080 	.word	0x20000080

08002b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b40:	bf00      	nop
 8002b42:	e7fd      	b.n	8002b40 <NMI_Handler+0x4>

08002b44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b48:	bf00      	nop
 8002b4a:	e7fd      	b.n	8002b48 <HardFault_Handler+0x4>

08002b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b50:	bf00      	nop
 8002b52:	e7fd      	b.n	8002b50 <MemManage_Handler+0x4>

08002b54 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b58:	bf00      	nop
 8002b5a:	e7fd      	b.n	8002b58 <BusFault_Handler+0x4>

08002b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b60:	bf00      	nop
 8002b62:	e7fd      	b.n	8002b60 <UsageFault_Handler+0x4>

08002b64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b68:	bf00      	nop
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bc80      	pop	{r7}
 8002b6e:	4770      	bx	lr

08002b70 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_Pin);
 8002b74:	2020      	movs	r0, #32
 8002b76:	f000 fbe7 	bl	8003348 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002b7a:	bf00      	nop
 8002b7c:	bd80      	pop	{r7, pc}
	...

08002b80 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002b84:	4802      	ldr	r0, [pc, #8]	@ (8002b90 <TIM4_IRQHandler+0x10>)
 8002b86:	f002 fe01 	bl	800578c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002b8a:	bf00      	nop
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	2000060c 	.word	0x2000060c

08002b94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  return 1;
 8002b98:	2301      	movs	r3, #1
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bc80      	pop	{r7}
 8002ba0:	4770      	bx	lr

08002ba2 <_kill>:

int _kill(int pid, int sig)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b082      	sub	sp, #8
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
 8002baa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002bac:	f006 ff6e 	bl	8009a8c <__errno>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2216      	movs	r2, #22
 8002bb4:	601a      	str	r2, [r3, #0]
  return -1;
 8002bb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <_exit>:

void _exit (int status)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b082      	sub	sp, #8
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002bca:	f04f 31ff 	mov.w	r1, #4294967295
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7ff ffe7 	bl	8002ba2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002bd4:	bf00      	nop
 8002bd6:	e7fd      	b.n	8002bd4 <_exit+0x12>

08002bd8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002be4:	2300      	movs	r3, #0
 8002be6:	617b      	str	r3, [r7, #20]
 8002be8:	e00a      	b.n	8002c00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002bea:	f3af 8000 	nop.w
 8002bee:	4601      	mov	r1, r0
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	1c5a      	adds	r2, r3, #1
 8002bf4:	60ba      	str	r2, [r7, #8]
 8002bf6:	b2ca      	uxtb	r2, r1
 8002bf8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	617b      	str	r3, [r7, #20]
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	dbf0      	blt.n	8002bea <_read+0x12>
  }

  return len;
 8002c08:	687b      	ldr	r3, [r7, #4]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b086      	sub	sp, #24
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	60f8      	str	r0, [r7, #12]
 8002c1a:	60b9      	str	r1, [r7, #8]
 8002c1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c1e:	2300      	movs	r3, #0
 8002c20:	617b      	str	r3, [r7, #20]
 8002c22:	e009      	b.n	8002c38 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	1c5a      	adds	r2, r3, #1
 8002c28:	60ba      	str	r2, [r7, #8]
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	3301      	adds	r3, #1
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	dbf1      	blt.n	8002c24 <_write+0x12>
  }
  return len;
 8002c40:	687b      	ldr	r3, [r7, #4]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3718      	adds	r7, #24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <_close>:

int _close(int file)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr

08002c60 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c70:	605a      	str	r2, [r3, #4]
  return 0;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bc80      	pop	{r7}
 8002c7c:	4770      	bx	lr

08002c7e <_isatty>:

int _isatty(int file)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c86:	2301      	movs	r3, #1
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bc80      	pop	{r7}
 8002c90:	4770      	bx	lr

08002c92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c92:	b480      	push	{r7}
 8002c94:	b085      	sub	sp, #20
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	60f8      	str	r0, [r7, #12]
 8002c9a:	60b9      	str	r1, [r7, #8]
 8002c9c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr
	...

08002cac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cb4:	4a14      	ldr	r2, [pc, #80]	@ (8002d08 <_sbrk+0x5c>)
 8002cb6:	4b15      	ldr	r3, [pc, #84]	@ (8002d0c <_sbrk+0x60>)
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cc0:	4b13      	ldr	r3, [pc, #76]	@ (8002d10 <_sbrk+0x64>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d102      	bne.n	8002cce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cc8:	4b11      	ldr	r3, [pc, #68]	@ (8002d10 <_sbrk+0x64>)
 8002cca:	4a12      	ldr	r2, [pc, #72]	@ (8002d14 <_sbrk+0x68>)
 8002ccc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cce:	4b10      	ldr	r3, [pc, #64]	@ (8002d10 <_sbrk+0x64>)
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d207      	bcs.n	8002cec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cdc:	f006 fed6 	bl	8009a8c <__errno>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	220c      	movs	r2, #12
 8002ce4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cea:	e009      	b.n	8002d00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cec:	4b08      	ldr	r3, [pc, #32]	@ (8002d10 <_sbrk+0x64>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cf2:	4b07      	ldr	r3, [pc, #28]	@ (8002d10 <_sbrk+0x64>)
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	4a05      	ldr	r2, [pc, #20]	@ (8002d10 <_sbrk+0x64>)
 8002cfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3718      	adds	r7, #24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	20005000 	.word	0x20005000
 8002d0c:	00000400 	.word	0x00000400
 8002d10:	20000654 	.word	0x20000654
 8002d14:	20004908 	.word	0x20004908

08002d18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d1c:	bf00      	nop
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr

08002d24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d24:	f7ff fff8 	bl	8002d18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d28:	480b      	ldr	r0, [pc, #44]	@ (8002d58 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002d2a:	490c      	ldr	r1, [pc, #48]	@ (8002d5c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002d2c:	4a0c      	ldr	r2, [pc, #48]	@ (8002d60 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d30:	e002      	b.n	8002d38 <LoopCopyDataInit>

08002d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d36:	3304      	adds	r3, #4

08002d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d3c:	d3f9      	bcc.n	8002d32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d3e:	4a09      	ldr	r2, [pc, #36]	@ (8002d64 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002d40:	4c09      	ldr	r4, [pc, #36]	@ (8002d68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d44:	e001      	b.n	8002d4a <LoopFillZerobss>

08002d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d48:	3204      	adds	r2, #4

08002d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d4c:	d3fb      	bcc.n	8002d46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d4e:	f006 fea3 	bl	8009a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d52:	f7fe ff53 	bl	8001bfc <main>
  bx lr
 8002d56:	4770      	bx	lr
  ldr r0, =_sdata
 8002d58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d5c:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 8002d60:	0800c0e8 	.word	0x0800c0e8
  ldr r2, =_sbss
 8002d64:	20000254 	.word	0x20000254
  ldr r4, =_ebss
 8002d68:	20004904 	.word	0x20004904

08002d6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d6c:	e7fe      	b.n	8002d6c <ADC1_2_IRQHandler>
	...

08002d70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d74:	4b08      	ldr	r3, [pc, #32]	@ (8002d98 <HAL_Init+0x28>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a07      	ldr	r2, [pc, #28]	@ (8002d98 <HAL_Init+0x28>)
 8002d7a:	f043 0310 	orr.w	r3, r3, #16
 8002d7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d80:	2003      	movs	r0, #3
 8002d82:	f000 f8f5 	bl	8002f70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d86:	200f      	movs	r0, #15
 8002d88:	f7ff fe5a 	bl	8002a40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d8c:	f7ff fd96 	bl	80028bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	40022000 	.word	0x40022000

08002d9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002da0:	4b05      	ldr	r3, [pc, #20]	@ (8002db8 <HAL_IncTick+0x1c>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	461a      	mov	r2, r3
 8002da6:	4b05      	ldr	r3, [pc, #20]	@ (8002dbc <HAL_IncTick+0x20>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4413      	add	r3, r2
 8002dac:	4a03      	ldr	r2, [pc, #12]	@ (8002dbc <HAL_IncTick+0x20>)
 8002dae:	6013      	str	r3, [r2, #0]
}
 8002db0:	bf00      	nop
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr
 8002db8:	20000084 	.word	0x20000084
 8002dbc:	20000658 	.word	0x20000658

08002dc0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8002dc4:	4b02      	ldr	r3, [pc, #8]	@ (8002dd0 <HAL_GetTick+0x10>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr
 8002dd0:	20000658 	.word	0x20000658

08002dd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ddc:	f7ff fff0 	bl	8002dc0 <HAL_GetTick>
 8002de0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dec:	d005      	beq.n	8002dfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dee:	4b0a      	ldr	r3, [pc, #40]	@ (8002e18 <HAL_Delay+0x44>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	461a      	mov	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	4413      	add	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002dfa:	bf00      	nop
 8002dfc:	f7ff ffe0 	bl	8002dc0 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d8f7      	bhi.n	8002dfc <HAL_Delay+0x28>
  {
  }
}
 8002e0c:	bf00      	nop
 8002e0e:	bf00      	nop
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	20000084 	.word	0x20000084

08002e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e60 <__NVIC_SetPriorityGrouping+0x44>)
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e32:	68ba      	ldr	r2, [r7, #8]
 8002e34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e38:	4013      	ands	r3, r2
 8002e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e4e:	4a04      	ldr	r2, [pc, #16]	@ (8002e60 <__NVIC_SetPriorityGrouping+0x44>)
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	60d3      	str	r3, [r2, #12]
}
 8002e54:	bf00      	nop
 8002e56:	3714      	adds	r7, #20
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	e000ed00 	.word	0xe000ed00

08002e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e68:	4b04      	ldr	r3, [pc, #16]	@ (8002e7c <__NVIC_GetPriorityGrouping+0x18>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	0a1b      	lsrs	r3, r3, #8
 8002e6e:	f003 0307 	and.w	r3, r3, #7
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bc80      	pop	{r7}
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	e000ed00 	.word	0xe000ed00

08002e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	4603      	mov	r3, r0
 8002e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	db0b      	blt.n	8002eaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e92:	79fb      	ldrb	r3, [r7, #7]
 8002e94:	f003 021f 	and.w	r2, r3, #31
 8002e98:	4906      	ldr	r1, [pc, #24]	@ (8002eb4 <__NVIC_EnableIRQ+0x34>)
 8002e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9e:	095b      	lsrs	r3, r3, #5
 8002ea0:	2001      	movs	r0, #1
 8002ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc80      	pop	{r7}
 8002eb2:	4770      	bx	lr
 8002eb4:	e000e100 	.word	0xe000e100

08002eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	6039      	str	r1, [r7, #0]
 8002ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	db0a      	blt.n	8002ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	490c      	ldr	r1, [pc, #48]	@ (8002f04 <__NVIC_SetPriority+0x4c>)
 8002ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed6:	0112      	lsls	r2, r2, #4
 8002ed8:	b2d2      	uxtb	r2, r2
 8002eda:	440b      	add	r3, r1
 8002edc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ee0:	e00a      	b.n	8002ef8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	b2da      	uxtb	r2, r3
 8002ee6:	4908      	ldr	r1, [pc, #32]	@ (8002f08 <__NVIC_SetPriority+0x50>)
 8002ee8:	79fb      	ldrb	r3, [r7, #7]
 8002eea:	f003 030f 	and.w	r3, r3, #15
 8002eee:	3b04      	subs	r3, #4
 8002ef0:	0112      	lsls	r2, r2, #4
 8002ef2:	b2d2      	uxtb	r2, r2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	761a      	strb	r2, [r3, #24]
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bc80      	pop	{r7}
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	e000e100 	.word	0xe000e100
 8002f08:	e000ed00 	.word	0xe000ed00

08002f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b089      	sub	sp, #36	@ 0x24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	f1c3 0307 	rsb	r3, r3, #7
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	bf28      	it	cs
 8002f2a:	2304      	movcs	r3, #4
 8002f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	3304      	adds	r3, #4
 8002f32:	2b06      	cmp	r3, #6
 8002f34:	d902      	bls.n	8002f3c <NVIC_EncodePriority+0x30>
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	3b03      	subs	r3, #3
 8002f3a:	e000      	b.n	8002f3e <NVIC_EncodePriority+0x32>
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f40:	f04f 32ff 	mov.w	r2, #4294967295
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	43da      	mvns	r2, r3
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	401a      	ands	r2, r3
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f54:	f04f 31ff 	mov.w	r1, #4294967295
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5e:	43d9      	mvns	r1, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f64:	4313      	orrs	r3, r2
         );
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3724      	adds	r7, #36	@ 0x24
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr

08002f70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f7ff ff4f 	bl	8002e1c <__NVIC_SetPriorityGrouping>
}
 8002f7e:	bf00      	nop
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b086      	sub	sp, #24
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	60b9      	str	r1, [r7, #8]
 8002f90:	607a      	str	r2, [r7, #4]
 8002f92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f94:	2300      	movs	r3, #0
 8002f96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f98:	f7ff ff64 	bl	8002e64 <__NVIC_GetPriorityGrouping>
 8002f9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	68b9      	ldr	r1, [r7, #8]
 8002fa2:	6978      	ldr	r0, [r7, #20]
 8002fa4:	f7ff ffb2 	bl	8002f0c <NVIC_EncodePriority>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fae:	4611      	mov	r1, r2
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff ff81 	bl	8002eb8 <__NVIC_SetPriority>
}
 8002fb6:	bf00      	nop
 8002fb8:	3718      	adds	r7, #24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b082      	sub	sp, #8
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7ff ff57 	bl	8002e80 <__NVIC_EnableIRQ>
}
 8002fd2:	bf00      	nop
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
	...

08002fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b08b      	sub	sp, #44	@ 0x2c
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002fea:	2300      	movs	r3, #0
 8002fec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fee:	e169      	b.n	80032c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	69fa      	ldr	r2, [r7, #28]
 8003000:	4013      	ands	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	429a      	cmp	r2, r3
 800300a:	f040 8158 	bne.w	80032be <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	4a9a      	ldr	r2, [pc, #616]	@ (800327c <HAL_GPIO_Init+0x2a0>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d05e      	beq.n	80030d6 <HAL_GPIO_Init+0xfa>
 8003018:	4a98      	ldr	r2, [pc, #608]	@ (800327c <HAL_GPIO_Init+0x2a0>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d875      	bhi.n	800310a <HAL_GPIO_Init+0x12e>
 800301e:	4a98      	ldr	r2, [pc, #608]	@ (8003280 <HAL_GPIO_Init+0x2a4>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d058      	beq.n	80030d6 <HAL_GPIO_Init+0xfa>
 8003024:	4a96      	ldr	r2, [pc, #600]	@ (8003280 <HAL_GPIO_Init+0x2a4>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d86f      	bhi.n	800310a <HAL_GPIO_Init+0x12e>
 800302a:	4a96      	ldr	r2, [pc, #600]	@ (8003284 <HAL_GPIO_Init+0x2a8>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d052      	beq.n	80030d6 <HAL_GPIO_Init+0xfa>
 8003030:	4a94      	ldr	r2, [pc, #592]	@ (8003284 <HAL_GPIO_Init+0x2a8>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d869      	bhi.n	800310a <HAL_GPIO_Init+0x12e>
 8003036:	4a94      	ldr	r2, [pc, #592]	@ (8003288 <HAL_GPIO_Init+0x2ac>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d04c      	beq.n	80030d6 <HAL_GPIO_Init+0xfa>
 800303c:	4a92      	ldr	r2, [pc, #584]	@ (8003288 <HAL_GPIO_Init+0x2ac>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d863      	bhi.n	800310a <HAL_GPIO_Init+0x12e>
 8003042:	4a92      	ldr	r2, [pc, #584]	@ (800328c <HAL_GPIO_Init+0x2b0>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d046      	beq.n	80030d6 <HAL_GPIO_Init+0xfa>
 8003048:	4a90      	ldr	r2, [pc, #576]	@ (800328c <HAL_GPIO_Init+0x2b0>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d85d      	bhi.n	800310a <HAL_GPIO_Init+0x12e>
 800304e:	2b12      	cmp	r3, #18
 8003050:	d82a      	bhi.n	80030a8 <HAL_GPIO_Init+0xcc>
 8003052:	2b12      	cmp	r3, #18
 8003054:	d859      	bhi.n	800310a <HAL_GPIO_Init+0x12e>
 8003056:	a201      	add	r2, pc, #4	@ (adr r2, 800305c <HAL_GPIO_Init+0x80>)
 8003058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800305c:	080030d7 	.word	0x080030d7
 8003060:	080030b1 	.word	0x080030b1
 8003064:	080030c3 	.word	0x080030c3
 8003068:	08003105 	.word	0x08003105
 800306c:	0800310b 	.word	0x0800310b
 8003070:	0800310b 	.word	0x0800310b
 8003074:	0800310b 	.word	0x0800310b
 8003078:	0800310b 	.word	0x0800310b
 800307c:	0800310b 	.word	0x0800310b
 8003080:	0800310b 	.word	0x0800310b
 8003084:	0800310b 	.word	0x0800310b
 8003088:	0800310b 	.word	0x0800310b
 800308c:	0800310b 	.word	0x0800310b
 8003090:	0800310b 	.word	0x0800310b
 8003094:	0800310b 	.word	0x0800310b
 8003098:	0800310b 	.word	0x0800310b
 800309c:	0800310b 	.word	0x0800310b
 80030a0:	080030b9 	.word	0x080030b9
 80030a4:	080030cd 	.word	0x080030cd
 80030a8:	4a79      	ldr	r2, [pc, #484]	@ (8003290 <HAL_GPIO_Init+0x2b4>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d013      	beq.n	80030d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80030ae:	e02c      	b.n	800310a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	623b      	str	r3, [r7, #32]
          break;
 80030b6:	e029      	b.n	800310c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	3304      	adds	r3, #4
 80030be:	623b      	str	r3, [r7, #32]
          break;
 80030c0:	e024      	b.n	800310c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	3308      	adds	r3, #8
 80030c8:	623b      	str	r3, [r7, #32]
          break;
 80030ca:	e01f      	b.n	800310c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	330c      	adds	r3, #12
 80030d2:	623b      	str	r3, [r7, #32]
          break;
 80030d4:	e01a      	b.n	800310c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d102      	bne.n	80030e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80030de:	2304      	movs	r3, #4
 80030e0:	623b      	str	r3, [r7, #32]
          break;
 80030e2:	e013      	b.n	800310c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d105      	bne.n	80030f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030ec:	2308      	movs	r3, #8
 80030ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	69fa      	ldr	r2, [r7, #28]
 80030f4:	611a      	str	r2, [r3, #16]
          break;
 80030f6:	e009      	b.n	800310c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030f8:	2308      	movs	r3, #8
 80030fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	69fa      	ldr	r2, [r7, #28]
 8003100:	615a      	str	r2, [r3, #20]
          break;
 8003102:	e003      	b.n	800310c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003104:	2300      	movs	r3, #0
 8003106:	623b      	str	r3, [r7, #32]
          break;
 8003108:	e000      	b.n	800310c <HAL_GPIO_Init+0x130>
          break;
 800310a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	2bff      	cmp	r3, #255	@ 0xff
 8003110:	d801      	bhi.n	8003116 <HAL_GPIO_Init+0x13a>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	e001      	b.n	800311a <HAL_GPIO_Init+0x13e>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	3304      	adds	r3, #4
 800311a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	2bff      	cmp	r3, #255	@ 0xff
 8003120:	d802      	bhi.n	8003128 <HAL_GPIO_Init+0x14c>
 8003122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	e002      	b.n	800312e <HAL_GPIO_Init+0x152>
 8003128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800312a:	3b08      	subs	r3, #8
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	210f      	movs	r1, #15
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	fa01 f303 	lsl.w	r3, r1, r3
 800313c:	43db      	mvns	r3, r3
 800313e:	401a      	ands	r2, r3
 8003140:	6a39      	ldr	r1, [r7, #32]
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	fa01 f303 	lsl.w	r3, r1, r3
 8003148:	431a      	orrs	r2, r3
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	f000 80b1 	beq.w	80032be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800315c:	4b4d      	ldr	r3, [pc, #308]	@ (8003294 <HAL_GPIO_Init+0x2b8>)
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	4a4c      	ldr	r2, [pc, #304]	@ (8003294 <HAL_GPIO_Init+0x2b8>)
 8003162:	f043 0301 	orr.w	r3, r3, #1
 8003166:	6193      	str	r3, [r2, #24]
 8003168:	4b4a      	ldr	r3, [pc, #296]	@ (8003294 <HAL_GPIO_Init+0x2b8>)
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	60bb      	str	r3, [r7, #8]
 8003172:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003174:	4a48      	ldr	r2, [pc, #288]	@ (8003298 <HAL_GPIO_Init+0x2bc>)
 8003176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003178:	089b      	lsrs	r3, r3, #2
 800317a:	3302      	adds	r3, #2
 800317c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003180:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003184:	f003 0303 	and.w	r3, r3, #3
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	220f      	movs	r2, #15
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	43db      	mvns	r3, r3
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	4013      	ands	r3, r2
 8003196:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a40      	ldr	r2, [pc, #256]	@ (800329c <HAL_GPIO_Init+0x2c0>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d013      	beq.n	80031c8 <HAL_GPIO_Init+0x1ec>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a3f      	ldr	r2, [pc, #252]	@ (80032a0 <HAL_GPIO_Init+0x2c4>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d00d      	beq.n	80031c4 <HAL_GPIO_Init+0x1e8>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a3e      	ldr	r2, [pc, #248]	@ (80032a4 <HAL_GPIO_Init+0x2c8>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d007      	beq.n	80031c0 <HAL_GPIO_Init+0x1e4>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a3d      	ldr	r2, [pc, #244]	@ (80032a8 <HAL_GPIO_Init+0x2cc>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d101      	bne.n	80031bc <HAL_GPIO_Init+0x1e0>
 80031b8:	2303      	movs	r3, #3
 80031ba:	e006      	b.n	80031ca <HAL_GPIO_Init+0x1ee>
 80031bc:	2304      	movs	r3, #4
 80031be:	e004      	b.n	80031ca <HAL_GPIO_Init+0x1ee>
 80031c0:	2302      	movs	r3, #2
 80031c2:	e002      	b.n	80031ca <HAL_GPIO_Init+0x1ee>
 80031c4:	2301      	movs	r3, #1
 80031c6:	e000      	b.n	80031ca <HAL_GPIO_Init+0x1ee>
 80031c8:	2300      	movs	r3, #0
 80031ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031cc:	f002 0203 	and.w	r2, r2, #3
 80031d0:	0092      	lsls	r2, r2, #2
 80031d2:	4093      	lsls	r3, r2
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80031da:	492f      	ldr	r1, [pc, #188]	@ (8003298 <HAL_GPIO_Init+0x2bc>)
 80031dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031de:	089b      	lsrs	r3, r3, #2
 80031e0:	3302      	adds	r3, #2
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d006      	beq.n	8003202 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80031f4:	4b2d      	ldr	r3, [pc, #180]	@ (80032ac <HAL_GPIO_Init+0x2d0>)
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	492c      	ldr	r1, [pc, #176]	@ (80032ac <HAL_GPIO_Init+0x2d0>)
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	608b      	str	r3, [r1, #8]
 8003200:	e006      	b.n	8003210 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003202:	4b2a      	ldr	r3, [pc, #168]	@ (80032ac <HAL_GPIO_Init+0x2d0>)
 8003204:	689a      	ldr	r2, [r3, #8]
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	43db      	mvns	r3, r3
 800320a:	4928      	ldr	r1, [pc, #160]	@ (80032ac <HAL_GPIO_Init+0x2d0>)
 800320c:	4013      	ands	r3, r2
 800320e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d006      	beq.n	800322a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800321c:	4b23      	ldr	r3, [pc, #140]	@ (80032ac <HAL_GPIO_Init+0x2d0>)
 800321e:	68da      	ldr	r2, [r3, #12]
 8003220:	4922      	ldr	r1, [pc, #136]	@ (80032ac <HAL_GPIO_Init+0x2d0>)
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	4313      	orrs	r3, r2
 8003226:	60cb      	str	r3, [r1, #12]
 8003228:	e006      	b.n	8003238 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800322a:	4b20      	ldr	r3, [pc, #128]	@ (80032ac <HAL_GPIO_Init+0x2d0>)
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	43db      	mvns	r3, r3
 8003232:	491e      	ldr	r1, [pc, #120]	@ (80032ac <HAL_GPIO_Init+0x2d0>)
 8003234:	4013      	ands	r3, r2
 8003236:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d006      	beq.n	8003252 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003244:	4b19      	ldr	r3, [pc, #100]	@ (80032ac <HAL_GPIO_Init+0x2d0>)
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	4918      	ldr	r1, [pc, #96]	@ (80032ac <HAL_GPIO_Init+0x2d0>)
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	4313      	orrs	r3, r2
 800324e:	604b      	str	r3, [r1, #4]
 8003250:	e006      	b.n	8003260 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003252:	4b16      	ldr	r3, [pc, #88]	@ (80032ac <HAL_GPIO_Init+0x2d0>)
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	43db      	mvns	r3, r3
 800325a:	4914      	ldr	r1, [pc, #80]	@ (80032ac <HAL_GPIO_Init+0x2d0>)
 800325c:	4013      	ands	r3, r2
 800325e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d021      	beq.n	80032b0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800326c:	4b0f      	ldr	r3, [pc, #60]	@ (80032ac <HAL_GPIO_Init+0x2d0>)
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	490e      	ldr	r1, [pc, #56]	@ (80032ac <HAL_GPIO_Init+0x2d0>)
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	4313      	orrs	r3, r2
 8003276:	600b      	str	r3, [r1, #0]
 8003278:	e021      	b.n	80032be <HAL_GPIO_Init+0x2e2>
 800327a:	bf00      	nop
 800327c:	10320000 	.word	0x10320000
 8003280:	10310000 	.word	0x10310000
 8003284:	10220000 	.word	0x10220000
 8003288:	10210000 	.word	0x10210000
 800328c:	10120000 	.word	0x10120000
 8003290:	10110000 	.word	0x10110000
 8003294:	40021000 	.word	0x40021000
 8003298:	40010000 	.word	0x40010000
 800329c:	40010800 	.word	0x40010800
 80032a0:	40010c00 	.word	0x40010c00
 80032a4:	40011000 	.word	0x40011000
 80032a8:	40011400 	.word	0x40011400
 80032ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80032b0:	4b0b      	ldr	r3, [pc, #44]	@ (80032e0 <HAL_GPIO_Init+0x304>)
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	43db      	mvns	r3, r3
 80032b8:	4909      	ldr	r1, [pc, #36]	@ (80032e0 <HAL_GPIO_Init+0x304>)
 80032ba:	4013      	ands	r3, r2
 80032bc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80032be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c0:	3301      	adds	r3, #1
 80032c2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ca:	fa22 f303 	lsr.w	r3, r2, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f47f ae8e 	bne.w	8002ff0 <HAL_GPIO_Init+0x14>
  }
}
 80032d4:	bf00      	nop
 80032d6:	bf00      	nop
 80032d8:	372c      	adds	r7, #44	@ 0x2c
 80032da:	46bd      	mov	sp, r7
 80032dc:	bc80      	pop	{r7}
 80032de:	4770      	bx	lr
 80032e0:	40010400 	.word	0x40010400

080032e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	460b      	mov	r3, r1
 80032ee:	807b      	strh	r3, [r7, #2]
 80032f0:	4613      	mov	r3, r2
 80032f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032f4:	787b      	ldrb	r3, [r7, #1]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032fa:	887a      	ldrh	r2, [r7, #2]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003300:	e003      	b.n	800330a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003302:	887b      	ldrh	r3, [r7, #2]
 8003304:	041a      	lsls	r2, r3, #16
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	611a      	str	r2, [r3, #16]
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	bc80      	pop	{r7}
 8003312:	4770      	bx	lr

08003314 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	460b      	mov	r3, r1
 800331e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003326:	887a      	ldrh	r2, [r7, #2]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4013      	ands	r3, r2
 800332c:	041a      	lsls	r2, r3, #16
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	43d9      	mvns	r1, r3
 8003332:	887b      	ldrh	r3, [r7, #2]
 8003334:	400b      	ands	r3, r1
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	611a      	str	r2, [r3, #16]
}
 800333c:	bf00      	nop
 800333e:	3714      	adds	r7, #20
 8003340:	46bd      	mov	sp, r7
 8003342:	bc80      	pop	{r7}
 8003344:	4770      	bx	lr
	...

08003348 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	4603      	mov	r3, r0
 8003350:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003352:	4b08      	ldr	r3, [pc, #32]	@ (8003374 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003354:	695a      	ldr	r2, [r3, #20]
 8003356:	88fb      	ldrh	r3, [r7, #6]
 8003358:	4013      	ands	r3, r2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d006      	beq.n	800336c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800335e:	4a05      	ldr	r2, [pc, #20]	@ (8003374 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003360:	88fb      	ldrh	r3, [r7, #6]
 8003362:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003364:	88fb      	ldrh	r3, [r7, #6]
 8003366:	4618      	mov	r0, r3
 8003368:	f7fe fe3e 	bl	8001fe8 <HAL_GPIO_EXTI_Callback>
  }
}
 800336c:	bf00      	nop
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40010400 	.word	0x40010400

08003378 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e12b      	b.n	80035e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d106      	bne.n	80033a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7ff fac4 	bl	800292c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2224      	movs	r2, #36	@ 0x24
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 0201 	bic.w	r2, r2, #1
 80033ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033dc:	f002 f8b6 	bl	800554c <HAL_RCC_GetPCLK1Freq>
 80033e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	4a81      	ldr	r2, [pc, #516]	@ (80035ec <HAL_I2C_Init+0x274>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d807      	bhi.n	80033fc <HAL_I2C_Init+0x84>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4a80      	ldr	r2, [pc, #512]	@ (80035f0 <HAL_I2C_Init+0x278>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	bf94      	ite	ls
 80033f4:	2301      	movls	r3, #1
 80033f6:	2300      	movhi	r3, #0
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	e006      	b.n	800340a <HAL_I2C_Init+0x92>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4a7d      	ldr	r2, [pc, #500]	@ (80035f4 <HAL_I2C_Init+0x27c>)
 8003400:	4293      	cmp	r3, r2
 8003402:	bf94      	ite	ls
 8003404:	2301      	movls	r3, #1
 8003406:	2300      	movhi	r3, #0
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e0e7      	b.n	80035e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	4a78      	ldr	r2, [pc, #480]	@ (80035f8 <HAL_I2C_Init+0x280>)
 8003416:	fba2 2303 	umull	r2, r3, r2, r3
 800341a:	0c9b      	lsrs	r3, r3, #18
 800341c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68ba      	ldr	r2, [r7, #8]
 800342e:	430a      	orrs	r2, r1
 8003430:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	4a6a      	ldr	r2, [pc, #424]	@ (80035ec <HAL_I2C_Init+0x274>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d802      	bhi.n	800344c <HAL_I2C_Init+0xd4>
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	3301      	adds	r3, #1
 800344a:	e009      	b.n	8003460 <HAL_I2C_Init+0xe8>
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003452:	fb02 f303 	mul.w	r3, r2, r3
 8003456:	4a69      	ldr	r2, [pc, #420]	@ (80035fc <HAL_I2C_Init+0x284>)
 8003458:	fba2 2303 	umull	r2, r3, r2, r3
 800345c:	099b      	lsrs	r3, r3, #6
 800345e:	3301      	adds	r3, #1
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6812      	ldr	r2, [r2, #0]
 8003464:	430b      	orrs	r3, r1
 8003466:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	69db      	ldr	r3, [r3, #28]
 800346e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003472:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	495c      	ldr	r1, [pc, #368]	@ (80035ec <HAL_I2C_Init+0x274>)
 800347c:	428b      	cmp	r3, r1
 800347e:	d819      	bhi.n	80034b4 <HAL_I2C_Init+0x13c>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	1e59      	subs	r1, r3, #1
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	fbb1 f3f3 	udiv	r3, r1, r3
 800348e:	1c59      	adds	r1, r3, #1
 8003490:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003494:	400b      	ands	r3, r1
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00a      	beq.n	80034b0 <HAL_I2C_Init+0x138>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	1e59      	subs	r1, r3, #1
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80034a8:	3301      	adds	r3, #1
 80034aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ae:	e051      	b.n	8003554 <HAL_I2C_Init+0x1dc>
 80034b0:	2304      	movs	r3, #4
 80034b2:	e04f      	b.n	8003554 <HAL_I2C_Init+0x1dc>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d111      	bne.n	80034e0 <HAL_I2C_Init+0x168>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	1e58      	subs	r0, r3, #1
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6859      	ldr	r1, [r3, #4]
 80034c4:	460b      	mov	r3, r1
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	440b      	add	r3, r1
 80034ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ce:	3301      	adds	r3, #1
 80034d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	bf0c      	ite	eq
 80034d8:	2301      	moveq	r3, #1
 80034da:	2300      	movne	r3, #0
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	e012      	b.n	8003506 <HAL_I2C_Init+0x18e>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	1e58      	subs	r0, r3, #1
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6859      	ldr	r1, [r3, #4]
 80034e8:	460b      	mov	r3, r1
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	440b      	add	r3, r1
 80034ee:	0099      	lsls	r1, r3, #2
 80034f0:	440b      	add	r3, r1
 80034f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80034f6:	3301      	adds	r3, #1
 80034f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	bf0c      	ite	eq
 8003500:	2301      	moveq	r3, #1
 8003502:	2300      	movne	r3, #0
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <HAL_I2C_Init+0x196>
 800350a:	2301      	movs	r3, #1
 800350c:	e022      	b.n	8003554 <HAL_I2C_Init+0x1dc>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10e      	bne.n	8003534 <HAL_I2C_Init+0x1bc>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	1e58      	subs	r0, r3, #1
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6859      	ldr	r1, [r3, #4]
 800351e:	460b      	mov	r3, r1
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	440b      	add	r3, r1
 8003524:	fbb0 f3f3 	udiv	r3, r0, r3
 8003528:	3301      	adds	r3, #1
 800352a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800352e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003532:	e00f      	b.n	8003554 <HAL_I2C_Init+0x1dc>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	1e58      	subs	r0, r3, #1
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6859      	ldr	r1, [r3, #4]
 800353c:	460b      	mov	r3, r1
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	0099      	lsls	r1, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	fbb0 f3f3 	udiv	r3, r0, r3
 800354a:	3301      	adds	r3, #1
 800354c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003550:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003554:	6879      	ldr	r1, [r7, #4]
 8003556:	6809      	ldr	r1, [r1, #0]
 8003558:	4313      	orrs	r3, r2
 800355a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	69da      	ldr	r2, [r3, #28]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	431a      	orrs	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	430a      	orrs	r2, r1
 8003576:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003582:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	6911      	ldr	r1, [r2, #16]
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	68d2      	ldr	r2, [r2, #12]
 800358e:	4311      	orrs	r1, r2
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	6812      	ldr	r2, [r2, #0]
 8003594:	430b      	orrs	r3, r1
 8003596:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	695a      	ldr	r2, [r3, #20]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	431a      	orrs	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0201 	orr.w	r2, r2, #1
 80035c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2220      	movs	r2, #32
 80035ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	000186a0 	.word	0x000186a0
 80035f0:	001e847f 	.word	0x001e847f
 80035f4:	003d08ff 	.word	0x003d08ff
 80035f8:	431bde83 	.word	0x431bde83
 80035fc:	10624dd3 	.word	0x10624dd3

08003600 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b088      	sub	sp, #32
 8003604:	af02      	add	r7, sp, #8
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	607a      	str	r2, [r7, #4]
 800360a:	461a      	mov	r2, r3
 800360c:	460b      	mov	r3, r1
 800360e:	817b      	strh	r3, [r7, #10]
 8003610:	4613      	mov	r3, r2
 8003612:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003614:	f7ff fbd4 	bl	8002dc0 <HAL_GetTick>
 8003618:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b20      	cmp	r3, #32
 8003624:	f040 80e0 	bne.w	80037e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	2319      	movs	r3, #25
 800362e:	2201      	movs	r2, #1
 8003630:	4970      	ldr	r1, [pc, #448]	@ (80037f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f001 f98a 	bl	800494c <I2C_WaitOnFlagUntilTimeout>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800363e:	2302      	movs	r3, #2
 8003640:	e0d3      	b.n	80037ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003648:	2b01      	cmp	r3, #1
 800364a:	d101      	bne.n	8003650 <HAL_I2C_Master_Transmit+0x50>
 800364c:	2302      	movs	r3, #2
 800364e:	e0cc      	b.n	80037ea <HAL_I2C_Master_Transmit+0x1ea>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b01      	cmp	r3, #1
 8003664:	d007      	beq.n	8003676 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f042 0201 	orr.w	r2, r2, #1
 8003674:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003684:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2221      	movs	r2, #33	@ 0x21
 800368a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2210      	movs	r2, #16
 8003692:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	893a      	ldrh	r2, [r7, #8]
 80036a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	4a50      	ldr	r2, [pc, #320]	@ (80037f8 <HAL_I2C_Master_Transmit+0x1f8>)
 80036b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80036b8:	8979      	ldrh	r1, [r7, #10]
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	6a3a      	ldr	r2, [r7, #32]
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f000 fe76 	bl	80043b0 <I2C_MasterRequestWrite>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e08d      	b.n	80037ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ce:	2300      	movs	r3, #0
 80036d0:	613b      	str	r3, [r7, #16]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	695b      	ldr	r3, [r3, #20]
 80036d8:	613b      	str	r3, [r7, #16]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	613b      	str	r3, [r7, #16]
 80036e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80036e4:	e066      	b.n	80037b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	6a39      	ldr	r1, [r7, #32]
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f001 fa48 	bl	8004b80 <I2C_WaitOnTXEFlagUntilTimeout>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00d      	beq.n	8003712 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	d107      	bne.n	800370e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800370c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e06b      	b.n	80037ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003716:	781a      	ldrb	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003722:	1c5a      	adds	r2, r3, #1
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800372c:	b29b      	uxth	r3, r3
 800372e:	3b01      	subs	r3, #1
 8003730:	b29a      	uxth	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800373a:	3b01      	subs	r3, #1
 800373c:	b29a      	uxth	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	2b04      	cmp	r3, #4
 800374e:	d11b      	bne.n	8003788 <HAL_I2C_Master_Transmit+0x188>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003754:	2b00      	cmp	r3, #0
 8003756:	d017      	beq.n	8003788 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375c:	781a      	ldrb	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003768:	1c5a      	adds	r2, r3, #1
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003772:	b29b      	uxth	r3, r3
 8003774:	3b01      	subs	r3, #1
 8003776:	b29a      	uxth	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003780:	3b01      	subs	r3, #1
 8003782:	b29a      	uxth	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	6a39      	ldr	r1, [r7, #32]
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f001 fa3f 	bl	8004c10 <I2C_WaitOnBTFFlagUntilTimeout>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00d      	beq.n	80037b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379c:	2b04      	cmp	r3, #4
 800379e:	d107      	bne.n	80037b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e01a      	b.n	80037ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d194      	bne.n	80036e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2220      	movs	r2, #32
 80037d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80037e4:	2300      	movs	r3, #0
 80037e6:	e000      	b.n	80037ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80037e8:	2302      	movs	r3, #2
  }
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3718      	adds	r7, #24
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	00100002 	.word	0x00100002
 80037f8:	ffff0000 	.word	0xffff0000

080037fc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b08c      	sub	sp, #48	@ 0x30
 8003800:	af02      	add	r7, sp, #8
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	607a      	str	r2, [r7, #4]
 8003806:	461a      	mov	r2, r3
 8003808:	460b      	mov	r3, r1
 800380a:	817b      	strh	r3, [r7, #10]
 800380c:	4613      	mov	r3, r2
 800380e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003810:	2300      	movs	r3, #0
 8003812:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003814:	f7ff fad4 	bl	8002dc0 <HAL_GetTick>
 8003818:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b20      	cmp	r3, #32
 8003824:	f040 824b 	bne.w	8003cbe <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	2319      	movs	r3, #25
 800382e:	2201      	movs	r2, #1
 8003830:	497f      	ldr	r1, [pc, #508]	@ (8003a30 <HAL_I2C_Master_Receive+0x234>)
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f001 f88a 	bl	800494c <I2C_WaitOnFlagUntilTimeout>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800383e:	2302      	movs	r3, #2
 8003840:	e23e      	b.n	8003cc0 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003848:	2b01      	cmp	r3, #1
 800384a:	d101      	bne.n	8003850 <HAL_I2C_Master_Receive+0x54>
 800384c:	2302      	movs	r3, #2
 800384e:	e237      	b.n	8003cc0 <HAL_I2C_Master_Receive+0x4c4>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b01      	cmp	r3, #1
 8003864:	d007      	beq.n	8003876 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f042 0201 	orr.w	r2, r2, #1
 8003874:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003884:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2222      	movs	r2, #34	@ 0x22
 800388a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2210      	movs	r2, #16
 8003892:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	893a      	ldrh	r2, [r7, #8]
 80038a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	4a5f      	ldr	r2, [pc, #380]	@ (8003a34 <HAL_I2C_Master_Receive+0x238>)
 80038b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80038b8:	8979      	ldrh	r1, [r7, #10]
 80038ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f000 fdf8 	bl	80044b4 <I2C_MasterRequestRead>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e1f8      	b.n	8003cc0 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d113      	bne.n	80038fe <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038d6:	2300      	movs	r3, #0
 80038d8:	61fb      	str	r3, [r7, #28]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	61fb      	str	r3, [r7, #28]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	61fb      	str	r3, [r7, #28]
 80038ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	e1cc      	b.n	8003c98 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003902:	2b01      	cmp	r3, #1
 8003904:	d11e      	bne.n	8003944 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003914:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003916:	b672      	cpsid	i
}
 8003918:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800391a:	2300      	movs	r3, #0
 800391c:	61bb      	str	r3, [r7, #24]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	61bb      	str	r3, [r7, #24]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	61bb      	str	r3, [r7, #24]
 800392e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800393e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003940:	b662      	cpsie	i
}
 8003942:	e035      	b.n	80039b0 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003948:	2b02      	cmp	r3, #2
 800394a:	d11e      	bne.n	800398a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800395a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800395c:	b672      	cpsid	i
}
 800395e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003960:	2300      	movs	r3, #0
 8003962:	617b      	str	r3, [r7, #20]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	617b      	str	r3, [r7, #20]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	617b      	str	r3, [r7, #20]
 8003974:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003984:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003986:	b662      	cpsie	i
}
 8003988:	e012      	b.n	80039b0 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003998:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800399a:	2300      	movs	r3, #0
 800399c:	613b      	str	r3, [r7, #16]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	613b      	str	r3, [r7, #16]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	613b      	str	r3, [r7, #16]
 80039ae:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80039b0:	e172      	b.n	8003c98 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039b6:	2b03      	cmp	r3, #3
 80039b8:	f200 811f 	bhi.w	8003bfa <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d123      	bne.n	8003a0c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039c6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f001 f969 	bl	8004ca0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e173      	b.n	8003cc0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	691a      	ldr	r2, [r3, #16]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e2:	b2d2      	uxtb	r2, r2
 80039e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ea:	1c5a      	adds	r2, r3, #1
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039f4:	3b01      	subs	r3, #1
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	3b01      	subs	r3, #1
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a0a:	e145      	b.n	8003c98 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d152      	bne.n	8003aba <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	4906      	ldr	r1, [pc, #24]	@ (8003a38 <HAL_I2C_Master_Receive+0x23c>)
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f000 ff94 	bl	800494c <I2C_WaitOnFlagUntilTimeout>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d008      	beq.n	8003a3c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e148      	b.n	8003cc0 <HAL_I2C_Master_Receive+0x4c4>
 8003a2e:	bf00      	nop
 8003a30:	00100002 	.word	0x00100002
 8003a34:	ffff0000 	.word	0xffff0000
 8003a38:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003a3c:	b672      	cpsid	i
}
 8003a3e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	691a      	ldr	r2, [r3, #16]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a62:	1c5a      	adds	r2, r3, #1
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003a82:	b662      	cpsie	i
}
 8003a84:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	691a      	ldr	r2, [r3, #16]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a90:	b2d2      	uxtb	r2, r2
 8003a92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a98:	1c5a      	adds	r2, r3, #1
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ab8:	e0ee      	b.n	8003c98 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003abc:	9300      	str	r3, [sp, #0]
 8003abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	4981      	ldr	r1, [pc, #516]	@ (8003cc8 <HAL_I2C_Master_Receive+0x4cc>)
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	f000 ff41 	bl	800494c <I2C_WaitOnFlagUntilTimeout>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d001      	beq.n	8003ad4 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e0f5      	b.n	8003cc0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ae2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ae4:	b672      	cpsid	i
}
 8003ae6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	691a      	ldr	r2, [r3, #16]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af2:	b2d2      	uxtb	r2, r2
 8003af4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afa:	1c5a      	adds	r2, r3, #1
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b04:	3b01      	subs	r3, #1
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	3b01      	subs	r3, #1
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003b1a:	4b6c      	ldr	r3, [pc, #432]	@ (8003ccc <HAL_I2C_Master_Receive+0x4d0>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	08db      	lsrs	r3, r3, #3
 8003b20:	4a6b      	ldr	r2, [pc, #428]	@ (8003cd0 <HAL_I2C_Master_Receive+0x4d4>)
 8003b22:	fba2 2303 	umull	r2, r3, r2, r3
 8003b26:	0a1a      	lsrs	r2, r3, #8
 8003b28:	4613      	mov	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	00da      	lsls	r2, r3, #3
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003b34:	6a3b      	ldr	r3, [r7, #32]
 8003b36:	3b01      	subs	r3, #1
 8003b38:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003b3a:	6a3b      	ldr	r3, [r7, #32]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d118      	bne.n	8003b72 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5a:	f043 0220 	orr.w	r2, r3, #32
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003b62:	b662      	cpsie	i
}
 8003b64:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e0a6      	b.n	8003cc0 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	f003 0304 	and.w	r3, r3, #4
 8003b7c:	2b04      	cmp	r3, #4
 8003b7e:	d1d9      	bne.n	8003b34 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	691a      	ldr	r2, [r3, #16]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9a:	b2d2      	uxtb	r2, r2
 8003b9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba2:	1c5a      	adds	r2, r3, #1
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bac:	3b01      	subs	r3, #1
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003bc2:	b662      	cpsie	i
}
 8003bc4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	691a      	ldr	r2, [r3, #16]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd0:	b2d2      	uxtb	r2, r2
 8003bd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd8:	1c5a      	adds	r2, r3, #1
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003be2:	3b01      	subs	r3, #1
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003bf8:	e04e      	b.n	8003c98 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bfc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f001 f84e 	bl	8004ca0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e058      	b.n	8003cc0 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	691a      	ldr	r2, [r3, #16]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c18:	b2d2      	uxtb	r2, r2
 8003c1a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c20:	1c5a      	adds	r2, r3, #1
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	f003 0304 	and.w	r3, r3, #4
 8003c4a:	2b04      	cmp	r3, #4
 8003c4c:	d124      	bne.n	8003c98 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c52:	2b03      	cmp	r3, #3
 8003c54:	d107      	bne.n	8003c66 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c64:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	691a      	ldr	r2, [r3, #16]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c70:	b2d2      	uxtb	r2, r2
 8003c72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c78:	1c5a      	adds	r2, r3, #1
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c82:	3b01      	subs	r3, #1
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	3b01      	subs	r3, #1
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f47f ae88 	bne.w	80039b2 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	e000      	b.n	8003cc0 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8003cbe:	2302      	movs	r3, #2
  }
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3728      	adds	r7, #40	@ 0x28
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	00010004 	.word	0x00010004
 8003ccc:	2000007c 	.word	0x2000007c
 8003cd0:	14f8b589 	.word	0x14f8b589

08003cd4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b088      	sub	sp, #32
 8003cd8:	af02      	add	r7, sp, #8
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	4608      	mov	r0, r1
 8003cde:	4611      	mov	r1, r2
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	817b      	strh	r3, [r7, #10]
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	813b      	strh	r3, [r7, #8]
 8003cea:	4613      	mov	r3, r2
 8003cec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cee:	f7ff f867 	bl	8002dc0 <HAL_GetTick>
 8003cf2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b20      	cmp	r3, #32
 8003cfe:	f040 80d9 	bne.w	8003eb4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	9300      	str	r3, [sp, #0]
 8003d06:	2319      	movs	r3, #25
 8003d08:	2201      	movs	r2, #1
 8003d0a:	496d      	ldr	r1, [pc, #436]	@ (8003ec0 <HAL_I2C_Mem_Write+0x1ec>)
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f000 fe1d 	bl	800494c <I2C_WaitOnFlagUntilTimeout>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d001      	beq.n	8003d1c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003d18:	2302      	movs	r3, #2
 8003d1a:	e0cc      	b.n	8003eb6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d101      	bne.n	8003d2a <HAL_I2C_Mem_Write+0x56>
 8003d26:	2302      	movs	r3, #2
 8003d28:	e0c5      	b.n	8003eb6 <HAL_I2C_Mem_Write+0x1e2>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d007      	beq.n	8003d50 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f042 0201 	orr.w	r2, r2, #1
 8003d4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2221      	movs	r2, #33	@ 0x21
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2240      	movs	r2, #64	@ 0x40
 8003d6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6a3a      	ldr	r2, [r7, #32]
 8003d7a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003d80:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4a4d      	ldr	r2, [pc, #308]	@ (8003ec4 <HAL_I2C_Mem_Write+0x1f0>)
 8003d90:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d92:	88f8      	ldrh	r0, [r7, #6]
 8003d94:	893a      	ldrh	r2, [r7, #8]
 8003d96:	8979      	ldrh	r1, [r7, #10]
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	9301      	str	r3, [sp, #4]
 8003d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	4603      	mov	r3, r0
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f000 fc54 	bl	8004650 <I2C_RequestMemoryWrite>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d052      	beq.n	8003e54 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e081      	b.n	8003eb6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 fee2 	bl	8004b80 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00d      	beq.n	8003dde <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	d107      	bne.n	8003dda <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dd8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e06b      	b.n	8003eb6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de2:	781a      	ldrb	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dee:	1c5a      	adds	r2, r3, #1
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	3b01      	subs	r3, #1
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	f003 0304 	and.w	r3, r3, #4
 8003e18:	2b04      	cmp	r3, #4
 8003e1a:	d11b      	bne.n	8003e54 <HAL_I2C_Mem_Write+0x180>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d017      	beq.n	8003e54 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e28:	781a      	ldrb	r2, [r3, #0]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e34:	1c5a      	adds	r2, r3, #1
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1aa      	bne.n	8003db2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f000 fed5 	bl	8004c10 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00d      	beq.n	8003e88 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e70:	2b04      	cmp	r3, #4
 8003e72:	d107      	bne.n	8003e84 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e82:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e016      	b.n	8003eb6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	e000      	b.n	8003eb6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003eb4:	2302      	movs	r3, #2
  }
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3718      	adds	r7, #24
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	00100002 	.word	0x00100002
 8003ec4:	ffff0000 	.word	0xffff0000

08003ec8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b08c      	sub	sp, #48	@ 0x30
 8003ecc:	af02      	add	r7, sp, #8
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	4608      	mov	r0, r1
 8003ed2:	4611      	mov	r1, r2
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	817b      	strh	r3, [r7, #10]
 8003eda:	460b      	mov	r3, r1
 8003edc:	813b      	strh	r3, [r7, #8]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ee6:	f7fe ff6b 	bl	8002dc0 <HAL_GetTick>
 8003eea:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	2b20      	cmp	r3, #32
 8003ef6:	f040 8250 	bne.w	800439a <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	2319      	movs	r3, #25
 8003f00:	2201      	movs	r2, #1
 8003f02:	4982      	ldr	r1, [pc, #520]	@ (800410c <HAL_I2C_Mem_Read+0x244>)
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 fd21 	bl	800494c <I2C_WaitOnFlagUntilTimeout>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d001      	beq.n	8003f14 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003f10:	2302      	movs	r3, #2
 8003f12:	e243      	b.n	800439c <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d101      	bne.n	8003f22 <HAL_I2C_Mem_Read+0x5a>
 8003f1e:	2302      	movs	r3, #2
 8003f20:	e23c      	b.n	800439c <HAL_I2C_Mem_Read+0x4d4>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d007      	beq.n	8003f48 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f042 0201 	orr.w	r2, r2, #1
 8003f46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2222      	movs	r2, #34	@ 0x22
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2240      	movs	r2, #64	@ 0x40
 8003f64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f72:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003f78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	4a62      	ldr	r2, [pc, #392]	@ (8004110 <HAL_I2C_Mem_Read+0x248>)
 8003f88:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f8a:	88f8      	ldrh	r0, [r7, #6]
 8003f8c:	893a      	ldrh	r2, [r7, #8]
 8003f8e:	8979      	ldrh	r1, [r7, #10]
 8003f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f92:	9301      	str	r3, [sp, #4]
 8003f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	4603      	mov	r3, r0
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 fbee 	bl	800477c <I2C_RequestMemoryRead>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e1f8      	b.n	800439c <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d113      	bne.n	8003fda <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	61fb      	str	r3, [r7, #28]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	61fb      	str	r3, [r7, #28]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	61fb      	str	r3, [r7, #28]
 8003fc6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fd6:	601a      	str	r2, [r3, #0]
 8003fd8:	e1cc      	b.n	8004374 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d11e      	bne.n	8004020 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ff0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ff2:	b672      	cpsid	i
}
 8003ff4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	61bb      	str	r3, [r7, #24]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	61bb      	str	r3, [r7, #24]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	61bb      	str	r3, [r7, #24]
 800400a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800401a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800401c:	b662      	cpsie	i
}
 800401e:	e035      	b.n	800408c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004024:	2b02      	cmp	r3, #2
 8004026:	d11e      	bne.n	8004066 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004036:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004038:	b672      	cpsid	i
}
 800403a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800403c:	2300      	movs	r3, #0
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	617b      	str	r3, [r7, #20]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	617b      	str	r3, [r7, #20]
 8004050:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004060:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004062:	b662      	cpsie	i
}
 8004064:	e012      	b.n	800408c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004074:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004076:	2300      	movs	r3, #0
 8004078:	613b      	str	r3, [r7, #16]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	613b      	str	r3, [r7, #16]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	613b      	str	r3, [r7, #16]
 800408a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800408c:	e172      	b.n	8004374 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004092:	2b03      	cmp	r3, #3
 8004094:	f200 811f 	bhi.w	80042d6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800409c:	2b01      	cmp	r3, #1
 800409e:	d123      	bne.n	80040e8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040a2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f000 fdfb 	bl	8004ca0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e173      	b.n	800439c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	691a      	ldr	r2, [r3, #16]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040be:	b2d2      	uxtb	r2, r2
 80040c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c6:	1c5a      	adds	r2, r3, #1
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040d0:	3b01      	subs	r3, #1
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040dc:	b29b      	uxth	r3, r3
 80040de:	3b01      	subs	r3, #1
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80040e6:	e145      	b.n	8004374 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d152      	bne.n	8004196 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f2:	9300      	str	r3, [sp, #0]
 80040f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040f6:	2200      	movs	r2, #0
 80040f8:	4906      	ldr	r1, [pc, #24]	@ (8004114 <HAL_I2C_Mem_Read+0x24c>)
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f000 fc26 	bl	800494c <I2C_WaitOnFlagUntilTimeout>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d008      	beq.n	8004118 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e148      	b.n	800439c <HAL_I2C_Mem_Read+0x4d4>
 800410a:	bf00      	nop
 800410c:	00100002 	.word	0x00100002
 8004110:	ffff0000 	.word	0xffff0000
 8004114:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004118:	b672      	cpsid	i
}
 800411a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800412a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	691a      	ldr	r2, [r3, #16]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004136:	b2d2      	uxtb	r2, r2
 8004138:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413e:	1c5a      	adds	r2, r3, #1
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004148:	3b01      	subs	r3, #1
 800414a:	b29a      	uxth	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004154:	b29b      	uxth	r3, r3
 8004156:	3b01      	subs	r3, #1
 8004158:	b29a      	uxth	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800415e:	b662      	cpsie	i
}
 8004160:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	691a      	ldr	r2, [r3, #16]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416c:	b2d2      	uxtb	r2, r2
 800416e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004174:	1c5a      	adds	r2, r3, #1
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800417e:	3b01      	subs	r3, #1
 8004180:	b29a      	uxth	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800418a:	b29b      	uxth	r3, r3
 800418c:	3b01      	subs	r3, #1
 800418e:	b29a      	uxth	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004194:	e0ee      	b.n	8004374 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004198:	9300      	str	r3, [sp, #0]
 800419a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800419c:	2200      	movs	r2, #0
 800419e:	4981      	ldr	r1, [pc, #516]	@ (80043a4 <HAL_I2C_Mem_Read+0x4dc>)
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f000 fbd3 	bl	800494c <I2C_WaitOnFlagUntilTimeout>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d001      	beq.n	80041b0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e0f5      	b.n	800439c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80041c0:	b672      	cpsid	i
}
 80041c2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	691a      	ldr	r2, [r3, #16]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ce:	b2d2      	uxtb	r2, r2
 80041d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d6:	1c5a      	adds	r2, r3, #1
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041e0:	3b01      	subs	r3, #1
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	3b01      	subs	r3, #1
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80041f6:	4b6c      	ldr	r3, [pc, #432]	@ (80043a8 <HAL_I2C_Mem_Read+0x4e0>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	08db      	lsrs	r3, r3, #3
 80041fc:	4a6b      	ldr	r2, [pc, #428]	@ (80043ac <HAL_I2C_Mem_Read+0x4e4>)
 80041fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004202:	0a1a      	lsrs	r2, r3, #8
 8004204:	4613      	mov	r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	4413      	add	r3, r2
 800420a:	00da      	lsls	r2, r3, #3
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004210:	6a3b      	ldr	r3, [r7, #32]
 8004212:	3b01      	subs	r3, #1
 8004214:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004216:	6a3b      	ldr	r3, [r7, #32]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d118      	bne.n	800424e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2220      	movs	r2, #32
 8004226:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004236:	f043 0220 	orr.w	r2, r3, #32
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800423e:	b662      	cpsie	i
}
 8004240:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e0a6      	b.n	800439c <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	695b      	ldr	r3, [r3, #20]
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b04      	cmp	r3, #4
 800425a:	d1d9      	bne.n	8004210 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800426a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	691a      	ldr	r2, [r3, #16]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004276:	b2d2      	uxtb	r2, r2
 8004278:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427e:	1c5a      	adds	r2, r3, #1
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004288:	3b01      	subs	r3, #1
 800428a:	b29a      	uxth	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004294:	b29b      	uxth	r3, r3
 8004296:	3b01      	subs	r3, #1
 8004298:	b29a      	uxth	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800429e:	b662      	cpsie	i
}
 80042a0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	691a      	ldr	r2, [r3, #16]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ac:	b2d2      	uxtb	r2, r2
 80042ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b4:	1c5a      	adds	r2, r3, #1
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042be:	3b01      	subs	r3, #1
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	3b01      	subs	r3, #1
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80042d4:	e04e      	b.n	8004374 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042d8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f000 fce0 	bl	8004ca0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e058      	b.n	800439c <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	691a      	ldr	r2, [r3, #16]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f4:	b2d2      	uxtb	r2, r2
 80042f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fc:	1c5a      	adds	r2, r3, #1
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004306:	3b01      	subs	r3, #1
 8004308:	b29a      	uxth	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004312:	b29b      	uxth	r3, r3
 8004314:	3b01      	subs	r3, #1
 8004316:	b29a      	uxth	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	f003 0304 	and.w	r3, r3, #4
 8004326:	2b04      	cmp	r3, #4
 8004328:	d124      	bne.n	8004374 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800432e:	2b03      	cmp	r3, #3
 8004330:	d107      	bne.n	8004342 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004340:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	691a      	ldr	r2, [r3, #16]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800434c:	b2d2      	uxtb	r2, r2
 800434e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004354:	1c5a      	adds	r2, r3, #1
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800435e:	3b01      	subs	r3, #1
 8004360:	b29a      	uxth	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800436a:	b29b      	uxth	r3, r3
 800436c:	3b01      	subs	r3, #1
 800436e:	b29a      	uxth	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004378:	2b00      	cmp	r3, #0
 800437a:	f47f ae88 	bne.w	800408e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2220      	movs	r2, #32
 8004382:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004396:	2300      	movs	r3, #0
 8004398:	e000      	b.n	800439c <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 800439a:	2302      	movs	r3, #2
  }
}
 800439c:	4618      	mov	r0, r3
 800439e:	3728      	adds	r7, #40	@ 0x28
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	00010004 	.word	0x00010004
 80043a8:	2000007c 	.word	0x2000007c
 80043ac:	14f8b589 	.word	0x14f8b589

080043b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b088      	sub	sp, #32
 80043b4:	af02      	add	r7, sp, #8
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	607a      	str	r2, [r7, #4]
 80043ba:	603b      	str	r3, [r7, #0]
 80043bc:	460b      	mov	r3, r1
 80043be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	d006      	beq.n	80043da <I2C_MasterRequestWrite+0x2a>
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d003      	beq.n	80043da <I2C_MasterRequestWrite+0x2a>
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80043d8:	d108      	bne.n	80043ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	e00b      	b.n	8004404 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f0:	2b12      	cmp	r3, #18
 80043f2:	d107      	bne.n	8004404 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004402:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	9300      	str	r3, [sp, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f000 fa9b 	bl	800494c <I2C_WaitOnFlagUntilTimeout>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d00d      	beq.n	8004438 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004426:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800442a:	d103      	bne.n	8004434 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004432:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e035      	b.n	80044a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004440:	d108      	bne.n	8004454 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004442:	897b      	ldrh	r3, [r7, #10]
 8004444:	b2db      	uxtb	r3, r3
 8004446:	461a      	mov	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004450:	611a      	str	r2, [r3, #16]
 8004452:	e01b      	b.n	800448c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004454:	897b      	ldrh	r3, [r7, #10]
 8004456:	11db      	asrs	r3, r3, #7
 8004458:	b2db      	uxtb	r3, r3
 800445a:	f003 0306 	and.w	r3, r3, #6
 800445e:	b2db      	uxtb	r3, r3
 8004460:	f063 030f 	orn	r3, r3, #15
 8004464:	b2da      	uxtb	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	490e      	ldr	r1, [pc, #56]	@ (80044ac <I2C_MasterRequestWrite+0xfc>)
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f000 fae4 	bl	8004a40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e010      	b.n	80044a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004482:	897b      	ldrh	r3, [r7, #10]
 8004484:	b2da      	uxtb	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	4907      	ldr	r1, [pc, #28]	@ (80044b0 <I2C_MasterRequestWrite+0x100>)
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f000 fad4 	bl	8004a40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e000      	b.n	80044a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3718      	adds	r7, #24
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	00010008 	.word	0x00010008
 80044b0:	00010002 	.word	0x00010002

080044b4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b088      	sub	sp, #32
 80044b8:	af02      	add	r7, sp, #8
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	607a      	str	r2, [r7, #4]
 80044be:	603b      	str	r3, [r7, #0]
 80044c0:	460b      	mov	r3, r1
 80044c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80044d8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	2b08      	cmp	r3, #8
 80044de:	d006      	beq.n	80044ee <I2C_MasterRequestRead+0x3a>
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d003      	beq.n	80044ee <I2C_MasterRequestRead+0x3a>
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80044ec:	d108      	bne.n	8004500 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044fc:	601a      	str	r2, [r3, #0]
 80044fe:	e00b      	b.n	8004518 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004504:	2b11      	cmp	r3, #17
 8004506:	d107      	bne.n	8004518 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004516:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	9300      	str	r3, [sp, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f000 fa11 	bl	800494c <I2C_WaitOnFlagUntilTimeout>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00d      	beq.n	800454c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800453a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800453e:	d103      	bne.n	8004548 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004546:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e079      	b.n	8004640 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004554:	d108      	bne.n	8004568 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004556:	897b      	ldrh	r3, [r7, #10]
 8004558:	b2db      	uxtb	r3, r3
 800455a:	f043 0301 	orr.w	r3, r3, #1
 800455e:	b2da      	uxtb	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	611a      	str	r2, [r3, #16]
 8004566:	e05f      	b.n	8004628 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004568:	897b      	ldrh	r3, [r7, #10]
 800456a:	11db      	asrs	r3, r3, #7
 800456c:	b2db      	uxtb	r3, r3
 800456e:	f003 0306 	and.w	r3, r3, #6
 8004572:	b2db      	uxtb	r3, r3
 8004574:	f063 030f 	orn	r3, r3, #15
 8004578:	b2da      	uxtb	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	4930      	ldr	r1, [pc, #192]	@ (8004648 <I2C_MasterRequestRead+0x194>)
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f000 fa5a 	bl	8004a40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d001      	beq.n	8004596 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e054      	b.n	8004640 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004596:	897b      	ldrh	r3, [r7, #10]
 8004598:	b2da      	uxtb	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	4929      	ldr	r1, [pc, #164]	@ (800464c <I2C_MasterRequestRead+0x198>)
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f000 fa4a 	bl	8004a40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e044      	b.n	8004640 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045b6:	2300      	movs	r3, #0
 80045b8:	613b      	str	r3, [r7, #16]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	613b      	str	r3, [r7, #16]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	613b      	str	r3, [r7, #16]
 80045ca:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045da:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f000 f9af 	bl	800494c <I2C_WaitOnFlagUntilTimeout>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00d      	beq.n	8004610 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004602:	d103      	bne.n	800460c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800460a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e017      	b.n	8004640 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004610:	897b      	ldrh	r3, [r7, #10]
 8004612:	11db      	asrs	r3, r3, #7
 8004614:	b2db      	uxtb	r3, r3
 8004616:	f003 0306 	and.w	r3, r3, #6
 800461a:	b2db      	uxtb	r3, r3
 800461c:	f063 030e 	orn	r3, r3, #14
 8004620:	b2da      	uxtb	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	4907      	ldr	r1, [pc, #28]	@ (800464c <I2C_MasterRequestRead+0x198>)
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f000 fa06 	bl	8004a40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e000      	b.n	8004640 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800463e:	2300      	movs	r3, #0
}
 8004640:	4618      	mov	r0, r3
 8004642:	3718      	adds	r7, #24
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	00010008 	.word	0x00010008
 800464c:	00010002 	.word	0x00010002

08004650 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b088      	sub	sp, #32
 8004654:	af02      	add	r7, sp, #8
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	4608      	mov	r0, r1
 800465a:	4611      	mov	r1, r2
 800465c:	461a      	mov	r2, r3
 800465e:	4603      	mov	r3, r0
 8004660:	817b      	strh	r3, [r7, #10]
 8004662:	460b      	mov	r3, r1
 8004664:	813b      	strh	r3, [r7, #8]
 8004666:	4613      	mov	r3, r2
 8004668:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004678:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800467a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467c:	9300      	str	r3, [sp, #0]
 800467e:	6a3b      	ldr	r3, [r7, #32]
 8004680:	2200      	movs	r2, #0
 8004682:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f000 f960 	bl	800494c <I2C_WaitOnFlagUntilTimeout>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00d      	beq.n	80046ae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800469c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046a0:	d103      	bne.n	80046aa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e05f      	b.n	800476e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046ae:	897b      	ldrh	r3, [r7, #10]
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	461a      	mov	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80046bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c0:	6a3a      	ldr	r2, [r7, #32]
 80046c2:	492d      	ldr	r1, [pc, #180]	@ (8004778 <I2C_RequestMemoryWrite+0x128>)
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	f000 f9bb 	bl	8004a40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d001      	beq.n	80046d4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e04c      	b.n	800476e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046d4:	2300      	movs	r3, #0
 80046d6:	617b      	str	r3, [r7, #20]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	617b      	str	r3, [r7, #20]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	617b      	str	r3, [r7, #20]
 80046e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046ec:	6a39      	ldr	r1, [r7, #32]
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f000 fa46 	bl	8004b80 <I2C_WaitOnTXEFlagUntilTimeout>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00d      	beq.n	8004716 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046fe:	2b04      	cmp	r3, #4
 8004700:	d107      	bne.n	8004712 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004710:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e02b      	b.n	800476e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004716:	88fb      	ldrh	r3, [r7, #6]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d105      	bne.n	8004728 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800471c:	893b      	ldrh	r3, [r7, #8]
 800471e:	b2da      	uxtb	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	611a      	str	r2, [r3, #16]
 8004726:	e021      	b.n	800476c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004728:	893b      	ldrh	r3, [r7, #8]
 800472a:	0a1b      	lsrs	r3, r3, #8
 800472c:	b29b      	uxth	r3, r3
 800472e:	b2da      	uxtb	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004738:	6a39      	ldr	r1, [r7, #32]
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f000 fa20 	bl	8004b80 <I2C_WaitOnTXEFlagUntilTimeout>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00d      	beq.n	8004762 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474a:	2b04      	cmp	r3, #4
 800474c:	d107      	bne.n	800475e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800475c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e005      	b.n	800476e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004762:	893b      	ldrh	r3, [r7, #8]
 8004764:	b2da      	uxtb	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3718      	adds	r7, #24
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	00010002 	.word	0x00010002

0800477c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b088      	sub	sp, #32
 8004780:	af02      	add	r7, sp, #8
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	4608      	mov	r0, r1
 8004786:	4611      	mov	r1, r2
 8004788:	461a      	mov	r2, r3
 800478a:	4603      	mov	r3, r0
 800478c:	817b      	strh	r3, [r7, #10]
 800478e:	460b      	mov	r3, r1
 8004790:	813b      	strh	r3, [r7, #8]
 8004792:	4613      	mov	r3, r2
 8004794:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80047a4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b8:	9300      	str	r3, [sp, #0]
 80047ba:	6a3b      	ldr	r3, [r7, #32]
 80047bc:	2200      	movs	r2, #0
 80047be:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f000 f8c2 	bl	800494c <I2C_WaitOnFlagUntilTimeout>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00d      	beq.n	80047ea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047dc:	d103      	bne.n	80047e6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047e4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e0aa      	b.n	8004940 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047ea:	897b      	ldrh	r3, [r7, #10]
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	461a      	mov	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80047f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fc:	6a3a      	ldr	r2, [r7, #32]
 80047fe:	4952      	ldr	r1, [pc, #328]	@ (8004948 <I2C_RequestMemoryRead+0x1cc>)
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f000 f91d 	bl	8004a40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d001      	beq.n	8004810 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e097      	b.n	8004940 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004810:	2300      	movs	r3, #0
 8004812:	617b      	str	r3, [r7, #20]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	617b      	str	r3, [r7, #20]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	617b      	str	r3, [r7, #20]
 8004824:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004826:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004828:	6a39      	ldr	r1, [r7, #32]
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f000 f9a8 	bl	8004b80 <I2C_WaitOnTXEFlagUntilTimeout>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00d      	beq.n	8004852 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483a:	2b04      	cmp	r3, #4
 800483c:	d107      	bne.n	800484e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800484c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e076      	b.n	8004940 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004852:	88fb      	ldrh	r3, [r7, #6]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d105      	bne.n	8004864 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004858:	893b      	ldrh	r3, [r7, #8]
 800485a:	b2da      	uxtb	r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	611a      	str	r2, [r3, #16]
 8004862:	e021      	b.n	80048a8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004864:	893b      	ldrh	r3, [r7, #8]
 8004866:	0a1b      	lsrs	r3, r3, #8
 8004868:	b29b      	uxth	r3, r3
 800486a:	b2da      	uxtb	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004872:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004874:	6a39      	ldr	r1, [r7, #32]
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f000 f982 	bl	8004b80 <I2C_WaitOnTXEFlagUntilTimeout>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00d      	beq.n	800489e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004886:	2b04      	cmp	r3, #4
 8004888:	d107      	bne.n	800489a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004898:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e050      	b.n	8004940 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800489e:	893b      	ldrh	r3, [r7, #8]
 80048a0:	b2da      	uxtb	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048aa:	6a39      	ldr	r1, [r7, #32]
 80048ac:	68f8      	ldr	r0, [r7, #12]
 80048ae:	f000 f967 	bl	8004b80 <I2C_WaitOnTXEFlagUntilTimeout>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00d      	beq.n	80048d4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048bc:	2b04      	cmp	r3, #4
 80048be:	d107      	bne.n	80048d0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048ce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e035      	b.n	8004940 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048e2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e6:	9300      	str	r3, [sp, #0]
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f000 f82b 	bl	800494c <I2C_WaitOnFlagUntilTimeout>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00d      	beq.n	8004918 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004906:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800490a:	d103      	bne.n	8004914 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004912:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e013      	b.n	8004940 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004918:	897b      	ldrh	r3, [r7, #10]
 800491a:	b2db      	uxtb	r3, r3
 800491c:	f043 0301 	orr.w	r3, r3, #1
 8004920:	b2da      	uxtb	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800492a:	6a3a      	ldr	r2, [r7, #32]
 800492c:	4906      	ldr	r1, [pc, #24]	@ (8004948 <I2C_RequestMemoryRead+0x1cc>)
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f000 f886 	bl	8004a40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e000      	b.n	8004940 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3718      	adds	r7, #24
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	00010002 	.word	0x00010002

0800494c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	603b      	str	r3, [r7, #0]
 8004958:	4613      	mov	r3, r2
 800495a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800495c:	e048      	b.n	80049f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004964:	d044      	beq.n	80049f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004966:	f7fe fa2b 	bl	8002dc0 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	429a      	cmp	r2, r3
 8004974:	d302      	bcc.n	800497c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d139      	bne.n	80049f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	0c1b      	lsrs	r3, r3, #16
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b01      	cmp	r3, #1
 8004984:	d10d      	bne.n	80049a2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	695b      	ldr	r3, [r3, #20]
 800498c:	43da      	mvns	r2, r3
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	4013      	ands	r3, r2
 8004992:	b29b      	uxth	r3, r3
 8004994:	2b00      	cmp	r3, #0
 8004996:	bf0c      	ite	eq
 8004998:	2301      	moveq	r3, #1
 800499a:	2300      	movne	r3, #0
 800499c:	b2db      	uxtb	r3, r3
 800499e:	461a      	mov	r2, r3
 80049a0:	e00c      	b.n	80049bc <I2C_WaitOnFlagUntilTimeout+0x70>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	43da      	mvns	r2, r3
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	4013      	ands	r3, r2
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	bf0c      	ite	eq
 80049b4:	2301      	moveq	r3, #1
 80049b6:	2300      	movne	r3, #0
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	461a      	mov	r2, r3
 80049bc:	79fb      	ldrb	r3, [r7, #7]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d116      	bne.n	80049f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2220      	movs	r2, #32
 80049cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049dc:	f043 0220 	orr.w	r2, r3, #32
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e023      	b.n	8004a38 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	0c1b      	lsrs	r3, r3, #16
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d10d      	bne.n	8004a16 <I2C_WaitOnFlagUntilTimeout+0xca>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	695b      	ldr	r3, [r3, #20]
 8004a00:	43da      	mvns	r2, r3
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	4013      	ands	r3, r2
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	bf0c      	ite	eq
 8004a0c:	2301      	moveq	r3, #1
 8004a0e:	2300      	movne	r3, #0
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	461a      	mov	r2, r3
 8004a14:	e00c      	b.n	8004a30 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	43da      	mvns	r2, r3
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	4013      	ands	r3, r2
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	bf0c      	ite	eq
 8004a28:	2301      	moveq	r3, #1
 8004a2a:	2300      	movne	r3, #0
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	461a      	mov	r2, r3
 8004a30:	79fb      	ldrb	r3, [r7, #7]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d093      	beq.n	800495e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
 8004a4c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a4e:	e071      	b.n	8004b34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a5e:	d123      	bne.n	8004aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a6e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004a78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2220      	movs	r2, #32
 8004a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a94:	f043 0204 	orr.w	r2, r3, #4
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e067      	b.n	8004b78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aae:	d041      	beq.n	8004b34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ab0:	f7fe f986 	bl	8002dc0 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d302      	bcc.n	8004ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d136      	bne.n	8004b34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	0c1b      	lsrs	r3, r3, #16
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d10c      	bne.n	8004aea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	43da      	mvns	r2, r3
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	4013      	ands	r3, r2
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	bf14      	ite	ne
 8004ae2:	2301      	movne	r3, #1
 8004ae4:	2300      	moveq	r3, #0
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	e00b      	b.n	8004b02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	43da      	mvns	r2, r3
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	4013      	ands	r3, r2
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	bf14      	ite	ne
 8004afc:	2301      	movne	r3, #1
 8004afe:	2300      	moveq	r3, #0
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d016      	beq.n	8004b34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b20:	f043 0220 	orr.w	r2, r3, #32
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e021      	b.n	8004b78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	0c1b      	lsrs	r3, r3, #16
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d10c      	bne.n	8004b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	43da      	mvns	r2, r3
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	4013      	ands	r3, r2
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	bf14      	ite	ne
 8004b50:	2301      	movne	r3, #1
 8004b52:	2300      	moveq	r3, #0
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	e00b      	b.n	8004b70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	43da      	mvns	r2, r3
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	4013      	ands	r3, r2
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	bf14      	ite	ne
 8004b6a:	2301      	movne	r3, #1
 8004b6c:	2300      	moveq	r3, #0
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f47f af6d 	bne.w	8004a50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b8c:	e034      	b.n	8004bf8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f000 f8e3 	bl	8004d5a <I2C_IsAcknowledgeFailed>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e034      	b.n	8004c08 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba4:	d028      	beq.n	8004bf8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ba6:	f7fe f90b 	bl	8002dc0 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d302      	bcc.n	8004bbc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d11d      	bne.n	8004bf8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bc6:	2b80      	cmp	r3, #128	@ 0x80
 8004bc8:	d016      	beq.n	8004bf8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be4:	f043 0220 	orr.w	r2, r3, #32
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e007      	b.n	8004c08 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c02:	2b80      	cmp	r3, #128	@ 0x80
 8004c04:	d1c3      	bne.n	8004b8e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3710      	adds	r7, #16
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c1c:	e034      	b.n	8004c88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f000 f89b 	bl	8004d5a <I2C_IsAcknowledgeFailed>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e034      	b.n	8004c98 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c34:	d028      	beq.n	8004c88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c36:	f7fe f8c3 	bl	8002dc0 <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d302      	bcc.n	8004c4c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d11d      	bne.n	8004c88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	f003 0304 	and.w	r3, r3, #4
 8004c56:	2b04      	cmp	r3, #4
 8004c58:	d016      	beq.n	8004c88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2220      	movs	r2, #32
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c74:	f043 0220 	orr.w	r2, r3, #32
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e007      	b.n	8004c98 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	f003 0304 	and.w	r3, r3, #4
 8004c92:	2b04      	cmp	r3, #4
 8004c94:	d1c3      	bne.n	8004c1e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004cac:	e049      	b.n	8004d42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	f003 0310 	and.w	r3, r3, #16
 8004cb8:	2b10      	cmp	r3, #16
 8004cba:	d119      	bne.n	8004cf0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f06f 0210 	mvn.w	r2, #16
 8004cc4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2220      	movs	r2, #32
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e030      	b.n	8004d52 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cf0:	f7fe f866 	bl	8002dc0 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d302      	bcc.n	8004d06 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d11d      	bne.n	8004d42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d10:	2b40      	cmp	r3, #64	@ 0x40
 8004d12:	d016      	beq.n	8004d42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2e:	f043 0220 	orr.w	r2, r3, #32
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e007      	b.n	8004d52 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	695b      	ldr	r3, [r3, #20]
 8004d48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d4c:	2b40      	cmp	r3, #64	@ 0x40
 8004d4e:	d1ae      	bne.n	8004cae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b083      	sub	sp, #12
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d70:	d11b      	bne.n	8004daa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d7a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2220      	movs	r2, #32
 8004d86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d96:	f043 0204 	orr.w	r2, r3, #4
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e000      	b.n	8004dac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bc80      	pop	{r7}
 8004db4:	4770      	bx	lr
	...

08004db8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b086      	sub	sp, #24
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e272      	b.n	80052b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f000 8087 	beq.w	8004ee6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004dd8:	4b92      	ldr	r3, [pc, #584]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f003 030c 	and.w	r3, r3, #12
 8004de0:	2b04      	cmp	r3, #4
 8004de2:	d00c      	beq.n	8004dfe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004de4:	4b8f      	ldr	r3, [pc, #572]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f003 030c 	and.w	r3, r3, #12
 8004dec:	2b08      	cmp	r3, #8
 8004dee:	d112      	bne.n	8004e16 <HAL_RCC_OscConfig+0x5e>
 8004df0:	4b8c      	ldr	r3, [pc, #560]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004df8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dfc:	d10b      	bne.n	8004e16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dfe:	4b89      	ldr	r3, [pc, #548]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d06c      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x12c>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d168      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e24c      	b.n	80052b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e1e:	d106      	bne.n	8004e2e <HAL_RCC_OscConfig+0x76>
 8004e20:	4b80      	ldr	r3, [pc, #512]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a7f      	ldr	r2, [pc, #508]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004e26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e2a:	6013      	str	r3, [r2, #0]
 8004e2c:	e02e      	b.n	8004e8c <HAL_RCC_OscConfig+0xd4>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10c      	bne.n	8004e50 <HAL_RCC_OscConfig+0x98>
 8004e36:	4b7b      	ldr	r3, [pc, #492]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a7a      	ldr	r2, [pc, #488]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004e3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e40:	6013      	str	r3, [r2, #0]
 8004e42:	4b78      	ldr	r3, [pc, #480]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a77      	ldr	r2, [pc, #476]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004e48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e4c:	6013      	str	r3, [r2, #0]
 8004e4e:	e01d      	b.n	8004e8c <HAL_RCC_OscConfig+0xd4>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e58:	d10c      	bne.n	8004e74 <HAL_RCC_OscConfig+0xbc>
 8004e5a:	4b72      	ldr	r3, [pc, #456]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a71      	ldr	r2, [pc, #452]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004e60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e64:	6013      	str	r3, [r2, #0]
 8004e66:	4b6f      	ldr	r3, [pc, #444]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a6e      	ldr	r2, [pc, #440]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004e6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e70:	6013      	str	r3, [r2, #0]
 8004e72:	e00b      	b.n	8004e8c <HAL_RCC_OscConfig+0xd4>
 8004e74:	4b6b      	ldr	r3, [pc, #428]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a6a      	ldr	r2, [pc, #424]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004e7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e7e:	6013      	str	r3, [r2, #0]
 8004e80:	4b68      	ldr	r3, [pc, #416]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a67      	ldr	r2, [pc, #412]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004e86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d013      	beq.n	8004ebc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e94:	f7fd ff94 	bl	8002dc0 <HAL_GetTick>
 8004e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e9a:	e008      	b.n	8004eae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e9c:	f7fd ff90 	bl	8002dc0 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b64      	cmp	r3, #100	@ 0x64
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e200      	b.n	80052b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eae:	4b5d      	ldr	r3, [pc, #372]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d0f0      	beq.n	8004e9c <HAL_RCC_OscConfig+0xe4>
 8004eba:	e014      	b.n	8004ee6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ebc:	f7fd ff80 	bl	8002dc0 <HAL_GetTick>
 8004ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ec2:	e008      	b.n	8004ed6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ec4:	f7fd ff7c 	bl	8002dc0 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b64      	cmp	r3, #100	@ 0x64
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e1ec      	b.n	80052b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ed6:	4b53      	ldr	r3, [pc, #332]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1f0      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x10c>
 8004ee2:	e000      	b.n	8004ee6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ee4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d063      	beq.n	8004fba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ef2:	4b4c      	ldr	r3, [pc, #304]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f003 030c 	and.w	r3, r3, #12
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00b      	beq.n	8004f16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004efe:	4b49      	ldr	r3, [pc, #292]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f003 030c 	and.w	r3, r3, #12
 8004f06:	2b08      	cmp	r3, #8
 8004f08:	d11c      	bne.n	8004f44 <HAL_RCC_OscConfig+0x18c>
 8004f0a:	4b46      	ldr	r3, [pc, #280]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d116      	bne.n	8004f44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f16:	4b43      	ldr	r3, [pc, #268]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d005      	beq.n	8004f2e <HAL_RCC_OscConfig+0x176>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d001      	beq.n	8004f2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e1c0      	b.n	80052b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f2e:	4b3d      	ldr	r3, [pc, #244]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	4939      	ldr	r1, [pc, #228]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f42:	e03a      	b.n	8004fba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d020      	beq.n	8004f8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f4c:	4b36      	ldr	r3, [pc, #216]	@ (8005028 <HAL_RCC_OscConfig+0x270>)
 8004f4e:	2201      	movs	r2, #1
 8004f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f52:	f7fd ff35 	bl	8002dc0 <HAL_GetTick>
 8004f56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f58:	e008      	b.n	8004f6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f5a:	f7fd ff31 	bl	8002dc0 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d901      	bls.n	8004f6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e1a1      	b.n	80052b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f6c:	4b2d      	ldr	r3, [pc, #180]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d0f0      	beq.n	8004f5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f78:	4b2a      	ldr	r3, [pc, #168]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	00db      	lsls	r3, r3, #3
 8004f86:	4927      	ldr	r1, [pc, #156]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	600b      	str	r3, [r1, #0]
 8004f8c:	e015      	b.n	8004fba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f8e:	4b26      	ldr	r3, [pc, #152]	@ (8005028 <HAL_RCC_OscConfig+0x270>)
 8004f90:	2200      	movs	r2, #0
 8004f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f94:	f7fd ff14 	bl	8002dc0 <HAL_GetTick>
 8004f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f9a:	e008      	b.n	8004fae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f9c:	f7fd ff10 	bl	8002dc0 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d901      	bls.n	8004fae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e180      	b.n	80052b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fae:	4b1d      	ldr	r3, [pc, #116]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1f0      	bne.n	8004f9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0308 	and.w	r3, r3, #8
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d03a      	beq.n	800503c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d019      	beq.n	8005002 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fce:	4b17      	ldr	r3, [pc, #92]	@ (800502c <HAL_RCC_OscConfig+0x274>)
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fd4:	f7fd fef4 	bl	8002dc0 <HAL_GetTick>
 8004fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fda:	e008      	b.n	8004fee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fdc:	f7fd fef0 	bl	8002dc0 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e160      	b.n	80052b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fee:	4b0d      	ldr	r3, [pc, #52]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d0f0      	beq.n	8004fdc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004ffa:	2001      	movs	r0, #1
 8004ffc:	f000 fafe 	bl	80055fc <RCC_Delay>
 8005000:	e01c      	b.n	800503c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005002:	4b0a      	ldr	r3, [pc, #40]	@ (800502c <HAL_RCC_OscConfig+0x274>)
 8005004:	2200      	movs	r2, #0
 8005006:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005008:	f7fd feda 	bl	8002dc0 <HAL_GetTick>
 800500c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800500e:	e00f      	b.n	8005030 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005010:	f7fd fed6 	bl	8002dc0 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	2b02      	cmp	r3, #2
 800501c:	d908      	bls.n	8005030 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e146      	b.n	80052b0 <HAL_RCC_OscConfig+0x4f8>
 8005022:	bf00      	nop
 8005024:	40021000 	.word	0x40021000
 8005028:	42420000 	.word	0x42420000
 800502c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005030:	4b92      	ldr	r3, [pc, #584]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 8005032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005034:	f003 0302 	and.w	r3, r3, #2
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1e9      	bne.n	8005010 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0304 	and.w	r3, r3, #4
 8005044:	2b00      	cmp	r3, #0
 8005046:	f000 80a6 	beq.w	8005196 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800504a:	2300      	movs	r3, #0
 800504c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800504e:	4b8b      	ldr	r3, [pc, #556]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 8005050:	69db      	ldr	r3, [r3, #28]
 8005052:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10d      	bne.n	8005076 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800505a:	4b88      	ldr	r3, [pc, #544]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 800505c:	69db      	ldr	r3, [r3, #28]
 800505e:	4a87      	ldr	r2, [pc, #540]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 8005060:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005064:	61d3      	str	r3, [r2, #28]
 8005066:	4b85      	ldr	r3, [pc, #532]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 8005068:	69db      	ldr	r3, [r3, #28]
 800506a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800506e:	60bb      	str	r3, [r7, #8]
 8005070:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005072:	2301      	movs	r3, #1
 8005074:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005076:	4b82      	ldr	r3, [pc, #520]	@ (8005280 <HAL_RCC_OscConfig+0x4c8>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800507e:	2b00      	cmp	r3, #0
 8005080:	d118      	bne.n	80050b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005082:	4b7f      	ldr	r3, [pc, #508]	@ (8005280 <HAL_RCC_OscConfig+0x4c8>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a7e      	ldr	r2, [pc, #504]	@ (8005280 <HAL_RCC_OscConfig+0x4c8>)
 8005088:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800508c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800508e:	f7fd fe97 	bl	8002dc0 <HAL_GetTick>
 8005092:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005094:	e008      	b.n	80050a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005096:	f7fd fe93 	bl	8002dc0 <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	2b64      	cmp	r3, #100	@ 0x64
 80050a2:	d901      	bls.n	80050a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e103      	b.n	80052b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050a8:	4b75      	ldr	r3, [pc, #468]	@ (8005280 <HAL_RCC_OscConfig+0x4c8>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d0f0      	beq.n	8005096 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d106      	bne.n	80050ca <HAL_RCC_OscConfig+0x312>
 80050bc:	4b6f      	ldr	r3, [pc, #444]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	4a6e      	ldr	r2, [pc, #440]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 80050c2:	f043 0301 	orr.w	r3, r3, #1
 80050c6:	6213      	str	r3, [r2, #32]
 80050c8:	e02d      	b.n	8005126 <HAL_RCC_OscConfig+0x36e>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10c      	bne.n	80050ec <HAL_RCC_OscConfig+0x334>
 80050d2:	4b6a      	ldr	r3, [pc, #424]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	4a69      	ldr	r2, [pc, #420]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 80050d8:	f023 0301 	bic.w	r3, r3, #1
 80050dc:	6213      	str	r3, [r2, #32]
 80050de:	4b67      	ldr	r3, [pc, #412]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	4a66      	ldr	r2, [pc, #408]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 80050e4:	f023 0304 	bic.w	r3, r3, #4
 80050e8:	6213      	str	r3, [r2, #32]
 80050ea:	e01c      	b.n	8005126 <HAL_RCC_OscConfig+0x36e>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	2b05      	cmp	r3, #5
 80050f2:	d10c      	bne.n	800510e <HAL_RCC_OscConfig+0x356>
 80050f4:	4b61      	ldr	r3, [pc, #388]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 80050f6:	6a1b      	ldr	r3, [r3, #32]
 80050f8:	4a60      	ldr	r2, [pc, #384]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 80050fa:	f043 0304 	orr.w	r3, r3, #4
 80050fe:	6213      	str	r3, [r2, #32]
 8005100:	4b5e      	ldr	r3, [pc, #376]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 8005102:	6a1b      	ldr	r3, [r3, #32]
 8005104:	4a5d      	ldr	r2, [pc, #372]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 8005106:	f043 0301 	orr.w	r3, r3, #1
 800510a:	6213      	str	r3, [r2, #32]
 800510c:	e00b      	b.n	8005126 <HAL_RCC_OscConfig+0x36e>
 800510e:	4b5b      	ldr	r3, [pc, #364]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	4a5a      	ldr	r2, [pc, #360]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 8005114:	f023 0301 	bic.w	r3, r3, #1
 8005118:	6213      	str	r3, [r2, #32]
 800511a:	4b58      	ldr	r3, [pc, #352]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	4a57      	ldr	r2, [pc, #348]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 8005120:	f023 0304 	bic.w	r3, r3, #4
 8005124:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d015      	beq.n	800515a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800512e:	f7fd fe47 	bl	8002dc0 <HAL_GetTick>
 8005132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005134:	e00a      	b.n	800514c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005136:	f7fd fe43 	bl	8002dc0 <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005144:	4293      	cmp	r3, r2
 8005146:	d901      	bls.n	800514c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e0b1      	b.n	80052b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800514c:	4b4b      	ldr	r3, [pc, #300]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 800514e:	6a1b      	ldr	r3, [r3, #32]
 8005150:	f003 0302 	and.w	r3, r3, #2
 8005154:	2b00      	cmp	r3, #0
 8005156:	d0ee      	beq.n	8005136 <HAL_RCC_OscConfig+0x37e>
 8005158:	e014      	b.n	8005184 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800515a:	f7fd fe31 	bl	8002dc0 <HAL_GetTick>
 800515e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005160:	e00a      	b.n	8005178 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005162:	f7fd fe2d 	bl	8002dc0 <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005170:	4293      	cmp	r3, r2
 8005172:	d901      	bls.n	8005178 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e09b      	b.n	80052b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005178:	4b40      	ldr	r3, [pc, #256]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1ee      	bne.n	8005162 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005184:	7dfb      	ldrb	r3, [r7, #23]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d105      	bne.n	8005196 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800518a:	4b3c      	ldr	r3, [pc, #240]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	4a3b      	ldr	r2, [pc, #236]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 8005190:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005194:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	69db      	ldr	r3, [r3, #28]
 800519a:	2b00      	cmp	r3, #0
 800519c:	f000 8087 	beq.w	80052ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051a0:	4b36      	ldr	r3, [pc, #216]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f003 030c 	and.w	r3, r3, #12
 80051a8:	2b08      	cmp	r3, #8
 80051aa:	d061      	beq.n	8005270 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	69db      	ldr	r3, [r3, #28]
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d146      	bne.n	8005242 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051b4:	4b33      	ldr	r3, [pc, #204]	@ (8005284 <HAL_RCC_OscConfig+0x4cc>)
 80051b6:	2200      	movs	r2, #0
 80051b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ba:	f7fd fe01 	bl	8002dc0 <HAL_GetTick>
 80051be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051c0:	e008      	b.n	80051d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051c2:	f7fd fdfd 	bl	8002dc0 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d901      	bls.n	80051d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e06d      	b.n	80052b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051d4:	4b29      	ldr	r3, [pc, #164]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1f0      	bne.n	80051c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a1b      	ldr	r3, [r3, #32]
 80051e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051e8:	d108      	bne.n	80051fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80051ea:	4b24      	ldr	r3, [pc, #144]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	4921      	ldr	r1, [pc, #132]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051fc:	4b1f      	ldr	r3, [pc, #124]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a19      	ldr	r1, [r3, #32]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520c:	430b      	orrs	r3, r1
 800520e:	491b      	ldr	r1, [pc, #108]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 8005210:	4313      	orrs	r3, r2
 8005212:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005214:	4b1b      	ldr	r3, [pc, #108]	@ (8005284 <HAL_RCC_OscConfig+0x4cc>)
 8005216:	2201      	movs	r2, #1
 8005218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800521a:	f7fd fdd1 	bl	8002dc0 <HAL_GetTick>
 800521e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005220:	e008      	b.n	8005234 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005222:	f7fd fdcd 	bl	8002dc0 <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	2b02      	cmp	r3, #2
 800522e:	d901      	bls.n	8005234 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e03d      	b.n	80052b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005234:	4b11      	ldr	r3, [pc, #68]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d0f0      	beq.n	8005222 <HAL_RCC_OscConfig+0x46a>
 8005240:	e035      	b.n	80052ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005242:	4b10      	ldr	r3, [pc, #64]	@ (8005284 <HAL_RCC_OscConfig+0x4cc>)
 8005244:	2200      	movs	r2, #0
 8005246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005248:	f7fd fdba 	bl	8002dc0 <HAL_GetTick>
 800524c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800524e:	e008      	b.n	8005262 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005250:	f7fd fdb6 	bl	8002dc0 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b02      	cmp	r3, #2
 800525c:	d901      	bls.n	8005262 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e026      	b.n	80052b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005262:	4b06      	ldr	r3, [pc, #24]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1f0      	bne.n	8005250 <HAL_RCC_OscConfig+0x498>
 800526e:	e01e      	b.n	80052ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	69db      	ldr	r3, [r3, #28]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d107      	bne.n	8005288 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e019      	b.n	80052b0 <HAL_RCC_OscConfig+0x4f8>
 800527c:	40021000 	.word	0x40021000
 8005280:	40007000 	.word	0x40007000
 8005284:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005288:	4b0b      	ldr	r3, [pc, #44]	@ (80052b8 <HAL_RCC_OscConfig+0x500>)
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a1b      	ldr	r3, [r3, #32]
 8005298:	429a      	cmp	r2, r3
 800529a:	d106      	bne.n	80052aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d001      	beq.n	80052ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e000      	b.n	80052b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3718      	adds	r7, #24
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	40021000 	.word	0x40021000

080052bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d101      	bne.n	80052d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e0d0      	b.n	8005472 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052d0:	4b6a      	ldr	r3, [pc, #424]	@ (800547c <HAL_RCC_ClockConfig+0x1c0>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0307 	and.w	r3, r3, #7
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d910      	bls.n	8005300 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052de:	4b67      	ldr	r3, [pc, #412]	@ (800547c <HAL_RCC_ClockConfig+0x1c0>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f023 0207 	bic.w	r2, r3, #7
 80052e6:	4965      	ldr	r1, [pc, #404]	@ (800547c <HAL_RCC_ClockConfig+0x1c0>)
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ee:	4b63      	ldr	r3, [pc, #396]	@ (800547c <HAL_RCC_ClockConfig+0x1c0>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0307 	and.w	r3, r3, #7
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d001      	beq.n	8005300 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e0b8      	b.n	8005472 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0302 	and.w	r3, r3, #2
 8005308:	2b00      	cmp	r3, #0
 800530a:	d020      	beq.n	800534e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0304 	and.w	r3, r3, #4
 8005314:	2b00      	cmp	r3, #0
 8005316:	d005      	beq.n	8005324 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005318:	4b59      	ldr	r3, [pc, #356]	@ (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	4a58      	ldr	r2, [pc, #352]	@ (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 800531e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005322:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0308 	and.w	r3, r3, #8
 800532c:	2b00      	cmp	r3, #0
 800532e:	d005      	beq.n	800533c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005330:	4b53      	ldr	r3, [pc, #332]	@ (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	4a52      	ldr	r2, [pc, #328]	@ (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 8005336:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800533a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800533c:	4b50      	ldr	r3, [pc, #320]	@ (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	494d      	ldr	r1, [pc, #308]	@ (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 800534a:	4313      	orrs	r3, r2
 800534c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	2b00      	cmp	r3, #0
 8005358:	d040      	beq.n	80053dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	2b01      	cmp	r3, #1
 8005360:	d107      	bne.n	8005372 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005362:	4b47      	ldr	r3, [pc, #284]	@ (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d115      	bne.n	800539a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e07f      	b.n	8005472 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	2b02      	cmp	r3, #2
 8005378:	d107      	bne.n	800538a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800537a:	4b41      	ldr	r3, [pc, #260]	@ (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d109      	bne.n	800539a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e073      	b.n	8005472 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800538a:	4b3d      	ldr	r3, [pc, #244]	@ (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0302 	and.w	r3, r3, #2
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e06b      	b.n	8005472 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800539a:	4b39      	ldr	r3, [pc, #228]	@ (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f023 0203 	bic.w	r2, r3, #3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	4936      	ldr	r1, [pc, #216]	@ (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053ac:	f7fd fd08 	bl	8002dc0 <HAL_GetTick>
 80053b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053b2:	e00a      	b.n	80053ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053b4:	f7fd fd04 	bl	8002dc0 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d901      	bls.n	80053ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e053      	b.n	8005472 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ca:	4b2d      	ldr	r3, [pc, #180]	@ (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f003 020c 	and.w	r2, r3, #12
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	429a      	cmp	r2, r3
 80053da:	d1eb      	bne.n	80053b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053dc:	4b27      	ldr	r3, [pc, #156]	@ (800547c <HAL_RCC_ClockConfig+0x1c0>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0307 	and.w	r3, r3, #7
 80053e4:	683a      	ldr	r2, [r7, #0]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d210      	bcs.n	800540c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ea:	4b24      	ldr	r3, [pc, #144]	@ (800547c <HAL_RCC_ClockConfig+0x1c0>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f023 0207 	bic.w	r2, r3, #7
 80053f2:	4922      	ldr	r1, [pc, #136]	@ (800547c <HAL_RCC_ClockConfig+0x1c0>)
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053fa:	4b20      	ldr	r3, [pc, #128]	@ (800547c <HAL_RCC_ClockConfig+0x1c0>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0307 	and.w	r3, r3, #7
 8005402:	683a      	ldr	r2, [r7, #0]
 8005404:	429a      	cmp	r2, r3
 8005406:	d001      	beq.n	800540c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e032      	b.n	8005472 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0304 	and.w	r3, r3, #4
 8005414:	2b00      	cmp	r3, #0
 8005416:	d008      	beq.n	800542a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005418:	4b19      	ldr	r3, [pc, #100]	@ (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	4916      	ldr	r1, [pc, #88]	@ (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 8005426:	4313      	orrs	r3, r2
 8005428:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0308 	and.w	r3, r3, #8
 8005432:	2b00      	cmp	r3, #0
 8005434:	d009      	beq.n	800544a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005436:	4b12      	ldr	r3, [pc, #72]	@ (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	00db      	lsls	r3, r3, #3
 8005444:	490e      	ldr	r1, [pc, #56]	@ (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 8005446:	4313      	orrs	r3, r2
 8005448:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800544a:	f000 f821 	bl	8005490 <HAL_RCC_GetSysClockFreq>
 800544e:	4602      	mov	r2, r0
 8005450:	4b0b      	ldr	r3, [pc, #44]	@ (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	091b      	lsrs	r3, r3, #4
 8005456:	f003 030f 	and.w	r3, r3, #15
 800545a:	490a      	ldr	r1, [pc, #40]	@ (8005484 <HAL_RCC_ClockConfig+0x1c8>)
 800545c:	5ccb      	ldrb	r3, [r1, r3]
 800545e:	fa22 f303 	lsr.w	r3, r2, r3
 8005462:	4a09      	ldr	r2, [pc, #36]	@ (8005488 <HAL_RCC_ClockConfig+0x1cc>)
 8005464:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005466:	4b09      	ldr	r3, [pc, #36]	@ (800548c <HAL_RCC_ClockConfig+0x1d0>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4618      	mov	r0, r3
 800546c:	f7fd fae8 	bl	8002a40 <HAL_InitTick>

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	40022000 	.word	0x40022000
 8005480:	40021000 	.word	0x40021000
 8005484:	0800bd38 	.word	0x0800bd38
 8005488:	2000007c 	.word	0x2000007c
 800548c:	20000080 	.word	0x20000080

08005490 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005490:	b480      	push	{r7}
 8005492:	b087      	sub	sp, #28
 8005494:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005496:	2300      	movs	r3, #0
 8005498:	60fb      	str	r3, [r7, #12]
 800549a:	2300      	movs	r3, #0
 800549c:	60bb      	str	r3, [r7, #8]
 800549e:	2300      	movs	r3, #0
 80054a0:	617b      	str	r3, [r7, #20]
 80054a2:	2300      	movs	r3, #0
 80054a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80054a6:	2300      	movs	r3, #0
 80054a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80054aa:	4b1e      	ldr	r3, [pc, #120]	@ (8005524 <HAL_RCC_GetSysClockFreq+0x94>)
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f003 030c 	and.w	r3, r3, #12
 80054b6:	2b04      	cmp	r3, #4
 80054b8:	d002      	beq.n	80054c0 <HAL_RCC_GetSysClockFreq+0x30>
 80054ba:	2b08      	cmp	r3, #8
 80054bc:	d003      	beq.n	80054c6 <HAL_RCC_GetSysClockFreq+0x36>
 80054be:	e027      	b.n	8005510 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80054c0:	4b19      	ldr	r3, [pc, #100]	@ (8005528 <HAL_RCC_GetSysClockFreq+0x98>)
 80054c2:	613b      	str	r3, [r7, #16]
      break;
 80054c4:	e027      	b.n	8005516 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	0c9b      	lsrs	r3, r3, #18
 80054ca:	f003 030f 	and.w	r3, r3, #15
 80054ce:	4a17      	ldr	r2, [pc, #92]	@ (800552c <HAL_RCC_GetSysClockFreq+0x9c>)
 80054d0:	5cd3      	ldrb	r3, [r2, r3]
 80054d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d010      	beq.n	8005500 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80054de:	4b11      	ldr	r3, [pc, #68]	@ (8005524 <HAL_RCC_GetSysClockFreq+0x94>)
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	0c5b      	lsrs	r3, r3, #17
 80054e4:	f003 0301 	and.w	r3, r3, #1
 80054e8:	4a11      	ldr	r2, [pc, #68]	@ (8005530 <HAL_RCC_GetSysClockFreq+0xa0>)
 80054ea:	5cd3      	ldrb	r3, [r2, r3]
 80054ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a0d      	ldr	r2, [pc, #52]	@ (8005528 <HAL_RCC_GetSysClockFreq+0x98>)
 80054f2:	fb03 f202 	mul.w	r2, r3, r2
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054fc:	617b      	str	r3, [r7, #20]
 80054fe:	e004      	b.n	800550a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a0c      	ldr	r2, [pc, #48]	@ (8005534 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005504:	fb02 f303 	mul.w	r3, r2, r3
 8005508:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	613b      	str	r3, [r7, #16]
      break;
 800550e:	e002      	b.n	8005516 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005510:	4b05      	ldr	r3, [pc, #20]	@ (8005528 <HAL_RCC_GetSysClockFreq+0x98>)
 8005512:	613b      	str	r3, [r7, #16]
      break;
 8005514:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005516:	693b      	ldr	r3, [r7, #16]
}
 8005518:	4618      	mov	r0, r3
 800551a:	371c      	adds	r7, #28
 800551c:	46bd      	mov	sp, r7
 800551e:	bc80      	pop	{r7}
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	40021000 	.word	0x40021000
 8005528:	007a1200 	.word	0x007a1200
 800552c:	0800bd50 	.word	0x0800bd50
 8005530:	0800bd60 	.word	0x0800bd60
 8005534:	003d0900 	.word	0x003d0900

08005538 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005538:	b480      	push	{r7}
 800553a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800553c:	4b02      	ldr	r3, [pc, #8]	@ (8005548 <HAL_RCC_GetHCLKFreq+0x10>)
 800553e:	681b      	ldr	r3, [r3, #0]
}
 8005540:	4618      	mov	r0, r3
 8005542:	46bd      	mov	sp, r7
 8005544:	bc80      	pop	{r7}
 8005546:	4770      	bx	lr
 8005548:	2000007c 	.word	0x2000007c

0800554c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005550:	f7ff fff2 	bl	8005538 <HAL_RCC_GetHCLKFreq>
 8005554:	4602      	mov	r2, r0
 8005556:	4b05      	ldr	r3, [pc, #20]	@ (800556c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	0a1b      	lsrs	r3, r3, #8
 800555c:	f003 0307 	and.w	r3, r3, #7
 8005560:	4903      	ldr	r1, [pc, #12]	@ (8005570 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005562:	5ccb      	ldrb	r3, [r1, r3]
 8005564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005568:	4618      	mov	r0, r3
 800556a:	bd80      	pop	{r7, pc}
 800556c:	40021000 	.word	0x40021000
 8005570:	0800bd48 	.word	0x0800bd48

08005574 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005578:	f7ff ffde 	bl	8005538 <HAL_RCC_GetHCLKFreq>
 800557c:	4602      	mov	r2, r0
 800557e:	4b05      	ldr	r3, [pc, #20]	@ (8005594 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	0adb      	lsrs	r3, r3, #11
 8005584:	f003 0307 	and.w	r3, r3, #7
 8005588:	4903      	ldr	r1, [pc, #12]	@ (8005598 <HAL_RCC_GetPCLK2Freq+0x24>)
 800558a:	5ccb      	ldrb	r3, [r1, r3]
 800558c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005590:	4618      	mov	r0, r3
 8005592:	bd80      	pop	{r7, pc}
 8005594:	40021000 	.word	0x40021000
 8005598:	0800bd48 	.word	0x0800bd48

0800559c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	220f      	movs	r2, #15
 80055aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80055ac:	4b11      	ldr	r3, [pc, #68]	@ (80055f4 <HAL_RCC_GetClockConfig+0x58>)
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	f003 0203 	and.w	r2, r3, #3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80055b8:	4b0e      	ldr	r3, [pc, #56]	@ (80055f4 <HAL_RCC_GetClockConfig+0x58>)
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80055c4:	4b0b      	ldr	r3, [pc, #44]	@ (80055f4 <HAL_RCC_GetClockConfig+0x58>)
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80055d0:	4b08      	ldr	r3, [pc, #32]	@ (80055f4 <HAL_RCC_GetClockConfig+0x58>)
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	08db      	lsrs	r3, r3, #3
 80055d6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80055de:	4b06      	ldr	r3, [pc, #24]	@ (80055f8 <HAL_RCC_GetClockConfig+0x5c>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0207 	and.w	r2, r3, #7
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80055ea:	bf00      	nop
 80055ec:	370c      	adds	r7, #12
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bc80      	pop	{r7}
 80055f2:	4770      	bx	lr
 80055f4:	40021000 	.word	0x40021000
 80055f8:	40022000 	.word	0x40022000

080055fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005604:	4b0a      	ldr	r3, [pc, #40]	@ (8005630 <RCC_Delay+0x34>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a0a      	ldr	r2, [pc, #40]	@ (8005634 <RCC_Delay+0x38>)
 800560a:	fba2 2303 	umull	r2, r3, r2, r3
 800560e:	0a5b      	lsrs	r3, r3, #9
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	fb02 f303 	mul.w	r3, r2, r3
 8005616:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005618:	bf00      	nop
  }
  while (Delay --);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	1e5a      	subs	r2, r3, #1
 800561e:	60fa      	str	r2, [r7, #12]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1f9      	bne.n	8005618 <RCC_Delay+0x1c>
}
 8005624:	bf00      	nop
 8005626:	bf00      	nop
 8005628:	3714      	adds	r7, #20
 800562a:	46bd      	mov	sp, r7
 800562c:	bc80      	pop	{r7}
 800562e:	4770      	bx	lr
 8005630:	2000007c 	.word	0x2000007c
 8005634:	10624dd3 	.word	0x10624dd3

08005638 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d101      	bne.n	800564a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e041      	b.n	80056ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d106      	bne.n	8005664 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f839 	bl	80056d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2202      	movs	r2, #2
 8005668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	3304      	adds	r3, #4
 8005674:	4619      	mov	r1, r3
 8005676:	4610      	mov	r0, r2
 8005678:	f000 f99c 	bl	80059b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3708      	adds	r7, #8
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80056d6:	b480      	push	{r7}
 80056d8:	b083      	sub	sp, #12
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80056de:	bf00      	nop
 80056e0:	370c      	adds	r7, #12
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bc80      	pop	{r7}
 80056e6:	4770      	bx	lr

080056e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d001      	beq.n	8005700 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e03a      	b.n	8005776 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2202      	movs	r2, #2
 8005704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68da      	ldr	r2, [r3, #12]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f042 0201 	orr.w	r2, r2, #1
 8005716:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a18      	ldr	r2, [pc, #96]	@ (8005780 <HAL_TIM_Base_Start_IT+0x98>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d00e      	beq.n	8005740 <HAL_TIM_Base_Start_IT+0x58>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800572a:	d009      	beq.n	8005740 <HAL_TIM_Base_Start_IT+0x58>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a14      	ldr	r2, [pc, #80]	@ (8005784 <HAL_TIM_Base_Start_IT+0x9c>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d004      	beq.n	8005740 <HAL_TIM_Base_Start_IT+0x58>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a13      	ldr	r2, [pc, #76]	@ (8005788 <HAL_TIM_Base_Start_IT+0xa0>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d111      	bne.n	8005764 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f003 0307 	and.w	r3, r3, #7
 800574a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2b06      	cmp	r3, #6
 8005750:	d010      	beq.n	8005774 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f042 0201 	orr.w	r2, r2, #1
 8005760:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005762:	e007      	b.n	8005774 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f042 0201 	orr.w	r2, r2, #1
 8005772:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3714      	adds	r7, #20
 800577a:	46bd      	mov	sp, r7
 800577c:	bc80      	pop	{r7}
 800577e:	4770      	bx	lr
 8005780:	40012c00 	.word	0x40012c00
 8005784:	40000400 	.word	0x40000400
 8005788:	40000800 	.word	0x40000800

0800578c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	f003 0302 	and.w	r3, r3, #2
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d020      	beq.n	80057f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d01b      	beq.n	80057f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f06f 0202 	mvn.w	r2, #2
 80057c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2201      	movs	r2, #1
 80057c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	f003 0303 	and.w	r3, r3, #3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d003      	beq.n	80057de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 f8d1 	bl	800597e <HAL_TIM_IC_CaptureCallback>
 80057dc:	e005      	b.n	80057ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f8c4 	bl	800596c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 f8d3 	bl	8005990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	f003 0304 	and.w	r3, r3, #4
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d020      	beq.n	800583c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f003 0304 	and.w	r3, r3, #4
 8005800:	2b00      	cmp	r3, #0
 8005802:	d01b      	beq.n	800583c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f06f 0204 	mvn.w	r2, #4
 800580c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2202      	movs	r2, #2
 8005812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f8ab 	bl	800597e <HAL_TIM_IC_CaptureCallback>
 8005828:	e005      	b.n	8005836 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 f89e 	bl	800596c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 f8ad 	bl	8005990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	f003 0308 	and.w	r3, r3, #8
 8005842:	2b00      	cmp	r3, #0
 8005844:	d020      	beq.n	8005888 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f003 0308 	and.w	r3, r3, #8
 800584c:	2b00      	cmp	r3, #0
 800584e:	d01b      	beq.n	8005888 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f06f 0208 	mvn.w	r2, #8
 8005858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2204      	movs	r2, #4
 800585e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	69db      	ldr	r3, [r3, #28]
 8005866:	f003 0303 	and.w	r3, r3, #3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d003      	beq.n	8005876 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 f885 	bl	800597e <HAL_TIM_IC_CaptureCallback>
 8005874:	e005      	b.n	8005882 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f878 	bl	800596c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 f887 	bl	8005990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	f003 0310 	and.w	r3, r3, #16
 800588e:	2b00      	cmp	r3, #0
 8005890:	d020      	beq.n	80058d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f003 0310 	and.w	r3, r3, #16
 8005898:	2b00      	cmp	r3, #0
 800589a:	d01b      	beq.n	80058d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f06f 0210 	mvn.w	r2, #16
 80058a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2208      	movs	r2, #8
 80058aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d003      	beq.n	80058c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 f85f 	bl	800597e <HAL_TIM_IC_CaptureCallback>
 80058c0:	e005      	b.n	80058ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f852 	bl	800596c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 f861 	bl	8005990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	f003 0301 	and.w	r3, r3, #1
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00c      	beq.n	80058f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f003 0301 	and.w	r3, r3, #1
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d007      	beq.n	80058f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f06f 0201 	mvn.w	r2, #1
 80058f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f7fc ffca 	bl	800288c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00c      	beq.n	800591c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005908:	2b00      	cmp	r3, #0
 800590a:	d007      	beq.n	800591c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f8c3 	bl	8005aa2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00c      	beq.n	8005940 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800592c:	2b00      	cmp	r3, #0
 800592e:	d007      	beq.n	8005940 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 f831 	bl	80059a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	f003 0320 	and.w	r3, r3, #32
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00c      	beq.n	8005964 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f003 0320 	and.w	r3, r3, #32
 8005950:	2b00      	cmp	r3, #0
 8005952:	d007      	beq.n	8005964 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f06f 0220 	mvn.w	r2, #32
 800595c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 f896 	bl	8005a90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005964:	bf00      	nop
 8005966:	3710      	adds	r7, #16
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	bc80      	pop	{r7}
 800597c:	4770      	bx	lr

0800597e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800597e:	b480      	push	{r7}
 8005980:	b083      	sub	sp, #12
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005986:	bf00      	nop
 8005988:	370c      	adds	r7, #12
 800598a:	46bd      	mov	sp, r7
 800598c:	bc80      	pop	{r7}
 800598e:	4770      	bx	lr

08005990 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	bc80      	pop	{r7}
 80059a0:	4770      	bx	lr

080059a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059a2:	b480      	push	{r7}
 80059a4:	b083      	sub	sp, #12
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059aa:	bf00      	nop
 80059ac:	370c      	adds	r7, #12
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bc80      	pop	{r7}
 80059b2:	4770      	bx	lr

080059b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a2f      	ldr	r2, [pc, #188]	@ (8005a84 <TIM_Base_SetConfig+0xd0>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d00b      	beq.n	80059e4 <TIM_Base_SetConfig+0x30>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059d2:	d007      	beq.n	80059e4 <TIM_Base_SetConfig+0x30>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a2c      	ldr	r2, [pc, #176]	@ (8005a88 <TIM_Base_SetConfig+0xd4>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d003      	beq.n	80059e4 <TIM_Base_SetConfig+0x30>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a2b      	ldr	r2, [pc, #172]	@ (8005a8c <TIM_Base_SetConfig+0xd8>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d108      	bne.n	80059f6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a22      	ldr	r2, [pc, #136]	@ (8005a84 <TIM_Base_SetConfig+0xd0>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d00b      	beq.n	8005a16 <TIM_Base_SetConfig+0x62>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a04:	d007      	beq.n	8005a16 <TIM_Base_SetConfig+0x62>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a1f      	ldr	r2, [pc, #124]	@ (8005a88 <TIM_Base_SetConfig+0xd4>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d003      	beq.n	8005a16 <TIM_Base_SetConfig+0x62>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a1e      	ldr	r2, [pc, #120]	@ (8005a8c <TIM_Base_SetConfig+0xd8>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d108      	bne.n	8005a28 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	689a      	ldr	r2, [r3, #8]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a0d      	ldr	r2, [pc, #52]	@ (8005a84 <TIM_Base_SetConfig+0xd0>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d103      	bne.n	8005a5c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	691a      	ldr	r2, [r3, #16]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	f003 0301 	and.w	r3, r3, #1
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d005      	beq.n	8005a7a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	f023 0201 	bic.w	r2, r3, #1
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	611a      	str	r2, [r3, #16]
  }
}
 8005a7a:	bf00      	nop
 8005a7c:	3714      	adds	r7, #20
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bc80      	pop	{r7}
 8005a82:	4770      	bx	lr
 8005a84:	40012c00 	.word	0x40012c00
 8005a88:	40000400 	.word	0x40000400
 8005a8c:	40000800 	.word	0x40000800

08005a90 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bc80      	pop	{r7}
 8005aa0:	4770      	bx	lr

08005aa2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b083      	sub	sp, #12
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005aaa:	bf00      	nop
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bc80      	pop	{r7}
 8005ab2:	4770      	bx	lr

08005ab4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d101      	bne.n	8005ac6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e042      	b.n	8005b4c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d106      	bne.n	8005ae0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f7fc ff64 	bl	80029a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2224      	movs	r2, #36	@ 0x24
 8005ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68da      	ldr	r2, [r3, #12]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005af6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 fa09 	bl	8005f10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	691a      	ldr	r2, [r3, #16]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	695a      	ldr	r2, [r3, #20]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68da      	ldr	r2, [r3, #12]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2220      	movs	r2, #32
 8005b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2220      	movs	r2, #32
 8005b40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3708      	adds	r7, #8
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b08a      	sub	sp, #40	@ 0x28
 8005b58:	af02      	add	r7, sp, #8
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	603b      	str	r3, [r7, #0]
 8005b60:	4613      	mov	r3, r2
 8005b62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b64:	2300      	movs	r3, #0
 8005b66:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	2b20      	cmp	r3, #32
 8005b72:	d175      	bne.n	8005c60 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d002      	beq.n	8005b80 <HAL_UART_Transmit+0x2c>
 8005b7a:	88fb      	ldrh	r3, [r7, #6]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d101      	bne.n	8005b84 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e06e      	b.n	8005c62 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2221      	movs	r2, #33	@ 0x21
 8005b8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b92:	f7fd f915 	bl	8002dc0 <HAL_GetTick>
 8005b96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	88fa      	ldrh	r2, [r7, #6]
 8005b9c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	88fa      	ldrh	r2, [r7, #6]
 8005ba2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bac:	d108      	bne.n	8005bc0 <HAL_UART_Transmit+0x6c>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d104      	bne.n	8005bc0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	61bb      	str	r3, [r7, #24]
 8005bbe:	e003      	b.n	8005bc8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005bc8:	e02e      	b.n	8005c28 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	9300      	str	r3, [sp, #0]
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	2180      	movs	r1, #128	@ 0x80
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f000 f8df 	bl	8005d98 <UART_WaitOnFlagUntilTimeout>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d005      	beq.n	8005bec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2220      	movs	r2, #32
 8005be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005be8:	2303      	movs	r3, #3
 8005bea:	e03a      	b.n	8005c62 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d10b      	bne.n	8005c0a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	881b      	ldrh	r3, [r3, #0]
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	3302      	adds	r3, #2
 8005c06:	61bb      	str	r3, [r7, #24]
 8005c08:	e007      	b.n	8005c1a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	781a      	ldrb	r2, [r3, #0]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	3301      	adds	r3, #1
 8005c18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	3b01      	subs	r3, #1
 8005c22:	b29a      	uxth	r2, r3
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1cb      	bne.n	8005bca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	9300      	str	r3, [sp, #0]
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	2140      	movs	r1, #64	@ 0x40
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f000 f8ab 	bl	8005d98 <UART_WaitOnFlagUntilTimeout>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d005      	beq.n	8005c54 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2220      	movs	r2, #32
 8005c4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005c50:	2303      	movs	r3, #3
 8005c52:	e006      	b.n	8005c62 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2220      	movs	r2, #32
 8005c58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	e000      	b.n	8005c62 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005c60:	2302      	movs	r3, #2
  }
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3720      	adds	r7, #32
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b08a      	sub	sp, #40	@ 0x28
 8005c6e:	af02      	add	r7, sp, #8
 8005c70:	60f8      	str	r0, [r7, #12]
 8005c72:	60b9      	str	r1, [r7, #8]
 8005c74:	603b      	str	r3, [r7, #0]
 8005c76:	4613      	mov	r3, r2
 8005c78:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	2b20      	cmp	r3, #32
 8005c88:	f040 8081 	bne.w	8005d8e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d002      	beq.n	8005c98 <HAL_UART_Receive+0x2e>
 8005c92:	88fb      	ldrh	r3, [r7, #6]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d101      	bne.n	8005c9c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e079      	b.n	8005d90 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2222      	movs	r2, #34	@ 0x22
 8005ca6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005cb0:	f7fd f886 	bl	8002dc0 <HAL_GetTick>
 8005cb4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	88fa      	ldrh	r2, [r7, #6]
 8005cba:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	88fa      	ldrh	r2, [r7, #6]
 8005cc0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cca:	d108      	bne.n	8005cde <HAL_UART_Receive+0x74>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d104      	bne.n	8005cde <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	61bb      	str	r3, [r7, #24]
 8005cdc:	e003      	b.n	8005ce6 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005ce6:	e047      	b.n	8005d78 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	9300      	str	r3, [sp, #0]
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	2120      	movs	r1, #32
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	f000 f850 	bl	8005d98 <UART_WaitOnFlagUntilTimeout>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d005      	beq.n	8005d0a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2220      	movs	r2, #32
 8005d02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e042      	b.n	8005d90 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d10c      	bne.n	8005d2a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	3302      	adds	r3, #2
 8005d26:	61bb      	str	r3, [r7, #24]
 8005d28:	e01f      	b.n	8005d6a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d32:	d007      	beq.n	8005d44 <HAL_UART_Receive+0xda>
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d10a      	bne.n	8005d52 <HAL_UART_Receive+0xe8>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d106      	bne.n	8005d52 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	b2da      	uxtb	r2, r3
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	701a      	strb	r2, [r3, #0]
 8005d50:	e008      	b.n	8005d64 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d5e:	b2da      	uxtb	r2, r3
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	3301      	adds	r3, #1
 8005d68:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	3b01      	subs	r3, #1
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1b2      	bne.n	8005ce8 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2220      	movs	r2, #32
 8005d86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	e000      	b.n	8005d90 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005d8e:	2302      	movs	r3, #2
  }
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3720      	adds	r7, #32
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b086      	sub	sp, #24
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	603b      	str	r3, [r7, #0]
 8005da4:	4613      	mov	r3, r2
 8005da6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005da8:	e03b      	b.n	8005e22 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005daa:	6a3b      	ldr	r3, [r7, #32]
 8005dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db0:	d037      	beq.n	8005e22 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005db2:	f7fd f805 	bl	8002dc0 <HAL_GetTick>
 8005db6:	4602      	mov	r2, r0
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	6a3a      	ldr	r2, [r7, #32]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d302      	bcc.n	8005dc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005dc2:	6a3b      	ldr	r3, [r7, #32]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d101      	bne.n	8005dcc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e03a      	b.n	8005e42 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	f003 0304 	and.w	r3, r3, #4
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d023      	beq.n	8005e22 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	2b80      	cmp	r3, #128	@ 0x80
 8005dde:	d020      	beq.n	8005e22 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	2b40      	cmp	r3, #64	@ 0x40
 8005de4:	d01d      	beq.n	8005e22 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 0308 	and.w	r3, r3, #8
 8005df0:	2b08      	cmp	r3, #8
 8005df2:	d116      	bne.n	8005e22 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005df4:	2300      	movs	r3, #0
 8005df6:	617b      	str	r3, [r7, #20]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	617b      	str	r3, [r7, #20]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	617b      	str	r3, [r7, #20]
 8005e08:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	f000 f81d 	bl	8005e4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2208      	movs	r2, #8
 8005e14:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e00f      	b.n	8005e42 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	68ba      	ldr	r2, [r7, #8]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	bf0c      	ite	eq
 8005e32:	2301      	moveq	r3, #1
 8005e34:	2300      	movne	r3, #0
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	461a      	mov	r2, r3
 8005e3a:	79fb      	ldrb	r3, [r7, #7]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d0b4      	beq.n	8005daa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3718      	adds	r7, #24
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	b095      	sub	sp, #84	@ 0x54
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	330c      	adds	r3, #12
 8005e58:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e5c:	e853 3f00 	ldrex	r3, [r3]
 8005e60:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	330c      	adds	r3, #12
 8005e70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005e72:	643a      	str	r2, [r7, #64]	@ 0x40
 8005e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e76:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e7a:	e841 2300 	strex	r3, r2, [r1]
 8005e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1e5      	bne.n	8005e52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	3314      	adds	r3, #20
 8005e8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e8e:	6a3b      	ldr	r3, [r7, #32]
 8005e90:	e853 3f00 	ldrex	r3, [r3]
 8005e94:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	f023 0301 	bic.w	r3, r3, #1
 8005e9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	3314      	adds	r3, #20
 8005ea4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ea6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eaa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005eac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005eae:	e841 2300 	strex	r3, r2, [r1]
 8005eb2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1e5      	bne.n	8005e86 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d119      	bne.n	8005ef6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	330c      	adds	r3, #12
 8005ec8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	e853 3f00 	ldrex	r3, [r3]
 8005ed0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	f023 0310 	bic.w	r3, r3, #16
 8005ed8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	330c      	adds	r3, #12
 8005ee0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ee2:	61ba      	str	r2, [r7, #24]
 8005ee4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee6:	6979      	ldr	r1, [r7, #20]
 8005ee8:	69ba      	ldr	r2, [r7, #24]
 8005eea:	e841 2300 	strex	r3, r2, [r1]
 8005eee:	613b      	str	r3, [r7, #16]
   return(result);
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1e5      	bne.n	8005ec2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2220      	movs	r2, #32
 8005efa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005f04:	bf00      	nop
 8005f06:	3754      	adds	r7, #84	@ 0x54
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bc80      	pop	{r7}
 8005f0c:	4770      	bx	lr
	...

08005f10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	68da      	ldr	r2, [r3, #12]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	689a      	ldr	r2, [r3, #8]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	431a      	orrs	r2, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	695b      	ldr	r3, [r3, #20]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005f4a:	f023 030c 	bic.w	r3, r3, #12
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	6812      	ldr	r2, [r2, #0]
 8005f52:	68b9      	ldr	r1, [r7, #8]
 8005f54:	430b      	orrs	r3, r1
 8005f56:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	699a      	ldr	r2, [r3, #24]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a2c      	ldr	r2, [pc, #176]	@ (8006024 <UART_SetConfig+0x114>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d103      	bne.n	8005f80 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005f78:	f7ff fafc 	bl	8005574 <HAL_RCC_GetPCLK2Freq>
 8005f7c:	60f8      	str	r0, [r7, #12]
 8005f7e:	e002      	b.n	8005f86 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005f80:	f7ff fae4 	bl	800554c <HAL_RCC_GetPCLK1Freq>
 8005f84:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	4613      	mov	r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	4413      	add	r3, r2
 8005f8e:	009a      	lsls	r2, r3, #2
 8005f90:	441a      	add	r2, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f9c:	4a22      	ldr	r2, [pc, #136]	@ (8006028 <UART_SetConfig+0x118>)
 8005f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005fa2:	095b      	lsrs	r3, r3, #5
 8005fa4:	0119      	lsls	r1, r3, #4
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	4613      	mov	r3, r2
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	4413      	add	r3, r2
 8005fae:	009a      	lsls	r2, r3, #2
 8005fb0:	441a      	add	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fbc:	4b1a      	ldr	r3, [pc, #104]	@ (8006028 <UART_SetConfig+0x118>)
 8005fbe:	fba3 0302 	umull	r0, r3, r3, r2
 8005fc2:	095b      	lsrs	r3, r3, #5
 8005fc4:	2064      	movs	r0, #100	@ 0x64
 8005fc6:	fb00 f303 	mul.w	r3, r0, r3
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	011b      	lsls	r3, r3, #4
 8005fce:	3332      	adds	r3, #50	@ 0x32
 8005fd0:	4a15      	ldr	r2, [pc, #84]	@ (8006028 <UART_SetConfig+0x118>)
 8005fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fd6:	095b      	lsrs	r3, r3, #5
 8005fd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005fdc:	4419      	add	r1, r3
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	4413      	add	r3, r2
 8005fe6:	009a      	lsls	r2, r3, #2
 8005fe8:	441a      	add	r2, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8006028 <UART_SetConfig+0x118>)
 8005ff6:	fba3 0302 	umull	r0, r3, r3, r2
 8005ffa:	095b      	lsrs	r3, r3, #5
 8005ffc:	2064      	movs	r0, #100	@ 0x64
 8005ffe:	fb00 f303 	mul.w	r3, r0, r3
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	011b      	lsls	r3, r3, #4
 8006006:	3332      	adds	r3, #50	@ 0x32
 8006008:	4a07      	ldr	r2, [pc, #28]	@ (8006028 <UART_SetConfig+0x118>)
 800600a:	fba2 2303 	umull	r2, r3, r2, r3
 800600e:	095b      	lsrs	r3, r3, #5
 8006010:	f003 020f 	and.w	r2, r3, #15
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	440a      	add	r2, r1
 800601a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800601c:	bf00      	nop
 800601e:	3710      	adds	r7, #16
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}
 8006024:	40013800 	.word	0x40013800
 8006028:	51eb851f 	.word	0x51eb851f

0800602c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800602c:	b480      	push	{r7}
 800602e:	b085      	sub	sp, #20
 8006030:	af00      	add	r7, sp, #0
 8006032:	4603      	mov	r3, r0
 8006034:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006036:	2300      	movs	r3, #0
 8006038:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800603a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800603e:	2b84      	cmp	r3, #132	@ 0x84
 8006040:	d005      	beq.n	800604e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006042:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	4413      	add	r3, r2
 800604a:	3303      	adds	r3, #3
 800604c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800604e:	68fb      	ldr	r3, [r7, #12]
}
 8006050:	4618      	mov	r0, r3
 8006052:	3714      	adds	r7, #20
 8006054:	46bd      	mov	sp, r7
 8006056:	bc80      	pop	{r7}
 8006058:	4770      	bx	lr

0800605a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800605a:	b480      	push	{r7}
 800605c:	b083      	sub	sp, #12
 800605e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006060:	f3ef 8305 	mrs	r3, IPSR
 8006064:	607b      	str	r3, [r7, #4]
  return(result);
 8006066:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006068:	2b00      	cmp	r3, #0
 800606a:	bf14      	ite	ne
 800606c:	2301      	movne	r3, #1
 800606e:	2300      	moveq	r3, #0
 8006070:	b2db      	uxtb	r3, r3
}
 8006072:	4618      	mov	r0, r3
 8006074:	370c      	adds	r7, #12
 8006076:	46bd      	mov	sp, r7
 8006078:	bc80      	pop	{r7}
 800607a:	4770      	bx	lr

0800607c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006080:	f001 fbdc 	bl	800783c <vTaskStartScheduler>
  
  return osOK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	bd80      	pop	{r7, pc}

0800608a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800608a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800608c:	b089      	sub	sp, #36	@ 0x24
 800608e:	af04      	add	r7, sp, #16
 8006090:	6078      	str	r0, [r7, #4]
 8006092:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	695b      	ldr	r3, [r3, #20]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d020      	beq.n	80060de <osThreadCreate+0x54>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d01c      	beq.n	80060de <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685c      	ldr	r4, [r3, #4]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	691e      	ldr	r6, [r3, #16]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7ff ffb8 	bl	800602c <makeFreeRtosPriority>
 80060bc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80060c6:	9202      	str	r2, [sp, #8]
 80060c8:	9301      	str	r3, [sp, #4]
 80060ca:	9100      	str	r1, [sp, #0]
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	4632      	mov	r2, r6
 80060d0:	4629      	mov	r1, r5
 80060d2:	4620      	mov	r0, r4
 80060d4:	f001 f9bf 	bl	8007456 <xTaskCreateStatic>
 80060d8:	4603      	mov	r3, r0
 80060da:	60fb      	str	r3, [r7, #12]
 80060dc:	e01c      	b.n	8006118 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685c      	ldr	r4, [r3, #4]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80060ea:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7ff ff9a 	bl	800602c <makeFreeRtosPriority>
 80060f8:	4602      	mov	r2, r0
 80060fa:	f107 030c 	add.w	r3, r7, #12
 80060fe:	9301      	str	r3, [sp, #4]
 8006100:	9200      	str	r2, [sp, #0]
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	4632      	mov	r2, r6
 8006106:	4629      	mov	r1, r5
 8006108:	4620      	mov	r0, r4
 800610a:	f001 fa04 	bl	8007516 <xTaskCreate>
 800610e:	4603      	mov	r3, r0
 8006110:	2b01      	cmp	r3, #1
 8006112:	d001      	beq.n	8006118 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006114:	2300      	movs	r3, #0
 8006116:	e000      	b.n	800611a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006118:	68fb      	ldr	r3, [r7, #12]
}
 800611a:	4618      	mov	r0, r3
 800611c:	3714      	adds	r7, #20
 800611e:	46bd      	mov	sp, r7
 8006120:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006122 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b084      	sub	sp, #16
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d001      	beq.n	8006138 <osDelay+0x16>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	e000      	b.n	800613a <osDelay+0x18>
 8006138:	2301      	movs	r3, #1
 800613a:	4618      	mov	r0, r3
 800613c:	f001 fb48 	bl	80077d0 <vTaskDelay>
  
  return osOK;
 8006140:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006142:	4618      	mov	r0, r3
 8006144:	3710      	adds	r7, #16
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b082      	sub	sp, #8
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d007      	beq.n	800616a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	4619      	mov	r1, r3
 8006160:	2001      	movs	r0, #1
 8006162:	f000 fb92 	bl	800688a <xQueueCreateMutexStatic>
 8006166:	4603      	mov	r3, r0
 8006168:	e003      	b.n	8006172 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800616a:	2001      	movs	r0, #1
 800616c:	f000 fb75 	bl	800685a <xQueueCreateMutex>
 8006170:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8006172:	4618      	mov	r0, r3
 8006174:	3708      	adds	r7, #8
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
	...

0800617c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006186:	2300      	movs	r3, #0
 8006188:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d101      	bne.n	8006194 <osMutexWait+0x18>
    return osErrorParameter;
 8006190:	2380      	movs	r3, #128	@ 0x80
 8006192:	e03a      	b.n	800620a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8006194:	2300      	movs	r3, #0
 8006196:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800619e:	d103      	bne.n	80061a8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80061a0:	f04f 33ff 	mov.w	r3, #4294967295
 80061a4:	60fb      	str	r3, [r7, #12]
 80061a6:	e009      	b.n	80061bc <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d006      	beq.n	80061bc <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d101      	bne.n	80061bc <osMutexWait+0x40>
      ticks = 1;
 80061b8:	2301      	movs	r3, #1
 80061ba:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80061bc:	f7ff ff4d 	bl	800605a <inHandlerMode>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d017      	beq.n	80061f6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80061c6:	f107 0308 	add.w	r3, r7, #8
 80061ca:	461a      	mov	r2, r3
 80061cc:	2100      	movs	r1, #0
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 ff98 	bl	8007104 <xQueueReceiveFromISR>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d001      	beq.n	80061de <osMutexWait+0x62>
      return osErrorOS;
 80061da:	23ff      	movs	r3, #255	@ 0xff
 80061dc:	e015      	b.n	800620a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d011      	beq.n	8006208 <osMutexWait+0x8c>
 80061e4:	4b0b      	ldr	r3, [pc, #44]	@ (8006214 <osMutexWait+0x98>)
 80061e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061ea:	601a      	str	r2, [r3, #0]
 80061ec:	f3bf 8f4f 	dsb	sy
 80061f0:	f3bf 8f6f 	isb	sy
 80061f4:	e008      	b.n	8006208 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80061f6:	68f9      	ldr	r1, [r7, #12]
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 fe73 	bl	8006ee4 <xQueueSemaphoreTake>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b01      	cmp	r3, #1
 8006202:	d001      	beq.n	8006208 <osMutexWait+0x8c>
    return osErrorOS;
 8006204:	23ff      	movs	r3, #255	@ 0xff
 8006206:	e000      	b.n	800620a <osMutexWait+0x8e>
  }
  
  return osOK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	e000ed04 	.word	0xe000ed04

08006218 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006220:	2300      	movs	r3, #0
 8006222:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006224:	2300      	movs	r3, #0
 8006226:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8006228:	f7ff ff17 	bl	800605a <inHandlerMode>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d016      	beq.n	8006260 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006232:	f107 0308 	add.w	r3, r7, #8
 8006236:	4619      	mov	r1, r3
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 fce1 	bl	8006c00 <xQueueGiveFromISR>
 800623e:	4603      	mov	r3, r0
 8006240:	2b01      	cmp	r3, #1
 8006242:	d001      	beq.n	8006248 <osMutexRelease+0x30>
      return osErrorOS;
 8006244:	23ff      	movs	r3, #255	@ 0xff
 8006246:	e017      	b.n	8006278 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d013      	beq.n	8006276 <osMutexRelease+0x5e>
 800624e:	4b0c      	ldr	r3, [pc, #48]	@ (8006280 <osMutexRelease+0x68>)
 8006250:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006254:	601a      	str	r2, [r3, #0]
 8006256:	f3bf 8f4f 	dsb	sy
 800625a:	f3bf 8f6f 	isb	sy
 800625e:	e00a      	b.n	8006276 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8006260:	2300      	movs	r3, #0
 8006262:	2200      	movs	r2, #0
 8006264:	2100      	movs	r1, #0
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 fb2a 	bl	80068c0 <xQueueGenericSend>
 800626c:	4603      	mov	r3, r0
 800626e:	2b01      	cmp	r3, #1
 8006270:	d001      	beq.n	8006276 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8006272:	23ff      	movs	r3, #255	@ 0xff
 8006274:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8006276:	68fb      	ldr	r3, [r7, #12]
}
 8006278:	4618      	mov	r0, r3
 800627a:	3710      	adds	r7, #16
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	e000ed04 	.word	0xe000ed04

08006284 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006284:	b590      	push	{r4, r7, lr}
 8006286:	b085      	sub	sp, #20
 8006288:	af02      	add	r7, sp, #8
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d011      	beq.n	80062ba <osMessageCreate+0x36>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00d      	beq.n	80062ba <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6818      	ldr	r0, [r3, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6859      	ldr	r1, [r3, #4]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	689a      	ldr	r2, [r3, #8]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	2400      	movs	r4, #0
 80062b0:	9400      	str	r4, [sp, #0]
 80062b2:	f000 f9dd 	bl	8006670 <xQueueGenericCreateStatic>
 80062b6:	4603      	mov	r3, r0
 80062b8:	e008      	b.n	80062cc <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6818      	ldr	r0, [r3, #0]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	4619      	mov	r1, r3
 80062c6:	f000 fa50 	bl	800676a <xQueueGenericCreate>
 80062ca:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd90      	pop	{r4, r7, pc}

080062d4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b086      	sub	sp, #24
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80062e0:	2300      	movs	r3, #0
 80062e2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d101      	bne.n	80062f2 <osMessagePut+0x1e>
    ticks = 1;
 80062ee:	2301      	movs	r3, #1
 80062f0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80062f2:	f7ff feb2 	bl	800605a <inHandlerMode>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d018      	beq.n	800632e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80062fc:	f107 0210 	add.w	r2, r7, #16
 8006300:	f107 0108 	add.w	r1, r7, #8
 8006304:	2300      	movs	r3, #0
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f000 fbdc 	bl	8006ac4 <xQueueGenericSendFromISR>
 800630c:	4603      	mov	r3, r0
 800630e:	2b01      	cmp	r3, #1
 8006310:	d001      	beq.n	8006316 <osMessagePut+0x42>
      return osErrorOS;
 8006312:	23ff      	movs	r3, #255	@ 0xff
 8006314:	e018      	b.n	8006348 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d014      	beq.n	8006346 <osMessagePut+0x72>
 800631c:	4b0c      	ldr	r3, [pc, #48]	@ (8006350 <osMessagePut+0x7c>)
 800631e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006322:	601a      	str	r2, [r3, #0]
 8006324:	f3bf 8f4f 	dsb	sy
 8006328:	f3bf 8f6f 	isb	sy
 800632c:	e00b      	b.n	8006346 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800632e:	f107 0108 	add.w	r1, r7, #8
 8006332:	2300      	movs	r3, #0
 8006334:	697a      	ldr	r2, [r7, #20]
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f000 fac2 	bl	80068c0 <xQueueGenericSend>
 800633c:	4603      	mov	r3, r0
 800633e:	2b01      	cmp	r3, #1
 8006340:	d001      	beq.n	8006346 <osMessagePut+0x72>
      return osErrorOS;
 8006342:	23ff      	movs	r3, #255	@ 0xff
 8006344:	e000      	b.n	8006348 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8006346:	2300      	movs	r3, #0
}
 8006348:	4618      	mov	r0, r3
 800634a:	3718      	adds	r7, #24
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	e000ed04 	.word	0xe000ed04

08006354 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8006354:	b590      	push	{r4, r7, lr}
 8006356:	b08b      	sub	sp, #44	@ 0x2c
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8006364:	2300      	movs	r3, #0
 8006366:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d10a      	bne.n	8006384 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800636e:	2380      	movs	r3, #128	@ 0x80
 8006370:	617b      	str	r3, [r7, #20]
    return event;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	461c      	mov	r4, r3
 8006376:	f107 0314 	add.w	r3, r7, #20
 800637a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800637e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006382:	e054      	b.n	800642e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8006384:	2300      	movs	r3, #0
 8006386:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8006388:	2300      	movs	r3, #0
 800638a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006392:	d103      	bne.n	800639c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8006394:	f04f 33ff 	mov.w	r3, #4294967295
 8006398:	627b      	str	r3, [r7, #36]	@ 0x24
 800639a:	e009      	b.n	80063b0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d006      	beq.n	80063b0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 80063a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d101      	bne.n	80063b0 <osMessageGet+0x5c>
      ticks = 1;
 80063ac:	2301      	movs	r3, #1
 80063ae:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 80063b0:	f7ff fe53 	bl	800605a <inHandlerMode>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d01c      	beq.n	80063f4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80063ba:	f107 0220 	add.w	r2, r7, #32
 80063be:	f107 0314 	add.w	r3, r7, #20
 80063c2:	3304      	adds	r3, #4
 80063c4:	4619      	mov	r1, r3
 80063c6:	68b8      	ldr	r0, [r7, #8]
 80063c8:	f000 fe9c 	bl	8007104 <xQueueReceiveFromISR>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d102      	bne.n	80063d8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80063d2:	2310      	movs	r3, #16
 80063d4:	617b      	str	r3, [r7, #20]
 80063d6:	e001      	b.n	80063dc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80063d8:	2300      	movs	r3, #0
 80063da:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80063dc:	6a3b      	ldr	r3, [r7, #32]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d01d      	beq.n	800641e <osMessageGet+0xca>
 80063e2:	4b15      	ldr	r3, [pc, #84]	@ (8006438 <osMessageGet+0xe4>)
 80063e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063e8:	601a      	str	r2, [r3, #0]
 80063ea:	f3bf 8f4f 	dsb	sy
 80063ee:	f3bf 8f6f 	isb	sy
 80063f2:	e014      	b.n	800641e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80063f4:	f107 0314 	add.w	r3, r7, #20
 80063f8:	3304      	adds	r3, #4
 80063fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063fc:	4619      	mov	r1, r3
 80063fe:	68b8      	ldr	r0, [r7, #8]
 8006400:	f000 fc8e 	bl	8006d20 <xQueueReceive>
 8006404:	4603      	mov	r3, r0
 8006406:	2b01      	cmp	r3, #1
 8006408:	d102      	bne.n	8006410 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800640a:	2310      	movs	r3, #16
 800640c:	617b      	str	r3, [r7, #20]
 800640e:	e006      	b.n	800641e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006412:	2b00      	cmp	r3, #0
 8006414:	d101      	bne.n	800641a <osMessageGet+0xc6>
 8006416:	2300      	movs	r3, #0
 8006418:	e000      	b.n	800641c <osMessageGet+0xc8>
 800641a:	2340      	movs	r3, #64	@ 0x40
 800641c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	461c      	mov	r4, r3
 8006422:	f107 0314 	add.w	r3, r7, #20
 8006426:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800642a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	372c      	adds	r7, #44	@ 0x2c
 8006432:	46bd      	mov	sp, r7
 8006434:	bd90      	pop	{r4, r7, pc}
 8006436:	bf00      	nop
 8006438:	e000ed04 	.word	0xe000ed04

0800643c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f103 0208 	add.w	r2, r3, #8
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f04f 32ff 	mov.w	r2, #4294967295
 8006454:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f103 0208 	add.w	r2, r3, #8
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f103 0208 	add.w	r2, r3, #8
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006470:	bf00      	nop
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	bc80      	pop	{r7}
 8006478:	4770      	bx	lr

0800647a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800647a:	b480      	push	{r7}
 800647c:	b083      	sub	sp, #12
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006488:	bf00      	nop
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	bc80      	pop	{r7}
 8006490:	4770      	bx	lr

08006492 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006492:	b480      	push	{r7}
 8006494:	b085      	sub	sp, #20
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
 800649a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	689a      	ldr	r2, [r3, #8]
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	683a      	ldr	r2, [r7, #0]
 80064b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	683a      	ldr	r2, [r7, #0]
 80064bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	1c5a      	adds	r2, r3, #1
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	601a      	str	r2, [r3, #0]
}
 80064ce:	bf00      	nop
 80064d0:	3714      	adds	r7, #20
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bc80      	pop	{r7}
 80064d6:	4770      	bx	lr

080064d8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ee:	d103      	bne.n	80064f8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	60fb      	str	r3, [r7, #12]
 80064f6:	e00c      	b.n	8006512 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	3308      	adds	r3, #8
 80064fc:	60fb      	str	r3, [r7, #12]
 80064fe:	e002      	b.n	8006506 <vListInsert+0x2e>
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	60fb      	str	r3, [r7, #12]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	429a      	cmp	r2, r3
 8006510:	d2f6      	bcs.n	8006500 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	685a      	ldr	r2, [r3, #4]
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	683a      	ldr	r2, [r7, #0]
 8006520:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	683a      	ldr	r2, [r7, #0]
 800652c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	1c5a      	adds	r2, r3, #1
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	601a      	str	r2, [r3, #0]
}
 800653e:	bf00      	nop
 8006540:	3714      	adds	r7, #20
 8006542:	46bd      	mov	sp, r7
 8006544:	bc80      	pop	{r7}
 8006546:	4770      	bx	lr

08006548 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	6892      	ldr	r2, [r2, #8]
 800655e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	6852      	ldr	r2, [r2, #4]
 8006568:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	429a      	cmp	r2, r3
 8006572:	d103      	bne.n	800657c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	689a      	ldr	r2, [r3, #8]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	1e5a      	subs	r2, r3, #1
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
}
 8006590:	4618      	mov	r0, r3
 8006592:	3714      	adds	r7, #20
 8006594:	46bd      	mov	sp, r7
 8006596:	bc80      	pop	{r7}
 8006598:	4770      	bx	lr
	...

0800659c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10b      	bne.n	80065c8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80065b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065b4:	f383 8811 	msr	BASEPRI, r3
 80065b8:	f3bf 8f6f 	isb	sy
 80065bc:	f3bf 8f4f 	dsb	sy
 80065c0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80065c2:	bf00      	nop
 80065c4:	bf00      	nop
 80065c6:	e7fd      	b.n	80065c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80065c8:	f002 f898 	bl	80086fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065d4:	68f9      	ldr	r1, [r7, #12]
 80065d6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80065d8:	fb01 f303 	mul.w	r3, r1, r3
 80065dc:	441a      	add	r2, r3
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2200      	movs	r2, #0
 80065e6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065f8:	3b01      	subs	r3, #1
 80065fa:	68f9      	ldr	r1, [r7, #12]
 80065fc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80065fe:	fb01 f303 	mul.w	r3, r1, r3
 8006602:	441a      	add	r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	22ff      	movs	r2, #255	@ 0xff
 800660c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	22ff      	movs	r2, #255	@ 0xff
 8006614:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d114      	bne.n	8006648 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d01a      	beq.n	800665c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	3310      	adds	r3, #16
 800662a:	4618      	mov	r0, r3
 800662c:	f001 fb8a 	bl	8007d44 <xTaskRemoveFromEventList>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d012      	beq.n	800665c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006636:	4b0d      	ldr	r3, [pc, #52]	@ (800666c <xQueueGenericReset+0xd0>)
 8006638:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800663c:	601a      	str	r2, [r3, #0]
 800663e:	f3bf 8f4f 	dsb	sy
 8006642:	f3bf 8f6f 	isb	sy
 8006646:	e009      	b.n	800665c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	3310      	adds	r3, #16
 800664c:	4618      	mov	r0, r3
 800664e:	f7ff fef5 	bl	800643c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	3324      	adds	r3, #36	@ 0x24
 8006656:	4618      	mov	r0, r3
 8006658:	f7ff fef0 	bl	800643c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800665c:	f002 f87e 	bl	800875c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006660:	2301      	movs	r3, #1
}
 8006662:	4618      	mov	r0, r3
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	e000ed04 	.word	0xe000ed04

08006670 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006670:	b580      	push	{r7, lr}
 8006672:	b08e      	sub	sp, #56	@ 0x38
 8006674:	af02      	add	r7, sp, #8
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	607a      	str	r2, [r7, #4]
 800667c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d10b      	bne.n	800669c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006688:	f383 8811 	msr	BASEPRI, r3
 800668c:	f3bf 8f6f 	isb	sy
 8006690:	f3bf 8f4f 	dsb	sy
 8006694:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006696:	bf00      	nop
 8006698:	bf00      	nop
 800669a:	e7fd      	b.n	8006698 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d10b      	bne.n	80066ba <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80066a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066a6:	f383 8811 	msr	BASEPRI, r3
 80066aa:	f3bf 8f6f 	isb	sy
 80066ae:	f3bf 8f4f 	dsb	sy
 80066b2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80066b4:	bf00      	nop
 80066b6:	bf00      	nop
 80066b8:	e7fd      	b.n	80066b6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d002      	beq.n	80066c6 <xQueueGenericCreateStatic+0x56>
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d001      	beq.n	80066ca <xQueueGenericCreateStatic+0x5a>
 80066c6:	2301      	movs	r3, #1
 80066c8:	e000      	b.n	80066cc <xQueueGenericCreateStatic+0x5c>
 80066ca:	2300      	movs	r3, #0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10b      	bne.n	80066e8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80066d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066d4:	f383 8811 	msr	BASEPRI, r3
 80066d8:	f3bf 8f6f 	isb	sy
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	623b      	str	r3, [r7, #32]
}
 80066e2:	bf00      	nop
 80066e4:	bf00      	nop
 80066e6:	e7fd      	b.n	80066e4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d102      	bne.n	80066f4 <xQueueGenericCreateStatic+0x84>
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d101      	bne.n	80066f8 <xQueueGenericCreateStatic+0x88>
 80066f4:	2301      	movs	r3, #1
 80066f6:	e000      	b.n	80066fa <xQueueGenericCreateStatic+0x8a>
 80066f8:	2300      	movs	r3, #0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10b      	bne.n	8006716 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80066fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006702:	f383 8811 	msr	BASEPRI, r3
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	61fb      	str	r3, [r7, #28]
}
 8006710:	bf00      	nop
 8006712:	bf00      	nop
 8006714:	e7fd      	b.n	8006712 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006716:	2350      	movs	r3, #80	@ 0x50
 8006718:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	2b50      	cmp	r3, #80	@ 0x50
 800671e:	d00b      	beq.n	8006738 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006724:	f383 8811 	msr	BASEPRI, r3
 8006728:	f3bf 8f6f 	isb	sy
 800672c:	f3bf 8f4f 	dsb	sy
 8006730:	61bb      	str	r3, [r7, #24]
}
 8006732:	bf00      	nop
 8006734:	bf00      	nop
 8006736:	e7fd      	b.n	8006734 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006738:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800673e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00d      	beq.n	8006760 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006746:	2201      	movs	r2, #1
 8006748:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800674c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006752:	9300      	str	r3, [sp, #0]
 8006754:	4613      	mov	r3, r2
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	68b9      	ldr	r1, [r7, #8]
 800675a:	68f8      	ldr	r0, [r7, #12]
 800675c:	f000 f840 	bl	80067e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006762:	4618      	mov	r0, r3
 8006764:	3730      	adds	r7, #48	@ 0x30
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800676a:	b580      	push	{r7, lr}
 800676c:	b08a      	sub	sp, #40	@ 0x28
 800676e:	af02      	add	r7, sp, #8
 8006770:	60f8      	str	r0, [r7, #12]
 8006772:	60b9      	str	r1, [r7, #8]
 8006774:	4613      	mov	r3, r2
 8006776:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d10b      	bne.n	8006796 <xQueueGenericCreate+0x2c>
	__asm volatile
 800677e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006782:	f383 8811 	msr	BASEPRI, r3
 8006786:	f3bf 8f6f 	isb	sy
 800678a:	f3bf 8f4f 	dsb	sy
 800678e:	613b      	str	r3, [r7, #16]
}
 8006790:	bf00      	nop
 8006792:	bf00      	nop
 8006794:	e7fd      	b.n	8006792 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	68ba      	ldr	r2, [r7, #8]
 800679a:	fb02 f303 	mul.w	r3, r2, r3
 800679e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	3350      	adds	r3, #80	@ 0x50
 80067a4:	4618      	mov	r0, r3
 80067a6:	f002 f8ab 	bl	8008900 <pvPortMalloc>
 80067aa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d011      	beq.n	80067d6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	3350      	adds	r3, #80	@ 0x50
 80067ba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80067c4:	79fa      	ldrb	r2, [r7, #7]
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	9300      	str	r3, [sp, #0]
 80067ca:	4613      	mov	r3, r2
 80067cc:	697a      	ldr	r2, [r7, #20]
 80067ce:	68b9      	ldr	r1, [r7, #8]
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	f000 f805 	bl	80067e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80067d6:	69bb      	ldr	r3, [r7, #24]
	}
 80067d8:	4618      	mov	r0, r3
 80067da:	3720      	adds	r7, #32
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	607a      	str	r2, [r7, #4]
 80067ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d103      	bne.n	80067fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	69ba      	ldr	r2, [r7, #24]
 80067f8:	601a      	str	r2, [r3, #0]
 80067fa:	e002      	b.n	8006802 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	68ba      	ldr	r2, [r7, #8]
 800680c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800680e:	2101      	movs	r1, #1
 8006810:	69b8      	ldr	r0, [r7, #24]
 8006812:	f7ff fec3 	bl	800659c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	78fa      	ldrb	r2, [r7, #3]
 800681a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800681e:	bf00      	nop
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006826:	b580      	push	{r7, lr}
 8006828:	b082      	sub	sp, #8
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00e      	beq.n	8006852 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006846:	2300      	movs	r3, #0
 8006848:	2200      	movs	r2, #0
 800684a:	2100      	movs	r1, #0
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 f837 	bl	80068c0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006852:	bf00      	nop
 8006854:	3708      	adds	r7, #8
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800685a:	b580      	push	{r7, lr}
 800685c:	b086      	sub	sp, #24
 800685e:	af00      	add	r7, sp, #0
 8006860:	4603      	mov	r3, r0
 8006862:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006864:	2301      	movs	r3, #1
 8006866:	617b      	str	r3, [r7, #20]
 8006868:	2300      	movs	r3, #0
 800686a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800686c:	79fb      	ldrb	r3, [r7, #7]
 800686e:	461a      	mov	r2, r3
 8006870:	6939      	ldr	r1, [r7, #16]
 8006872:	6978      	ldr	r0, [r7, #20]
 8006874:	f7ff ff79 	bl	800676a <xQueueGenericCreate>
 8006878:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800687a:	68f8      	ldr	r0, [r7, #12]
 800687c:	f7ff ffd3 	bl	8006826 <prvInitialiseMutex>

		return xNewQueue;
 8006880:	68fb      	ldr	r3, [r7, #12]
	}
 8006882:	4618      	mov	r0, r3
 8006884:	3718      	adds	r7, #24
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800688a:	b580      	push	{r7, lr}
 800688c:	b088      	sub	sp, #32
 800688e:	af02      	add	r7, sp, #8
 8006890:	4603      	mov	r3, r0
 8006892:	6039      	str	r1, [r7, #0]
 8006894:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006896:	2301      	movs	r3, #1
 8006898:	617b      	str	r3, [r7, #20]
 800689a:	2300      	movs	r3, #0
 800689c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800689e:	79fb      	ldrb	r3, [r7, #7]
 80068a0:	9300      	str	r3, [sp, #0]
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	2200      	movs	r2, #0
 80068a6:	6939      	ldr	r1, [r7, #16]
 80068a8:	6978      	ldr	r0, [r7, #20]
 80068aa:	f7ff fee1 	bl	8006670 <xQueueGenericCreateStatic>
 80068ae:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80068b0:	68f8      	ldr	r0, [r7, #12]
 80068b2:	f7ff ffb8 	bl	8006826 <prvInitialiseMutex>

		return xNewQueue;
 80068b6:	68fb      	ldr	r3, [r7, #12]
	}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3718      	adds	r7, #24
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b08e      	sub	sp, #56	@ 0x38
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	607a      	str	r2, [r7, #4]
 80068cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80068ce:	2300      	movs	r3, #0
 80068d0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80068d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d10b      	bne.n	80068f4 <xQueueGenericSend+0x34>
	__asm volatile
 80068dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e0:	f383 8811 	msr	BASEPRI, r3
 80068e4:	f3bf 8f6f 	isb	sy
 80068e8:	f3bf 8f4f 	dsb	sy
 80068ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80068ee:	bf00      	nop
 80068f0:	bf00      	nop
 80068f2:	e7fd      	b.n	80068f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d103      	bne.n	8006902 <xQueueGenericSend+0x42>
 80068fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d101      	bne.n	8006906 <xQueueGenericSend+0x46>
 8006902:	2301      	movs	r3, #1
 8006904:	e000      	b.n	8006908 <xQueueGenericSend+0x48>
 8006906:	2300      	movs	r3, #0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d10b      	bne.n	8006924 <xQueueGenericSend+0x64>
	__asm volatile
 800690c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006910:	f383 8811 	msr	BASEPRI, r3
 8006914:	f3bf 8f6f 	isb	sy
 8006918:	f3bf 8f4f 	dsb	sy
 800691c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800691e:	bf00      	nop
 8006920:	bf00      	nop
 8006922:	e7fd      	b.n	8006920 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	2b02      	cmp	r3, #2
 8006928:	d103      	bne.n	8006932 <xQueueGenericSend+0x72>
 800692a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800692c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800692e:	2b01      	cmp	r3, #1
 8006930:	d101      	bne.n	8006936 <xQueueGenericSend+0x76>
 8006932:	2301      	movs	r3, #1
 8006934:	e000      	b.n	8006938 <xQueueGenericSend+0x78>
 8006936:	2300      	movs	r3, #0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d10b      	bne.n	8006954 <xQueueGenericSend+0x94>
	__asm volatile
 800693c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006940:	f383 8811 	msr	BASEPRI, r3
 8006944:	f3bf 8f6f 	isb	sy
 8006948:	f3bf 8f4f 	dsb	sy
 800694c:	623b      	str	r3, [r7, #32]
}
 800694e:	bf00      	nop
 8006950:	bf00      	nop
 8006952:	e7fd      	b.n	8006950 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006954:	f001 fbbc 	bl	80080d0 <xTaskGetSchedulerState>
 8006958:	4603      	mov	r3, r0
 800695a:	2b00      	cmp	r3, #0
 800695c:	d102      	bne.n	8006964 <xQueueGenericSend+0xa4>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d101      	bne.n	8006968 <xQueueGenericSend+0xa8>
 8006964:	2301      	movs	r3, #1
 8006966:	e000      	b.n	800696a <xQueueGenericSend+0xaa>
 8006968:	2300      	movs	r3, #0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d10b      	bne.n	8006986 <xQueueGenericSend+0xc6>
	__asm volatile
 800696e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006972:	f383 8811 	msr	BASEPRI, r3
 8006976:	f3bf 8f6f 	isb	sy
 800697a:	f3bf 8f4f 	dsb	sy
 800697e:	61fb      	str	r3, [r7, #28]
}
 8006980:	bf00      	nop
 8006982:	bf00      	nop
 8006984:	e7fd      	b.n	8006982 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006986:	f001 feb9 	bl	80086fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800698a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800698c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800698e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006992:	429a      	cmp	r2, r3
 8006994:	d302      	bcc.n	800699c <xQueueGenericSend+0xdc>
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	2b02      	cmp	r3, #2
 800699a:	d129      	bne.n	80069f0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800699c:	683a      	ldr	r2, [r7, #0]
 800699e:	68b9      	ldr	r1, [r7, #8]
 80069a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80069a2:	f000 fc48 	bl	8007236 <prvCopyDataToQueue>
 80069a6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d010      	beq.n	80069d2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b2:	3324      	adds	r3, #36	@ 0x24
 80069b4:	4618      	mov	r0, r3
 80069b6:	f001 f9c5 	bl	8007d44 <xTaskRemoveFromEventList>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d013      	beq.n	80069e8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80069c0:	4b3f      	ldr	r3, [pc, #252]	@ (8006ac0 <xQueueGenericSend+0x200>)
 80069c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069c6:	601a      	str	r2, [r3, #0]
 80069c8:	f3bf 8f4f 	dsb	sy
 80069cc:	f3bf 8f6f 	isb	sy
 80069d0:	e00a      	b.n	80069e8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80069d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d007      	beq.n	80069e8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80069d8:	4b39      	ldr	r3, [pc, #228]	@ (8006ac0 <xQueueGenericSend+0x200>)
 80069da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069de:	601a      	str	r2, [r3, #0]
 80069e0:	f3bf 8f4f 	dsb	sy
 80069e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80069e8:	f001 feb8 	bl	800875c <vPortExitCritical>
				return pdPASS;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e063      	b.n	8006ab8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d103      	bne.n	80069fe <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80069f6:	f001 feb1 	bl	800875c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80069fa:	2300      	movs	r3, #0
 80069fc:	e05c      	b.n	8006ab8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80069fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d106      	bne.n	8006a12 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a04:	f107 0314 	add.w	r3, r7, #20
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f001 f9ff 	bl	8007e0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a12:	f001 fea3 	bl	800875c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a16:	f000 ff7d 	bl	8007914 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a1a:	f001 fe6f 	bl	80086fc <vPortEnterCritical>
 8006a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a24:	b25b      	sxtb	r3, r3
 8006a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a2a:	d103      	bne.n	8006a34 <xQueueGenericSend+0x174>
 8006a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a3a:	b25b      	sxtb	r3, r3
 8006a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a40:	d103      	bne.n	8006a4a <xQueueGenericSend+0x18a>
 8006a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a4a:	f001 fe87 	bl	800875c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a4e:	1d3a      	adds	r2, r7, #4
 8006a50:	f107 0314 	add.w	r3, r7, #20
 8006a54:	4611      	mov	r1, r2
 8006a56:	4618      	mov	r0, r3
 8006a58:	f001 f9ee 	bl	8007e38 <xTaskCheckForTimeOut>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d124      	bne.n	8006aac <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006a62:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a64:	f000 fcdf 	bl	8007426 <prvIsQueueFull>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d018      	beq.n	8006aa0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a70:	3310      	adds	r3, #16
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	4611      	mov	r1, r2
 8006a76:	4618      	mov	r0, r3
 8006a78:	f001 f93e 	bl	8007cf8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006a7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a7e:	f000 fc6a 	bl	8007356 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006a82:	f000 ff55 	bl	8007930 <xTaskResumeAll>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f47f af7c 	bne.w	8006986 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8006ac0 <xQueueGenericSend+0x200>)
 8006a90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a94:	601a      	str	r2, [r3, #0]
 8006a96:	f3bf 8f4f 	dsb	sy
 8006a9a:	f3bf 8f6f 	isb	sy
 8006a9e:	e772      	b.n	8006986 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006aa0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006aa2:	f000 fc58 	bl	8007356 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006aa6:	f000 ff43 	bl	8007930 <xTaskResumeAll>
 8006aaa:	e76c      	b.n	8006986 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006aac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006aae:	f000 fc52 	bl	8007356 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ab2:	f000 ff3d 	bl	8007930 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006ab6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3738      	adds	r7, #56	@ 0x38
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	e000ed04 	.word	0xe000ed04

08006ac4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b090      	sub	sp, #64	@ 0x40
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	607a      	str	r2, [r7, #4]
 8006ad0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d10b      	bne.n	8006af4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ae0:	f383 8811 	msr	BASEPRI, r3
 8006ae4:	f3bf 8f6f 	isb	sy
 8006ae8:	f3bf 8f4f 	dsb	sy
 8006aec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006aee:	bf00      	nop
 8006af0:	bf00      	nop
 8006af2:	e7fd      	b.n	8006af0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d103      	bne.n	8006b02 <xQueueGenericSendFromISR+0x3e>
 8006afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d101      	bne.n	8006b06 <xQueueGenericSendFromISR+0x42>
 8006b02:	2301      	movs	r3, #1
 8006b04:	e000      	b.n	8006b08 <xQueueGenericSendFromISR+0x44>
 8006b06:	2300      	movs	r3, #0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d10b      	bne.n	8006b24 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b10:	f383 8811 	msr	BASEPRI, r3
 8006b14:	f3bf 8f6f 	isb	sy
 8006b18:	f3bf 8f4f 	dsb	sy
 8006b1c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006b1e:	bf00      	nop
 8006b20:	bf00      	nop
 8006b22:	e7fd      	b.n	8006b20 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	d103      	bne.n	8006b32 <xQueueGenericSendFromISR+0x6e>
 8006b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d101      	bne.n	8006b36 <xQueueGenericSendFromISR+0x72>
 8006b32:	2301      	movs	r3, #1
 8006b34:	e000      	b.n	8006b38 <xQueueGenericSendFromISR+0x74>
 8006b36:	2300      	movs	r3, #0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d10b      	bne.n	8006b54 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b40:	f383 8811 	msr	BASEPRI, r3
 8006b44:	f3bf 8f6f 	isb	sy
 8006b48:	f3bf 8f4f 	dsb	sy
 8006b4c:	623b      	str	r3, [r7, #32]
}
 8006b4e:	bf00      	nop
 8006b50:	bf00      	nop
 8006b52:	e7fd      	b.n	8006b50 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b54:	f001 fe94 	bl	8008880 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006b58:	f3ef 8211 	mrs	r2, BASEPRI
 8006b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b60:	f383 8811 	msr	BASEPRI, r3
 8006b64:	f3bf 8f6f 	isb	sy
 8006b68:	f3bf 8f4f 	dsb	sy
 8006b6c:	61fa      	str	r2, [r7, #28]
 8006b6e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006b70:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b72:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d302      	bcc.n	8006b86 <xQueueGenericSendFromISR+0xc2>
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d12f      	bne.n	8006be6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b88:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b8c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b96:	683a      	ldr	r2, [r7, #0]
 8006b98:	68b9      	ldr	r1, [r7, #8]
 8006b9a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006b9c:	f000 fb4b 	bl	8007236 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006ba0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba8:	d112      	bne.n	8006bd0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d016      	beq.n	8006be0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb4:	3324      	adds	r3, #36	@ 0x24
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f001 f8c4 	bl	8007d44 <xTaskRemoveFromEventList>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00e      	beq.n	8006be0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d00b      	beq.n	8006be0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	601a      	str	r2, [r3, #0]
 8006bce:	e007      	b.n	8006be0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006bd0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	b25a      	sxtb	r2, r3
 8006bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006be0:	2301      	movs	r3, #1
 8006be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006be4:	e001      	b.n	8006bea <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006be6:	2300      	movs	r3, #0
 8006be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bec:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006bf4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006bf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3740      	adds	r7, #64	@ 0x40
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b08e      	sub	sp, #56	@ 0x38
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d10b      	bne.n	8006c2c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c18:	f383 8811 	msr	BASEPRI, r3
 8006c1c:	f3bf 8f6f 	isb	sy
 8006c20:	f3bf 8f4f 	dsb	sy
 8006c24:	623b      	str	r3, [r7, #32]
}
 8006c26:	bf00      	nop
 8006c28:	bf00      	nop
 8006c2a:	e7fd      	b.n	8006c28 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00b      	beq.n	8006c4c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8006c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c38:	f383 8811 	msr	BASEPRI, r3
 8006c3c:	f3bf 8f6f 	isb	sy
 8006c40:	f3bf 8f4f 	dsb	sy
 8006c44:	61fb      	str	r3, [r7, #28]
}
 8006c46:	bf00      	nop
 8006c48:	bf00      	nop
 8006c4a:	e7fd      	b.n	8006c48 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d103      	bne.n	8006c5c <xQueueGiveFromISR+0x5c>
 8006c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d101      	bne.n	8006c60 <xQueueGiveFromISR+0x60>
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e000      	b.n	8006c62 <xQueueGiveFromISR+0x62>
 8006c60:	2300      	movs	r3, #0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d10b      	bne.n	8006c7e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8006c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c6a:	f383 8811 	msr	BASEPRI, r3
 8006c6e:	f3bf 8f6f 	isb	sy
 8006c72:	f3bf 8f4f 	dsb	sy
 8006c76:	61bb      	str	r3, [r7, #24]
}
 8006c78:	bf00      	nop
 8006c7a:	bf00      	nop
 8006c7c:	e7fd      	b.n	8006c7a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c7e:	f001 fdff 	bl	8008880 <vPortValidateInterruptPriority>
	__asm volatile
 8006c82:	f3ef 8211 	mrs	r2, BASEPRI
 8006c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c8a:	f383 8811 	msr	BASEPRI, r3
 8006c8e:	f3bf 8f6f 	isb	sy
 8006c92:	f3bf 8f4f 	dsb	sy
 8006c96:	617a      	str	r2, [r7, #20]
 8006c98:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006c9a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ca2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ca8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d22b      	bcs.n	8006d06 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006cb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cba:	1c5a      	adds	r2, r3, #1
 8006cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cbe:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006cc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc8:	d112      	bne.n	8006cf0 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d016      	beq.n	8006d00 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd4:	3324      	adds	r3, #36	@ 0x24
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f001 f834 	bl	8007d44 <xTaskRemoveFromEventList>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00e      	beq.n	8006d00 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d00b      	beq.n	8006d00 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	2201      	movs	r2, #1
 8006cec:	601a      	str	r2, [r3, #0]
 8006cee:	e007      	b.n	8006d00 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006cf0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	b25a      	sxtb	r2, r3
 8006cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006d00:	2301      	movs	r3, #1
 8006d02:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d04:	e001      	b.n	8006d0a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006d06:	2300      	movs	r3, #0
 8006d08:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d0c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f383 8811 	msr	BASEPRI, r3
}
 8006d14:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3738      	adds	r7, #56	@ 0x38
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b08c      	sub	sp, #48	@ 0x30
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d10b      	bne.n	8006d52 <xQueueReceive+0x32>
	__asm volatile
 8006d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d3e:	f383 8811 	msr	BASEPRI, r3
 8006d42:	f3bf 8f6f 	isb	sy
 8006d46:	f3bf 8f4f 	dsb	sy
 8006d4a:	623b      	str	r3, [r7, #32]
}
 8006d4c:	bf00      	nop
 8006d4e:	bf00      	nop
 8006d50:	e7fd      	b.n	8006d4e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d103      	bne.n	8006d60 <xQueueReceive+0x40>
 8006d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d101      	bne.n	8006d64 <xQueueReceive+0x44>
 8006d60:	2301      	movs	r3, #1
 8006d62:	e000      	b.n	8006d66 <xQueueReceive+0x46>
 8006d64:	2300      	movs	r3, #0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d10b      	bne.n	8006d82 <xQueueReceive+0x62>
	__asm volatile
 8006d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d6e:	f383 8811 	msr	BASEPRI, r3
 8006d72:	f3bf 8f6f 	isb	sy
 8006d76:	f3bf 8f4f 	dsb	sy
 8006d7a:	61fb      	str	r3, [r7, #28]
}
 8006d7c:	bf00      	nop
 8006d7e:	bf00      	nop
 8006d80:	e7fd      	b.n	8006d7e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d82:	f001 f9a5 	bl	80080d0 <xTaskGetSchedulerState>
 8006d86:	4603      	mov	r3, r0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d102      	bne.n	8006d92 <xQueueReceive+0x72>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d101      	bne.n	8006d96 <xQueueReceive+0x76>
 8006d92:	2301      	movs	r3, #1
 8006d94:	e000      	b.n	8006d98 <xQueueReceive+0x78>
 8006d96:	2300      	movs	r3, #0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d10b      	bne.n	8006db4 <xQueueReceive+0x94>
	__asm volatile
 8006d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006da0:	f383 8811 	msr	BASEPRI, r3
 8006da4:	f3bf 8f6f 	isb	sy
 8006da8:	f3bf 8f4f 	dsb	sy
 8006dac:	61bb      	str	r3, [r7, #24]
}
 8006dae:	bf00      	nop
 8006db0:	bf00      	nop
 8006db2:	e7fd      	b.n	8006db0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006db4:	f001 fca2 	bl	80086fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dbc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d01f      	beq.n	8006e04 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006dc4:	68b9      	ldr	r1, [r7, #8]
 8006dc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006dc8:	f000 fa9f 	bl	800730a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dce:	1e5a      	subs	r2, r3, #1
 8006dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d00f      	beq.n	8006dfc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dde:	3310      	adds	r3, #16
 8006de0:	4618      	mov	r0, r3
 8006de2:	f000 ffaf 	bl	8007d44 <xTaskRemoveFromEventList>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d007      	beq.n	8006dfc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006dec:	4b3c      	ldr	r3, [pc, #240]	@ (8006ee0 <xQueueReceive+0x1c0>)
 8006dee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006df2:	601a      	str	r2, [r3, #0]
 8006df4:	f3bf 8f4f 	dsb	sy
 8006df8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006dfc:	f001 fcae 	bl	800875c <vPortExitCritical>
				return pdPASS;
 8006e00:	2301      	movs	r3, #1
 8006e02:	e069      	b.n	8006ed8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d103      	bne.n	8006e12 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e0a:	f001 fca7 	bl	800875c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	e062      	b.n	8006ed8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d106      	bne.n	8006e26 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e18:	f107 0310 	add.w	r3, r7, #16
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f000 fff5 	bl	8007e0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e22:	2301      	movs	r3, #1
 8006e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e26:	f001 fc99 	bl	800875c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e2a:	f000 fd73 	bl	8007914 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e2e:	f001 fc65 	bl	80086fc <vPortEnterCritical>
 8006e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e38:	b25b      	sxtb	r3, r3
 8006e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e3e:	d103      	bne.n	8006e48 <xQueueReceive+0x128>
 8006e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e42:	2200      	movs	r2, #0
 8006e44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e4e:	b25b      	sxtb	r3, r3
 8006e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e54:	d103      	bne.n	8006e5e <xQueueReceive+0x13e>
 8006e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e5e:	f001 fc7d 	bl	800875c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e62:	1d3a      	adds	r2, r7, #4
 8006e64:	f107 0310 	add.w	r3, r7, #16
 8006e68:	4611      	mov	r1, r2
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f000 ffe4 	bl	8007e38 <xTaskCheckForTimeOut>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d123      	bne.n	8006ebe <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e78:	f000 fabf 	bl	80073fa <prvIsQueueEmpty>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d017      	beq.n	8006eb2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e84:	3324      	adds	r3, #36	@ 0x24
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	4611      	mov	r1, r2
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 ff34 	bl	8007cf8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e92:	f000 fa60 	bl	8007356 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006e96:	f000 fd4b 	bl	8007930 <xTaskResumeAll>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d189      	bne.n	8006db4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8006ee0 <xQueueReceive+0x1c0>)
 8006ea2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ea6:	601a      	str	r2, [r3, #0]
 8006ea8:	f3bf 8f4f 	dsb	sy
 8006eac:	f3bf 8f6f 	isb	sy
 8006eb0:	e780      	b.n	8006db4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006eb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006eb4:	f000 fa4f 	bl	8007356 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006eb8:	f000 fd3a 	bl	8007930 <xTaskResumeAll>
 8006ebc:	e77a      	b.n	8006db4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006ebe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ec0:	f000 fa49 	bl	8007356 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ec4:	f000 fd34 	bl	8007930 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ec8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006eca:	f000 fa96 	bl	80073fa <prvIsQueueEmpty>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f43f af6f 	beq.w	8006db4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006ed6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3730      	adds	r7, #48	@ 0x30
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	e000ed04 	.word	0xe000ed04

08006ee4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b08e      	sub	sp, #56	@ 0x38
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d10b      	bne.n	8006f18 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f04:	f383 8811 	msr	BASEPRI, r3
 8006f08:	f3bf 8f6f 	isb	sy
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	623b      	str	r3, [r7, #32]
}
 8006f12:	bf00      	nop
 8006f14:	bf00      	nop
 8006f16:	e7fd      	b.n	8006f14 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00b      	beq.n	8006f38 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f24:	f383 8811 	msr	BASEPRI, r3
 8006f28:	f3bf 8f6f 	isb	sy
 8006f2c:	f3bf 8f4f 	dsb	sy
 8006f30:	61fb      	str	r3, [r7, #28]
}
 8006f32:	bf00      	nop
 8006f34:	bf00      	nop
 8006f36:	e7fd      	b.n	8006f34 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f38:	f001 f8ca 	bl	80080d0 <xTaskGetSchedulerState>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d102      	bne.n	8006f48 <xQueueSemaphoreTake+0x64>
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d101      	bne.n	8006f4c <xQueueSemaphoreTake+0x68>
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e000      	b.n	8006f4e <xQueueSemaphoreTake+0x6a>
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d10b      	bne.n	8006f6a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8006f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f56:	f383 8811 	msr	BASEPRI, r3
 8006f5a:	f3bf 8f6f 	isb	sy
 8006f5e:	f3bf 8f4f 	dsb	sy
 8006f62:	61bb      	str	r3, [r7, #24]
}
 8006f64:	bf00      	nop
 8006f66:	bf00      	nop
 8006f68:	e7fd      	b.n	8006f66 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f6a:	f001 fbc7 	bl	80086fc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f72:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d024      	beq.n	8006fc4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f7c:	1e5a      	subs	r2, r3, #1
 8006f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f80:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d104      	bne.n	8006f94 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006f8a:	f001 fa4d 	bl	8008428 <pvTaskIncrementMutexHeldCount>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f92:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f96:	691b      	ldr	r3, [r3, #16]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d00f      	beq.n	8006fbc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f9e:	3310      	adds	r3, #16
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f000 fecf 	bl	8007d44 <xTaskRemoveFromEventList>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d007      	beq.n	8006fbc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006fac:	4b54      	ldr	r3, [pc, #336]	@ (8007100 <xQueueSemaphoreTake+0x21c>)
 8006fae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fb2:	601a      	str	r2, [r3, #0]
 8006fb4:	f3bf 8f4f 	dsb	sy
 8006fb8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006fbc:	f001 fbce 	bl	800875c <vPortExitCritical>
				return pdPASS;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e098      	b.n	80070f6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d112      	bne.n	8006ff0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d00b      	beq.n	8006fe8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fd4:	f383 8811 	msr	BASEPRI, r3
 8006fd8:	f3bf 8f6f 	isb	sy
 8006fdc:	f3bf 8f4f 	dsb	sy
 8006fe0:	617b      	str	r3, [r7, #20]
}
 8006fe2:	bf00      	nop
 8006fe4:	bf00      	nop
 8006fe6:	e7fd      	b.n	8006fe4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006fe8:	f001 fbb8 	bl	800875c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006fec:	2300      	movs	r3, #0
 8006fee:	e082      	b.n	80070f6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d106      	bne.n	8007004 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ff6:	f107 030c 	add.w	r3, r7, #12
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f000 ff06 	bl	8007e0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007000:	2301      	movs	r3, #1
 8007002:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007004:	f001 fbaa 	bl	800875c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007008:	f000 fc84 	bl	8007914 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800700c:	f001 fb76 	bl	80086fc <vPortEnterCritical>
 8007010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007012:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007016:	b25b      	sxtb	r3, r3
 8007018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800701c:	d103      	bne.n	8007026 <xQueueSemaphoreTake+0x142>
 800701e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007020:	2200      	movs	r2, #0
 8007022:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007028:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800702c:	b25b      	sxtb	r3, r3
 800702e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007032:	d103      	bne.n	800703c <xQueueSemaphoreTake+0x158>
 8007034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007036:	2200      	movs	r2, #0
 8007038:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800703c:	f001 fb8e 	bl	800875c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007040:	463a      	mov	r2, r7
 8007042:	f107 030c 	add.w	r3, r7, #12
 8007046:	4611      	mov	r1, r2
 8007048:	4618      	mov	r0, r3
 800704a:	f000 fef5 	bl	8007e38 <xTaskCheckForTimeOut>
 800704e:	4603      	mov	r3, r0
 8007050:	2b00      	cmp	r3, #0
 8007052:	d132      	bne.n	80070ba <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007054:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007056:	f000 f9d0 	bl	80073fa <prvIsQueueEmpty>
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d026      	beq.n	80070ae <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d109      	bne.n	800707c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007068:	f001 fb48 	bl	80086fc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800706c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	4618      	mov	r0, r3
 8007072:	f001 f84b 	bl	800810c <xTaskPriorityInherit>
 8007076:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007078:	f001 fb70 	bl	800875c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800707c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800707e:	3324      	adds	r3, #36	@ 0x24
 8007080:	683a      	ldr	r2, [r7, #0]
 8007082:	4611      	mov	r1, r2
 8007084:	4618      	mov	r0, r3
 8007086:	f000 fe37 	bl	8007cf8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800708a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800708c:	f000 f963 	bl	8007356 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007090:	f000 fc4e 	bl	8007930 <xTaskResumeAll>
 8007094:	4603      	mov	r3, r0
 8007096:	2b00      	cmp	r3, #0
 8007098:	f47f af67 	bne.w	8006f6a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800709c:	4b18      	ldr	r3, [pc, #96]	@ (8007100 <xQueueSemaphoreTake+0x21c>)
 800709e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070a2:	601a      	str	r2, [r3, #0]
 80070a4:	f3bf 8f4f 	dsb	sy
 80070a8:	f3bf 8f6f 	isb	sy
 80070ac:	e75d      	b.n	8006f6a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80070ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80070b0:	f000 f951 	bl	8007356 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80070b4:	f000 fc3c 	bl	8007930 <xTaskResumeAll>
 80070b8:	e757      	b.n	8006f6a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80070ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80070bc:	f000 f94b 	bl	8007356 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80070c0:	f000 fc36 	bl	8007930 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070c4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80070c6:	f000 f998 	bl	80073fa <prvIsQueueEmpty>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f43f af4c 	beq.w	8006f6a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80070d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d00d      	beq.n	80070f4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80070d8:	f001 fb10 	bl	80086fc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80070dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80070de:	f000 f893 	bl	8007208 <prvGetDisinheritPriorityAfterTimeout>
 80070e2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80070e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80070ea:	4618      	mov	r0, r3
 80070ec:	f001 f90c 	bl	8008308 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80070f0:	f001 fb34 	bl	800875c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80070f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3738      	adds	r7, #56	@ 0x38
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	e000ed04 	.word	0xe000ed04

08007104 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b08e      	sub	sp, #56	@ 0x38
 8007108:	af00      	add	r7, sp, #0
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007116:	2b00      	cmp	r3, #0
 8007118:	d10b      	bne.n	8007132 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800711a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800711e:	f383 8811 	msr	BASEPRI, r3
 8007122:	f3bf 8f6f 	isb	sy
 8007126:	f3bf 8f4f 	dsb	sy
 800712a:	623b      	str	r3, [r7, #32]
}
 800712c:	bf00      	nop
 800712e:	bf00      	nop
 8007130:	e7fd      	b.n	800712e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d103      	bne.n	8007140 <xQueueReceiveFromISR+0x3c>
 8007138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800713a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800713c:	2b00      	cmp	r3, #0
 800713e:	d101      	bne.n	8007144 <xQueueReceiveFromISR+0x40>
 8007140:	2301      	movs	r3, #1
 8007142:	e000      	b.n	8007146 <xQueueReceiveFromISR+0x42>
 8007144:	2300      	movs	r3, #0
 8007146:	2b00      	cmp	r3, #0
 8007148:	d10b      	bne.n	8007162 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800714a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800714e:	f383 8811 	msr	BASEPRI, r3
 8007152:	f3bf 8f6f 	isb	sy
 8007156:	f3bf 8f4f 	dsb	sy
 800715a:	61fb      	str	r3, [r7, #28]
}
 800715c:	bf00      	nop
 800715e:	bf00      	nop
 8007160:	e7fd      	b.n	800715e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007162:	f001 fb8d 	bl	8008880 <vPortValidateInterruptPriority>
	__asm volatile
 8007166:	f3ef 8211 	mrs	r2, BASEPRI
 800716a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800716e:	f383 8811 	msr	BASEPRI, r3
 8007172:	f3bf 8f6f 	isb	sy
 8007176:	f3bf 8f4f 	dsb	sy
 800717a:	61ba      	str	r2, [r7, #24]
 800717c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800717e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007180:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007186:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800718a:	2b00      	cmp	r3, #0
 800718c:	d02f      	beq.n	80071ee <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800718e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007190:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007194:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007198:	68b9      	ldr	r1, [r7, #8]
 800719a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800719c:	f000 f8b5 	bl	800730a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80071a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a2:	1e5a      	subs	r2, r3, #1
 80071a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80071a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80071ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b0:	d112      	bne.n	80071d8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d016      	beq.n	80071e8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071bc:	3310      	adds	r3, #16
 80071be:	4618      	mov	r0, r3
 80071c0:	f000 fdc0 	bl	8007d44 <xTaskRemoveFromEventList>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d00e      	beq.n	80071e8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00b      	beq.n	80071e8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	601a      	str	r2, [r3, #0]
 80071d6:	e007      	b.n	80071e8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80071d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80071dc:	3301      	adds	r3, #1
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	b25a      	sxtb	r2, r3
 80071e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80071e8:	2301      	movs	r3, #1
 80071ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80071ec:	e001      	b.n	80071f2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80071ee:	2300      	movs	r3, #0
 80071f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80071f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071f4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	f383 8811 	msr	BASEPRI, r3
}
 80071fc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80071fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007200:	4618      	mov	r0, r3
 8007202:	3738      	adds	r7, #56	@ 0x38
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007208:	b480      	push	{r7}
 800720a:	b085      	sub	sp, #20
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007214:	2b00      	cmp	r3, #0
 8007216:	d006      	beq.n	8007226 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f1c3 0307 	rsb	r3, r3, #7
 8007222:	60fb      	str	r3, [r7, #12]
 8007224:	e001      	b.n	800722a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007226:	2300      	movs	r3, #0
 8007228:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800722a:	68fb      	ldr	r3, [r7, #12]
	}
 800722c:	4618      	mov	r0, r3
 800722e:	3714      	adds	r7, #20
 8007230:	46bd      	mov	sp, r7
 8007232:	bc80      	pop	{r7}
 8007234:	4770      	bx	lr

08007236 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b086      	sub	sp, #24
 800723a:	af00      	add	r7, sp, #0
 800723c:	60f8      	str	r0, [r7, #12]
 800723e:	60b9      	str	r1, [r7, #8]
 8007240:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007242:	2300      	movs	r3, #0
 8007244:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800724a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007250:	2b00      	cmp	r3, #0
 8007252:	d10d      	bne.n	8007270 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d14d      	bne.n	80072f8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	4618      	mov	r0, r3
 8007262:	f000 ffc9 	bl	80081f8 <xTaskPriorityDisinherit>
 8007266:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2200      	movs	r2, #0
 800726c:	609a      	str	r2, [r3, #8]
 800726e:	e043      	b.n	80072f8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d119      	bne.n	80072aa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6858      	ldr	r0, [r3, #4]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800727e:	461a      	mov	r2, r3
 8007280:	68b9      	ldr	r1, [r7, #8]
 8007282:	f002 fc3e 	bl	8009b02 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	685a      	ldr	r2, [r3, #4]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800728e:	441a      	add	r2, r3
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	685a      	ldr	r2, [r3, #4]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	429a      	cmp	r2, r3
 800729e:	d32b      	bcc.n	80072f8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	605a      	str	r2, [r3, #4]
 80072a8:	e026      	b.n	80072f8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	68d8      	ldr	r0, [r3, #12]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072b2:	461a      	mov	r2, r3
 80072b4:	68b9      	ldr	r1, [r7, #8]
 80072b6:	f002 fc24 	bl	8009b02 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	68da      	ldr	r2, [r3, #12]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072c2:	425b      	negs	r3, r3
 80072c4:	441a      	add	r2, r3
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	68da      	ldr	r2, [r3, #12]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d207      	bcs.n	80072e6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	689a      	ldr	r2, [r3, #8]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072de:	425b      	negs	r3, r3
 80072e0:	441a      	add	r2, r3
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	d105      	bne.n	80072f8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d002      	beq.n	80072f8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	3b01      	subs	r3, #1
 80072f6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	1c5a      	adds	r2, r3, #1
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007300:	697b      	ldr	r3, [r7, #20]
}
 8007302:	4618      	mov	r0, r3
 8007304:	3718      	adds	r7, #24
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}

0800730a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800730a:	b580      	push	{r7, lr}
 800730c:	b082      	sub	sp, #8
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
 8007312:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007318:	2b00      	cmp	r3, #0
 800731a:	d018      	beq.n	800734e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	68da      	ldr	r2, [r3, #12]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007324:	441a      	add	r2, r3
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	68da      	ldr	r2, [r3, #12]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	429a      	cmp	r2, r3
 8007334:	d303      	bcc.n	800733e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	68d9      	ldr	r1, [r3, #12]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007346:	461a      	mov	r2, r3
 8007348:	6838      	ldr	r0, [r7, #0]
 800734a:	f002 fbda 	bl	8009b02 <memcpy>
	}
}
 800734e:	bf00      	nop
 8007350:	3708      	adds	r7, #8
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007356:	b580      	push	{r7, lr}
 8007358:	b084      	sub	sp, #16
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800735e:	f001 f9cd 	bl	80086fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007368:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800736a:	e011      	b.n	8007390 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007370:	2b00      	cmp	r3, #0
 8007372:	d012      	beq.n	800739a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	3324      	adds	r3, #36	@ 0x24
 8007378:	4618      	mov	r0, r3
 800737a:	f000 fce3 	bl	8007d44 <xTaskRemoveFromEventList>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d001      	beq.n	8007388 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007384:	f000 fdbc 	bl	8007f00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007388:	7bfb      	ldrb	r3, [r7, #15]
 800738a:	3b01      	subs	r3, #1
 800738c:	b2db      	uxtb	r3, r3
 800738e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007390:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007394:	2b00      	cmp	r3, #0
 8007396:	dce9      	bgt.n	800736c <prvUnlockQueue+0x16>
 8007398:	e000      	b.n	800739c <prvUnlockQueue+0x46>
					break;
 800739a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	22ff      	movs	r2, #255	@ 0xff
 80073a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80073a4:	f001 f9da 	bl	800875c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80073a8:	f001 f9a8 	bl	80086fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80073b2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80073b4:	e011      	b.n	80073da <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d012      	beq.n	80073e4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	3310      	adds	r3, #16
 80073c2:	4618      	mov	r0, r3
 80073c4:	f000 fcbe 	bl	8007d44 <xTaskRemoveFromEventList>
 80073c8:	4603      	mov	r3, r0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d001      	beq.n	80073d2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80073ce:	f000 fd97 	bl	8007f00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80073d2:	7bbb      	ldrb	r3, [r7, #14]
 80073d4:	3b01      	subs	r3, #1
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80073da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	dce9      	bgt.n	80073b6 <prvUnlockQueue+0x60>
 80073e2:	e000      	b.n	80073e6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80073e4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	22ff      	movs	r2, #255	@ 0xff
 80073ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80073ee:	f001 f9b5 	bl	800875c <vPortExitCritical>
}
 80073f2:	bf00      	nop
 80073f4:	3710      	adds	r7, #16
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}

080073fa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b084      	sub	sp, #16
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007402:	f001 f97b 	bl	80086fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800740a:	2b00      	cmp	r3, #0
 800740c:	d102      	bne.n	8007414 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800740e:	2301      	movs	r3, #1
 8007410:	60fb      	str	r3, [r7, #12]
 8007412:	e001      	b.n	8007418 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007414:	2300      	movs	r3, #0
 8007416:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007418:	f001 f9a0 	bl	800875c <vPortExitCritical>

	return xReturn;
 800741c:	68fb      	ldr	r3, [r7, #12]
}
 800741e:	4618      	mov	r0, r3
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}

08007426 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007426:	b580      	push	{r7, lr}
 8007428:	b084      	sub	sp, #16
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800742e:	f001 f965 	bl	80086fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800743a:	429a      	cmp	r2, r3
 800743c:	d102      	bne.n	8007444 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800743e:	2301      	movs	r3, #1
 8007440:	60fb      	str	r3, [r7, #12]
 8007442:	e001      	b.n	8007448 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007444:	2300      	movs	r3, #0
 8007446:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007448:	f001 f988 	bl	800875c <vPortExitCritical>

	return xReturn;
 800744c:	68fb      	ldr	r3, [r7, #12]
}
 800744e:	4618      	mov	r0, r3
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007456:	b580      	push	{r7, lr}
 8007458:	b08e      	sub	sp, #56	@ 0x38
 800745a:	af04      	add	r7, sp, #16
 800745c:	60f8      	str	r0, [r7, #12]
 800745e:	60b9      	str	r1, [r7, #8]
 8007460:	607a      	str	r2, [r7, #4]
 8007462:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007466:	2b00      	cmp	r3, #0
 8007468:	d10b      	bne.n	8007482 <xTaskCreateStatic+0x2c>
	__asm volatile
 800746a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800746e:	f383 8811 	msr	BASEPRI, r3
 8007472:	f3bf 8f6f 	isb	sy
 8007476:	f3bf 8f4f 	dsb	sy
 800747a:	623b      	str	r3, [r7, #32]
}
 800747c:	bf00      	nop
 800747e:	bf00      	nop
 8007480:	e7fd      	b.n	800747e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007484:	2b00      	cmp	r3, #0
 8007486:	d10b      	bne.n	80074a0 <xTaskCreateStatic+0x4a>
	__asm volatile
 8007488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800748c:	f383 8811 	msr	BASEPRI, r3
 8007490:	f3bf 8f6f 	isb	sy
 8007494:	f3bf 8f4f 	dsb	sy
 8007498:	61fb      	str	r3, [r7, #28]
}
 800749a:	bf00      	nop
 800749c:	bf00      	nop
 800749e:	e7fd      	b.n	800749c <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80074a0:	23ac      	movs	r3, #172	@ 0xac
 80074a2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	2bac      	cmp	r3, #172	@ 0xac
 80074a8:	d00b      	beq.n	80074c2 <xTaskCreateStatic+0x6c>
	__asm volatile
 80074aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ae:	f383 8811 	msr	BASEPRI, r3
 80074b2:	f3bf 8f6f 	isb	sy
 80074b6:	f3bf 8f4f 	dsb	sy
 80074ba:	61bb      	str	r3, [r7, #24]
}
 80074bc:	bf00      	nop
 80074be:	bf00      	nop
 80074c0:	e7fd      	b.n	80074be <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80074c2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80074c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d01e      	beq.n	8007508 <xTaskCreateStatic+0xb2>
 80074ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d01b      	beq.n	8007508 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80074d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074d2:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80074d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80074d8:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80074da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074dc:	2202      	movs	r2, #2
 80074de:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80074e2:	2300      	movs	r3, #0
 80074e4:	9303      	str	r3, [sp, #12]
 80074e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e8:	9302      	str	r3, [sp, #8]
 80074ea:	f107 0314 	add.w	r3, r7, #20
 80074ee:	9301      	str	r3, [sp, #4]
 80074f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f2:	9300      	str	r3, [sp, #0]
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	68b9      	ldr	r1, [r7, #8]
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	f000 f850 	bl	80075a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007500:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007502:	f000 f8f7 	bl	80076f4 <prvAddNewTaskToReadyList>
 8007506:	e001      	b.n	800750c <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007508:	2300      	movs	r3, #0
 800750a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800750c:	697b      	ldr	r3, [r7, #20]
	}
 800750e:	4618      	mov	r0, r3
 8007510:	3728      	adds	r7, #40	@ 0x28
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007516:	b580      	push	{r7, lr}
 8007518:	b08c      	sub	sp, #48	@ 0x30
 800751a:	af04      	add	r7, sp, #16
 800751c:	60f8      	str	r0, [r7, #12]
 800751e:	60b9      	str	r1, [r7, #8]
 8007520:	603b      	str	r3, [r7, #0]
 8007522:	4613      	mov	r3, r2
 8007524:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007526:	88fb      	ldrh	r3, [r7, #6]
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	4618      	mov	r0, r3
 800752c:	f001 f9e8 	bl	8008900 <pvPortMalloc>
 8007530:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d00e      	beq.n	8007556 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007538:	20ac      	movs	r0, #172	@ 0xac
 800753a:	f001 f9e1 	bl	8008900 <pvPortMalloc>
 800753e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d003      	beq.n	800754e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	697a      	ldr	r2, [r7, #20]
 800754a:	631a      	str	r2, [r3, #48]	@ 0x30
 800754c:	e005      	b.n	800755a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800754e:	6978      	ldr	r0, [r7, #20]
 8007550:	f001 faa4 	bl	8008a9c <vPortFree>
 8007554:	e001      	b.n	800755a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007556:	2300      	movs	r3, #0
 8007558:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d017      	beq.n	8007590 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	2200      	movs	r2, #0
 8007564:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007568:	88fa      	ldrh	r2, [r7, #6]
 800756a:	2300      	movs	r3, #0
 800756c:	9303      	str	r3, [sp, #12]
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	9302      	str	r3, [sp, #8]
 8007572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007574:	9301      	str	r3, [sp, #4]
 8007576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007578:	9300      	str	r3, [sp, #0]
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	68b9      	ldr	r1, [r7, #8]
 800757e:	68f8      	ldr	r0, [r7, #12]
 8007580:	f000 f80e 	bl	80075a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007584:	69f8      	ldr	r0, [r7, #28]
 8007586:	f000 f8b5 	bl	80076f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800758a:	2301      	movs	r3, #1
 800758c:	61bb      	str	r3, [r7, #24]
 800758e:	e002      	b.n	8007596 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007590:	f04f 33ff 	mov.w	r3, #4294967295
 8007594:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007596:	69bb      	ldr	r3, [r7, #24]
	}
 8007598:	4618      	mov	r0, r3
 800759a:	3720      	adds	r7, #32
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b088      	sub	sp, #32
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	607a      	str	r2, [r7, #4]
 80075ac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80075ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	461a      	mov	r2, r3
 80075b8:	21a5      	movs	r1, #165	@ 0xa5
 80075ba:	f002 f9ac 	bl	8009916 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80075be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80075c8:	3b01      	subs	r3, #1
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	4413      	add	r3, r2
 80075ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	f023 0307 	bic.w	r3, r3, #7
 80075d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80075d8:	69bb      	ldr	r3, [r7, #24]
 80075da:	f003 0307 	and.w	r3, r3, #7
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d00b      	beq.n	80075fa <prvInitialiseNewTask+0x5a>
	__asm volatile
 80075e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075e6:	f383 8811 	msr	BASEPRI, r3
 80075ea:	f3bf 8f6f 	isb	sy
 80075ee:	f3bf 8f4f 	dsb	sy
 80075f2:	617b      	str	r3, [r7, #20]
}
 80075f4:	bf00      	nop
 80075f6:	bf00      	nop
 80075f8:	e7fd      	b.n	80075f6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d01f      	beq.n	8007640 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007600:	2300      	movs	r3, #0
 8007602:	61fb      	str	r3, [r7, #28]
 8007604:	e012      	b.n	800762c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007606:	68ba      	ldr	r2, [r7, #8]
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	4413      	add	r3, r2
 800760c:	7819      	ldrb	r1, [r3, #0]
 800760e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	4413      	add	r3, r2
 8007614:	3334      	adds	r3, #52	@ 0x34
 8007616:	460a      	mov	r2, r1
 8007618:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800761a:	68ba      	ldr	r2, [r7, #8]
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	4413      	add	r3, r2
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d006      	beq.n	8007634 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	3301      	adds	r3, #1
 800762a:	61fb      	str	r3, [r7, #28]
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	2b0f      	cmp	r3, #15
 8007630:	d9e9      	bls.n	8007606 <prvInitialiseNewTask+0x66>
 8007632:	e000      	b.n	8007636 <prvInitialiseNewTask+0x96>
			{
				break;
 8007634:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007638:	2200      	movs	r2, #0
 800763a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800763e:	e003      	b.n	8007648 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007642:	2200      	movs	r2, #0
 8007644:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800764a:	2b06      	cmp	r3, #6
 800764c:	d901      	bls.n	8007652 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800764e:	2306      	movs	r3, #6
 8007650:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007654:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007656:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800765a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800765c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800765e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007660:	2200      	movs	r2, #0
 8007662:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007666:	3304      	adds	r3, #4
 8007668:	4618      	mov	r0, r3
 800766a:	f7fe ff06 	bl	800647a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800766e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007670:	3318      	adds	r3, #24
 8007672:	4618      	mov	r0, r3
 8007674:	f7fe ff01 	bl	800647a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800767a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800767c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800767e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007680:	f1c3 0207 	rsb	r2, r3, #7
 8007684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007686:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800768a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800768c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800768e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007690:	2200      	movs	r2, #0
 8007692:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007696:	2200      	movs	r2, #0
 8007698:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800769c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80076a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a6:	3358      	adds	r3, #88	@ 0x58
 80076a8:	224c      	movs	r2, #76	@ 0x4c
 80076aa:	2100      	movs	r1, #0
 80076ac:	4618      	mov	r0, r3
 80076ae:	f002 f932 	bl	8009916 <memset>
 80076b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b4:	4a0c      	ldr	r2, [pc, #48]	@ (80076e8 <prvInitialiseNewTask+0x148>)
 80076b6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80076b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ba:	4a0c      	ldr	r2, [pc, #48]	@ (80076ec <prvInitialiseNewTask+0x14c>)
 80076bc:	661a      	str	r2, [r3, #96]	@ 0x60
 80076be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c0:	4a0b      	ldr	r2, [pc, #44]	@ (80076f0 <prvInitialiseNewTask+0x150>)
 80076c2:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80076c4:	683a      	ldr	r2, [r7, #0]
 80076c6:	68f9      	ldr	r1, [r7, #12]
 80076c8:	69b8      	ldr	r0, [r7, #24]
 80076ca:	f000 ff27 	bl	800851c <pxPortInitialiseStack>
 80076ce:	4602      	mov	r2, r0
 80076d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80076d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d002      	beq.n	80076e0 <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80076da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076e0:	bf00      	nop
 80076e2:	3720      	adds	r7, #32
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	200047b8 	.word	0x200047b8
 80076ec:	20004820 	.word	0x20004820
 80076f0:	20004888 	.word	0x20004888

080076f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80076fc:	f000 fffe 	bl	80086fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007700:	4b2c      	ldr	r3, [pc, #176]	@ (80077b4 <prvAddNewTaskToReadyList+0xc0>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	3301      	adds	r3, #1
 8007706:	4a2b      	ldr	r2, [pc, #172]	@ (80077b4 <prvAddNewTaskToReadyList+0xc0>)
 8007708:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800770a:	4b2b      	ldr	r3, [pc, #172]	@ (80077b8 <prvAddNewTaskToReadyList+0xc4>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d109      	bne.n	8007726 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007712:	4a29      	ldr	r2, [pc, #164]	@ (80077b8 <prvAddNewTaskToReadyList+0xc4>)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007718:	4b26      	ldr	r3, [pc, #152]	@ (80077b4 <prvAddNewTaskToReadyList+0xc0>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2b01      	cmp	r3, #1
 800771e:	d110      	bne.n	8007742 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007720:	f000 fc12 	bl	8007f48 <prvInitialiseTaskLists>
 8007724:	e00d      	b.n	8007742 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007726:	4b25      	ldr	r3, [pc, #148]	@ (80077bc <prvAddNewTaskToReadyList+0xc8>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d109      	bne.n	8007742 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800772e:	4b22      	ldr	r3, [pc, #136]	@ (80077b8 <prvAddNewTaskToReadyList+0xc4>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007738:	429a      	cmp	r2, r3
 800773a:	d802      	bhi.n	8007742 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800773c:	4a1e      	ldr	r2, [pc, #120]	@ (80077b8 <prvAddNewTaskToReadyList+0xc4>)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007742:	4b1f      	ldr	r3, [pc, #124]	@ (80077c0 <prvAddNewTaskToReadyList+0xcc>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	3301      	adds	r3, #1
 8007748:	4a1d      	ldr	r2, [pc, #116]	@ (80077c0 <prvAddNewTaskToReadyList+0xcc>)
 800774a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800774c:	4b1c      	ldr	r3, [pc, #112]	@ (80077c0 <prvAddNewTaskToReadyList+0xcc>)
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007758:	2201      	movs	r2, #1
 800775a:	409a      	lsls	r2, r3
 800775c:	4b19      	ldr	r3, [pc, #100]	@ (80077c4 <prvAddNewTaskToReadyList+0xd0>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4313      	orrs	r3, r2
 8007762:	4a18      	ldr	r2, [pc, #96]	@ (80077c4 <prvAddNewTaskToReadyList+0xd0>)
 8007764:	6013      	str	r3, [r2, #0]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800776a:	4613      	mov	r3, r2
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	4413      	add	r3, r2
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	4a15      	ldr	r2, [pc, #84]	@ (80077c8 <prvAddNewTaskToReadyList+0xd4>)
 8007774:	441a      	add	r2, r3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	3304      	adds	r3, #4
 800777a:	4619      	mov	r1, r3
 800777c:	4610      	mov	r0, r2
 800777e:	f7fe fe88 	bl	8006492 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007782:	f000 ffeb 	bl	800875c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007786:	4b0d      	ldr	r3, [pc, #52]	@ (80077bc <prvAddNewTaskToReadyList+0xc8>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00e      	beq.n	80077ac <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800778e:	4b0a      	ldr	r3, [pc, #40]	@ (80077b8 <prvAddNewTaskToReadyList+0xc4>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007798:	429a      	cmp	r2, r3
 800779a:	d207      	bcs.n	80077ac <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800779c:	4b0b      	ldr	r3, [pc, #44]	@ (80077cc <prvAddNewTaskToReadyList+0xd8>)
 800779e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077a2:	601a      	str	r2, [r3, #0]
 80077a4:	f3bf 8f4f 	dsb	sy
 80077a8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077ac:	bf00      	nop
 80077ae:	3708      	adds	r7, #8
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	2000075c 	.word	0x2000075c
 80077b8:	2000065c 	.word	0x2000065c
 80077bc:	20000768 	.word	0x20000768
 80077c0:	20000778 	.word	0x20000778
 80077c4:	20000764 	.word	0x20000764
 80077c8:	20000660 	.word	0x20000660
 80077cc:	e000ed04 	.word	0xe000ed04

080077d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80077d8:	2300      	movs	r3, #0
 80077da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d018      	beq.n	8007814 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80077e2:	4b14      	ldr	r3, [pc, #80]	@ (8007834 <vTaskDelay+0x64>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00b      	beq.n	8007802 <vTaskDelay+0x32>
	__asm volatile
 80077ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ee:	f383 8811 	msr	BASEPRI, r3
 80077f2:	f3bf 8f6f 	isb	sy
 80077f6:	f3bf 8f4f 	dsb	sy
 80077fa:	60bb      	str	r3, [r7, #8]
}
 80077fc:	bf00      	nop
 80077fe:	bf00      	nop
 8007800:	e7fd      	b.n	80077fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007802:	f000 f887 	bl	8007914 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007806:	2100      	movs	r1, #0
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 fe21 	bl	8008450 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800780e:	f000 f88f 	bl	8007930 <xTaskResumeAll>
 8007812:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d107      	bne.n	800782a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800781a:	4b07      	ldr	r3, [pc, #28]	@ (8007838 <vTaskDelay+0x68>)
 800781c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007820:	601a      	str	r2, [r3, #0]
 8007822:	f3bf 8f4f 	dsb	sy
 8007826:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800782a:	bf00      	nop
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	20000784 	.word	0x20000784
 8007838:	e000ed04 	.word	0xe000ed04

0800783c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b08a      	sub	sp, #40	@ 0x28
 8007840:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007842:	2300      	movs	r3, #0
 8007844:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007846:	2300      	movs	r3, #0
 8007848:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800784a:	463a      	mov	r2, r7
 800784c:	1d39      	adds	r1, r7, #4
 800784e:	f107 0308 	add.w	r3, r7, #8
 8007852:	4618      	mov	r0, r3
 8007854:	f7f9 fd22 	bl	800129c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007858:	6839      	ldr	r1, [r7, #0]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	68ba      	ldr	r2, [r7, #8]
 800785e:	9202      	str	r2, [sp, #8]
 8007860:	9301      	str	r3, [sp, #4]
 8007862:	2300      	movs	r3, #0
 8007864:	9300      	str	r3, [sp, #0]
 8007866:	2300      	movs	r3, #0
 8007868:	460a      	mov	r2, r1
 800786a:	4922      	ldr	r1, [pc, #136]	@ (80078f4 <vTaskStartScheduler+0xb8>)
 800786c:	4822      	ldr	r0, [pc, #136]	@ (80078f8 <vTaskStartScheduler+0xbc>)
 800786e:	f7ff fdf2 	bl	8007456 <xTaskCreateStatic>
 8007872:	4603      	mov	r3, r0
 8007874:	4a21      	ldr	r2, [pc, #132]	@ (80078fc <vTaskStartScheduler+0xc0>)
 8007876:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007878:	4b20      	ldr	r3, [pc, #128]	@ (80078fc <vTaskStartScheduler+0xc0>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d002      	beq.n	8007886 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007880:	2301      	movs	r3, #1
 8007882:	617b      	str	r3, [r7, #20]
 8007884:	e001      	b.n	800788a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007886:	2300      	movs	r3, #0
 8007888:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	2b01      	cmp	r3, #1
 800788e:	d11d      	bne.n	80078cc <vTaskStartScheduler+0x90>
	__asm volatile
 8007890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007894:	f383 8811 	msr	BASEPRI, r3
 8007898:	f3bf 8f6f 	isb	sy
 800789c:	f3bf 8f4f 	dsb	sy
 80078a0:	613b      	str	r3, [r7, #16]
}
 80078a2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80078a4:	4b16      	ldr	r3, [pc, #88]	@ (8007900 <vTaskStartScheduler+0xc4>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	3358      	adds	r3, #88	@ 0x58
 80078aa:	4a16      	ldr	r2, [pc, #88]	@ (8007904 <vTaskStartScheduler+0xc8>)
 80078ac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80078ae:	4b16      	ldr	r3, [pc, #88]	@ (8007908 <vTaskStartScheduler+0xcc>)
 80078b0:	f04f 32ff 	mov.w	r2, #4294967295
 80078b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80078b6:	4b15      	ldr	r3, [pc, #84]	@ (800790c <vTaskStartScheduler+0xd0>)
 80078b8:	2201      	movs	r2, #1
 80078ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80078bc:	4b14      	ldr	r3, [pc, #80]	@ (8007910 <vTaskStartScheduler+0xd4>)
 80078be:	2200      	movs	r2, #0
 80078c0:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80078c2:	f7f9 fcdd 	bl	8001280 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80078c6:	f000 fea7 	bl	8008618 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80078ca:	e00f      	b.n	80078ec <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078d2:	d10b      	bne.n	80078ec <vTaskStartScheduler+0xb0>
	__asm volatile
 80078d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078d8:	f383 8811 	msr	BASEPRI, r3
 80078dc:	f3bf 8f6f 	isb	sy
 80078e0:	f3bf 8f4f 	dsb	sy
 80078e4:	60fb      	str	r3, [r7, #12]
}
 80078e6:	bf00      	nop
 80078e8:	bf00      	nop
 80078ea:	e7fd      	b.n	80078e8 <vTaskStartScheduler+0xac>
}
 80078ec:	bf00      	nop
 80078ee:	3718      	adds	r7, #24
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	0800bd00 	.word	0x0800bd00
 80078f8:	08007f19 	.word	0x08007f19
 80078fc:	20000780 	.word	0x20000780
 8007900:	2000065c 	.word	0x2000065c
 8007904:	20000098 	.word	0x20000098
 8007908:	2000077c 	.word	0x2000077c
 800790c:	20000768 	.word	0x20000768
 8007910:	20000760 	.word	0x20000760

08007914 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007914:	b480      	push	{r7}
 8007916:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007918:	4b04      	ldr	r3, [pc, #16]	@ (800792c <vTaskSuspendAll+0x18>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	3301      	adds	r3, #1
 800791e:	4a03      	ldr	r2, [pc, #12]	@ (800792c <vTaskSuspendAll+0x18>)
 8007920:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007922:	bf00      	nop
 8007924:	46bd      	mov	sp, r7
 8007926:	bc80      	pop	{r7}
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop
 800792c:	20000784 	.word	0x20000784

08007930 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007936:	2300      	movs	r3, #0
 8007938:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800793a:	2300      	movs	r3, #0
 800793c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800793e:	4b42      	ldr	r3, [pc, #264]	@ (8007a48 <xTaskResumeAll+0x118>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d10b      	bne.n	800795e <xTaskResumeAll+0x2e>
	__asm volatile
 8007946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800794a:	f383 8811 	msr	BASEPRI, r3
 800794e:	f3bf 8f6f 	isb	sy
 8007952:	f3bf 8f4f 	dsb	sy
 8007956:	603b      	str	r3, [r7, #0]
}
 8007958:	bf00      	nop
 800795a:	bf00      	nop
 800795c:	e7fd      	b.n	800795a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800795e:	f000 fecd 	bl	80086fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007962:	4b39      	ldr	r3, [pc, #228]	@ (8007a48 <xTaskResumeAll+0x118>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	3b01      	subs	r3, #1
 8007968:	4a37      	ldr	r2, [pc, #220]	@ (8007a48 <xTaskResumeAll+0x118>)
 800796a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800796c:	4b36      	ldr	r3, [pc, #216]	@ (8007a48 <xTaskResumeAll+0x118>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d161      	bne.n	8007a38 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007974:	4b35      	ldr	r3, [pc, #212]	@ (8007a4c <xTaskResumeAll+0x11c>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d05d      	beq.n	8007a38 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800797c:	e02e      	b.n	80079dc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800797e:	4b34      	ldr	r3, [pc, #208]	@ (8007a50 <xTaskResumeAll+0x120>)
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	3318      	adds	r3, #24
 800798a:	4618      	mov	r0, r3
 800798c:	f7fe fddc 	bl	8006548 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	3304      	adds	r3, #4
 8007994:	4618      	mov	r0, r3
 8007996:	f7fe fdd7 	bl	8006548 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800799e:	2201      	movs	r2, #1
 80079a0:	409a      	lsls	r2, r3
 80079a2:	4b2c      	ldr	r3, [pc, #176]	@ (8007a54 <xTaskResumeAll+0x124>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	4a2a      	ldr	r2, [pc, #168]	@ (8007a54 <xTaskResumeAll+0x124>)
 80079aa:	6013      	str	r3, [r2, #0]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079b0:	4613      	mov	r3, r2
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	4413      	add	r3, r2
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	4a27      	ldr	r2, [pc, #156]	@ (8007a58 <xTaskResumeAll+0x128>)
 80079ba:	441a      	add	r2, r3
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	3304      	adds	r3, #4
 80079c0:	4619      	mov	r1, r3
 80079c2:	4610      	mov	r0, r2
 80079c4:	f7fe fd65 	bl	8006492 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079cc:	4b23      	ldr	r3, [pc, #140]	@ (8007a5c <xTaskResumeAll+0x12c>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d302      	bcc.n	80079dc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80079d6:	4b22      	ldr	r3, [pc, #136]	@ (8007a60 <xTaskResumeAll+0x130>)
 80079d8:	2201      	movs	r2, #1
 80079da:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079dc:	4b1c      	ldr	r3, [pc, #112]	@ (8007a50 <xTaskResumeAll+0x120>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d1cc      	bne.n	800797e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d001      	beq.n	80079ee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80079ea:	f000 fb51 	bl	8008090 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80079ee:	4b1d      	ldr	r3, [pc, #116]	@ (8007a64 <xTaskResumeAll+0x134>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d010      	beq.n	8007a1c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80079fa:	f000 f845 	bl	8007a88 <xTaskIncrementTick>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d002      	beq.n	8007a0a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007a04:	4b16      	ldr	r3, [pc, #88]	@ (8007a60 <xTaskResumeAll+0x130>)
 8007a06:	2201      	movs	r2, #1
 8007a08:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	3b01      	subs	r3, #1
 8007a0e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d1f1      	bne.n	80079fa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007a16:	4b13      	ldr	r3, [pc, #76]	@ (8007a64 <xTaskResumeAll+0x134>)
 8007a18:	2200      	movs	r2, #0
 8007a1a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007a1c:	4b10      	ldr	r3, [pc, #64]	@ (8007a60 <xTaskResumeAll+0x130>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d009      	beq.n	8007a38 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007a24:	2301      	movs	r3, #1
 8007a26:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007a28:	4b0f      	ldr	r3, [pc, #60]	@ (8007a68 <xTaskResumeAll+0x138>)
 8007a2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a2e:	601a      	str	r2, [r3, #0]
 8007a30:	f3bf 8f4f 	dsb	sy
 8007a34:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a38:	f000 fe90 	bl	800875c <vPortExitCritical>

	return xAlreadyYielded;
 8007a3c:	68bb      	ldr	r3, [r7, #8]
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3710      	adds	r7, #16
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	20000784 	.word	0x20000784
 8007a4c:	2000075c 	.word	0x2000075c
 8007a50:	2000071c 	.word	0x2000071c
 8007a54:	20000764 	.word	0x20000764
 8007a58:	20000660 	.word	0x20000660
 8007a5c:	2000065c 	.word	0x2000065c
 8007a60:	20000770 	.word	0x20000770
 8007a64:	2000076c 	.word	0x2000076c
 8007a68:	e000ed04 	.word	0xe000ed04

08007a6c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007a72:	4b04      	ldr	r3, [pc, #16]	@ (8007a84 <xTaskGetTickCount+0x18>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007a78:	687b      	ldr	r3, [r7, #4]
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	370c      	adds	r7, #12
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bc80      	pop	{r7}
 8007a82:	4770      	bx	lr
 8007a84:	20000760 	.word	0x20000760

08007a88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b086      	sub	sp, #24
 8007a8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a92:	4b4f      	ldr	r3, [pc, #316]	@ (8007bd0 <xTaskIncrementTick+0x148>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	f040 808f 	bne.w	8007bba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a9c:	4b4d      	ldr	r3, [pc, #308]	@ (8007bd4 <xTaskIncrementTick+0x14c>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007aa4:	4a4b      	ldr	r2, [pc, #300]	@ (8007bd4 <xTaskIncrementTick+0x14c>)
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d121      	bne.n	8007af4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007ab0:	4b49      	ldr	r3, [pc, #292]	@ (8007bd8 <xTaskIncrementTick+0x150>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00b      	beq.n	8007ad2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8007aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007abe:	f383 8811 	msr	BASEPRI, r3
 8007ac2:	f3bf 8f6f 	isb	sy
 8007ac6:	f3bf 8f4f 	dsb	sy
 8007aca:	603b      	str	r3, [r7, #0]
}
 8007acc:	bf00      	nop
 8007ace:	bf00      	nop
 8007ad0:	e7fd      	b.n	8007ace <xTaskIncrementTick+0x46>
 8007ad2:	4b41      	ldr	r3, [pc, #260]	@ (8007bd8 <xTaskIncrementTick+0x150>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	60fb      	str	r3, [r7, #12]
 8007ad8:	4b40      	ldr	r3, [pc, #256]	@ (8007bdc <xTaskIncrementTick+0x154>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a3e      	ldr	r2, [pc, #248]	@ (8007bd8 <xTaskIncrementTick+0x150>)
 8007ade:	6013      	str	r3, [r2, #0]
 8007ae0:	4a3e      	ldr	r2, [pc, #248]	@ (8007bdc <xTaskIncrementTick+0x154>)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6013      	str	r3, [r2, #0]
 8007ae6:	4b3e      	ldr	r3, [pc, #248]	@ (8007be0 <xTaskIncrementTick+0x158>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	3301      	adds	r3, #1
 8007aec:	4a3c      	ldr	r2, [pc, #240]	@ (8007be0 <xTaskIncrementTick+0x158>)
 8007aee:	6013      	str	r3, [r2, #0]
 8007af0:	f000 face 	bl	8008090 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007af4:	4b3b      	ldr	r3, [pc, #236]	@ (8007be4 <xTaskIncrementTick+0x15c>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	693a      	ldr	r2, [r7, #16]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d348      	bcc.n	8007b90 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007afe:	4b36      	ldr	r3, [pc, #216]	@ (8007bd8 <xTaskIncrementTick+0x150>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d104      	bne.n	8007b12 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b08:	4b36      	ldr	r3, [pc, #216]	@ (8007be4 <xTaskIncrementTick+0x15c>)
 8007b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8007b0e:	601a      	str	r2, [r3, #0]
					break;
 8007b10:	e03e      	b.n	8007b90 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b12:	4b31      	ldr	r3, [pc, #196]	@ (8007bd8 <xTaskIncrementTick+0x150>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007b22:	693a      	ldr	r2, [r7, #16]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d203      	bcs.n	8007b32 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007b2a:	4a2e      	ldr	r2, [pc, #184]	@ (8007be4 <xTaskIncrementTick+0x15c>)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007b30:	e02e      	b.n	8007b90 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	3304      	adds	r3, #4
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7fe fd06 	bl	8006548 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d004      	beq.n	8007b4e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	3318      	adds	r3, #24
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7fe fcfd 	bl	8006548 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b52:	2201      	movs	r2, #1
 8007b54:	409a      	lsls	r2, r3
 8007b56:	4b24      	ldr	r3, [pc, #144]	@ (8007be8 <xTaskIncrementTick+0x160>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	4a22      	ldr	r2, [pc, #136]	@ (8007be8 <xTaskIncrementTick+0x160>)
 8007b5e:	6013      	str	r3, [r2, #0]
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b64:	4613      	mov	r3, r2
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	4413      	add	r3, r2
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	4a1f      	ldr	r2, [pc, #124]	@ (8007bec <xTaskIncrementTick+0x164>)
 8007b6e:	441a      	add	r2, r3
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	3304      	adds	r3, #4
 8007b74:	4619      	mov	r1, r3
 8007b76:	4610      	mov	r0, r2
 8007b78:	f7fe fc8b 	bl	8006492 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b80:	4b1b      	ldr	r3, [pc, #108]	@ (8007bf0 <xTaskIncrementTick+0x168>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d3b9      	bcc.n	8007afe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b8e:	e7b6      	b.n	8007afe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b90:	4b17      	ldr	r3, [pc, #92]	@ (8007bf0 <xTaskIncrementTick+0x168>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b96:	4915      	ldr	r1, [pc, #84]	@ (8007bec <xTaskIncrementTick+0x164>)
 8007b98:	4613      	mov	r3, r2
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	4413      	add	r3, r2
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	440b      	add	r3, r1
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d901      	bls.n	8007bac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007bac:	4b11      	ldr	r3, [pc, #68]	@ (8007bf4 <xTaskIncrementTick+0x16c>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d007      	beq.n	8007bc4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	617b      	str	r3, [r7, #20]
 8007bb8:	e004      	b.n	8007bc4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007bba:	4b0f      	ldr	r3, [pc, #60]	@ (8007bf8 <xTaskIncrementTick+0x170>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	4a0d      	ldr	r2, [pc, #52]	@ (8007bf8 <xTaskIncrementTick+0x170>)
 8007bc2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007bc4:	697b      	ldr	r3, [r7, #20]
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3718      	adds	r7, #24
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	20000784 	.word	0x20000784
 8007bd4:	20000760 	.word	0x20000760
 8007bd8:	20000714 	.word	0x20000714
 8007bdc:	20000718 	.word	0x20000718
 8007be0:	20000774 	.word	0x20000774
 8007be4:	2000077c 	.word	0x2000077c
 8007be8:	20000764 	.word	0x20000764
 8007bec:	20000660 	.word	0x20000660
 8007bf0:	2000065c 	.word	0x2000065c
 8007bf4:	20000770 	.word	0x20000770
 8007bf8:	2000076c 	.word	0x2000076c

08007bfc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b086      	sub	sp, #24
 8007c00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007c02:	4b35      	ldr	r3, [pc, #212]	@ (8007cd8 <vTaskSwitchContext+0xdc>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d003      	beq.n	8007c12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007c0a:	4b34      	ldr	r3, [pc, #208]	@ (8007cdc <vTaskSwitchContext+0xe0>)
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007c10:	e05e      	b.n	8007cd0 <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
 8007c12:	4b32      	ldr	r3, [pc, #200]	@ (8007cdc <vTaskSwitchContext+0xe0>)
 8007c14:	2200      	movs	r2, #0
 8007c16:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8007c18:	f7f9 fb38 	bl	800128c <getRunTimeCounterValue>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	4a30      	ldr	r2, [pc, #192]	@ (8007ce0 <vTaskSwitchContext+0xe4>)
 8007c20:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8007c22:	4b2f      	ldr	r3, [pc, #188]	@ (8007ce0 <vTaskSwitchContext+0xe4>)
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	4b2f      	ldr	r3, [pc, #188]	@ (8007ce4 <vTaskSwitchContext+0xe8>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d909      	bls.n	8007c42 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8007c2e:	4b2e      	ldr	r3, [pc, #184]	@ (8007ce8 <vTaskSwitchContext+0xec>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007c34:	4a2a      	ldr	r2, [pc, #168]	@ (8007ce0 <vTaskSwitchContext+0xe4>)
 8007c36:	6810      	ldr	r0, [r2, #0]
 8007c38:	4a2a      	ldr	r2, [pc, #168]	@ (8007ce4 <vTaskSwitchContext+0xe8>)
 8007c3a:	6812      	ldr	r2, [r2, #0]
 8007c3c:	1a82      	subs	r2, r0, r2
 8007c3e:	440a      	add	r2, r1
 8007c40:	655a      	str	r2, [r3, #84]	@ 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8007c42:	4b27      	ldr	r3, [pc, #156]	@ (8007ce0 <vTaskSwitchContext+0xe4>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a27      	ldr	r2, [pc, #156]	@ (8007ce4 <vTaskSwitchContext+0xe8>)
 8007c48:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c4a:	4b28      	ldr	r3, [pc, #160]	@ (8007cec <vTaskSwitchContext+0xf0>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	fab3 f383 	clz	r3, r3
 8007c56:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007c58:	7afb      	ldrb	r3, [r7, #11]
 8007c5a:	f1c3 031f 	rsb	r3, r3, #31
 8007c5e:	617b      	str	r3, [r7, #20]
 8007c60:	4923      	ldr	r1, [pc, #140]	@ (8007cf0 <vTaskSwitchContext+0xf4>)
 8007c62:	697a      	ldr	r2, [r7, #20]
 8007c64:	4613      	mov	r3, r2
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	4413      	add	r3, r2
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	440b      	add	r3, r1
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d10b      	bne.n	8007c8c <vTaskSwitchContext+0x90>
	__asm volatile
 8007c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c78:	f383 8811 	msr	BASEPRI, r3
 8007c7c:	f3bf 8f6f 	isb	sy
 8007c80:	f3bf 8f4f 	dsb	sy
 8007c84:	607b      	str	r3, [r7, #4]
}
 8007c86:	bf00      	nop
 8007c88:	bf00      	nop
 8007c8a:	e7fd      	b.n	8007c88 <vTaskSwitchContext+0x8c>
 8007c8c:	697a      	ldr	r2, [r7, #20]
 8007c8e:	4613      	mov	r3, r2
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	4413      	add	r3, r2
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	4a16      	ldr	r2, [pc, #88]	@ (8007cf0 <vTaskSwitchContext+0xf4>)
 8007c98:	4413      	add	r3, r2
 8007c9a:	613b      	str	r3, [r7, #16]
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	685a      	ldr	r2, [r3, #4]
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	605a      	str	r2, [r3, #4]
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	685a      	ldr	r2, [r3, #4]
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	3308      	adds	r3, #8
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d104      	bne.n	8007cbc <vTaskSwitchContext+0xc0>
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	685a      	ldr	r2, [r3, #4]
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	605a      	str	r2, [r3, #4]
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	68db      	ldr	r3, [r3, #12]
 8007cc2:	4a09      	ldr	r2, [pc, #36]	@ (8007ce8 <vTaskSwitchContext+0xec>)
 8007cc4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007cc6:	4b08      	ldr	r3, [pc, #32]	@ (8007ce8 <vTaskSwitchContext+0xec>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	3358      	adds	r3, #88	@ 0x58
 8007ccc:	4a09      	ldr	r2, [pc, #36]	@ (8007cf4 <vTaskSwitchContext+0xf8>)
 8007cce:	6013      	str	r3, [r2, #0]
}
 8007cd0:	bf00      	nop
 8007cd2:	3718      	adds	r7, #24
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	20000784 	.word	0x20000784
 8007cdc:	20000770 	.word	0x20000770
 8007ce0:	2000078c 	.word	0x2000078c
 8007ce4:	20000788 	.word	0x20000788
 8007ce8:	2000065c 	.word	0x2000065c
 8007cec:	20000764 	.word	0x20000764
 8007cf0:	20000660 	.word	0x20000660
 8007cf4:	20000098 	.word	0x20000098

08007cf8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d10b      	bne.n	8007d20 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d0c:	f383 8811 	msr	BASEPRI, r3
 8007d10:	f3bf 8f6f 	isb	sy
 8007d14:	f3bf 8f4f 	dsb	sy
 8007d18:	60fb      	str	r3, [r7, #12]
}
 8007d1a:	bf00      	nop
 8007d1c:	bf00      	nop
 8007d1e:	e7fd      	b.n	8007d1c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d20:	4b07      	ldr	r3, [pc, #28]	@ (8007d40 <vTaskPlaceOnEventList+0x48>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	3318      	adds	r3, #24
 8007d26:	4619      	mov	r1, r3
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f7fe fbd5 	bl	80064d8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007d2e:	2101      	movs	r1, #1
 8007d30:	6838      	ldr	r0, [r7, #0]
 8007d32:	f000 fb8d 	bl	8008450 <prvAddCurrentTaskToDelayedList>
}
 8007d36:	bf00      	nop
 8007d38:	3710      	adds	r7, #16
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	2000065c 	.word	0x2000065c

08007d44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b086      	sub	sp, #24
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	68db      	ldr	r3, [r3, #12]
 8007d52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d10b      	bne.n	8007d72 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d5e:	f383 8811 	msr	BASEPRI, r3
 8007d62:	f3bf 8f6f 	isb	sy
 8007d66:	f3bf 8f4f 	dsb	sy
 8007d6a:	60fb      	str	r3, [r7, #12]
}
 8007d6c:	bf00      	nop
 8007d6e:	bf00      	nop
 8007d70:	e7fd      	b.n	8007d6e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	3318      	adds	r3, #24
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7fe fbe6 	bl	8006548 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8007df4 <xTaskRemoveFromEventList+0xb0>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d11c      	bne.n	8007dbe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	3304      	adds	r3, #4
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f7fe fbdd 	bl	8006548 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d92:	2201      	movs	r2, #1
 8007d94:	409a      	lsls	r2, r3
 8007d96:	4b18      	ldr	r3, [pc, #96]	@ (8007df8 <xTaskRemoveFromEventList+0xb4>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	4a16      	ldr	r2, [pc, #88]	@ (8007df8 <xTaskRemoveFromEventList+0xb4>)
 8007d9e:	6013      	str	r3, [r2, #0]
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007da4:	4613      	mov	r3, r2
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	4413      	add	r3, r2
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	4a13      	ldr	r2, [pc, #76]	@ (8007dfc <xTaskRemoveFromEventList+0xb8>)
 8007dae:	441a      	add	r2, r3
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	3304      	adds	r3, #4
 8007db4:	4619      	mov	r1, r3
 8007db6:	4610      	mov	r0, r2
 8007db8:	f7fe fb6b 	bl	8006492 <vListInsertEnd>
 8007dbc:	e005      	b.n	8007dca <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	3318      	adds	r3, #24
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	480e      	ldr	r0, [pc, #56]	@ (8007e00 <xTaskRemoveFromEventList+0xbc>)
 8007dc6:	f7fe fb64 	bl	8006492 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dce:	4b0d      	ldr	r3, [pc, #52]	@ (8007e04 <xTaskRemoveFromEventList+0xc0>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d905      	bls.n	8007de4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8007e08 <xTaskRemoveFromEventList+0xc4>)
 8007dde:	2201      	movs	r2, #1
 8007de0:	601a      	str	r2, [r3, #0]
 8007de2:	e001      	b.n	8007de8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007de4:	2300      	movs	r3, #0
 8007de6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007de8:	697b      	ldr	r3, [r7, #20]
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3718      	adds	r7, #24
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	20000784 	.word	0x20000784
 8007df8:	20000764 	.word	0x20000764
 8007dfc:	20000660 	.word	0x20000660
 8007e00:	2000071c 	.word	0x2000071c
 8007e04:	2000065c 	.word	0x2000065c
 8007e08:	20000770 	.word	0x20000770

08007e0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007e14:	4b06      	ldr	r3, [pc, #24]	@ (8007e30 <vTaskInternalSetTimeOutState+0x24>)
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007e1c:	4b05      	ldr	r3, [pc, #20]	@ (8007e34 <vTaskInternalSetTimeOutState+0x28>)
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	605a      	str	r2, [r3, #4]
}
 8007e24:	bf00      	nop
 8007e26:	370c      	adds	r7, #12
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bc80      	pop	{r7}
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop
 8007e30:	20000774 	.word	0x20000774
 8007e34:	20000760 	.word	0x20000760

08007e38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b088      	sub	sp, #32
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d10b      	bne.n	8007e60 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e4c:	f383 8811 	msr	BASEPRI, r3
 8007e50:	f3bf 8f6f 	isb	sy
 8007e54:	f3bf 8f4f 	dsb	sy
 8007e58:	613b      	str	r3, [r7, #16]
}
 8007e5a:	bf00      	nop
 8007e5c:	bf00      	nop
 8007e5e:	e7fd      	b.n	8007e5c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d10b      	bne.n	8007e7e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e6a:	f383 8811 	msr	BASEPRI, r3
 8007e6e:	f3bf 8f6f 	isb	sy
 8007e72:	f3bf 8f4f 	dsb	sy
 8007e76:	60fb      	str	r3, [r7, #12]
}
 8007e78:	bf00      	nop
 8007e7a:	bf00      	nop
 8007e7c:	e7fd      	b.n	8007e7a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007e7e:	f000 fc3d 	bl	80086fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007e82:	4b1d      	ldr	r3, [pc, #116]	@ (8007ef8 <xTaskCheckForTimeOut+0xc0>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	69ba      	ldr	r2, [r7, #24]
 8007e8e:	1ad3      	subs	r3, r2, r3
 8007e90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e9a:	d102      	bne.n	8007ea2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	61fb      	str	r3, [r7, #28]
 8007ea0:	e023      	b.n	8007eea <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	4b15      	ldr	r3, [pc, #84]	@ (8007efc <xTaskCheckForTimeOut+0xc4>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d007      	beq.n	8007ebe <xTaskCheckForTimeOut+0x86>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	69ba      	ldr	r2, [r7, #24]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d302      	bcc.n	8007ebe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	61fb      	str	r3, [r7, #28]
 8007ebc:	e015      	b.n	8007eea <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	697a      	ldr	r2, [r7, #20]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d20b      	bcs.n	8007ee0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	1ad2      	subs	r2, r2, r3
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f7ff ff99 	bl	8007e0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007eda:	2300      	movs	r3, #0
 8007edc:	61fb      	str	r3, [r7, #28]
 8007ede:	e004      	b.n	8007eea <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007eea:	f000 fc37 	bl	800875c <vPortExitCritical>

	return xReturn;
 8007eee:	69fb      	ldr	r3, [r7, #28]
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3720      	adds	r7, #32
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	20000760 	.word	0x20000760
 8007efc:	20000774 	.word	0x20000774

08007f00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007f00:	b480      	push	{r7}
 8007f02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007f04:	4b03      	ldr	r3, [pc, #12]	@ (8007f14 <vTaskMissedYield+0x14>)
 8007f06:	2201      	movs	r2, #1
 8007f08:	601a      	str	r2, [r3, #0]
}
 8007f0a:	bf00      	nop
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bc80      	pop	{r7}
 8007f10:	4770      	bx	lr
 8007f12:	bf00      	nop
 8007f14:	20000770 	.word	0x20000770

08007f18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007f20:	f000 f852 	bl	8007fc8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007f24:	4b06      	ldr	r3, [pc, #24]	@ (8007f40 <prvIdleTask+0x28>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d9f9      	bls.n	8007f20 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007f2c:	4b05      	ldr	r3, [pc, #20]	@ (8007f44 <prvIdleTask+0x2c>)
 8007f2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f32:	601a      	str	r2, [r3, #0]
 8007f34:	f3bf 8f4f 	dsb	sy
 8007f38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007f3c:	e7f0      	b.n	8007f20 <prvIdleTask+0x8>
 8007f3e:	bf00      	nop
 8007f40:	20000660 	.word	0x20000660
 8007f44:	e000ed04 	.word	0xe000ed04

08007f48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f4e:	2300      	movs	r3, #0
 8007f50:	607b      	str	r3, [r7, #4]
 8007f52:	e00c      	b.n	8007f6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	4613      	mov	r3, r2
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	4413      	add	r3, r2
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	4a12      	ldr	r2, [pc, #72]	@ (8007fa8 <prvInitialiseTaskLists+0x60>)
 8007f60:	4413      	add	r3, r2
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7fe fa6a 	bl	800643c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	607b      	str	r3, [r7, #4]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2b06      	cmp	r3, #6
 8007f72:	d9ef      	bls.n	8007f54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007f74:	480d      	ldr	r0, [pc, #52]	@ (8007fac <prvInitialiseTaskLists+0x64>)
 8007f76:	f7fe fa61 	bl	800643c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007f7a:	480d      	ldr	r0, [pc, #52]	@ (8007fb0 <prvInitialiseTaskLists+0x68>)
 8007f7c:	f7fe fa5e 	bl	800643c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007f80:	480c      	ldr	r0, [pc, #48]	@ (8007fb4 <prvInitialiseTaskLists+0x6c>)
 8007f82:	f7fe fa5b 	bl	800643c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007f86:	480c      	ldr	r0, [pc, #48]	@ (8007fb8 <prvInitialiseTaskLists+0x70>)
 8007f88:	f7fe fa58 	bl	800643c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007f8c:	480b      	ldr	r0, [pc, #44]	@ (8007fbc <prvInitialiseTaskLists+0x74>)
 8007f8e:	f7fe fa55 	bl	800643c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007f92:	4b0b      	ldr	r3, [pc, #44]	@ (8007fc0 <prvInitialiseTaskLists+0x78>)
 8007f94:	4a05      	ldr	r2, [pc, #20]	@ (8007fac <prvInitialiseTaskLists+0x64>)
 8007f96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007f98:	4b0a      	ldr	r3, [pc, #40]	@ (8007fc4 <prvInitialiseTaskLists+0x7c>)
 8007f9a:	4a05      	ldr	r2, [pc, #20]	@ (8007fb0 <prvInitialiseTaskLists+0x68>)
 8007f9c:	601a      	str	r2, [r3, #0]
}
 8007f9e:	bf00      	nop
 8007fa0:	3708      	adds	r7, #8
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	20000660 	.word	0x20000660
 8007fac:	200006ec 	.word	0x200006ec
 8007fb0:	20000700 	.word	0x20000700
 8007fb4:	2000071c 	.word	0x2000071c
 8007fb8:	20000730 	.word	0x20000730
 8007fbc:	20000748 	.word	0x20000748
 8007fc0:	20000714 	.word	0x20000714
 8007fc4:	20000718 	.word	0x20000718

08007fc8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fce:	e019      	b.n	8008004 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007fd0:	f000 fb94 	bl	80086fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fd4:	4b10      	ldr	r3, [pc, #64]	@ (8008018 <prvCheckTasksWaitingTermination+0x50>)
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	3304      	adds	r3, #4
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f7fe fab1 	bl	8006548 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800801c <prvCheckTasksWaitingTermination+0x54>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	3b01      	subs	r3, #1
 8007fec:	4a0b      	ldr	r2, [pc, #44]	@ (800801c <prvCheckTasksWaitingTermination+0x54>)
 8007fee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8008020 <prvCheckTasksWaitingTermination+0x58>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	3b01      	subs	r3, #1
 8007ff6:	4a0a      	ldr	r2, [pc, #40]	@ (8008020 <prvCheckTasksWaitingTermination+0x58>)
 8007ff8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007ffa:	f000 fbaf 	bl	800875c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 f810 	bl	8008024 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008004:	4b06      	ldr	r3, [pc, #24]	@ (8008020 <prvCheckTasksWaitingTermination+0x58>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d1e1      	bne.n	8007fd0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800800c:	bf00      	nop
 800800e:	bf00      	nop
 8008010:	3708      	adds	r7, #8
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
 8008016:	bf00      	nop
 8008018:	20000730 	.word	0x20000730
 800801c:	2000075c 	.word	0x2000075c
 8008020:	20000744 	.word	0x20000744

08008024 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	3358      	adds	r3, #88	@ 0x58
 8008030:	4618      	mov	r0, r3
 8008032:	f001 fc9f 	bl	8009974 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800803c:	2b00      	cmp	r3, #0
 800803e:	d108      	bne.n	8008052 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008044:	4618      	mov	r0, r3
 8008046:	f000 fd29 	bl	8008a9c <vPortFree>
				vPortFree( pxTCB );
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 fd26 	bl	8008a9c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008050:	e019      	b.n	8008086 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8008058:	2b01      	cmp	r3, #1
 800805a:	d103      	bne.n	8008064 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 fd1d 	bl	8008a9c <vPortFree>
	}
 8008062:	e010      	b.n	8008086 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800806a:	2b02      	cmp	r3, #2
 800806c:	d00b      	beq.n	8008086 <prvDeleteTCB+0x62>
	__asm volatile
 800806e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008072:	f383 8811 	msr	BASEPRI, r3
 8008076:	f3bf 8f6f 	isb	sy
 800807a:	f3bf 8f4f 	dsb	sy
 800807e:	60fb      	str	r3, [r7, #12]
}
 8008080:	bf00      	nop
 8008082:	bf00      	nop
 8008084:	e7fd      	b.n	8008082 <prvDeleteTCB+0x5e>
	}
 8008086:	bf00      	nop
 8008088:	3710      	adds	r7, #16
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
	...

08008090 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008096:	4b0c      	ldr	r3, [pc, #48]	@ (80080c8 <prvResetNextTaskUnblockTime+0x38>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d104      	bne.n	80080aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80080a0:	4b0a      	ldr	r3, [pc, #40]	@ (80080cc <prvResetNextTaskUnblockTime+0x3c>)
 80080a2:	f04f 32ff 	mov.w	r2, #4294967295
 80080a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80080a8:	e008      	b.n	80080bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080aa:	4b07      	ldr	r3, [pc, #28]	@ (80080c8 <prvResetNextTaskUnblockTime+0x38>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	68db      	ldr	r3, [r3, #12]
 80080b0:	68db      	ldr	r3, [r3, #12]
 80080b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	4a04      	ldr	r2, [pc, #16]	@ (80080cc <prvResetNextTaskUnblockTime+0x3c>)
 80080ba:	6013      	str	r3, [r2, #0]
}
 80080bc:	bf00      	nop
 80080be:	370c      	adds	r7, #12
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bc80      	pop	{r7}
 80080c4:	4770      	bx	lr
 80080c6:	bf00      	nop
 80080c8:	20000714 	.word	0x20000714
 80080cc:	2000077c 	.word	0x2000077c

080080d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80080d6:	4b0b      	ldr	r3, [pc, #44]	@ (8008104 <xTaskGetSchedulerState+0x34>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d102      	bne.n	80080e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80080de:	2301      	movs	r3, #1
 80080e0:	607b      	str	r3, [r7, #4]
 80080e2:	e008      	b.n	80080f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080e4:	4b08      	ldr	r3, [pc, #32]	@ (8008108 <xTaskGetSchedulerState+0x38>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d102      	bne.n	80080f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80080ec:	2302      	movs	r3, #2
 80080ee:	607b      	str	r3, [r7, #4]
 80080f0:	e001      	b.n	80080f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80080f2:	2300      	movs	r3, #0
 80080f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80080f6:	687b      	ldr	r3, [r7, #4]
	}
 80080f8:	4618      	mov	r0, r3
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bc80      	pop	{r7}
 8008100:	4770      	bx	lr
 8008102:	bf00      	nop
 8008104:	20000768 	.word	0x20000768
 8008108:	20000784 	.word	0x20000784

0800810c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008118:	2300      	movs	r3, #0
 800811a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d05e      	beq.n	80081e0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008126:	4b31      	ldr	r3, [pc, #196]	@ (80081ec <xTaskPriorityInherit+0xe0>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800812c:	429a      	cmp	r2, r3
 800812e:	d24e      	bcs.n	80081ce <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	699b      	ldr	r3, [r3, #24]
 8008134:	2b00      	cmp	r3, #0
 8008136:	db06      	blt.n	8008146 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008138:	4b2c      	ldr	r3, [pc, #176]	@ (80081ec <xTaskPriorityInherit+0xe0>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800813e:	f1c3 0207 	rsb	r2, r3, #7
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	6959      	ldr	r1, [r3, #20]
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800814e:	4613      	mov	r3, r2
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	4413      	add	r3, r2
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	4a26      	ldr	r2, [pc, #152]	@ (80081f0 <xTaskPriorityInherit+0xe4>)
 8008158:	4413      	add	r3, r2
 800815a:	4299      	cmp	r1, r3
 800815c:	d12f      	bne.n	80081be <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	3304      	adds	r3, #4
 8008162:	4618      	mov	r0, r3
 8008164:	f7fe f9f0 	bl	8006548 <uxListRemove>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d10a      	bne.n	8008184 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008172:	2201      	movs	r2, #1
 8008174:	fa02 f303 	lsl.w	r3, r2, r3
 8008178:	43da      	mvns	r2, r3
 800817a:	4b1e      	ldr	r3, [pc, #120]	@ (80081f4 <xTaskPriorityInherit+0xe8>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4013      	ands	r3, r2
 8008180:	4a1c      	ldr	r2, [pc, #112]	@ (80081f4 <xTaskPriorityInherit+0xe8>)
 8008182:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008184:	4b19      	ldr	r3, [pc, #100]	@ (80081ec <xTaskPriorityInherit+0xe0>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008192:	2201      	movs	r2, #1
 8008194:	409a      	lsls	r2, r3
 8008196:	4b17      	ldr	r3, [pc, #92]	@ (80081f4 <xTaskPriorityInherit+0xe8>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4313      	orrs	r3, r2
 800819c:	4a15      	ldr	r2, [pc, #84]	@ (80081f4 <xTaskPriorityInherit+0xe8>)
 800819e:	6013      	str	r3, [r2, #0]
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081a4:	4613      	mov	r3, r2
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	4413      	add	r3, r2
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	4a10      	ldr	r2, [pc, #64]	@ (80081f0 <xTaskPriorityInherit+0xe4>)
 80081ae:	441a      	add	r2, r3
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	3304      	adds	r3, #4
 80081b4:	4619      	mov	r1, r3
 80081b6:	4610      	mov	r0, r2
 80081b8:	f7fe f96b 	bl	8006492 <vListInsertEnd>
 80081bc:	e004      	b.n	80081c8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80081be:	4b0b      	ldr	r3, [pc, #44]	@ (80081ec <xTaskPriorityInherit+0xe0>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80081c8:	2301      	movs	r3, #1
 80081ca:	60fb      	str	r3, [r7, #12]
 80081cc:	e008      	b.n	80081e0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80081d2:	4b06      	ldr	r3, [pc, #24]	@ (80081ec <xTaskPriorityInherit+0xe0>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d8:	429a      	cmp	r2, r3
 80081da:	d201      	bcs.n	80081e0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80081dc:	2301      	movs	r3, #1
 80081de:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80081e0:	68fb      	ldr	r3, [r7, #12]
	}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	2000065c 	.word	0x2000065c
 80081f0:	20000660 	.word	0x20000660
 80081f4:	20000764 	.word	0x20000764

080081f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b086      	sub	sp, #24
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008204:	2300      	movs	r3, #0
 8008206:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d070      	beq.n	80082f0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800820e:	4b3b      	ldr	r3, [pc, #236]	@ (80082fc <xTaskPriorityDisinherit+0x104>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	693a      	ldr	r2, [r7, #16]
 8008214:	429a      	cmp	r2, r3
 8008216:	d00b      	beq.n	8008230 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800821c:	f383 8811 	msr	BASEPRI, r3
 8008220:	f3bf 8f6f 	isb	sy
 8008224:	f3bf 8f4f 	dsb	sy
 8008228:	60fb      	str	r3, [r7, #12]
}
 800822a:	bf00      	nop
 800822c:	bf00      	nop
 800822e:	e7fd      	b.n	800822c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008234:	2b00      	cmp	r3, #0
 8008236:	d10b      	bne.n	8008250 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800823c:	f383 8811 	msr	BASEPRI, r3
 8008240:	f3bf 8f6f 	isb	sy
 8008244:	f3bf 8f4f 	dsb	sy
 8008248:	60bb      	str	r3, [r7, #8]
}
 800824a:	bf00      	nop
 800824c:	bf00      	nop
 800824e:	e7fd      	b.n	800824c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008254:	1e5a      	subs	r2, r3, #1
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008262:	429a      	cmp	r2, r3
 8008264:	d044      	beq.n	80082f0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800826a:	2b00      	cmp	r3, #0
 800826c:	d140      	bne.n	80082f0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	3304      	adds	r3, #4
 8008272:	4618      	mov	r0, r3
 8008274:	f7fe f968 	bl	8006548 <uxListRemove>
 8008278:	4603      	mov	r3, r0
 800827a:	2b00      	cmp	r3, #0
 800827c:	d115      	bne.n	80082aa <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008282:	491f      	ldr	r1, [pc, #124]	@ (8008300 <xTaskPriorityDisinherit+0x108>)
 8008284:	4613      	mov	r3, r2
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	4413      	add	r3, r2
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	440b      	add	r3, r1
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d10a      	bne.n	80082aa <xTaskPriorityDisinherit+0xb2>
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008298:	2201      	movs	r2, #1
 800829a:	fa02 f303 	lsl.w	r3, r2, r3
 800829e:	43da      	mvns	r2, r3
 80082a0:	4b18      	ldr	r3, [pc, #96]	@ (8008304 <xTaskPriorityDisinherit+0x10c>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4013      	ands	r3, r2
 80082a6:	4a17      	ldr	r2, [pc, #92]	@ (8008304 <xTaskPriorityDisinherit+0x10c>)
 80082a8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082b6:	f1c3 0207 	rsb	r2, r3, #7
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082c2:	2201      	movs	r2, #1
 80082c4:	409a      	lsls	r2, r3
 80082c6:	4b0f      	ldr	r3, [pc, #60]	@ (8008304 <xTaskPriorityDisinherit+0x10c>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4313      	orrs	r3, r2
 80082cc:	4a0d      	ldr	r2, [pc, #52]	@ (8008304 <xTaskPriorityDisinherit+0x10c>)
 80082ce:	6013      	str	r3, [r2, #0]
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082d4:	4613      	mov	r3, r2
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	4413      	add	r3, r2
 80082da:	009b      	lsls	r3, r3, #2
 80082dc:	4a08      	ldr	r2, [pc, #32]	@ (8008300 <xTaskPriorityDisinherit+0x108>)
 80082de:	441a      	add	r2, r3
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	3304      	adds	r3, #4
 80082e4:	4619      	mov	r1, r3
 80082e6:	4610      	mov	r0, r2
 80082e8:	f7fe f8d3 	bl	8006492 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80082ec:	2301      	movs	r3, #1
 80082ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80082f0:	697b      	ldr	r3, [r7, #20]
	}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3718      	adds	r7, #24
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	2000065c 	.word	0x2000065c
 8008300:	20000660 	.word	0x20000660
 8008304:	20000764 	.word	0x20000764

08008308 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008308:	b580      	push	{r7, lr}
 800830a:	b088      	sub	sp, #32
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008316:	2301      	movs	r3, #1
 8008318:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d079      	beq.n	8008414 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008320:	69bb      	ldr	r3, [r7, #24]
 8008322:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008324:	2b00      	cmp	r3, #0
 8008326:	d10b      	bne.n	8008340 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800832c:	f383 8811 	msr	BASEPRI, r3
 8008330:	f3bf 8f6f 	isb	sy
 8008334:	f3bf 8f4f 	dsb	sy
 8008338:	60fb      	str	r3, [r7, #12]
}
 800833a:	bf00      	nop
 800833c:	bf00      	nop
 800833e:	e7fd      	b.n	800833c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008344:	683a      	ldr	r2, [r7, #0]
 8008346:	429a      	cmp	r2, r3
 8008348:	d902      	bls.n	8008350 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	61fb      	str	r3, [r7, #28]
 800834e:	e002      	b.n	8008356 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008354:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008356:	69bb      	ldr	r3, [r7, #24]
 8008358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800835a:	69fa      	ldr	r2, [r7, #28]
 800835c:	429a      	cmp	r2, r3
 800835e:	d059      	beq.n	8008414 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008360:	69bb      	ldr	r3, [r7, #24]
 8008362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008364:	697a      	ldr	r2, [r7, #20]
 8008366:	429a      	cmp	r2, r3
 8008368:	d154      	bne.n	8008414 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800836a:	4b2c      	ldr	r3, [pc, #176]	@ (800841c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	69ba      	ldr	r2, [r7, #24]
 8008370:	429a      	cmp	r2, r3
 8008372:	d10b      	bne.n	800838c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008378:	f383 8811 	msr	BASEPRI, r3
 800837c:	f3bf 8f6f 	isb	sy
 8008380:	f3bf 8f4f 	dsb	sy
 8008384:	60bb      	str	r3, [r7, #8]
}
 8008386:	bf00      	nop
 8008388:	bf00      	nop
 800838a:	e7fd      	b.n	8008388 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800838c:	69bb      	ldr	r3, [r7, #24]
 800838e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008390:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008392:	69bb      	ldr	r3, [r7, #24]
 8008394:	69fa      	ldr	r2, [r7, #28]
 8008396:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008398:	69bb      	ldr	r3, [r7, #24]
 800839a:	699b      	ldr	r3, [r3, #24]
 800839c:	2b00      	cmp	r3, #0
 800839e:	db04      	blt.n	80083aa <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083a0:	69fb      	ldr	r3, [r7, #28]
 80083a2:	f1c3 0207 	rsb	r2, r3, #7
 80083a6:	69bb      	ldr	r3, [r7, #24]
 80083a8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	6959      	ldr	r1, [r3, #20]
 80083ae:	693a      	ldr	r2, [r7, #16]
 80083b0:	4613      	mov	r3, r2
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	4413      	add	r3, r2
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	4a19      	ldr	r2, [pc, #100]	@ (8008420 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80083ba:	4413      	add	r3, r2
 80083bc:	4299      	cmp	r1, r3
 80083be:	d129      	bne.n	8008414 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083c0:	69bb      	ldr	r3, [r7, #24]
 80083c2:	3304      	adds	r3, #4
 80083c4:	4618      	mov	r0, r3
 80083c6:	f7fe f8bf 	bl	8006548 <uxListRemove>
 80083ca:	4603      	mov	r3, r0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d10a      	bne.n	80083e6 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80083d0:	69bb      	ldr	r3, [r7, #24]
 80083d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083d4:	2201      	movs	r2, #1
 80083d6:	fa02 f303 	lsl.w	r3, r2, r3
 80083da:	43da      	mvns	r2, r3
 80083dc:	4b11      	ldr	r3, [pc, #68]	@ (8008424 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4013      	ands	r3, r2
 80083e2:	4a10      	ldr	r2, [pc, #64]	@ (8008424 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80083e4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80083e6:	69bb      	ldr	r3, [r7, #24]
 80083e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ea:	2201      	movs	r2, #1
 80083ec:	409a      	lsls	r2, r3
 80083ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008424 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4313      	orrs	r3, r2
 80083f4:	4a0b      	ldr	r2, [pc, #44]	@ (8008424 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80083f6:	6013      	str	r3, [r2, #0]
 80083f8:	69bb      	ldr	r3, [r7, #24]
 80083fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083fc:	4613      	mov	r3, r2
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	4413      	add	r3, r2
 8008402:	009b      	lsls	r3, r3, #2
 8008404:	4a06      	ldr	r2, [pc, #24]	@ (8008420 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008406:	441a      	add	r2, r3
 8008408:	69bb      	ldr	r3, [r7, #24]
 800840a:	3304      	adds	r3, #4
 800840c:	4619      	mov	r1, r3
 800840e:	4610      	mov	r0, r2
 8008410:	f7fe f83f 	bl	8006492 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008414:	bf00      	nop
 8008416:	3720      	adds	r7, #32
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}
 800841c:	2000065c 	.word	0x2000065c
 8008420:	20000660 	.word	0x20000660
 8008424:	20000764 	.word	0x20000764

08008428 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008428:	b480      	push	{r7}
 800842a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800842c:	4b07      	ldr	r3, [pc, #28]	@ (800844c <pvTaskIncrementMutexHeldCount+0x24>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d004      	beq.n	800843e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008434:	4b05      	ldr	r3, [pc, #20]	@ (800844c <pvTaskIncrementMutexHeldCount+0x24>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800843a:	3201      	adds	r2, #1
 800843c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800843e:	4b03      	ldr	r3, [pc, #12]	@ (800844c <pvTaskIncrementMutexHeldCount+0x24>)
 8008440:	681b      	ldr	r3, [r3, #0]
	}
 8008442:	4618      	mov	r0, r3
 8008444:	46bd      	mov	sp, r7
 8008446:	bc80      	pop	{r7}
 8008448:	4770      	bx	lr
 800844a:	bf00      	nop
 800844c:	2000065c 	.word	0x2000065c

08008450 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800845a:	4b29      	ldr	r3, [pc, #164]	@ (8008500 <prvAddCurrentTaskToDelayedList+0xb0>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008460:	4b28      	ldr	r3, [pc, #160]	@ (8008504 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	3304      	adds	r3, #4
 8008466:	4618      	mov	r0, r3
 8008468:	f7fe f86e 	bl	8006548 <uxListRemove>
 800846c:	4603      	mov	r3, r0
 800846e:	2b00      	cmp	r3, #0
 8008470:	d10b      	bne.n	800848a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008472:	4b24      	ldr	r3, [pc, #144]	@ (8008504 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008478:	2201      	movs	r2, #1
 800847a:	fa02 f303 	lsl.w	r3, r2, r3
 800847e:	43da      	mvns	r2, r3
 8008480:	4b21      	ldr	r3, [pc, #132]	@ (8008508 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4013      	ands	r3, r2
 8008486:	4a20      	ldr	r2, [pc, #128]	@ (8008508 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008488:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008490:	d10a      	bne.n	80084a8 <prvAddCurrentTaskToDelayedList+0x58>
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d007      	beq.n	80084a8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008498:	4b1a      	ldr	r3, [pc, #104]	@ (8008504 <prvAddCurrentTaskToDelayedList+0xb4>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	3304      	adds	r3, #4
 800849e:	4619      	mov	r1, r3
 80084a0:	481a      	ldr	r0, [pc, #104]	@ (800850c <prvAddCurrentTaskToDelayedList+0xbc>)
 80084a2:	f7fd fff6 	bl	8006492 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80084a6:	e026      	b.n	80084f6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80084a8:	68fa      	ldr	r2, [r7, #12]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4413      	add	r3, r2
 80084ae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80084b0:	4b14      	ldr	r3, [pc, #80]	@ (8008504 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	68ba      	ldr	r2, [r7, #8]
 80084b6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80084b8:	68ba      	ldr	r2, [r7, #8]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	429a      	cmp	r2, r3
 80084be:	d209      	bcs.n	80084d4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084c0:	4b13      	ldr	r3, [pc, #76]	@ (8008510 <prvAddCurrentTaskToDelayedList+0xc0>)
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	4b0f      	ldr	r3, [pc, #60]	@ (8008504 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	3304      	adds	r3, #4
 80084ca:	4619      	mov	r1, r3
 80084cc:	4610      	mov	r0, r2
 80084ce:	f7fe f803 	bl	80064d8 <vListInsert>
}
 80084d2:	e010      	b.n	80084f6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084d4:	4b0f      	ldr	r3, [pc, #60]	@ (8008514 <prvAddCurrentTaskToDelayedList+0xc4>)
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	4b0a      	ldr	r3, [pc, #40]	@ (8008504 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	3304      	adds	r3, #4
 80084de:	4619      	mov	r1, r3
 80084e0:	4610      	mov	r0, r2
 80084e2:	f7fd fff9 	bl	80064d8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80084e6:	4b0c      	ldr	r3, [pc, #48]	@ (8008518 <prvAddCurrentTaskToDelayedList+0xc8>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	68ba      	ldr	r2, [r7, #8]
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d202      	bcs.n	80084f6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80084f0:	4a09      	ldr	r2, [pc, #36]	@ (8008518 <prvAddCurrentTaskToDelayedList+0xc8>)
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	6013      	str	r3, [r2, #0]
}
 80084f6:	bf00      	nop
 80084f8:	3710      	adds	r7, #16
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	20000760 	.word	0x20000760
 8008504:	2000065c 	.word	0x2000065c
 8008508:	20000764 	.word	0x20000764
 800850c:	20000748 	.word	0x20000748
 8008510:	20000718 	.word	0x20000718
 8008514:	20000714 	.word	0x20000714
 8008518:	2000077c 	.word	0x2000077c

0800851c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800851c:	b480      	push	{r7}
 800851e:	b085      	sub	sp, #20
 8008520:	af00      	add	r7, sp, #0
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	3b04      	subs	r3, #4
 800852c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008534:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	3b04      	subs	r3, #4
 800853a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	f023 0201 	bic.w	r2, r3, #1
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	3b04      	subs	r3, #4
 800854a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800854c:	4a08      	ldr	r2, [pc, #32]	@ (8008570 <pxPortInitialiseStack+0x54>)
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	3b14      	subs	r3, #20
 8008556:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	3b20      	subs	r3, #32
 8008562:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008564:	68fb      	ldr	r3, [r7, #12]
}
 8008566:	4618      	mov	r0, r3
 8008568:	3714      	adds	r7, #20
 800856a:	46bd      	mov	sp, r7
 800856c:	bc80      	pop	{r7}
 800856e:	4770      	bx	lr
 8008570:	08008575 	.word	0x08008575

08008574 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008574:	b480      	push	{r7}
 8008576:	b085      	sub	sp, #20
 8008578:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800857a:	2300      	movs	r3, #0
 800857c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800857e:	4b12      	ldr	r3, [pc, #72]	@ (80085c8 <prvTaskExitError+0x54>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008586:	d00b      	beq.n	80085a0 <prvTaskExitError+0x2c>
	__asm volatile
 8008588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800858c:	f383 8811 	msr	BASEPRI, r3
 8008590:	f3bf 8f6f 	isb	sy
 8008594:	f3bf 8f4f 	dsb	sy
 8008598:	60fb      	str	r3, [r7, #12]
}
 800859a:	bf00      	nop
 800859c:	bf00      	nop
 800859e:	e7fd      	b.n	800859c <prvTaskExitError+0x28>
	__asm volatile
 80085a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085a4:	f383 8811 	msr	BASEPRI, r3
 80085a8:	f3bf 8f6f 	isb	sy
 80085ac:	f3bf 8f4f 	dsb	sy
 80085b0:	60bb      	str	r3, [r7, #8]
}
 80085b2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80085b4:	bf00      	nop
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d0fc      	beq.n	80085b6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80085bc:	bf00      	nop
 80085be:	bf00      	nop
 80085c0:	3714      	adds	r7, #20
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bc80      	pop	{r7}
 80085c6:	4770      	bx	lr
 80085c8:	20000088 	.word	0x20000088
 80085cc:	00000000 	.word	0x00000000

080085d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80085d0:	4b07      	ldr	r3, [pc, #28]	@ (80085f0 <pxCurrentTCBConst2>)
 80085d2:	6819      	ldr	r1, [r3, #0]
 80085d4:	6808      	ldr	r0, [r1, #0]
 80085d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80085da:	f380 8809 	msr	PSP, r0
 80085de:	f3bf 8f6f 	isb	sy
 80085e2:	f04f 0000 	mov.w	r0, #0
 80085e6:	f380 8811 	msr	BASEPRI, r0
 80085ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80085ee:	4770      	bx	lr

080085f0 <pxCurrentTCBConst2>:
 80085f0:	2000065c 	.word	0x2000065c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80085f4:	bf00      	nop
 80085f6:	bf00      	nop

080085f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80085f8:	4806      	ldr	r0, [pc, #24]	@ (8008614 <prvPortStartFirstTask+0x1c>)
 80085fa:	6800      	ldr	r0, [r0, #0]
 80085fc:	6800      	ldr	r0, [r0, #0]
 80085fe:	f380 8808 	msr	MSP, r0
 8008602:	b662      	cpsie	i
 8008604:	b661      	cpsie	f
 8008606:	f3bf 8f4f 	dsb	sy
 800860a:	f3bf 8f6f 	isb	sy
 800860e:	df00      	svc	0
 8008610:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008612:	bf00      	nop
 8008614:	e000ed08 	.word	0xe000ed08

08008618 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800861e:	4b32      	ldr	r3, [pc, #200]	@ (80086e8 <xPortStartScheduler+0xd0>)
 8008620:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	b2db      	uxtb	r3, r3
 8008628:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	22ff      	movs	r2, #255	@ 0xff
 800862e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	b2db      	uxtb	r3, r3
 8008636:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008638:	78fb      	ldrb	r3, [r7, #3]
 800863a:	b2db      	uxtb	r3, r3
 800863c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008640:	b2da      	uxtb	r2, r3
 8008642:	4b2a      	ldr	r3, [pc, #168]	@ (80086ec <xPortStartScheduler+0xd4>)
 8008644:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008646:	4b2a      	ldr	r3, [pc, #168]	@ (80086f0 <xPortStartScheduler+0xd8>)
 8008648:	2207      	movs	r2, #7
 800864a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800864c:	e009      	b.n	8008662 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800864e:	4b28      	ldr	r3, [pc, #160]	@ (80086f0 <xPortStartScheduler+0xd8>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	3b01      	subs	r3, #1
 8008654:	4a26      	ldr	r2, [pc, #152]	@ (80086f0 <xPortStartScheduler+0xd8>)
 8008656:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008658:	78fb      	ldrb	r3, [r7, #3]
 800865a:	b2db      	uxtb	r3, r3
 800865c:	005b      	lsls	r3, r3, #1
 800865e:	b2db      	uxtb	r3, r3
 8008660:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008662:	78fb      	ldrb	r3, [r7, #3]
 8008664:	b2db      	uxtb	r3, r3
 8008666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800866a:	2b80      	cmp	r3, #128	@ 0x80
 800866c:	d0ef      	beq.n	800864e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800866e:	4b20      	ldr	r3, [pc, #128]	@ (80086f0 <xPortStartScheduler+0xd8>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f1c3 0307 	rsb	r3, r3, #7
 8008676:	2b04      	cmp	r3, #4
 8008678:	d00b      	beq.n	8008692 <xPortStartScheduler+0x7a>
	__asm volatile
 800867a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800867e:	f383 8811 	msr	BASEPRI, r3
 8008682:	f3bf 8f6f 	isb	sy
 8008686:	f3bf 8f4f 	dsb	sy
 800868a:	60bb      	str	r3, [r7, #8]
}
 800868c:	bf00      	nop
 800868e:	bf00      	nop
 8008690:	e7fd      	b.n	800868e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008692:	4b17      	ldr	r3, [pc, #92]	@ (80086f0 <xPortStartScheduler+0xd8>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	021b      	lsls	r3, r3, #8
 8008698:	4a15      	ldr	r2, [pc, #84]	@ (80086f0 <xPortStartScheduler+0xd8>)
 800869a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800869c:	4b14      	ldr	r3, [pc, #80]	@ (80086f0 <xPortStartScheduler+0xd8>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80086a4:	4a12      	ldr	r2, [pc, #72]	@ (80086f0 <xPortStartScheduler+0xd8>)
 80086a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	b2da      	uxtb	r2, r3
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80086b0:	4b10      	ldr	r3, [pc, #64]	@ (80086f4 <xPortStartScheduler+0xdc>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a0f      	ldr	r2, [pc, #60]	@ (80086f4 <xPortStartScheduler+0xdc>)
 80086b6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80086ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80086bc:	4b0d      	ldr	r3, [pc, #52]	@ (80086f4 <xPortStartScheduler+0xdc>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a0c      	ldr	r2, [pc, #48]	@ (80086f4 <xPortStartScheduler+0xdc>)
 80086c2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80086c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80086c8:	f000 f8b8 	bl	800883c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80086cc:	4b0a      	ldr	r3, [pc, #40]	@ (80086f8 <xPortStartScheduler+0xe0>)
 80086ce:	2200      	movs	r2, #0
 80086d0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80086d2:	f7ff ff91 	bl	80085f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80086d6:	f7ff fa91 	bl	8007bfc <vTaskSwitchContext>
	prvTaskExitError();
 80086da:	f7ff ff4b 	bl	8008574 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3710      	adds	r7, #16
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	e000e400 	.word	0xe000e400
 80086ec:	20000790 	.word	0x20000790
 80086f0:	20000794 	.word	0x20000794
 80086f4:	e000ed20 	.word	0xe000ed20
 80086f8:	20000088 	.word	0x20000088

080086fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
	__asm volatile
 8008702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008706:	f383 8811 	msr	BASEPRI, r3
 800870a:	f3bf 8f6f 	isb	sy
 800870e:	f3bf 8f4f 	dsb	sy
 8008712:	607b      	str	r3, [r7, #4]
}
 8008714:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008716:	4b0f      	ldr	r3, [pc, #60]	@ (8008754 <vPortEnterCritical+0x58>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	3301      	adds	r3, #1
 800871c:	4a0d      	ldr	r2, [pc, #52]	@ (8008754 <vPortEnterCritical+0x58>)
 800871e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008720:	4b0c      	ldr	r3, [pc, #48]	@ (8008754 <vPortEnterCritical+0x58>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	2b01      	cmp	r3, #1
 8008726:	d110      	bne.n	800874a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008728:	4b0b      	ldr	r3, [pc, #44]	@ (8008758 <vPortEnterCritical+0x5c>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	b2db      	uxtb	r3, r3
 800872e:	2b00      	cmp	r3, #0
 8008730:	d00b      	beq.n	800874a <vPortEnterCritical+0x4e>
	__asm volatile
 8008732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008736:	f383 8811 	msr	BASEPRI, r3
 800873a:	f3bf 8f6f 	isb	sy
 800873e:	f3bf 8f4f 	dsb	sy
 8008742:	603b      	str	r3, [r7, #0]
}
 8008744:	bf00      	nop
 8008746:	bf00      	nop
 8008748:	e7fd      	b.n	8008746 <vPortEnterCritical+0x4a>
	}
}
 800874a:	bf00      	nop
 800874c:	370c      	adds	r7, #12
 800874e:	46bd      	mov	sp, r7
 8008750:	bc80      	pop	{r7}
 8008752:	4770      	bx	lr
 8008754:	20000088 	.word	0x20000088
 8008758:	e000ed04 	.word	0xe000ed04

0800875c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008762:	4b12      	ldr	r3, [pc, #72]	@ (80087ac <vPortExitCritical+0x50>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d10b      	bne.n	8008782 <vPortExitCritical+0x26>
	__asm volatile
 800876a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800876e:	f383 8811 	msr	BASEPRI, r3
 8008772:	f3bf 8f6f 	isb	sy
 8008776:	f3bf 8f4f 	dsb	sy
 800877a:	607b      	str	r3, [r7, #4]
}
 800877c:	bf00      	nop
 800877e:	bf00      	nop
 8008780:	e7fd      	b.n	800877e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008782:	4b0a      	ldr	r3, [pc, #40]	@ (80087ac <vPortExitCritical+0x50>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	3b01      	subs	r3, #1
 8008788:	4a08      	ldr	r2, [pc, #32]	@ (80087ac <vPortExitCritical+0x50>)
 800878a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800878c:	4b07      	ldr	r3, [pc, #28]	@ (80087ac <vPortExitCritical+0x50>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d105      	bne.n	80087a0 <vPortExitCritical+0x44>
 8008794:	2300      	movs	r3, #0
 8008796:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	f383 8811 	msr	BASEPRI, r3
}
 800879e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80087a0:	bf00      	nop
 80087a2:	370c      	adds	r7, #12
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bc80      	pop	{r7}
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop
 80087ac:	20000088 	.word	0x20000088

080087b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80087b0:	f3ef 8009 	mrs	r0, PSP
 80087b4:	f3bf 8f6f 	isb	sy
 80087b8:	4b0d      	ldr	r3, [pc, #52]	@ (80087f0 <pxCurrentTCBConst>)
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80087c0:	6010      	str	r0, [r2, #0]
 80087c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80087c6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80087ca:	f380 8811 	msr	BASEPRI, r0
 80087ce:	f7ff fa15 	bl	8007bfc <vTaskSwitchContext>
 80087d2:	f04f 0000 	mov.w	r0, #0
 80087d6:	f380 8811 	msr	BASEPRI, r0
 80087da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80087de:	6819      	ldr	r1, [r3, #0]
 80087e0:	6808      	ldr	r0, [r1, #0]
 80087e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80087e6:	f380 8809 	msr	PSP, r0
 80087ea:	f3bf 8f6f 	isb	sy
 80087ee:	4770      	bx	lr

080087f0 <pxCurrentTCBConst>:
 80087f0:	2000065c 	.word	0x2000065c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80087f4:	bf00      	nop
 80087f6:	bf00      	nop

080087f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
	__asm volatile
 80087fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008802:	f383 8811 	msr	BASEPRI, r3
 8008806:	f3bf 8f6f 	isb	sy
 800880a:	f3bf 8f4f 	dsb	sy
 800880e:	607b      	str	r3, [r7, #4]
}
 8008810:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008812:	f7ff f939 	bl	8007a88 <xTaskIncrementTick>
 8008816:	4603      	mov	r3, r0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d003      	beq.n	8008824 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800881c:	4b06      	ldr	r3, [pc, #24]	@ (8008838 <SysTick_Handler+0x40>)
 800881e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008822:	601a      	str	r2, [r3, #0]
 8008824:	2300      	movs	r3, #0
 8008826:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	f383 8811 	msr	BASEPRI, r3
}
 800882e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008830:	bf00      	nop
 8008832:	3708      	adds	r7, #8
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}
 8008838:	e000ed04 	.word	0xe000ed04

0800883c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800883c:	b480      	push	{r7}
 800883e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008840:	4b0a      	ldr	r3, [pc, #40]	@ (800886c <vPortSetupTimerInterrupt+0x30>)
 8008842:	2200      	movs	r2, #0
 8008844:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008846:	4b0a      	ldr	r3, [pc, #40]	@ (8008870 <vPortSetupTimerInterrupt+0x34>)
 8008848:	2200      	movs	r2, #0
 800884a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800884c:	4b09      	ldr	r3, [pc, #36]	@ (8008874 <vPortSetupTimerInterrupt+0x38>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a09      	ldr	r2, [pc, #36]	@ (8008878 <vPortSetupTimerInterrupt+0x3c>)
 8008852:	fba2 2303 	umull	r2, r3, r2, r3
 8008856:	099b      	lsrs	r3, r3, #6
 8008858:	4a08      	ldr	r2, [pc, #32]	@ (800887c <vPortSetupTimerInterrupt+0x40>)
 800885a:	3b01      	subs	r3, #1
 800885c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800885e:	4b03      	ldr	r3, [pc, #12]	@ (800886c <vPortSetupTimerInterrupt+0x30>)
 8008860:	2207      	movs	r2, #7
 8008862:	601a      	str	r2, [r3, #0]
}
 8008864:	bf00      	nop
 8008866:	46bd      	mov	sp, r7
 8008868:	bc80      	pop	{r7}
 800886a:	4770      	bx	lr
 800886c:	e000e010 	.word	0xe000e010
 8008870:	e000e018 	.word	0xe000e018
 8008874:	2000007c 	.word	0x2000007c
 8008878:	10624dd3 	.word	0x10624dd3
 800887c:	e000e014 	.word	0xe000e014

08008880 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008880:	b480      	push	{r7}
 8008882:	b085      	sub	sp, #20
 8008884:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008886:	f3ef 8305 	mrs	r3, IPSR
 800888a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2b0f      	cmp	r3, #15
 8008890:	d915      	bls.n	80088be <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008892:	4a17      	ldr	r2, [pc, #92]	@ (80088f0 <vPortValidateInterruptPriority+0x70>)
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	4413      	add	r3, r2
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800889c:	4b15      	ldr	r3, [pc, #84]	@ (80088f4 <vPortValidateInterruptPriority+0x74>)
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	7afa      	ldrb	r2, [r7, #11]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d20b      	bcs.n	80088be <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80088a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088aa:	f383 8811 	msr	BASEPRI, r3
 80088ae:	f3bf 8f6f 	isb	sy
 80088b2:	f3bf 8f4f 	dsb	sy
 80088b6:	607b      	str	r3, [r7, #4]
}
 80088b8:	bf00      	nop
 80088ba:	bf00      	nop
 80088bc:	e7fd      	b.n	80088ba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80088be:	4b0e      	ldr	r3, [pc, #56]	@ (80088f8 <vPortValidateInterruptPriority+0x78>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80088c6:	4b0d      	ldr	r3, [pc, #52]	@ (80088fc <vPortValidateInterruptPriority+0x7c>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d90b      	bls.n	80088e6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80088ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088d2:	f383 8811 	msr	BASEPRI, r3
 80088d6:	f3bf 8f6f 	isb	sy
 80088da:	f3bf 8f4f 	dsb	sy
 80088de:	603b      	str	r3, [r7, #0]
}
 80088e0:	bf00      	nop
 80088e2:	bf00      	nop
 80088e4:	e7fd      	b.n	80088e2 <vPortValidateInterruptPriority+0x62>
	}
 80088e6:	bf00      	nop
 80088e8:	3714      	adds	r7, #20
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bc80      	pop	{r7}
 80088ee:	4770      	bx	lr
 80088f0:	e000e3f0 	.word	0xe000e3f0
 80088f4:	20000790 	.word	0x20000790
 80088f8:	e000ed0c 	.word	0xe000ed0c
 80088fc:	20000794 	.word	0x20000794

08008900 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b08a      	sub	sp, #40	@ 0x28
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008908:	2300      	movs	r3, #0
 800890a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800890c:	f7ff f802 	bl	8007914 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008910:	4b5c      	ldr	r3, [pc, #368]	@ (8008a84 <pvPortMalloc+0x184>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d101      	bne.n	800891c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008918:	f000 f924 	bl	8008b64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800891c:	4b5a      	ldr	r3, [pc, #360]	@ (8008a88 <pvPortMalloc+0x188>)
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4013      	ands	r3, r2
 8008924:	2b00      	cmp	r3, #0
 8008926:	f040 8095 	bne.w	8008a54 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d01e      	beq.n	800896e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008930:	2208      	movs	r2, #8
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	4413      	add	r3, r2
 8008936:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f003 0307 	and.w	r3, r3, #7
 800893e:	2b00      	cmp	r3, #0
 8008940:	d015      	beq.n	800896e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f023 0307 	bic.w	r3, r3, #7
 8008948:	3308      	adds	r3, #8
 800894a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f003 0307 	and.w	r3, r3, #7
 8008952:	2b00      	cmp	r3, #0
 8008954:	d00b      	beq.n	800896e <pvPortMalloc+0x6e>
	__asm volatile
 8008956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800895a:	f383 8811 	msr	BASEPRI, r3
 800895e:	f3bf 8f6f 	isb	sy
 8008962:	f3bf 8f4f 	dsb	sy
 8008966:	617b      	str	r3, [r7, #20]
}
 8008968:	bf00      	nop
 800896a:	bf00      	nop
 800896c:	e7fd      	b.n	800896a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d06f      	beq.n	8008a54 <pvPortMalloc+0x154>
 8008974:	4b45      	ldr	r3, [pc, #276]	@ (8008a8c <pvPortMalloc+0x18c>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	429a      	cmp	r2, r3
 800897c:	d86a      	bhi.n	8008a54 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800897e:	4b44      	ldr	r3, [pc, #272]	@ (8008a90 <pvPortMalloc+0x190>)
 8008980:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008982:	4b43      	ldr	r3, [pc, #268]	@ (8008a90 <pvPortMalloc+0x190>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008988:	e004      	b.n	8008994 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800898a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800898c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800898e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	429a      	cmp	r2, r3
 800899c:	d903      	bls.n	80089a6 <pvPortMalloc+0xa6>
 800899e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d1f1      	bne.n	800898a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80089a6:	4b37      	ldr	r3, [pc, #220]	@ (8008a84 <pvPortMalloc+0x184>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d051      	beq.n	8008a54 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80089b0:	6a3b      	ldr	r3, [r7, #32]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2208      	movs	r2, #8
 80089b6:	4413      	add	r3, r2
 80089b8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80089ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	6a3b      	ldr	r3, [r7, #32]
 80089c0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80089c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c4:	685a      	ldr	r2, [r3, #4]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	1ad2      	subs	r2, r2, r3
 80089ca:	2308      	movs	r3, #8
 80089cc:	005b      	lsls	r3, r3, #1
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d920      	bls.n	8008a14 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80089d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	4413      	add	r3, r2
 80089d8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089da:	69bb      	ldr	r3, [r7, #24]
 80089dc:	f003 0307 	and.w	r3, r3, #7
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d00b      	beq.n	80089fc <pvPortMalloc+0xfc>
	__asm volatile
 80089e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089e8:	f383 8811 	msr	BASEPRI, r3
 80089ec:	f3bf 8f6f 	isb	sy
 80089f0:	f3bf 8f4f 	dsb	sy
 80089f4:	613b      	str	r3, [r7, #16]
}
 80089f6:	bf00      	nop
 80089f8:	bf00      	nop
 80089fa:	e7fd      	b.n	80089f8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80089fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089fe:	685a      	ldr	r2, [r3, #4]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	1ad2      	subs	r2, r2, r3
 8008a04:	69bb      	ldr	r3, [r7, #24]
 8008a06:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a0a:	687a      	ldr	r2, [r7, #4]
 8008a0c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a0e:	69b8      	ldr	r0, [r7, #24]
 8008a10:	f000 f90a 	bl	8008c28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a14:	4b1d      	ldr	r3, [pc, #116]	@ (8008a8c <pvPortMalloc+0x18c>)
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	1ad3      	subs	r3, r2, r3
 8008a1e:	4a1b      	ldr	r2, [pc, #108]	@ (8008a8c <pvPortMalloc+0x18c>)
 8008a20:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a22:	4b1a      	ldr	r3, [pc, #104]	@ (8008a8c <pvPortMalloc+0x18c>)
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	4b1b      	ldr	r3, [pc, #108]	@ (8008a94 <pvPortMalloc+0x194>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d203      	bcs.n	8008a36 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a2e:	4b17      	ldr	r3, [pc, #92]	@ (8008a8c <pvPortMalloc+0x18c>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a18      	ldr	r2, [pc, #96]	@ (8008a94 <pvPortMalloc+0x194>)
 8008a34:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a38:	685a      	ldr	r2, [r3, #4]
 8008a3a:	4b13      	ldr	r3, [pc, #76]	@ (8008a88 <pvPortMalloc+0x188>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	431a      	orrs	r2, r3
 8008a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a42:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a46:	2200      	movs	r2, #0
 8008a48:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008a4a:	4b13      	ldr	r3, [pc, #76]	@ (8008a98 <pvPortMalloc+0x198>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	3301      	adds	r3, #1
 8008a50:	4a11      	ldr	r2, [pc, #68]	@ (8008a98 <pvPortMalloc+0x198>)
 8008a52:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a54:	f7fe ff6c 	bl	8007930 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a58:	69fb      	ldr	r3, [r7, #28]
 8008a5a:	f003 0307 	and.w	r3, r3, #7
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d00b      	beq.n	8008a7a <pvPortMalloc+0x17a>
	__asm volatile
 8008a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a66:	f383 8811 	msr	BASEPRI, r3
 8008a6a:	f3bf 8f6f 	isb	sy
 8008a6e:	f3bf 8f4f 	dsb	sy
 8008a72:	60fb      	str	r3, [r7, #12]
}
 8008a74:	bf00      	nop
 8008a76:	bf00      	nop
 8008a78:	e7fd      	b.n	8008a76 <pvPortMalloc+0x176>
	return pvReturn;
 8008a7a:	69fb      	ldr	r3, [r7, #28]
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3728      	adds	r7, #40	@ 0x28
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}
 8008a84:	200047a0 	.word	0x200047a0
 8008a88:	200047b4 	.word	0x200047b4
 8008a8c:	200047a4 	.word	0x200047a4
 8008a90:	20004798 	.word	0x20004798
 8008a94:	200047a8 	.word	0x200047a8
 8008a98:	200047ac 	.word	0x200047ac

08008a9c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b086      	sub	sp, #24
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d04f      	beq.n	8008b4e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008aae:	2308      	movs	r3, #8
 8008ab0:	425b      	negs	r3, r3
 8008ab2:	697a      	ldr	r2, [r7, #20]
 8008ab4:	4413      	add	r3, r2
 8008ab6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	685a      	ldr	r2, [r3, #4]
 8008ac0:	4b25      	ldr	r3, [pc, #148]	@ (8008b58 <vPortFree+0xbc>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4013      	ands	r3, r2
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d10b      	bne.n	8008ae2 <vPortFree+0x46>
	__asm volatile
 8008aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ace:	f383 8811 	msr	BASEPRI, r3
 8008ad2:	f3bf 8f6f 	isb	sy
 8008ad6:	f3bf 8f4f 	dsb	sy
 8008ada:	60fb      	str	r3, [r7, #12]
}
 8008adc:	bf00      	nop
 8008ade:	bf00      	nop
 8008ae0:	e7fd      	b.n	8008ade <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d00b      	beq.n	8008b02 <vPortFree+0x66>
	__asm volatile
 8008aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aee:	f383 8811 	msr	BASEPRI, r3
 8008af2:	f3bf 8f6f 	isb	sy
 8008af6:	f3bf 8f4f 	dsb	sy
 8008afa:	60bb      	str	r3, [r7, #8]
}
 8008afc:	bf00      	nop
 8008afe:	bf00      	nop
 8008b00:	e7fd      	b.n	8008afe <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	685a      	ldr	r2, [r3, #4]
 8008b06:	4b14      	ldr	r3, [pc, #80]	@ (8008b58 <vPortFree+0xbc>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4013      	ands	r3, r2
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d01e      	beq.n	8008b4e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d11a      	bne.n	8008b4e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	685a      	ldr	r2, [r3, #4]
 8008b1c:	4b0e      	ldr	r3, [pc, #56]	@ (8008b58 <vPortFree+0xbc>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	43db      	mvns	r3, r3
 8008b22:	401a      	ands	r2, r3
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008b28:	f7fe fef4 	bl	8007914 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	685a      	ldr	r2, [r3, #4]
 8008b30:	4b0a      	ldr	r3, [pc, #40]	@ (8008b5c <vPortFree+0xc0>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4413      	add	r3, r2
 8008b36:	4a09      	ldr	r2, [pc, #36]	@ (8008b5c <vPortFree+0xc0>)
 8008b38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b3a:	6938      	ldr	r0, [r7, #16]
 8008b3c:	f000 f874 	bl	8008c28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008b40:	4b07      	ldr	r3, [pc, #28]	@ (8008b60 <vPortFree+0xc4>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	3301      	adds	r3, #1
 8008b46:	4a06      	ldr	r2, [pc, #24]	@ (8008b60 <vPortFree+0xc4>)
 8008b48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008b4a:	f7fe fef1 	bl	8007930 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b4e:	bf00      	nop
 8008b50:	3718      	adds	r7, #24
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop
 8008b58:	200047b4 	.word	0x200047b4
 8008b5c:	200047a4 	.word	0x200047a4
 8008b60:	200047b0 	.word	0x200047b0

08008b64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b64:	b480      	push	{r7}
 8008b66:	b085      	sub	sp, #20
 8008b68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b6a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008b6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008b70:	4b27      	ldr	r3, [pc, #156]	@ (8008c10 <prvHeapInit+0xac>)
 8008b72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f003 0307 	and.w	r3, r3, #7
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d00c      	beq.n	8008b98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	3307      	adds	r3, #7
 8008b82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f023 0307 	bic.w	r3, r3, #7
 8008b8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b8c:	68ba      	ldr	r2, [r7, #8]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	1ad3      	subs	r3, r2, r3
 8008b92:	4a1f      	ldr	r2, [pc, #124]	@ (8008c10 <prvHeapInit+0xac>)
 8008b94:	4413      	add	r3, r2
 8008b96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b9c:	4a1d      	ldr	r2, [pc, #116]	@ (8008c14 <prvHeapInit+0xb0>)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008ba2:	4b1c      	ldr	r3, [pc, #112]	@ (8008c14 <prvHeapInit+0xb0>)
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	68ba      	ldr	r2, [r7, #8]
 8008bac:	4413      	add	r3, r2
 8008bae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008bb0:	2208      	movs	r2, #8
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	1a9b      	subs	r3, r3, r2
 8008bb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f023 0307 	bic.w	r3, r3, #7
 8008bbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	4a15      	ldr	r2, [pc, #84]	@ (8008c18 <prvHeapInit+0xb4>)
 8008bc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008bc6:	4b14      	ldr	r3, [pc, #80]	@ (8008c18 <prvHeapInit+0xb4>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008bce:	4b12      	ldr	r3, [pc, #72]	@ (8008c18 <prvHeapInit+0xb4>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	68fa      	ldr	r2, [r7, #12]
 8008bde:	1ad2      	subs	r2, r2, r3
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008be4:	4b0c      	ldr	r3, [pc, #48]	@ (8008c18 <prvHeapInit+0xb4>)
 8008be6:	681a      	ldr	r2, [r3, #0]
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	4a0a      	ldr	r2, [pc, #40]	@ (8008c1c <prvHeapInit+0xb8>)
 8008bf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	4a09      	ldr	r2, [pc, #36]	@ (8008c20 <prvHeapInit+0xbc>)
 8008bfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008bfc:	4b09      	ldr	r3, [pc, #36]	@ (8008c24 <prvHeapInit+0xc0>)
 8008bfe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008c02:	601a      	str	r2, [r3, #0]
}
 8008c04:	bf00      	nop
 8008c06:	3714      	adds	r7, #20
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bc80      	pop	{r7}
 8008c0c:	4770      	bx	lr
 8008c0e:	bf00      	nop
 8008c10:	20000798 	.word	0x20000798
 8008c14:	20004798 	.word	0x20004798
 8008c18:	200047a0 	.word	0x200047a0
 8008c1c:	200047a8 	.word	0x200047a8
 8008c20:	200047a4 	.word	0x200047a4
 8008c24:	200047b4 	.word	0x200047b4

08008c28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b085      	sub	sp, #20
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c30:	4b27      	ldr	r3, [pc, #156]	@ (8008cd0 <prvInsertBlockIntoFreeList+0xa8>)
 8008c32:	60fb      	str	r3, [r7, #12]
 8008c34:	e002      	b.n	8008c3c <prvInsertBlockIntoFreeList+0x14>
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	60fb      	str	r3, [r7, #12]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d8f7      	bhi.n	8008c36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	68ba      	ldr	r2, [r7, #8]
 8008c50:	4413      	add	r3, r2
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d108      	bne.n	8008c6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	685a      	ldr	r2, [r3, #4]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	441a      	add	r2, r3
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	68ba      	ldr	r2, [r7, #8]
 8008c74:	441a      	add	r2, r3
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d118      	bne.n	8008cb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	4b14      	ldr	r3, [pc, #80]	@ (8008cd4 <prvInsertBlockIntoFreeList+0xac>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d00d      	beq.n	8008ca6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	685a      	ldr	r2, [r3, #4]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	441a      	add	r2, r3
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	601a      	str	r2, [r3, #0]
 8008ca4:	e008      	b.n	8008cb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8008cd4 <prvInsertBlockIntoFreeList+0xac>)
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	601a      	str	r2, [r3, #0]
 8008cae:	e003      	b.n	8008cb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008cb8:	68fa      	ldr	r2, [r7, #12]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d002      	beq.n	8008cc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cc6:	bf00      	nop
 8008cc8:	3714      	adds	r7, #20
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bc80      	pop	{r7}
 8008cce:	4770      	bx	lr
 8008cd0:	20004798 	.word	0x20004798
 8008cd4:	200047a0 	.word	0x200047a0

08008cd8 <_strtol_l.constprop.0>:
 8008cd8:	2b24      	cmp	r3, #36	@ 0x24
 8008cda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cde:	4686      	mov	lr, r0
 8008ce0:	4690      	mov	r8, r2
 8008ce2:	d801      	bhi.n	8008ce8 <_strtol_l.constprop.0+0x10>
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d106      	bne.n	8008cf6 <_strtol_l.constprop.0+0x1e>
 8008ce8:	f000 fed0 	bl	8009a8c <__errno>
 8008cec:	2316      	movs	r3, #22
 8008cee:	6003      	str	r3, [r0, #0]
 8008cf0:	2000      	movs	r0, #0
 8008cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cf6:	460d      	mov	r5, r1
 8008cf8:	4833      	ldr	r0, [pc, #204]	@ (8008dc8 <_strtol_l.constprop.0+0xf0>)
 8008cfa:	462a      	mov	r2, r5
 8008cfc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d00:	5d06      	ldrb	r6, [r0, r4]
 8008d02:	f016 0608 	ands.w	r6, r6, #8
 8008d06:	d1f8      	bne.n	8008cfa <_strtol_l.constprop.0+0x22>
 8008d08:	2c2d      	cmp	r4, #45	@ 0x2d
 8008d0a:	d12d      	bne.n	8008d68 <_strtol_l.constprop.0+0x90>
 8008d0c:	2601      	movs	r6, #1
 8008d0e:	782c      	ldrb	r4, [r5, #0]
 8008d10:	1c95      	adds	r5, r2, #2
 8008d12:	f033 0210 	bics.w	r2, r3, #16
 8008d16:	d109      	bne.n	8008d2c <_strtol_l.constprop.0+0x54>
 8008d18:	2c30      	cmp	r4, #48	@ 0x30
 8008d1a:	d12a      	bne.n	8008d72 <_strtol_l.constprop.0+0x9a>
 8008d1c:	782a      	ldrb	r2, [r5, #0]
 8008d1e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008d22:	2a58      	cmp	r2, #88	@ 0x58
 8008d24:	d125      	bne.n	8008d72 <_strtol_l.constprop.0+0x9a>
 8008d26:	2310      	movs	r3, #16
 8008d28:	786c      	ldrb	r4, [r5, #1]
 8008d2a:	3502      	adds	r5, #2
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008d32:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008d36:	fbbc f9f3 	udiv	r9, ip, r3
 8008d3a:	4610      	mov	r0, r2
 8008d3c:	fb03 ca19 	mls	sl, r3, r9, ip
 8008d40:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008d44:	2f09      	cmp	r7, #9
 8008d46:	d81b      	bhi.n	8008d80 <_strtol_l.constprop.0+0xa8>
 8008d48:	463c      	mov	r4, r7
 8008d4a:	42a3      	cmp	r3, r4
 8008d4c:	dd27      	ble.n	8008d9e <_strtol_l.constprop.0+0xc6>
 8008d4e:	1c57      	adds	r7, r2, #1
 8008d50:	d007      	beq.n	8008d62 <_strtol_l.constprop.0+0x8a>
 8008d52:	4581      	cmp	r9, r0
 8008d54:	d320      	bcc.n	8008d98 <_strtol_l.constprop.0+0xc0>
 8008d56:	d101      	bne.n	8008d5c <_strtol_l.constprop.0+0x84>
 8008d58:	45a2      	cmp	sl, r4
 8008d5a:	db1d      	blt.n	8008d98 <_strtol_l.constprop.0+0xc0>
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	fb00 4003 	mla	r0, r0, r3, r4
 8008d62:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d66:	e7eb      	b.n	8008d40 <_strtol_l.constprop.0+0x68>
 8008d68:	2c2b      	cmp	r4, #43	@ 0x2b
 8008d6a:	bf04      	itt	eq
 8008d6c:	782c      	ldrbeq	r4, [r5, #0]
 8008d6e:	1c95      	addeq	r5, r2, #2
 8008d70:	e7cf      	b.n	8008d12 <_strtol_l.constprop.0+0x3a>
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d1da      	bne.n	8008d2c <_strtol_l.constprop.0+0x54>
 8008d76:	2c30      	cmp	r4, #48	@ 0x30
 8008d78:	bf0c      	ite	eq
 8008d7a:	2308      	moveq	r3, #8
 8008d7c:	230a      	movne	r3, #10
 8008d7e:	e7d5      	b.n	8008d2c <_strtol_l.constprop.0+0x54>
 8008d80:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008d84:	2f19      	cmp	r7, #25
 8008d86:	d801      	bhi.n	8008d8c <_strtol_l.constprop.0+0xb4>
 8008d88:	3c37      	subs	r4, #55	@ 0x37
 8008d8a:	e7de      	b.n	8008d4a <_strtol_l.constprop.0+0x72>
 8008d8c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008d90:	2f19      	cmp	r7, #25
 8008d92:	d804      	bhi.n	8008d9e <_strtol_l.constprop.0+0xc6>
 8008d94:	3c57      	subs	r4, #87	@ 0x57
 8008d96:	e7d8      	b.n	8008d4a <_strtol_l.constprop.0+0x72>
 8008d98:	f04f 32ff 	mov.w	r2, #4294967295
 8008d9c:	e7e1      	b.n	8008d62 <_strtol_l.constprop.0+0x8a>
 8008d9e:	1c53      	adds	r3, r2, #1
 8008da0:	d108      	bne.n	8008db4 <_strtol_l.constprop.0+0xdc>
 8008da2:	2322      	movs	r3, #34	@ 0x22
 8008da4:	4660      	mov	r0, ip
 8008da6:	f8ce 3000 	str.w	r3, [lr]
 8008daa:	f1b8 0f00 	cmp.w	r8, #0
 8008dae:	d0a0      	beq.n	8008cf2 <_strtol_l.constprop.0+0x1a>
 8008db0:	1e69      	subs	r1, r5, #1
 8008db2:	e006      	b.n	8008dc2 <_strtol_l.constprop.0+0xea>
 8008db4:	b106      	cbz	r6, 8008db8 <_strtol_l.constprop.0+0xe0>
 8008db6:	4240      	negs	r0, r0
 8008db8:	f1b8 0f00 	cmp.w	r8, #0
 8008dbc:	d099      	beq.n	8008cf2 <_strtol_l.constprop.0+0x1a>
 8008dbe:	2a00      	cmp	r2, #0
 8008dc0:	d1f6      	bne.n	8008db0 <_strtol_l.constprop.0+0xd8>
 8008dc2:	f8c8 1000 	str.w	r1, [r8]
 8008dc6:	e794      	b.n	8008cf2 <_strtol_l.constprop.0+0x1a>
 8008dc8:	0800bd63 	.word	0x0800bd63

08008dcc <strtol>:
 8008dcc:	4613      	mov	r3, r2
 8008dce:	460a      	mov	r2, r1
 8008dd0:	4601      	mov	r1, r0
 8008dd2:	4802      	ldr	r0, [pc, #8]	@ (8008ddc <strtol+0x10>)
 8008dd4:	6800      	ldr	r0, [r0, #0]
 8008dd6:	f7ff bf7f 	b.w	8008cd8 <_strtol_l.constprop.0>
 8008dda:	bf00      	nop
 8008ddc:	20000098 	.word	0x20000098

08008de0 <__cvt>:
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008de6:	461d      	mov	r5, r3
 8008de8:	bfbb      	ittet	lt
 8008dea:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8008dee:	461d      	movlt	r5, r3
 8008df0:	2300      	movge	r3, #0
 8008df2:	232d      	movlt	r3, #45	@ 0x2d
 8008df4:	b088      	sub	sp, #32
 8008df6:	4614      	mov	r4, r2
 8008df8:	bfb8      	it	lt
 8008dfa:	4614      	movlt	r4, r2
 8008dfc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008dfe:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8008e00:	7013      	strb	r3, [r2, #0]
 8008e02:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008e04:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8008e08:	f023 0820 	bic.w	r8, r3, #32
 8008e0c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008e10:	d005      	beq.n	8008e1e <__cvt+0x3e>
 8008e12:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008e16:	d100      	bne.n	8008e1a <__cvt+0x3a>
 8008e18:	3601      	adds	r6, #1
 8008e1a:	2302      	movs	r3, #2
 8008e1c:	e000      	b.n	8008e20 <__cvt+0x40>
 8008e1e:	2303      	movs	r3, #3
 8008e20:	aa07      	add	r2, sp, #28
 8008e22:	9204      	str	r2, [sp, #16]
 8008e24:	aa06      	add	r2, sp, #24
 8008e26:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008e2a:	e9cd 3600 	strd	r3, r6, [sp]
 8008e2e:	4622      	mov	r2, r4
 8008e30:	462b      	mov	r3, r5
 8008e32:	f000 fefd 	bl	8009c30 <_dtoa_r>
 8008e36:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008e3a:	4607      	mov	r7, r0
 8008e3c:	d119      	bne.n	8008e72 <__cvt+0x92>
 8008e3e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008e40:	07db      	lsls	r3, r3, #31
 8008e42:	d50e      	bpl.n	8008e62 <__cvt+0x82>
 8008e44:	eb00 0906 	add.w	r9, r0, r6
 8008e48:	2200      	movs	r2, #0
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	4620      	mov	r0, r4
 8008e4e:	4629      	mov	r1, r5
 8008e50:	f7f7 fdaa 	bl	80009a8 <__aeabi_dcmpeq>
 8008e54:	b108      	cbz	r0, 8008e5a <__cvt+0x7a>
 8008e56:	f8cd 901c 	str.w	r9, [sp, #28]
 8008e5a:	2230      	movs	r2, #48	@ 0x30
 8008e5c:	9b07      	ldr	r3, [sp, #28]
 8008e5e:	454b      	cmp	r3, r9
 8008e60:	d31e      	bcc.n	8008ea0 <__cvt+0xc0>
 8008e62:	4638      	mov	r0, r7
 8008e64:	9b07      	ldr	r3, [sp, #28]
 8008e66:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008e68:	1bdb      	subs	r3, r3, r7
 8008e6a:	6013      	str	r3, [r2, #0]
 8008e6c:	b008      	add	sp, #32
 8008e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e72:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008e76:	eb00 0906 	add.w	r9, r0, r6
 8008e7a:	d1e5      	bne.n	8008e48 <__cvt+0x68>
 8008e7c:	7803      	ldrb	r3, [r0, #0]
 8008e7e:	2b30      	cmp	r3, #48	@ 0x30
 8008e80:	d10a      	bne.n	8008e98 <__cvt+0xb8>
 8008e82:	2200      	movs	r2, #0
 8008e84:	2300      	movs	r3, #0
 8008e86:	4620      	mov	r0, r4
 8008e88:	4629      	mov	r1, r5
 8008e8a:	f7f7 fd8d 	bl	80009a8 <__aeabi_dcmpeq>
 8008e8e:	b918      	cbnz	r0, 8008e98 <__cvt+0xb8>
 8008e90:	f1c6 0601 	rsb	r6, r6, #1
 8008e94:	f8ca 6000 	str.w	r6, [sl]
 8008e98:	f8da 3000 	ldr.w	r3, [sl]
 8008e9c:	4499      	add	r9, r3
 8008e9e:	e7d3      	b.n	8008e48 <__cvt+0x68>
 8008ea0:	1c59      	adds	r1, r3, #1
 8008ea2:	9107      	str	r1, [sp, #28]
 8008ea4:	701a      	strb	r2, [r3, #0]
 8008ea6:	e7d9      	b.n	8008e5c <__cvt+0x7c>

08008ea8 <__exponent>:
 8008ea8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008eaa:	2900      	cmp	r1, #0
 8008eac:	bfb6      	itet	lt
 8008eae:	232d      	movlt	r3, #45	@ 0x2d
 8008eb0:	232b      	movge	r3, #43	@ 0x2b
 8008eb2:	4249      	neglt	r1, r1
 8008eb4:	2909      	cmp	r1, #9
 8008eb6:	7002      	strb	r2, [r0, #0]
 8008eb8:	7043      	strb	r3, [r0, #1]
 8008eba:	dd29      	ble.n	8008f10 <__exponent+0x68>
 8008ebc:	f10d 0307 	add.w	r3, sp, #7
 8008ec0:	461d      	mov	r5, r3
 8008ec2:	270a      	movs	r7, #10
 8008ec4:	fbb1 f6f7 	udiv	r6, r1, r7
 8008ec8:	461a      	mov	r2, r3
 8008eca:	fb07 1416 	mls	r4, r7, r6, r1
 8008ece:	3430      	adds	r4, #48	@ 0x30
 8008ed0:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008ed4:	460c      	mov	r4, r1
 8008ed6:	2c63      	cmp	r4, #99	@ 0x63
 8008ed8:	4631      	mov	r1, r6
 8008eda:	f103 33ff 	add.w	r3, r3, #4294967295
 8008ede:	dcf1      	bgt.n	8008ec4 <__exponent+0x1c>
 8008ee0:	3130      	adds	r1, #48	@ 0x30
 8008ee2:	1e94      	subs	r4, r2, #2
 8008ee4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008ee8:	4623      	mov	r3, r4
 8008eea:	1c41      	adds	r1, r0, #1
 8008eec:	42ab      	cmp	r3, r5
 8008eee:	d30a      	bcc.n	8008f06 <__exponent+0x5e>
 8008ef0:	f10d 0309 	add.w	r3, sp, #9
 8008ef4:	1a9b      	subs	r3, r3, r2
 8008ef6:	42ac      	cmp	r4, r5
 8008ef8:	bf88      	it	hi
 8008efa:	2300      	movhi	r3, #0
 8008efc:	3302      	adds	r3, #2
 8008efe:	4403      	add	r3, r0
 8008f00:	1a18      	subs	r0, r3, r0
 8008f02:	b003      	add	sp, #12
 8008f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f06:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008f0a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008f0e:	e7ed      	b.n	8008eec <__exponent+0x44>
 8008f10:	2330      	movs	r3, #48	@ 0x30
 8008f12:	3130      	adds	r1, #48	@ 0x30
 8008f14:	7083      	strb	r3, [r0, #2]
 8008f16:	70c1      	strb	r1, [r0, #3]
 8008f18:	1d03      	adds	r3, r0, #4
 8008f1a:	e7f1      	b.n	8008f00 <__exponent+0x58>

08008f1c <_printf_float>:
 8008f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f20:	b091      	sub	sp, #68	@ 0x44
 8008f22:	460c      	mov	r4, r1
 8008f24:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8008f28:	4616      	mov	r6, r2
 8008f2a:	461f      	mov	r7, r3
 8008f2c:	4605      	mov	r5, r0
 8008f2e:	f000 fd0d 	bl	800994c <_localeconv_r>
 8008f32:	6803      	ldr	r3, [r0, #0]
 8008f34:	4618      	mov	r0, r3
 8008f36:	9308      	str	r3, [sp, #32]
 8008f38:	f7f7 f90a 	bl	8000150 <strlen>
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	930e      	str	r3, [sp, #56]	@ 0x38
 8008f40:	f8d8 3000 	ldr.w	r3, [r8]
 8008f44:	9009      	str	r0, [sp, #36]	@ 0x24
 8008f46:	3307      	adds	r3, #7
 8008f48:	f023 0307 	bic.w	r3, r3, #7
 8008f4c:	f103 0208 	add.w	r2, r3, #8
 8008f50:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008f54:	f8d4 b000 	ldr.w	fp, [r4]
 8008f58:	f8c8 2000 	str.w	r2, [r8]
 8008f5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f60:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008f64:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f66:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8008f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8008f6e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008f72:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008f76:	4b9c      	ldr	r3, [pc, #624]	@ (80091e8 <_printf_float+0x2cc>)
 8008f78:	f7f7 fd48 	bl	8000a0c <__aeabi_dcmpun>
 8008f7c:	bb70      	cbnz	r0, 8008fdc <_printf_float+0xc0>
 8008f7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008f82:	f04f 32ff 	mov.w	r2, #4294967295
 8008f86:	4b98      	ldr	r3, [pc, #608]	@ (80091e8 <_printf_float+0x2cc>)
 8008f88:	f7f7 fd22 	bl	80009d0 <__aeabi_dcmple>
 8008f8c:	bb30      	cbnz	r0, 8008fdc <_printf_float+0xc0>
 8008f8e:	2200      	movs	r2, #0
 8008f90:	2300      	movs	r3, #0
 8008f92:	4640      	mov	r0, r8
 8008f94:	4649      	mov	r1, r9
 8008f96:	f7f7 fd11 	bl	80009bc <__aeabi_dcmplt>
 8008f9a:	b110      	cbz	r0, 8008fa2 <_printf_float+0x86>
 8008f9c:	232d      	movs	r3, #45	@ 0x2d
 8008f9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008fa2:	4a92      	ldr	r2, [pc, #584]	@ (80091ec <_printf_float+0x2d0>)
 8008fa4:	4b92      	ldr	r3, [pc, #584]	@ (80091f0 <_printf_float+0x2d4>)
 8008fa6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008faa:	bf94      	ite	ls
 8008fac:	4690      	movls	r8, r2
 8008fae:	4698      	movhi	r8, r3
 8008fb0:	2303      	movs	r3, #3
 8008fb2:	f04f 0900 	mov.w	r9, #0
 8008fb6:	6123      	str	r3, [r4, #16]
 8008fb8:	f02b 0304 	bic.w	r3, fp, #4
 8008fbc:	6023      	str	r3, [r4, #0]
 8008fbe:	4633      	mov	r3, r6
 8008fc0:	4621      	mov	r1, r4
 8008fc2:	4628      	mov	r0, r5
 8008fc4:	9700      	str	r7, [sp, #0]
 8008fc6:	aa0f      	add	r2, sp, #60	@ 0x3c
 8008fc8:	f000 f9d4 	bl	8009374 <_printf_common>
 8008fcc:	3001      	adds	r0, #1
 8008fce:	f040 8090 	bne.w	80090f2 <_printf_float+0x1d6>
 8008fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd6:	b011      	add	sp, #68	@ 0x44
 8008fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fdc:	4642      	mov	r2, r8
 8008fde:	464b      	mov	r3, r9
 8008fe0:	4640      	mov	r0, r8
 8008fe2:	4649      	mov	r1, r9
 8008fe4:	f7f7 fd12 	bl	8000a0c <__aeabi_dcmpun>
 8008fe8:	b148      	cbz	r0, 8008ffe <_printf_float+0xe2>
 8008fea:	464b      	mov	r3, r9
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	bfb8      	it	lt
 8008ff0:	232d      	movlt	r3, #45	@ 0x2d
 8008ff2:	4a80      	ldr	r2, [pc, #512]	@ (80091f4 <_printf_float+0x2d8>)
 8008ff4:	bfb8      	it	lt
 8008ff6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008ffa:	4b7f      	ldr	r3, [pc, #508]	@ (80091f8 <_printf_float+0x2dc>)
 8008ffc:	e7d3      	b.n	8008fa6 <_printf_float+0x8a>
 8008ffe:	6863      	ldr	r3, [r4, #4]
 8009000:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8009004:	1c5a      	adds	r2, r3, #1
 8009006:	d13f      	bne.n	8009088 <_printf_float+0x16c>
 8009008:	2306      	movs	r3, #6
 800900a:	6063      	str	r3, [r4, #4]
 800900c:	2200      	movs	r2, #0
 800900e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8009012:	6023      	str	r3, [r4, #0]
 8009014:	9206      	str	r2, [sp, #24]
 8009016:	aa0e      	add	r2, sp, #56	@ 0x38
 8009018:	e9cd a204 	strd	sl, r2, [sp, #16]
 800901c:	aa0d      	add	r2, sp, #52	@ 0x34
 800901e:	9203      	str	r2, [sp, #12]
 8009020:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8009024:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009028:	6863      	ldr	r3, [r4, #4]
 800902a:	4642      	mov	r2, r8
 800902c:	9300      	str	r3, [sp, #0]
 800902e:	4628      	mov	r0, r5
 8009030:	464b      	mov	r3, r9
 8009032:	910a      	str	r1, [sp, #40]	@ 0x28
 8009034:	f7ff fed4 	bl	8008de0 <__cvt>
 8009038:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800903a:	4680      	mov	r8, r0
 800903c:	2947      	cmp	r1, #71	@ 0x47
 800903e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009040:	d128      	bne.n	8009094 <_printf_float+0x178>
 8009042:	1cc8      	adds	r0, r1, #3
 8009044:	db02      	blt.n	800904c <_printf_float+0x130>
 8009046:	6863      	ldr	r3, [r4, #4]
 8009048:	4299      	cmp	r1, r3
 800904a:	dd40      	ble.n	80090ce <_printf_float+0x1b2>
 800904c:	f1aa 0a02 	sub.w	sl, sl, #2
 8009050:	fa5f fa8a 	uxtb.w	sl, sl
 8009054:	4652      	mov	r2, sl
 8009056:	3901      	subs	r1, #1
 8009058:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800905c:	910d      	str	r1, [sp, #52]	@ 0x34
 800905e:	f7ff ff23 	bl	8008ea8 <__exponent>
 8009062:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009064:	4681      	mov	r9, r0
 8009066:	1813      	adds	r3, r2, r0
 8009068:	2a01      	cmp	r2, #1
 800906a:	6123      	str	r3, [r4, #16]
 800906c:	dc02      	bgt.n	8009074 <_printf_float+0x158>
 800906e:	6822      	ldr	r2, [r4, #0]
 8009070:	07d2      	lsls	r2, r2, #31
 8009072:	d501      	bpl.n	8009078 <_printf_float+0x15c>
 8009074:	3301      	adds	r3, #1
 8009076:	6123      	str	r3, [r4, #16]
 8009078:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800907c:	2b00      	cmp	r3, #0
 800907e:	d09e      	beq.n	8008fbe <_printf_float+0xa2>
 8009080:	232d      	movs	r3, #45	@ 0x2d
 8009082:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009086:	e79a      	b.n	8008fbe <_printf_float+0xa2>
 8009088:	2947      	cmp	r1, #71	@ 0x47
 800908a:	d1bf      	bne.n	800900c <_printf_float+0xf0>
 800908c:	2b00      	cmp	r3, #0
 800908e:	d1bd      	bne.n	800900c <_printf_float+0xf0>
 8009090:	2301      	movs	r3, #1
 8009092:	e7ba      	b.n	800900a <_printf_float+0xee>
 8009094:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009098:	d9dc      	bls.n	8009054 <_printf_float+0x138>
 800909a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800909e:	d118      	bne.n	80090d2 <_printf_float+0x1b6>
 80090a0:	2900      	cmp	r1, #0
 80090a2:	6863      	ldr	r3, [r4, #4]
 80090a4:	dd0b      	ble.n	80090be <_printf_float+0x1a2>
 80090a6:	6121      	str	r1, [r4, #16]
 80090a8:	b913      	cbnz	r3, 80090b0 <_printf_float+0x194>
 80090aa:	6822      	ldr	r2, [r4, #0]
 80090ac:	07d0      	lsls	r0, r2, #31
 80090ae:	d502      	bpl.n	80090b6 <_printf_float+0x19a>
 80090b0:	3301      	adds	r3, #1
 80090b2:	440b      	add	r3, r1
 80090b4:	6123      	str	r3, [r4, #16]
 80090b6:	f04f 0900 	mov.w	r9, #0
 80090ba:	65a1      	str	r1, [r4, #88]	@ 0x58
 80090bc:	e7dc      	b.n	8009078 <_printf_float+0x15c>
 80090be:	b913      	cbnz	r3, 80090c6 <_printf_float+0x1aa>
 80090c0:	6822      	ldr	r2, [r4, #0]
 80090c2:	07d2      	lsls	r2, r2, #31
 80090c4:	d501      	bpl.n	80090ca <_printf_float+0x1ae>
 80090c6:	3302      	adds	r3, #2
 80090c8:	e7f4      	b.n	80090b4 <_printf_float+0x198>
 80090ca:	2301      	movs	r3, #1
 80090cc:	e7f2      	b.n	80090b4 <_printf_float+0x198>
 80090ce:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80090d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80090d4:	4299      	cmp	r1, r3
 80090d6:	db05      	blt.n	80090e4 <_printf_float+0x1c8>
 80090d8:	6823      	ldr	r3, [r4, #0]
 80090da:	6121      	str	r1, [r4, #16]
 80090dc:	07d8      	lsls	r0, r3, #31
 80090de:	d5ea      	bpl.n	80090b6 <_printf_float+0x19a>
 80090e0:	1c4b      	adds	r3, r1, #1
 80090e2:	e7e7      	b.n	80090b4 <_printf_float+0x198>
 80090e4:	2900      	cmp	r1, #0
 80090e6:	bfcc      	ite	gt
 80090e8:	2201      	movgt	r2, #1
 80090ea:	f1c1 0202 	rsble	r2, r1, #2
 80090ee:	4413      	add	r3, r2
 80090f0:	e7e0      	b.n	80090b4 <_printf_float+0x198>
 80090f2:	6823      	ldr	r3, [r4, #0]
 80090f4:	055a      	lsls	r2, r3, #21
 80090f6:	d407      	bmi.n	8009108 <_printf_float+0x1ec>
 80090f8:	6923      	ldr	r3, [r4, #16]
 80090fa:	4642      	mov	r2, r8
 80090fc:	4631      	mov	r1, r6
 80090fe:	4628      	mov	r0, r5
 8009100:	47b8      	blx	r7
 8009102:	3001      	adds	r0, #1
 8009104:	d12b      	bne.n	800915e <_printf_float+0x242>
 8009106:	e764      	b.n	8008fd2 <_printf_float+0xb6>
 8009108:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800910c:	f240 80dc 	bls.w	80092c8 <_printf_float+0x3ac>
 8009110:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009114:	2200      	movs	r2, #0
 8009116:	2300      	movs	r3, #0
 8009118:	f7f7 fc46 	bl	80009a8 <__aeabi_dcmpeq>
 800911c:	2800      	cmp	r0, #0
 800911e:	d033      	beq.n	8009188 <_printf_float+0x26c>
 8009120:	2301      	movs	r3, #1
 8009122:	4631      	mov	r1, r6
 8009124:	4628      	mov	r0, r5
 8009126:	4a35      	ldr	r2, [pc, #212]	@ (80091fc <_printf_float+0x2e0>)
 8009128:	47b8      	blx	r7
 800912a:	3001      	adds	r0, #1
 800912c:	f43f af51 	beq.w	8008fd2 <_printf_float+0xb6>
 8009130:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8009134:	4543      	cmp	r3, r8
 8009136:	db02      	blt.n	800913e <_printf_float+0x222>
 8009138:	6823      	ldr	r3, [r4, #0]
 800913a:	07d8      	lsls	r0, r3, #31
 800913c:	d50f      	bpl.n	800915e <_printf_float+0x242>
 800913e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009142:	4631      	mov	r1, r6
 8009144:	4628      	mov	r0, r5
 8009146:	47b8      	blx	r7
 8009148:	3001      	adds	r0, #1
 800914a:	f43f af42 	beq.w	8008fd2 <_printf_float+0xb6>
 800914e:	f04f 0900 	mov.w	r9, #0
 8009152:	f108 38ff 	add.w	r8, r8, #4294967295
 8009156:	f104 0a1a 	add.w	sl, r4, #26
 800915a:	45c8      	cmp	r8, r9
 800915c:	dc09      	bgt.n	8009172 <_printf_float+0x256>
 800915e:	6823      	ldr	r3, [r4, #0]
 8009160:	079b      	lsls	r3, r3, #30
 8009162:	f100 8102 	bmi.w	800936a <_printf_float+0x44e>
 8009166:	68e0      	ldr	r0, [r4, #12]
 8009168:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800916a:	4298      	cmp	r0, r3
 800916c:	bfb8      	it	lt
 800916e:	4618      	movlt	r0, r3
 8009170:	e731      	b.n	8008fd6 <_printf_float+0xba>
 8009172:	2301      	movs	r3, #1
 8009174:	4652      	mov	r2, sl
 8009176:	4631      	mov	r1, r6
 8009178:	4628      	mov	r0, r5
 800917a:	47b8      	blx	r7
 800917c:	3001      	adds	r0, #1
 800917e:	f43f af28 	beq.w	8008fd2 <_printf_float+0xb6>
 8009182:	f109 0901 	add.w	r9, r9, #1
 8009186:	e7e8      	b.n	800915a <_printf_float+0x23e>
 8009188:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800918a:	2b00      	cmp	r3, #0
 800918c:	dc38      	bgt.n	8009200 <_printf_float+0x2e4>
 800918e:	2301      	movs	r3, #1
 8009190:	4631      	mov	r1, r6
 8009192:	4628      	mov	r0, r5
 8009194:	4a19      	ldr	r2, [pc, #100]	@ (80091fc <_printf_float+0x2e0>)
 8009196:	47b8      	blx	r7
 8009198:	3001      	adds	r0, #1
 800919a:	f43f af1a 	beq.w	8008fd2 <_printf_float+0xb6>
 800919e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80091a2:	ea59 0303 	orrs.w	r3, r9, r3
 80091a6:	d102      	bne.n	80091ae <_printf_float+0x292>
 80091a8:	6823      	ldr	r3, [r4, #0]
 80091aa:	07d9      	lsls	r1, r3, #31
 80091ac:	d5d7      	bpl.n	800915e <_printf_float+0x242>
 80091ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80091b2:	4631      	mov	r1, r6
 80091b4:	4628      	mov	r0, r5
 80091b6:	47b8      	blx	r7
 80091b8:	3001      	adds	r0, #1
 80091ba:	f43f af0a 	beq.w	8008fd2 <_printf_float+0xb6>
 80091be:	f04f 0a00 	mov.w	sl, #0
 80091c2:	f104 0b1a 	add.w	fp, r4, #26
 80091c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80091c8:	425b      	negs	r3, r3
 80091ca:	4553      	cmp	r3, sl
 80091cc:	dc01      	bgt.n	80091d2 <_printf_float+0x2b6>
 80091ce:	464b      	mov	r3, r9
 80091d0:	e793      	b.n	80090fa <_printf_float+0x1de>
 80091d2:	2301      	movs	r3, #1
 80091d4:	465a      	mov	r2, fp
 80091d6:	4631      	mov	r1, r6
 80091d8:	4628      	mov	r0, r5
 80091da:	47b8      	blx	r7
 80091dc:	3001      	adds	r0, #1
 80091de:	f43f aef8 	beq.w	8008fd2 <_printf_float+0xb6>
 80091e2:	f10a 0a01 	add.w	sl, sl, #1
 80091e6:	e7ee      	b.n	80091c6 <_printf_float+0x2aa>
 80091e8:	7fefffff 	.word	0x7fefffff
 80091ec:	0800be63 	.word	0x0800be63
 80091f0:	0800be67 	.word	0x0800be67
 80091f4:	0800be6b 	.word	0x0800be6b
 80091f8:	0800be6f 	.word	0x0800be6f
 80091fc:	0800be73 	.word	0x0800be73
 8009200:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009202:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009206:	4553      	cmp	r3, sl
 8009208:	bfa8      	it	ge
 800920a:	4653      	movge	r3, sl
 800920c:	2b00      	cmp	r3, #0
 800920e:	4699      	mov	r9, r3
 8009210:	dc36      	bgt.n	8009280 <_printf_float+0x364>
 8009212:	f04f 0b00 	mov.w	fp, #0
 8009216:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800921a:	f104 021a 	add.w	r2, r4, #26
 800921e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009220:	930a      	str	r3, [sp, #40]	@ 0x28
 8009222:	eba3 0309 	sub.w	r3, r3, r9
 8009226:	455b      	cmp	r3, fp
 8009228:	dc31      	bgt.n	800928e <_printf_float+0x372>
 800922a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800922c:	459a      	cmp	sl, r3
 800922e:	dc3a      	bgt.n	80092a6 <_printf_float+0x38a>
 8009230:	6823      	ldr	r3, [r4, #0]
 8009232:	07da      	lsls	r2, r3, #31
 8009234:	d437      	bmi.n	80092a6 <_printf_float+0x38a>
 8009236:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009238:	ebaa 0903 	sub.w	r9, sl, r3
 800923c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800923e:	ebaa 0303 	sub.w	r3, sl, r3
 8009242:	4599      	cmp	r9, r3
 8009244:	bfa8      	it	ge
 8009246:	4699      	movge	r9, r3
 8009248:	f1b9 0f00 	cmp.w	r9, #0
 800924c:	dc33      	bgt.n	80092b6 <_printf_float+0x39a>
 800924e:	f04f 0800 	mov.w	r8, #0
 8009252:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009256:	f104 0b1a 	add.w	fp, r4, #26
 800925a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800925c:	ebaa 0303 	sub.w	r3, sl, r3
 8009260:	eba3 0309 	sub.w	r3, r3, r9
 8009264:	4543      	cmp	r3, r8
 8009266:	f77f af7a 	ble.w	800915e <_printf_float+0x242>
 800926a:	2301      	movs	r3, #1
 800926c:	465a      	mov	r2, fp
 800926e:	4631      	mov	r1, r6
 8009270:	4628      	mov	r0, r5
 8009272:	47b8      	blx	r7
 8009274:	3001      	adds	r0, #1
 8009276:	f43f aeac 	beq.w	8008fd2 <_printf_float+0xb6>
 800927a:	f108 0801 	add.w	r8, r8, #1
 800927e:	e7ec      	b.n	800925a <_printf_float+0x33e>
 8009280:	4642      	mov	r2, r8
 8009282:	4631      	mov	r1, r6
 8009284:	4628      	mov	r0, r5
 8009286:	47b8      	blx	r7
 8009288:	3001      	adds	r0, #1
 800928a:	d1c2      	bne.n	8009212 <_printf_float+0x2f6>
 800928c:	e6a1      	b.n	8008fd2 <_printf_float+0xb6>
 800928e:	2301      	movs	r3, #1
 8009290:	4631      	mov	r1, r6
 8009292:	4628      	mov	r0, r5
 8009294:	920a      	str	r2, [sp, #40]	@ 0x28
 8009296:	47b8      	blx	r7
 8009298:	3001      	adds	r0, #1
 800929a:	f43f ae9a 	beq.w	8008fd2 <_printf_float+0xb6>
 800929e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80092a0:	f10b 0b01 	add.w	fp, fp, #1
 80092a4:	e7bb      	b.n	800921e <_printf_float+0x302>
 80092a6:	4631      	mov	r1, r6
 80092a8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80092ac:	4628      	mov	r0, r5
 80092ae:	47b8      	blx	r7
 80092b0:	3001      	adds	r0, #1
 80092b2:	d1c0      	bne.n	8009236 <_printf_float+0x31a>
 80092b4:	e68d      	b.n	8008fd2 <_printf_float+0xb6>
 80092b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80092b8:	464b      	mov	r3, r9
 80092ba:	4631      	mov	r1, r6
 80092bc:	4628      	mov	r0, r5
 80092be:	4442      	add	r2, r8
 80092c0:	47b8      	blx	r7
 80092c2:	3001      	adds	r0, #1
 80092c4:	d1c3      	bne.n	800924e <_printf_float+0x332>
 80092c6:	e684      	b.n	8008fd2 <_printf_float+0xb6>
 80092c8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80092cc:	f1ba 0f01 	cmp.w	sl, #1
 80092d0:	dc01      	bgt.n	80092d6 <_printf_float+0x3ba>
 80092d2:	07db      	lsls	r3, r3, #31
 80092d4:	d536      	bpl.n	8009344 <_printf_float+0x428>
 80092d6:	2301      	movs	r3, #1
 80092d8:	4642      	mov	r2, r8
 80092da:	4631      	mov	r1, r6
 80092dc:	4628      	mov	r0, r5
 80092de:	47b8      	blx	r7
 80092e0:	3001      	adds	r0, #1
 80092e2:	f43f ae76 	beq.w	8008fd2 <_printf_float+0xb6>
 80092e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80092ea:	4631      	mov	r1, r6
 80092ec:	4628      	mov	r0, r5
 80092ee:	47b8      	blx	r7
 80092f0:	3001      	adds	r0, #1
 80092f2:	f43f ae6e 	beq.w	8008fd2 <_printf_float+0xb6>
 80092f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80092fa:	2200      	movs	r2, #0
 80092fc:	2300      	movs	r3, #0
 80092fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009302:	f7f7 fb51 	bl	80009a8 <__aeabi_dcmpeq>
 8009306:	b9c0      	cbnz	r0, 800933a <_printf_float+0x41e>
 8009308:	4653      	mov	r3, sl
 800930a:	f108 0201 	add.w	r2, r8, #1
 800930e:	4631      	mov	r1, r6
 8009310:	4628      	mov	r0, r5
 8009312:	47b8      	blx	r7
 8009314:	3001      	adds	r0, #1
 8009316:	d10c      	bne.n	8009332 <_printf_float+0x416>
 8009318:	e65b      	b.n	8008fd2 <_printf_float+0xb6>
 800931a:	2301      	movs	r3, #1
 800931c:	465a      	mov	r2, fp
 800931e:	4631      	mov	r1, r6
 8009320:	4628      	mov	r0, r5
 8009322:	47b8      	blx	r7
 8009324:	3001      	adds	r0, #1
 8009326:	f43f ae54 	beq.w	8008fd2 <_printf_float+0xb6>
 800932a:	f108 0801 	add.w	r8, r8, #1
 800932e:	45d0      	cmp	r8, sl
 8009330:	dbf3      	blt.n	800931a <_printf_float+0x3fe>
 8009332:	464b      	mov	r3, r9
 8009334:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009338:	e6e0      	b.n	80090fc <_printf_float+0x1e0>
 800933a:	f04f 0800 	mov.w	r8, #0
 800933e:	f104 0b1a 	add.w	fp, r4, #26
 8009342:	e7f4      	b.n	800932e <_printf_float+0x412>
 8009344:	2301      	movs	r3, #1
 8009346:	4642      	mov	r2, r8
 8009348:	e7e1      	b.n	800930e <_printf_float+0x3f2>
 800934a:	2301      	movs	r3, #1
 800934c:	464a      	mov	r2, r9
 800934e:	4631      	mov	r1, r6
 8009350:	4628      	mov	r0, r5
 8009352:	47b8      	blx	r7
 8009354:	3001      	adds	r0, #1
 8009356:	f43f ae3c 	beq.w	8008fd2 <_printf_float+0xb6>
 800935a:	f108 0801 	add.w	r8, r8, #1
 800935e:	68e3      	ldr	r3, [r4, #12]
 8009360:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009362:	1a5b      	subs	r3, r3, r1
 8009364:	4543      	cmp	r3, r8
 8009366:	dcf0      	bgt.n	800934a <_printf_float+0x42e>
 8009368:	e6fd      	b.n	8009166 <_printf_float+0x24a>
 800936a:	f04f 0800 	mov.w	r8, #0
 800936e:	f104 0919 	add.w	r9, r4, #25
 8009372:	e7f4      	b.n	800935e <_printf_float+0x442>

08009374 <_printf_common>:
 8009374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009378:	4616      	mov	r6, r2
 800937a:	4698      	mov	r8, r3
 800937c:	688a      	ldr	r2, [r1, #8]
 800937e:	690b      	ldr	r3, [r1, #16]
 8009380:	4607      	mov	r7, r0
 8009382:	4293      	cmp	r3, r2
 8009384:	bfb8      	it	lt
 8009386:	4613      	movlt	r3, r2
 8009388:	6033      	str	r3, [r6, #0]
 800938a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800938e:	460c      	mov	r4, r1
 8009390:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009394:	b10a      	cbz	r2, 800939a <_printf_common+0x26>
 8009396:	3301      	adds	r3, #1
 8009398:	6033      	str	r3, [r6, #0]
 800939a:	6823      	ldr	r3, [r4, #0]
 800939c:	0699      	lsls	r1, r3, #26
 800939e:	bf42      	ittt	mi
 80093a0:	6833      	ldrmi	r3, [r6, #0]
 80093a2:	3302      	addmi	r3, #2
 80093a4:	6033      	strmi	r3, [r6, #0]
 80093a6:	6825      	ldr	r5, [r4, #0]
 80093a8:	f015 0506 	ands.w	r5, r5, #6
 80093ac:	d106      	bne.n	80093bc <_printf_common+0x48>
 80093ae:	f104 0a19 	add.w	sl, r4, #25
 80093b2:	68e3      	ldr	r3, [r4, #12]
 80093b4:	6832      	ldr	r2, [r6, #0]
 80093b6:	1a9b      	subs	r3, r3, r2
 80093b8:	42ab      	cmp	r3, r5
 80093ba:	dc2b      	bgt.n	8009414 <_printf_common+0xa0>
 80093bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80093c0:	6822      	ldr	r2, [r4, #0]
 80093c2:	3b00      	subs	r3, #0
 80093c4:	bf18      	it	ne
 80093c6:	2301      	movne	r3, #1
 80093c8:	0692      	lsls	r2, r2, #26
 80093ca:	d430      	bmi.n	800942e <_printf_common+0xba>
 80093cc:	4641      	mov	r1, r8
 80093ce:	4638      	mov	r0, r7
 80093d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80093d4:	47c8      	blx	r9
 80093d6:	3001      	adds	r0, #1
 80093d8:	d023      	beq.n	8009422 <_printf_common+0xae>
 80093da:	6823      	ldr	r3, [r4, #0]
 80093dc:	6922      	ldr	r2, [r4, #16]
 80093de:	f003 0306 	and.w	r3, r3, #6
 80093e2:	2b04      	cmp	r3, #4
 80093e4:	bf14      	ite	ne
 80093e6:	2500      	movne	r5, #0
 80093e8:	6833      	ldreq	r3, [r6, #0]
 80093ea:	f04f 0600 	mov.w	r6, #0
 80093ee:	bf08      	it	eq
 80093f0:	68e5      	ldreq	r5, [r4, #12]
 80093f2:	f104 041a 	add.w	r4, r4, #26
 80093f6:	bf08      	it	eq
 80093f8:	1aed      	subeq	r5, r5, r3
 80093fa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80093fe:	bf08      	it	eq
 8009400:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009404:	4293      	cmp	r3, r2
 8009406:	bfc4      	itt	gt
 8009408:	1a9b      	subgt	r3, r3, r2
 800940a:	18ed      	addgt	r5, r5, r3
 800940c:	42b5      	cmp	r5, r6
 800940e:	d11a      	bne.n	8009446 <_printf_common+0xd2>
 8009410:	2000      	movs	r0, #0
 8009412:	e008      	b.n	8009426 <_printf_common+0xb2>
 8009414:	2301      	movs	r3, #1
 8009416:	4652      	mov	r2, sl
 8009418:	4641      	mov	r1, r8
 800941a:	4638      	mov	r0, r7
 800941c:	47c8      	blx	r9
 800941e:	3001      	adds	r0, #1
 8009420:	d103      	bne.n	800942a <_printf_common+0xb6>
 8009422:	f04f 30ff 	mov.w	r0, #4294967295
 8009426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800942a:	3501      	adds	r5, #1
 800942c:	e7c1      	b.n	80093b2 <_printf_common+0x3e>
 800942e:	2030      	movs	r0, #48	@ 0x30
 8009430:	18e1      	adds	r1, r4, r3
 8009432:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009436:	1c5a      	adds	r2, r3, #1
 8009438:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800943c:	4422      	add	r2, r4
 800943e:	3302      	adds	r3, #2
 8009440:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009444:	e7c2      	b.n	80093cc <_printf_common+0x58>
 8009446:	2301      	movs	r3, #1
 8009448:	4622      	mov	r2, r4
 800944a:	4641      	mov	r1, r8
 800944c:	4638      	mov	r0, r7
 800944e:	47c8      	blx	r9
 8009450:	3001      	adds	r0, #1
 8009452:	d0e6      	beq.n	8009422 <_printf_common+0xae>
 8009454:	3601      	adds	r6, #1
 8009456:	e7d9      	b.n	800940c <_printf_common+0x98>

08009458 <_printf_i>:
 8009458:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800945c:	7e0f      	ldrb	r7, [r1, #24]
 800945e:	4691      	mov	r9, r2
 8009460:	2f78      	cmp	r7, #120	@ 0x78
 8009462:	4680      	mov	r8, r0
 8009464:	460c      	mov	r4, r1
 8009466:	469a      	mov	sl, r3
 8009468:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800946a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800946e:	d807      	bhi.n	8009480 <_printf_i+0x28>
 8009470:	2f62      	cmp	r7, #98	@ 0x62
 8009472:	d80a      	bhi.n	800948a <_printf_i+0x32>
 8009474:	2f00      	cmp	r7, #0
 8009476:	f000 80d3 	beq.w	8009620 <_printf_i+0x1c8>
 800947a:	2f58      	cmp	r7, #88	@ 0x58
 800947c:	f000 80ba 	beq.w	80095f4 <_printf_i+0x19c>
 8009480:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009484:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009488:	e03a      	b.n	8009500 <_printf_i+0xa8>
 800948a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800948e:	2b15      	cmp	r3, #21
 8009490:	d8f6      	bhi.n	8009480 <_printf_i+0x28>
 8009492:	a101      	add	r1, pc, #4	@ (adr r1, 8009498 <_printf_i+0x40>)
 8009494:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009498:	080094f1 	.word	0x080094f1
 800949c:	08009505 	.word	0x08009505
 80094a0:	08009481 	.word	0x08009481
 80094a4:	08009481 	.word	0x08009481
 80094a8:	08009481 	.word	0x08009481
 80094ac:	08009481 	.word	0x08009481
 80094b0:	08009505 	.word	0x08009505
 80094b4:	08009481 	.word	0x08009481
 80094b8:	08009481 	.word	0x08009481
 80094bc:	08009481 	.word	0x08009481
 80094c0:	08009481 	.word	0x08009481
 80094c4:	08009607 	.word	0x08009607
 80094c8:	0800952f 	.word	0x0800952f
 80094cc:	080095c1 	.word	0x080095c1
 80094d0:	08009481 	.word	0x08009481
 80094d4:	08009481 	.word	0x08009481
 80094d8:	08009629 	.word	0x08009629
 80094dc:	08009481 	.word	0x08009481
 80094e0:	0800952f 	.word	0x0800952f
 80094e4:	08009481 	.word	0x08009481
 80094e8:	08009481 	.word	0x08009481
 80094ec:	080095c9 	.word	0x080095c9
 80094f0:	6833      	ldr	r3, [r6, #0]
 80094f2:	1d1a      	adds	r2, r3, #4
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	6032      	str	r2, [r6, #0]
 80094f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80094fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009500:	2301      	movs	r3, #1
 8009502:	e09e      	b.n	8009642 <_printf_i+0x1ea>
 8009504:	6833      	ldr	r3, [r6, #0]
 8009506:	6820      	ldr	r0, [r4, #0]
 8009508:	1d19      	adds	r1, r3, #4
 800950a:	6031      	str	r1, [r6, #0]
 800950c:	0606      	lsls	r6, r0, #24
 800950e:	d501      	bpl.n	8009514 <_printf_i+0xbc>
 8009510:	681d      	ldr	r5, [r3, #0]
 8009512:	e003      	b.n	800951c <_printf_i+0xc4>
 8009514:	0645      	lsls	r5, r0, #25
 8009516:	d5fb      	bpl.n	8009510 <_printf_i+0xb8>
 8009518:	f9b3 5000 	ldrsh.w	r5, [r3]
 800951c:	2d00      	cmp	r5, #0
 800951e:	da03      	bge.n	8009528 <_printf_i+0xd0>
 8009520:	232d      	movs	r3, #45	@ 0x2d
 8009522:	426d      	negs	r5, r5
 8009524:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009528:	230a      	movs	r3, #10
 800952a:	4859      	ldr	r0, [pc, #356]	@ (8009690 <_printf_i+0x238>)
 800952c:	e011      	b.n	8009552 <_printf_i+0xfa>
 800952e:	6821      	ldr	r1, [r4, #0]
 8009530:	6833      	ldr	r3, [r6, #0]
 8009532:	0608      	lsls	r0, r1, #24
 8009534:	f853 5b04 	ldr.w	r5, [r3], #4
 8009538:	d402      	bmi.n	8009540 <_printf_i+0xe8>
 800953a:	0649      	lsls	r1, r1, #25
 800953c:	bf48      	it	mi
 800953e:	b2ad      	uxthmi	r5, r5
 8009540:	2f6f      	cmp	r7, #111	@ 0x6f
 8009542:	6033      	str	r3, [r6, #0]
 8009544:	bf14      	ite	ne
 8009546:	230a      	movne	r3, #10
 8009548:	2308      	moveq	r3, #8
 800954a:	4851      	ldr	r0, [pc, #324]	@ (8009690 <_printf_i+0x238>)
 800954c:	2100      	movs	r1, #0
 800954e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009552:	6866      	ldr	r6, [r4, #4]
 8009554:	2e00      	cmp	r6, #0
 8009556:	bfa8      	it	ge
 8009558:	6821      	ldrge	r1, [r4, #0]
 800955a:	60a6      	str	r6, [r4, #8]
 800955c:	bfa4      	itt	ge
 800955e:	f021 0104 	bicge.w	r1, r1, #4
 8009562:	6021      	strge	r1, [r4, #0]
 8009564:	b90d      	cbnz	r5, 800956a <_printf_i+0x112>
 8009566:	2e00      	cmp	r6, #0
 8009568:	d04b      	beq.n	8009602 <_printf_i+0x1aa>
 800956a:	4616      	mov	r6, r2
 800956c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009570:	fb03 5711 	mls	r7, r3, r1, r5
 8009574:	5dc7      	ldrb	r7, [r0, r7]
 8009576:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800957a:	462f      	mov	r7, r5
 800957c:	42bb      	cmp	r3, r7
 800957e:	460d      	mov	r5, r1
 8009580:	d9f4      	bls.n	800956c <_printf_i+0x114>
 8009582:	2b08      	cmp	r3, #8
 8009584:	d10b      	bne.n	800959e <_printf_i+0x146>
 8009586:	6823      	ldr	r3, [r4, #0]
 8009588:	07df      	lsls	r7, r3, #31
 800958a:	d508      	bpl.n	800959e <_printf_i+0x146>
 800958c:	6923      	ldr	r3, [r4, #16]
 800958e:	6861      	ldr	r1, [r4, #4]
 8009590:	4299      	cmp	r1, r3
 8009592:	bfde      	ittt	le
 8009594:	2330      	movle	r3, #48	@ 0x30
 8009596:	f806 3c01 	strble.w	r3, [r6, #-1]
 800959a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800959e:	1b92      	subs	r2, r2, r6
 80095a0:	6122      	str	r2, [r4, #16]
 80095a2:	464b      	mov	r3, r9
 80095a4:	4621      	mov	r1, r4
 80095a6:	4640      	mov	r0, r8
 80095a8:	f8cd a000 	str.w	sl, [sp]
 80095ac:	aa03      	add	r2, sp, #12
 80095ae:	f7ff fee1 	bl	8009374 <_printf_common>
 80095b2:	3001      	adds	r0, #1
 80095b4:	d14a      	bne.n	800964c <_printf_i+0x1f4>
 80095b6:	f04f 30ff 	mov.w	r0, #4294967295
 80095ba:	b004      	add	sp, #16
 80095bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095c0:	6823      	ldr	r3, [r4, #0]
 80095c2:	f043 0320 	orr.w	r3, r3, #32
 80095c6:	6023      	str	r3, [r4, #0]
 80095c8:	2778      	movs	r7, #120	@ 0x78
 80095ca:	4832      	ldr	r0, [pc, #200]	@ (8009694 <_printf_i+0x23c>)
 80095cc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80095d0:	6823      	ldr	r3, [r4, #0]
 80095d2:	6831      	ldr	r1, [r6, #0]
 80095d4:	061f      	lsls	r7, r3, #24
 80095d6:	f851 5b04 	ldr.w	r5, [r1], #4
 80095da:	d402      	bmi.n	80095e2 <_printf_i+0x18a>
 80095dc:	065f      	lsls	r7, r3, #25
 80095de:	bf48      	it	mi
 80095e0:	b2ad      	uxthmi	r5, r5
 80095e2:	6031      	str	r1, [r6, #0]
 80095e4:	07d9      	lsls	r1, r3, #31
 80095e6:	bf44      	itt	mi
 80095e8:	f043 0320 	orrmi.w	r3, r3, #32
 80095ec:	6023      	strmi	r3, [r4, #0]
 80095ee:	b11d      	cbz	r5, 80095f8 <_printf_i+0x1a0>
 80095f0:	2310      	movs	r3, #16
 80095f2:	e7ab      	b.n	800954c <_printf_i+0xf4>
 80095f4:	4826      	ldr	r0, [pc, #152]	@ (8009690 <_printf_i+0x238>)
 80095f6:	e7e9      	b.n	80095cc <_printf_i+0x174>
 80095f8:	6823      	ldr	r3, [r4, #0]
 80095fa:	f023 0320 	bic.w	r3, r3, #32
 80095fe:	6023      	str	r3, [r4, #0]
 8009600:	e7f6      	b.n	80095f0 <_printf_i+0x198>
 8009602:	4616      	mov	r6, r2
 8009604:	e7bd      	b.n	8009582 <_printf_i+0x12a>
 8009606:	6833      	ldr	r3, [r6, #0]
 8009608:	6825      	ldr	r5, [r4, #0]
 800960a:	1d18      	adds	r0, r3, #4
 800960c:	6961      	ldr	r1, [r4, #20]
 800960e:	6030      	str	r0, [r6, #0]
 8009610:	062e      	lsls	r6, r5, #24
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	d501      	bpl.n	800961a <_printf_i+0x1c2>
 8009616:	6019      	str	r1, [r3, #0]
 8009618:	e002      	b.n	8009620 <_printf_i+0x1c8>
 800961a:	0668      	lsls	r0, r5, #25
 800961c:	d5fb      	bpl.n	8009616 <_printf_i+0x1be>
 800961e:	8019      	strh	r1, [r3, #0]
 8009620:	2300      	movs	r3, #0
 8009622:	4616      	mov	r6, r2
 8009624:	6123      	str	r3, [r4, #16]
 8009626:	e7bc      	b.n	80095a2 <_printf_i+0x14a>
 8009628:	6833      	ldr	r3, [r6, #0]
 800962a:	2100      	movs	r1, #0
 800962c:	1d1a      	adds	r2, r3, #4
 800962e:	6032      	str	r2, [r6, #0]
 8009630:	681e      	ldr	r6, [r3, #0]
 8009632:	6862      	ldr	r2, [r4, #4]
 8009634:	4630      	mov	r0, r6
 8009636:	f000 fa56 	bl	8009ae6 <memchr>
 800963a:	b108      	cbz	r0, 8009640 <_printf_i+0x1e8>
 800963c:	1b80      	subs	r0, r0, r6
 800963e:	6060      	str	r0, [r4, #4]
 8009640:	6863      	ldr	r3, [r4, #4]
 8009642:	6123      	str	r3, [r4, #16]
 8009644:	2300      	movs	r3, #0
 8009646:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800964a:	e7aa      	b.n	80095a2 <_printf_i+0x14a>
 800964c:	4632      	mov	r2, r6
 800964e:	4649      	mov	r1, r9
 8009650:	4640      	mov	r0, r8
 8009652:	6923      	ldr	r3, [r4, #16]
 8009654:	47d0      	blx	sl
 8009656:	3001      	adds	r0, #1
 8009658:	d0ad      	beq.n	80095b6 <_printf_i+0x15e>
 800965a:	6823      	ldr	r3, [r4, #0]
 800965c:	079b      	lsls	r3, r3, #30
 800965e:	d413      	bmi.n	8009688 <_printf_i+0x230>
 8009660:	68e0      	ldr	r0, [r4, #12]
 8009662:	9b03      	ldr	r3, [sp, #12]
 8009664:	4298      	cmp	r0, r3
 8009666:	bfb8      	it	lt
 8009668:	4618      	movlt	r0, r3
 800966a:	e7a6      	b.n	80095ba <_printf_i+0x162>
 800966c:	2301      	movs	r3, #1
 800966e:	4632      	mov	r2, r6
 8009670:	4649      	mov	r1, r9
 8009672:	4640      	mov	r0, r8
 8009674:	47d0      	blx	sl
 8009676:	3001      	adds	r0, #1
 8009678:	d09d      	beq.n	80095b6 <_printf_i+0x15e>
 800967a:	3501      	adds	r5, #1
 800967c:	68e3      	ldr	r3, [r4, #12]
 800967e:	9903      	ldr	r1, [sp, #12]
 8009680:	1a5b      	subs	r3, r3, r1
 8009682:	42ab      	cmp	r3, r5
 8009684:	dcf2      	bgt.n	800966c <_printf_i+0x214>
 8009686:	e7eb      	b.n	8009660 <_printf_i+0x208>
 8009688:	2500      	movs	r5, #0
 800968a:	f104 0619 	add.w	r6, r4, #25
 800968e:	e7f5      	b.n	800967c <_printf_i+0x224>
 8009690:	0800be75 	.word	0x0800be75
 8009694:	0800be86 	.word	0x0800be86

08009698 <std>:
 8009698:	2300      	movs	r3, #0
 800969a:	b510      	push	{r4, lr}
 800969c:	4604      	mov	r4, r0
 800969e:	e9c0 3300 	strd	r3, r3, [r0]
 80096a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80096a6:	6083      	str	r3, [r0, #8]
 80096a8:	8181      	strh	r1, [r0, #12]
 80096aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80096ac:	81c2      	strh	r2, [r0, #14]
 80096ae:	6183      	str	r3, [r0, #24]
 80096b0:	4619      	mov	r1, r3
 80096b2:	2208      	movs	r2, #8
 80096b4:	305c      	adds	r0, #92	@ 0x5c
 80096b6:	f000 f92e 	bl	8009916 <memset>
 80096ba:	4b0d      	ldr	r3, [pc, #52]	@ (80096f0 <std+0x58>)
 80096bc:	6224      	str	r4, [r4, #32]
 80096be:	6263      	str	r3, [r4, #36]	@ 0x24
 80096c0:	4b0c      	ldr	r3, [pc, #48]	@ (80096f4 <std+0x5c>)
 80096c2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80096c4:	4b0c      	ldr	r3, [pc, #48]	@ (80096f8 <std+0x60>)
 80096c6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80096c8:	4b0c      	ldr	r3, [pc, #48]	@ (80096fc <std+0x64>)
 80096ca:	6323      	str	r3, [r4, #48]	@ 0x30
 80096cc:	4b0c      	ldr	r3, [pc, #48]	@ (8009700 <std+0x68>)
 80096ce:	429c      	cmp	r4, r3
 80096d0:	d006      	beq.n	80096e0 <std+0x48>
 80096d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80096d6:	4294      	cmp	r4, r2
 80096d8:	d002      	beq.n	80096e0 <std+0x48>
 80096da:	33d0      	adds	r3, #208	@ 0xd0
 80096dc:	429c      	cmp	r4, r3
 80096de:	d105      	bne.n	80096ec <std+0x54>
 80096e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80096e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096e8:	f000 b9fa 	b.w	8009ae0 <__retarget_lock_init_recursive>
 80096ec:	bd10      	pop	{r4, pc}
 80096ee:	bf00      	nop
 80096f0:	0800985d 	.word	0x0800985d
 80096f4:	0800987f 	.word	0x0800987f
 80096f8:	080098b7 	.word	0x080098b7
 80096fc:	080098db 	.word	0x080098db
 8009700:	200047b8 	.word	0x200047b8

08009704 <stdio_exit_handler>:
 8009704:	4a02      	ldr	r2, [pc, #8]	@ (8009710 <stdio_exit_handler+0xc>)
 8009706:	4903      	ldr	r1, [pc, #12]	@ (8009714 <stdio_exit_handler+0x10>)
 8009708:	4803      	ldr	r0, [pc, #12]	@ (8009718 <stdio_exit_handler+0x14>)
 800970a:	f000 b869 	b.w	80097e0 <_fwalk_sglue>
 800970e:	bf00      	nop
 8009710:	2000008c 	.word	0x2000008c
 8009714:	0800b46d 	.word	0x0800b46d
 8009718:	2000009c 	.word	0x2000009c

0800971c <cleanup_stdio>:
 800971c:	6841      	ldr	r1, [r0, #4]
 800971e:	4b0c      	ldr	r3, [pc, #48]	@ (8009750 <cleanup_stdio+0x34>)
 8009720:	b510      	push	{r4, lr}
 8009722:	4299      	cmp	r1, r3
 8009724:	4604      	mov	r4, r0
 8009726:	d001      	beq.n	800972c <cleanup_stdio+0x10>
 8009728:	f001 fea0 	bl	800b46c <_fflush_r>
 800972c:	68a1      	ldr	r1, [r4, #8]
 800972e:	4b09      	ldr	r3, [pc, #36]	@ (8009754 <cleanup_stdio+0x38>)
 8009730:	4299      	cmp	r1, r3
 8009732:	d002      	beq.n	800973a <cleanup_stdio+0x1e>
 8009734:	4620      	mov	r0, r4
 8009736:	f001 fe99 	bl	800b46c <_fflush_r>
 800973a:	68e1      	ldr	r1, [r4, #12]
 800973c:	4b06      	ldr	r3, [pc, #24]	@ (8009758 <cleanup_stdio+0x3c>)
 800973e:	4299      	cmp	r1, r3
 8009740:	d004      	beq.n	800974c <cleanup_stdio+0x30>
 8009742:	4620      	mov	r0, r4
 8009744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009748:	f001 be90 	b.w	800b46c <_fflush_r>
 800974c:	bd10      	pop	{r4, pc}
 800974e:	bf00      	nop
 8009750:	200047b8 	.word	0x200047b8
 8009754:	20004820 	.word	0x20004820
 8009758:	20004888 	.word	0x20004888

0800975c <global_stdio_init.part.0>:
 800975c:	b510      	push	{r4, lr}
 800975e:	4b0b      	ldr	r3, [pc, #44]	@ (800978c <global_stdio_init.part.0+0x30>)
 8009760:	4c0b      	ldr	r4, [pc, #44]	@ (8009790 <global_stdio_init.part.0+0x34>)
 8009762:	4a0c      	ldr	r2, [pc, #48]	@ (8009794 <global_stdio_init.part.0+0x38>)
 8009764:	4620      	mov	r0, r4
 8009766:	601a      	str	r2, [r3, #0]
 8009768:	2104      	movs	r1, #4
 800976a:	2200      	movs	r2, #0
 800976c:	f7ff ff94 	bl	8009698 <std>
 8009770:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009774:	2201      	movs	r2, #1
 8009776:	2109      	movs	r1, #9
 8009778:	f7ff ff8e 	bl	8009698 <std>
 800977c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009780:	2202      	movs	r2, #2
 8009782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009786:	2112      	movs	r1, #18
 8009788:	f7ff bf86 	b.w	8009698 <std>
 800978c:	200048f0 	.word	0x200048f0
 8009790:	200047b8 	.word	0x200047b8
 8009794:	08009705 	.word	0x08009705

08009798 <__sfp_lock_acquire>:
 8009798:	4801      	ldr	r0, [pc, #4]	@ (80097a0 <__sfp_lock_acquire+0x8>)
 800979a:	f000 b9a2 	b.w	8009ae2 <__retarget_lock_acquire_recursive>
 800979e:	bf00      	nop
 80097a0:	200048f9 	.word	0x200048f9

080097a4 <__sfp_lock_release>:
 80097a4:	4801      	ldr	r0, [pc, #4]	@ (80097ac <__sfp_lock_release+0x8>)
 80097a6:	f000 b99d 	b.w	8009ae4 <__retarget_lock_release_recursive>
 80097aa:	bf00      	nop
 80097ac:	200048f9 	.word	0x200048f9

080097b0 <__sinit>:
 80097b0:	b510      	push	{r4, lr}
 80097b2:	4604      	mov	r4, r0
 80097b4:	f7ff fff0 	bl	8009798 <__sfp_lock_acquire>
 80097b8:	6a23      	ldr	r3, [r4, #32]
 80097ba:	b11b      	cbz	r3, 80097c4 <__sinit+0x14>
 80097bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097c0:	f7ff bff0 	b.w	80097a4 <__sfp_lock_release>
 80097c4:	4b04      	ldr	r3, [pc, #16]	@ (80097d8 <__sinit+0x28>)
 80097c6:	6223      	str	r3, [r4, #32]
 80097c8:	4b04      	ldr	r3, [pc, #16]	@ (80097dc <__sinit+0x2c>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d1f5      	bne.n	80097bc <__sinit+0xc>
 80097d0:	f7ff ffc4 	bl	800975c <global_stdio_init.part.0>
 80097d4:	e7f2      	b.n	80097bc <__sinit+0xc>
 80097d6:	bf00      	nop
 80097d8:	0800971d 	.word	0x0800971d
 80097dc:	200048f0 	.word	0x200048f0

080097e0 <_fwalk_sglue>:
 80097e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097e4:	4607      	mov	r7, r0
 80097e6:	4688      	mov	r8, r1
 80097e8:	4614      	mov	r4, r2
 80097ea:	2600      	movs	r6, #0
 80097ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80097f0:	f1b9 0901 	subs.w	r9, r9, #1
 80097f4:	d505      	bpl.n	8009802 <_fwalk_sglue+0x22>
 80097f6:	6824      	ldr	r4, [r4, #0]
 80097f8:	2c00      	cmp	r4, #0
 80097fa:	d1f7      	bne.n	80097ec <_fwalk_sglue+0xc>
 80097fc:	4630      	mov	r0, r6
 80097fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009802:	89ab      	ldrh	r3, [r5, #12]
 8009804:	2b01      	cmp	r3, #1
 8009806:	d907      	bls.n	8009818 <_fwalk_sglue+0x38>
 8009808:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800980c:	3301      	adds	r3, #1
 800980e:	d003      	beq.n	8009818 <_fwalk_sglue+0x38>
 8009810:	4629      	mov	r1, r5
 8009812:	4638      	mov	r0, r7
 8009814:	47c0      	blx	r8
 8009816:	4306      	orrs	r6, r0
 8009818:	3568      	adds	r5, #104	@ 0x68
 800981a:	e7e9      	b.n	80097f0 <_fwalk_sglue+0x10>

0800981c <siprintf>:
 800981c:	b40e      	push	{r1, r2, r3}
 800981e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009822:	b500      	push	{lr}
 8009824:	b09c      	sub	sp, #112	@ 0x70
 8009826:	ab1d      	add	r3, sp, #116	@ 0x74
 8009828:	9002      	str	r0, [sp, #8]
 800982a:	9006      	str	r0, [sp, #24]
 800982c:	9107      	str	r1, [sp, #28]
 800982e:	9104      	str	r1, [sp, #16]
 8009830:	4808      	ldr	r0, [pc, #32]	@ (8009854 <siprintf+0x38>)
 8009832:	4909      	ldr	r1, [pc, #36]	@ (8009858 <siprintf+0x3c>)
 8009834:	f853 2b04 	ldr.w	r2, [r3], #4
 8009838:	9105      	str	r1, [sp, #20]
 800983a:	6800      	ldr	r0, [r0, #0]
 800983c:	a902      	add	r1, sp, #8
 800983e:	9301      	str	r3, [sp, #4]
 8009840:	f001 fc98 	bl	800b174 <_svfiprintf_r>
 8009844:	2200      	movs	r2, #0
 8009846:	9b02      	ldr	r3, [sp, #8]
 8009848:	701a      	strb	r2, [r3, #0]
 800984a:	b01c      	add	sp, #112	@ 0x70
 800984c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009850:	b003      	add	sp, #12
 8009852:	4770      	bx	lr
 8009854:	20000098 	.word	0x20000098
 8009858:	ffff0208 	.word	0xffff0208

0800985c <__sread>:
 800985c:	b510      	push	{r4, lr}
 800985e:	460c      	mov	r4, r1
 8009860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009864:	f000 f8ee 	bl	8009a44 <_read_r>
 8009868:	2800      	cmp	r0, #0
 800986a:	bfab      	itete	ge
 800986c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800986e:	89a3      	ldrhlt	r3, [r4, #12]
 8009870:	181b      	addge	r3, r3, r0
 8009872:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009876:	bfac      	ite	ge
 8009878:	6563      	strge	r3, [r4, #84]	@ 0x54
 800987a:	81a3      	strhlt	r3, [r4, #12]
 800987c:	bd10      	pop	{r4, pc}

0800987e <__swrite>:
 800987e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009882:	461f      	mov	r7, r3
 8009884:	898b      	ldrh	r3, [r1, #12]
 8009886:	4605      	mov	r5, r0
 8009888:	05db      	lsls	r3, r3, #23
 800988a:	460c      	mov	r4, r1
 800988c:	4616      	mov	r6, r2
 800988e:	d505      	bpl.n	800989c <__swrite+0x1e>
 8009890:	2302      	movs	r3, #2
 8009892:	2200      	movs	r2, #0
 8009894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009898:	f000 f8c2 	bl	8009a20 <_lseek_r>
 800989c:	89a3      	ldrh	r3, [r4, #12]
 800989e:	4632      	mov	r2, r6
 80098a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80098a4:	81a3      	strh	r3, [r4, #12]
 80098a6:	4628      	mov	r0, r5
 80098a8:	463b      	mov	r3, r7
 80098aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098b2:	f000 b8d9 	b.w	8009a68 <_write_r>

080098b6 <__sseek>:
 80098b6:	b510      	push	{r4, lr}
 80098b8:	460c      	mov	r4, r1
 80098ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098be:	f000 f8af 	bl	8009a20 <_lseek_r>
 80098c2:	1c43      	adds	r3, r0, #1
 80098c4:	89a3      	ldrh	r3, [r4, #12]
 80098c6:	bf15      	itete	ne
 80098c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80098ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80098ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80098d2:	81a3      	strheq	r3, [r4, #12]
 80098d4:	bf18      	it	ne
 80098d6:	81a3      	strhne	r3, [r4, #12]
 80098d8:	bd10      	pop	{r4, pc}

080098da <__sclose>:
 80098da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098de:	f000 b839 	b.w	8009954 <_close_r>

080098e2 <memmove>:
 80098e2:	4288      	cmp	r0, r1
 80098e4:	b510      	push	{r4, lr}
 80098e6:	eb01 0402 	add.w	r4, r1, r2
 80098ea:	d902      	bls.n	80098f2 <memmove+0x10>
 80098ec:	4284      	cmp	r4, r0
 80098ee:	4623      	mov	r3, r4
 80098f0:	d807      	bhi.n	8009902 <memmove+0x20>
 80098f2:	1e43      	subs	r3, r0, #1
 80098f4:	42a1      	cmp	r1, r4
 80098f6:	d008      	beq.n	800990a <memmove+0x28>
 80098f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098fc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009900:	e7f8      	b.n	80098f4 <memmove+0x12>
 8009902:	4601      	mov	r1, r0
 8009904:	4402      	add	r2, r0
 8009906:	428a      	cmp	r2, r1
 8009908:	d100      	bne.n	800990c <memmove+0x2a>
 800990a:	bd10      	pop	{r4, pc}
 800990c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009910:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009914:	e7f7      	b.n	8009906 <memmove+0x24>

08009916 <memset>:
 8009916:	4603      	mov	r3, r0
 8009918:	4402      	add	r2, r0
 800991a:	4293      	cmp	r3, r2
 800991c:	d100      	bne.n	8009920 <memset+0xa>
 800991e:	4770      	bx	lr
 8009920:	f803 1b01 	strb.w	r1, [r3], #1
 8009924:	e7f9      	b.n	800991a <memset+0x4>

08009926 <strncpy>:
 8009926:	4603      	mov	r3, r0
 8009928:	b510      	push	{r4, lr}
 800992a:	3901      	subs	r1, #1
 800992c:	b132      	cbz	r2, 800993c <strncpy+0x16>
 800992e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009932:	3a01      	subs	r2, #1
 8009934:	f803 4b01 	strb.w	r4, [r3], #1
 8009938:	2c00      	cmp	r4, #0
 800993a:	d1f7      	bne.n	800992c <strncpy+0x6>
 800993c:	2100      	movs	r1, #0
 800993e:	441a      	add	r2, r3
 8009940:	4293      	cmp	r3, r2
 8009942:	d100      	bne.n	8009946 <strncpy+0x20>
 8009944:	bd10      	pop	{r4, pc}
 8009946:	f803 1b01 	strb.w	r1, [r3], #1
 800994a:	e7f9      	b.n	8009940 <strncpy+0x1a>

0800994c <_localeconv_r>:
 800994c:	4800      	ldr	r0, [pc, #0]	@ (8009950 <_localeconv_r+0x4>)
 800994e:	4770      	bx	lr
 8009950:	200001d8 	.word	0x200001d8

08009954 <_close_r>:
 8009954:	b538      	push	{r3, r4, r5, lr}
 8009956:	2300      	movs	r3, #0
 8009958:	4d05      	ldr	r5, [pc, #20]	@ (8009970 <_close_r+0x1c>)
 800995a:	4604      	mov	r4, r0
 800995c:	4608      	mov	r0, r1
 800995e:	602b      	str	r3, [r5, #0]
 8009960:	f7f9 f973 	bl	8002c4a <_close>
 8009964:	1c43      	adds	r3, r0, #1
 8009966:	d102      	bne.n	800996e <_close_r+0x1a>
 8009968:	682b      	ldr	r3, [r5, #0]
 800996a:	b103      	cbz	r3, 800996e <_close_r+0x1a>
 800996c:	6023      	str	r3, [r4, #0]
 800996e:	bd38      	pop	{r3, r4, r5, pc}
 8009970:	200048f4 	.word	0x200048f4

08009974 <_reclaim_reent>:
 8009974:	4b29      	ldr	r3, [pc, #164]	@ (8009a1c <_reclaim_reent+0xa8>)
 8009976:	b570      	push	{r4, r5, r6, lr}
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4604      	mov	r4, r0
 800997c:	4283      	cmp	r3, r0
 800997e:	d04b      	beq.n	8009a18 <_reclaim_reent+0xa4>
 8009980:	69c3      	ldr	r3, [r0, #28]
 8009982:	b1ab      	cbz	r3, 80099b0 <_reclaim_reent+0x3c>
 8009984:	68db      	ldr	r3, [r3, #12]
 8009986:	b16b      	cbz	r3, 80099a4 <_reclaim_reent+0x30>
 8009988:	2500      	movs	r5, #0
 800998a:	69e3      	ldr	r3, [r4, #28]
 800998c:	68db      	ldr	r3, [r3, #12]
 800998e:	5959      	ldr	r1, [r3, r5]
 8009990:	2900      	cmp	r1, #0
 8009992:	d13b      	bne.n	8009a0c <_reclaim_reent+0x98>
 8009994:	3504      	adds	r5, #4
 8009996:	2d80      	cmp	r5, #128	@ 0x80
 8009998:	d1f7      	bne.n	800998a <_reclaim_reent+0x16>
 800999a:	69e3      	ldr	r3, [r4, #28]
 800999c:	4620      	mov	r0, r4
 800999e:	68d9      	ldr	r1, [r3, #12]
 80099a0:	f000 ff0e 	bl	800a7c0 <_free_r>
 80099a4:	69e3      	ldr	r3, [r4, #28]
 80099a6:	6819      	ldr	r1, [r3, #0]
 80099a8:	b111      	cbz	r1, 80099b0 <_reclaim_reent+0x3c>
 80099aa:	4620      	mov	r0, r4
 80099ac:	f000 ff08 	bl	800a7c0 <_free_r>
 80099b0:	6961      	ldr	r1, [r4, #20]
 80099b2:	b111      	cbz	r1, 80099ba <_reclaim_reent+0x46>
 80099b4:	4620      	mov	r0, r4
 80099b6:	f000 ff03 	bl	800a7c0 <_free_r>
 80099ba:	69e1      	ldr	r1, [r4, #28]
 80099bc:	b111      	cbz	r1, 80099c4 <_reclaim_reent+0x50>
 80099be:	4620      	mov	r0, r4
 80099c0:	f000 fefe 	bl	800a7c0 <_free_r>
 80099c4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80099c6:	b111      	cbz	r1, 80099ce <_reclaim_reent+0x5a>
 80099c8:	4620      	mov	r0, r4
 80099ca:	f000 fef9 	bl	800a7c0 <_free_r>
 80099ce:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80099d0:	b111      	cbz	r1, 80099d8 <_reclaim_reent+0x64>
 80099d2:	4620      	mov	r0, r4
 80099d4:	f000 fef4 	bl	800a7c0 <_free_r>
 80099d8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80099da:	b111      	cbz	r1, 80099e2 <_reclaim_reent+0x6e>
 80099dc:	4620      	mov	r0, r4
 80099de:	f000 feef 	bl	800a7c0 <_free_r>
 80099e2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80099e4:	b111      	cbz	r1, 80099ec <_reclaim_reent+0x78>
 80099e6:	4620      	mov	r0, r4
 80099e8:	f000 feea 	bl	800a7c0 <_free_r>
 80099ec:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80099ee:	b111      	cbz	r1, 80099f6 <_reclaim_reent+0x82>
 80099f0:	4620      	mov	r0, r4
 80099f2:	f000 fee5 	bl	800a7c0 <_free_r>
 80099f6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80099f8:	b111      	cbz	r1, 8009a00 <_reclaim_reent+0x8c>
 80099fa:	4620      	mov	r0, r4
 80099fc:	f000 fee0 	bl	800a7c0 <_free_r>
 8009a00:	6a23      	ldr	r3, [r4, #32]
 8009a02:	b14b      	cbz	r3, 8009a18 <_reclaim_reent+0xa4>
 8009a04:	4620      	mov	r0, r4
 8009a06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009a0a:	4718      	bx	r3
 8009a0c:	680e      	ldr	r6, [r1, #0]
 8009a0e:	4620      	mov	r0, r4
 8009a10:	f000 fed6 	bl	800a7c0 <_free_r>
 8009a14:	4631      	mov	r1, r6
 8009a16:	e7bb      	b.n	8009990 <_reclaim_reent+0x1c>
 8009a18:	bd70      	pop	{r4, r5, r6, pc}
 8009a1a:	bf00      	nop
 8009a1c:	20000098 	.word	0x20000098

08009a20 <_lseek_r>:
 8009a20:	b538      	push	{r3, r4, r5, lr}
 8009a22:	4604      	mov	r4, r0
 8009a24:	4608      	mov	r0, r1
 8009a26:	4611      	mov	r1, r2
 8009a28:	2200      	movs	r2, #0
 8009a2a:	4d05      	ldr	r5, [pc, #20]	@ (8009a40 <_lseek_r+0x20>)
 8009a2c:	602a      	str	r2, [r5, #0]
 8009a2e:	461a      	mov	r2, r3
 8009a30:	f7f9 f92f 	bl	8002c92 <_lseek>
 8009a34:	1c43      	adds	r3, r0, #1
 8009a36:	d102      	bne.n	8009a3e <_lseek_r+0x1e>
 8009a38:	682b      	ldr	r3, [r5, #0]
 8009a3a:	b103      	cbz	r3, 8009a3e <_lseek_r+0x1e>
 8009a3c:	6023      	str	r3, [r4, #0]
 8009a3e:	bd38      	pop	{r3, r4, r5, pc}
 8009a40:	200048f4 	.word	0x200048f4

08009a44 <_read_r>:
 8009a44:	b538      	push	{r3, r4, r5, lr}
 8009a46:	4604      	mov	r4, r0
 8009a48:	4608      	mov	r0, r1
 8009a4a:	4611      	mov	r1, r2
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	4d05      	ldr	r5, [pc, #20]	@ (8009a64 <_read_r+0x20>)
 8009a50:	602a      	str	r2, [r5, #0]
 8009a52:	461a      	mov	r2, r3
 8009a54:	f7f9 f8c0 	bl	8002bd8 <_read>
 8009a58:	1c43      	adds	r3, r0, #1
 8009a5a:	d102      	bne.n	8009a62 <_read_r+0x1e>
 8009a5c:	682b      	ldr	r3, [r5, #0]
 8009a5e:	b103      	cbz	r3, 8009a62 <_read_r+0x1e>
 8009a60:	6023      	str	r3, [r4, #0]
 8009a62:	bd38      	pop	{r3, r4, r5, pc}
 8009a64:	200048f4 	.word	0x200048f4

08009a68 <_write_r>:
 8009a68:	b538      	push	{r3, r4, r5, lr}
 8009a6a:	4604      	mov	r4, r0
 8009a6c:	4608      	mov	r0, r1
 8009a6e:	4611      	mov	r1, r2
 8009a70:	2200      	movs	r2, #0
 8009a72:	4d05      	ldr	r5, [pc, #20]	@ (8009a88 <_write_r+0x20>)
 8009a74:	602a      	str	r2, [r5, #0]
 8009a76:	461a      	mov	r2, r3
 8009a78:	f7f9 f8cb 	bl	8002c12 <_write>
 8009a7c:	1c43      	adds	r3, r0, #1
 8009a7e:	d102      	bne.n	8009a86 <_write_r+0x1e>
 8009a80:	682b      	ldr	r3, [r5, #0]
 8009a82:	b103      	cbz	r3, 8009a86 <_write_r+0x1e>
 8009a84:	6023      	str	r3, [r4, #0]
 8009a86:	bd38      	pop	{r3, r4, r5, pc}
 8009a88:	200048f4 	.word	0x200048f4

08009a8c <__errno>:
 8009a8c:	4b01      	ldr	r3, [pc, #4]	@ (8009a94 <__errno+0x8>)
 8009a8e:	6818      	ldr	r0, [r3, #0]
 8009a90:	4770      	bx	lr
 8009a92:	bf00      	nop
 8009a94:	20000098 	.word	0x20000098

08009a98 <__libc_init_array>:
 8009a98:	b570      	push	{r4, r5, r6, lr}
 8009a9a:	2600      	movs	r6, #0
 8009a9c:	4d0c      	ldr	r5, [pc, #48]	@ (8009ad0 <__libc_init_array+0x38>)
 8009a9e:	4c0d      	ldr	r4, [pc, #52]	@ (8009ad4 <__libc_init_array+0x3c>)
 8009aa0:	1b64      	subs	r4, r4, r5
 8009aa2:	10a4      	asrs	r4, r4, #2
 8009aa4:	42a6      	cmp	r6, r4
 8009aa6:	d109      	bne.n	8009abc <__libc_init_array+0x24>
 8009aa8:	f002 f854 	bl	800bb54 <_init>
 8009aac:	2600      	movs	r6, #0
 8009aae:	4d0a      	ldr	r5, [pc, #40]	@ (8009ad8 <__libc_init_array+0x40>)
 8009ab0:	4c0a      	ldr	r4, [pc, #40]	@ (8009adc <__libc_init_array+0x44>)
 8009ab2:	1b64      	subs	r4, r4, r5
 8009ab4:	10a4      	asrs	r4, r4, #2
 8009ab6:	42a6      	cmp	r6, r4
 8009ab8:	d105      	bne.n	8009ac6 <__libc_init_array+0x2e>
 8009aba:	bd70      	pop	{r4, r5, r6, pc}
 8009abc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ac0:	4798      	blx	r3
 8009ac2:	3601      	adds	r6, #1
 8009ac4:	e7ee      	b.n	8009aa4 <__libc_init_array+0xc>
 8009ac6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009aca:	4798      	blx	r3
 8009acc:	3601      	adds	r6, #1
 8009ace:	e7f2      	b.n	8009ab6 <__libc_init_array+0x1e>
 8009ad0:	0800c0e0 	.word	0x0800c0e0
 8009ad4:	0800c0e0 	.word	0x0800c0e0
 8009ad8:	0800c0e0 	.word	0x0800c0e0
 8009adc:	0800c0e4 	.word	0x0800c0e4

08009ae0 <__retarget_lock_init_recursive>:
 8009ae0:	4770      	bx	lr

08009ae2 <__retarget_lock_acquire_recursive>:
 8009ae2:	4770      	bx	lr

08009ae4 <__retarget_lock_release_recursive>:
 8009ae4:	4770      	bx	lr

08009ae6 <memchr>:
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	b510      	push	{r4, lr}
 8009aea:	b2c9      	uxtb	r1, r1
 8009aec:	4402      	add	r2, r0
 8009aee:	4293      	cmp	r3, r2
 8009af0:	4618      	mov	r0, r3
 8009af2:	d101      	bne.n	8009af8 <memchr+0x12>
 8009af4:	2000      	movs	r0, #0
 8009af6:	e003      	b.n	8009b00 <memchr+0x1a>
 8009af8:	7804      	ldrb	r4, [r0, #0]
 8009afa:	3301      	adds	r3, #1
 8009afc:	428c      	cmp	r4, r1
 8009afe:	d1f6      	bne.n	8009aee <memchr+0x8>
 8009b00:	bd10      	pop	{r4, pc}

08009b02 <memcpy>:
 8009b02:	440a      	add	r2, r1
 8009b04:	4291      	cmp	r1, r2
 8009b06:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b0a:	d100      	bne.n	8009b0e <memcpy+0xc>
 8009b0c:	4770      	bx	lr
 8009b0e:	b510      	push	{r4, lr}
 8009b10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b14:	4291      	cmp	r1, r2
 8009b16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b1a:	d1f9      	bne.n	8009b10 <memcpy+0xe>
 8009b1c:	bd10      	pop	{r4, pc}

08009b1e <quorem>:
 8009b1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b22:	6903      	ldr	r3, [r0, #16]
 8009b24:	690c      	ldr	r4, [r1, #16]
 8009b26:	4607      	mov	r7, r0
 8009b28:	42a3      	cmp	r3, r4
 8009b2a:	db7e      	blt.n	8009c2a <quorem+0x10c>
 8009b2c:	3c01      	subs	r4, #1
 8009b2e:	00a3      	lsls	r3, r4, #2
 8009b30:	f100 0514 	add.w	r5, r0, #20
 8009b34:	f101 0814 	add.w	r8, r1, #20
 8009b38:	9300      	str	r3, [sp, #0]
 8009b3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b3e:	9301      	str	r3, [sp, #4]
 8009b40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009b44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b48:	3301      	adds	r3, #1
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009b50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009b54:	d32e      	bcc.n	8009bb4 <quorem+0x96>
 8009b56:	f04f 0a00 	mov.w	sl, #0
 8009b5a:	46c4      	mov	ip, r8
 8009b5c:	46ae      	mov	lr, r5
 8009b5e:	46d3      	mov	fp, sl
 8009b60:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009b64:	b298      	uxth	r0, r3
 8009b66:	fb06 a000 	mla	r0, r6, r0, sl
 8009b6a:	0c1b      	lsrs	r3, r3, #16
 8009b6c:	0c02      	lsrs	r2, r0, #16
 8009b6e:	fb06 2303 	mla	r3, r6, r3, r2
 8009b72:	f8de 2000 	ldr.w	r2, [lr]
 8009b76:	b280      	uxth	r0, r0
 8009b78:	b292      	uxth	r2, r2
 8009b7a:	1a12      	subs	r2, r2, r0
 8009b7c:	445a      	add	r2, fp
 8009b7e:	f8de 0000 	ldr.w	r0, [lr]
 8009b82:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009b8c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009b90:	b292      	uxth	r2, r2
 8009b92:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009b96:	45e1      	cmp	r9, ip
 8009b98:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009b9c:	f84e 2b04 	str.w	r2, [lr], #4
 8009ba0:	d2de      	bcs.n	8009b60 <quorem+0x42>
 8009ba2:	9b00      	ldr	r3, [sp, #0]
 8009ba4:	58eb      	ldr	r3, [r5, r3]
 8009ba6:	b92b      	cbnz	r3, 8009bb4 <quorem+0x96>
 8009ba8:	9b01      	ldr	r3, [sp, #4]
 8009baa:	3b04      	subs	r3, #4
 8009bac:	429d      	cmp	r5, r3
 8009bae:	461a      	mov	r2, r3
 8009bb0:	d32f      	bcc.n	8009c12 <quorem+0xf4>
 8009bb2:	613c      	str	r4, [r7, #16]
 8009bb4:	4638      	mov	r0, r7
 8009bb6:	f001 f979 	bl	800aeac <__mcmp>
 8009bba:	2800      	cmp	r0, #0
 8009bbc:	db25      	blt.n	8009c0a <quorem+0xec>
 8009bbe:	4629      	mov	r1, r5
 8009bc0:	2000      	movs	r0, #0
 8009bc2:	f858 2b04 	ldr.w	r2, [r8], #4
 8009bc6:	f8d1 c000 	ldr.w	ip, [r1]
 8009bca:	fa1f fe82 	uxth.w	lr, r2
 8009bce:	fa1f f38c 	uxth.w	r3, ip
 8009bd2:	eba3 030e 	sub.w	r3, r3, lr
 8009bd6:	4403      	add	r3, r0
 8009bd8:	0c12      	lsrs	r2, r2, #16
 8009bda:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009bde:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009be2:	b29b      	uxth	r3, r3
 8009be4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009be8:	45c1      	cmp	r9, r8
 8009bea:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009bee:	f841 3b04 	str.w	r3, [r1], #4
 8009bf2:	d2e6      	bcs.n	8009bc2 <quorem+0xa4>
 8009bf4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009bf8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009bfc:	b922      	cbnz	r2, 8009c08 <quorem+0xea>
 8009bfe:	3b04      	subs	r3, #4
 8009c00:	429d      	cmp	r5, r3
 8009c02:	461a      	mov	r2, r3
 8009c04:	d30b      	bcc.n	8009c1e <quorem+0x100>
 8009c06:	613c      	str	r4, [r7, #16]
 8009c08:	3601      	adds	r6, #1
 8009c0a:	4630      	mov	r0, r6
 8009c0c:	b003      	add	sp, #12
 8009c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c12:	6812      	ldr	r2, [r2, #0]
 8009c14:	3b04      	subs	r3, #4
 8009c16:	2a00      	cmp	r2, #0
 8009c18:	d1cb      	bne.n	8009bb2 <quorem+0x94>
 8009c1a:	3c01      	subs	r4, #1
 8009c1c:	e7c6      	b.n	8009bac <quorem+0x8e>
 8009c1e:	6812      	ldr	r2, [r2, #0]
 8009c20:	3b04      	subs	r3, #4
 8009c22:	2a00      	cmp	r2, #0
 8009c24:	d1ef      	bne.n	8009c06 <quorem+0xe8>
 8009c26:	3c01      	subs	r4, #1
 8009c28:	e7ea      	b.n	8009c00 <quorem+0xe2>
 8009c2a:	2000      	movs	r0, #0
 8009c2c:	e7ee      	b.n	8009c0c <quorem+0xee>
	...

08009c30 <_dtoa_r>:
 8009c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c34:	4614      	mov	r4, r2
 8009c36:	461d      	mov	r5, r3
 8009c38:	69c7      	ldr	r7, [r0, #28]
 8009c3a:	b097      	sub	sp, #92	@ 0x5c
 8009c3c:	4683      	mov	fp, r0
 8009c3e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009c42:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8009c44:	b97f      	cbnz	r7, 8009c66 <_dtoa_r+0x36>
 8009c46:	2010      	movs	r0, #16
 8009c48:	f000 fe02 	bl	800a850 <malloc>
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	f8cb 001c 	str.w	r0, [fp, #28]
 8009c52:	b920      	cbnz	r0, 8009c5e <_dtoa_r+0x2e>
 8009c54:	21ef      	movs	r1, #239	@ 0xef
 8009c56:	4ba8      	ldr	r3, [pc, #672]	@ (8009ef8 <_dtoa_r+0x2c8>)
 8009c58:	48a8      	ldr	r0, [pc, #672]	@ (8009efc <_dtoa_r+0x2cc>)
 8009c5a:	f001 fc3f 	bl	800b4dc <__assert_func>
 8009c5e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009c62:	6007      	str	r7, [r0, #0]
 8009c64:	60c7      	str	r7, [r0, #12]
 8009c66:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009c6a:	6819      	ldr	r1, [r3, #0]
 8009c6c:	b159      	cbz	r1, 8009c86 <_dtoa_r+0x56>
 8009c6e:	685a      	ldr	r2, [r3, #4]
 8009c70:	2301      	movs	r3, #1
 8009c72:	4093      	lsls	r3, r2
 8009c74:	604a      	str	r2, [r1, #4]
 8009c76:	608b      	str	r3, [r1, #8]
 8009c78:	4658      	mov	r0, fp
 8009c7a:	f000 fedf 	bl	800aa3c <_Bfree>
 8009c7e:	2200      	movs	r2, #0
 8009c80:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009c84:	601a      	str	r2, [r3, #0]
 8009c86:	1e2b      	subs	r3, r5, #0
 8009c88:	bfaf      	iteee	ge
 8009c8a:	2300      	movge	r3, #0
 8009c8c:	2201      	movlt	r2, #1
 8009c8e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009c92:	9303      	strlt	r3, [sp, #12]
 8009c94:	bfa8      	it	ge
 8009c96:	6033      	strge	r3, [r6, #0]
 8009c98:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009c9c:	4b98      	ldr	r3, [pc, #608]	@ (8009f00 <_dtoa_r+0x2d0>)
 8009c9e:	bfb8      	it	lt
 8009ca0:	6032      	strlt	r2, [r6, #0]
 8009ca2:	ea33 0308 	bics.w	r3, r3, r8
 8009ca6:	d112      	bne.n	8009cce <_dtoa_r+0x9e>
 8009ca8:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009cac:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009cae:	6013      	str	r3, [r2, #0]
 8009cb0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009cb4:	4323      	orrs	r3, r4
 8009cb6:	f000 8550 	beq.w	800a75a <_dtoa_r+0xb2a>
 8009cba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009cbc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8009f04 <_dtoa_r+0x2d4>
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	f000 8552 	beq.w	800a76a <_dtoa_r+0xb3a>
 8009cc6:	f10a 0303 	add.w	r3, sl, #3
 8009cca:	f000 bd4c 	b.w	800a766 <_dtoa_r+0xb36>
 8009cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009cd2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009cd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009cda:	2200      	movs	r2, #0
 8009cdc:	2300      	movs	r3, #0
 8009cde:	f7f6 fe63 	bl	80009a8 <__aeabi_dcmpeq>
 8009ce2:	4607      	mov	r7, r0
 8009ce4:	b158      	cbz	r0, 8009cfe <_dtoa_r+0xce>
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009cea:	6013      	str	r3, [r2, #0]
 8009cec:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009cee:	b113      	cbz	r3, 8009cf6 <_dtoa_r+0xc6>
 8009cf0:	4b85      	ldr	r3, [pc, #532]	@ (8009f08 <_dtoa_r+0x2d8>)
 8009cf2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009cf4:	6013      	str	r3, [r2, #0]
 8009cf6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8009f0c <_dtoa_r+0x2dc>
 8009cfa:	f000 bd36 	b.w	800a76a <_dtoa_r+0xb3a>
 8009cfe:	ab14      	add	r3, sp, #80	@ 0x50
 8009d00:	9301      	str	r3, [sp, #4]
 8009d02:	ab15      	add	r3, sp, #84	@ 0x54
 8009d04:	9300      	str	r3, [sp, #0]
 8009d06:	4658      	mov	r0, fp
 8009d08:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009d0c:	f001 f97e 	bl	800b00c <__d2b>
 8009d10:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8009d14:	4681      	mov	r9, r0
 8009d16:	2e00      	cmp	r6, #0
 8009d18:	d077      	beq.n	8009e0a <_dtoa_r+0x1da>
 8009d1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009d20:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009d24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d28:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009d2c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009d30:	9712      	str	r7, [sp, #72]	@ 0x48
 8009d32:	4619      	mov	r1, r3
 8009d34:	2200      	movs	r2, #0
 8009d36:	4b76      	ldr	r3, [pc, #472]	@ (8009f10 <_dtoa_r+0x2e0>)
 8009d38:	f7f6 fa16 	bl	8000168 <__aeabi_dsub>
 8009d3c:	a368      	add	r3, pc, #416	@ (adr r3, 8009ee0 <_dtoa_r+0x2b0>)
 8009d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d42:	f7f6 fbc9 	bl	80004d8 <__aeabi_dmul>
 8009d46:	a368      	add	r3, pc, #416	@ (adr r3, 8009ee8 <_dtoa_r+0x2b8>)
 8009d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d4c:	f7f6 fa0e 	bl	800016c <__adddf3>
 8009d50:	4604      	mov	r4, r0
 8009d52:	4630      	mov	r0, r6
 8009d54:	460d      	mov	r5, r1
 8009d56:	f7f6 fb55 	bl	8000404 <__aeabi_i2d>
 8009d5a:	a365      	add	r3, pc, #404	@ (adr r3, 8009ef0 <_dtoa_r+0x2c0>)
 8009d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d60:	f7f6 fbba 	bl	80004d8 <__aeabi_dmul>
 8009d64:	4602      	mov	r2, r0
 8009d66:	460b      	mov	r3, r1
 8009d68:	4620      	mov	r0, r4
 8009d6a:	4629      	mov	r1, r5
 8009d6c:	f7f6 f9fe 	bl	800016c <__adddf3>
 8009d70:	4604      	mov	r4, r0
 8009d72:	460d      	mov	r5, r1
 8009d74:	f7f6 fe60 	bl	8000a38 <__aeabi_d2iz>
 8009d78:	2200      	movs	r2, #0
 8009d7a:	4607      	mov	r7, r0
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	4620      	mov	r0, r4
 8009d80:	4629      	mov	r1, r5
 8009d82:	f7f6 fe1b 	bl	80009bc <__aeabi_dcmplt>
 8009d86:	b140      	cbz	r0, 8009d9a <_dtoa_r+0x16a>
 8009d88:	4638      	mov	r0, r7
 8009d8a:	f7f6 fb3b 	bl	8000404 <__aeabi_i2d>
 8009d8e:	4622      	mov	r2, r4
 8009d90:	462b      	mov	r3, r5
 8009d92:	f7f6 fe09 	bl	80009a8 <__aeabi_dcmpeq>
 8009d96:	b900      	cbnz	r0, 8009d9a <_dtoa_r+0x16a>
 8009d98:	3f01      	subs	r7, #1
 8009d9a:	2f16      	cmp	r7, #22
 8009d9c:	d853      	bhi.n	8009e46 <_dtoa_r+0x216>
 8009d9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009da2:	4b5c      	ldr	r3, [pc, #368]	@ (8009f14 <_dtoa_r+0x2e4>)
 8009da4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dac:	f7f6 fe06 	bl	80009bc <__aeabi_dcmplt>
 8009db0:	2800      	cmp	r0, #0
 8009db2:	d04a      	beq.n	8009e4a <_dtoa_r+0x21a>
 8009db4:	2300      	movs	r3, #0
 8009db6:	3f01      	subs	r7, #1
 8009db8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009dba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009dbc:	1b9b      	subs	r3, r3, r6
 8009dbe:	1e5a      	subs	r2, r3, #1
 8009dc0:	bf46      	itte	mi
 8009dc2:	f1c3 0801 	rsbmi	r8, r3, #1
 8009dc6:	2300      	movmi	r3, #0
 8009dc8:	f04f 0800 	movpl.w	r8, #0
 8009dcc:	9209      	str	r2, [sp, #36]	@ 0x24
 8009dce:	bf48      	it	mi
 8009dd0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8009dd2:	2f00      	cmp	r7, #0
 8009dd4:	db3b      	blt.n	8009e4e <_dtoa_r+0x21e>
 8009dd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dd8:	970e      	str	r7, [sp, #56]	@ 0x38
 8009dda:	443b      	add	r3, r7
 8009ddc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dde:	2300      	movs	r3, #0
 8009de0:	930a      	str	r3, [sp, #40]	@ 0x28
 8009de2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009de4:	2b09      	cmp	r3, #9
 8009de6:	d866      	bhi.n	8009eb6 <_dtoa_r+0x286>
 8009de8:	2b05      	cmp	r3, #5
 8009dea:	bfc4      	itt	gt
 8009dec:	3b04      	subgt	r3, #4
 8009dee:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8009df0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009df2:	bfc8      	it	gt
 8009df4:	2400      	movgt	r4, #0
 8009df6:	f1a3 0302 	sub.w	r3, r3, #2
 8009dfa:	bfd8      	it	le
 8009dfc:	2401      	movle	r4, #1
 8009dfe:	2b03      	cmp	r3, #3
 8009e00:	d864      	bhi.n	8009ecc <_dtoa_r+0x29c>
 8009e02:	e8df f003 	tbb	[pc, r3]
 8009e06:	382b      	.short	0x382b
 8009e08:	5636      	.short	0x5636
 8009e0a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009e0e:	441e      	add	r6, r3
 8009e10:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009e14:	2b20      	cmp	r3, #32
 8009e16:	bfc1      	itttt	gt
 8009e18:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009e1c:	fa08 f803 	lslgt.w	r8, r8, r3
 8009e20:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009e24:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009e28:	bfd6      	itet	le
 8009e2a:	f1c3 0320 	rsble	r3, r3, #32
 8009e2e:	ea48 0003 	orrgt.w	r0, r8, r3
 8009e32:	fa04 f003 	lslle.w	r0, r4, r3
 8009e36:	f7f6 fad5 	bl	80003e4 <__aeabi_ui2d>
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009e40:	3e01      	subs	r6, #1
 8009e42:	9212      	str	r2, [sp, #72]	@ 0x48
 8009e44:	e775      	b.n	8009d32 <_dtoa_r+0x102>
 8009e46:	2301      	movs	r3, #1
 8009e48:	e7b6      	b.n	8009db8 <_dtoa_r+0x188>
 8009e4a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8009e4c:	e7b5      	b.n	8009dba <_dtoa_r+0x18a>
 8009e4e:	427b      	negs	r3, r7
 8009e50:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e52:	2300      	movs	r3, #0
 8009e54:	eba8 0807 	sub.w	r8, r8, r7
 8009e58:	930e      	str	r3, [sp, #56]	@ 0x38
 8009e5a:	e7c2      	b.n	8009de2 <_dtoa_r+0x1b2>
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e60:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	dc35      	bgt.n	8009ed2 <_dtoa_r+0x2a2>
 8009e66:	2301      	movs	r3, #1
 8009e68:	461a      	mov	r2, r3
 8009e6a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009e6e:	9221      	str	r2, [sp, #132]	@ 0x84
 8009e70:	e00b      	b.n	8009e8a <_dtoa_r+0x25a>
 8009e72:	2301      	movs	r3, #1
 8009e74:	e7f3      	b.n	8009e5e <_dtoa_r+0x22e>
 8009e76:	2300      	movs	r3, #0
 8009e78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e7a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009e7c:	18fb      	adds	r3, r7, r3
 8009e7e:	9308      	str	r3, [sp, #32]
 8009e80:	3301      	adds	r3, #1
 8009e82:	2b01      	cmp	r3, #1
 8009e84:	9307      	str	r3, [sp, #28]
 8009e86:	bfb8      	it	lt
 8009e88:	2301      	movlt	r3, #1
 8009e8a:	2100      	movs	r1, #0
 8009e8c:	2204      	movs	r2, #4
 8009e8e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009e92:	f102 0514 	add.w	r5, r2, #20
 8009e96:	429d      	cmp	r5, r3
 8009e98:	d91f      	bls.n	8009eda <_dtoa_r+0x2aa>
 8009e9a:	6041      	str	r1, [r0, #4]
 8009e9c:	4658      	mov	r0, fp
 8009e9e:	f000 fd8d 	bl	800a9bc <_Balloc>
 8009ea2:	4682      	mov	sl, r0
 8009ea4:	2800      	cmp	r0, #0
 8009ea6:	d139      	bne.n	8009f1c <_dtoa_r+0x2ec>
 8009ea8:	4602      	mov	r2, r0
 8009eaa:	f240 11af 	movw	r1, #431	@ 0x1af
 8009eae:	4b1a      	ldr	r3, [pc, #104]	@ (8009f18 <_dtoa_r+0x2e8>)
 8009eb0:	e6d2      	b.n	8009c58 <_dtoa_r+0x28>
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	e7e0      	b.n	8009e78 <_dtoa_r+0x248>
 8009eb6:	2401      	movs	r4, #1
 8009eb8:	2300      	movs	r3, #0
 8009eba:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009ebc:	9320      	str	r3, [sp, #128]	@ 0x80
 8009ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009ec8:	2312      	movs	r3, #18
 8009eca:	e7d0      	b.n	8009e6e <_dtoa_r+0x23e>
 8009ecc:	2301      	movs	r3, #1
 8009ece:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ed0:	e7f5      	b.n	8009ebe <_dtoa_r+0x28e>
 8009ed2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009ed4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009ed8:	e7d7      	b.n	8009e8a <_dtoa_r+0x25a>
 8009eda:	3101      	adds	r1, #1
 8009edc:	0052      	lsls	r2, r2, #1
 8009ede:	e7d8      	b.n	8009e92 <_dtoa_r+0x262>
 8009ee0:	636f4361 	.word	0x636f4361
 8009ee4:	3fd287a7 	.word	0x3fd287a7
 8009ee8:	8b60c8b3 	.word	0x8b60c8b3
 8009eec:	3fc68a28 	.word	0x3fc68a28
 8009ef0:	509f79fb 	.word	0x509f79fb
 8009ef4:	3fd34413 	.word	0x3fd34413
 8009ef8:	0800bea4 	.word	0x0800bea4
 8009efc:	0800bebb 	.word	0x0800bebb
 8009f00:	7ff00000 	.word	0x7ff00000
 8009f04:	0800bea0 	.word	0x0800bea0
 8009f08:	0800be74 	.word	0x0800be74
 8009f0c:	0800be73 	.word	0x0800be73
 8009f10:	3ff80000 	.word	0x3ff80000
 8009f14:	0800bfb8 	.word	0x0800bfb8
 8009f18:	0800bf13 	.word	0x0800bf13
 8009f1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009f20:	6018      	str	r0, [r3, #0]
 8009f22:	9b07      	ldr	r3, [sp, #28]
 8009f24:	2b0e      	cmp	r3, #14
 8009f26:	f200 80a4 	bhi.w	800a072 <_dtoa_r+0x442>
 8009f2a:	2c00      	cmp	r4, #0
 8009f2c:	f000 80a1 	beq.w	800a072 <_dtoa_r+0x442>
 8009f30:	2f00      	cmp	r7, #0
 8009f32:	dd33      	ble.n	8009f9c <_dtoa_r+0x36c>
 8009f34:	4b86      	ldr	r3, [pc, #536]	@ (800a150 <_dtoa_r+0x520>)
 8009f36:	f007 020f 	and.w	r2, r7, #15
 8009f3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f3e:	05f8      	lsls	r0, r7, #23
 8009f40:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009f44:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009f48:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009f4c:	d516      	bpl.n	8009f7c <_dtoa_r+0x34c>
 8009f4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f52:	4b80      	ldr	r3, [pc, #512]	@ (800a154 <_dtoa_r+0x524>)
 8009f54:	2603      	movs	r6, #3
 8009f56:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009f5a:	f7f6 fbe7 	bl	800072c <__aeabi_ddiv>
 8009f5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f62:	f004 040f 	and.w	r4, r4, #15
 8009f66:	4d7b      	ldr	r5, [pc, #492]	@ (800a154 <_dtoa_r+0x524>)
 8009f68:	b954      	cbnz	r4, 8009f80 <_dtoa_r+0x350>
 8009f6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f72:	f7f6 fbdb 	bl	800072c <__aeabi_ddiv>
 8009f76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f7a:	e028      	b.n	8009fce <_dtoa_r+0x39e>
 8009f7c:	2602      	movs	r6, #2
 8009f7e:	e7f2      	b.n	8009f66 <_dtoa_r+0x336>
 8009f80:	07e1      	lsls	r1, r4, #31
 8009f82:	d508      	bpl.n	8009f96 <_dtoa_r+0x366>
 8009f84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f88:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009f8c:	f7f6 faa4 	bl	80004d8 <__aeabi_dmul>
 8009f90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009f94:	3601      	adds	r6, #1
 8009f96:	1064      	asrs	r4, r4, #1
 8009f98:	3508      	adds	r5, #8
 8009f9a:	e7e5      	b.n	8009f68 <_dtoa_r+0x338>
 8009f9c:	f000 80d2 	beq.w	800a144 <_dtoa_r+0x514>
 8009fa0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009fa4:	427c      	negs	r4, r7
 8009fa6:	4b6a      	ldr	r3, [pc, #424]	@ (800a150 <_dtoa_r+0x520>)
 8009fa8:	f004 020f 	and.w	r2, r4, #15
 8009fac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb4:	f7f6 fa90 	bl	80004d8 <__aeabi_dmul>
 8009fb8:	2602      	movs	r6, #2
 8009fba:	2300      	movs	r3, #0
 8009fbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fc0:	4d64      	ldr	r5, [pc, #400]	@ (800a154 <_dtoa_r+0x524>)
 8009fc2:	1124      	asrs	r4, r4, #4
 8009fc4:	2c00      	cmp	r4, #0
 8009fc6:	f040 80b2 	bne.w	800a12e <_dtoa_r+0x4fe>
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d1d3      	bne.n	8009f76 <_dtoa_r+0x346>
 8009fce:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009fd2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	f000 80b7 	beq.w	800a148 <_dtoa_r+0x518>
 8009fda:	2200      	movs	r2, #0
 8009fdc:	4620      	mov	r0, r4
 8009fde:	4629      	mov	r1, r5
 8009fe0:	4b5d      	ldr	r3, [pc, #372]	@ (800a158 <_dtoa_r+0x528>)
 8009fe2:	f7f6 fceb 	bl	80009bc <__aeabi_dcmplt>
 8009fe6:	2800      	cmp	r0, #0
 8009fe8:	f000 80ae 	beq.w	800a148 <_dtoa_r+0x518>
 8009fec:	9b07      	ldr	r3, [sp, #28]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	f000 80aa 	beq.w	800a148 <_dtoa_r+0x518>
 8009ff4:	9b08      	ldr	r3, [sp, #32]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	dd37      	ble.n	800a06a <_dtoa_r+0x43a>
 8009ffa:	1e7b      	subs	r3, r7, #1
 8009ffc:	4620      	mov	r0, r4
 8009ffe:	9304      	str	r3, [sp, #16]
 800a000:	2200      	movs	r2, #0
 800a002:	4629      	mov	r1, r5
 800a004:	4b55      	ldr	r3, [pc, #340]	@ (800a15c <_dtoa_r+0x52c>)
 800a006:	f7f6 fa67 	bl	80004d8 <__aeabi_dmul>
 800a00a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a00e:	9c08      	ldr	r4, [sp, #32]
 800a010:	3601      	adds	r6, #1
 800a012:	4630      	mov	r0, r6
 800a014:	f7f6 f9f6 	bl	8000404 <__aeabi_i2d>
 800a018:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a01c:	f7f6 fa5c 	bl	80004d8 <__aeabi_dmul>
 800a020:	2200      	movs	r2, #0
 800a022:	4b4f      	ldr	r3, [pc, #316]	@ (800a160 <_dtoa_r+0x530>)
 800a024:	f7f6 f8a2 	bl	800016c <__adddf3>
 800a028:	4605      	mov	r5, r0
 800a02a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a02e:	2c00      	cmp	r4, #0
 800a030:	f040 809a 	bne.w	800a168 <_dtoa_r+0x538>
 800a034:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a038:	2200      	movs	r2, #0
 800a03a:	4b4a      	ldr	r3, [pc, #296]	@ (800a164 <_dtoa_r+0x534>)
 800a03c:	f7f6 f894 	bl	8000168 <__aeabi_dsub>
 800a040:	4602      	mov	r2, r0
 800a042:	460b      	mov	r3, r1
 800a044:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a048:	462a      	mov	r2, r5
 800a04a:	4633      	mov	r3, r6
 800a04c:	f7f6 fcd4 	bl	80009f8 <__aeabi_dcmpgt>
 800a050:	2800      	cmp	r0, #0
 800a052:	f040 828e 	bne.w	800a572 <_dtoa_r+0x942>
 800a056:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a05a:	462a      	mov	r2, r5
 800a05c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a060:	f7f6 fcac 	bl	80009bc <__aeabi_dcmplt>
 800a064:	2800      	cmp	r0, #0
 800a066:	f040 8127 	bne.w	800a2b8 <_dtoa_r+0x688>
 800a06a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a06e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a072:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a074:	2b00      	cmp	r3, #0
 800a076:	f2c0 8163 	blt.w	800a340 <_dtoa_r+0x710>
 800a07a:	2f0e      	cmp	r7, #14
 800a07c:	f300 8160 	bgt.w	800a340 <_dtoa_r+0x710>
 800a080:	4b33      	ldr	r3, [pc, #204]	@ (800a150 <_dtoa_r+0x520>)
 800a082:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a086:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a08a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a08e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a090:	2b00      	cmp	r3, #0
 800a092:	da03      	bge.n	800a09c <_dtoa_r+0x46c>
 800a094:	9b07      	ldr	r3, [sp, #28]
 800a096:	2b00      	cmp	r3, #0
 800a098:	f340 8100 	ble.w	800a29c <_dtoa_r+0x66c>
 800a09c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a0a0:	4656      	mov	r6, sl
 800a0a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0a6:	4620      	mov	r0, r4
 800a0a8:	4629      	mov	r1, r5
 800a0aa:	f7f6 fb3f 	bl	800072c <__aeabi_ddiv>
 800a0ae:	f7f6 fcc3 	bl	8000a38 <__aeabi_d2iz>
 800a0b2:	4680      	mov	r8, r0
 800a0b4:	f7f6 f9a6 	bl	8000404 <__aeabi_i2d>
 800a0b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0bc:	f7f6 fa0c 	bl	80004d8 <__aeabi_dmul>
 800a0c0:	4602      	mov	r2, r0
 800a0c2:	460b      	mov	r3, r1
 800a0c4:	4620      	mov	r0, r4
 800a0c6:	4629      	mov	r1, r5
 800a0c8:	f7f6 f84e 	bl	8000168 <__aeabi_dsub>
 800a0cc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a0d0:	9d07      	ldr	r5, [sp, #28]
 800a0d2:	f806 4b01 	strb.w	r4, [r6], #1
 800a0d6:	eba6 040a 	sub.w	r4, r6, sl
 800a0da:	42a5      	cmp	r5, r4
 800a0dc:	4602      	mov	r2, r0
 800a0de:	460b      	mov	r3, r1
 800a0e0:	f040 8116 	bne.w	800a310 <_dtoa_r+0x6e0>
 800a0e4:	f7f6 f842 	bl	800016c <__adddf3>
 800a0e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0ec:	4604      	mov	r4, r0
 800a0ee:	460d      	mov	r5, r1
 800a0f0:	f7f6 fc82 	bl	80009f8 <__aeabi_dcmpgt>
 800a0f4:	2800      	cmp	r0, #0
 800a0f6:	f040 80f8 	bne.w	800a2ea <_dtoa_r+0x6ba>
 800a0fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0fe:	4620      	mov	r0, r4
 800a100:	4629      	mov	r1, r5
 800a102:	f7f6 fc51 	bl	80009a8 <__aeabi_dcmpeq>
 800a106:	b118      	cbz	r0, 800a110 <_dtoa_r+0x4e0>
 800a108:	f018 0f01 	tst.w	r8, #1
 800a10c:	f040 80ed 	bne.w	800a2ea <_dtoa_r+0x6ba>
 800a110:	4649      	mov	r1, r9
 800a112:	4658      	mov	r0, fp
 800a114:	f000 fc92 	bl	800aa3c <_Bfree>
 800a118:	2300      	movs	r3, #0
 800a11a:	7033      	strb	r3, [r6, #0]
 800a11c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a11e:	3701      	adds	r7, #1
 800a120:	601f      	str	r7, [r3, #0]
 800a122:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a124:	2b00      	cmp	r3, #0
 800a126:	f000 8320 	beq.w	800a76a <_dtoa_r+0xb3a>
 800a12a:	601e      	str	r6, [r3, #0]
 800a12c:	e31d      	b.n	800a76a <_dtoa_r+0xb3a>
 800a12e:	07e2      	lsls	r2, r4, #31
 800a130:	d505      	bpl.n	800a13e <_dtoa_r+0x50e>
 800a132:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a136:	f7f6 f9cf 	bl	80004d8 <__aeabi_dmul>
 800a13a:	2301      	movs	r3, #1
 800a13c:	3601      	adds	r6, #1
 800a13e:	1064      	asrs	r4, r4, #1
 800a140:	3508      	adds	r5, #8
 800a142:	e73f      	b.n	8009fc4 <_dtoa_r+0x394>
 800a144:	2602      	movs	r6, #2
 800a146:	e742      	b.n	8009fce <_dtoa_r+0x39e>
 800a148:	9c07      	ldr	r4, [sp, #28]
 800a14a:	9704      	str	r7, [sp, #16]
 800a14c:	e761      	b.n	800a012 <_dtoa_r+0x3e2>
 800a14e:	bf00      	nop
 800a150:	0800bfb8 	.word	0x0800bfb8
 800a154:	0800bf90 	.word	0x0800bf90
 800a158:	3ff00000 	.word	0x3ff00000
 800a15c:	40240000 	.word	0x40240000
 800a160:	401c0000 	.word	0x401c0000
 800a164:	40140000 	.word	0x40140000
 800a168:	4b70      	ldr	r3, [pc, #448]	@ (800a32c <_dtoa_r+0x6fc>)
 800a16a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a16c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a170:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a174:	4454      	add	r4, sl
 800a176:	2900      	cmp	r1, #0
 800a178:	d045      	beq.n	800a206 <_dtoa_r+0x5d6>
 800a17a:	2000      	movs	r0, #0
 800a17c:	496c      	ldr	r1, [pc, #432]	@ (800a330 <_dtoa_r+0x700>)
 800a17e:	f7f6 fad5 	bl	800072c <__aeabi_ddiv>
 800a182:	4633      	mov	r3, r6
 800a184:	462a      	mov	r2, r5
 800a186:	f7f5 ffef 	bl	8000168 <__aeabi_dsub>
 800a18a:	4656      	mov	r6, sl
 800a18c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a190:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a194:	f7f6 fc50 	bl	8000a38 <__aeabi_d2iz>
 800a198:	4605      	mov	r5, r0
 800a19a:	f7f6 f933 	bl	8000404 <__aeabi_i2d>
 800a19e:	4602      	mov	r2, r0
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1a6:	f7f5 ffdf 	bl	8000168 <__aeabi_dsub>
 800a1aa:	4602      	mov	r2, r0
 800a1ac:	460b      	mov	r3, r1
 800a1ae:	3530      	adds	r5, #48	@ 0x30
 800a1b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a1b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a1b8:	f806 5b01 	strb.w	r5, [r6], #1
 800a1bc:	f7f6 fbfe 	bl	80009bc <__aeabi_dcmplt>
 800a1c0:	2800      	cmp	r0, #0
 800a1c2:	d163      	bne.n	800a28c <_dtoa_r+0x65c>
 800a1c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a1c8:	2000      	movs	r0, #0
 800a1ca:	495a      	ldr	r1, [pc, #360]	@ (800a334 <_dtoa_r+0x704>)
 800a1cc:	f7f5 ffcc 	bl	8000168 <__aeabi_dsub>
 800a1d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a1d4:	f7f6 fbf2 	bl	80009bc <__aeabi_dcmplt>
 800a1d8:	2800      	cmp	r0, #0
 800a1da:	f040 8087 	bne.w	800a2ec <_dtoa_r+0x6bc>
 800a1de:	42a6      	cmp	r6, r4
 800a1e0:	f43f af43 	beq.w	800a06a <_dtoa_r+0x43a>
 800a1e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	4b53      	ldr	r3, [pc, #332]	@ (800a338 <_dtoa_r+0x708>)
 800a1ec:	f7f6 f974 	bl	80004d8 <__aeabi_dmul>
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a1f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1fa:	4b4f      	ldr	r3, [pc, #316]	@ (800a338 <_dtoa_r+0x708>)
 800a1fc:	f7f6 f96c 	bl	80004d8 <__aeabi_dmul>
 800a200:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a204:	e7c4      	b.n	800a190 <_dtoa_r+0x560>
 800a206:	4631      	mov	r1, r6
 800a208:	4628      	mov	r0, r5
 800a20a:	f7f6 f965 	bl	80004d8 <__aeabi_dmul>
 800a20e:	4656      	mov	r6, sl
 800a210:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a214:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a216:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a21a:	f7f6 fc0d 	bl	8000a38 <__aeabi_d2iz>
 800a21e:	4605      	mov	r5, r0
 800a220:	f7f6 f8f0 	bl	8000404 <__aeabi_i2d>
 800a224:	4602      	mov	r2, r0
 800a226:	460b      	mov	r3, r1
 800a228:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a22c:	f7f5 ff9c 	bl	8000168 <__aeabi_dsub>
 800a230:	4602      	mov	r2, r0
 800a232:	460b      	mov	r3, r1
 800a234:	3530      	adds	r5, #48	@ 0x30
 800a236:	f806 5b01 	strb.w	r5, [r6], #1
 800a23a:	42a6      	cmp	r6, r4
 800a23c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a240:	f04f 0200 	mov.w	r2, #0
 800a244:	d124      	bne.n	800a290 <_dtoa_r+0x660>
 800a246:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a24a:	4b39      	ldr	r3, [pc, #228]	@ (800a330 <_dtoa_r+0x700>)
 800a24c:	f7f5 ff8e 	bl	800016c <__adddf3>
 800a250:	4602      	mov	r2, r0
 800a252:	460b      	mov	r3, r1
 800a254:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a258:	f7f6 fbce 	bl	80009f8 <__aeabi_dcmpgt>
 800a25c:	2800      	cmp	r0, #0
 800a25e:	d145      	bne.n	800a2ec <_dtoa_r+0x6bc>
 800a260:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a264:	2000      	movs	r0, #0
 800a266:	4932      	ldr	r1, [pc, #200]	@ (800a330 <_dtoa_r+0x700>)
 800a268:	f7f5 ff7e 	bl	8000168 <__aeabi_dsub>
 800a26c:	4602      	mov	r2, r0
 800a26e:	460b      	mov	r3, r1
 800a270:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a274:	f7f6 fba2 	bl	80009bc <__aeabi_dcmplt>
 800a278:	2800      	cmp	r0, #0
 800a27a:	f43f aef6 	beq.w	800a06a <_dtoa_r+0x43a>
 800a27e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a280:	1e73      	subs	r3, r6, #1
 800a282:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a284:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a288:	2b30      	cmp	r3, #48	@ 0x30
 800a28a:	d0f8      	beq.n	800a27e <_dtoa_r+0x64e>
 800a28c:	9f04      	ldr	r7, [sp, #16]
 800a28e:	e73f      	b.n	800a110 <_dtoa_r+0x4e0>
 800a290:	4b29      	ldr	r3, [pc, #164]	@ (800a338 <_dtoa_r+0x708>)
 800a292:	f7f6 f921 	bl	80004d8 <__aeabi_dmul>
 800a296:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a29a:	e7bc      	b.n	800a216 <_dtoa_r+0x5e6>
 800a29c:	d10c      	bne.n	800a2b8 <_dtoa_r+0x688>
 800a29e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	4b25      	ldr	r3, [pc, #148]	@ (800a33c <_dtoa_r+0x70c>)
 800a2a6:	f7f6 f917 	bl	80004d8 <__aeabi_dmul>
 800a2aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a2ae:	f7f6 fb99 	bl	80009e4 <__aeabi_dcmpge>
 800a2b2:	2800      	cmp	r0, #0
 800a2b4:	f000 815b 	beq.w	800a56e <_dtoa_r+0x93e>
 800a2b8:	2400      	movs	r4, #0
 800a2ba:	4625      	mov	r5, r4
 800a2bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a2be:	4656      	mov	r6, sl
 800a2c0:	43db      	mvns	r3, r3
 800a2c2:	9304      	str	r3, [sp, #16]
 800a2c4:	2700      	movs	r7, #0
 800a2c6:	4621      	mov	r1, r4
 800a2c8:	4658      	mov	r0, fp
 800a2ca:	f000 fbb7 	bl	800aa3c <_Bfree>
 800a2ce:	2d00      	cmp	r5, #0
 800a2d0:	d0dc      	beq.n	800a28c <_dtoa_r+0x65c>
 800a2d2:	b12f      	cbz	r7, 800a2e0 <_dtoa_r+0x6b0>
 800a2d4:	42af      	cmp	r7, r5
 800a2d6:	d003      	beq.n	800a2e0 <_dtoa_r+0x6b0>
 800a2d8:	4639      	mov	r1, r7
 800a2da:	4658      	mov	r0, fp
 800a2dc:	f000 fbae 	bl	800aa3c <_Bfree>
 800a2e0:	4629      	mov	r1, r5
 800a2e2:	4658      	mov	r0, fp
 800a2e4:	f000 fbaa 	bl	800aa3c <_Bfree>
 800a2e8:	e7d0      	b.n	800a28c <_dtoa_r+0x65c>
 800a2ea:	9704      	str	r7, [sp, #16]
 800a2ec:	4633      	mov	r3, r6
 800a2ee:	461e      	mov	r6, r3
 800a2f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a2f4:	2a39      	cmp	r2, #57	@ 0x39
 800a2f6:	d107      	bne.n	800a308 <_dtoa_r+0x6d8>
 800a2f8:	459a      	cmp	sl, r3
 800a2fa:	d1f8      	bne.n	800a2ee <_dtoa_r+0x6be>
 800a2fc:	9a04      	ldr	r2, [sp, #16]
 800a2fe:	3201      	adds	r2, #1
 800a300:	9204      	str	r2, [sp, #16]
 800a302:	2230      	movs	r2, #48	@ 0x30
 800a304:	f88a 2000 	strb.w	r2, [sl]
 800a308:	781a      	ldrb	r2, [r3, #0]
 800a30a:	3201      	adds	r2, #1
 800a30c:	701a      	strb	r2, [r3, #0]
 800a30e:	e7bd      	b.n	800a28c <_dtoa_r+0x65c>
 800a310:	2200      	movs	r2, #0
 800a312:	4b09      	ldr	r3, [pc, #36]	@ (800a338 <_dtoa_r+0x708>)
 800a314:	f7f6 f8e0 	bl	80004d8 <__aeabi_dmul>
 800a318:	2200      	movs	r2, #0
 800a31a:	2300      	movs	r3, #0
 800a31c:	4604      	mov	r4, r0
 800a31e:	460d      	mov	r5, r1
 800a320:	f7f6 fb42 	bl	80009a8 <__aeabi_dcmpeq>
 800a324:	2800      	cmp	r0, #0
 800a326:	f43f aebc 	beq.w	800a0a2 <_dtoa_r+0x472>
 800a32a:	e6f1      	b.n	800a110 <_dtoa_r+0x4e0>
 800a32c:	0800bfb8 	.word	0x0800bfb8
 800a330:	3fe00000 	.word	0x3fe00000
 800a334:	3ff00000 	.word	0x3ff00000
 800a338:	40240000 	.word	0x40240000
 800a33c:	40140000 	.word	0x40140000
 800a340:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a342:	2a00      	cmp	r2, #0
 800a344:	f000 80db 	beq.w	800a4fe <_dtoa_r+0x8ce>
 800a348:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a34a:	2a01      	cmp	r2, #1
 800a34c:	f300 80bf 	bgt.w	800a4ce <_dtoa_r+0x89e>
 800a350:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a352:	2a00      	cmp	r2, #0
 800a354:	f000 80b7 	beq.w	800a4c6 <_dtoa_r+0x896>
 800a358:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a35c:	4646      	mov	r6, r8
 800a35e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a360:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a362:	2101      	movs	r1, #1
 800a364:	441a      	add	r2, r3
 800a366:	4658      	mov	r0, fp
 800a368:	4498      	add	r8, r3
 800a36a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a36c:	f000 fc1a 	bl	800aba4 <__i2b>
 800a370:	4605      	mov	r5, r0
 800a372:	b15e      	cbz	r6, 800a38c <_dtoa_r+0x75c>
 800a374:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a376:	2b00      	cmp	r3, #0
 800a378:	dd08      	ble.n	800a38c <_dtoa_r+0x75c>
 800a37a:	42b3      	cmp	r3, r6
 800a37c:	bfa8      	it	ge
 800a37e:	4633      	movge	r3, r6
 800a380:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a382:	eba8 0803 	sub.w	r8, r8, r3
 800a386:	1af6      	subs	r6, r6, r3
 800a388:	1ad3      	subs	r3, r2, r3
 800a38a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a38c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a38e:	b1f3      	cbz	r3, 800a3ce <_dtoa_r+0x79e>
 800a390:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a392:	2b00      	cmp	r3, #0
 800a394:	f000 80b7 	beq.w	800a506 <_dtoa_r+0x8d6>
 800a398:	b18c      	cbz	r4, 800a3be <_dtoa_r+0x78e>
 800a39a:	4629      	mov	r1, r5
 800a39c:	4622      	mov	r2, r4
 800a39e:	4658      	mov	r0, fp
 800a3a0:	f000 fcbe 	bl	800ad20 <__pow5mult>
 800a3a4:	464a      	mov	r2, r9
 800a3a6:	4601      	mov	r1, r0
 800a3a8:	4605      	mov	r5, r0
 800a3aa:	4658      	mov	r0, fp
 800a3ac:	f000 fc10 	bl	800abd0 <__multiply>
 800a3b0:	4649      	mov	r1, r9
 800a3b2:	9004      	str	r0, [sp, #16]
 800a3b4:	4658      	mov	r0, fp
 800a3b6:	f000 fb41 	bl	800aa3c <_Bfree>
 800a3ba:	9b04      	ldr	r3, [sp, #16]
 800a3bc:	4699      	mov	r9, r3
 800a3be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3c0:	1b1a      	subs	r2, r3, r4
 800a3c2:	d004      	beq.n	800a3ce <_dtoa_r+0x79e>
 800a3c4:	4649      	mov	r1, r9
 800a3c6:	4658      	mov	r0, fp
 800a3c8:	f000 fcaa 	bl	800ad20 <__pow5mult>
 800a3cc:	4681      	mov	r9, r0
 800a3ce:	2101      	movs	r1, #1
 800a3d0:	4658      	mov	r0, fp
 800a3d2:	f000 fbe7 	bl	800aba4 <__i2b>
 800a3d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3d8:	4604      	mov	r4, r0
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	f000 81c9 	beq.w	800a772 <_dtoa_r+0xb42>
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	4601      	mov	r1, r0
 800a3e4:	4658      	mov	r0, fp
 800a3e6:	f000 fc9b 	bl	800ad20 <__pow5mult>
 800a3ea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a3ec:	4604      	mov	r4, r0
 800a3ee:	2b01      	cmp	r3, #1
 800a3f0:	f300 808f 	bgt.w	800a512 <_dtoa_r+0x8e2>
 800a3f4:	9b02      	ldr	r3, [sp, #8]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	f040 8087 	bne.w	800a50a <_dtoa_r+0x8da>
 800a3fc:	9b03      	ldr	r3, [sp, #12]
 800a3fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a402:	2b00      	cmp	r3, #0
 800a404:	f040 8083 	bne.w	800a50e <_dtoa_r+0x8de>
 800a408:	9b03      	ldr	r3, [sp, #12]
 800a40a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a40e:	0d1b      	lsrs	r3, r3, #20
 800a410:	051b      	lsls	r3, r3, #20
 800a412:	b12b      	cbz	r3, 800a420 <_dtoa_r+0x7f0>
 800a414:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a416:	f108 0801 	add.w	r8, r8, #1
 800a41a:	3301      	adds	r3, #1
 800a41c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a41e:	2301      	movs	r3, #1
 800a420:	930a      	str	r3, [sp, #40]	@ 0x28
 800a422:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a424:	2b00      	cmp	r3, #0
 800a426:	f000 81aa 	beq.w	800a77e <_dtoa_r+0xb4e>
 800a42a:	6923      	ldr	r3, [r4, #16]
 800a42c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a430:	6918      	ldr	r0, [r3, #16]
 800a432:	f000 fb6b 	bl	800ab0c <__hi0bits>
 800a436:	f1c0 0020 	rsb	r0, r0, #32
 800a43a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a43c:	4418      	add	r0, r3
 800a43e:	f010 001f 	ands.w	r0, r0, #31
 800a442:	d071      	beq.n	800a528 <_dtoa_r+0x8f8>
 800a444:	f1c0 0320 	rsb	r3, r0, #32
 800a448:	2b04      	cmp	r3, #4
 800a44a:	dd65      	ble.n	800a518 <_dtoa_r+0x8e8>
 800a44c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a44e:	f1c0 001c 	rsb	r0, r0, #28
 800a452:	4403      	add	r3, r0
 800a454:	4480      	add	r8, r0
 800a456:	4406      	add	r6, r0
 800a458:	9309      	str	r3, [sp, #36]	@ 0x24
 800a45a:	f1b8 0f00 	cmp.w	r8, #0
 800a45e:	dd05      	ble.n	800a46c <_dtoa_r+0x83c>
 800a460:	4649      	mov	r1, r9
 800a462:	4642      	mov	r2, r8
 800a464:	4658      	mov	r0, fp
 800a466:	f000 fcb5 	bl	800add4 <__lshift>
 800a46a:	4681      	mov	r9, r0
 800a46c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a46e:	2b00      	cmp	r3, #0
 800a470:	dd05      	ble.n	800a47e <_dtoa_r+0x84e>
 800a472:	4621      	mov	r1, r4
 800a474:	461a      	mov	r2, r3
 800a476:	4658      	mov	r0, fp
 800a478:	f000 fcac 	bl	800add4 <__lshift>
 800a47c:	4604      	mov	r4, r0
 800a47e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a480:	2b00      	cmp	r3, #0
 800a482:	d053      	beq.n	800a52c <_dtoa_r+0x8fc>
 800a484:	4621      	mov	r1, r4
 800a486:	4648      	mov	r0, r9
 800a488:	f000 fd10 	bl	800aeac <__mcmp>
 800a48c:	2800      	cmp	r0, #0
 800a48e:	da4d      	bge.n	800a52c <_dtoa_r+0x8fc>
 800a490:	1e7b      	subs	r3, r7, #1
 800a492:	4649      	mov	r1, r9
 800a494:	9304      	str	r3, [sp, #16]
 800a496:	220a      	movs	r2, #10
 800a498:	2300      	movs	r3, #0
 800a49a:	4658      	mov	r0, fp
 800a49c:	f000 faf0 	bl	800aa80 <__multadd>
 800a4a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4a2:	4681      	mov	r9, r0
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	f000 816c 	beq.w	800a782 <_dtoa_r+0xb52>
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	4629      	mov	r1, r5
 800a4ae:	220a      	movs	r2, #10
 800a4b0:	4658      	mov	r0, fp
 800a4b2:	f000 fae5 	bl	800aa80 <__multadd>
 800a4b6:	9b08      	ldr	r3, [sp, #32]
 800a4b8:	4605      	mov	r5, r0
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	dc61      	bgt.n	800a582 <_dtoa_r+0x952>
 800a4be:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a4c0:	2b02      	cmp	r3, #2
 800a4c2:	dc3b      	bgt.n	800a53c <_dtoa_r+0x90c>
 800a4c4:	e05d      	b.n	800a582 <_dtoa_r+0x952>
 800a4c6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a4c8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a4cc:	e746      	b.n	800a35c <_dtoa_r+0x72c>
 800a4ce:	9b07      	ldr	r3, [sp, #28]
 800a4d0:	1e5c      	subs	r4, r3, #1
 800a4d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4d4:	42a3      	cmp	r3, r4
 800a4d6:	bfbf      	itttt	lt
 800a4d8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a4da:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800a4dc:	1ae3      	sublt	r3, r4, r3
 800a4de:	18d2      	addlt	r2, r2, r3
 800a4e0:	bfa8      	it	ge
 800a4e2:	1b1c      	subge	r4, r3, r4
 800a4e4:	9b07      	ldr	r3, [sp, #28]
 800a4e6:	bfbe      	ittt	lt
 800a4e8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a4ea:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800a4ec:	2400      	movlt	r4, #0
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	bfb5      	itete	lt
 800a4f2:	eba8 0603 	sublt.w	r6, r8, r3
 800a4f6:	4646      	movge	r6, r8
 800a4f8:	2300      	movlt	r3, #0
 800a4fa:	9b07      	ldrge	r3, [sp, #28]
 800a4fc:	e730      	b.n	800a360 <_dtoa_r+0x730>
 800a4fe:	4646      	mov	r6, r8
 800a500:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a502:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a504:	e735      	b.n	800a372 <_dtoa_r+0x742>
 800a506:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a508:	e75c      	b.n	800a3c4 <_dtoa_r+0x794>
 800a50a:	2300      	movs	r3, #0
 800a50c:	e788      	b.n	800a420 <_dtoa_r+0x7f0>
 800a50e:	9b02      	ldr	r3, [sp, #8]
 800a510:	e786      	b.n	800a420 <_dtoa_r+0x7f0>
 800a512:	2300      	movs	r3, #0
 800a514:	930a      	str	r3, [sp, #40]	@ 0x28
 800a516:	e788      	b.n	800a42a <_dtoa_r+0x7fa>
 800a518:	d09f      	beq.n	800a45a <_dtoa_r+0x82a>
 800a51a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a51c:	331c      	adds	r3, #28
 800a51e:	441a      	add	r2, r3
 800a520:	4498      	add	r8, r3
 800a522:	441e      	add	r6, r3
 800a524:	9209      	str	r2, [sp, #36]	@ 0x24
 800a526:	e798      	b.n	800a45a <_dtoa_r+0x82a>
 800a528:	4603      	mov	r3, r0
 800a52a:	e7f6      	b.n	800a51a <_dtoa_r+0x8ea>
 800a52c:	9b07      	ldr	r3, [sp, #28]
 800a52e:	9704      	str	r7, [sp, #16]
 800a530:	2b00      	cmp	r3, #0
 800a532:	dc20      	bgt.n	800a576 <_dtoa_r+0x946>
 800a534:	9308      	str	r3, [sp, #32]
 800a536:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a538:	2b02      	cmp	r3, #2
 800a53a:	dd1e      	ble.n	800a57a <_dtoa_r+0x94a>
 800a53c:	9b08      	ldr	r3, [sp, #32]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	f47f aebc 	bne.w	800a2bc <_dtoa_r+0x68c>
 800a544:	4621      	mov	r1, r4
 800a546:	2205      	movs	r2, #5
 800a548:	4658      	mov	r0, fp
 800a54a:	f000 fa99 	bl	800aa80 <__multadd>
 800a54e:	4601      	mov	r1, r0
 800a550:	4604      	mov	r4, r0
 800a552:	4648      	mov	r0, r9
 800a554:	f000 fcaa 	bl	800aeac <__mcmp>
 800a558:	2800      	cmp	r0, #0
 800a55a:	f77f aeaf 	ble.w	800a2bc <_dtoa_r+0x68c>
 800a55e:	2331      	movs	r3, #49	@ 0x31
 800a560:	4656      	mov	r6, sl
 800a562:	f806 3b01 	strb.w	r3, [r6], #1
 800a566:	9b04      	ldr	r3, [sp, #16]
 800a568:	3301      	adds	r3, #1
 800a56a:	9304      	str	r3, [sp, #16]
 800a56c:	e6aa      	b.n	800a2c4 <_dtoa_r+0x694>
 800a56e:	9c07      	ldr	r4, [sp, #28]
 800a570:	9704      	str	r7, [sp, #16]
 800a572:	4625      	mov	r5, r4
 800a574:	e7f3      	b.n	800a55e <_dtoa_r+0x92e>
 800a576:	9b07      	ldr	r3, [sp, #28]
 800a578:	9308      	str	r3, [sp, #32]
 800a57a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	f000 8104 	beq.w	800a78a <_dtoa_r+0xb5a>
 800a582:	2e00      	cmp	r6, #0
 800a584:	dd05      	ble.n	800a592 <_dtoa_r+0x962>
 800a586:	4629      	mov	r1, r5
 800a588:	4632      	mov	r2, r6
 800a58a:	4658      	mov	r0, fp
 800a58c:	f000 fc22 	bl	800add4 <__lshift>
 800a590:	4605      	mov	r5, r0
 800a592:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a594:	2b00      	cmp	r3, #0
 800a596:	d05a      	beq.n	800a64e <_dtoa_r+0xa1e>
 800a598:	4658      	mov	r0, fp
 800a59a:	6869      	ldr	r1, [r5, #4]
 800a59c:	f000 fa0e 	bl	800a9bc <_Balloc>
 800a5a0:	4606      	mov	r6, r0
 800a5a2:	b928      	cbnz	r0, 800a5b0 <_dtoa_r+0x980>
 800a5a4:	4602      	mov	r2, r0
 800a5a6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a5aa:	4b83      	ldr	r3, [pc, #524]	@ (800a7b8 <_dtoa_r+0xb88>)
 800a5ac:	f7ff bb54 	b.w	8009c58 <_dtoa_r+0x28>
 800a5b0:	692a      	ldr	r2, [r5, #16]
 800a5b2:	f105 010c 	add.w	r1, r5, #12
 800a5b6:	3202      	adds	r2, #2
 800a5b8:	0092      	lsls	r2, r2, #2
 800a5ba:	300c      	adds	r0, #12
 800a5bc:	f7ff faa1 	bl	8009b02 <memcpy>
 800a5c0:	2201      	movs	r2, #1
 800a5c2:	4631      	mov	r1, r6
 800a5c4:	4658      	mov	r0, fp
 800a5c6:	f000 fc05 	bl	800add4 <__lshift>
 800a5ca:	462f      	mov	r7, r5
 800a5cc:	4605      	mov	r5, r0
 800a5ce:	f10a 0301 	add.w	r3, sl, #1
 800a5d2:	9307      	str	r3, [sp, #28]
 800a5d4:	9b08      	ldr	r3, [sp, #32]
 800a5d6:	4453      	add	r3, sl
 800a5d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a5da:	9b02      	ldr	r3, [sp, #8]
 800a5dc:	f003 0301 	and.w	r3, r3, #1
 800a5e0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a5e2:	9b07      	ldr	r3, [sp, #28]
 800a5e4:	4621      	mov	r1, r4
 800a5e6:	3b01      	subs	r3, #1
 800a5e8:	4648      	mov	r0, r9
 800a5ea:	9302      	str	r3, [sp, #8]
 800a5ec:	f7ff fa97 	bl	8009b1e <quorem>
 800a5f0:	4639      	mov	r1, r7
 800a5f2:	9008      	str	r0, [sp, #32]
 800a5f4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a5f8:	4648      	mov	r0, r9
 800a5fa:	f000 fc57 	bl	800aeac <__mcmp>
 800a5fe:	462a      	mov	r2, r5
 800a600:	9009      	str	r0, [sp, #36]	@ 0x24
 800a602:	4621      	mov	r1, r4
 800a604:	4658      	mov	r0, fp
 800a606:	f000 fc6d 	bl	800aee4 <__mdiff>
 800a60a:	68c2      	ldr	r2, [r0, #12]
 800a60c:	4606      	mov	r6, r0
 800a60e:	bb02      	cbnz	r2, 800a652 <_dtoa_r+0xa22>
 800a610:	4601      	mov	r1, r0
 800a612:	4648      	mov	r0, r9
 800a614:	f000 fc4a 	bl	800aeac <__mcmp>
 800a618:	4602      	mov	r2, r0
 800a61a:	4631      	mov	r1, r6
 800a61c:	4658      	mov	r0, fp
 800a61e:	920c      	str	r2, [sp, #48]	@ 0x30
 800a620:	f000 fa0c 	bl	800aa3c <_Bfree>
 800a624:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a626:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a628:	9e07      	ldr	r6, [sp, #28]
 800a62a:	ea43 0102 	orr.w	r1, r3, r2
 800a62e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a630:	4319      	orrs	r1, r3
 800a632:	d110      	bne.n	800a656 <_dtoa_r+0xa26>
 800a634:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a638:	d029      	beq.n	800a68e <_dtoa_r+0xa5e>
 800a63a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	dd02      	ble.n	800a646 <_dtoa_r+0xa16>
 800a640:	9b08      	ldr	r3, [sp, #32]
 800a642:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a646:	9b02      	ldr	r3, [sp, #8]
 800a648:	f883 8000 	strb.w	r8, [r3]
 800a64c:	e63b      	b.n	800a2c6 <_dtoa_r+0x696>
 800a64e:	4628      	mov	r0, r5
 800a650:	e7bb      	b.n	800a5ca <_dtoa_r+0x99a>
 800a652:	2201      	movs	r2, #1
 800a654:	e7e1      	b.n	800a61a <_dtoa_r+0x9ea>
 800a656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a658:	2b00      	cmp	r3, #0
 800a65a:	db04      	blt.n	800a666 <_dtoa_r+0xa36>
 800a65c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800a65e:	430b      	orrs	r3, r1
 800a660:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a662:	430b      	orrs	r3, r1
 800a664:	d120      	bne.n	800a6a8 <_dtoa_r+0xa78>
 800a666:	2a00      	cmp	r2, #0
 800a668:	dded      	ble.n	800a646 <_dtoa_r+0xa16>
 800a66a:	4649      	mov	r1, r9
 800a66c:	2201      	movs	r2, #1
 800a66e:	4658      	mov	r0, fp
 800a670:	f000 fbb0 	bl	800add4 <__lshift>
 800a674:	4621      	mov	r1, r4
 800a676:	4681      	mov	r9, r0
 800a678:	f000 fc18 	bl	800aeac <__mcmp>
 800a67c:	2800      	cmp	r0, #0
 800a67e:	dc03      	bgt.n	800a688 <_dtoa_r+0xa58>
 800a680:	d1e1      	bne.n	800a646 <_dtoa_r+0xa16>
 800a682:	f018 0f01 	tst.w	r8, #1
 800a686:	d0de      	beq.n	800a646 <_dtoa_r+0xa16>
 800a688:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a68c:	d1d8      	bne.n	800a640 <_dtoa_r+0xa10>
 800a68e:	2339      	movs	r3, #57	@ 0x39
 800a690:	9a02      	ldr	r2, [sp, #8]
 800a692:	7013      	strb	r3, [r2, #0]
 800a694:	4633      	mov	r3, r6
 800a696:	461e      	mov	r6, r3
 800a698:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a69c:	3b01      	subs	r3, #1
 800a69e:	2a39      	cmp	r2, #57	@ 0x39
 800a6a0:	d052      	beq.n	800a748 <_dtoa_r+0xb18>
 800a6a2:	3201      	adds	r2, #1
 800a6a4:	701a      	strb	r2, [r3, #0]
 800a6a6:	e60e      	b.n	800a2c6 <_dtoa_r+0x696>
 800a6a8:	2a00      	cmp	r2, #0
 800a6aa:	dd07      	ble.n	800a6bc <_dtoa_r+0xa8c>
 800a6ac:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a6b0:	d0ed      	beq.n	800a68e <_dtoa_r+0xa5e>
 800a6b2:	9a02      	ldr	r2, [sp, #8]
 800a6b4:	f108 0301 	add.w	r3, r8, #1
 800a6b8:	7013      	strb	r3, [r2, #0]
 800a6ba:	e604      	b.n	800a2c6 <_dtoa_r+0x696>
 800a6bc:	9b07      	ldr	r3, [sp, #28]
 800a6be:	9a07      	ldr	r2, [sp, #28]
 800a6c0:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a6c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d028      	beq.n	800a71c <_dtoa_r+0xaec>
 800a6ca:	4649      	mov	r1, r9
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	220a      	movs	r2, #10
 800a6d0:	4658      	mov	r0, fp
 800a6d2:	f000 f9d5 	bl	800aa80 <__multadd>
 800a6d6:	42af      	cmp	r7, r5
 800a6d8:	4681      	mov	r9, r0
 800a6da:	f04f 0300 	mov.w	r3, #0
 800a6de:	f04f 020a 	mov.w	r2, #10
 800a6e2:	4639      	mov	r1, r7
 800a6e4:	4658      	mov	r0, fp
 800a6e6:	d107      	bne.n	800a6f8 <_dtoa_r+0xac8>
 800a6e8:	f000 f9ca 	bl	800aa80 <__multadd>
 800a6ec:	4607      	mov	r7, r0
 800a6ee:	4605      	mov	r5, r0
 800a6f0:	9b07      	ldr	r3, [sp, #28]
 800a6f2:	3301      	adds	r3, #1
 800a6f4:	9307      	str	r3, [sp, #28]
 800a6f6:	e774      	b.n	800a5e2 <_dtoa_r+0x9b2>
 800a6f8:	f000 f9c2 	bl	800aa80 <__multadd>
 800a6fc:	4629      	mov	r1, r5
 800a6fe:	4607      	mov	r7, r0
 800a700:	2300      	movs	r3, #0
 800a702:	220a      	movs	r2, #10
 800a704:	4658      	mov	r0, fp
 800a706:	f000 f9bb 	bl	800aa80 <__multadd>
 800a70a:	4605      	mov	r5, r0
 800a70c:	e7f0      	b.n	800a6f0 <_dtoa_r+0xac0>
 800a70e:	9b08      	ldr	r3, [sp, #32]
 800a710:	2700      	movs	r7, #0
 800a712:	2b00      	cmp	r3, #0
 800a714:	bfcc      	ite	gt
 800a716:	461e      	movgt	r6, r3
 800a718:	2601      	movle	r6, #1
 800a71a:	4456      	add	r6, sl
 800a71c:	4649      	mov	r1, r9
 800a71e:	2201      	movs	r2, #1
 800a720:	4658      	mov	r0, fp
 800a722:	f000 fb57 	bl	800add4 <__lshift>
 800a726:	4621      	mov	r1, r4
 800a728:	4681      	mov	r9, r0
 800a72a:	f000 fbbf 	bl	800aeac <__mcmp>
 800a72e:	2800      	cmp	r0, #0
 800a730:	dcb0      	bgt.n	800a694 <_dtoa_r+0xa64>
 800a732:	d102      	bne.n	800a73a <_dtoa_r+0xb0a>
 800a734:	f018 0f01 	tst.w	r8, #1
 800a738:	d1ac      	bne.n	800a694 <_dtoa_r+0xa64>
 800a73a:	4633      	mov	r3, r6
 800a73c:	461e      	mov	r6, r3
 800a73e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a742:	2a30      	cmp	r2, #48	@ 0x30
 800a744:	d0fa      	beq.n	800a73c <_dtoa_r+0xb0c>
 800a746:	e5be      	b.n	800a2c6 <_dtoa_r+0x696>
 800a748:	459a      	cmp	sl, r3
 800a74a:	d1a4      	bne.n	800a696 <_dtoa_r+0xa66>
 800a74c:	9b04      	ldr	r3, [sp, #16]
 800a74e:	3301      	adds	r3, #1
 800a750:	9304      	str	r3, [sp, #16]
 800a752:	2331      	movs	r3, #49	@ 0x31
 800a754:	f88a 3000 	strb.w	r3, [sl]
 800a758:	e5b5      	b.n	800a2c6 <_dtoa_r+0x696>
 800a75a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a75c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a7bc <_dtoa_r+0xb8c>
 800a760:	b11b      	cbz	r3, 800a76a <_dtoa_r+0xb3a>
 800a762:	f10a 0308 	add.w	r3, sl, #8
 800a766:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a768:	6013      	str	r3, [r2, #0]
 800a76a:	4650      	mov	r0, sl
 800a76c:	b017      	add	sp, #92	@ 0x5c
 800a76e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a772:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a774:	2b01      	cmp	r3, #1
 800a776:	f77f ae3d 	ble.w	800a3f4 <_dtoa_r+0x7c4>
 800a77a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a77c:	930a      	str	r3, [sp, #40]	@ 0x28
 800a77e:	2001      	movs	r0, #1
 800a780:	e65b      	b.n	800a43a <_dtoa_r+0x80a>
 800a782:	9b08      	ldr	r3, [sp, #32]
 800a784:	2b00      	cmp	r3, #0
 800a786:	f77f aed6 	ble.w	800a536 <_dtoa_r+0x906>
 800a78a:	4656      	mov	r6, sl
 800a78c:	4621      	mov	r1, r4
 800a78e:	4648      	mov	r0, r9
 800a790:	f7ff f9c5 	bl	8009b1e <quorem>
 800a794:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a798:	9b08      	ldr	r3, [sp, #32]
 800a79a:	f806 8b01 	strb.w	r8, [r6], #1
 800a79e:	eba6 020a 	sub.w	r2, r6, sl
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	ddb3      	ble.n	800a70e <_dtoa_r+0xade>
 800a7a6:	4649      	mov	r1, r9
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	220a      	movs	r2, #10
 800a7ac:	4658      	mov	r0, fp
 800a7ae:	f000 f967 	bl	800aa80 <__multadd>
 800a7b2:	4681      	mov	r9, r0
 800a7b4:	e7ea      	b.n	800a78c <_dtoa_r+0xb5c>
 800a7b6:	bf00      	nop
 800a7b8:	0800bf13 	.word	0x0800bf13
 800a7bc:	0800be97 	.word	0x0800be97

0800a7c0 <_free_r>:
 800a7c0:	b538      	push	{r3, r4, r5, lr}
 800a7c2:	4605      	mov	r5, r0
 800a7c4:	2900      	cmp	r1, #0
 800a7c6:	d040      	beq.n	800a84a <_free_r+0x8a>
 800a7c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7cc:	1f0c      	subs	r4, r1, #4
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	bfb8      	it	lt
 800a7d2:	18e4      	addlt	r4, r4, r3
 800a7d4:	f000 f8e6 	bl	800a9a4 <__malloc_lock>
 800a7d8:	4a1c      	ldr	r2, [pc, #112]	@ (800a84c <_free_r+0x8c>)
 800a7da:	6813      	ldr	r3, [r2, #0]
 800a7dc:	b933      	cbnz	r3, 800a7ec <_free_r+0x2c>
 800a7de:	6063      	str	r3, [r4, #4]
 800a7e0:	6014      	str	r4, [r2, #0]
 800a7e2:	4628      	mov	r0, r5
 800a7e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7e8:	f000 b8e2 	b.w	800a9b0 <__malloc_unlock>
 800a7ec:	42a3      	cmp	r3, r4
 800a7ee:	d908      	bls.n	800a802 <_free_r+0x42>
 800a7f0:	6820      	ldr	r0, [r4, #0]
 800a7f2:	1821      	adds	r1, r4, r0
 800a7f4:	428b      	cmp	r3, r1
 800a7f6:	bf01      	itttt	eq
 800a7f8:	6819      	ldreq	r1, [r3, #0]
 800a7fa:	685b      	ldreq	r3, [r3, #4]
 800a7fc:	1809      	addeq	r1, r1, r0
 800a7fe:	6021      	streq	r1, [r4, #0]
 800a800:	e7ed      	b.n	800a7de <_free_r+0x1e>
 800a802:	461a      	mov	r2, r3
 800a804:	685b      	ldr	r3, [r3, #4]
 800a806:	b10b      	cbz	r3, 800a80c <_free_r+0x4c>
 800a808:	42a3      	cmp	r3, r4
 800a80a:	d9fa      	bls.n	800a802 <_free_r+0x42>
 800a80c:	6811      	ldr	r1, [r2, #0]
 800a80e:	1850      	adds	r0, r2, r1
 800a810:	42a0      	cmp	r0, r4
 800a812:	d10b      	bne.n	800a82c <_free_r+0x6c>
 800a814:	6820      	ldr	r0, [r4, #0]
 800a816:	4401      	add	r1, r0
 800a818:	1850      	adds	r0, r2, r1
 800a81a:	4283      	cmp	r3, r0
 800a81c:	6011      	str	r1, [r2, #0]
 800a81e:	d1e0      	bne.n	800a7e2 <_free_r+0x22>
 800a820:	6818      	ldr	r0, [r3, #0]
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	4408      	add	r0, r1
 800a826:	6010      	str	r0, [r2, #0]
 800a828:	6053      	str	r3, [r2, #4]
 800a82a:	e7da      	b.n	800a7e2 <_free_r+0x22>
 800a82c:	d902      	bls.n	800a834 <_free_r+0x74>
 800a82e:	230c      	movs	r3, #12
 800a830:	602b      	str	r3, [r5, #0]
 800a832:	e7d6      	b.n	800a7e2 <_free_r+0x22>
 800a834:	6820      	ldr	r0, [r4, #0]
 800a836:	1821      	adds	r1, r4, r0
 800a838:	428b      	cmp	r3, r1
 800a83a:	bf01      	itttt	eq
 800a83c:	6819      	ldreq	r1, [r3, #0]
 800a83e:	685b      	ldreq	r3, [r3, #4]
 800a840:	1809      	addeq	r1, r1, r0
 800a842:	6021      	streq	r1, [r4, #0]
 800a844:	6063      	str	r3, [r4, #4]
 800a846:	6054      	str	r4, [r2, #4]
 800a848:	e7cb      	b.n	800a7e2 <_free_r+0x22>
 800a84a:	bd38      	pop	{r3, r4, r5, pc}
 800a84c:	20004900 	.word	0x20004900

0800a850 <malloc>:
 800a850:	4b02      	ldr	r3, [pc, #8]	@ (800a85c <malloc+0xc>)
 800a852:	4601      	mov	r1, r0
 800a854:	6818      	ldr	r0, [r3, #0]
 800a856:	f000 b825 	b.w	800a8a4 <_malloc_r>
 800a85a:	bf00      	nop
 800a85c:	20000098 	.word	0x20000098

0800a860 <sbrk_aligned>:
 800a860:	b570      	push	{r4, r5, r6, lr}
 800a862:	4e0f      	ldr	r6, [pc, #60]	@ (800a8a0 <sbrk_aligned+0x40>)
 800a864:	460c      	mov	r4, r1
 800a866:	6831      	ldr	r1, [r6, #0]
 800a868:	4605      	mov	r5, r0
 800a86a:	b911      	cbnz	r1, 800a872 <sbrk_aligned+0x12>
 800a86c:	f000 fe26 	bl	800b4bc <_sbrk_r>
 800a870:	6030      	str	r0, [r6, #0]
 800a872:	4621      	mov	r1, r4
 800a874:	4628      	mov	r0, r5
 800a876:	f000 fe21 	bl	800b4bc <_sbrk_r>
 800a87a:	1c43      	adds	r3, r0, #1
 800a87c:	d103      	bne.n	800a886 <sbrk_aligned+0x26>
 800a87e:	f04f 34ff 	mov.w	r4, #4294967295
 800a882:	4620      	mov	r0, r4
 800a884:	bd70      	pop	{r4, r5, r6, pc}
 800a886:	1cc4      	adds	r4, r0, #3
 800a888:	f024 0403 	bic.w	r4, r4, #3
 800a88c:	42a0      	cmp	r0, r4
 800a88e:	d0f8      	beq.n	800a882 <sbrk_aligned+0x22>
 800a890:	1a21      	subs	r1, r4, r0
 800a892:	4628      	mov	r0, r5
 800a894:	f000 fe12 	bl	800b4bc <_sbrk_r>
 800a898:	3001      	adds	r0, #1
 800a89a:	d1f2      	bne.n	800a882 <sbrk_aligned+0x22>
 800a89c:	e7ef      	b.n	800a87e <sbrk_aligned+0x1e>
 800a89e:	bf00      	nop
 800a8a0:	200048fc 	.word	0x200048fc

0800a8a4 <_malloc_r>:
 800a8a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8a8:	1ccd      	adds	r5, r1, #3
 800a8aa:	f025 0503 	bic.w	r5, r5, #3
 800a8ae:	3508      	adds	r5, #8
 800a8b0:	2d0c      	cmp	r5, #12
 800a8b2:	bf38      	it	cc
 800a8b4:	250c      	movcc	r5, #12
 800a8b6:	2d00      	cmp	r5, #0
 800a8b8:	4606      	mov	r6, r0
 800a8ba:	db01      	blt.n	800a8c0 <_malloc_r+0x1c>
 800a8bc:	42a9      	cmp	r1, r5
 800a8be:	d904      	bls.n	800a8ca <_malloc_r+0x26>
 800a8c0:	230c      	movs	r3, #12
 800a8c2:	6033      	str	r3, [r6, #0]
 800a8c4:	2000      	movs	r0, #0
 800a8c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a9a0 <_malloc_r+0xfc>
 800a8ce:	f000 f869 	bl	800a9a4 <__malloc_lock>
 800a8d2:	f8d8 3000 	ldr.w	r3, [r8]
 800a8d6:	461c      	mov	r4, r3
 800a8d8:	bb44      	cbnz	r4, 800a92c <_malloc_r+0x88>
 800a8da:	4629      	mov	r1, r5
 800a8dc:	4630      	mov	r0, r6
 800a8de:	f7ff ffbf 	bl	800a860 <sbrk_aligned>
 800a8e2:	1c43      	adds	r3, r0, #1
 800a8e4:	4604      	mov	r4, r0
 800a8e6:	d158      	bne.n	800a99a <_malloc_r+0xf6>
 800a8e8:	f8d8 4000 	ldr.w	r4, [r8]
 800a8ec:	4627      	mov	r7, r4
 800a8ee:	2f00      	cmp	r7, #0
 800a8f0:	d143      	bne.n	800a97a <_malloc_r+0xd6>
 800a8f2:	2c00      	cmp	r4, #0
 800a8f4:	d04b      	beq.n	800a98e <_malloc_r+0xea>
 800a8f6:	6823      	ldr	r3, [r4, #0]
 800a8f8:	4639      	mov	r1, r7
 800a8fa:	4630      	mov	r0, r6
 800a8fc:	eb04 0903 	add.w	r9, r4, r3
 800a900:	f000 fddc 	bl	800b4bc <_sbrk_r>
 800a904:	4581      	cmp	r9, r0
 800a906:	d142      	bne.n	800a98e <_malloc_r+0xea>
 800a908:	6821      	ldr	r1, [r4, #0]
 800a90a:	4630      	mov	r0, r6
 800a90c:	1a6d      	subs	r5, r5, r1
 800a90e:	4629      	mov	r1, r5
 800a910:	f7ff ffa6 	bl	800a860 <sbrk_aligned>
 800a914:	3001      	adds	r0, #1
 800a916:	d03a      	beq.n	800a98e <_malloc_r+0xea>
 800a918:	6823      	ldr	r3, [r4, #0]
 800a91a:	442b      	add	r3, r5
 800a91c:	6023      	str	r3, [r4, #0]
 800a91e:	f8d8 3000 	ldr.w	r3, [r8]
 800a922:	685a      	ldr	r2, [r3, #4]
 800a924:	bb62      	cbnz	r2, 800a980 <_malloc_r+0xdc>
 800a926:	f8c8 7000 	str.w	r7, [r8]
 800a92a:	e00f      	b.n	800a94c <_malloc_r+0xa8>
 800a92c:	6822      	ldr	r2, [r4, #0]
 800a92e:	1b52      	subs	r2, r2, r5
 800a930:	d420      	bmi.n	800a974 <_malloc_r+0xd0>
 800a932:	2a0b      	cmp	r2, #11
 800a934:	d917      	bls.n	800a966 <_malloc_r+0xc2>
 800a936:	1961      	adds	r1, r4, r5
 800a938:	42a3      	cmp	r3, r4
 800a93a:	6025      	str	r5, [r4, #0]
 800a93c:	bf18      	it	ne
 800a93e:	6059      	strne	r1, [r3, #4]
 800a940:	6863      	ldr	r3, [r4, #4]
 800a942:	bf08      	it	eq
 800a944:	f8c8 1000 	streq.w	r1, [r8]
 800a948:	5162      	str	r2, [r4, r5]
 800a94a:	604b      	str	r3, [r1, #4]
 800a94c:	4630      	mov	r0, r6
 800a94e:	f000 f82f 	bl	800a9b0 <__malloc_unlock>
 800a952:	f104 000b 	add.w	r0, r4, #11
 800a956:	1d23      	adds	r3, r4, #4
 800a958:	f020 0007 	bic.w	r0, r0, #7
 800a95c:	1ac2      	subs	r2, r0, r3
 800a95e:	bf1c      	itt	ne
 800a960:	1a1b      	subne	r3, r3, r0
 800a962:	50a3      	strne	r3, [r4, r2]
 800a964:	e7af      	b.n	800a8c6 <_malloc_r+0x22>
 800a966:	6862      	ldr	r2, [r4, #4]
 800a968:	42a3      	cmp	r3, r4
 800a96a:	bf0c      	ite	eq
 800a96c:	f8c8 2000 	streq.w	r2, [r8]
 800a970:	605a      	strne	r2, [r3, #4]
 800a972:	e7eb      	b.n	800a94c <_malloc_r+0xa8>
 800a974:	4623      	mov	r3, r4
 800a976:	6864      	ldr	r4, [r4, #4]
 800a978:	e7ae      	b.n	800a8d8 <_malloc_r+0x34>
 800a97a:	463c      	mov	r4, r7
 800a97c:	687f      	ldr	r7, [r7, #4]
 800a97e:	e7b6      	b.n	800a8ee <_malloc_r+0x4a>
 800a980:	461a      	mov	r2, r3
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	42a3      	cmp	r3, r4
 800a986:	d1fb      	bne.n	800a980 <_malloc_r+0xdc>
 800a988:	2300      	movs	r3, #0
 800a98a:	6053      	str	r3, [r2, #4]
 800a98c:	e7de      	b.n	800a94c <_malloc_r+0xa8>
 800a98e:	230c      	movs	r3, #12
 800a990:	4630      	mov	r0, r6
 800a992:	6033      	str	r3, [r6, #0]
 800a994:	f000 f80c 	bl	800a9b0 <__malloc_unlock>
 800a998:	e794      	b.n	800a8c4 <_malloc_r+0x20>
 800a99a:	6005      	str	r5, [r0, #0]
 800a99c:	e7d6      	b.n	800a94c <_malloc_r+0xa8>
 800a99e:	bf00      	nop
 800a9a0:	20004900 	.word	0x20004900

0800a9a4 <__malloc_lock>:
 800a9a4:	4801      	ldr	r0, [pc, #4]	@ (800a9ac <__malloc_lock+0x8>)
 800a9a6:	f7ff b89c 	b.w	8009ae2 <__retarget_lock_acquire_recursive>
 800a9aa:	bf00      	nop
 800a9ac:	200048f8 	.word	0x200048f8

0800a9b0 <__malloc_unlock>:
 800a9b0:	4801      	ldr	r0, [pc, #4]	@ (800a9b8 <__malloc_unlock+0x8>)
 800a9b2:	f7ff b897 	b.w	8009ae4 <__retarget_lock_release_recursive>
 800a9b6:	bf00      	nop
 800a9b8:	200048f8 	.word	0x200048f8

0800a9bc <_Balloc>:
 800a9bc:	b570      	push	{r4, r5, r6, lr}
 800a9be:	69c6      	ldr	r6, [r0, #28]
 800a9c0:	4604      	mov	r4, r0
 800a9c2:	460d      	mov	r5, r1
 800a9c4:	b976      	cbnz	r6, 800a9e4 <_Balloc+0x28>
 800a9c6:	2010      	movs	r0, #16
 800a9c8:	f7ff ff42 	bl	800a850 <malloc>
 800a9cc:	4602      	mov	r2, r0
 800a9ce:	61e0      	str	r0, [r4, #28]
 800a9d0:	b920      	cbnz	r0, 800a9dc <_Balloc+0x20>
 800a9d2:	216b      	movs	r1, #107	@ 0x6b
 800a9d4:	4b17      	ldr	r3, [pc, #92]	@ (800aa34 <_Balloc+0x78>)
 800a9d6:	4818      	ldr	r0, [pc, #96]	@ (800aa38 <_Balloc+0x7c>)
 800a9d8:	f000 fd80 	bl	800b4dc <__assert_func>
 800a9dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a9e0:	6006      	str	r6, [r0, #0]
 800a9e2:	60c6      	str	r6, [r0, #12]
 800a9e4:	69e6      	ldr	r6, [r4, #28]
 800a9e6:	68f3      	ldr	r3, [r6, #12]
 800a9e8:	b183      	cbz	r3, 800aa0c <_Balloc+0x50>
 800a9ea:	69e3      	ldr	r3, [r4, #28]
 800a9ec:	68db      	ldr	r3, [r3, #12]
 800a9ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a9f2:	b9b8      	cbnz	r0, 800aa24 <_Balloc+0x68>
 800a9f4:	2101      	movs	r1, #1
 800a9f6:	fa01 f605 	lsl.w	r6, r1, r5
 800a9fa:	1d72      	adds	r2, r6, #5
 800a9fc:	4620      	mov	r0, r4
 800a9fe:	0092      	lsls	r2, r2, #2
 800aa00:	f000 fd8a 	bl	800b518 <_calloc_r>
 800aa04:	b160      	cbz	r0, 800aa20 <_Balloc+0x64>
 800aa06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aa0a:	e00e      	b.n	800aa2a <_Balloc+0x6e>
 800aa0c:	2221      	movs	r2, #33	@ 0x21
 800aa0e:	2104      	movs	r1, #4
 800aa10:	4620      	mov	r0, r4
 800aa12:	f000 fd81 	bl	800b518 <_calloc_r>
 800aa16:	69e3      	ldr	r3, [r4, #28]
 800aa18:	60f0      	str	r0, [r6, #12]
 800aa1a:	68db      	ldr	r3, [r3, #12]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d1e4      	bne.n	800a9ea <_Balloc+0x2e>
 800aa20:	2000      	movs	r0, #0
 800aa22:	bd70      	pop	{r4, r5, r6, pc}
 800aa24:	6802      	ldr	r2, [r0, #0]
 800aa26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aa30:	e7f7      	b.n	800aa22 <_Balloc+0x66>
 800aa32:	bf00      	nop
 800aa34:	0800bea4 	.word	0x0800bea4
 800aa38:	0800bf24 	.word	0x0800bf24

0800aa3c <_Bfree>:
 800aa3c:	b570      	push	{r4, r5, r6, lr}
 800aa3e:	69c6      	ldr	r6, [r0, #28]
 800aa40:	4605      	mov	r5, r0
 800aa42:	460c      	mov	r4, r1
 800aa44:	b976      	cbnz	r6, 800aa64 <_Bfree+0x28>
 800aa46:	2010      	movs	r0, #16
 800aa48:	f7ff ff02 	bl	800a850 <malloc>
 800aa4c:	4602      	mov	r2, r0
 800aa4e:	61e8      	str	r0, [r5, #28]
 800aa50:	b920      	cbnz	r0, 800aa5c <_Bfree+0x20>
 800aa52:	218f      	movs	r1, #143	@ 0x8f
 800aa54:	4b08      	ldr	r3, [pc, #32]	@ (800aa78 <_Bfree+0x3c>)
 800aa56:	4809      	ldr	r0, [pc, #36]	@ (800aa7c <_Bfree+0x40>)
 800aa58:	f000 fd40 	bl	800b4dc <__assert_func>
 800aa5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa60:	6006      	str	r6, [r0, #0]
 800aa62:	60c6      	str	r6, [r0, #12]
 800aa64:	b13c      	cbz	r4, 800aa76 <_Bfree+0x3a>
 800aa66:	69eb      	ldr	r3, [r5, #28]
 800aa68:	6862      	ldr	r2, [r4, #4]
 800aa6a:	68db      	ldr	r3, [r3, #12]
 800aa6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aa70:	6021      	str	r1, [r4, #0]
 800aa72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aa76:	bd70      	pop	{r4, r5, r6, pc}
 800aa78:	0800bea4 	.word	0x0800bea4
 800aa7c:	0800bf24 	.word	0x0800bf24

0800aa80 <__multadd>:
 800aa80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa84:	4607      	mov	r7, r0
 800aa86:	460c      	mov	r4, r1
 800aa88:	461e      	mov	r6, r3
 800aa8a:	2000      	movs	r0, #0
 800aa8c:	690d      	ldr	r5, [r1, #16]
 800aa8e:	f101 0c14 	add.w	ip, r1, #20
 800aa92:	f8dc 3000 	ldr.w	r3, [ip]
 800aa96:	3001      	adds	r0, #1
 800aa98:	b299      	uxth	r1, r3
 800aa9a:	fb02 6101 	mla	r1, r2, r1, r6
 800aa9e:	0c1e      	lsrs	r6, r3, #16
 800aaa0:	0c0b      	lsrs	r3, r1, #16
 800aaa2:	fb02 3306 	mla	r3, r2, r6, r3
 800aaa6:	b289      	uxth	r1, r1
 800aaa8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aaac:	4285      	cmp	r5, r0
 800aaae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aab2:	f84c 1b04 	str.w	r1, [ip], #4
 800aab6:	dcec      	bgt.n	800aa92 <__multadd+0x12>
 800aab8:	b30e      	cbz	r6, 800aafe <__multadd+0x7e>
 800aaba:	68a3      	ldr	r3, [r4, #8]
 800aabc:	42ab      	cmp	r3, r5
 800aabe:	dc19      	bgt.n	800aaf4 <__multadd+0x74>
 800aac0:	6861      	ldr	r1, [r4, #4]
 800aac2:	4638      	mov	r0, r7
 800aac4:	3101      	adds	r1, #1
 800aac6:	f7ff ff79 	bl	800a9bc <_Balloc>
 800aaca:	4680      	mov	r8, r0
 800aacc:	b928      	cbnz	r0, 800aada <__multadd+0x5a>
 800aace:	4602      	mov	r2, r0
 800aad0:	21ba      	movs	r1, #186	@ 0xba
 800aad2:	4b0c      	ldr	r3, [pc, #48]	@ (800ab04 <__multadd+0x84>)
 800aad4:	480c      	ldr	r0, [pc, #48]	@ (800ab08 <__multadd+0x88>)
 800aad6:	f000 fd01 	bl	800b4dc <__assert_func>
 800aada:	6922      	ldr	r2, [r4, #16]
 800aadc:	f104 010c 	add.w	r1, r4, #12
 800aae0:	3202      	adds	r2, #2
 800aae2:	0092      	lsls	r2, r2, #2
 800aae4:	300c      	adds	r0, #12
 800aae6:	f7ff f80c 	bl	8009b02 <memcpy>
 800aaea:	4621      	mov	r1, r4
 800aaec:	4638      	mov	r0, r7
 800aaee:	f7ff ffa5 	bl	800aa3c <_Bfree>
 800aaf2:	4644      	mov	r4, r8
 800aaf4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aaf8:	3501      	adds	r5, #1
 800aafa:	615e      	str	r6, [r3, #20]
 800aafc:	6125      	str	r5, [r4, #16]
 800aafe:	4620      	mov	r0, r4
 800ab00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab04:	0800bf13 	.word	0x0800bf13
 800ab08:	0800bf24 	.word	0x0800bf24

0800ab0c <__hi0bits>:
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ab12:	bf3a      	itte	cc
 800ab14:	0403      	lslcc	r3, r0, #16
 800ab16:	2010      	movcc	r0, #16
 800ab18:	2000      	movcs	r0, #0
 800ab1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ab1e:	bf3c      	itt	cc
 800ab20:	021b      	lslcc	r3, r3, #8
 800ab22:	3008      	addcc	r0, #8
 800ab24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab28:	bf3c      	itt	cc
 800ab2a:	011b      	lslcc	r3, r3, #4
 800ab2c:	3004      	addcc	r0, #4
 800ab2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab32:	bf3c      	itt	cc
 800ab34:	009b      	lslcc	r3, r3, #2
 800ab36:	3002      	addcc	r0, #2
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	db05      	blt.n	800ab48 <__hi0bits+0x3c>
 800ab3c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ab40:	f100 0001 	add.w	r0, r0, #1
 800ab44:	bf08      	it	eq
 800ab46:	2020      	moveq	r0, #32
 800ab48:	4770      	bx	lr

0800ab4a <__lo0bits>:
 800ab4a:	6803      	ldr	r3, [r0, #0]
 800ab4c:	4602      	mov	r2, r0
 800ab4e:	f013 0007 	ands.w	r0, r3, #7
 800ab52:	d00b      	beq.n	800ab6c <__lo0bits+0x22>
 800ab54:	07d9      	lsls	r1, r3, #31
 800ab56:	d421      	bmi.n	800ab9c <__lo0bits+0x52>
 800ab58:	0798      	lsls	r0, r3, #30
 800ab5a:	bf49      	itett	mi
 800ab5c:	085b      	lsrmi	r3, r3, #1
 800ab5e:	089b      	lsrpl	r3, r3, #2
 800ab60:	2001      	movmi	r0, #1
 800ab62:	6013      	strmi	r3, [r2, #0]
 800ab64:	bf5c      	itt	pl
 800ab66:	2002      	movpl	r0, #2
 800ab68:	6013      	strpl	r3, [r2, #0]
 800ab6a:	4770      	bx	lr
 800ab6c:	b299      	uxth	r1, r3
 800ab6e:	b909      	cbnz	r1, 800ab74 <__lo0bits+0x2a>
 800ab70:	2010      	movs	r0, #16
 800ab72:	0c1b      	lsrs	r3, r3, #16
 800ab74:	b2d9      	uxtb	r1, r3
 800ab76:	b909      	cbnz	r1, 800ab7c <__lo0bits+0x32>
 800ab78:	3008      	adds	r0, #8
 800ab7a:	0a1b      	lsrs	r3, r3, #8
 800ab7c:	0719      	lsls	r1, r3, #28
 800ab7e:	bf04      	itt	eq
 800ab80:	091b      	lsreq	r3, r3, #4
 800ab82:	3004      	addeq	r0, #4
 800ab84:	0799      	lsls	r1, r3, #30
 800ab86:	bf04      	itt	eq
 800ab88:	089b      	lsreq	r3, r3, #2
 800ab8a:	3002      	addeq	r0, #2
 800ab8c:	07d9      	lsls	r1, r3, #31
 800ab8e:	d403      	bmi.n	800ab98 <__lo0bits+0x4e>
 800ab90:	085b      	lsrs	r3, r3, #1
 800ab92:	f100 0001 	add.w	r0, r0, #1
 800ab96:	d003      	beq.n	800aba0 <__lo0bits+0x56>
 800ab98:	6013      	str	r3, [r2, #0]
 800ab9a:	4770      	bx	lr
 800ab9c:	2000      	movs	r0, #0
 800ab9e:	4770      	bx	lr
 800aba0:	2020      	movs	r0, #32
 800aba2:	4770      	bx	lr

0800aba4 <__i2b>:
 800aba4:	b510      	push	{r4, lr}
 800aba6:	460c      	mov	r4, r1
 800aba8:	2101      	movs	r1, #1
 800abaa:	f7ff ff07 	bl	800a9bc <_Balloc>
 800abae:	4602      	mov	r2, r0
 800abb0:	b928      	cbnz	r0, 800abbe <__i2b+0x1a>
 800abb2:	f240 1145 	movw	r1, #325	@ 0x145
 800abb6:	4b04      	ldr	r3, [pc, #16]	@ (800abc8 <__i2b+0x24>)
 800abb8:	4804      	ldr	r0, [pc, #16]	@ (800abcc <__i2b+0x28>)
 800abba:	f000 fc8f 	bl	800b4dc <__assert_func>
 800abbe:	2301      	movs	r3, #1
 800abc0:	6144      	str	r4, [r0, #20]
 800abc2:	6103      	str	r3, [r0, #16]
 800abc4:	bd10      	pop	{r4, pc}
 800abc6:	bf00      	nop
 800abc8:	0800bf13 	.word	0x0800bf13
 800abcc:	0800bf24 	.word	0x0800bf24

0800abd0 <__multiply>:
 800abd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abd4:	4614      	mov	r4, r2
 800abd6:	690a      	ldr	r2, [r1, #16]
 800abd8:	6923      	ldr	r3, [r4, #16]
 800abda:	460f      	mov	r7, r1
 800abdc:	429a      	cmp	r2, r3
 800abde:	bfa2      	ittt	ge
 800abe0:	4623      	movge	r3, r4
 800abe2:	460c      	movge	r4, r1
 800abe4:	461f      	movge	r7, r3
 800abe6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800abea:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800abee:	68a3      	ldr	r3, [r4, #8]
 800abf0:	6861      	ldr	r1, [r4, #4]
 800abf2:	eb0a 0609 	add.w	r6, sl, r9
 800abf6:	42b3      	cmp	r3, r6
 800abf8:	b085      	sub	sp, #20
 800abfa:	bfb8      	it	lt
 800abfc:	3101      	addlt	r1, #1
 800abfe:	f7ff fedd 	bl	800a9bc <_Balloc>
 800ac02:	b930      	cbnz	r0, 800ac12 <__multiply+0x42>
 800ac04:	4602      	mov	r2, r0
 800ac06:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ac0a:	4b43      	ldr	r3, [pc, #268]	@ (800ad18 <__multiply+0x148>)
 800ac0c:	4843      	ldr	r0, [pc, #268]	@ (800ad1c <__multiply+0x14c>)
 800ac0e:	f000 fc65 	bl	800b4dc <__assert_func>
 800ac12:	f100 0514 	add.w	r5, r0, #20
 800ac16:	462b      	mov	r3, r5
 800ac18:	2200      	movs	r2, #0
 800ac1a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ac1e:	4543      	cmp	r3, r8
 800ac20:	d321      	bcc.n	800ac66 <__multiply+0x96>
 800ac22:	f107 0114 	add.w	r1, r7, #20
 800ac26:	f104 0214 	add.w	r2, r4, #20
 800ac2a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ac2e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ac32:	9302      	str	r3, [sp, #8]
 800ac34:	1b13      	subs	r3, r2, r4
 800ac36:	3b15      	subs	r3, #21
 800ac38:	f023 0303 	bic.w	r3, r3, #3
 800ac3c:	3304      	adds	r3, #4
 800ac3e:	f104 0715 	add.w	r7, r4, #21
 800ac42:	42ba      	cmp	r2, r7
 800ac44:	bf38      	it	cc
 800ac46:	2304      	movcc	r3, #4
 800ac48:	9301      	str	r3, [sp, #4]
 800ac4a:	9b02      	ldr	r3, [sp, #8]
 800ac4c:	9103      	str	r1, [sp, #12]
 800ac4e:	428b      	cmp	r3, r1
 800ac50:	d80c      	bhi.n	800ac6c <__multiply+0x9c>
 800ac52:	2e00      	cmp	r6, #0
 800ac54:	dd03      	ble.n	800ac5e <__multiply+0x8e>
 800ac56:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d05a      	beq.n	800ad14 <__multiply+0x144>
 800ac5e:	6106      	str	r6, [r0, #16]
 800ac60:	b005      	add	sp, #20
 800ac62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac66:	f843 2b04 	str.w	r2, [r3], #4
 800ac6a:	e7d8      	b.n	800ac1e <__multiply+0x4e>
 800ac6c:	f8b1 a000 	ldrh.w	sl, [r1]
 800ac70:	f1ba 0f00 	cmp.w	sl, #0
 800ac74:	d023      	beq.n	800acbe <__multiply+0xee>
 800ac76:	46a9      	mov	r9, r5
 800ac78:	f04f 0c00 	mov.w	ip, #0
 800ac7c:	f104 0e14 	add.w	lr, r4, #20
 800ac80:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ac84:	f8d9 3000 	ldr.w	r3, [r9]
 800ac88:	fa1f fb87 	uxth.w	fp, r7
 800ac8c:	b29b      	uxth	r3, r3
 800ac8e:	fb0a 330b 	mla	r3, sl, fp, r3
 800ac92:	4463      	add	r3, ip
 800ac94:	f8d9 c000 	ldr.w	ip, [r9]
 800ac98:	0c3f      	lsrs	r7, r7, #16
 800ac9a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800ac9e:	fb0a c707 	mla	r7, sl, r7, ip
 800aca2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800acac:	4572      	cmp	r2, lr
 800acae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800acb2:	f849 3b04 	str.w	r3, [r9], #4
 800acb6:	d8e3      	bhi.n	800ac80 <__multiply+0xb0>
 800acb8:	9b01      	ldr	r3, [sp, #4]
 800acba:	f845 c003 	str.w	ip, [r5, r3]
 800acbe:	9b03      	ldr	r3, [sp, #12]
 800acc0:	3104      	adds	r1, #4
 800acc2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800acc6:	f1b9 0f00 	cmp.w	r9, #0
 800acca:	d021      	beq.n	800ad10 <__multiply+0x140>
 800accc:	46ae      	mov	lr, r5
 800acce:	f04f 0a00 	mov.w	sl, #0
 800acd2:	682b      	ldr	r3, [r5, #0]
 800acd4:	f104 0c14 	add.w	ip, r4, #20
 800acd8:	f8bc b000 	ldrh.w	fp, [ip]
 800acdc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ace0:	b29b      	uxth	r3, r3
 800ace2:	fb09 770b 	mla	r7, r9, fp, r7
 800ace6:	4457      	add	r7, sl
 800ace8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800acec:	f84e 3b04 	str.w	r3, [lr], #4
 800acf0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800acf4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800acf8:	f8be 3000 	ldrh.w	r3, [lr]
 800acfc:	4562      	cmp	r2, ip
 800acfe:	fb09 330a 	mla	r3, r9, sl, r3
 800ad02:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ad06:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ad0a:	d8e5      	bhi.n	800acd8 <__multiply+0x108>
 800ad0c:	9f01      	ldr	r7, [sp, #4]
 800ad0e:	51eb      	str	r3, [r5, r7]
 800ad10:	3504      	adds	r5, #4
 800ad12:	e79a      	b.n	800ac4a <__multiply+0x7a>
 800ad14:	3e01      	subs	r6, #1
 800ad16:	e79c      	b.n	800ac52 <__multiply+0x82>
 800ad18:	0800bf13 	.word	0x0800bf13
 800ad1c:	0800bf24 	.word	0x0800bf24

0800ad20 <__pow5mult>:
 800ad20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad24:	4615      	mov	r5, r2
 800ad26:	f012 0203 	ands.w	r2, r2, #3
 800ad2a:	4607      	mov	r7, r0
 800ad2c:	460e      	mov	r6, r1
 800ad2e:	d007      	beq.n	800ad40 <__pow5mult+0x20>
 800ad30:	4c25      	ldr	r4, [pc, #148]	@ (800adc8 <__pow5mult+0xa8>)
 800ad32:	3a01      	subs	r2, #1
 800ad34:	2300      	movs	r3, #0
 800ad36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ad3a:	f7ff fea1 	bl	800aa80 <__multadd>
 800ad3e:	4606      	mov	r6, r0
 800ad40:	10ad      	asrs	r5, r5, #2
 800ad42:	d03d      	beq.n	800adc0 <__pow5mult+0xa0>
 800ad44:	69fc      	ldr	r4, [r7, #28]
 800ad46:	b97c      	cbnz	r4, 800ad68 <__pow5mult+0x48>
 800ad48:	2010      	movs	r0, #16
 800ad4a:	f7ff fd81 	bl	800a850 <malloc>
 800ad4e:	4602      	mov	r2, r0
 800ad50:	61f8      	str	r0, [r7, #28]
 800ad52:	b928      	cbnz	r0, 800ad60 <__pow5mult+0x40>
 800ad54:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ad58:	4b1c      	ldr	r3, [pc, #112]	@ (800adcc <__pow5mult+0xac>)
 800ad5a:	481d      	ldr	r0, [pc, #116]	@ (800add0 <__pow5mult+0xb0>)
 800ad5c:	f000 fbbe 	bl	800b4dc <__assert_func>
 800ad60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ad64:	6004      	str	r4, [r0, #0]
 800ad66:	60c4      	str	r4, [r0, #12]
 800ad68:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ad6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ad70:	b94c      	cbnz	r4, 800ad86 <__pow5mult+0x66>
 800ad72:	f240 2171 	movw	r1, #625	@ 0x271
 800ad76:	4638      	mov	r0, r7
 800ad78:	f7ff ff14 	bl	800aba4 <__i2b>
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	4604      	mov	r4, r0
 800ad80:	f8c8 0008 	str.w	r0, [r8, #8]
 800ad84:	6003      	str	r3, [r0, #0]
 800ad86:	f04f 0900 	mov.w	r9, #0
 800ad8a:	07eb      	lsls	r3, r5, #31
 800ad8c:	d50a      	bpl.n	800ada4 <__pow5mult+0x84>
 800ad8e:	4631      	mov	r1, r6
 800ad90:	4622      	mov	r2, r4
 800ad92:	4638      	mov	r0, r7
 800ad94:	f7ff ff1c 	bl	800abd0 <__multiply>
 800ad98:	4680      	mov	r8, r0
 800ad9a:	4631      	mov	r1, r6
 800ad9c:	4638      	mov	r0, r7
 800ad9e:	f7ff fe4d 	bl	800aa3c <_Bfree>
 800ada2:	4646      	mov	r6, r8
 800ada4:	106d      	asrs	r5, r5, #1
 800ada6:	d00b      	beq.n	800adc0 <__pow5mult+0xa0>
 800ada8:	6820      	ldr	r0, [r4, #0]
 800adaa:	b938      	cbnz	r0, 800adbc <__pow5mult+0x9c>
 800adac:	4622      	mov	r2, r4
 800adae:	4621      	mov	r1, r4
 800adb0:	4638      	mov	r0, r7
 800adb2:	f7ff ff0d 	bl	800abd0 <__multiply>
 800adb6:	6020      	str	r0, [r4, #0]
 800adb8:	f8c0 9000 	str.w	r9, [r0]
 800adbc:	4604      	mov	r4, r0
 800adbe:	e7e4      	b.n	800ad8a <__pow5mult+0x6a>
 800adc0:	4630      	mov	r0, r6
 800adc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adc6:	bf00      	nop
 800adc8:	0800bf80 	.word	0x0800bf80
 800adcc:	0800bea4 	.word	0x0800bea4
 800add0:	0800bf24 	.word	0x0800bf24

0800add4 <__lshift>:
 800add4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800add8:	460c      	mov	r4, r1
 800adda:	4607      	mov	r7, r0
 800addc:	4691      	mov	r9, r2
 800adde:	6923      	ldr	r3, [r4, #16]
 800ade0:	6849      	ldr	r1, [r1, #4]
 800ade2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ade6:	68a3      	ldr	r3, [r4, #8]
 800ade8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800adec:	f108 0601 	add.w	r6, r8, #1
 800adf0:	42b3      	cmp	r3, r6
 800adf2:	db0b      	blt.n	800ae0c <__lshift+0x38>
 800adf4:	4638      	mov	r0, r7
 800adf6:	f7ff fde1 	bl	800a9bc <_Balloc>
 800adfa:	4605      	mov	r5, r0
 800adfc:	b948      	cbnz	r0, 800ae12 <__lshift+0x3e>
 800adfe:	4602      	mov	r2, r0
 800ae00:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ae04:	4b27      	ldr	r3, [pc, #156]	@ (800aea4 <__lshift+0xd0>)
 800ae06:	4828      	ldr	r0, [pc, #160]	@ (800aea8 <__lshift+0xd4>)
 800ae08:	f000 fb68 	bl	800b4dc <__assert_func>
 800ae0c:	3101      	adds	r1, #1
 800ae0e:	005b      	lsls	r3, r3, #1
 800ae10:	e7ee      	b.n	800adf0 <__lshift+0x1c>
 800ae12:	2300      	movs	r3, #0
 800ae14:	f100 0114 	add.w	r1, r0, #20
 800ae18:	f100 0210 	add.w	r2, r0, #16
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	4553      	cmp	r3, sl
 800ae20:	db33      	blt.n	800ae8a <__lshift+0xb6>
 800ae22:	6920      	ldr	r0, [r4, #16]
 800ae24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ae28:	f104 0314 	add.w	r3, r4, #20
 800ae2c:	f019 091f 	ands.w	r9, r9, #31
 800ae30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ae34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ae38:	d02b      	beq.n	800ae92 <__lshift+0xbe>
 800ae3a:	468a      	mov	sl, r1
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	f1c9 0e20 	rsb	lr, r9, #32
 800ae42:	6818      	ldr	r0, [r3, #0]
 800ae44:	fa00 f009 	lsl.w	r0, r0, r9
 800ae48:	4310      	orrs	r0, r2
 800ae4a:	f84a 0b04 	str.w	r0, [sl], #4
 800ae4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae52:	459c      	cmp	ip, r3
 800ae54:	fa22 f20e 	lsr.w	r2, r2, lr
 800ae58:	d8f3      	bhi.n	800ae42 <__lshift+0x6e>
 800ae5a:	ebac 0304 	sub.w	r3, ip, r4
 800ae5e:	3b15      	subs	r3, #21
 800ae60:	f023 0303 	bic.w	r3, r3, #3
 800ae64:	3304      	adds	r3, #4
 800ae66:	f104 0015 	add.w	r0, r4, #21
 800ae6a:	4584      	cmp	ip, r0
 800ae6c:	bf38      	it	cc
 800ae6e:	2304      	movcc	r3, #4
 800ae70:	50ca      	str	r2, [r1, r3]
 800ae72:	b10a      	cbz	r2, 800ae78 <__lshift+0xa4>
 800ae74:	f108 0602 	add.w	r6, r8, #2
 800ae78:	3e01      	subs	r6, #1
 800ae7a:	4638      	mov	r0, r7
 800ae7c:	4621      	mov	r1, r4
 800ae7e:	612e      	str	r6, [r5, #16]
 800ae80:	f7ff fddc 	bl	800aa3c <_Bfree>
 800ae84:	4628      	mov	r0, r5
 800ae86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae8a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ae8e:	3301      	adds	r3, #1
 800ae90:	e7c5      	b.n	800ae1e <__lshift+0x4a>
 800ae92:	3904      	subs	r1, #4
 800ae94:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae98:	459c      	cmp	ip, r3
 800ae9a:	f841 2f04 	str.w	r2, [r1, #4]!
 800ae9e:	d8f9      	bhi.n	800ae94 <__lshift+0xc0>
 800aea0:	e7ea      	b.n	800ae78 <__lshift+0xa4>
 800aea2:	bf00      	nop
 800aea4:	0800bf13 	.word	0x0800bf13
 800aea8:	0800bf24 	.word	0x0800bf24

0800aeac <__mcmp>:
 800aeac:	4603      	mov	r3, r0
 800aeae:	690a      	ldr	r2, [r1, #16]
 800aeb0:	6900      	ldr	r0, [r0, #16]
 800aeb2:	b530      	push	{r4, r5, lr}
 800aeb4:	1a80      	subs	r0, r0, r2
 800aeb6:	d10e      	bne.n	800aed6 <__mcmp+0x2a>
 800aeb8:	3314      	adds	r3, #20
 800aeba:	3114      	adds	r1, #20
 800aebc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800aec0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800aec4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aec8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800aecc:	4295      	cmp	r5, r2
 800aece:	d003      	beq.n	800aed8 <__mcmp+0x2c>
 800aed0:	d205      	bcs.n	800aede <__mcmp+0x32>
 800aed2:	f04f 30ff 	mov.w	r0, #4294967295
 800aed6:	bd30      	pop	{r4, r5, pc}
 800aed8:	42a3      	cmp	r3, r4
 800aeda:	d3f3      	bcc.n	800aec4 <__mcmp+0x18>
 800aedc:	e7fb      	b.n	800aed6 <__mcmp+0x2a>
 800aede:	2001      	movs	r0, #1
 800aee0:	e7f9      	b.n	800aed6 <__mcmp+0x2a>
	...

0800aee4 <__mdiff>:
 800aee4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee8:	4689      	mov	r9, r1
 800aeea:	4606      	mov	r6, r0
 800aeec:	4611      	mov	r1, r2
 800aeee:	4648      	mov	r0, r9
 800aef0:	4614      	mov	r4, r2
 800aef2:	f7ff ffdb 	bl	800aeac <__mcmp>
 800aef6:	1e05      	subs	r5, r0, #0
 800aef8:	d112      	bne.n	800af20 <__mdiff+0x3c>
 800aefa:	4629      	mov	r1, r5
 800aefc:	4630      	mov	r0, r6
 800aefe:	f7ff fd5d 	bl	800a9bc <_Balloc>
 800af02:	4602      	mov	r2, r0
 800af04:	b928      	cbnz	r0, 800af12 <__mdiff+0x2e>
 800af06:	f240 2137 	movw	r1, #567	@ 0x237
 800af0a:	4b3e      	ldr	r3, [pc, #248]	@ (800b004 <__mdiff+0x120>)
 800af0c:	483e      	ldr	r0, [pc, #248]	@ (800b008 <__mdiff+0x124>)
 800af0e:	f000 fae5 	bl	800b4dc <__assert_func>
 800af12:	2301      	movs	r3, #1
 800af14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800af18:	4610      	mov	r0, r2
 800af1a:	b003      	add	sp, #12
 800af1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af20:	bfbc      	itt	lt
 800af22:	464b      	movlt	r3, r9
 800af24:	46a1      	movlt	r9, r4
 800af26:	4630      	mov	r0, r6
 800af28:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800af2c:	bfba      	itte	lt
 800af2e:	461c      	movlt	r4, r3
 800af30:	2501      	movlt	r5, #1
 800af32:	2500      	movge	r5, #0
 800af34:	f7ff fd42 	bl	800a9bc <_Balloc>
 800af38:	4602      	mov	r2, r0
 800af3a:	b918      	cbnz	r0, 800af44 <__mdiff+0x60>
 800af3c:	f240 2145 	movw	r1, #581	@ 0x245
 800af40:	4b30      	ldr	r3, [pc, #192]	@ (800b004 <__mdiff+0x120>)
 800af42:	e7e3      	b.n	800af0c <__mdiff+0x28>
 800af44:	f100 0b14 	add.w	fp, r0, #20
 800af48:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800af4c:	f109 0310 	add.w	r3, r9, #16
 800af50:	60c5      	str	r5, [r0, #12]
 800af52:	f04f 0c00 	mov.w	ip, #0
 800af56:	f109 0514 	add.w	r5, r9, #20
 800af5a:	46d9      	mov	r9, fp
 800af5c:	6926      	ldr	r6, [r4, #16]
 800af5e:	f104 0e14 	add.w	lr, r4, #20
 800af62:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800af66:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800af6a:	9301      	str	r3, [sp, #4]
 800af6c:	9b01      	ldr	r3, [sp, #4]
 800af6e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800af72:	f853 af04 	ldr.w	sl, [r3, #4]!
 800af76:	b281      	uxth	r1, r0
 800af78:	9301      	str	r3, [sp, #4]
 800af7a:	fa1f f38a 	uxth.w	r3, sl
 800af7e:	1a5b      	subs	r3, r3, r1
 800af80:	0c00      	lsrs	r0, r0, #16
 800af82:	4463      	add	r3, ip
 800af84:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800af88:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800af8c:	b29b      	uxth	r3, r3
 800af8e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800af92:	4576      	cmp	r6, lr
 800af94:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800af98:	f849 3b04 	str.w	r3, [r9], #4
 800af9c:	d8e6      	bhi.n	800af6c <__mdiff+0x88>
 800af9e:	1b33      	subs	r3, r6, r4
 800afa0:	3b15      	subs	r3, #21
 800afa2:	f023 0303 	bic.w	r3, r3, #3
 800afa6:	3415      	adds	r4, #21
 800afa8:	3304      	adds	r3, #4
 800afaa:	42a6      	cmp	r6, r4
 800afac:	bf38      	it	cc
 800afae:	2304      	movcc	r3, #4
 800afb0:	441d      	add	r5, r3
 800afb2:	445b      	add	r3, fp
 800afb4:	461e      	mov	r6, r3
 800afb6:	462c      	mov	r4, r5
 800afb8:	4544      	cmp	r4, r8
 800afba:	d30e      	bcc.n	800afda <__mdiff+0xf6>
 800afbc:	f108 0103 	add.w	r1, r8, #3
 800afc0:	1b49      	subs	r1, r1, r5
 800afc2:	f021 0103 	bic.w	r1, r1, #3
 800afc6:	3d03      	subs	r5, #3
 800afc8:	45a8      	cmp	r8, r5
 800afca:	bf38      	it	cc
 800afcc:	2100      	movcc	r1, #0
 800afce:	440b      	add	r3, r1
 800afd0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800afd4:	b199      	cbz	r1, 800affe <__mdiff+0x11a>
 800afd6:	6117      	str	r7, [r2, #16]
 800afd8:	e79e      	b.n	800af18 <__mdiff+0x34>
 800afda:	46e6      	mov	lr, ip
 800afdc:	f854 1b04 	ldr.w	r1, [r4], #4
 800afe0:	fa1f fc81 	uxth.w	ip, r1
 800afe4:	44f4      	add	ip, lr
 800afe6:	0c08      	lsrs	r0, r1, #16
 800afe8:	4471      	add	r1, lr
 800afea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800afee:	b289      	uxth	r1, r1
 800aff0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800aff4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aff8:	f846 1b04 	str.w	r1, [r6], #4
 800affc:	e7dc      	b.n	800afb8 <__mdiff+0xd4>
 800affe:	3f01      	subs	r7, #1
 800b000:	e7e6      	b.n	800afd0 <__mdiff+0xec>
 800b002:	bf00      	nop
 800b004:	0800bf13 	.word	0x0800bf13
 800b008:	0800bf24 	.word	0x0800bf24

0800b00c <__d2b>:
 800b00c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800b010:	2101      	movs	r1, #1
 800b012:	4690      	mov	r8, r2
 800b014:	4699      	mov	r9, r3
 800b016:	9e08      	ldr	r6, [sp, #32]
 800b018:	f7ff fcd0 	bl	800a9bc <_Balloc>
 800b01c:	4604      	mov	r4, r0
 800b01e:	b930      	cbnz	r0, 800b02e <__d2b+0x22>
 800b020:	4602      	mov	r2, r0
 800b022:	f240 310f 	movw	r1, #783	@ 0x30f
 800b026:	4b23      	ldr	r3, [pc, #140]	@ (800b0b4 <__d2b+0xa8>)
 800b028:	4823      	ldr	r0, [pc, #140]	@ (800b0b8 <__d2b+0xac>)
 800b02a:	f000 fa57 	bl	800b4dc <__assert_func>
 800b02e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b032:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b036:	b10d      	cbz	r5, 800b03c <__d2b+0x30>
 800b038:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b03c:	9301      	str	r3, [sp, #4]
 800b03e:	f1b8 0300 	subs.w	r3, r8, #0
 800b042:	d024      	beq.n	800b08e <__d2b+0x82>
 800b044:	4668      	mov	r0, sp
 800b046:	9300      	str	r3, [sp, #0]
 800b048:	f7ff fd7f 	bl	800ab4a <__lo0bits>
 800b04c:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b050:	b1d8      	cbz	r0, 800b08a <__d2b+0x7e>
 800b052:	f1c0 0320 	rsb	r3, r0, #32
 800b056:	fa02 f303 	lsl.w	r3, r2, r3
 800b05a:	430b      	orrs	r3, r1
 800b05c:	40c2      	lsrs	r2, r0
 800b05e:	6163      	str	r3, [r4, #20]
 800b060:	9201      	str	r2, [sp, #4]
 800b062:	9b01      	ldr	r3, [sp, #4]
 800b064:	2b00      	cmp	r3, #0
 800b066:	bf0c      	ite	eq
 800b068:	2201      	moveq	r2, #1
 800b06a:	2202      	movne	r2, #2
 800b06c:	61a3      	str	r3, [r4, #24]
 800b06e:	6122      	str	r2, [r4, #16]
 800b070:	b1ad      	cbz	r5, 800b09e <__d2b+0x92>
 800b072:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b076:	4405      	add	r5, r0
 800b078:	6035      	str	r5, [r6, #0]
 800b07a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b07e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b080:	6018      	str	r0, [r3, #0]
 800b082:	4620      	mov	r0, r4
 800b084:	b002      	add	sp, #8
 800b086:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800b08a:	6161      	str	r1, [r4, #20]
 800b08c:	e7e9      	b.n	800b062 <__d2b+0x56>
 800b08e:	a801      	add	r0, sp, #4
 800b090:	f7ff fd5b 	bl	800ab4a <__lo0bits>
 800b094:	9b01      	ldr	r3, [sp, #4]
 800b096:	2201      	movs	r2, #1
 800b098:	6163      	str	r3, [r4, #20]
 800b09a:	3020      	adds	r0, #32
 800b09c:	e7e7      	b.n	800b06e <__d2b+0x62>
 800b09e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b0a2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b0a6:	6030      	str	r0, [r6, #0]
 800b0a8:	6918      	ldr	r0, [r3, #16]
 800b0aa:	f7ff fd2f 	bl	800ab0c <__hi0bits>
 800b0ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b0b2:	e7e4      	b.n	800b07e <__d2b+0x72>
 800b0b4:	0800bf13 	.word	0x0800bf13
 800b0b8:	0800bf24 	.word	0x0800bf24

0800b0bc <__ssputs_r>:
 800b0bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0c0:	461f      	mov	r7, r3
 800b0c2:	688e      	ldr	r6, [r1, #8]
 800b0c4:	4682      	mov	sl, r0
 800b0c6:	42be      	cmp	r6, r7
 800b0c8:	460c      	mov	r4, r1
 800b0ca:	4690      	mov	r8, r2
 800b0cc:	680b      	ldr	r3, [r1, #0]
 800b0ce:	d82d      	bhi.n	800b12c <__ssputs_r+0x70>
 800b0d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b0d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b0d8:	d026      	beq.n	800b128 <__ssputs_r+0x6c>
 800b0da:	6965      	ldr	r5, [r4, #20]
 800b0dc:	6909      	ldr	r1, [r1, #16]
 800b0de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b0e2:	eba3 0901 	sub.w	r9, r3, r1
 800b0e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b0ea:	1c7b      	adds	r3, r7, #1
 800b0ec:	444b      	add	r3, r9
 800b0ee:	106d      	asrs	r5, r5, #1
 800b0f0:	429d      	cmp	r5, r3
 800b0f2:	bf38      	it	cc
 800b0f4:	461d      	movcc	r5, r3
 800b0f6:	0553      	lsls	r3, r2, #21
 800b0f8:	d527      	bpl.n	800b14a <__ssputs_r+0x8e>
 800b0fa:	4629      	mov	r1, r5
 800b0fc:	f7ff fbd2 	bl	800a8a4 <_malloc_r>
 800b100:	4606      	mov	r6, r0
 800b102:	b360      	cbz	r0, 800b15e <__ssputs_r+0xa2>
 800b104:	464a      	mov	r2, r9
 800b106:	6921      	ldr	r1, [r4, #16]
 800b108:	f7fe fcfb 	bl	8009b02 <memcpy>
 800b10c:	89a3      	ldrh	r3, [r4, #12]
 800b10e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b112:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b116:	81a3      	strh	r3, [r4, #12]
 800b118:	6126      	str	r6, [r4, #16]
 800b11a:	444e      	add	r6, r9
 800b11c:	6026      	str	r6, [r4, #0]
 800b11e:	463e      	mov	r6, r7
 800b120:	6165      	str	r5, [r4, #20]
 800b122:	eba5 0509 	sub.w	r5, r5, r9
 800b126:	60a5      	str	r5, [r4, #8]
 800b128:	42be      	cmp	r6, r7
 800b12a:	d900      	bls.n	800b12e <__ssputs_r+0x72>
 800b12c:	463e      	mov	r6, r7
 800b12e:	4632      	mov	r2, r6
 800b130:	4641      	mov	r1, r8
 800b132:	6820      	ldr	r0, [r4, #0]
 800b134:	f7fe fbd5 	bl	80098e2 <memmove>
 800b138:	2000      	movs	r0, #0
 800b13a:	68a3      	ldr	r3, [r4, #8]
 800b13c:	1b9b      	subs	r3, r3, r6
 800b13e:	60a3      	str	r3, [r4, #8]
 800b140:	6823      	ldr	r3, [r4, #0]
 800b142:	4433      	add	r3, r6
 800b144:	6023      	str	r3, [r4, #0]
 800b146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b14a:	462a      	mov	r2, r5
 800b14c:	f000 fa0a 	bl	800b564 <_realloc_r>
 800b150:	4606      	mov	r6, r0
 800b152:	2800      	cmp	r0, #0
 800b154:	d1e0      	bne.n	800b118 <__ssputs_r+0x5c>
 800b156:	4650      	mov	r0, sl
 800b158:	6921      	ldr	r1, [r4, #16]
 800b15a:	f7ff fb31 	bl	800a7c0 <_free_r>
 800b15e:	230c      	movs	r3, #12
 800b160:	f8ca 3000 	str.w	r3, [sl]
 800b164:	89a3      	ldrh	r3, [r4, #12]
 800b166:	f04f 30ff 	mov.w	r0, #4294967295
 800b16a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b16e:	81a3      	strh	r3, [r4, #12]
 800b170:	e7e9      	b.n	800b146 <__ssputs_r+0x8a>
	...

0800b174 <_svfiprintf_r>:
 800b174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b178:	4698      	mov	r8, r3
 800b17a:	898b      	ldrh	r3, [r1, #12]
 800b17c:	4607      	mov	r7, r0
 800b17e:	061b      	lsls	r3, r3, #24
 800b180:	460d      	mov	r5, r1
 800b182:	4614      	mov	r4, r2
 800b184:	b09d      	sub	sp, #116	@ 0x74
 800b186:	d510      	bpl.n	800b1aa <_svfiprintf_r+0x36>
 800b188:	690b      	ldr	r3, [r1, #16]
 800b18a:	b973      	cbnz	r3, 800b1aa <_svfiprintf_r+0x36>
 800b18c:	2140      	movs	r1, #64	@ 0x40
 800b18e:	f7ff fb89 	bl	800a8a4 <_malloc_r>
 800b192:	6028      	str	r0, [r5, #0]
 800b194:	6128      	str	r0, [r5, #16]
 800b196:	b930      	cbnz	r0, 800b1a6 <_svfiprintf_r+0x32>
 800b198:	230c      	movs	r3, #12
 800b19a:	603b      	str	r3, [r7, #0]
 800b19c:	f04f 30ff 	mov.w	r0, #4294967295
 800b1a0:	b01d      	add	sp, #116	@ 0x74
 800b1a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1a6:	2340      	movs	r3, #64	@ 0x40
 800b1a8:	616b      	str	r3, [r5, #20]
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1ae:	2320      	movs	r3, #32
 800b1b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b1b4:	2330      	movs	r3, #48	@ 0x30
 800b1b6:	f04f 0901 	mov.w	r9, #1
 800b1ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1be:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800b358 <_svfiprintf_r+0x1e4>
 800b1c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b1c6:	4623      	mov	r3, r4
 800b1c8:	469a      	mov	sl, r3
 800b1ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1ce:	b10a      	cbz	r2, 800b1d4 <_svfiprintf_r+0x60>
 800b1d0:	2a25      	cmp	r2, #37	@ 0x25
 800b1d2:	d1f9      	bne.n	800b1c8 <_svfiprintf_r+0x54>
 800b1d4:	ebba 0b04 	subs.w	fp, sl, r4
 800b1d8:	d00b      	beq.n	800b1f2 <_svfiprintf_r+0x7e>
 800b1da:	465b      	mov	r3, fp
 800b1dc:	4622      	mov	r2, r4
 800b1de:	4629      	mov	r1, r5
 800b1e0:	4638      	mov	r0, r7
 800b1e2:	f7ff ff6b 	bl	800b0bc <__ssputs_r>
 800b1e6:	3001      	adds	r0, #1
 800b1e8:	f000 80a7 	beq.w	800b33a <_svfiprintf_r+0x1c6>
 800b1ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1ee:	445a      	add	r2, fp
 800b1f0:	9209      	str	r2, [sp, #36]	@ 0x24
 800b1f2:	f89a 3000 	ldrb.w	r3, [sl]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	f000 809f 	beq.w	800b33a <_svfiprintf_r+0x1c6>
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	f04f 32ff 	mov.w	r2, #4294967295
 800b202:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b206:	f10a 0a01 	add.w	sl, sl, #1
 800b20a:	9304      	str	r3, [sp, #16]
 800b20c:	9307      	str	r3, [sp, #28]
 800b20e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b212:	931a      	str	r3, [sp, #104]	@ 0x68
 800b214:	4654      	mov	r4, sl
 800b216:	2205      	movs	r2, #5
 800b218:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b21c:	484e      	ldr	r0, [pc, #312]	@ (800b358 <_svfiprintf_r+0x1e4>)
 800b21e:	f7fe fc62 	bl	8009ae6 <memchr>
 800b222:	9a04      	ldr	r2, [sp, #16]
 800b224:	b9d8      	cbnz	r0, 800b25e <_svfiprintf_r+0xea>
 800b226:	06d0      	lsls	r0, r2, #27
 800b228:	bf44      	itt	mi
 800b22a:	2320      	movmi	r3, #32
 800b22c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b230:	0711      	lsls	r1, r2, #28
 800b232:	bf44      	itt	mi
 800b234:	232b      	movmi	r3, #43	@ 0x2b
 800b236:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b23a:	f89a 3000 	ldrb.w	r3, [sl]
 800b23e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b240:	d015      	beq.n	800b26e <_svfiprintf_r+0xfa>
 800b242:	4654      	mov	r4, sl
 800b244:	2000      	movs	r0, #0
 800b246:	f04f 0c0a 	mov.w	ip, #10
 800b24a:	9a07      	ldr	r2, [sp, #28]
 800b24c:	4621      	mov	r1, r4
 800b24e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b252:	3b30      	subs	r3, #48	@ 0x30
 800b254:	2b09      	cmp	r3, #9
 800b256:	d94b      	bls.n	800b2f0 <_svfiprintf_r+0x17c>
 800b258:	b1b0      	cbz	r0, 800b288 <_svfiprintf_r+0x114>
 800b25a:	9207      	str	r2, [sp, #28]
 800b25c:	e014      	b.n	800b288 <_svfiprintf_r+0x114>
 800b25e:	eba0 0308 	sub.w	r3, r0, r8
 800b262:	fa09 f303 	lsl.w	r3, r9, r3
 800b266:	4313      	orrs	r3, r2
 800b268:	46a2      	mov	sl, r4
 800b26a:	9304      	str	r3, [sp, #16]
 800b26c:	e7d2      	b.n	800b214 <_svfiprintf_r+0xa0>
 800b26e:	9b03      	ldr	r3, [sp, #12]
 800b270:	1d19      	adds	r1, r3, #4
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	9103      	str	r1, [sp, #12]
 800b276:	2b00      	cmp	r3, #0
 800b278:	bfbb      	ittet	lt
 800b27a:	425b      	neglt	r3, r3
 800b27c:	f042 0202 	orrlt.w	r2, r2, #2
 800b280:	9307      	strge	r3, [sp, #28]
 800b282:	9307      	strlt	r3, [sp, #28]
 800b284:	bfb8      	it	lt
 800b286:	9204      	strlt	r2, [sp, #16]
 800b288:	7823      	ldrb	r3, [r4, #0]
 800b28a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b28c:	d10a      	bne.n	800b2a4 <_svfiprintf_r+0x130>
 800b28e:	7863      	ldrb	r3, [r4, #1]
 800b290:	2b2a      	cmp	r3, #42	@ 0x2a
 800b292:	d132      	bne.n	800b2fa <_svfiprintf_r+0x186>
 800b294:	9b03      	ldr	r3, [sp, #12]
 800b296:	3402      	adds	r4, #2
 800b298:	1d1a      	adds	r2, r3, #4
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	9203      	str	r2, [sp, #12]
 800b29e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b2a2:	9305      	str	r3, [sp, #20]
 800b2a4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800b35c <_svfiprintf_r+0x1e8>
 800b2a8:	2203      	movs	r2, #3
 800b2aa:	4650      	mov	r0, sl
 800b2ac:	7821      	ldrb	r1, [r4, #0]
 800b2ae:	f7fe fc1a 	bl	8009ae6 <memchr>
 800b2b2:	b138      	cbz	r0, 800b2c4 <_svfiprintf_r+0x150>
 800b2b4:	2240      	movs	r2, #64	@ 0x40
 800b2b6:	9b04      	ldr	r3, [sp, #16]
 800b2b8:	eba0 000a 	sub.w	r0, r0, sl
 800b2bc:	4082      	lsls	r2, r0
 800b2be:	4313      	orrs	r3, r2
 800b2c0:	3401      	adds	r4, #1
 800b2c2:	9304      	str	r3, [sp, #16]
 800b2c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2c8:	2206      	movs	r2, #6
 800b2ca:	4825      	ldr	r0, [pc, #148]	@ (800b360 <_svfiprintf_r+0x1ec>)
 800b2cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b2d0:	f7fe fc09 	bl	8009ae6 <memchr>
 800b2d4:	2800      	cmp	r0, #0
 800b2d6:	d036      	beq.n	800b346 <_svfiprintf_r+0x1d2>
 800b2d8:	4b22      	ldr	r3, [pc, #136]	@ (800b364 <_svfiprintf_r+0x1f0>)
 800b2da:	bb1b      	cbnz	r3, 800b324 <_svfiprintf_r+0x1b0>
 800b2dc:	9b03      	ldr	r3, [sp, #12]
 800b2de:	3307      	adds	r3, #7
 800b2e0:	f023 0307 	bic.w	r3, r3, #7
 800b2e4:	3308      	adds	r3, #8
 800b2e6:	9303      	str	r3, [sp, #12]
 800b2e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2ea:	4433      	add	r3, r6
 800b2ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2ee:	e76a      	b.n	800b1c6 <_svfiprintf_r+0x52>
 800b2f0:	460c      	mov	r4, r1
 800b2f2:	2001      	movs	r0, #1
 800b2f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2f8:	e7a8      	b.n	800b24c <_svfiprintf_r+0xd8>
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	f04f 0c0a 	mov.w	ip, #10
 800b300:	4619      	mov	r1, r3
 800b302:	3401      	adds	r4, #1
 800b304:	9305      	str	r3, [sp, #20]
 800b306:	4620      	mov	r0, r4
 800b308:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b30c:	3a30      	subs	r2, #48	@ 0x30
 800b30e:	2a09      	cmp	r2, #9
 800b310:	d903      	bls.n	800b31a <_svfiprintf_r+0x1a6>
 800b312:	2b00      	cmp	r3, #0
 800b314:	d0c6      	beq.n	800b2a4 <_svfiprintf_r+0x130>
 800b316:	9105      	str	r1, [sp, #20]
 800b318:	e7c4      	b.n	800b2a4 <_svfiprintf_r+0x130>
 800b31a:	4604      	mov	r4, r0
 800b31c:	2301      	movs	r3, #1
 800b31e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b322:	e7f0      	b.n	800b306 <_svfiprintf_r+0x192>
 800b324:	ab03      	add	r3, sp, #12
 800b326:	9300      	str	r3, [sp, #0]
 800b328:	462a      	mov	r2, r5
 800b32a:	4638      	mov	r0, r7
 800b32c:	4b0e      	ldr	r3, [pc, #56]	@ (800b368 <_svfiprintf_r+0x1f4>)
 800b32e:	a904      	add	r1, sp, #16
 800b330:	f7fd fdf4 	bl	8008f1c <_printf_float>
 800b334:	1c42      	adds	r2, r0, #1
 800b336:	4606      	mov	r6, r0
 800b338:	d1d6      	bne.n	800b2e8 <_svfiprintf_r+0x174>
 800b33a:	89ab      	ldrh	r3, [r5, #12]
 800b33c:	065b      	lsls	r3, r3, #25
 800b33e:	f53f af2d 	bmi.w	800b19c <_svfiprintf_r+0x28>
 800b342:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b344:	e72c      	b.n	800b1a0 <_svfiprintf_r+0x2c>
 800b346:	ab03      	add	r3, sp, #12
 800b348:	9300      	str	r3, [sp, #0]
 800b34a:	462a      	mov	r2, r5
 800b34c:	4638      	mov	r0, r7
 800b34e:	4b06      	ldr	r3, [pc, #24]	@ (800b368 <_svfiprintf_r+0x1f4>)
 800b350:	a904      	add	r1, sp, #16
 800b352:	f7fe f881 	bl	8009458 <_printf_i>
 800b356:	e7ed      	b.n	800b334 <_svfiprintf_r+0x1c0>
 800b358:	0800c080 	.word	0x0800c080
 800b35c:	0800c086 	.word	0x0800c086
 800b360:	0800c08a 	.word	0x0800c08a
 800b364:	08008f1d 	.word	0x08008f1d
 800b368:	0800b0bd 	.word	0x0800b0bd

0800b36c <__sflush_r>:
 800b36c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b372:	0716      	lsls	r6, r2, #28
 800b374:	4605      	mov	r5, r0
 800b376:	460c      	mov	r4, r1
 800b378:	d454      	bmi.n	800b424 <__sflush_r+0xb8>
 800b37a:	684b      	ldr	r3, [r1, #4]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	dc02      	bgt.n	800b386 <__sflush_r+0x1a>
 800b380:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b382:	2b00      	cmp	r3, #0
 800b384:	dd48      	ble.n	800b418 <__sflush_r+0xac>
 800b386:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b388:	2e00      	cmp	r6, #0
 800b38a:	d045      	beq.n	800b418 <__sflush_r+0xac>
 800b38c:	2300      	movs	r3, #0
 800b38e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b392:	682f      	ldr	r7, [r5, #0]
 800b394:	6a21      	ldr	r1, [r4, #32]
 800b396:	602b      	str	r3, [r5, #0]
 800b398:	d030      	beq.n	800b3fc <__sflush_r+0x90>
 800b39a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b39c:	89a3      	ldrh	r3, [r4, #12]
 800b39e:	0759      	lsls	r1, r3, #29
 800b3a0:	d505      	bpl.n	800b3ae <__sflush_r+0x42>
 800b3a2:	6863      	ldr	r3, [r4, #4]
 800b3a4:	1ad2      	subs	r2, r2, r3
 800b3a6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b3a8:	b10b      	cbz	r3, 800b3ae <__sflush_r+0x42>
 800b3aa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b3ac:	1ad2      	subs	r2, r2, r3
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	4628      	mov	r0, r5
 800b3b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b3b4:	6a21      	ldr	r1, [r4, #32]
 800b3b6:	47b0      	blx	r6
 800b3b8:	1c43      	adds	r3, r0, #1
 800b3ba:	89a3      	ldrh	r3, [r4, #12]
 800b3bc:	d106      	bne.n	800b3cc <__sflush_r+0x60>
 800b3be:	6829      	ldr	r1, [r5, #0]
 800b3c0:	291d      	cmp	r1, #29
 800b3c2:	d82b      	bhi.n	800b41c <__sflush_r+0xb0>
 800b3c4:	4a28      	ldr	r2, [pc, #160]	@ (800b468 <__sflush_r+0xfc>)
 800b3c6:	410a      	asrs	r2, r1
 800b3c8:	07d6      	lsls	r6, r2, #31
 800b3ca:	d427      	bmi.n	800b41c <__sflush_r+0xb0>
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	6062      	str	r2, [r4, #4]
 800b3d0:	6922      	ldr	r2, [r4, #16]
 800b3d2:	04d9      	lsls	r1, r3, #19
 800b3d4:	6022      	str	r2, [r4, #0]
 800b3d6:	d504      	bpl.n	800b3e2 <__sflush_r+0x76>
 800b3d8:	1c42      	adds	r2, r0, #1
 800b3da:	d101      	bne.n	800b3e0 <__sflush_r+0x74>
 800b3dc:	682b      	ldr	r3, [r5, #0]
 800b3de:	b903      	cbnz	r3, 800b3e2 <__sflush_r+0x76>
 800b3e0:	6560      	str	r0, [r4, #84]	@ 0x54
 800b3e2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b3e4:	602f      	str	r7, [r5, #0]
 800b3e6:	b1b9      	cbz	r1, 800b418 <__sflush_r+0xac>
 800b3e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b3ec:	4299      	cmp	r1, r3
 800b3ee:	d002      	beq.n	800b3f6 <__sflush_r+0x8a>
 800b3f0:	4628      	mov	r0, r5
 800b3f2:	f7ff f9e5 	bl	800a7c0 <_free_r>
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	6363      	str	r3, [r4, #52]	@ 0x34
 800b3fa:	e00d      	b.n	800b418 <__sflush_r+0xac>
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	4628      	mov	r0, r5
 800b400:	47b0      	blx	r6
 800b402:	4602      	mov	r2, r0
 800b404:	1c50      	adds	r0, r2, #1
 800b406:	d1c9      	bne.n	800b39c <__sflush_r+0x30>
 800b408:	682b      	ldr	r3, [r5, #0]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d0c6      	beq.n	800b39c <__sflush_r+0x30>
 800b40e:	2b1d      	cmp	r3, #29
 800b410:	d001      	beq.n	800b416 <__sflush_r+0xaa>
 800b412:	2b16      	cmp	r3, #22
 800b414:	d11d      	bne.n	800b452 <__sflush_r+0xe6>
 800b416:	602f      	str	r7, [r5, #0]
 800b418:	2000      	movs	r0, #0
 800b41a:	e021      	b.n	800b460 <__sflush_r+0xf4>
 800b41c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b420:	b21b      	sxth	r3, r3
 800b422:	e01a      	b.n	800b45a <__sflush_r+0xee>
 800b424:	690f      	ldr	r7, [r1, #16]
 800b426:	2f00      	cmp	r7, #0
 800b428:	d0f6      	beq.n	800b418 <__sflush_r+0xac>
 800b42a:	0793      	lsls	r3, r2, #30
 800b42c:	bf18      	it	ne
 800b42e:	2300      	movne	r3, #0
 800b430:	680e      	ldr	r6, [r1, #0]
 800b432:	bf08      	it	eq
 800b434:	694b      	ldreq	r3, [r1, #20]
 800b436:	1bf6      	subs	r6, r6, r7
 800b438:	600f      	str	r7, [r1, #0]
 800b43a:	608b      	str	r3, [r1, #8]
 800b43c:	2e00      	cmp	r6, #0
 800b43e:	ddeb      	ble.n	800b418 <__sflush_r+0xac>
 800b440:	4633      	mov	r3, r6
 800b442:	463a      	mov	r2, r7
 800b444:	4628      	mov	r0, r5
 800b446:	6a21      	ldr	r1, [r4, #32]
 800b448:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800b44c:	47e0      	blx	ip
 800b44e:	2800      	cmp	r0, #0
 800b450:	dc07      	bgt.n	800b462 <__sflush_r+0xf6>
 800b452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b456:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b45a:	f04f 30ff 	mov.w	r0, #4294967295
 800b45e:	81a3      	strh	r3, [r4, #12]
 800b460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b462:	4407      	add	r7, r0
 800b464:	1a36      	subs	r6, r6, r0
 800b466:	e7e9      	b.n	800b43c <__sflush_r+0xd0>
 800b468:	dfbffffe 	.word	0xdfbffffe

0800b46c <_fflush_r>:
 800b46c:	b538      	push	{r3, r4, r5, lr}
 800b46e:	690b      	ldr	r3, [r1, #16]
 800b470:	4605      	mov	r5, r0
 800b472:	460c      	mov	r4, r1
 800b474:	b913      	cbnz	r3, 800b47c <_fflush_r+0x10>
 800b476:	2500      	movs	r5, #0
 800b478:	4628      	mov	r0, r5
 800b47a:	bd38      	pop	{r3, r4, r5, pc}
 800b47c:	b118      	cbz	r0, 800b486 <_fflush_r+0x1a>
 800b47e:	6a03      	ldr	r3, [r0, #32]
 800b480:	b90b      	cbnz	r3, 800b486 <_fflush_r+0x1a>
 800b482:	f7fe f995 	bl	80097b0 <__sinit>
 800b486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d0f3      	beq.n	800b476 <_fflush_r+0xa>
 800b48e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b490:	07d0      	lsls	r0, r2, #31
 800b492:	d404      	bmi.n	800b49e <_fflush_r+0x32>
 800b494:	0599      	lsls	r1, r3, #22
 800b496:	d402      	bmi.n	800b49e <_fflush_r+0x32>
 800b498:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b49a:	f7fe fb22 	bl	8009ae2 <__retarget_lock_acquire_recursive>
 800b49e:	4628      	mov	r0, r5
 800b4a0:	4621      	mov	r1, r4
 800b4a2:	f7ff ff63 	bl	800b36c <__sflush_r>
 800b4a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b4a8:	4605      	mov	r5, r0
 800b4aa:	07da      	lsls	r2, r3, #31
 800b4ac:	d4e4      	bmi.n	800b478 <_fflush_r+0xc>
 800b4ae:	89a3      	ldrh	r3, [r4, #12]
 800b4b0:	059b      	lsls	r3, r3, #22
 800b4b2:	d4e1      	bmi.n	800b478 <_fflush_r+0xc>
 800b4b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b4b6:	f7fe fb15 	bl	8009ae4 <__retarget_lock_release_recursive>
 800b4ba:	e7dd      	b.n	800b478 <_fflush_r+0xc>

0800b4bc <_sbrk_r>:
 800b4bc:	b538      	push	{r3, r4, r5, lr}
 800b4be:	2300      	movs	r3, #0
 800b4c0:	4d05      	ldr	r5, [pc, #20]	@ (800b4d8 <_sbrk_r+0x1c>)
 800b4c2:	4604      	mov	r4, r0
 800b4c4:	4608      	mov	r0, r1
 800b4c6:	602b      	str	r3, [r5, #0]
 800b4c8:	f7f7 fbf0 	bl	8002cac <_sbrk>
 800b4cc:	1c43      	adds	r3, r0, #1
 800b4ce:	d102      	bne.n	800b4d6 <_sbrk_r+0x1a>
 800b4d0:	682b      	ldr	r3, [r5, #0]
 800b4d2:	b103      	cbz	r3, 800b4d6 <_sbrk_r+0x1a>
 800b4d4:	6023      	str	r3, [r4, #0]
 800b4d6:	bd38      	pop	{r3, r4, r5, pc}
 800b4d8:	200048f4 	.word	0x200048f4

0800b4dc <__assert_func>:
 800b4dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b4de:	4614      	mov	r4, r2
 800b4e0:	461a      	mov	r2, r3
 800b4e2:	4b09      	ldr	r3, [pc, #36]	@ (800b508 <__assert_func+0x2c>)
 800b4e4:	4605      	mov	r5, r0
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	68d8      	ldr	r0, [r3, #12]
 800b4ea:	b954      	cbnz	r4, 800b502 <__assert_func+0x26>
 800b4ec:	4b07      	ldr	r3, [pc, #28]	@ (800b50c <__assert_func+0x30>)
 800b4ee:	461c      	mov	r4, r3
 800b4f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b4f4:	9100      	str	r1, [sp, #0]
 800b4f6:	462b      	mov	r3, r5
 800b4f8:	4905      	ldr	r1, [pc, #20]	@ (800b510 <__assert_func+0x34>)
 800b4fa:	f000 f86f 	bl	800b5dc <fiprintf>
 800b4fe:	f000 f87f 	bl	800b600 <abort>
 800b502:	4b04      	ldr	r3, [pc, #16]	@ (800b514 <__assert_func+0x38>)
 800b504:	e7f4      	b.n	800b4f0 <__assert_func+0x14>
 800b506:	bf00      	nop
 800b508:	20000098 	.word	0x20000098
 800b50c:	0800c0d6 	.word	0x0800c0d6
 800b510:	0800c0a8 	.word	0x0800c0a8
 800b514:	0800c09b 	.word	0x0800c09b

0800b518 <_calloc_r>:
 800b518:	b570      	push	{r4, r5, r6, lr}
 800b51a:	fba1 5402 	umull	r5, r4, r1, r2
 800b51e:	b93c      	cbnz	r4, 800b530 <_calloc_r+0x18>
 800b520:	4629      	mov	r1, r5
 800b522:	f7ff f9bf 	bl	800a8a4 <_malloc_r>
 800b526:	4606      	mov	r6, r0
 800b528:	b928      	cbnz	r0, 800b536 <_calloc_r+0x1e>
 800b52a:	2600      	movs	r6, #0
 800b52c:	4630      	mov	r0, r6
 800b52e:	bd70      	pop	{r4, r5, r6, pc}
 800b530:	220c      	movs	r2, #12
 800b532:	6002      	str	r2, [r0, #0]
 800b534:	e7f9      	b.n	800b52a <_calloc_r+0x12>
 800b536:	462a      	mov	r2, r5
 800b538:	4621      	mov	r1, r4
 800b53a:	f7fe f9ec 	bl	8009916 <memset>
 800b53e:	e7f5      	b.n	800b52c <_calloc_r+0x14>

0800b540 <__ascii_mbtowc>:
 800b540:	b082      	sub	sp, #8
 800b542:	b901      	cbnz	r1, 800b546 <__ascii_mbtowc+0x6>
 800b544:	a901      	add	r1, sp, #4
 800b546:	b142      	cbz	r2, 800b55a <__ascii_mbtowc+0x1a>
 800b548:	b14b      	cbz	r3, 800b55e <__ascii_mbtowc+0x1e>
 800b54a:	7813      	ldrb	r3, [r2, #0]
 800b54c:	600b      	str	r3, [r1, #0]
 800b54e:	7812      	ldrb	r2, [r2, #0]
 800b550:	1e10      	subs	r0, r2, #0
 800b552:	bf18      	it	ne
 800b554:	2001      	movne	r0, #1
 800b556:	b002      	add	sp, #8
 800b558:	4770      	bx	lr
 800b55a:	4610      	mov	r0, r2
 800b55c:	e7fb      	b.n	800b556 <__ascii_mbtowc+0x16>
 800b55e:	f06f 0001 	mvn.w	r0, #1
 800b562:	e7f8      	b.n	800b556 <__ascii_mbtowc+0x16>

0800b564 <_realloc_r>:
 800b564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b568:	4680      	mov	r8, r0
 800b56a:	4615      	mov	r5, r2
 800b56c:	460c      	mov	r4, r1
 800b56e:	b921      	cbnz	r1, 800b57a <_realloc_r+0x16>
 800b570:	4611      	mov	r1, r2
 800b572:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b576:	f7ff b995 	b.w	800a8a4 <_malloc_r>
 800b57a:	b92a      	cbnz	r2, 800b588 <_realloc_r+0x24>
 800b57c:	f7ff f920 	bl	800a7c0 <_free_r>
 800b580:	2400      	movs	r4, #0
 800b582:	4620      	mov	r0, r4
 800b584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b588:	f000 f841 	bl	800b60e <_malloc_usable_size_r>
 800b58c:	4285      	cmp	r5, r0
 800b58e:	4606      	mov	r6, r0
 800b590:	d802      	bhi.n	800b598 <_realloc_r+0x34>
 800b592:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b596:	d8f4      	bhi.n	800b582 <_realloc_r+0x1e>
 800b598:	4629      	mov	r1, r5
 800b59a:	4640      	mov	r0, r8
 800b59c:	f7ff f982 	bl	800a8a4 <_malloc_r>
 800b5a0:	4607      	mov	r7, r0
 800b5a2:	2800      	cmp	r0, #0
 800b5a4:	d0ec      	beq.n	800b580 <_realloc_r+0x1c>
 800b5a6:	42b5      	cmp	r5, r6
 800b5a8:	462a      	mov	r2, r5
 800b5aa:	4621      	mov	r1, r4
 800b5ac:	bf28      	it	cs
 800b5ae:	4632      	movcs	r2, r6
 800b5b0:	f7fe faa7 	bl	8009b02 <memcpy>
 800b5b4:	4621      	mov	r1, r4
 800b5b6:	4640      	mov	r0, r8
 800b5b8:	f7ff f902 	bl	800a7c0 <_free_r>
 800b5bc:	463c      	mov	r4, r7
 800b5be:	e7e0      	b.n	800b582 <_realloc_r+0x1e>

0800b5c0 <__ascii_wctomb>:
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	4608      	mov	r0, r1
 800b5c4:	b141      	cbz	r1, 800b5d8 <__ascii_wctomb+0x18>
 800b5c6:	2aff      	cmp	r2, #255	@ 0xff
 800b5c8:	d904      	bls.n	800b5d4 <__ascii_wctomb+0x14>
 800b5ca:	228a      	movs	r2, #138	@ 0x8a
 800b5cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b5d0:	601a      	str	r2, [r3, #0]
 800b5d2:	4770      	bx	lr
 800b5d4:	2001      	movs	r0, #1
 800b5d6:	700a      	strb	r2, [r1, #0]
 800b5d8:	4770      	bx	lr
	...

0800b5dc <fiprintf>:
 800b5dc:	b40e      	push	{r1, r2, r3}
 800b5de:	b503      	push	{r0, r1, lr}
 800b5e0:	4601      	mov	r1, r0
 800b5e2:	ab03      	add	r3, sp, #12
 800b5e4:	4805      	ldr	r0, [pc, #20]	@ (800b5fc <fiprintf+0x20>)
 800b5e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5ea:	6800      	ldr	r0, [r0, #0]
 800b5ec:	9301      	str	r3, [sp, #4]
 800b5ee:	f000 f83d 	bl	800b66c <_vfiprintf_r>
 800b5f2:	b002      	add	sp, #8
 800b5f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5f8:	b003      	add	sp, #12
 800b5fa:	4770      	bx	lr
 800b5fc:	20000098 	.word	0x20000098

0800b600 <abort>:
 800b600:	2006      	movs	r0, #6
 800b602:	b508      	push	{r3, lr}
 800b604:	f000 fa06 	bl	800ba14 <raise>
 800b608:	2001      	movs	r0, #1
 800b60a:	f7f7 fada 	bl	8002bc2 <_exit>

0800b60e <_malloc_usable_size_r>:
 800b60e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b612:	1f18      	subs	r0, r3, #4
 800b614:	2b00      	cmp	r3, #0
 800b616:	bfbc      	itt	lt
 800b618:	580b      	ldrlt	r3, [r1, r0]
 800b61a:	18c0      	addlt	r0, r0, r3
 800b61c:	4770      	bx	lr

0800b61e <__sfputc_r>:
 800b61e:	6893      	ldr	r3, [r2, #8]
 800b620:	b410      	push	{r4}
 800b622:	3b01      	subs	r3, #1
 800b624:	2b00      	cmp	r3, #0
 800b626:	6093      	str	r3, [r2, #8]
 800b628:	da07      	bge.n	800b63a <__sfputc_r+0x1c>
 800b62a:	6994      	ldr	r4, [r2, #24]
 800b62c:	42a3      	cmp	r3, r4
 800b62e:	db01      	blt.n	800b634 <__sfputc_r+0x16>
 800b630:	290a      	cmp	r1, #10
 800b632:	d102      	bne.n	800b63a <__sfputc_r+0x1c>
 800b634:	bc10      	pop	{r4}
 800b636:	f000 b931 	b.w	800b89c <__swbuf_r>
 800b63a:	6813      	ldr	r3, [r2, #0]
 800b63c:	1c58      	adds	r0, r3, #1
 800b63e:	6010      	str	r0, [r2, #0]
 800b640:	7019      	strb	r1, [r3, #0]
 800b642:	4608      	mov	r0, r1
 800b644:	bc10      	pop	{r4}
 800b646:	4770      	bx	lr

0800b648 <__sfputs_r>:
 800b648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b64a:	4606      	mov	r6, r0
 800b64c:	460f      	mov	r7, r1
 800b64e:	4614      	mov	r4, r2
 800b650:	18d5      	adds	r5, r2, r3
 800b652:	42ac      	cmp	r4, r5
 800b654:	d101      	bne.n	800b65a <__sfputs_r+0x12>
 800b656:	2000      	movs	r0, #0
 800b658:	e007      	b.n	800b66a <__sfputs_r+0x22>
 800b65a:	463a      	mov	r2, r7
 800b65c:	4630      	mov	r0, r6
 800b65e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b662:	f7ff ffdc 	bl	800b61e <__sfputc_r>
 800b666:	1c43      	adds	r3, r0, #1
 800b668:	d1f3      	bne.n	800b652 <__sfputs_r+0xa>
 800b66a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b66c <_vfiprintf_r>:
 800b66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b670:	460d      	mov	r5, r1
 800b672:	4614      	mov	r4, r2
 800b674:	4698      	mov	r8, r3
 800b676:	4606      	mov	r6, r0
 800b678:	b09d      	sub	sp, #116	@ 0x74
 800b67a:	b118      	cbz	r0, 800b684 <_vfiprintf_r+0x18>
 800b67c:	6a03      	ldr	r3, [r0, #32]
 800b67e:	b90b      	cbnz	r3, 800b684 <_vfiprintf_r+0x18>
 800b680:	f7fe f896 	bl	80097b0 <__sinit>
 800b684:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b686:	07d9      	lsls	r1, r3, #31
 800b688:	d405      	bmi.n	800b696 <_vfiprintf_r+0x2a>
 800b68a:	89ab      	ldrh	r3, [r5, #12]
 800b68c:	059a      	lsls	r2, r3, #22
 800b68e:	d402      	bmi.n	800b696 <_vfiprintf_r+0x2a>
 800b690:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b692:	f7fe fa26 	bl	8009ae2 <__retarget_lock_acquire_recursive>
 800b696:	89ab      	ldrh	r3, [r5, #12]
 800b698:	071b      	lsls	r3, r3, #28
 800b69a:	d501      	bpl.n	800b6a0 <_vfiprintf_r+0x34>
 800b69c:	692b      	ldr	r3, [r5, #16]
 800b69e:	b99b      	cbnz	r3, 800b6c8 <_vfiprintf_r+0x5c>
 800b6a0:	4629      	mov	r1, r5
 800b6a2:	4630      	mov	r0, r6
 800b6a4:	f000 f938 	bl	800b918 <__swsetup_r>
 800b6a8:	b170      	cbz	r0, 800b6c8 <_vfiprintf_r+0x5c>
 800b6aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b6ac:	07dc      	lsls	r4, r3, #31
 800b6ae:	d504      	bpl.n	800b6ba <_vfiprintf_r+0x4e>
 800b6b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b6b4:	b01d      	add	sp, #116	@ 0x74
 800b6b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6ba:	89ab      	ldrh	r3, [r5, #12]
 800b6bc:	0598      	lsls	r0, r3, #22
 800b6be:	d4f7      	bmi.n	800b6b0 <_vfiprintf_r+0x44>
 800b6c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b6c2:	f7fe fa0f 	bl	8009ae4 <__retarget_lock_release_recursive>
 800b6c6:	e7f3      	b.n	800b6b0 <_vfiprintf_r+0x44>
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6cc:	2320      	movs	r3, #32
 800b6ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b6d2:	2330      	movs	r3, #48	@ 0x30
 800b6d4:	f04f 0901 	mov.w	r9, #1
 800b6d8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6dc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800b888 <_vfiprintf_r+0x21c>
 800b6e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b6e4:	4623      	mov	r3, r4
 800b6e6:	469a      	mov	sl, r3
 800b6e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6ec:	b10a      	cbz	r2, 800b6f2 <_vfiprintf_r+0x86>
 800b6ee:	2a25      	cmp	r2, #37	@ 0x25
 800b6f0:	d1f9      	bne.n	800b6e6 <_vfiprintf_r+0x7a>
 800b6f2:	ebba 0b04 	subs.w	fp, sl, r4
 800b6f6:	d00b      	beq.n	800b710 <_vfiprintf_r+0xa4>
 800b6f8:	465b      	mov	r3, fp
 800b6fa:	4622      	mov	r2, r4
 800b6fc:	4629      	mov	r1, r5
 800b6fe:	4630      	mov	r0, r6
 800b700:	f7ff ffa2 	bl	800b648 <__sfputs_r>
 800b704:	3001      	adds	r0, #1
 800b706:	f000 80a7 	beq.w	800b858 <_vfiprintf_r+0x1ec>
 800b70a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b70c:	445a      	add	r2, fp
 800b70e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b710:	f89a 3000 	ldrb.w	r3, [sl]
 800b714:	2b00      	cmp	r3, #0
 800b716:	f000 809f 	beq.w	800b858 <_vfiprintf_r+0x1ec>
 800b71a:	2300      	movs	r3, #0
 800b71c:	f04f 32ff 	mov.w	r2, #4294967295
 800b720:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b724:	f10a 0a01 	add.w	sl, sl, #1
 800b728:	9304      	str	r3, [sp, #16]
 800b72a:	9307      	str	r3, [sp, #28]
 800b72c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b730:	931a      	str	r3, [sp, #104]	@ 0x68
 800b732:	4654      	mov	r4, sl
 800b734:	2205      	movs	r2, #5
 800b736:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b73a:	4853      	ldr	r0, [pc, #332]	@ (800b888 <_vfiprintf_r+0x21c>)
 800b73c:	f7fe f9d3 	bl	8009ae6 <memchr>
 800b740:	9a04      	ldr	r2, [sp, #16]
 800b742:	b9d8      	cbnz	r0, 800b77c <_vfiprintf_r+0x110>
 800b744:	06d1      	lsls	r1, r2, #27
 800b746:	bf44      	itt	mi
 800b748:	2320      	movmi	r3, #32
 800b74a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b74e:	0713      	lsls	r3, r2, #28
 800b750:	bf44      	itt	mi
 800b752:	232b      	movmi	r3, #43	@ 0x2b
 800b754:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b758:	f89a 3000 	ldrb.w	r3, [sl]
 800b75c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b75e:	d015      	beq.n	800b78c <_vfiprintf_r+0x120>
 800b760:	4654      	mov	r4, sl
 800b762:	2000      	movs	r0, #0
 800b764:	f04f 0c0a 	mov.w	ip, #10
 800b768:	9a07      	ldr	r2, [sp, #28]
 800b76a:	4621      	mov	r1, r4
 800b76c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b770:	3b30      	subs	r3, #48	@ 0x30
 800b772:	2b09      	cmp	r3, #9
 800b774:	d94b      	bls.n	800b80e <_vfiprintf_r+0x1a2>
 800b776:	b1b0      	cbz	r0, 800b7a6 <_vfiprintf_r+0x13a>
 800b778:	9207      	str	r2, [sp, #28]
 800b77a:	e014      	b.n	800b7a6 <_vfiprintf_r+0x13a>
 800b77c:	eba0 0308 	sub.w	r3, r0, r8
 800b780:	fa09 f303 	lsl.w	r3, r9, r3
 800b784:	4313      	orrs	r3, r2
 800b786:	46a2      	mov	sl, r4
 800b788:	9304      	str	r3, [sp, #16]
 800b78a:	e7d2      	b.n	800b732 <_vfiprintf_r+0xc6>
 800b78c:	9b03      	ldr	r3, [sp, #12]
 800b78e:	1d19      	adds	r1, r3, #4
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	9103      	str	r1, [sp, #12]
 800b794:	2b00      	cmp	r3, #0
 800b796:	bfbb      	ittet	lt
 800b798:	425b      	neglt	r3, r3
 800b79a:	f042 0202 	orrlt.w	r2, r2, #2
 800b79e:	9307      	strge	r3, [sp, #28]
 800b7a0:	9307      	strlt	r3, [sp, #28]
 800b7a2:	bfb8      	it	lt
 800b7a4:	9204      	strlt	r2, [sp, #16]
 800b7a6:	7823      	ldrb	r3, [r4, #0]
 800b7a8:	2b2e      	cmp	r3, #46	@ 0x2e
 800b7aa:	d10a      	bne.n	800b7c2 <_vfiprintf_r+0x156>
 800b7ac:	7863      	ldrb	r3, [r4, #1]
 800b7ae:	2b2a      	cmp	r3, #42	@ 0x2a
 800b7b0:	d132      	bne.n	800b818 <_vfiprintf_r+0x1ac>
 800b7b2:	9b03      	ldr	r3, [sp, #12]
 800b7b4:	3402      	adds	r4, #2
 800b7b6:	1d1a      	adds	r2, r3, #4
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	9203      	str	r2, [sp, #12]
 800b7bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b7c0:	9305      	str	r3, [sp, #20]
 800b7c2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800b88c <_vfiprintf_r+0x220>
 800b7c6:	2203      	movs	r2, #3
 800b7c8:	4650      	mov	r0, sl
 800b7ca:	7821      	ldrb	r1, [r4, #0]
 800b7cc:	f7fe f98b 	bl	8009ae6 <memchr>
 800b7d0:	b138      	cbz	r0, 800b7e2 <_vfiprintf_r+0x176>
 800b7d2:	2240      	movs	r2, #64	@ 0x40
 800b7d4:	9b04      	ldr	r3, [sp, #16]
 800b7d6:	eba0 000a 	sub.w	r0, r0, sl
 800b7da:	4082      	lsls	r2, r0
 800b7dc:	4313      	orrs	r3, r2
 800b7de:	3401      	adds	r4, #1
 800b7e0:	9304      	str	r3, [sp, #16]
 800b7e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7e6:	2206      	movs	r2, #6
 800b7e8:	4829      	ldr	r0, [pc, #164]	@ (800b890 <_vfiprintf_r+0x224>)
 800b7ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b7ee:	f7fe f97a 	bl	8009ae6 <memchr>
 800b7f2:	2800      	cmp	r0, #0
 800b7f4:	d03f      	beq.n	800b876 <_vfiprintf_r+0x20a>
 800b7f6:	4b27      	ldr	r3, [pc, #156]	@ (800b894 <_vfiprintf_r+0x228>)
 800b7f8:	bb1b      	cbnz	r3, 800b842 <_vfiprintf_r+0x1d6>
 800b7fa:	9b03      	ldr	r3, [sp, #12]
 800b7fc:	3307      	adds	r3, #7
 800b7fe:	f023 0307 	bic.w	r3, r3, #7
 800b802:	3308      	adds	r3, #8
 800b804:	9303      	str	r3, [sp, #12]
 800b806:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b808:	443b      	add	r3, r7
 800b80a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b80c:	e76a      	b.n	800b6e4 <_vfiprintf_r+0x78>
 800b80e:	460c      	mov	r4, r1
 800b810:	2001      	movs	r0, #1
 800b812:	fb0c 3202 	mla	r2, ip, r2, r3
 800b816:	e7a8      	b.n	800b76a <_vfiprintf_r+0xfe>
 800b818:	2300      	movs	r3, #0
 800b81a:	f04f 0c0a 	mov.w	ip, #10
 800b81e:	4619      	mov	r1, r3
 800b820:	3401      	adds	r4, #1
 800b822:	9305      	str	r3, [sp, #20]
 800b824:	4620      	mov	r0, r4
 800b826:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b82a:	3a30      	subs	r2, #48	@ 0x30
 800b82c:	2a09      	cmp	r2, #9
 800b82e:	d903      	bls.n	800b838 <_vfiprintf_r+0x1cc>
 800b830:	2b00      	cmp	r3, #0
 800b832:	d0c6      	beq.n	800b7c2 <_vfiprintf_r+0x156>
 800b834:	9105      	str	r1, [sp, #20]
 800b836:	e7c4      	b.n	800b7c2 <_vfiprintf_r+0x156>
 800b838:	4604      	mov	r4, r0
 800b83a:	2301      	movs	r3, #1
 800b83c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b840:	e7f0      	b.n	800b824 <_vfiprintf_r+0x1b8>
 800b842:	ab03      	add	r3, sp, #12
 800b844:	9300      	str	r3, [sp, #0]
 800b846:	462a      	mov	r2, r5
 800b848:	4630      	mov	r0, r6
 800b84a:	4b13      	ldr	r3, [pc, #76]	@ (800b898 <_vfiprintf_r+0x22c>)
 800b84c:	a904      	add	r1, sp, #16
 800b84e:	f7fd fb65 	bl	8008f1c <_printf_float>
 800b852:	4607      	mov	r7, r0
 800b854:	1c78      	adds	r0, r7, #1
 800b856:	d1d6      	bne.n	800b806 <_vfiprintf_r+0x19a>
 800b858:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b85a:	07d9      	lsls	r1, r3, #31
 800b85c:	d405      	bmi.n	800b86a <_vfiprintf_r+0x1fe>
 800b85e:	89ab      	ldrh	r3, [r5, #12]
 800b860:	059a      	lsls	r2, r3, #22
 800b862:	d402      	bmi.n	800b86a <_vfiprintf_r+0x1fe>
 800b864:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b866:	f7fe f93d 	bl	8009ae4 <__retarget_lock_release_recursive>
 800b86a:	89ab      	ldrh	r3, [r5, #12]
 800b86c:	065b      	lsls	r3, r3, #25
 800b86e:	f53f af1f 	bmi.w	800b6b0 <_vfiprintf_r+0x44>
 800b872:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b874:	e71e      	b.n	800b6b4 <_vfiprintf_r+0x48>
 800b876:	ab03      	add	r3, sp, #12
 800b878:	9300      	str	r3, [sp, #0]
 800b87a:	462a      	mov	r2, r5
 800b87c:	4630      	mov	r0, r6
 800b87e:	4b06      	ldr	r3, [pc, #24]	@ (800b898 <_vfiprintf_r+0x22c>)
 800b880:	a904      	add	r1, sp, #16
 800b882:	f7fd fde9 	bl	8009458 <_printf_i>
 800b886:	e7e4      	b.n	800b852 <_vfiprintf_r+0x1e6>
 800b888:	0800c080 	.word	0x0800c080
 800b88c:	0800c086 	.word	0x0800c086
 800b890:	0800c08a 	.word	0x0800c08a
 800b894:	08008f1d 	.word	0x08008f1d
 800b898:	0800b649 	.word	0x0800b649

0800b89c <__swbuf_r>:
 800b89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b89e:	460e      	mov	r6, r1
 800b8a0:	4614      	mov	r4, r2
 800b8a2:	4605      	mov	r5, r0
 800b8a4:	b118      	cbz	r0, 800b8ae <__swbuf_r+0x12>
 800b8a6:	6a03      	ldr	r3, [r0, #32]
 800b8a8:	b90b      	cbnz	r3, 800b8ae <__swbuf_r+0x12>
 800b8aa:	f7fd ff81 	bl	80097b0 <__sinit>
 800b8ae:	69a3      	ldr	r3, [r4, #24]
 800b8b0:	60a3      	str	r3, [r4, #8]
 800b8b2:	89a3      	ldrh	r3, [r4, #12]
 800b8b4:	071a      	lsls	r2, r3, #28
 800b8b6:	d501      	bpl.n	800b8bc <__swbuf_r+0x20>
 800b8b8:	6923      	ldr	r3, [r4, #16]
 800b8ba:	b943      	cbnz	r3, 800b8ce <__swbuf_r+0x32>
 800b8bc:	4621      	mov	r1, r4
 800b8be:	4628      	mov	r0, r5
 800b8c0:	f000 f82a 	bl	800b918 <__swsetup_r>
 800b8c4:	b118      	cbz	r0, 800b8ce <__swbuf_r+0x32>
 800b8c6:	f04f 37ff 	mov.w	r7, #4294967295
 800b8ca:	4638      	mov	r0, r7
 800b8cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8ce:	6823      	ldr	r3, [r4, #0]
 800b8d0:	6922      	ldr	r2, [r4, #16]
 800b8d2:	b2f6      	uxtb	r6, r6
 800b8d4:	1a98      	subs	r0, r3, r2
 800b8d6:	6963      	ldr	r3, [r4, #20]
 800b8d8:	4637      	mov	r7, r6
 800b8da:	4283      	cmp	r3, r0
 800b8dc:	dc05      	bgt.n	800b8ea <__swbuf_r+0x4e>
 800b8de:	4621      	mov	r1, r4
 800b8e0:	4628      	mov	r0, r5
 800b8e2:	f7ff fdc3 	bl	800b46c <_fflush_r>
 800b8e6:	2800      	cmp	r0, #0
 800b8e8:	d1ed      	bne.n	800b8c6 <__swbuf_r+0x2a>
 800b8ea:	68a3      	ldr	r3, [r4, #8]
 800b8ec:	3b01      	subs	r3, #1
 800b8ee:	60a3      	str	r3, [r4, #8]
 800b8f0:	6823      	ldr	r3, [r4, #0]
 800b8f2:	1c5a      	adds	r2, r3, #1
 800b8f4:	6022      	str	r2, [r4, #0]
 800b8f6:	701e      	strb	r6, [r3, #0]
 800b8f8:	6962      	ldr	r2, [r4, #20]
 800b8fa:	1c43      	adds	r3, r0, #1
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	d004      	beq.n	800b90a <__swbuf_r+0x6e>
 800b900:	89a3      	ldrh	r3, [r4, #12]
 800b902:	07db      	lsls	r3, r3, #31
 800b904:	d5e1      	bpl.n	800b8ca <__swbuf_r+0x2e>
 800b906:	2e0a      	cmp	r6, #10
 800b908:	d1df      	bne.n	800b8ca <__swbuf_r+0x2e>
 800b90a:	4621      	mov	r1, r4
 800b90c:	4628      	mov	r0, r5
 800b90e:	f7ff fdad 	bl	800b46c <_fflush_r>
 800b912:	2800      	cmp	r0, #0
 800b914:	d0d9      	beq.n	800b8ca <__swbuf_r+0x2e>
 800b916:	e7d6      	b.n	800b8c6 <__swbuf_r+0x2a>

0800b918 <__swsetup_r>:
 800b918:	b538      	push	{r3, r4, r5, lr}
 800b91a:	4b29      	ldr	r3, [pc, #164]	@ (800b9c0 <__swsetup_r+0xa8>)
 800b91c:	4605      	mov	r5, r0
 800b91e:	6818      	ldr	r0, [r3, #0]
 800b920:	460c      	mov	r4, r1
 800b922:	b118      	cbz	r0, 800b92c <__swsetup_r+0x14>
 800b924:	6a03      	ldr	r3, [r0, #32]
 800b926:	b90b      	cbnz	r3, 800b92c <__swsetup_r+0x14>
 800b928:	f7fd ff42 	bl	80097b0 <__sinit>
 800b92c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b930:	0719      	lsls	r1, r3, #28
 800b932:	d422      	bmi.n	800b97a <__swsetup_r+0x62>
 800b934:	06da      	lsls	r2, r3, #27
 800b936:	d407      	bmi.n	800b948 <__swsetup_r+0x30>
 800b938:	2209      	movs	r2, #9
 800b93a:	602a      	str	r2, [r5, #0]
 800b93c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b940:	f04f 30ff 	mov.w	r0, #4294967295
 800b944:	81a3      	strh	r3, [r4, #12]
 800b946:	e033      	b.n	800b9b0 <__swsetup_r+0x98>
 800b948:	0758      	lsls	r0, r3, #29
 800b94a:	d512      	bpl.n	800b972 <__swsetup_r+0x5a>
 800b94c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b94e:	b141      	cbz	r1, 800b962 <__swsetup_r+0x4a>
 800b950:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b954:	4299      	cmp	r1, r3
 800b956:	d002      	beq.n	800b95e <__swsetup_r+0x46>
 800b958:	4628      	mov	r0, r5
 800b95a:	f7fe ff31 	bl	800a7c0 <_free_r>
 800b95e:	2300      	movs	r3, #0
 800b960:	6363      	str	r3, [r4, #52]	@ 0x34
 800b962:	89a3      	ldrh	r3, [r4, #12]
 800b964:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b968:	81a3      	strh	r3, [r4, #12]
 800b96a:	2300      	movs	r3, #0
 800b96c:	6063      	str	r3, [r4, #4]
 800b96e:	6923      	ldr	r3, [r4, #16]
 800b970:	6023      	str	r3, [r4, #0]
 800b972:	89a3      	ldrh	r3, [r4, #12]
 800b974:	f043 0308 	orr.w	r3, r3, #8
 800b978:	81a3      	strh	r3, [r4, #12]
 800b97a:	6923      	ldr	r3, [r4, #16]
 800b97c:	b94b      	cbnz	r3, 800b992 <__swsetup_r+0x7a>
 800b97e:	89a3      	ldrh	r3, [r4, #12]
 800b980:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b984:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b988:	d003      	beq.n	800b992 <__swsetup_r+0x7a>
 800b98a:	4621      	mov	r1, r4
 800b98c:	4628      	mov	r0, r5
 800b98e:	f000 f882 	bl	800ba96 <__smakebuf_r>
 800b992:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b996:	f013 0201 	ands.w	r2, r3, #1
 800b99a:	d00a      	beq.n	800b9b2 <__swsetup_r+0x9a>
 800b99c:	2200      	movs	r2, #0
 800b99e:	60a2      	str	r2, [r4, #8]
 800b9a0:	6962      	ldr	r2, [r4, #20]
 800b9a2:	4252      	negs	r2, r2
 800b9a4:	61a2      	str	r2, [r4, #24]
 800b9a6:	6922      	ldr	r2, [r4, #16]
 800b9a8:	b942      	cbnz	r2, 800b9bc <__swsetup_r+0xa4>
 800b9aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b9ae:	d1c5      	bne.n	800b93c <__swsetup_r+0x24>
 800b9b0:	bd38      	pop	{r3, r4, r5, pc}
 800b9b2:	0799      	lsls	r1, r3, #30
 800b9b4:	bf58      	it	pl
 800b9b6:	6962      	ldrpl	r2, [r4, #20]
 800b9b8:	60a2      	str	r2, [r4, #8]
 800b9ba:	e7f4      	b.n	800b9a6 <__swsetup_r+0x8e>
 800b9bc:	2000      	movs	r0, #0
 800b9be:	e7f7      	b.n	800b9b0 <__swsetup_r+0x98>
 800b9c0:	20000098 	.word	0x20000098

0800b9c4 <_raise_r>:
 800b9c4:	291f      	cmp	r1, #31
 800b9c6:	b538      	push	{r3, r4, r5, lr}
 800b9c8:	4605      	mov	r5, r0
 800b9ca:	460c      	mov	r4, r1
 800b9cc:	d904      	bls.n	800b9d8 <_raise_r+0x14>
 800b9ce:	2316      	movs	r3, #22
 800b9d0:	6003      	str	r3, [r0, #0]
 800b9d2:	f04f 30ff 	mov.w	r0, #4294967295
 800b9d6:	bd38      	pop	{r3, r4, r5, pc}
 800b9d8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b9da:	b112      	cbz	r2, 800b9e2 <_raise_r+0x1e>
 800b9dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b9e0:	b94b      	cbnz	r3, 800b9f6 <_raise_r+0x32>
 800b9e2:	4628      	mov	r0, r5
 800b9e4:	f000 f830 	bl	800ba48 <_getpid_r>
 800b9e8:	4622      	mov	r2, r4
 800b9ea:	4601      	mov	r1, r0
 800b9ec:	4628      	mov	r0, r5
 800b9ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9f2:	f000 b817 	b.w	800ba24 <_kill_r>
 800b9f6:	2b01      	cmp	r3, #1
 800b9f8:	d00a      	beq.n	800ba10 <_raise_r+0x4c>
 800b9fa:	1c59      	adds	r1, r3, #1
 800b9fc:	d103      	bne.n	800ba06 <_raise_r+0x42>
 800b9fe:	2316      	movs	r3, #22
 800ba00:	6003      	str	r3, [r0, #0]
 800ba02:	2001      	movs	r0, #1
 800ba04:	e7e7      	b.n	800b9d6 <_raise_r+0x12>
 800ba06:	2100      	movs	r1, #0
 800ba08:	4620      	mov	r0, r4
 800ba0a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ba0e:	4798      	blx	r3
 800ba10:	2000      	movs	r0, #0
 800ba12:	e7e0      	b.n	800b9d6 <_raise_r+0x12>

0800ba14 <raise>:
 800ba14:	4b02      	ldr	r3, [pc, #8]	@ (800ba20 <raise+0xc>)
 800ba16:	4601      	mov	r1, r0
 800ba18:	6818      	ldr	r0, [r3, #0]
 800ba1a:	f7ff bfd3 	b.w	800b9c4 <_raise_r>
 800ba1e:	bf00      	nop
 800ba20:	20000098 	.word	0x20000098

0800ba24 <_kill_r>:
 800ba24:	b538      	push	{r3, r4, r5, lr}
 800ba26:	2300      	movs	r3, #0
 800ba28:	4d06      	ldr	r5, [pc, #24]	@ (800ba44 <_kill_r+0x20>)
 800ba2a:	4604      	mov	r4, r0
 800ba2c:	4608      	mov	r0, r1
 800ba2e:	4611      	mov	r1, r2
 800ba30:	602b      	str	r3, [r5, #0]
 800ba32:	f7f7 f8b6 	bl	8002ba2 <_kill>
 800ba36:	1c43      	adds	r3, r0, #1
 800ba38:	d102      	bne.n	800ba40 <_kill_r+0x1c>
 800ba3a:	682b      	ldr	r3, [r5, #0]
 800ba3c:	b103      	cbz	r3, 800ba40 <_kill_r+0x1c>
 800ba3e:	6023      	str	r3, [r4, #0]
 800ba40:	bd38      	pop	{r3, r4, r5, pc}
 800ba42:	bf00      	nop
 800ba44:	200048f4 	.word	0x200048f4

0800ba48 <_getpid_r>:
 800ba48:	f7f7 b8a4 	b.w	8002b94 <_getpid>

0800ba4c <__swhatbuf_r>:
 800ba4c:	b570      	push	{r4, r5, r6, lr}
 800ba4e:	460c      	mov	r4, r1
 800ba50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba54:	4615      	mov	r5, r2
 800ba56:	2900      	cmp	r1, #0
 800ba58:	461e      	mov	r6, r3
 800ba5a:	b096      	sub	sp, #88	@ 0x58
 800ba5c:	da0c      	bge.n	800ba78 <__swhatbuf_r+0x2c>
 800ba5e:	89a3      	ldrh	r3, [r4, #12]
 800ba60:	2100      	movs	r1, #0
 800ba62:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ba66:	bf14      	ite	ne
 800ba68:	2340      	movne	r3, #64	@ 0x40
 800ba6a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ba6e:	2000      	movs	r0, #0
 800ba70:	6031      	str	r1, [r6, #0]
 800ba72:	602b      	str	r3, [r5, #0]
 800ba74:	b016      	add	sp, #88	@ 0x58
 800ba76:	bd70      	pop	{r4, r5, r6, pc}
 800ba78:	466a      	mov	r2, sp
 800ba7a:	f000 f849 	bl	800bb10 <_fstat_r>
 800ba7e:	2800      	cmp	r0, #0
 800ba80:	dbed      	blt.n	800ba5e <__swhatbuf_r+0x12>
 800ba82:	9901      	ldr	r1, [sp, #4]
 800ba84:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ba88:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ba8c:	4259      	negs	r1, r3
 800ba8e:	4159      	adcs	r1, r3
 800ba90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ba94:	e7eb      	b.n	800ba6e <__swhatbuf_r+0x22>

0800ba96 <__smakebuf_r>:
 800ba96:	898b      	ldrh	r3, [r1, #12]
 800ba98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba9a:	079d      	lsls	r5, r3, #30
 800ba9c:	4606      	mov	r6, r0
 800ba9e:	460c      	mov	r4, r1
 800baa0:	d507      	bpl.n	800bab2 <__smakebuf_r+0x1c>
 800baa2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800baa6:	6023      	str	r3, [r4, #0]
 800baa8:	6123      	str	r3, [r4, #16]
 800baaa:	2301      	movs	r3, #1
 800baac:	6163      	str	r3, [r4, #20]
 800baae:	b003      	add	sp, #12
 800bab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bab2:	466a      	mov	r2, sp
 800bab4:	ab01      	add	r3, sp, #4
 800bab6:	f7ff ffc9 	bl	800ba4c <__swhatbuf_r>
 800baba:	9f00      	ldr	r7, [sp, #0]
 800babc:	4605      	mov	r5, r0
 800babe:	4639      	mov	r1, r7
 800bac0:	4630      	mov	r0, r6
 800bac2:	f7fe feef 	bl	800a8a4 <_malloc_r>
 800bac6:	b948      	cbnz	r0, 800badc <__smakebuf_r+0x46>
 800bac8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bacc:	059a      	lsls	r2, r3, #22
 800bace:	d4ee      	bmi.n	800baae <__smakebuf_r+0x18>
 800bad0:	f023 0303 	bic.w	r3, r3, #3
 800bad4:	f043 0302 	orr.w	r3, r3, #2
 800bad8:	81a3      	strh	r3, [r4, #12]
 800bada:	e7e2      	b.n	800baa2 <__smakebuf_r+0xc>
 800badc:	89a3      	ldrh	r3, [r4, #12]
 800bade:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bae2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bae6:	81a3      	strh	r3, [r4, #12]
 800bae8:	9b01      	ldr	r3, [sp, #4]
 800baea:	6020      	str	r0, [r4, #0]
 800baec:	b15b      	cbz	r3, 800bb06 <__smakebuf_r+0x70>
 800baee:	4630      	mov	r0, r6
 800baf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800baf4:	f000 f81e 	bl	800bb34 <_isatty_r>
 800baf8:	b128      	cbz	r0, 800bb06 <__smakebuf_r+0x70>
 800bafa:	89a3      	ldrh	r3, [r4, #12]
 800bafc:	f023 0303 	bic.w	r3, r3, #3
 800bb00:	f043 0301 	orr.w	r3, r3, #1
 800bb04:	81a3      	strh	r3, [r4, #12]
 800bb06:	89a3      	ldrh	r3, [r4, #12]
 800bb08:	431d      	orrs	r5, r3
 800bb0a:	81a5      	strh	r5, [r4, #12]
 800bb0c:	e7cf      	b.n	800baae <__smakebuf_r+0x18>
	...

0800bb10 <_fstat_r>:
 800bb10:	b538      	push	{r3, r4, r5, lr}
 800bb12:	2300      	movs	r3, #0
 800bb14:	4d06      	ldr	r5, [pc, #24]	@ (800bb30 <_fstat_r+0x20>)
 800bb16:	4604      	mov	r4, r0
 800bb18:	4608      	mov	r0, r1
 800bb1a:	4611      	mov	r1, r2
 800bb1c:	602b      	str	r3, [r5, #0]
 800bb1e:	f7f7 f89f 	bl	8002c60 <_fstat>
 800bb22:	1c43      	adds	r3, r0, #1
 800bb24:	d102      	bne.n	800bb2c <_fstat_r+0x1c>
 800bb26:	682b      	ldr	r3, [r5, #0]
 800bb28:	b103      	cbz	r3, 800bb2c <_fstat_r+0x1c>
 800bb2a:	6023      	str	r3, [r4, #0]
 800bb2c:	bd38      	pop	{r3, r4, r5, pc}
 800bb2e:	bf00      	nop
 800bb30:	200048f4 	.word	0x200048f4

0800bb34 <_isatty_r>:
 800bb34:	b538      	push	{r3, r4, r5, lr}
 800bb36:	2300      	movs	r3, #0
 800bb38:	4d05      	ldr	r5, [pc, #20]	@ (800bb50 <_isatty_r+0x1c>)
 800bb3a:	4604      	mov	r4, r0
 800bb3c:	4608      	mov	r0, r1
 800bb3e:	602b      	str	r3, [r5, #0]
 800bb40:	f7f7 f89d 	bl	8002c7e <_isatty>
 800bb44:	1c43      	adds	r3, r0, #1
 800bb46:	d102      	bne.n	800bb4e <_isatty_r+0x1a>
 800bb48:	682b      	ldr	r3, [r5, #0]
 800bb4a:	b103      	cbz	r3, 800bb4e <_isatty_r+0x1a>
 800bb4c:	6023      	str	r3, [r4, #0]
 800bb4e:	bd38      	pop	{r3, r4, r5, pc}
 800bb50:	200048f4 	.word	0x200048f4

0800bb54 <_init>:
 800bb54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb56:	bf00      	nop
 800bb58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb5a:	bc08      	pop	{r3}
 800bb5c:	469e      	mov	lr, r3
 800bb5e:	4770      	bx	lr

0800bb60 <_fini>:
 800bb60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb62:	bf00      	nop
 800bb64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb66:	bc08      	pop	{r3}
 800bb68:	469e      	mov	lr, r3
 800bb6a:	4770      	bx	lr
