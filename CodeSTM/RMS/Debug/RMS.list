
RMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5dc  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c4  0800c6f0  0800c6f0  0000d6f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ccb4  0800ccb4  0000e2f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ccb4  0800ccb4  0000dcb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ccbc  0800ccbc  0000e2f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ccbc  0800ccbc  0000dcbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ccc0  0800ccc0  0000dcc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002f4  20000000  0800ccc4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000046b0  200002f4  0800cfb8  0000e2f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200049a4  0800cfb8  0000e9a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e2f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019e5d  00000000  00000000  0000e31d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bb0  00000000  00000000  0002817a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001778  00000000  00000000  0002bd30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001252  00000000  00000000  0002d4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b39e  00000000  00000000  0002e6fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a910  00000000  00000000  00049a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098c50  00000000  00000000  000643a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fcff8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007670  00000000  00000000  000fd03c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001046ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200002f4 	.word	0x200002f4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c6d4 	.word	0x0800c6d4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200002f8 	.word	0x200002f8
 800014c:	0800c6d4 	.word	0x0800c6d4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <MPR121_Init>:
#include "MPR121.h"


uint8_t MPR121_Init(void) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
    
    writeRegister(MPR121_SOFTRESET, 0x63);
 8000b2e:	2163      	movs	r1, #99	@ 0x63
 8000b30:	2080      	movs	r0, #128	@ 0x80
 8000b32:	f000 f859 	bl	8000be8 <writeRegister>
    HAL_Delay(1);
 8000b36:	2001      	movs	r0, #1
 8000b38:	f002 fae2 	bl	8003100 <HAL_Delay>
    writeRegister(MPR121_ECR, 0x0);
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	205e      	movs	r0, #94	@ 0x5e
 8000b40:	f000 f852 	bl	8000be8 <writeRegister>

  uint8_t c = readRegister8(MPR121_CONFIG2);
 8000b44:	205d      	movs	r0, #93	@ 0x5d
 8000b46:	f000 f86b 	bl	8000c20 <readRegister8>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]

  if (c != 0x24)
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	2b24      	cmp	r3, #36	@ 0x24
 8000b52:	d001      	beq.n	8000b58 <MPR121_Init+0x30>
    return c;
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	e043      	b.n	8000be0 <MPR121_Init+0xb8>

  setThresholds(MPR121_TOUCH_THRESHOLD_DEFAULT, MPR121_RELEASE_THRESHOLD_DEFAULT);
 8000b58:	2106      	movs	r1, #6
 8000b5a:	200c      	movs	r0, #12
 8000b5c:	f000 f898 	bl	8000c90 <setThresholds>
  writeRegister(MPR121_MHDR, 0x01);
 8000b60:	2101      	movs	r1, #1
 8000b62:	202b      	movs	r0, #43	@ 0x2b
 8000b64:	f000 f840 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_NHDR, 0x01);
 8000b68:	2101      	movs	r1, #1
 8000b6a:	202c      	movs	r0, #44	@ 0x2c
 8000b6c:	f000 f83c 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_NCLR, 0x0E);
 8000b70:	210e      	movs	r1, #14
 8000b72:	202d      	movs	r0, #45	@ 0x2d
 8000b74:	f000 f838 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_FDLR, 0x00);
 8000b78:	2100      	movs	r1, #0
 8000b7a:	202e      	movs	r0, #46	@ 0x2e
 8000b7c:	f000 f834 	bl	8000be8 <writeRegister>

  writeRegister(MPR121_MHDF, 0x01);
 8000b80:	2101      	movs	r1, #1
 8000b82:	202f      	movs	r0, #47	@ 0x2f
 8000b84:	f000 f830 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_NHDF, 0x05);
 8000b88:	2105      	movs	r1, #5
 8000b8a:	2030      	movs	r0, #48	@ 0x30
 8000b8c:	f000 f82c 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_NCLF, 0x01);
 8000b90:	2101      	movs	r1, #1
 8000b92:	2031      	movs	r0, #49	@ 0x31
 8000b94:	f000 f828 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_FDLF, 0x00);
 8000b98:	2100      	movs	r1, #0
 8000b9a:	2032      	movs	r0, #50	@ 0x32
 8000b9c:	f000 f824 	bl	8000be8 <writeRegister>

  writeRegister(MPR121_NHDT, 0x00);
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	2033      	movs	r0, #51	@ 0x33
 8000ba4:	f000 f820 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_NCLT, 0x00);
 8000ba8:	2100      	movs	r1, #0
 8000baa:	2034      	movs	r0, #52	@ 0x34
 8000bac:	f000 f81c 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_FDLT, 0x00);
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	2035      	movs	r0, #53	@ 0x35
 8000bb4:	f000 f818 	bl	8000be8 <writeRegister>

  writeRegister(MPR121_DEBOUNCE, 0);
 8000bb8:	2100      	movs	r1, #0
 8000bba:	205b      	movs	r0, #91	@ 0x5b
 8000bbc:	f000 f814 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_CONFIG1, 0x10); // default, 16uA charge current
 8000bc0:	2110      	movs	r1, #16
 8000bc2:	205c      	movs	r0, #92	@ 0x5c
 8000bc4:	f000 f810 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_CONFIG2, 0x20); // 0.5uS encoding, 1ms period
 8000bc8:	2120      	movs	r1, #32
 8000bca:	205d      	movs	r0, #93	@ 0x5d
 8000bcc:	f000 f80c 	bl	8000be8 <writeRegister>
    uint8_t ECR_SETTING =
 8000bd0:	238c      	movs	r3, #140	@ 0x8c
 8000bd2:	71bb      	strb	r3, [r7, #6]
      B10000000 + 12; // 5 bits for baseline tracking & proximity disabled + X
                      // amount of electrodes running (12)
  writeRegister(MPR121_ECR, ECR_SETTING); // start with above ECR setting
 8000bd4:	79bb      	ldrb	r3, [r7, #6]
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	205e      	movs	r0, #94	@ 0x5e
 8000bda:	f000 f805 	bl	8000be8 <writeRegister>

    return c; 
 8000bde:	79fb      	ldrb	r3, [r7, #7]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <writeRegister>:
    
//     uint16_t touchData = (touchStatus[1] << 8) | touchStatus[0];
//     return (touchData != 0) ? 1 : 0;
// }

void writeRegister(uint8_t reg, uint8_t cmd) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af04      	add	r7, sp, #16
 8000bee:	4603      	mov	r3, r0
 8000bf0:	460a      	mov	r2, r1
 8000bf2:	71fb      	strb	r3, [r7, #7]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	71bb      	strb	r3, [r7, #6]
	// uint8_t arr[2] = { reg, cmd };
	// HAL_I2C_Master_Transmit(&hi2c1, MPR121_I2C_ADDR, arr, 2, HAL_MAX_DELAY);
    HAL_I2C_Mem_Write(&hi2c1, MPR121_I2C_ADDR|0x01,reg,1,&cmd,1,HAL_MAX_DELAY);
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000c00:	9302      	str	r3, [sp, #8]
 8000c02:	2301      	movs	r3, #1
 8000c04:	9301      	str	r3, [sp, #4]
 8000c06:	1dbb      	adds	r3, r7, #6
 8000c08:	9300      	str	r3, [sp, #0]
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	21b5      	movs	r1, #181	@ 0xb5
 8000c0e:	4803      	ldr	r0, [pc, #12]	@ (8000c1c <writeRegister+0x34>)
 8000c10:	f003 f9f6 	bl	8004000 <HAL_I2C_Mem_Write>
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	200005e0 	.word	0x200005e0

08000c20 <readRegister8>:
/**
 * @brief Reads from a specific register.
 * @param reg Address of register to read from.
 * @return Byte read.
 */
uint8_t readRegister8(uint8_t reg) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b088      	sub	sp, #32
 8000c24:	af04      	add	r7, sp, #16
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
	// HAL_I2C_Master_Transmit(&hi2c1, MPR121_I2C_ADDR, &reg, 1, HAL_MAX_DELAY);
	uint8_t result;
	// HAL_I2C_Master_Receive(&hi2c1, MPR121_I2C_ADDR, &result, 1, HAL_MAX_DELAY);
    HAL_I2C_Mem_Read(&hi2c1,MPR121_I2C_ADDR,reg,1,&result,1,HAL_MAX_DELAY);
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	b29a      	uxth	r2, r3
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c32:	9302      	str	r3, [sp, #8]
 8000c34:	2301      	movs	r3, #1
 8000c36:	9301      	str	r3, [sp, #4]
 8000c38:	f107 030f 	add.w	r3, r7, #15
 8000c3c:	9300      	str	r3, [sp, #0]
 8000c3e:	2301      	movs	r3, #1
 8000c40:	21b4      	movs	r1, #180	@ 0xb4
 8000c42:	4804      	ldr	r0, [pc, #16]	@ (8000c54 <readRegister8+0x34>)
 8000c44:	f003 fad6 	bl	80041f4 <HAL_I2C_Mem_Read>
	return result;
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200005e0 	.word	0x200005e0

08000c58 <readRegister16>:

uint16_t readRegister16(uint8_t reg) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b088      	sub	sp, #32
 8000c5c:	af04      	add	r7, sp, #16
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
	// HAL_I2C_Master_Transmit(&hi2c1, MPR121_I2C_ADDR, &reg, 1, HAL_MAX_DELAY);
	// uint8_t result[2];
	// HAL_I2C_Master_Receive(&hi2c1, MPR121_I2C_ADDR, (uint8_t*)&result, 2, HAL_MAX_DELAY);
	// return result[0]|(result[1]<<8);
	uint16_t result;
    HAL_I2C_Mem_Read(&hi2c1,MPR121_I2C_ADDR,reg,1,(uint8_t*)&result,2,HAL_MAX_DELAY);
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	b29a      	uxth	r2, r3
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6a:	9302      	str	r3, [sp, #8]
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	9301      	str	r3, [sp, #4]
 8000c70:	f107 030e 	add.w	r3, r7, #14
 8000c74:	9300      	str	r3, [sp, #0]
 8000c76:	2301      	movs	r3, #1
 8000c78:	21b4      	movs	r1, #180	@ 0xb4
 8000c7a:	4804      	ldr	r0, [pc, #16]	@ (8000c8c <readRegister16+0x34>)
 8000c7c:	f003 faba 	bl	80041f4 <HAL_I2C_Mem_Read>
    return result;
 8000c80:	89fb      	ldrh	r3, [r7, #14]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200005e0 	.word	0x200005e0

08000c90 <setThresholds>:

void setThresholds(uint8_t touch, uint8_t release) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	460a      	mov	r2, r1
 8000c9a:	71fb      	strb	r3, [r7, #7]
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	71bb      	strb	r3, [r7, #6]
  // set all thresholds (the same)
  for (uint8_t i = 0; i < 12; i++) {
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	73fb      	strb	r3, [r7, #15]
 8000ca4:	e016      	b.n	8000cd4 <setThresholds+0x44>
    writeRegister(MPR121_TOUCHTH_0 + 2 * i, touch);
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	3341      	adds	r3, #65	@ 0x41
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	79fa      	ldrb	r2, [r7, #7]
 8000cb2:	4611      	mov	r1, r2
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff ff97 	bl	8000be8 <writeRegister>
    writeRegister(MPR121_RELEASETH_0 + 2 * i, release);
 8000cba:	7bfb      	ldrb	r3, [r7, #15]
 8000cbc:	3321      	adds	r3, #33	@ 0x21
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	79ba      	ldrb	r2, [r7, #6]
 8000cc6:	4611      	mov	r1, r2
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ff8d 	bl	8000be8 <writeRegister>
  for (uint8_t i = 0; i < 12; i++) {
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	73fb      	strb	r3, [r7, #15]
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
 8000cd6:	2b0b      	cmp	r3, #11
 8000cd8:	d9e5      	bls.n	8000ca6 <setThresholds+0x16>
  }
}
 8000cda:	bf00      	nop
 8000cdc:	bf00      	nop
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <touched>:
  if (t > 12)
    return 0;
  return readRegister16(MPR121_FILTDATA_0L + t * 2);
}

uint16_t touched(void) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
  uint16_t t = readRegister16(MPR121_TOUCHSTATUS_L);
 8000cea:	2000      	movs	r0, #0
 8000cec:	f7ff ffb4 	bl	8000c58 <readRegister16>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	80fb      	strh	r3, [r7, #6]
  return t & 0x0FFF;
 8000cf4:	88fb      	ldrh	r3, [r7, #6]
 8000cf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cfa:	b29b      	uxth	r3, r3
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <BMP180_Init>:

/**
 * @brief Initializes the BMP180 temperature/pressure sensor.
 * @param hi2c User I2C handle pointer.
 */
void BMP180_Init(I2C_HandleTypeDef *hi2c) {
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	_bmp180_ui2c = hi2c;
 8000d0c:	4a03      	ldr	r2, [pc, #12]	@ (8000d1c <BMP180_Init+0x18>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6013      	str	r3, [r2, #0]
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr
 8000d1c:	20000310 	.word	0x20000310

08000d20 <BMP180_SetOversampling>:
/**
 * @param oss Enum, oversampling setting.
 * @note Available resolutions: BMP180_LOW, BMP180_STANDARD, BMP180_HIGH, BMP180_ULTRA.
 * @note Refer to section 3.3.1 of datasheet.
 */
void BMP180_SetOversampling(BMP180_OSS oss) {
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
	_bmp180_oss = oss;
 8000d2a:	4a04      	ldr	r2, [pc, #16]	@ (8000d3c <BMP180_SetOversampling+0x1c>)
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	7013      	strb	r3, [r2, #0]
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bc80      	pop	{r7}
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	2000032a 	.word	0x2000032a

08000d40 <BMP180_UpdateCalibrationData>:

/**
 * @brief Updates calibration data.
 * @note Must be called once before main loop.
 */
void BMP180_UpdateCalibrationData(void) {
 8000d40:	b598      	push	{r3, r4, r7, lr}
 8000d42:	af00      	add	r7, sp, #0
	_bmp180_eeprom.BMP180_AC1 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC1]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC1]);
 8000d44:	23aa      	movs	r3, #170	@ 0xaa
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 f8dc 	bl	8000f04 <BMP180_ReadReg>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	021b      	lsls	r3, r3, #8
 8000d50:	b21c      	sxth	r4, r3
 8000d52:	23ab      	movs	r3, #171	@ 0xab
 8000d54:	4618      	mov	r0, r3
 8000d56:	f000 f8d5 	bl	8000f04 <BMP180_ReadReg>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	b21b      	sxth	r3, r3
 8000d5e:	4323      	orrs	r3, r4
 8000d60:	b21a      	sxth	r2, r3
 8000d62:	4b58      	ldr	r3, [pc, #352]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000d64:	801a      	strh	r2, [r3, #0]
	_bmp180_eeprom.BMP180_AC2 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC2]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC2]);
 8000d66:	23ac      	movs	r3, #172	@ 0xac
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f000 f8cb 	bl	8000f04 <BMP180_ReadReg>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	021b      	lsls	r3, r3, #8
 8000d72:	b21c      	sxth	r4, r3
 8000d74:	23ad      	movs	r3, #173	@ 0xad
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 f8c4 	bl	8000f04 <BMP180_ReadReg>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	b21b      	sxth	r3, r3
 8000d80:	4323      	orrs	r3, r4
 8000d82:	b21a      	sxth	r2, r3
 8000d84:	4b4f      	ldr	r3, [pc, #316]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000d86:	805a      	strh	r2, [r3, #2]
	_bmp180_eeprom.BMP180_AC3 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC3]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC3]);
 8000d88:	23ae      	movs	r3, #174	@ 0xae
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 f8ba 	bl	8000f04 <BMP180_ReadReg>
 8000d90:	4603      	mov	r3, r0
 8000d92:	021b      	lsls	r3, r3, #8
 8000d94:	b21c      	sxth	r4, r3
 8000d96:	23af      	movs	r3, #175	@ 0xaf
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f000 f8b3 	bl	8000f04 <BMP180_ReadReg>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	b21b      	sxth	r3, r3
 8000da2:	4323      	orrs	r3, r4
 8000da4:	b21a      	sxth	r2, r3
 8000da6:	4b47      	ldr	r3, [pc, #284]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000da8:	809a      	strh	r2, [r3, #4]
	_bmp180_eeprom.BMP180_AC4 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC4]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC4]);
 8000daa:	23b0      	movs	r3, #176	@ 0xb0
 8000dac:	4618      	mov	r0, r3
 8000dae:	f000 f8a9 	bl	8000f04 <BMP180_ReadReg>
 8000db2:	4603      	mov	r3, r0
 8000db4:	021b      	lsls	r3, r3, #8
 8000db6:	b21c      	sxth	r4, r3
 8000db8:	23b1      	movs	r3, #177	@ 0xb1
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 f8a2 	bl	8000f04 <BMP180_ReadReg>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	b21b      	sxth	r3, r3
 8000dc4:	4323      	orrs	r3, r4
 8000dc6:	b21b      	sxth	r3, r3
 8000dc8:	b29a      	uxth	r2, r3
 8000dca:	4b3e      	ldr	r3, [pc, #248]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000dcc:	80da      	strh	r2, [r3, #6]
	_bmp180_eeprom.BMP180_AC5 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC5]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC5]);
 8000dce:	23b2      	movs	r3, #178	@ 0xb2
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f000 f897 	bl	8000f04 <BMP180_ReadReg>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	021b      	lsls	r3, r3, #8
 8000dda:	b21c      	sxth	r4, r3
 8000ddc:	23b3      	movs	r3, #179	@ 0xb3
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 f890 	bl	8000f04 <BMP180_ReadReg>
 8000de4:	4603      	mov	r3, r0
 8000de6:	b21b      	sxth	r3, r3
 8000de8:	4323      	orrs	r3, r4
 8000dea:	b21b      	sxth	r3, r3
 8000dec:	b29a      	uxth	r2, r3
 8000dee:	4b35      	ldr	r3, [pc, #212]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000df0:	811a      	strh	r2, [r3, #8]
	_bmp180_eeprom.BMP180_AC6 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC6]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC6]);
 8000df2:	23b4      	movs	r3, #180	@ 0xb4
 8000df4:	4618      	mov	r0, r3
 8000df6:	f000 f885 	bl	8000f04 <BMP180_ReadReg>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	021b      	lsls	r3, r3, #8
 8000dfe:	b21c      	sxth	r4, r3
 8000e00:	23b5      	movs	r3, #181	@ 0xb5
 8000e02:	4618      	mov	r0, r3
 8000e04:	f000 f87e 	bl	8000f04 <BMP180_ReadReg>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	b21b      	sxth	r3, r3
 8000e0c:	4323      	orrs	r3, r4
 8000e0e:	b21b      	sxth	r3, r3
 8000e10:	b29a      	uxth	r2, r3
 8000e12:	4b2c      	ldr	r3, [pc, #176]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000e14:	815a      	strh	r2, [r3, #10]
	_bmp180_eeprom.BMP180_B1 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B1]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_B1]);
 8000e16:	23b6      	movs	r3, #182	@ 0xb6
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 f873 	bl	8000f04 <BMP180_ReadReg>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	021b      	lsls	r3, r3, #8
 8000e22:	b21c      	sxth	r4, r3
 8000e24:	23b7      	movs	r3, #183	@ 0xb7
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 f86c 	bl	8000f04 <BMP180_ReadReg>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	b21b      	sxth	r3, r3
 8000e30:	4323      	orrs	r3, r4
 8000e32:	b21a      	sxth	r2, r3
 8000e34:	4b23      	ldr	r3, [pc, #140]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000e36:	819a      	strh	r2, [r3, #12]
	_bmp180_eeprom.BMP180_B2 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B2]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_B2]);
 8000e38:	23b8      	movs	r3, #184	@ 0xb8
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 f862 	bl	8000f04 <BMP180_ReadReg>
 8000e40:	4603      	mov	r3, r0
 8000e42:	021b      	lsls	r3, r3, #8
 8000e44:	b21c      	sxth	r4, r3
 8000e46:	23b9      	movs	r3, #185	@ 0xb9
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f000 f85b 	bl	8000f04 <BMP180_ReadReg>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	b21b      	sxth	r3, r3
 8000e52:	4323      	orrs	r3, r4
 8000e54:	b21a      	sxth	r2, r3
 8000e56:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000e58:	81da      	strh	r2, [r3, #14]
	_bmp180_eeprom.BMP180_MB = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MB]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MB]);
 8000e5a:	23ba      	movs	r3, #186	@ 0xba
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f000 f851 	bl	8000f04 <BMP180_ReadReg>
 8000e62:	4603      	mov	r3, r0
 8000e64:	021b      	lsls	r3, r3, #8
 8000e66:	b21c      	sxth	r4, r3
 8000e68:	23bb      	movs	r3, #187	@ 0xbb
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 f84a 	bl	8000f04 <BMP180_ReadReg>
 8000e70:	4603      	mov	r3, r0
 8000e72:	b21b      	sxth	r3, r3
 8000e74:	4323      	orrs	r3, r4
 8000e76:	b21a      	sxth	r2, r3
 8000e78:	4b12      	ldr	r3, [pc, #72]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000e7a:	821a      	strh	r2, [r3, #16]
	_bmp180_eeprom.BMP180_MC = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MC]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MC]);
 8000e7c:	23bc      	movs	r3, #188	@ 0xbc
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 f840 	bl	8000f04 <BMP180_ReadReg>
 8000e84:	4603      	mov	r3, r0
 8000e86:	021b      	lsls	r3, r3, #8
 8000e88:	b21c      	sxth	r4, r3
 8000e8a:	23bd      	movs	r3, #189	@ 0xbd
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f000 f839 	bl	8000f04 <BMP180_ReadReg>
 8000e92:	4603      	mov	r3, r0
 8000e94:	b21b      	sxth	r3, r3
 8000e96:	4323      	orrs	r3, r4
 8000e98:	b21a      	sxth	r2, r3
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000e9c:	825a      	strh	r2, [r3, #18]
	_bmp180_eeprom.BMP180_MD = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MD]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MD]);
 8000e9e:	23be      	movs	r3, #190	@ 0xbe
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f000 f82f 	bl	8000f04 <BMP180_ReadReg>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	021b      	lsls	r3, r3, #8
 8000eaa:	b21c      	sxth	r4, r3
 8000eac:	23bf      	movs	r3, #191	@ 0xbf
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 f828 	bl	8000f04 <BMP180_ReadReg>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	b21b      	sxth	r3, r3
 8000eb8:	4323      	orrs	r3, r4
 8000eba:	b21a      	sxth	r2, r3
 8000ebc:	4b01      	ldr	r3, [pc, #4]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000ebe:	829a      	strh	r2, [r3, #20]
}
 8000ec0:	bf00      	nop
 8000ec2:	bd98      	pop	{r3, r4, r7, pc}
 8000ec4:	20000314 	.word	0x20000314

08000ec8 <BMP180_WriteReg>:
/**
 * @brief Writes to a specific register.
 * @param reg Address of register to write to.
 * @param cmd Byte to write.
 */
void BMP180_WriteReg(uint8_t reg, uint8_t cmd) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af02      	add	r7, sp, #8
 8000ece:	4603      	mov	r3, r0
 8000ed0:	460a      	mov	r2, r1
 8000ed2:	71fb      	strb	r3, [r7, #7]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	71bb      	strb	r3, [r7, #6]
	uint8_t arr[2] = { reg, cmd };
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	733b      	strb	r3, [r7, #12]
 8000edc:	79bb      	ldrb	r3, [r7, #6]
 8000ede:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, arr, 2, BMP180_I2C_TIMEOUT);
 8000ee0:	4b07      	ldr	r3, [pc, #28]	@ (8000f00 <BMP180_WriteReg+0x38>)
 8000ee2:	6818      	ldr	r0, [r3, #0]
 8000ee4:	f107 020c 	add.w	r2, r7, #12
 8000ee8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	2302      	movs	r3, #2
 8000ef0:	21ee      	movs	r1, #238	@ 0xee
 8000ef2:	f002 fd1b 	bl	800392c <HAL_I2C_Master_Transmit>
}
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000310 	.word	0x20000310

08000f04 <BMP180_ReadReg>:
/**
 * @brief Reads from a specific register.
 * @param reg Address of register to read from.
 * @return Byte read.
 */
uint8_t BMP180_ReadReg(uint8_t reg) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af02      	add	r7, sp, #8
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 8000f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f44 <BMP180_ReadReg+0x40>)
 8000f10:	6818      	ldr	r0, [r3, #0]
 8000f12:	1dfa      	adds	r2, r7, #7
 8000f14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	21ee      	movs	r1, #238	@ 0xee
 8000f1e:	f002 fd05 	bl	800392c <HAL_I2C_Master_Transmit>
	uint8_t result;
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 8000f22:	4b08      	ldr	r3, [pc, #32]	@ (8000f44 <BMP180_ReadReg+0x40>)
 8000f24:	6818      	ldr	r0, [r3, #0]
 8000f26:	f107 020f 	add.w	r2, r7, #15
 8000f2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	2301      	movs	r3, #1
 8000f32:	21ee      	movs	r1, #238	@ 0xee
 8000f34:	f002 fdf8 	bl	8003b28 <HAL_I2C_Master_Receive>
	return result;
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000310 	.word	0x20000310

08000f48 <BMP180_GetRawTemperature>:

/**
 * @brief Measures and calculates temperature.
 * @return Temperature in 0.1 (1/10) degrees Celsius.
 */
int32_t BMP180_GetRawTemperature(void) {
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_TEMP);
 8000f4e:	232e      	movs	r3, #46	@ 0x2e
 8000f50:	4619      	mov	r1, r3
 8000f52:	20f4      	movs	r0, #244	@ 0xf4
 8000f54:	f7ff ffb8 	bl	8000ec8 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_TEMP);
 8000f58:	2305      	movs	r3, #5
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f002 f8d0 	bl	8003100 <HAL_Delay>
	int32_t ut = (BMP180_ReadReg(BMP180_MSB_REG) << 8) | BMP180_ReadReg(BMP180_LSB_REG);
 8000f60:	20f6      	movs	r0, #246	@ 0xf6
 8000f62:	f7ff ffcf 	bl	8000f04 <BMP180_ReadReg>
 8000f66:	4603      	mov	r3, r0
 8000f68:	021c      	lsls	r4, r3, #8
 8000f6a:	20f7      	movs	r0, #247	@ 0xf7
 8000f6c:	f7ff ffca 	bl	8000f04 <BMP180_ReadReg>
 8000f70:	4603      	mov	r3, r0
 8000f72:	4323      	orrs	r3, r4
 8000f74:	60fb      	str	r3, [r7, #12]
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 8000f76:	4b15      	ldr	r3, [pc, #84]	@ (8000fcc <BMP180_GetRawTemperature+0x84>)
 8000f78:	895b      	ldrh	r3, [r3, #10]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	1a9b      	subs	r3, r3, r2
 8000f80:	4a12      	ldr	r2, [pc, #72]	@ (8000fcc <BMP180_GetRawTemperature+0x84>)
 8000f82:	8912      	ldrh	r2, [r2, #8]
 8000f84:	fb02 f303 	mul.w	r3, r2, r3
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	da02      	bge.n	8000f92 <BMP180_GetRawTemperature+0x4a>
 8000f8c:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8000f90:	337f      	adds	r3, #127	@ 0x7f
 8000f92:	13db      	asrs	r3, r3, #15
 8000f94:	60bb      	str	r3, [r7, #8]
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 8000f96:	4b0d      	ldr	r3, [pc, #52]	@ (8000fcc <BMP180_GetRawTemperature+0x84>)
 8000f98:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000f9c:	02da      	lsls	r2, r3, #11
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fcc <BMP180_GetRawTemperature+0x84>)
 8000fa0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	440b      	add	r3, r1
 8000faa:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fae:	607b      	str	r3, [r7, #4]
	int32_t b5 = x1 + x2;
 8000fb0:	68ba      	ldr	r2, [r7, #8]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	603b      	str	r3, [r7, #0]
	return (b5 + 8) / (1 << 4);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	3308      	adds	r3, #8
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	da00      	bge.n	8000fc2 <BMP180_GetRawTemperature+0x7a>
 8000fc0:	330f      	adds	r3, #15
 8000fc2:	111b      	asrs	r3, r3, #4
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd90      	pop	{r4, r7, pc}
 8000fcc:	20000314 	.word	0x20000314

08000fd0 <BMP180_GetTemperature>:

/**
 * @brief Measures and calculates temperature.
 * @return Temperature in degrees Celsius.
 */
float BMP180_GetTemperature(void) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
	int32_t temp = BMP180_GetRawTemperature();
 8000fd6:	f7ff ffb7 	bl	8000f48 <BMP180_GetRawTemperature>
 8000fda:	6078      	str	r0, [r7, #4]
	return temp / 10.0;
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff fa11 	bl	8000404 <__aeabi_i2d>
 8000fe2:	f04f 0200 	mov.w	r2, #0
 8000fe6:	4b07      	ldr	r3, [pc, #28]	@ (8001004 <BMP180_GetTemperature+0x34>)
 8000fe8:	f7ff fba0 	bl	800072c <__aeabi_ddiv>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	4610      	mov	r0, r2
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f7ff fd48 	bl	8000a88 <__aeabi_d2f>
 8000ff8:	4603      	mov	r3, r0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40240000 	.word	0x40240000

08001008 <BMP180_GetPressure>:

/**
 * @brief Measures and calculates pressure.
 * @return Pressure in Pascal(Pa).
 */
int32_t BMP180_GetPressure(void) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b08c      	sub	sp, #48	@ 0x30
 800100c:	af00      	add	r7, sp, #0
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_TEMP);
 800100e:	232e      	movs	r3, #46	@ 0x2e
 8001010:	4619      	mov	r1, r3
 8001012:	20f4      	movs	r0, #244	@ 0xf4
 8001014:	f7ff ff58 	bl	8000ec8 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_TEMP);
 8001018:	2305      	movs	r3, #5
 800101a:	4618      	mov	r0, r3
 800101c:	f002 f870 	bl	8003100 <HAL_Delay>
	int32_t ut = BMP180_GetUT();
 8001020:	f000 f902 	bl	8001228 <BMP180_GetUT>
 8001024:	62b8      	str	r0, [r7, #40]	@ 0x28
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_PRES[_bmp180_oss]);
 8001026:	4b7b      	ldr	r3, [pc, #492]	@ (8001214 <BMP180_GetPressure+0x20c>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	461a      	mov	r2, r3
 800102c:	4b7a      	ldr	r3, [pc, #488]	@ (8001218 <BMP180_GetPressure+0x210>)
 800102e:	5c9b      	ldrb	r3, [r3, r2]
 8001030:	4619      	mov	r1, r3
 8001032:	20f4      	movs	r0, #244	@ 0xf4
 8001034:	f7ff ff48 	bl	8000ec8 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_PRES[_bmp180_oss]);
 8001038:	4b76      	ldr	r3, [pc, #472]	@ (8001214 <BMP180_GetPressure+0x20c>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	4b77      	ldr	r3, [pc, #476]	@ (800121c <BMP180_GetPressure+0x214>)
 8001040:	5c9b      	ldrb	r3, [r3, r2]
 8001042:	4618      	mov	r0, r3
 8001044:	f002 f85c 	bl	8003100 <HAL_Delay>
	int32_t up = BMP180_GetUP();
 8001048:	f000 f8fc 	bl	8001244 <BMP180_GetUP>
 800104c:	6278      	str	r0, [r7, #36]	@ 0x24
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 800104e:	4b74      	ldr	r3, [pc, #464]	@ (8001220 <BMP180_GetPressure+0x218>)
 8001050:	895b      	ldrh	r3, [r3, #10]
 8001052:	461a      	mov	r2, r3
 8001054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001056:	1a9b      	subs	r3, r3, r2
 8001058:	4a71      	ldr	r2, [pc, #452]	@ (8001220 <BMP180_GetPressure+0x218>)
 800105a:	8912      	ldrh	r2, [r2, #8]
 800105c:	fb02 f303 	mul.w	r3, r2, r3
 8001060:	2b00      	cmp	r3, #0
 8001062:	da02      	bge.n	800106a <BMP180_GetPressure+0x62>
 8001064:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8001068:	337f      	adds	r3, #127	@ 0x7f
 800106a:	13db      	asrs	r3, r3, #15
 800106c:	623b      	str	r3, [r7, #32]
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 800106e:	4b6c      	ldr	r3, [pc, #432]	@ (8001220 <BMP180_GetPressure+0x218>)
 8001070:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001074:	02da      	lsls	r2, r3, #11
 8001076:	4b6a      	ldr	r3, [pc, #424]	@ (8001220 <BMP180_GetPressure+0x218>)
 8001078:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800107c:	4619      	mov	r1, r3
 800107e:	6a3b      	ldr	r3, [r7, #32]
 8001080:	440b      	add	r3, r1
 8001082:	fb92 f3f3 	sdiv	r3, r2, r3
 8001086:	61fb      	str	r3, [r7, #28]
	int32_t b5 = x1 + x2;
 8001088:	6a3a      	ldr	r2, [r7, #32]
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	4413      	add	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
	int32_t b6 = b5 - 4000;
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 8001096:	617b      	str	r3, [r7, #20]
	x1 = (_bmp180_eeprom.BMP180_B2 * (b6 * b6 / (1 << 12))) / (1 << 11);
 8001098:	4b61      	ldr	r3, [pc, #388]	@ (8001220 <BMP180_GetPressure+0x218>)
 800109a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800109e:	461a      	mov	r2, r3
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fb03 f303 	mul.w	r3, r3, r3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	da01      	bge.n	80010ae <BMP180_GetPressure+0xa6>
 80010aa:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80010ae:	131b      	asrs	r3, r3, #12
 80010b0:	fb02 f303 	mul.w	r3, r2, r3
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	da01      	bge.n	80010bc <BMP180_GetPressure+0xb4>
 80010b8:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 80010bc:	12db      	asrs	r3, r3, #11
 80010be:	623b      	str	r3, [r7, #32]
	x2 = _bmp180_eeprom.BMP180_AC2 * b6 / (1 << 11);
 80010c0:	4b57      	ldr	r3, [pc, #348]	@ (8001220 <BMP180_GetPressure+0x218>)
 80010c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010c6:	461a      	mov	r2, r3
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	fb02 f303 	mul.w	r3, r2, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	da01      	bge.n	80010d6 <BMP180_GetPressure+0xce>
 80010d2:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 80010d6:	12db      	asrs	r3, r3, #11
 80010d8:	61fb      	str	r3, [r7, #28]
	int32_t x3 = x1 + x2;
 80010da:	6a3a      	ldr	r2, [r7, #32]
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	4413      	add	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
	int32_t b3 = (((_bmp180_eeprom.BMP180_AC1 * 4 + x3) << _bmp180_oss) + 2) / 4;
 80010e2:	4b4f      	ldr	r3, [pc, #316]	@ (8001220 <BMP180_GetPressure+0x218>)
 80010e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e8:	009a      	lsls	r2, r3, #2
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	4413      	add	r3, r2
 80010ee:	4a49      	ldr	r2, [pc, #292]	@ (8001214 <BMP180_GetPressure+0x20c>)
 80010f0:	7812      	ldrb	r2, [r2, #0]
 80010f2:	4093      	lsls	r3, r2
 80010f4:	3302      	adds	r3, #2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	da00      	bge.n	80010fc <BMP180_GetPressure+0xf4>
 80010fa:	3303      	adds	r3, #3
 80010fc:	109b      	asrs	r3, r3, #2
 80010fe:	60fb      	str	r3, [r7, #12]
	x1 = _bmp180_eeprom.BMP180_AC3 * b6 / (1 << 13);
 8001100:	4b47      	ldr	r3, [pc, #284]	@ (8001220 <BMP180_GetPressure+0x218>)
 8001102:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001106:	461a      	mov	r2, r3
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	fb02 f303 	mul.w	r3, r2, r3
 800110e:	2b00      	cmp	r3, #0
 8001110:	da02      	bge.n	8001118 <BMP180_GetPressure+0x110>
 8001112:	f503 53ff 	add.w	r3, r3, #8160	@ 0x1fe0
 8001116:	331f      	adds	r3, #31
 8001118:	135b      	asrs	r3, r3, #13
 800111a:	623b      	str	r3, [r7, #32]
	x2 = (_bmp180_eeprom.BMP180_B1 * (b6 * b6 / (1 << 12))) / (1 << 16);
 800111c:	4b40      	ldr	r3, [pc, #256]	@ (8001220 <BMP180_GetPressure+0x218>)
 800111e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001122:	461a      	mov	r2, r3
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	fb03 f303 	mul.w	r3, r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	da01      	bge.n	8001132 <BMP180_GetPressure+0x12a>
 800112e:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8001132:	131b      	asrs	r3, r3, #12
 8001134:	fb02 f303 	mul.w	r3, r2, r3
 8001138:	2b00      	cmp	r3, #0
 800113a:	da02      	bge.n	8001142 <BMP180_GetPressure+0x13a>
 800113c:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001140:	33ff      	adds	r3, #255	@ 0xff
 8001142:	141b      	asrs	r3, r3, #16
 8001144:	61fb      	str	r3, [r7, #28]
	x3 = ((x1 + x2) + 2) / 4;
 8001146:	6a3a      	ldr	r2, [r7, #32]
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	4413      	add	r3, r2
 800114c:	3302      	adds	r3, #2
 800114e:	2b00      	cmp	r3, #0
 8001150:	da00      	bge.n	8001154 <BMP180_GetPressure+0x14c>
 8001152:	3303      	adds	r3, #3
 8001154:	109b      	asrs	r3, r3, #2
 8001156:	613b      	str	r3, [r7, #16]
	uint32_t b4 = _bmp180_eeprom.BMP180_AC4 * (uint32_t) (x3 + 32768) / (1 << 15);
 8001158:	4b31      	ldr	r3, [pc, #196]	@ (8001220 <BMP180_GetPressure+0x218>)
 800115a:	88db      	ldrh	r3, [r3, #6]
 800115c:	461a      	mov	r2, r3
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001164:	fb02 f303 	mul.w	r3, r2, r3
 8001168:	0bdb      	lsrs	r3, r3, #15
 800116a:	60bb      	str	r3, [r7, #8]
	uint32_t b7 = ((uint32_t) up - b3) * (50000 >> _bmp180_oss);
 800116c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	4a28      	ldr	r2, [pc, #160]	@ (8001214 <BMP180_GetPressure+0x20c>)
 8001174:	7812      	ldrb	r2, [r2, #0]
 8001176:	4611      	mov	r1, r2
 8001178:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800117c:	410a      	asrs	r2, r1
 800117e:	fb02 f303 	mul.w	r3, r2, r3
 8001182:	607b      	str	r3, [r7, #4]
	int32_t p;
	if (b7 < 0x80000000)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	db06      	blt.n	8001198 <BMP180_GetPressure+0x190>
		p = (b7 * 2) / b4;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	005a      	lsls	r2, r3, #1
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	fbb2 f3f3 	udiv	r3, r2, r3
 8001194:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001196:	e005      	b.n	80011a4 <BMP180_GetPressure+0x19c>
	else
		p = (b7 / b4) * 2;
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	x1 = (p / (1 << 8)) * (p / (1 << 8));
 80011a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	da00      	bge.n	80011ac <BMP180_GetPressure+0x1a4>
 80011aa:	33ff      	adds	r3, #255	@ 0xff
 80011ac:	121b      	asrs	r3, r3, #8
 80011ae:	461a      	mov	r2, r3
 80011b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	da00      	bge.n	80011b8 <BMP180_GetPressure+0x1b0>
 80011b6:	33ff      	adds	r3, #255	@ 0xff
 80011b8:	121b      	asrs	r3, r3, #8
 80011ba:	fb02 f303 	mul.w	r3, r2, r3
 80011be:	623b      	str	r3, [r7, #32]
	x1 = (x1 * 3038) / (1 << 16);
 80011c0:	6a3b      	ldr	r3, [r7, #32]
 80011c2:	f640 32de 	movw	r2, #3038	@ 0xbde
 80011c6:	fb02 f303 	mul.w	r3, r2, r3
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	da02      	bge.n	80011d4 <BMP180_GetPressure+0x1cc>
 80011ce:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80011d2:	33ff      	adds	r3, #255	@ 0xff
 80011d4:	141b      	asrs	r3, r3, #16
 80011d6:	623b      	str	r3, [r7, #32]
	x2 = (-7357 * p) / (1 << 16);
 80011d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011da:	4a12      	ldr	r2, [pc, #72]	@ (8001224 <BMP180_GetPressure+0x21c>)
 80011dc:	fb02 f303 	mul.w	r3, r2, r3
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	da02      	bge.n	80011ea <BMP180_GetPressure+0x1e2>
 80011e4:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80011e8:	33ff      	adds	r3, #255	@ 0xff
 80011ea:	141b      	asrs	r3, r3, #16
 80011ec:	61fb      	str	r3, [r7, #28]
	p = p + (x1 + x2 + 3791) / (1 << 4);
 80011ee:	6a3a      	ldr	r2, [r7, #32]
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	4413      	add	r3, r2
 80011f4:	f603 63cf 	addw	r3, r3, #3791	@ 0xecf
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	da00      	bge.n	80011fe <BMP180_GetPressure+0x1f6>
 80011fc:	330f      	adds	r3, #15
 80011fe:	111b      	asrs	r3, r3, #4
 8001200:	461a      	mov	r2, r3
 8001202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001204:	4413      	add	r3, r2
 8001206:	62fb      	str	r3, [r7, #44]	@ 0x2c
	return p;
 8001208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800120a:	4618      	mov	r0, r3
 800120c:	3730      	adds	r7, #48	@ 0x30
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	2000032a 	.word	0x2000032a
 8001218:	0800c8f8 	.word	0x0800c8f8
 800121c:	0800c8fc 	.word	0x0800c8fc
 8001220:	20000314 	.word	0x20000314
 8001224:	ffffe343 	.word	0xffffe343

08001228 <BMP180_GetUT>:

int32_t BMP180_GetUT(void){
 8001228:	b598      	push	{r3, r4, r7, lr}
 800122a:	af00      	add	r7, sp, #0
	return (BMP180_ReadReg(BMP180_MSB_REG) << 8) | BMP180_ReadReg(BMP180_LSB_REG);
 800122c:	20f6      	movs	r0, #246	@ 0xf6
 800122e:	f7ff fe69 	bl	8000f04 <BMP180_ReadReg>
 8001232:	4603      	mov	r3, r0
 8001234:	021c      	lsls	r4, r3, #8
 8001236:	20f7      	movs	r0, #247	@ 0xf7
 8001238:	f7ff fe64 	bl	8000f04 <BMP180_ReadReg>
 800123c:	4603      	mov	r3, r0
 800123e:	4323      	orrs	r3, r4
}
 8001240:	4618      	mov	r0, r3
 8001242:	bd98      	pop	{r3, r4, r7, pc}

08001244 <BMP180_GetUP>:

int32_t BMP180_GetUP(void){
 8001244:	b598      	push	{r3, r4, r7, lr}
 8001246:	af00      	add	r7, sp, #0
	return ((BMP180_ReadReg(BMP180_MSB_REG) << 16) | (BMP180_ReadReg(BMP180_LSB_REG) << 8) | BMP180_ReadReg(BMP180_XLSB_REG)) >> (8 - _bmp180_oss);
 8001248:	20f6      	movs	r0, #246	@ 0xf6
 800124a:	f7ff fe5b 	bl	8000f04 <BMP180_ReadReg>
 800124e:	4603      	mov	r3, r0
 8001250:	041c      	lsls	r4, r3, #16
 8001252:	20f7      	movs	r0, #247	@ 0xf7
 8001254:	f7ff fe56 	bl	8000f04 <BMP180_ReadReg>
 8001258:	4603      	mov	r3, r0
 800125a:	021b      	lsls	r3, r3, #8
 800125c:	431c      	orrs	r4, r3
 800125e:	20f8      	movs	r0, #248	@ 0xf8
 8001260:	f7ff fe50 	bl	8000f04 <BMP180_ReadReg>
 8001264:	4603      	mov	r3, r0
 8001266:	ea44 0203 	orr.w	r2, r4, r3
 800126a:	4b04      	ldr	r3, [pc, #16]	@ (800127c <BMP180_GetUP+0x38>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	f1c3 0308 	rsb	r3, r3, #8
 8001272:	fa42 f303 	asr.w	r3, r2, r3
}
 8001276:	4618      	mov	r0, r3
 8001278:	bd98      	pop	{r3, r4, r7, pc}
 800127a:	bf00      	nop
 800127c:	2000032a 	.word	0x2000032a

08001280 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0

}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr

0800128c <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
return 0;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr
	...

0800129c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4a06      	ldr	r2, [pc, #24]	@ (80012c4 <vApplicationGetIdleTaskMemory+0x28>)
 80012ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	4a05      	ldr	r2, [pc, #20]	@ (80012c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80012b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2280      	movs	r2, #128	@ 0x80
 80012b8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80012ba:	bf00      	nop
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr
 80012c4:	2000032c 	.word	0x2000032c
 80012c8:	200003d8 	.word	0x200003d8

080012cc <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 80012d6:	4a38      	ldr	r2, [pc, #224]	@ (80013b8 <HD44780_Init+0xec>)
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 80012dc:	4b37      	ldr	r3, [pc, #220]	@ (80013bc <HD44780_Init+0xf0>)
 80012de:	2208      	movs	r2, #8
 80012e0:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80012e2:	4b37      	ldr	r3, [pc, #220]	@ (80013c0 <HD44780_Init+0xf4>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 80012e8:	4b33      	ldr	r3, [pc, #204]	@ (80013b8 <HD44780_Init+0xec>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d907      	bls.n	8001300 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 80012f0:	4b33      	ldr	r3, [pc, #204]	@ (80013c0 <HD44780_Init+0xf4>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	f043 0308 	orr.w	r3, r3, #8
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	4b31      	ldr	r3, [pc, #196]	@ (80013c0 <HD44780_Init+0xf4>)
 80012fc:	701a      	strb	r2, [r3, #0]
 80012fe:	e006      	b.n	800130e <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8001300:	4b2f      	ldr	r3, [pc, #188]	@ (80013c0 <HD44780_Init+0xf4>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	f043 0304 	orr.w	r3, r3, #4
 8001308:	b2da      	uxtb	r2, r3
 800130a:	4b2d      	ldr	r3, [pc, #180]	@ (80013c0 <HD44780_Init+0xf4>)
 800130c:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800130e:	f000 f985 	bl	800161c <DelayInit>
  HAL_Delay(50);
 8001312:	2032      	movs	r0, #50	@ 0x32
 8001314:	f001 fef4 	bl	8003100 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8001318:	4b28      	ldr	r3, [pc, #160]	@ (80013bc <HD44780_Init+0xf0>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f000 f943 	bl	80015a8 <ExpanderWrite>
  HAL_Delay(1000);
 8001322:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001326:	f001 feeb 	bl	8003100 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 800132a:	2030      	movs	r0, #48	@ 0x30
 800132c:	f000 f92b 	bl	8001586 <Write4Bits>
  DelayUS(4500);
 8001330:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001334:	f000 f99a 	bl	800166c <DelayUS>

  Write4Bits(0x03 << 4);
 8001338:	2030      	movs	r0, #48	@ 0x30
 800133a:	f000 f924 	bl	8001586 <Write4Bits>
  DelayUS(4500);
 800133e:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001342:	f000 f993 	bl	800166c <DelayUS>

  Write4Bits(0x03 << 4);
 8001346:	2030      	movs	r0, #48	@ 0x30
 8001348:	f000 f91d 	bl	8001586 <Write4Bits>
  DelayUS(4500);
 800134c:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001350:	f000 f98c 	bl	800166c <DelayUS>

  Write4Bits(0x02 << 4);
 8001354:	2020      	movs	r0, #32
 8001356:	f000 f916 	bl	8001586 <Write4Bits>
  DelayUS(100);
 800135a:	2064      	movs	r0, #100	@ 0x64
 800135c:	f000 f986 	bl	800166c <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8001360:	4b17      	ldr	r3, [pc, #92]	@ (80013c0 <HD44780_Init+0xf4>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	f043 0320 	orr.w	r3, r3, #32
 8001368:	b2db      	uxtb	r3, r3
 800136a:	4618      	mov	r0, r3
 800136c:	f000 f8ce 	bl	800150c <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001370:	4b14      	ldr	r3, [pc, #80]	@ (80013c4 <HD44780_Init+0xf8>)
 8001372:	2204      	movs	r2, #4
 8001374:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8001376:	f000 f875 	bl	8001464 <HD44780_Display>
  HD44780_Clear();
 800137a:	f000 f82b 	bl	80013d4 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800137e:	4b12      	ldr	r3, [pc, #72]	@ (80013c8 <HD44780_Init+0xfc>)
 8001380:	2202      	movs	r2, #2
 8001382:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8001384:	4b10      	ldr	r3, [pc, #64]	@ (80013c8 <HD44780_Init+0xfc>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	f043 0304 	orr.w	r3, r3, #4
 800138c:	b2db      	uxtb	r3, r3
 800138e:	4618      	mov	r0, r3
 8001390:	f000 f8bc 	bl	800150c <SendCommand>
  DelayUS(4500);
 8001394:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001398:	f000 f968 	bl	800166c <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 800139c:	490b      	ldr	r1, [pc, #44]	@ (80013cc <HD44780_Init+0x100>)
 800139e:	2000      	movs	r0, #0
 80013a0:	f000 f876 	bl	8001490 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80013a4:	490a      	ldr	r1, [pc, #40]	@ (80013d0 <HD44780_Init+0x104>)
 80013a6:	2001      	movs	r0, #1
 80013a8:	f000 f872 	bl	8001490 <HD44780_CreateSpecialChar>

  HD44780_Home();
 80013ac:	f000 f81d 	bl	80013ea <HD44780_Home>
}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	200005db 	.word	0x200005db
 80013bc:	200005dc 	.word	0x200005dc
 80013c0:	200005d8 	.word	0x200005d8
 80013c4:	200005d9 	.word	0x200005d9
 80013c8:	200005da 	.word	0x200005da
 80013cc:	20000000 	.word	0x20000000
 80013d0:	20000008 	.word	0x20000008

080013d4 <HD44780_Clear>:

void HD44780_Clear()
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 80013d8:	2001      	movs	r0, #1
 80013da:	f000 f897 	bl	800150c <SendCommand>
  DelayUS(2000);
 80013de:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80013e2:	f000 f943 	bl	800166c <DelayUS>
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HD44780_Home>:

void HD44780_Home()
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80013ee:	2002      	movs	r0, #2
 80013f0:	f000 f88c 	bl	800150c <SendCommand>
  DelayUS(2000);
 80013f4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80013f8:	f000 f938 	bl	800166c <DelayUS>
}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}

08001400 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8001400:	b590      	push	{r4, r7, lr}
 8001402:	b087      	sub	sp, #28
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	460a      	mov	r2, r1
 800140a:	71fb      	strb	r3, [r7, #7]
 800140c:	4613      	mov	r3, r2
 800140e:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8001410:	4b12      	ldr	r3, [pc, #72]	@ (800145c <HD44780_SetCursor+0x5c>)
 8001412:	f107 0408 	add.w	r4, r7, #8
 8001416:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001418:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 800141c:	4b10      	ldr	r3, [pc, #64]	@ (8001460 <HD44780_SetCursor+0x60>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	79ba      	ldrb	r2, [r7, #6]
 8001422:	429a      	cmp	r2, r3
 8001424:	d303      	bcc.n	800142e <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8001426:	4b0e      	ldr	r3, [pc, #56]	@ (8001460 <HD44780_SetCursor+0x60>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	3b01      	subs	r3, #1
 800142c:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800142e:	79bb      	ldrb	r3, [r7, #6]
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	3318      	adds	r3, #24
 8001434:	443b      	add	r3, r7
 8001436:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800143a:	b2da      	uxtb	r2, r3
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	4413      	add	r3, r2
 8001440:	b2db      	uxtb	r3, r3
 8001442:	b25b      	sxtb	r3, r3
 8001444:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001448:	b25b      	sxtb	r3, r3
 800144a:	b2db      	uxtb	r3, r3
 800144c:	4618      	mov	r0, r3
 800144e:	f000 f85d 	bl	800150c <SendCommand>
}
 8001452:	bf00      	nop
 8001454:	371c      	adds	r7, #28
 8001456:	46bd      	mov	sp, r7
 8001458:	bd90      	pop	{r4, r7, pc}
 800145a:	bf00      	nop
 800145c:	0800c6f0 	.word	0x0800c6f0
 8001460:	200005db 	.word	0x200005db

08001464 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8001468:	4b08      	ldr	r3, [pc, #32]	@ (800148c <HD44780_Display+0x28>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	f043 0304 	orr.w	r3, r3, #4
 8001470:	b2da      	uxtb	r2, r3
 8001472:	4b06      	ldr	r3, [pc, #24]	@ (800148c <HD44780_Display+0x28>)
 8001474:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8001476:	4b05      	ldr	r3, [pc, #20]	@ (800148c <HD44780_Display+0x28>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	f043 0308 	orr.w	r3, r3, #8
 800147e:	b2db      	uxtb	r3, r3
 8001480:	4618      	mov	r0, r3
 8001482:	f000 f843 	bl	800150c <SendCommand>
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	200005d9 	.word	0x200005d9

08001490 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	6039      	str	r1, [r7, #0]
 800149a:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	b25b      	sxtb	r3, r3
 80014aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014ae:	b25b      	sxtb	r3, r3
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	4618      	mov	r0, r3
 80014b4:	f000 f82a 	bl	800150c <SendCommand>
  for (int i=0; i<8; i++)
 80014b8:	2300      	movs	r3, #0
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	e009      	b.n	80014d2 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	4413      	add	r3, r2
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 f82e 	bl	8001528 <SendChar>
  for (int i=0; i<8; i++)
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	3301      	adds	r3, #1
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2b07      	cmp	r3, #7
 80014d6:	ddf2      	ble.n	80014be <HD44780_CreateSpecialChar+0x2e>
  }
}
 80014d8:	bf00      	nop
 80014da:	bf00      	nop
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80014ea:	e006      	b.n	80014fa <HD44780_PrintStr+0x18>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	1c5a      	adds	r2, r3, #1
 80014f0:	607a      	str	r2, [r7, #4]
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f000 f817 	bl	8001528 <SendChar>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1f4      	bne.n	80014ec <HD44780_PrintStr+0xa>
}
 8001502:	bf00      	nop
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	2100      	movs	r1, #0
 800151a:	4618      	mov	r0, r3
 800151c:	f000 f812 	bl	8001544 <Send>
}
 8001520:	bf00      	nop
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <SendChar>:

static void SendChar(uint8_t ch)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	2101      	movs	r1, #1
 8001536:	4618      	mov	r0, r3
 8001538:	f000 f804 	bl	8001544 <Send>
}
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	460a      	mov	r2, r1
 800154e:	71fb      	strb	r3, [r7, #7]
 8001550:	4613      	mov	r3, r2
 8001552:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	f023 030f 	bic.w	r3, r3, #15
 800155a:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	011b      	lsls	r3, r3, #4
 8001560:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8001562:	7bfa      	ldrb	r2, [r7, #15]
 8001564:	79bb      	ldrb	r3, [r7, #6]
 8001566:	4313      	orrs	r3, r2
 8001568:	b2db      	uxtb	r3, r3
 800156a:	4618      	mov	r0, r3
 800156c:	f000 f80b 	bl	8001586 <Write4Bits>
  Write4Bits((lownib)|mode);
 8001570:	7bba      	ldrb	r2, [r7, #14]
 8001572:	79bb      	ldrb	r3, [r7, #6]
 8001574:	4313      	orrs	r3, r2
 8001576:	b2db      	uxtb	r3, r3
 8001578:	4618      	mov	r0, r3
 800157a:	f000 f804 	bl	8001586 <Write4Bits>
}
 800157e:	bf00      	nop
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	4603      	mov	r3, r0
 800158e:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	4618      	mov	r0, r3
 8001594:	f000 f808 	bl	80015a8 <ExpanderWrite>
  PulseEnable(value);
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	4618      	mov	r0, r3
 800159c:	f000 f820 	bl	80015e0 <PulseEnable>
}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af02      	add	r7, sp, #8
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 80015b2:	4b09      	ldr	r3, [pc, #36]	@ (80015d8 <ExpanderWrite+0x30>)
 80015b4:	781a      	ldrb	r2, [r3, #0]
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80015be:	f107 020f 	add.w	r2, r7, #15
 80015c2:	230a      	movs	r3, #10
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	2301      	movs	r3, #1
 80015c8:	214e      	movs	r1, #78	@ 0x4e
 80015ca:	4804      	ldr	r0, [pc, #16]	@ (80015dc <ExpanderWrite+0x34>)
 80015cc:	f002 f9ae 	bl	800392c <HAL_I2C_Master_Transmit>
}
 80015d0:	bf00      	nop
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	200005dc 	.word	0x200005dc
 80015dc:	200005e0 	.word	0x200005e0

080015e0 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	f043 0304 	orr.w	r3, r3, #4
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff ffd8 	bl	80015a8 <ExpanderWrite>
  DelayUS(20);
 80015f8:	2014      	movs	r0, #20
 80015fa:	f000 f837 	bl	800166c <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	f023 0304 	bic.w	r3, r3, #4
 8001604:	b2db      	uxtb	r3, r3
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff ffce 	bl	80015a8 <ExpanderWrite>
  DelayUS(20);
 800160c:	2014      	movs	r0, #20
 800160e:	f000 f82d 	bl	800166c <DelayUS>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <DelayInit>:

static void DelayInit(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001620:	4b10      	ldr	r3, [pc, #64]	@ (8001664 <DelayInit+0x48>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	4a0f      	ldr	r2, [pc, #60]	@ (8001664 <DelayInit+0x48>)
 8001626:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800162a:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 800162c:	4b0d      	ldr	r3, [pc, #52]	@ (8001664 <DelayInit+0x48>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	4a0c      	ldr	r2, [pc, #48]	@ (8001664 <DelayInit+0x48>)
 8001632:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001636:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001638:	4b0b      	ldr	r3, [pc, #44]	@ (8001668 <DelayInit+0x4c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a0a      	ldr	r2, [pc, #40]	@ (8001668 <DelayInit+0x4c>)
 800163e:	f023 0301 	bic.w	r3, r3, #1
 8001642:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001644:	4b08      	ldr	r3, [pc, #32]	@ (8001668 <DelayInit+0x4c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a07      	ldr	r2, [pc, #28]	@ (8001668 <DelayInit+0x4c>)
 800164a:	f043 0301 	orr.w	r3, r3, #1
 800164e:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8001650:	4b05      	ldr	r3, [pc, #20]	@ (8001668 <DelayInit+0x4c>)
 8001652:	2200      	movs	r2, #0
 8001654:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8001656:	bf00      	nop
  __ASM volatile ("NOP");
 8001658:	bf00      	nop
  __ASM volatile ("NOP");
 800165a:	bf00      	nop
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr
 8001664:	e000edf0 	.word	0xe000edf0
 8001668:	e0001000 	.word	0xe0001000

0800166c <DelayUS>:

static void DelayUS(uint32_t us) {
 800166c:	b480      	push	{r7}
 800166e:	b087      	sub	sp, #28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8001674:	4b0d      	ldr	r3, [pc, #52]	@ (80016ac <DelayUS+0x40>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a0d      	ldr	r2, [pc, #52]	@ (80016b0 <DelayUS+0x44>)
 800167a:	fba2 2303 	umull	r2, r3, r2, r3
 800167e:	0c9a      	lsrs	r2, r3, #18
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	fb02 f303 	mul.w	r3, r2, r3
 8001686:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8001688:	4b0a      	ldr	r3, [pc, #40]	@ (80016b4 <DelayUS+0x48>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800168e:	4b09      	ldr	r3, [pc, #36]	@ (80016b4 <DelayUS+0x48>)
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	697a      	ldr	r2, [r7, #20]
 800169c:	429a      	cmp	r2, r3
 800169e:	d8f6      	bhi.n	800168e <DelayUS+0x22>
}
 80016a0:	bf00      	nop
 80016a2:	bf00      	nop
 80016a4:	371c      	adds	r7, #28
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr
 80016ac:	2000011c 	.word	0x2000011c
 80016b0:	431bde83 	.word	0x431bde83
 80016b4:	e0001000 	.word	0xe0001000

080016b8 <parse_data>:
    uint8_t Data[MAX_DATA_SIZE];  // Mảng dữ liệu (Data)
    uint16_t Crc;      // CRC
    uint16_t Stop;     // Stop (carriage return + newline)
    uint16_t Len;      // Chiều dài dữ liệu (Data length)
} DataStruct;
void parse_data(const char *input, DataStruct *data) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b088      	sub	sp, #32
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
    // Xác nhận ký tự Start
    char temp[10] = {0};
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	f107 0310 	add.w	r3, r7, #16
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	809a      	strh	r2, [r3, #4]
//    data->Start = input[0];  // Dấu ':'

    memset(data->Data,0,MAX_DATA_SIZE);
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	3303      	adds	r3, #3
 80016d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016d8:	2100      	movs	r1, #0
 80016da:	4618      	mov	r0, r3
 80016dc:	f008 fae1 	bl	8009ca2 <memset>
    strncpy(temp, input, 2);
 80016e0:	f107 030c 	add.w	r3, r7, #12
 80016e4:	2202      	movs	r2, #2
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f008 fae2 	bl	8009cb2 <strncpy>
    data->Start = (uint8_t)strtol(temp, NULL, 16);
 80016ee:	f107 030c 	add.w	r3, r7, #12
 80016f2:	2210      	movs	r2, #16
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f007 fd02 	bl	8009100 <strtol>
 80016fc:	4603      	mov	r3, r0
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	701a      	strb	r2, [r3, #0]

    // Chuyển đổi Addr
    strncpy(temp, input + 2, 2);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	1c99      	adds	r1, r3, #2
 8001708:	f107 030c 	add.w	r3, r7, #12
 800170c:	2202      	movs	r2, #2
 800170e:	4618      	mov	r0, r3
 8001710:	f008 facf 	bl	8009cb2 <strncpy>
    data->Addr = (uint8_t)strtol(temp, NULL, 16);
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	2210      	movs	r2, #16
 800171a:	2100      	movs	r1, #0
 800171c:	4618      	mov	r0, r3
 800171e:	f007 fcef 	bl	8009100 <strtol>
 8001722:	4603      	mov	r3, r0
 8001724:	b2da      	uxtb	r2, r3
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	705a      	strb	r2, [r3, #1]

    // Chuyển đổi Code
    strncpy(temp, input + 4, 2);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	1d19      	adds	r1, r3, #4
 800172e:	f107 030c 	add.w	r3, r7, #12
 8001732:	2202      	movs	r2, #2
 8001734:	4618      	mov	r0, r3
 8001736:	f008 fabc 	bl	8009cb2 <strncpy>
    data->Code = (uint8_t)strtol(temp, NULL, 16);
 800173a:	f107 030c 	add.w	r3, r7, #12
 800173e:	2210      	movs	r2, #16
 8001740:	2100      	movs	r1, #0
 8001742:	4618      	mov	r0, r3
 8001744:	f007 fcdc 	bl	8009100 <strtol>
 8001748:	4603      	mov	r3, r0
 800174a:	b2da      	uxtb	r2, r3
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	709a      	strb	r2, [r3, #2]

    // Tách phần Data
    size_t dataIndex = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	61fb      	str	r3, [r7, #28]
    size_t inputIndex = 6; // Vị trí bắt đầu dữ liệu (sau Addr và Code)
 8001754:	2306      	movs	r3, #6
 8001756:	61bb      	str	r3, [r7, #24]
    while (input[inputIndex] != '\r' && input[inputIndex] != '\n' && input[inputIndex] != '\0') {
 8001758:	e01b      	b.n	8001792 <parse_data+0xda>
        strncpy(temp, input + inputIndex, 2);
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	18d1      	adds	r1, r2, r3
 8001760:	f107 030c 	add.w	r3, r7, #12
 8001764:	2202      	movs	r2, #2
 8001766:	4618      	mov	r0, r3
 8001768:	f008 faa3 	bl	8009cb2 <strncpy>
        data->Data[dataIndex++] = (uint8_t)strtol(temp, NULL, 16);
 800176c:	f107 030c 	add.w	r3, r7, #12
 8001770:	2210      	movs	r2, #16
 8001772:	2100      	movs	r1, #0
 8001774:	4618      	mov	r0, r3
 8001776:	f007 fcc3 	bl	8009100 <strtol>
 800177a:	4601      	mov	r1, r0
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	1c5a      	adds	r2, r3, #1
 8001780:	61fa      	str	r2, [r7, #28]
 8001782:	b2c9      	uxtb	r1, r1
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	4413      	add	r3, r2
 8001788:	460a      	mov	r2, r1
 800178a:	70da      	strb	r2, [r3, #3]
        inputIndex += 2;
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	3302      	adds	r3, #2
 8001790:	61bb      	str	r3, [r7, #24]
    while (input[inputIndex] != '\r' && input[inputIndex] != '\n' && input[inputIndex] != '\0') {
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	4413      	add	r3, r2
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b0d      	cmp	r3, #13
 800179c:	d00b      	beq.n	80017b6 <parse_data+0xfe>
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	4413      	add	r3, r2
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b0a      	cmp	r3, #10
 80017a8:	d005      	beq.n	80017b6 <parse_data+0xfe>
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	4413      	add	r3, r2
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1d1      	bne.n	800175a <parse_data+0xa2>
    }
    data->Len = dataIndex - 4; // Lưu chiều dài của Data
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	3b04      	subs	r3, #4
 80017bc:	b29a      	uxth	r2, r3
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108

    // Chuyển đổi CRC
    strncpy(temp, input + inputIndex - 8, 4);
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	3b08      	subs	r3, #8
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	18d1      	adds	r1, r2, r3
 80017cc:	f107 030c 	add.w	r3, r7, #12
 80017d0:	2204      	movs	r2, #4
 80017d2:	4618      	mov	r0, r3
 80017d4:	f008 fa6d 	bl	8009cb2 <strncpy>
    temp[4] = '\0';
 80017d8:	2300      	movs	r3, #0
 80017da:	743b      	strb	r3, [r7, #16]
    data->Crc = (uint16_t)strtol(temp, NULL, 16);
 80017dc:	f107 030c 	add.w	r3, r7, #12
 80017e0:	2210      	movs	r2, #16
 80017e2:	2100      	movs	r1, #0
 80017e4:	4618      	mov	r0, r3
 80017e6:	f007 fc8b 	bl	8009100 <strtol>
 80017ea:	4603      	mov	r3, r0
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104

    // Chuyển đổi Stop
    data->Stop = ((uint16_t)input[inputIndex] << 8) | input[inputIndex + 1];
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	4413      	add	r3, r2
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	021b      	lsls	r3, r3, #8
 80017fe:	b21a      	sxth	r2, r3
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	3301      	adds	r3, #1
 8001804:	6879      	ldr	r1, [r7, #4]
 8001806:	440b      	add	r3, r1
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	b21b      	sxth	r3, r3
 800180c:	4313      	orrs	r3, r2
 800180e:	b21b      	sxth	r3, r3
 8001810:	b29a      	uxth	r2, r3
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
}
 8001818:	bf00      	nop
 800181a:	3720      	adds	r7, #32
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <calculate_crc>:

uint16_t calculate_crc(uint8_t *data, size_t length) {
 8001820:	b480      	push	{r7}
 8001822:	b087      	sub	sp, #28
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
    uint16_t crc = 0xFFFF;  // Giá trị bắt đầu CRC-16 (0xFFFF)
 800182a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800182e:	82fb      	strh	r3, [r7, #22]

    for (size_t i = 0; i < length; i++) {
 8001830:	2300      	movs	r3, #0
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	e022      	b.n	800187c <calculate_crc+0x5c>
        crc ^= data[i];  // XOR byte hiện tại với CRC
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	4413      	add	r3, r2
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	461a      	mov	r2, r3
 8001840:	8afb      	ldrh	r3, [r7, #22]
 8001842:	4053      	eors	r3, r2
 8001844:	82fb      	strh	r3, [r7, #22]
        for (uint8_t bit = 0; bit < 8; bit++) {  // Lặp qua từng bit
 8001846:	2300      	movs	r3, #0
 8001848:	73fb      	strb	r3, [r7, #15]
 800184a:	e011      	b.n	8001870 <calculate_crc+0x50>
            if (crc & 0x0001) {  // Nếu bit thấp nhất là 1
 800184c:	8afb      	ldrh	r3, [r7, #22]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d006      	beq.n	8001864 <calculate_crc+0x44>
                crc = (crc >> 1) ^ 0xA001;  // Dịch sang phải và XOR với 0xA001
 8001856:	8afb      	ldrh	r3, [r7, #22]
 8001858:	085b      	lsrs	r3, r3, #1
 800185a:	b29a      	uxth	r2, r3
 800185c:	4b14      	ldr	r3, [pc, #80]	@ (80018b0 <calculate_crc+0x90>)
 800185e:	4053      	eors	r3, r2
 8001860:	82fb      	strh	r3, [r7, #22]
 8001862:	e002      	b.n	800186a <calculate_crc+0x4a>
            } else {
                crc >>= 1;  // Chỉ dịch CRC sang phải nếu bit thấp nhất là 0
 8001864:	8afb      	ldrh	r3, [r7, #22]
 8001866:	085b      	lsrs	r3, r3, #1
 8001868:	82fb      	strh	r3, [r7, #22]
        for (uint8_t bit = 0; bit < 8; bit++) {  // Lặp qua từng bit
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	3301      	adds	r3, #1
 800186e:	73fb      	strb	r3, [r7, #15]
 8001870:	7bfb      	ldrb	r3, [r7, #15]
 8001872:	2b07      	cmp	r3, #7
 8001874:	d9ea      	bls.n	800184c <calculate_crc+0x2c>
    for (size_t i = 0; i < length; i++) {
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	3301      	adds	r3, #1
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	d3d8      	bcc.n	8001836 <calculate_crc+0x16>
            }
        }
    }
    int16_t L = crc&0xFF;
 8001884:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001888:	b2db      	uxtb	r3, r3
 800188a:	81bb      	strh	r3, [r7, #12]
    int16_t H = (crc>>8)&0xFF;
 800188c:	8afb      	ldrh	r3, [r7, #22]
 800188e:	0a1b      	lsrs	r3, r3, #8
 8001890:	b29b      	uxth	r3, r3
 8001892:	817b      	strh	r3, [r7, #10]
    return (L<<8)|H;  // Trả về CRC tính toán
 8001894:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001898:	021b      	lsls	r3, r3, #8
 800189a:	b21a      	sxth	r2, r3
 800189c:	897b      	ldrh	r3, [r7, #10]
 800189e:	4313      	orrs	r3, r2
 80018a0:	b21b      	sxth	r3, r3
 80018a2:	b29b      	uxth	r3, r3
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	371c      	adds	r7, #28
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	ffffa001 	.word	0xffffa001

080018b4 <check_crc>:

uint16_t check_crc(DataStruct *data) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b0c6      	sub	sp, #280	@ 0x118
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80018be:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80018c2:	6018      	str	r0, [r3, #0]
    // Tạo mảng chứa dữ liệu cần tính CRC
    uint8_t temp_data[MAX_DATA_SIZE + 3];  // Start, Addr, Code, Data (tối đa)

    // Sao chép các thành phần dữ liệu vào mảng tạm
    size_t index = 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    temp_data[index++] = data->Start;  // Start
 80018ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80018ce:	1c5a      	adds	r2, r3, #1
 80018d0:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 80018d4:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80018d8:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 80018dc:	6812      	ldr	r2, [r2, #0]
 80018de:	7811      	ldrb	r1, [r2, #0]
 80018e0:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80018e4:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80018e8:	54d1      	strb	r1, [r2, r3]
    temp_data[index++] = data->Addr;   // Addr
 80018ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80018ee:	1c5a      	adds	r2, r3, #1
 80018f0:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 80018f4:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80018f8:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 80018fc:	6812      	ldr	r2, [r2, #0]
 80018fe:	7851      	ldrb	r1, [r2, #1]
 8001900:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8001904:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001908:	54d1      	strb	r1, [r2, r3]
    temp_data[index++] = data->Code;   // Code
 800190a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800190e:	1c5a      	adds	r2, r3, #1
 8001910:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 8001914:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8001918:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 800191c:	6812      	ldr	r2, [r2, #0]
 800191e:	7891      	ldrb	r1, [r2, #2]
 8001920:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8001924:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001928:	54d1      	strb	r1, [r2, r3]

    // Sao chép dữ liệu vào mảng
    memcpy(&temp_data[index], data->Data, data->Len);
 800192a:	f107 020c 	add.w	r2, r7, #12
 800192e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001932:	18d0      	adds	r0, r2, r3
 8001934:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001938:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	1cd9      	adds	r1, r3, #3
 8001940:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001944:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 800194e:	461a      	mov	r2, r3
 8001950:	f008 fa9d 	bl	8009e8e <memcpy>

    // Tính toán CRC cho dữ liệu
    uint16_t calculated_crc = calculate_crc(temp_data, index + data->Len);
 8001954:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001958:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8001962:	461a      	mov	r2, r3
 8001964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001968:	441a      	add	r2, r3
 800196a:	f107 030c 	add.w	r3, r7, #12
 800196e:	4611      	mov	r1, r2
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff55 	bl	8001820 <calculate_crc>
 8001976:	4603      	mov	r3, r0
 8001978:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112

    // So sánh CRC tính toán với CRC đã cho
    if (calculated_crc == data->Crc) {
 800197c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001980:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 800198a:	f8b7 2112 	ldrh.w	r2, [r7, #274]	@ 0x112
 800198e:	429a      	cmp	r2, r3
 8001990:	d102      	bne.n	8001998 <check_crc+0xe4>
        return calculated_crc;  // CRC hợp lệ
 8001992:	f8b7 3112 	ldrh.w	r3, [r7, #274]	@ 0x112
 8001996:	e001      	b.n	800199c <check_crc+0xe8>
    } else {
        return calculated_crc;  // CRC không hợp lệ
 8001998:	f8b7 3112 	ldrh.w	r3, [r7, #274]	@ 0x112
    }
}
 800199c:	4618      	mov	r0, r3
 800199e:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <data_struct_to_string>:
    output[len * 2] = '\0'; // Kết thúc chuỗi
    return len * 2;
}


void data_struct_to_string(DataStruct* data, char* output) {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af02      	add	r7, sp, #8
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
    // Bắt đầu chuỗi với ký tự Start
    sprintf(output, "%02X%02X%02X", data->Start, data->Addr, data->Code);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	461a      	mov	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	785b      	ldrb	r3, [r3, #1]
 80019bc:	4619      	mov	r1, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	789b      	ldrb	r3, [r3, #2]
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	460b      	mov	r3, r1
 80019c6:	491f      	ldr	r1, [pc, #124]	@ (8001a44 <data_struct_to_string+0x9c>)
 80019c8:	6838      	ldr	r0, [r7, #0]
 80019ca:	f008 f8c1 	bl	8009b50 <siprintf>

    // Thêm Addr và Code vào chuỗi
//    sprintf(output + strlen(output), "");

    // Thêm Data vào chuỗi
    for (int i = 0; i < data->Len; i++) {
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	e011      	b.n	80019f8 <data_struct_to_string+0x50>
        sprintf(output + strlen(output), "%02X", data->Data[i]);
 80019d4:	6838      	ldr	r0, [r7, #0]
 80019d6:	f7fe fbbb 	bl	8000150 <strlen>
 80019da:	4602      	mov	r2, r0
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	1898      	adds	r0, r3, r2
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	4413      	add	r3, r2
 80019e6:	3303      	adds	r3, #3
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	461a      	mov	r2, r3
 80019ec:	4916      	ldr	r1, [pc, #88]	@ (8001a48 <data_struct_to_string+0xa0>)
 80019ee:	f008 f8af 	bl	8009b50 <siprintf>
    for (int i = 0; i < data->Len; i++) {
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	3301      	adds	r3, #1
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 80019fe:	461a      	mov	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4293      	cmp	r3, r2
 8001a04:	dbe6      	blt.n	80019d4 <data_struct_to_string+0x2c>
    }

    // Thêm CRC vào chuỗi
    sprintf(output + strlen(output), "%04X", data->Crc);
 8001a06:	6838      	ldr	r0, [r7, #0]
 8001a08:	f7fe fba2 	bl	8000150 <strlen>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	1898      	adds	r0, r3, r2
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8001a18:	461a      	mov	r2, r3
 8001a1a:	490c      	ldr	r1, [pc, #48]	@ (8001a4c <data_struct_to_string+0xa4>)
 8001a1c:	f008 f898 	bl	8009b50 <siprintf>

    // Thêm Stop (\r\n) vào chuỗi
    sprintf(output + strlen(output), "%04X",data->Stop);
 8001a20:	6838      	ldr	r0, [r7, #0]
 8001a22:	f7fe fb95 	bl	8000150 <strlen>
 8001a26:	4602      	mov	r2, r0
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	1898      	adds	r0, r3, r2
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 8001a32:	461a      	mov	r2, r3
 8001a34:	4905      	ldr	r1, [pc, #20]	@ (8001a4c <data_struct_to_string+0xa4>)
 8001a36:	f008 f88b 	bl	8009b50 <siprintf>
}
 8001a3a:	bf00      	nop
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	0800c708 	.word	0x0800c708
 8001a48:	0800c700 	.word	0x0800c700
 8001a4c:	0800c718 	.word	0x0800c718

08001a50 <convert_to_char>:
    }

    return position;
}

char convert_to_char(uint16_t num) {
 8001a50:	b480      	push	{r7}
 8001a52:	b087      	sub	sp, #28
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	80fb      	strh	r3, [r7, #6]
    unsigned int count = 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
    int position = -1;
 8001a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a62:	613b      	str	r3, [r7, #16]

    // Kiểm tra từng bit trong số 12 bit
    for (int i = 0; i < 12; i++) {
 8001a64:	2300      	movs	r3, #0
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	e010      	b.n	8001a8c <convert_to_char+0x3c>
        if (num & ArrConv[i]) { // Nếu bit này là 1
 8001a6a:	4a11      	ldr	r2, [pc, #68]	@ (8001ab0 <convert_to_char+0x60>)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001a72:	88fb      	ldrh	r3, [r7, #6]
 8001a74:	4013      	ands	r3, r2
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d004      	beq.n	8001a86 <convert_to_char+0x36>
            count++;
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	617b      	str	r3, [r7, #20]
            position = i;  // Lưu lại vị trí của bit
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < 12; i++) {
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2b0b      	cmp	r3, #11
 8001a90:	ddeb      	ble.n	8001a6a <convert_to_char+0x1a>
        }
    }

    // Nếu có nhiều hơn 1 bit bằng 1, trả về '\0'
    if (count != 1) {
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d001      	beq.n	8001a9c <convert_to_char+0x4c>
        return '\0';
 8001a98:	2300      	movs	r3, #0
 8001a9a:	e003      	b.n	8001aa4 <convert_to_char+0x54>
    }

    // Nếu chỉ có 1 bit 1, trả về ký tự tương ứng
    return ArrChar[position];
 8001a9c:	4a05      	ldr	r2, [pc, #20]	@ (8001ab4 <convert_to_char+0x64>)
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	781b      	ldrb	r3, [r3, #0]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	371c      	adds	r7, #28
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	20000010 	.word	0x20000010
 8001ab4:	20000028 	.word	0x20000028

08001ab8 <gen_data_send_rs485>:

char* gen_data_send_rs485(uint8_t code, char data[])
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b0c6      	sub	sp, #280	@ 0x118
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4602      	mov	r2, r0
 8001ac0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ac4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001ac8:	6019      	str	r1, [r3, #0]
 8001aca:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ace:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8001ad2:	701a      	strb	r2, [r3, #0]
	DataStruct result;
	memset((void*)&result,0,sizeof(result));
 8001ad4:	f107 030c 	add.w	r3, r7, #12
 8001ad8:	f44f 7285 	mov.w	r2, #266	@ 0x10a
 8001adc:	2100      	movs	r1, #0
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f008 f8df 	bl	8009ca2 <memset>
	result.Start = 0x3A;
 8001ae4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ae8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001aec:	223a      	movs	r2, #58	@ 0x3a
 8001aee:	701a      	strb	r2, [r3, #0]
	result.Addr = MY_ADDRESS;
 8001af0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001af4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001af8:	226f      	movs	r2, #111	@ 0x6f
 8001afa:	705a      	strb	r2, [r3, #1]
	result.Code = code;
 8001afc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b00:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b04:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8001b08:	f2a2 1211 	subw	r2, r2, #273	@ 0x111
 8001b0c:	7812      	ldrb	r2, [r2, #0]
 8001b0e:	709a      	strb	r2, [r3, #2]
	result.Len = strlen(data);
 8001b10:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b14:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001b18:	6818      	ldr	r0, [r3, #0]
 8001b1a:	f7fe fb19 	bl	8000150 <strlen>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b26:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b2a:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
	memcpy((void*)result.Data, (void*)data, strlen(data)+1);
 8001b2e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b32:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001b36:	6818      	ldr	r0, [r3, #0]
 8001b38:	f7fe fb0a 	bl	8000150 <strlen>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	1c59      	adds	r1, r3, #1
 8001b40:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b44:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001b48:	f107 020c 	add.w	r2, r7, #12
 8001b4c:	1cd0      	adds	r0, r2, #3
 8001b4e:	460a      	mov	r2, r1
 8001b50:	6819      	ldr	r1, [r3, #0]
 8001b52:	f008 f99c 	bl	8009e8e <memcpy>
	result.Crc = check_crc(&result);
 8001b56:	f107 030c 	add.w	r3, r7, #12
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff feaa 	bl	80018b4 <check_crc>
 8001b60:	4603      	mov	r3, r0
 8001b62:	461a      	mov	r2, r3
 8001b64:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b68:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b6c:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
	result.Stop = 0x0D0A;
 8001b70:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b74:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b78:	f640 520a 	movw	r2, #3338	@ 0xd0a
 8001b7c:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
	data_struct_to_string(&result,data);
 8001b80:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b84:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001b88:	f107 020c 	add.w	r2, r7, #12
 8001b8c:	6819      	ldr	r1, [r3, #0]
 8001b8e:	4610      	mov	r0, r2
 8001b90:	f7ff ff0a 	bl	80019a8 <data_struct_to_string>
	return data;
 8001b94:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b98:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001b9c:	681b      	ldr	r3, [r3, #0]
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <UserDelayUntil>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void UserDelayUntil(uint32_t *lastTick, uint32_t periodMs)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
    uint32_t currentTick = xTaskGetTickCount();  // Lấy tick hiện tại
 8001bb2:	f006 f8f1 	bl	8007d98 <xTaskGetTickCount>
 8001bb6:	60f8      	str	r0, [r7, #12]
    uint32_t nextTick = *lastTick + pdMS_TO_TICKS(periodMs);  // Tính tick tiếp theo
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001bc2:	fb01 f303 	mul.w	r3, r1, r3
 8001bc6:	490c      	ldr	r1, [pc, #48]	@ (8001bf8 <UserDelayUntil+0x50>)
 8001bc8:	fba1 1303 	umull	r1, r3, r1, r3
 8001bcc:	099b      	lsrs	r3, r3, #6
 8001bce:	4413      	add	r3, r2
 8001bd0:	60bb      	str	r3, [r7, #8]
    if ((int32_t)(nextTick - currentTick) > 0)
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	dd05      	ble.n	8001be8 <UserDelayUntil+0x40>
    {
        vTaskDelay(nextTick - currentTick);  // Delay nếu chưa tới thời gian tiếp theo
 8001bdc:	68ba      	ldr	r2, [r7, #8]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	4618      	mov	r0, r3
 8001be4:	f005 ff8a 	bl	8007afc <vTaskDelay>
    }
    *lastTick = nextTick;  // Cập nhật tick cho lần tiếp theo
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	601a      	str	r2, [r3, #0]
}
 8001bee:	bf00      	nop
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	10624dd3 	.word	0x10624dd3

08001bfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bfc:	b5b0      	push	{r4, r5, r7, lr}
 8001bfe:	b0b4      	sub	sp, #208	@ 0xd0
 8001c00:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c02:	f001 fa4b 	bl	800309c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c06:	f000 f8e3 	bl	8001dd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c0a:	f000 f97f 	bl	8001f0c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001c0e:	f000 f925 	bl	8001e5c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001c12:	f000 f951 	bl	8001eb8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init(2);
 8001c16:	2002      	movs	r0, #2
 8001c18:	f7ff fb58 	bl	80012cc <HD44780_Init>
  MPR121_Init();
 8001c1c:	f7fe ff84 	bl	8000b28 <MPR121_Init>
  BMP180_Init(&hi2c1);
 8001c20:	4858      	ldr	r0, [pc, #352]	@ (8001d84 <main+0x188>)
 8001c22:	f7ff f86f 	bl	8000d04 <BMP180_Init>
  MPR121_Init();
 8001c26:	f7fe ff7f 	bl	8000b28 <MPR121_Init>
  BMP180_SetOversampling(BMP180_ULTRA);
 8001c2a:	2003      	movs	r0, #3
 8001c2c:	f7ff f878 	bl	8000d20 <BMP180_SetOversampling>
  BMP180_UpdateCalibrationData();
 8001c30:	f7ff f886 	bl	8000d40 <BMP180_UpdateCalibrationData>
  HD44780_SetCursor(0,0);
 8001c34:	2100      	movs	r1, #0
 8001c36:	2000      	movs	r0, #0
 8001c38:	f7ff fbe2 	bl	8001400 <HD44780_SetCursor>
  HD44780_PrintStr("INIT LCD 1602");
 8001c3c:	4852      	ldr	r0, [pc, #328]	@ (8001d88 <main+0x18c>)
 8001c3e:	f7ff fc50 	bl	80014e2 <HD44780_PrintStr>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of I2C_Bus */
  osMutexDef(I2C_Bus);
 8001c42:	2300      	movs	r3, #0
 8001c44:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001c48:	2300      	movs	r3, #0
 8001c4a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  I2C_BusHandle = osMutexCreate(osMutex(I2C_Bus));
 8001c4e:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8001c52:	4618      	mov	r0, r3
 8001c54:	f004 fc0f 	bl	8006476 <osMutexCreate>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	4a4c      	ldr	r2, [pc, #304]	@ (8001d8c <main+0x190>)
 8001c5c:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of StringPrint */
  osMessageQDef(StringPrint, 10, 20);
 8001c5e:	4b4c      	ldr	r3, [pc, #304]	@ (8001d90 <main+0x194>)
 8001c60:	f107 04b8 	add.w	r4, r7, #184	@ 0xb8
 8001c64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  StringPrintHandle = osMessageCreate(osMessageQ(StringPrint), NULL);
 8001c6a:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8001c6e:	2100      	movs	r1, #0
 8001c70:	4618      	mov	r0, r3
 8001c72:	f004 fc9d 	bl	80065b0 <osMessageCreate>
 8001c76:	4603      	mov	r3, r0
 8001c78:	4a46      	ldr	r2, [pc, #280]	@ (8001d94 <main+0x198>)
 8001c7a:	6013      	str	r3, [r2, #0]

  /* definition and creation of StringRS485 */
  osMessageQDef(StringRS485, 510, 50);
 8001c7c:	4b46      	ldr	r3, [pc, #280]	@ (8001d98 <main+0x19c>)
 8001c7e:	f107 04a8 	add.w	r4, r7, #168	@ 0xa8
 8001c82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  StringRS485Handle = osMessageCreate(osMessageQ(StringRS485), NULL);
 8001c88:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f004 fc8e 	bl	80065b0 <osMessageCreate>
 8001c94:	4603      	mov	r3, r0
 8001c96:	4a41      	ldr	r2, [pc, #260]	@ (8001d9c <main+0x1a0>)
 8001c98:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of RXUARTTask */
  osThreadDef(RXUARTTask, RX_Task, osPriorityAboveNormal, 0, 512);
 8001c9a:	4b41      	ldr	r3, [pc, #260]	@ (8001da0 <main+0x1a4>)
 8001c9c:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8001ca0:	461d      	mov	r5, r3
 8001ca2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ca4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ca6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001caa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RXUARTTaskHandle = osThreadCreate(osThread(RXUARTTask), NULL);
 8001cae:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f004 fb7e 	bl	80063b6 <osThreadCreate>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	4a39      	ldr	r2, [pc, #228]	@ (8001da4 <main+0x1a8>)
 8001cbe:	6013      	str	r3, [r2, #0]

  /* definition and creation of LCD */
  osThreadDef(LCD, LCD_Task, osPriorityHigh, 0, 512);
 8001cc0:	4b39      	ldr	r3, [pc, #228]	@ (8001da8 <main+0x1ac>)
 8001cc2:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8001cc6:	461d      	mov	r5, r3
 8001cc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ccc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001cd0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LCDHandle = osThreadCreate(osThread(LCD), NULL);
 8001cd4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001cd8:	2100      	movs	r1, #0
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f004 fb6b 	bl	80063b6 <osThreadCreate>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	4a32      	ldr	r2, [pc, #200]	@ (8001dac <main+0x1b0>)
 8001ce4:	6013      	str	r3, [r2, #0]

  /* definition and creation of ReadTempTask */
  osThreadDef(ReadTempTask, Temp_Task, osPriorityNormal, 0, 256);
 8001ce6:	4b32      	ldr	r3, [pc, #200]	@ (8001db0 <main+0x1b4>)
 8001ce8:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8001cec:	461d      	mov	r5, r3
 8001cee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cf2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001cf6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadTempTaskHandle = osThreadCreate(osThread(ReadTempTask), NULL);
 8001cfa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001cfe:	2100      	movs	r1, #0
 8001d00:	4618      	mov	r0, r3
 8001d02:	f004 fb58 	bl	80063b6 <osThreadCreate>
 8001d06:	4603      	mov	r3, r0
 8001d08:	4a2a      	ldr	r2, [pc, #168]	@ (8001db4 <main+0x1b8>)
 8001d0a:	6013      	str	r3, [r2, #0]

  /* definition and creation of ReadPressTask */
  osThreadDef(ReadPressTask, Press_Task, osPriorityNormal, 0, 256);
 8001d0c:	4b2a      	ldr	r3, [pc, #168]	@ (8001db8 <main+0x1bc>)
 8001d0e:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8001d12:	461d      	mov	r5, r3
 8001d14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d18:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadPressTaskHandle = osThreadCreate(osThread(ReadPressTask), NULL);
 8001d20:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d24:	2100      	movs	r1, #0
 8001d26:	4618      	mov	r0, r3
 8001d28:	f004 fb45 	bl	80063b6 <osThreadCreate>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	4a23      	ldr	r2, [pc, #140]	@ (8001dbc <main+0x1c0>)
 8001d30:	6013      	str	r3, [r2, #0]

  /* definition and creation of KeyTask */
  osThreadDef(KeyTask, Key_Task, osPriorityRealtime, 0, 512);
 8001d32:	4b23      	ldr	r3, [pc, #140]	@ (8001dc0 <main+0x1c4>)
 8001d34:	f107 041c 	add.w	r4, r7, #28
 8001d38:	461d      	mov	r5, r3
 8001d3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  KeyTaskHandle = osThreadCreate(osThread(KeyTask), NULL);
 8001d46:	f107 031c 	add.w	r3, r7, #28
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f004 fb32 	bl	80063b6 <osThreadCreate>
 8001d52:	4603      	mov	r3, r0
 8001d54:	4a1b      	ldr	r2, [pc, #108]	@ (8001dc4 <main+0x1c8>)
 8001d56:	6013      	str	r3, [r2, #0]

  /* definition and creation of TXUARTTask */
  osThreadDef(TXUARTTask, TX_Task, osPriorityNormal, 0, 512);
 8001d58:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc8 <main+0x1cc>)
 8001d5a:	463c      	mov	r4, r7
 8001d5c:	461d      	mov	r5, r3
 8001d5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d62:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d66:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TXUARTTaskHandle = osThreadCreate(osThread(TXUARTTask), NULL);
 8001d6a:	463b      	mov	r3, r7
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f004 fb21 	bl	80063b6 <osThreadCreate>
 8001d74:	4603      	mov	r3, r0
 8001d76:	4a15      	ldr	r2, [pc, #84]	@ (8001dcc <main+0x1d0>)
 8001d78:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001d7a:	f004 fb15 	bl	80063a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d7e:	bf00      	nop
 8001d80:	e7fd      	b.n	8001d7e <main+0x182>
 8001d82:	bf00      	nop
 8001d84:	200005e0 	.word	0x200005e0
 8001d88:	0800c720 	.word	0x0800c720
 8001d8c:	2000069c 	.word	0x2000069c
 8001d90:	0800c730 	.word	0x0800c730
 8001d94:	20000694 	.word	0x20000694
 8001d98:	0800c740 	.word	0x0800c740
 8001d9c:	20000698 	.word	0x20000698
 8001da0:	0800c75c 	.word	0x0800c75c
 8001da4:	2000067c 	.word	0x2000067c
 8001da8:	0800c77c 	.word	0x0800c77c
 8001dac:	20000680 	.word	0x20000680
 8001db0:	0800c7a8 	.word	0x0800c7a8
 8001db4:	20000684 	.word	0x20000684
 8001db8:	0800c7d4 	.word	0x0800c7d4
 8001dbc:	20000688 	.word	0x20000688
 8001dc0:	0800c7f8 	.word	0x0800c7f8
 8001dc4:	2000068c 	.word	0x2000068c
 8001dc8:	0800c820 	.word	0x0800c820
 8001dcc:	20000690 	.word	0x20000690

08001dd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b090      	sub	sp, #64	@ 0x40
 8001dd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dd6:	f107 0318 	add.w	r3, r7, #24
 8001dda:	2228      	movs	r2, #40	@ 0x28
 8001ddc:	2100      	movs	r1, #0
 8001dde:	4618      	mov	r0, r3
 8001de0:	f007 ff5f 	bl	8009ca2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001de4:	1d3b      	adds	r3, r7, #4
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	605a      	str	r2, [r3, #4]
 8001dec:	609a      	str	r2, [r3, #8]
 8001dee:	60da      	str	r2, [r3, #12]
 8001df0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001df2:	2301      	movs	r3, #1
 8001df4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001df6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001dfa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e00:	2301      	movs	r3, #1
 8001e02:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e04:	2302      	movs	r3, #2
 8001e06:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e08:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e0e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e14:	f107 0318 	add.w	r3, r7, #24
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f003 f963 	bl	80050e4 <HAL_RCC_OscConfig>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001e24:	f000 feda 	bl	8002bdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e28:	230f      	movs	r3, #15
 8001e2a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e3e:	1d3b      	adds	r3, r7, #4
 8001e40:	2102      	movs	r1, #2
 8001e42:	4618      	mov	r0, r3
 8001e44:	f003 fbd0 	bl	80055e8 <HAL_RCC_ClockConfig>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001e4e:	f000 fec5 	bl	8002bdc <Error_Handler>
  }
}
 8001e52:	bf00      	nop
 8001e54:	3740      	adds	r7, #64	@ 0x40
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
	...

08001e5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e60:	4b12      	ldr	r3, [pc, #72]	@ (8001eac <MX_I2C1_Init+0x50>)
 8001e62:	4a13      	ldr	r2, [pc, #76]	@ (8001eb0 <MX_I2C1_Init+0x54>)
 8001e64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001e66:	4b11      	ldr	r3, [pc, #68]	@ (8001eac <MX_I2C1_Init+0x50>)
 8001e68:	4a12      	ldr	r2, [pc, #72]	@ (8001eb4 <MX_I2C1_Init+0x58>)
 8001e6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001eac <MX_I2C1_Init+0x50>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e72:	4b0e      	ldr	r3, [pc, #56]	@ (8001eac <MX_I2C1_Init+0x50>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e78:	4b0c      	ldr	r3, [pc, #48]	@ (8001eac <MX_I2C1_Init+0x50>)
 8001e7a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e80:	4b0a      	ldr	r3, [pc, #40]	@ (8001eac <MX_I2C1_Init+0x50>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e86:	4b09      	ldr	r3, [pc, #36]	@ (8001eac <MX_I2C1_Init+0x50>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e8c:	4b07      	ldr	r3, [pc, #28]	@ (8001eac <MX_I2C1_Init+0x50>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e92:	4b06      	ldr	r3, [pc, #24]	@ (8001eac <MX_I2C1_Init+0x50>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e98:	4804      	ldr	r0, [pc, #16]	@ (8001eac <MX_I2C1_Init+0x50>)
 8001e9a:	f001 fc03 	bl	80036a4 <HAL_I2C_Init>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ea4:	f000 fe9a 	bl	8002bdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	200005e0 	.word	0x200005e0
 8001eb0:	40005400 	.word	0x40005400
 8001eb4:	000186a0 	.word	0x000186a0

08001eb8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ebc:	4b11      	ldr	r3, [pc, #68]	@ (8001f04 <MX_USART1_UART_Init+0x4c>)
 8001ebe:	4a12      	ldr	r2, [pc, #72]	@ (8001f08 <MX_USART1_UART_Init+0x50>)
 8001ec0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ec2:	4b10      	ldr	r3, [pc, #64]	@ (8001f04 <MX_USART1_UART_Init+0x4c>)
 8001ec4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ec8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001eca:	4b0e      	ldr	r3, [pc, #56]	@ (8001f04 <MX_USART1_UART_Init+0x4c>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f04 <MX_USART1_UART_Init+0x4c>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8001f04 <MX_USART1_UART_Init+0x4c>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001edc:	4b09      	ldr	r3, [pc, #36]	@ (8001f04 <MX_USART1_UART_Init+0x4c>)
 8001ede:	220c      	movs	r2, #12
 8001ee0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ee2:	4b08      	ldr	r3, [pc, #32]	@ (8001f04 <MX_USART1_UART_Init+0x4c>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ee8:	4b06      	ldr	r3, [pc, #24]	@ (8001f04 <MX_USART1_UART_Init+0x4c>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001eee:	4805      	ldr	r0, [pc, #20]	@ (8001f04 <MX_USART1_UART_Init+0x4c>)
 8001ef0:	f003 ff76 	bl	8005de0 <HAL_UART_Init>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001efa:	f000 fe6f 	bl	8002bdc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000634 	.word	0x20000634
 8001f08:	40013800 	.word	0x40013800

08001f0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b088      	sub	sp, #32
 8001f10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f12:	f107 0310 	add.w	r3, r7, #16
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	605a      	str	r2, [r3, #4]
 8001f1c:	609a      	str	r2, [r3, #8]
 8001f1e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f20:	4b2e      	ldr	r3, [pc, #184]	@ (8001fdc <MX_GPIO_Init+0xd0>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	4a2d      	ldr	r2, [pc, #180]	@ (8001fdc <MX_GPIO_Init+0xd0>)
 8001f26:	f043 0310 	orr.w	r3, r3, #16
 8001f2a:	6193      	str	r3, [r2, #24]
 8001f2c:	4b2b      	ldr	r3, [pc, #172]	@ (8001fdc <MX_GPIO_Init+0xd0>)
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	f003 0310 	and.w	r3, r3, #16
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f38:	4b28      	ldr	r3, [pc, #160]	@ (8001fdc <MX_GPIO_Init+0xd0>)
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	4a27      	ldr	r2, [pc, #156]	@ (8001fdc <MX_GPIO_Init+0xd0>)
 8001f3e:	f043 0320 	orr.w	r3, r3, #32
 8001f42:	6193      	str	r3, [r2, #24]
 8001f44:	4b25      	ldr	r3, [pc, #148]	@ (8001fdc <MX_GPIO_Init+0xd0>)
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	f003 0320 	and.w	r3, r3, #32
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f50:	4b22      	ldr	r3, [pc, #136]	@ (8001fdc <MX_GPIO_Init+0xd0>)
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	4a21      	ldr	r2, [pc, #132]	@ (8001fdc <MX_GPIO_Init+0xd0>)
 8001f56:	f043 0304 	orr.w	r3, r3, #4
 8001f5a:	6193      	str	r3, [r2, #24]
 8001f5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001fdc <MX_GPIO_Init+0xd0>)
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	607b      	str	r3, [r7, #4]
 8001f66:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f68:	4b1c      	ldr	r3, [pc, #112]	@ (8001fdc <MX_GPIO_Init+0xd0>)
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	4a1b      	ldr	r2, [pc, #108]	@ (8001fdc <MX_GPIO_Init+0xd0>)
 8001f6e:	f043 0308 	orr.w	r3, r3, #8
 8001f72:	6193      	str	r3, [r2, #24]
 8001f74:	4b19      	ldr	r3, [pc, #100]	@ (8001fdc <MX_GPIO_Init+0xd0>)
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	f003 0308 	and.w	r3, r3, #8
 8001f7c:	603b      	str	r3, [r7, #0]
 8001f7e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001f80:	2200      	movs	r2, #0
 8001f82:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f86:	4816      	ldr	r0, [pc, #88]	@ (8001fe0 <MX_GPIO_Init+0xd4>)
 8001f88:	f001 fb42 	bl	8003610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001f8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f92:	2301      	movs	r3, #1
 8001f94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f9e:	f107 0310 	add.w	r3, r7, #16
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	480e      	ldr	r0, [pc, #56]	@ (8001fe0 <MX_GPIO_Init+0xd4>)
 8001fa6:	f001 f9af 	bl	8003308 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
 8001faa:	2320      	movs	r3, #32
 8001fac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fae:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe4 <MX_GPIO_Init+0xd8>)
 8001fb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8001fb6:	f107 0310 	add.w	r3, r7, #16
 8001fba:	4619      	mov	r1, r3
 8001fbc:	480a      	ldr	r0, [pc, #40]	@ (8001fe8 <MX_GPIO_Init+0xdc>)
 8001fbe:	f001 f9a3 	bl	8003308 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	2105      	movs	r1, #5
 8001fc6:	2017      	movs	r0, #23
 8001fc8:	f001 f973 	bl	80032b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001fcc:	2017      	movs	r0, #23
 8001fce:	f001 f98c 	bl	80032ea <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001fd2:	bf00      	nop
 8001fd4:	3720      	adds	r7, #32
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	40011000 	.word	0x40011000
 8001fe4:	10110000 	.word	0x10110000
 8001fe8:	40010c00 	.word	0x40010c00

08001fec <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == INT_Pin) {
 8001ff6:	88fb      	ldrh	r3, [r7, #6]
 8001ff8:	2b20      	cmp	r3, #32
 8001ffa:	d10b      	bne.n	8002014 <HAL_GPIO_EXTI_Callback+0x28>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001ffc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002000:	4807      	ldr	r0, [pc, #28]	@ (8002020 <HAL_GPIO_EXTI_Callback+0x34>)
 8002002:	f001 fb1d 	bl	8003640 <HAL_GPIO_TogglePin>
		count_touch++;
 8002006:	4b07      	ldr	r3, [pc, #28]	@ (8002024 <HAL_GPIO_EXTI_Callback+0x38>)
 8002008:	881b      	ldrh	r3, [r3, #0]
 800200a:	3301      	adds	r3, #1
 800200c:	b29a      	uxth	r2, r3
 800200e:	4b05      	ldr	r3, [pc, #20]	@ (8002024 <HAL_GPIO_EXTI_Callback+0x38>)
 8002010:	801a      	strh	r2, [r3, #0]
	} else {
		__NOP();
	}
}
 8002012:	e000      	b.n	8002016 <HAL_GPIO_EXTI_Callback+0x2a>
		__NOP();
 8002014:	bf00      	nop
}
 8002016:	bf00      	nop
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40011000 	.word	0x40011000
 8002024:	200006a8 	.word	0x200006a8

08002028 <RX_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_RX_Task */
void RX_Task(void const * argument)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b0ea      	sub	sp, #424	@ 0x1a8
 800202c:	af02      	add	r7, sp, #8
 800202e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002032:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002036:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	char read_to_rs485[50];
	char send_to_rs485[50];
	uint32_t GetTick = 0;
 8002038:	2300      	movs	r3, #0
 800203a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  for(;;)
  {

		memset((void*)read_to_rs485,0,sizeof(read_to_rs485));
 800203e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002042:	2232      	movs	r2, #50	@ 0x32
 8002044:	2100      	movs	r1, #0
 8002046:	4618      	mov	r0, r3
 8002048:	f007 fe2b 	bl	8009ca2 <memset>
		HAL_UART_Receive(&huart1, (uint8_t *)&read_to_rs485, sizeof (read_to_rs485) , RX_PM[C_INDEX]);
 800204c:	4bc9      	ldr	r3, [pc, #804]	@ (8002374 <RX_Task+0x34c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 8002054:	2232      	movs	r2, #50	@ 0x32
 8002056:	48c8      	ldr	r0, [pc, #800]	@ (8002378 <RX_Task+0x350>)
 8002058:	f003 ff9d 	bl	8005f96 <HAL_UART_Receive>
		  if(strlen(read_to_rs485) > 1)
 800205c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002060:	4618      	mov	r0, r3
 8002062:	f7fe f875 	bl	8000150 <strlen>
 8002066:	4603      	mov	r3, r0
 8002068:	2b01      	cmp	r3, #1
 800206a:	f240 8307 	bls.w	800267c <RX_Task+0x654>
		  {
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800206e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002072:	48c2      	ldr	r0, [pc, #776]	@ (800237c <RX_Task+0x354>)
 8002074:	f001 fae4 	bl	8003640 <HAL_GPIO_TogglePin>
			  DataStruct result;
			  parse_data(read_to_rs485,&result);
 8002078:	f107 020c 	add.w	r2, r7, #12
 800207c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002080:	4611      	mov	r1, r2
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff fb18 	bl	80016b8 <parse_data>
			  if(result.Addr == MY_ADDRESS && check_crc(&result) == result.Crc)
 8002088:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800208c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002090:	785b      	ldrb	r3, [r3, #1]
 8002092:	2b6f      	cmp	r3, #111	@ 0x6f
 8002094:	f040 82b7 	bne.w	8002606 <RX_Task+0x5de>
 8002098:	f107 030c 	add.w	r3, r7, #12
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff fc09 	bl	80018b4 <check_crc>
 80020a2:	4603      	mov	r3, r0
 80020a4:	461a      	mov	r2, r3
 80020a6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80020aa:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80020ae:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 80020b2:	429a      	cmp	r2, r3
 80020b4:	f040 82a7 	bne.w	8002606 <RX_Task+0x5de>
			  {
				  if(result.Code == 1)
 80020b8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80020bc:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80020c0:	789b      	ldrb	r3, [r3, #2]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	f040 80d1 	bne.w	800226a <RX_Task+0x242>
				  {
					  if(result.Data[0] == '1')
 80020c8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80020cc:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80020d0:	78db      	ldrb	r3, [r3, #3]
 80020d2:	2b31      	cmp	r3, #49	@ 0x31
 80020d4:	d131      	bne.n	800213a <RX_Task+0x112>
					  {
						  memset((void*)send_to_rs485,0,sizeof(send_to_rs485));
 80020d6:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80020da:	2232      	movs	r2, #50	@ 0x32
 80020dc:	2100      	movs	r1, #0
 80020de:	4618      	mov	r0, r3
 80020e0:	f007 fddf 	bl	8009ca2 <memset>
						  sprintf(send_to_rs485, "%.1fC", temperature);
 80020e4:	4ba6      	ldr	r3, [pc, #664]	@ (8002380 <RX_Task+0x358>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7fe f99d 	bl	8000428 <__aeabi_f2d>
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	f507 7096 	add.w	r0, r7, #300	@ 0x12c
 80020f6:	49a3      	ldr	r1, [pc, #652]	@ (8002384 <RX_Task+0x35c>)
 80020f8:	f007 fd2a 	bl	8009b50 <siprintf>
						  send_to_rs485[strlen(send_to_rs485)+1] = RESPONSES(CODE_TEMP);
 80020fc:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8002100:	4618      	mov	r0, r3
 8002102:	f7fe f825 	bl	8000150 <strlen>
 8002106:	4603      	mov	r3, r0
 8002108:	3301      	adds	r3, #1
 800210a:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800210e:	443b      	add	r3, r7
 8002110:	2201      	movs	r2, #1
 8002112:	f803 2c74 	strb.w	r2, [r3, #-116]
						  osMessagePut(StringRS485Handle, (uint32_t)send_to_rs485, osWaitForever);
 8002116:	4b9c      	ldr	r3, [pc, #624]	@ (8002388 <RX_Task+0x360>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f507 7196 	add.w	r1, r7, #300	@ 0x12c
 800211e:	f04f 32ff 	mov.w	r2, #4294967295
 8002122:	4618      	mov	r0, r3
 8002124:	f004 fa6c 	bl	8006600 <osMessagePut>
						  osMessagePut(StringPrintHandle, (uint32_t)indicate_T, osWaitForever);
 8002128:	4b98      	ldr	r3, [pc, #608]	@ (800238c <RX_Task+0x364>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4998      	ldr	r1, [pc, #608]	@ (8002390 <RX_Task+0x368>)
 800212e:	f04f 32ff 	mov.w	r2, #4294967295
 8002132:	4618      	mov	r0, r3
 8002134:	f004 fa64 	bl	8006600 <osMessagePut>
				  if(result.Code == 1)
 8002138:	e2a0      	b.n	800267c <RX_Task+0x654>
					  }
					  else if (result.Data[0] == '2')
 800213a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800213e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002142:	78db      	ldrb	r3, [r3, #3]
 8002144:	2b32      	cmp	r3, #50	@ 0x32
 8002146:	d12d      	bne.n	80021a4 <RX_Task+0x17c>
					  {
						  memset((void*)send_to_rs485,0,sizeof(send_to_rs485));
 8002148:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800214c:	2232      	movs	r2, #50	@ 0x32
 800214e:	2100      	movs	r1, #0
 8002150:	4618      	mov	r0, r3
 8002152:	f007 fda6 	bl	8009ca2 <memset>
						  sprintf(send_to_rs485, "%dPa", (int) pressure);
 8002156:	4b8f      	ldr	r3, [pc, #572]	@ (8002394 <RX_Task+0x36c>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800215e:	498e      	ldr	r1, [pc, #568]	@ (8002398 <RX_Task+0x370>)
 8002160:	4618      	mov	r0, r3
 8002162:	f007 fcf5 	bl	8009b50 <siprintf>
						  send_to_rs485[strlen(send_to_rs485)+1] = RESPONSES(CODE_PRES);
 8002166:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800216a:	4618      	mov	r0, r3
 800216c:	f7fd fff0 	bl	8000150 <strlen>
 8002170:	4603      	mov	r3, r0
 8002172:	3301      	adds	r3, #1
 8002174:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002178:	443b      	add	r3, r7
 800217a:	2202      	movs	r2, #2
 800217c:	f803 2c74 	strb.w	r2, [r3, #-116]
						  osMessagePut(StringRS485Handle, (uint32_t)send_to_rs485, osWaitForever);
 8002180:	4b81      	ldr	r3, [pc, #516]	@ (8002388 <RX_Task+0x360>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f507 7196 	add.w	r1, r7, #300	@ 0x12c
 8002188:	f04f 32ff 	mov.w	r2, #4294967295
 800218c:	4618      	mov	r0, r3
 800218e:	f004 fa37 	bl	8006600 <osMessagePut>
						  osMessagePut(StringPrintHandle, (uint32_t)indicate_P, osWaitForever);
 8002192:	4b7e      	ldr	r3, [pc, #504]	@ (800238c <RX_Task+0x364>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4981      	ldr	r1, [pc, #516]	@ (800239c <RX_Task+0x374>)
 8002198:	f04f 32ff 	mov.w	r2, #4294967295
 800219c:	4618      	mov	r0, r3
 800219e:	f004 fa2f 	bl	8006600 <osMessagePut>
				  if(result.Code == 1)
 80021a2:	e26b      	b.n	800267c <RX_Task+0x654>
					  }
					  else if (result.Data[0] == '4')
 80021a4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80021a8:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80021ac:	78db      	ldrb	r3, [r3, #3]
 80021ae:	2b34      	cmp	r3, #52	@ 0x34
 80021b0:	d12e      	bne.n	8002210 <RX_Task+0x1e8>
					  {
						  memset((void*)send_to_rs485,0,sizeof(send_to_rs485));
 80021b2:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80021b6:	2232      	movs	r2, #50	@ 0x32
 80021b8:	2100      	movs	r1, #0
 80021ba:	4618      	mov	r0, r3
 80021bc:	f007 fd71 	bl	8009ca2 <memset>
						  sprintf(send_to_rs485, "%dN", (int) count_touch);
 80021c0:	4b77      	ldr	r3, [pc, #476]	@ (80023a0 <RX_Task+0x378>)
 80021c2:	881b      	ldrh	r3, [r3, #0]
 80021c4:	461a      	mov	r2, r3
 80021c6:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80021ca:	4976      	ldr	r1, [pc, #472]	@ (80023a4 <RX_Task+0x37c>)
 80021cc:	4618      	mov	r0, r3
 80021ce:	f007 fcbf 	bl	8009b50 <siprintf>
						  send_to_rs485[strlen(send_to_rs485)+1] = RESPONSES(CODE_COUNT);
 80021d2:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7fd ffba 	bl	8000150 <strlen>
 80021dc:	4603      	mov	r3, r0
 80021de:	3301      	adds	r3, #1
 80021e0:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80021e4:	443b      	add	r3, r7
 80021e6:	2204      	movs	r2, #4
 80021e8:	f803 2c74 	strb.w	r2, [r3, #-116]
						  osMessagePut(StringRS485Handle, (uint32_t)send_to_rs485, osWaitForever);
 80021ec:	4b66      	ldr	r3, [pc, #408]	@ (8002388 <RX_Task+0x360>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f507 7196 	add.w	r1, r7, #300	@ 0x12c
 80021f4:	f04f 32ff 	mov.w	r2, #4294967295
 80021f8:	4618      	mov	r0, r3
 80021fa:	f004 fa01 	bl	8006600 <osMessagePut>
						  osMessagePut(StringPrintHandle, (uint32_t)indicate_C, osWaitForever);
 80021fe:	4b63      	ldr	r3, [pc, #396]	@ (800238c <RX_Task+0x364>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4969      	ldr	r1, [pc, #420]	@ (80023a8 <RX_Task+0x380>)
 8002204:	f04f 32ff 	mov.w	r2, #4294967295
 8002208:	4618      	mov	r0, r3
 800220a:	f004 f9f9 	bl	8006600 <osMessagePut>
				  if(result.Code == 1)
 800220e:	e235      	b.n	800267c <RX_Task+0x654>
					  }
					  else
					  {
						  memset((void*)send_to_rs485,0,sizeof(send_to_rs485));
 8002210:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8002214:	2232      	movs	r2, #50	@ 0x32
 8002216:	2100      	movs	r1, #0
 8002218:	4618      	mov	r0, r3
 800221a:	f007 fd42 	bl	8009ca2 <memset>
						  sprintf(send_to_rs485, "Invalid Data");
 800221e:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8002222:	4962      	ldr	r1, [pc, #392]	@ (80023ac <RX_Task+0x384>)
 8002224:	4618      	mov	r0, r3
 8002226:	f007 fc93 	bl	8009b50 <siprintf>
						  send_to_rs485[strlen(send_to_rs485)+1] = RESPONSES(CODE_RESP);
 800222a:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800222e:	4618      	mov	r0, r3
 8002230:	f7fd ff8e 	bl	8000150 <strlen>
 8002234:	4603      	mov	r3, r0
 8002236:	3301      	adds	r3, #1
 8002238:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800223c:	443b      	add	r3, r7
 800223e:	2205      	movs	r2, #5
 8002240:	f803 2c74 	strb.w	r2, [r3, #-116]
						  osMessagePut(StringRS485Handle, (uint32_t)send_to_rs485, osWaitForever);
 8002244:	4b50      	ldr	r3, [pc, #320]	@ (8002388 <RX_Task+0x360>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f507 7196 	add.w	r1, r7, #300	@ 0x12c
 800224c:	f04f 32ff 	mov.w	r2, #4294967295
 8002250:	4618      	mov	r0, r3
 8002252:	f004 f9d5 	bl	8006600 <osMessagePut>
						  osMessagePut(StringPrintHandle, (uint32_t)send_to_rs485, osWaitForever);
 8002256:	4b4d      	ldr	r3, [pc, #308]	@ (800238c <RX_Task+0x364>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f507 7196 	add.w	r1, r7, #300	@ 0x12c
 800225e:	f04f 32ff 	mov.w	r2, #4294967295
 8002262:	4618      	mov	r0, r3
 8002264:	f004 f9cc 	bl	8006600 <osMessagePut>
				  if(result.Code == 1)
 8002268:	e208      	b.n	800267c <RX_Task+0x654>
					  }
				  }
				  else if(result.Code == 2)
 800226a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800226e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002272:	789b      	ldrb	r3, [r3, #2]
 8002274:	2b02      	cmp	r3, #2
 8002276:	d13b      	bne.n	80022f0 <RX_Task+0x2c8>
				  {
					  result.Data[result.Len] = '\0';
 8002278:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800227c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002280:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8002284:	461a      	mov	r2, r3
 8002286:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800228a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800228e:	4413      	add	r3, r2
 8002290:	2200      	movs	r2, #0
 8002292:	70da      	strb	r2, [r3, #3]
					  memset((void*)send_to_rs485,0,sizeof(send_to_rs485));
 8002294:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8002298:	2232      	movs	r2, #50	@ 0x32
 800229a:	2100      	movs	r1, #0
 800229c:	4618      	mov	r0, r3
 800229e:	f007 fd00 	bl	8009ca2 <memset>
					  sprintf(send_to_rs485, "Okee");
 80022a2:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80022a6:	4942      	ldr	r1, [pc, #264]	@ (80023b0 <RX_Task+0x388>)
 80022a8:	4618      	mov	r0, r3
 80022aa:	f007 fc51 	bl	8009b50 <siprintf>
					  send_to_rs485[strlen(send_to_rs485)+1] = RESPONSES(CODE_RESP);
 80022ae:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fd ff4c 	bl	8000150 <strlen>
 80022b8:	4603      	mov	r3, r0
 80022ba:	3301      	adds	r3, #1
 80022bc:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80022c0:	443b      	add	r3, r7
 80022c2:	2205      	movs	r2, #5
 80022c4:	f803 2c74 	strb.w	r2, [r3, #-116]
					  osMessagePut(StringRS485Handle, (uint32_t)send_to_rs485, osWaitForever);
 80022c8:	4b2f      	ldr	r3, [pc, #188]	@ (8002388 <RX_Task+0x360>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f507 7196 	add.w	r1, r7, #300	@ 0x12c
 80022d0:	f04f 32ff 	mov.w	r2, #4294967295
 80022d4:	4618      	mov	r0, r3
 80022d6:	f004 f993 	bl	8006600 <osMessagePut>
					  osMessagePut(StringPrintHandle, (uint32_t)result.Data, osWaitForever);
 80022da:	4b2c      	ldr	r3, [pc, #176]	@ (800238c <RX_Task+0x364>)
 80022dc:	6818      	ldr	r0, [r3, #0]
 80022de:	f107 030c 	add.w	r3, r7, #12
 80022e2:	3303      	adds	r3, #3
 80022e4:	f04f 32ff 	mov.w	r2, #4294967295
 80022e8:	4619      	mov	r1, r3
 80022ea:	f004 f989 	bl	8006600 <osMessagePut>
				  if(result.Code == 1)
 80022ee:	e1c5      	b.n	800267c <RX_Task+0x654>
				  }
				  else if(result.Code == 3)
 80022f0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80022f4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80022f8:	789b      	ldrb	r3, [r3, #2]
 80022fa:	2b03      	cmp	r3, #3
 80022fc:	d15c      	bne.n	80023b8 <RX_Task+0x390>
				  {
					  result.Data[result.Len] = '\0';
 80022fe:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002302:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002306:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 800230a:	461a      	mov	r2, r3
 800230c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002310:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002314:	4413      	add	r3, r2
 8002316:	2200      	movs	r2, #0
 8002318:	70da      	strb	r2, [r3, #3]
					  memset((void*)send_to_rs485,0,sizeof(send_to_rs485));
 800231a:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800231e:	2232      	movs	r2, #50	@ 0x32
 8002320:	2100      	movs	r1, #0
 8002322:	4618      	mov	r0, r3
 8002324:	f007 fcbd 	bl	8009ca2 <memset>
					  sprintf(send_to_rs485, "Okee");
 8002328:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800232c:	4920      	ldr	r1, [pc, #128]	@ (80023b0 <RX_Task+0x388>)
 800232e:	4618      	mov	r0, r3
 8002330:	f007 fc0e 	bl	8009b50 <siprintf>
					  send_to_rs485[strlen(send_to_rs485)+1] = RESPONSES(CODE_RESP);
 8002334:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8002338:	4618      	mov	r0, r3
 800233a:	f7fd ff09 	bl	8000150 <strlen>
 800233e:	4603      	mov	r3, r0
 8002340:	3301      	adds	r3, #1
 8002342:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002346:	443b      	add	r3, r7
 8002348:	2205      	movs	r2, #5
 800234a:	f803 2c74 	strb.w	r2, [r3, #-116]
					  osMessagePut(StringRS485Handle, (uint32_t)send_to_rs485, osWaitForever);
 800234e:	4b0e      	ldr	r3, [pc, #56]	@ (8002388 <RX_Task+0x360>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f507 7196 	add.w	r1, r7, #300	@ 0x12c
 8002356:	f04f 32ff 	mov.w	r2, #4294967295
 800235a:	4618      	mov	r0, r3
 800235c:	f004 f950 	bl	8006600 <osMessagePut>
					  osMessagePut(StringPrintHandle, (uint32_t)indicate_M, osWaitForever);
 8002360:	4b0a      	ldr	r3, [pc, #40]	@ (800238c <RX_Task+0x364>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4913      	ldr	r1, [pc, #76]	@ (80023b4 <RX_Task+0x38c>)
 8002366:	f04f 32ff 	mov.w	r2, #4294967295
 800236a:	4618      	mov	r0, r3
 800236c:	f004 f948 	bl	8006600 <osMessagePut>
				  if(result.Code == 1)
 8002370:	e184      	b.n	800267c <RX_Task+0x654>
 8002372:	bf00      	nop
 8002374:	20000034 	.word	0x20000034
 8002378:	20000634 	.word	0x20000634
 800237c:	40011000 	.word	0x40011000
 8002380:	200006a0 	.word	0x200006a0
 8002384:	0800c83c 	.word	0x0800c83c
 8002388:	20000698 	.word	0x20000698
 800238c:	20000694 	.word	0x20000694
 8002390:	200000ac 	.word	0x200000ac
 8002394:	200006a4 	.word	0x200006a4
 8002398:	0800c844 	.word	0x0800c844
 800239c:	200000c0 	.word	0x200000c0
 80023a0:	200006a8 	.word	0x200006a8
 80023a4:	0800c84c 	.word	0x0800c84c
 80023a8:	200000d0 	.word	0x200000d0
 80023ac:	0800c850 	.word	0x0800c850
 80023b0:	0800c860 	.word	0x0800c860
 80023b4:	200000dc 	.word	0x200000dc
				  }
				  else if(result.Code == 4)
 80023b8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80023bc:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80023c0:	789b      	ldrb	r3, [r3, #2]
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	f040 8091 	bne.w	80024ea <RX_Task+0x4c2>
				  {
					  int Task = -1, NewC = 0, NewD = 0, NewT = 0;
 80023c8:	f04f 33ff 	mov.w	r3, #4294967295
 80023cc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80023d0:	2300      	movs	r3, #0
 80023d2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80023d6:	2300      	movs	r3, #0
 80023d8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80023dc:	2300      	movs	r3, #0
 80023de:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
					  char *Res = indicate_E_CDT;
 80023e2:	4bad      	ldr	r3, [pc, #692]	@ (8002698 <RX_Task+0x670>)
 80023e4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
					  result.Data[result.Len] = '\0';
 80023e8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80023ec:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80023f0:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 80023f4:	461a      	mov	r2, r3
 80023f6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80023fa:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80023fe:	4413      	add	r3, r2
 8002400:	2200      	movs	r2, #0
 8002402:	70da      	strb	r2, [r3, #3]
					  if(sscanf((char*)result.Data, "%d%d%d%d",&Task, &NewC, &NewD, &NewT) == 4)
 8002404:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8002408:	f507 7292 	add.w	r2, r7, #292	@ 0x124
 800240c:	f107 030c 	add.w	r3, r7, #12
 8002410:	1cd8      	adds	r0, r3, #3
 8002412:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002416:	9301      	str	r3, [sp, #4]
 8002418:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	460b      	mov	r3, r1
 8002420:	499e      	ldr	r1, [pc, #632]	@ (800269c <RX_Task+0x674>)
 8002422:	f007 fbb5 	bl	8009b90 <siscanf>
 8002426:	4603      	mov	r3, r0
 8002428:	2b04      	cmp	r3, #4
 800242a:	d130      	bne.n	800248e <RX_Task+0x466>
					  {
						  if(Task >= 0 && Task < 6 && NewC < NewD && NewD <= NewT)
 800242c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002430:	2b00      	cmp	r3, #0
 8002432:	db2c      	blt.n	800248e <RX_Task+0x466>
 8002434:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002438:	2b05      	cmp	r3, #5
 800243a:	dc28      	bgt.n	800248e <RX_Task+0x466>
 800243c:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8002440:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002444:	429a      	cmp	r2, r3
 8002446:	da22      	bge.n	800248e <RX_Task+0x466>
 8002448:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800244c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002450:	429a      	cmp	r2, r3
 8002452:	dc1c      	bgt.n	800248e <RX_Task+0x466>
						  {
							  ALL_TASK[Task][C_INDEX] = NewC;
 8002454:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002458:	4a91      	ldr	r2, [pc, #580]	@ (80026a0 <RX_Task+0x678>)
 800245a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800245e:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8002462:	601a      	str	r2, [r3, #0]
							  ALL_TASK[Task][D_INDEX] = NewD;
 8002464:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002468:	4a8d      	ldr	r2, [pc, #564]	@ (80026a0 <RX_Task+0x678>)
 800246a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800246e:	3304      	adds	r3, #4
 8002470:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002474:	601a      	str	r2, [r3, #0]
							  ALL_TASK[Task][T_INDEX] = NewT;
 8002476:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800247a:	4a89      	ldr	r2, [pc, #548]	@ (80026a0 <RX_Task+0x678>)
 800247c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002480:	3308      	adds	r3, #8
 8002482:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002486:	601a      	str	r2, [r3, #0]
							  Res = indicate_C_D_T;
 8002488:	4b86      	ldr	r3, [pc, #536]	@ (80026a4 <RX_Task+0x67c>)
 800248a:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
						  }
					  }
					  memset((void*)send_to_rs485,0,sizeof(send_to_rs485));
 800248e:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8002492:	2232      	movs	r2, #50	@ 0x32
 8002494:	2100      	movs	r1, #0
 8002496:	4618      	mov	r0, r3
 8002498:	f007 fc03 	bl	8009ca2 <memset>
					  sprintf(send_to_rs485, Res);
 800249c:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80024a0:	f8d7 119c 	ldr.w	r1, [r7, #412]	@ 0x19c
 80024a4:	4618      	mov	r0, r3
 80024a6:	f007 fb53 	bl	8009b50 <siprintf>
					  send_to_rs485[strlen(send_to_rs485)+1] = RESPONSES(CODE_RESP);
 80024aa:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7fd fe4e 	bl	8000150 <strlen>
 80024b4:	4603      	mov	r3, r0
 80024b6:	3301      	adds	r3, #1
 80024b8:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80024bc:	443b      	add	r3, r7
 80024be:	2205      	movs	r2, #5
 80024c0:	f803 2c74 	strb.w	r2, [r3, #-116]
					  osMessagePut(StringRS485Handle, (uint32_t)send_to_rs485, osWaitForever);
 80024c4:	4b78      	ldr	r3, [pc, #480]	@ (80026a8 <RX_Task+0x680>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f507 7196 	add.w	r1, r7, #300	@ 0x12c
 80024cc:	f04f 32ff 	mov.w	r2, #4294967295
 80024d0:	4618      	mov	r0, r3
 80024d2:	f004 f895 	bl	8006600 <osMessagePut>
					  osMessagePut(StringPrintHandle, (uint32_t)Res, osWaitForever);
 80024d6:	4b75      	ldr	r3, [pc, #468]	@ (80026ac <RX_Task+0x684>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f8d7 119c 	ldr.w	r1, [r7, #412]	@ 0x19c
 80024de:	f04f 32ff 	mov.w	r2, #4294967295
 80024e2:	4618      	mov	r0, r3
 80024e4:	f004 f88c 	bl	8006600 <osMessagePut>
				  if(result.Code == 1)
 80024e8:	e0c8      	b.n	800267c <RX_Task+0x654>
				  }
				  else if(result.Code == 5)
 80024ea:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80024ee:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80024f2:	789b      	ldrb	r3, [r3, #2]
 80024f4:	2b05      	cmp	r3, #5
 80024f6:	d159      	bne.n	80025ac <RX_Task+0x584>
				  {
					  for(int i = 0; i < 5; i++)
 80024f8:	2300      	movs	r3, #0
 80024fa:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 80024fe:	e025      	b.n	800254c <RX_Task+0x524>
					  {
						  for (int j = 0; j < 2; j++)
 8002500:	2300      	movs	r3, #0
 8002502:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8002506:	e018      	b.n	800253a <RX_Task+0x512>
						  {
							  ALL_TASK[i][j] = DF_ALL_TASK[i][j];
 8002508:	4a69      	ldr	r2, [pc, #420]	@ (80026b0 <RX_Task+0x688>)
 800250a:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 800250e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002512:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	441a      	add	r2, r3
 800251a:	4961      	ldr	r1, [pc, #388]	@ (80026a0 <RX_Task+0x678>)
 800251c:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8002520:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8002524:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	440b      	add	r3, r1
 800252c:	6812      	ldr	r2, [r2, #0]
 800252e:	601a      	str	r2, [r3, #0]
						  for (int j = 0; j < 2; j++)
 8002530:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002534:	3301      	adds	r3, #1
 8002536:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 800253a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800253e:	2b01      	cmp	r3, #1
 8002540:	dde2      	ble.n	8002508 <RX_Task+0x4e0>
					  for(int i = 0; i < 5; i++)
 8002542:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8002546:	3301      	adds	r3, #1
 8002548:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 800254c:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8002550:	2b04      	cmp	r3, #4
 8002552:	ddd5      	ble.n	8002500 <RX_Task+0x4d8>
						  }
					  }
					  memset((void*)send_to_rs485,0,sizeof(send_to_rs485));
 8002554:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8002558:	2232      	movs	r2, #50	@ 0x32
 800255a:	2100      	movs	r1, #0
 800255c:	4618      	mov	r0, r3
 800255e:	f007 fba0 	bl	8009ca2 <memset>
					  sprintf(send_to_rs485, indicate_R_C_D_T);
 8002562:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8002566:	4953      	ldr	r1, [pc, #332]	@ (80026b4 <RX_Task+0x68c>)
 8002568:	4618      	mov	r0, r3
 800256a:	f007 faf1 	bl	8009b50 <siprintf>
					  send_to_rs485[strlen(send_to_rs485)+1] = RESPONSES(CODE_RESP);
 800256e:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8002572:	4618      	mov	r0, r3
 8002574:	f7fd fdec 	bl	8000150 <strlen>
 8002578:	4603      	mov	r3, r0
 800257a:	3301      	adds	r3, #1
 800257c:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002580:	443b      	add	r3, r7
 8002582:	2205      	movs	r2, #5
 8002584:	f803 2c74 	strb.w	r2, [r3, #-116]
					  osMessagePut(StringRS485Handle, (uint32_t)send_to_rs485, osWaitForever);
 8002588:	4b47      	ldr	r3, [pc, #284]	@ (80026a8 <RX_Task+0x680>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f507 7196 	add.w	r1, r7, #300	@ 0x12c
 8002590:	f04f 32ff 	mov.w	r2, #4294967295
 8002594:	4618      	mov	r0, r3
 8002596:	f004 f833 	bl	8006600 <osMessagePut>
					  osMessagePut(StringPrintHandle, (uint32_t)indicate_R_C_D_T, osWaitForever);
 800259a:	4b44      	ldr	r3, [pc, #272]	@ (80026ac <RX_Task+0x684>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4945      	ldr	r1, [pc, #276]	@ (80026b4 <RX_Task+0x68c>)
 80025a0:	f04f 32ff 	mov.w	r2, #4294967295
 80025a4:	4618      	mov	r0, r3
 80025a6:	f004 f82b 	bl	8006600 <osMessagePut>
				  if(result.Code == 1)
 80025aa:	e067      	b.n	800267c <RX_Task+0x654>
				  }
				  else
				  {
					  memset((void*)send_to_rs485,0,sizeof(send_to_rs485));
 80025ac:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80025b0:	2232      	movs	r2, #50	@ 0x32
 80025b2:	2100      	movs	r1, #0
 80025b4:	4618      	mov	r0, r3
 80025b6:	f007 fb74 	bl	8009ca2 <memset>
					  sprintf(send_to_rs485, "Invalid Code");
 80025ba:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80025be:	493e      	ldr	r1, [pc, #248]	@ (80026b8 <RX_Task+0x690>)
 80025c0:	4618      	mov	r0, r3
 80025c2:	f007 fac5 	bl	8009b50 <siprintf>
					  send_to_rs485[strlen(send_to_rs485)+1] = RESPONSES(CODE_RESP);
 80025c6:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fd fdc0 	bl	8000150 <strlen>
 80025d0:	4603      	mov	r3, r0
 80025d2:	3301      	adds	r3, #1
 80025d4:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80025d8:	443b      	add	r3, r7
 80025da:	2205      	movs	r2, #5
 80025dc:	f803 2c74 	strb.w	r2, [r3, #-116]
					  osMessagePut(StringRS485Handle, (uint32_t)send_to_rs485, osWaitForever);
 80025e0:	4b31      	ldr	r3, [pc, #196]	@ (80026a8 <RX_Task+0x680>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f507 7196 	add.w	r1, r7, #300	@ 0x12c
 80025e8:	f04f 32ff 	mov.w	r2, #4294967295
 80025ec:	4618      	mov	r0, r3
 80025ee:	f004 f807 	bl	8006600 <osMessagePut>
					  osMessagePut(StringPrintHandle, (uint32_t)send_to_rs485, osWaitForever);
 80025f2:	4b2e      	ldr	r3, [pc, #184]	@ (80026ac <RX_Task+0x684>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f507 7196 	add.w	r1, r7, #300	@ 0x12c
 80025fa:	f04f 32ff 	mov.w	r2, #4294967295
 80025fe:	4618      	mov	r0, r3
 8002600:	f003 fffe 	bl	8006600 <osMessagePut>
				  if(result.Code == 1)
 8002604:	e03a      	b.n	800267c <RX_Task+0x654>
				  }
			  }
			  else if(check_crc(&result) != result.Crc)
 8002606:	f107 030c 	add.w	r3, r7, #12
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff f952 	bl	80018b4 <check_crc>
 8002610:	4603      	mov	r3, r0
 8002612:	461a      	mov	r2, r3
 8002614:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002618:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800261c:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8002620:	429a      	cmp	r2, r3
 8002622:	d02b      	beq.n	800267c <RX_Task+0x654>
			  {
				  result.Data[result.Len] = '\0';
 8002624:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002628:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800262c:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8002630:	461a      	mov	r2, r3
 8002632:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002636:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800263a:	4413      	add	r3, r2
 800263c:	2200      	movs	r2, #0
 800263e:	70da      	strb	r2, [r3, #3]
				  memset((void*)send_to_rs485,0,sizeof(send_to_rs485));
 8002640:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8002644:	2232      	movs	r2, #50	@ 0x32
 8002646:	2100      	movs	r1, #0
 8002648:	4618      	mov	r0, r3
 800264a:	f007 fb2a 	bl	8009ca2 <memset>
				  sprintf(send_to_rs485, "Error Crc");
 800264e:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8002652:	491a      	ldr	r1, [pc, #104]	@ (80026bc <RX_Task+0x694>)
 8002654:	4618      	mov	r0, r3
 8002656:	f007 fa7b 	bl	8009b50 <siprintf>
				  osMessagePut(StringRS485Handle, (uint32_t)send_to_rs485, osWaitForever);
 800265a:	4b13      	ldr	r3, [pc, #76]	@ (80026a8 <RX_Task+0x680>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f507 7196 	add.w	r1, r7, #300	@ 0x12c
 8002662:	f04f 32ff 	mov.w	r2, #4294967295
 8002666:	4618      	mov	r0, r3
 8002668:	f003 ffca 	bl	8006600 <osMessagePut>
				  osMessagePut(StringPrintHandle, (uint32_t)indicate_E, osWaitForever);
 800266c:	4b0f      	ldr	r3, [pc, #60]	@ (80026ac <RX_Task+0x684>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4913      	ldr	r1, [pc, #76]	@ (80026c0 <RX_Task+0x698>)
 8002672:	f04f 32ff 	mov.w	r2, #4294967295
 8002676:	4618      	mov	r0, r3
 8002678:	f003 ffc2 	bl	8006600 <osMessagePut>
			  }
		  }
		  osDelay(20);
 800267c:	2014      	movs	r0, #20
 800267e:	f003 fee6 	bl	800644e <osDelay>
		  UserDelayUntil(&GetTick,RX_PM[T_INDEX]);
 8002682:	4b10      	ldr	r3, [pc, #64]	@ (80026c4 <RX_Task+0x69c>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	461a      	mov	r2, r3
 8002688:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800268c:	4611      	mov	r1, r2
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff fa8a 	bl	8001ba8 <UserDelayUntil>
		memset((void*)read_to_rs485,0,sizeof(read_to_rs485));
 8002694:	e4d3      	b.n	800203e <RX_Task+0x16>
 8002696:	bf00      	nop
 8002698:	200000f4 	.word	0x200000f4
 800269c:	0800c868 	.word	0x0800c868
 80026a0:	2000007c 	.word	0x2000007c
 80026a4:	20000104 	.word	0x20000104
 80026a8:	20000698 	.word	0x20000698
 80026ac:	20000694 	.word	0x20000694
 80026b0:	20000094 	.word	0x20000094
 80026b4:	20000110 	.word	0x20000110
 80026b8:	0800c874 	.word	0x0800c874
 80026bc:	0800c884 	.word	0x0800c884
 80026c0:	200000e8 	.word	0x200000e8
 80026c4:	20000034 	.word	0x20000034

080026c8 <LCD_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LCD_Task */
void LCD_Task(void const * argument)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b08c      	sub	sp, #48	@ 0x30
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LCD_Task */
  /* Infinite loop */
	  osEvent event;
	  char LastMessage[20] = "Init LCD";
 80026d0:	4a2f      	ldr	r2, [pc, #188]	@ (8002790 <LCD_Task+0xc8>)
 80026d2:	f107 030c 	add.w	r3, r7, #12
 80026d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80026d8:	c303      	stmia	r3!, {r0, r1}
 80026da:	701a      	strb	r2, [r3, #0]
 80026dc:	f107 0315 	add.w	r3, r7, #21
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	f8c3 2007 	str.w	r2, [r3, #7]
	  char *NewMessage = NULL;
 80026ea:	2300      	movs	r3, #0
 80026ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  uint32_t GetTick = 0;
 80026ee:	2300      	movs	r3, #0
 80026f0:	60bb      	str	r3, [r7, #8]
  for(;;)
  {
	  event = osMessageGet(StringPrintHandle, osWaitForever);
 80026f2:	4b28      	ldr	r3, [pc, #160]	@ (8002794 <LCD_Task+0xcc>)
 80026f4:	6819      	ldr	r1, [r3, #0]
 80026f6:	f107 0320 	add.w	r3, r7, #32
 80026fa:	f04f 32ff 	mov.w	r2, #4294967295
 80026fe:	4618      	mov	r0, r3
 8002700:	f003 ffbe 	bl	8006680 <osMessageGet>
	  if (event.status == osEventMessage)
 8002704:	6a3b      	ldr	r3, [r7, #32]
 8002706:	2b10      	cmp	r3, #16
 8002708:	d138      	bne.n	800277c <LCD_Task+0xb4>
	  {
		  NewMessage = (char*)event.value.v;
 800270a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		  if (osMutexWait(I2C_BusHandle, osWaitForever) == osOK)
 800270e:	4b22      	ldr	r3, [pc, #136]	@ (8002798 <LCD_Task+0xd0>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f04f 31ff 	mov.w	r1, #4294967295
 8002716:	4618      	mov	r0, r3
 8002718:	f003 fec6 	bl	80064a8 <osMutexWait>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d116      	bne.n	8002750 <LCD_Task+0x88>
		  {
			HD44780_Clear();
 8002722:	f7fe fe57 	bl	80013d4 <HD44780_Clear>
	        HD44780_SetCursor(0,0);
 8002726:	2100      	movs	r1, #0
 8002728:	2000      	movs	r0, #0
 800272a:	f7fe fe69 	bl	8001400 <HD44780_SetCursor>
			HD44780_PrintStr(LastMessage);
 800272e:	f107 030c 	add.w	r3, r7, #12
 8002732:	4618      	mov	r0, r3
 8002734:	f7fe fed5 	bl	80014e2 <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 8002738:	2101      	movs	r1, #1
 800273a:	2000      	movs	r0, #0
 800273c:	f7fe fe60 	bl	8001400 <HD44780_SetCursor>
			HD44780_PrintStr(NewMessage);
 8002740:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002742:	f7fe fece 	bl	80014e2 <HD44780_PrintStr>
	        osMutexRelease(I2C_BusHandle);
 8002746:	4b14      	ldr	r3, [pc, #80]	@ (8002798 <LCD_Task+0xd0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f003 fefa 	bl	8006544 <osMutexRelease>
		  }
		  if(NewMessage != NULL)
 8002750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002752:	2b00      	cmp	r3, #0
 8002754:	d012      	beq.n	800277c <LCD_Task+0xb4>
		  {
			  memcpy(LastMessage, NewMessage, strlen(NewMessage));
 8002756:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002758:	f7fd fcfa 	bl	8000150 <strlen>
 800275c:	4602      	mov	r2, r0
 800275e:	f107 030c 	add.w	r3, r7, #12
 8002762:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002764:	4618      	mov	r0, r3
 8002766:	f007 fb92 	bl	8009e8e <memcpy>
			  LastMessage[strlen(NewMessage)] = '\0';
 800276a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800276c:	f7fd fcf0 	bl	8000150 <strlen>
 8002770:	4603      	mov	r3, r0
 8002772:	3330      	adds	r3, #48	@ 0x30
 8002774:	443b      	add	r3, r7
 8002776:	2200      	movs	r2, #0
 8002778:	f803 2c24 	strb.w	r2, [r3, #-36]
		  }
	  }
	  UserDelayUntil(&GetTick,LCD_PM[T_INDEX]);
 800277c:	4b07      	ldr	r3, [pc, #28]	@ (800279c <LCD_Task+0xd4>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	461a      	mov	r2, r3
 8002782:	f107 0308 	add.w	r3, r7, #8
 8002786:	4611      	mov	r1, r2
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff fa0d 	bl	8001ba8 <UserDelayUntil>
	  event = osMessageGet(StringPrintHandle, osWaitForever);
 800278e:	e7b0      	b.n	80026f2 <LCD_Task+0x2a>
 8002790:	0800c890 	.word	0x0800c890
 8002794:	20000694 	.word	0x20000694
 8002798:	2000069c 	.word	0x2000069c
 800279c:	20000070 	.word	0x20000070

080027a0 <Temp_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Temp_Task */
void Temp_Task(void const * argument)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b088      	sub	sp, #32
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Temp_Task */
  /* Infinite loop */
//	float temperature;
	uint32_t GetTick = 0;
 80027a8:	2300      	movs	r3, #0
 80027aa:	61fb      	str	r3, [r7, #28]
  for(;;)
  {
	    if (osMutexWait(I2C_BusHandle, osWaitForever) == osOK)
 80027ac:	4b28      	ldr	r3, [pc, #160]	@ (8002850 <Temp_Task+0xb0>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f04f 31ff 	mov.w	r1, #4294967295
 80027b4:	4618      	mov	r0, r3
 80027b6:	f003 fe77 	bl	80064a8 <osMutexWait>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d109      	bne.n	80027d4 <Temp_Task+0x34>
	    {
	    	temperature = BMP180_GetTemperature();
 80027c0:	f7fe fc06 	bl	8000fd0 <BMP180_GetTemperature>
 80027c4:	4603      	mov	r3, r0
 80027c6:	4a23      	ldr	r2, [pc, #140]	@ (8002854 <Temp_Task+0xb4>)
 80027c8:	6013      	str	r3, [r2, #0]
	        osMutexRelease(I2C_BusHandle);
 80027ca:	4b21      	ldr	r3, [pc, #132]	@ (8002850 <Temp_Task+0xb0>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f003 feb8 	bl	8006544 <osMutexRelease>
	    }
	    char sen_to_lcd[20] = "";
 80027d4:	2300      	movs	r3, #0
 80027d6:	60bb      	str	r3, [r7, #8]
 80027d8:	f107 030c 	add.w	r3, r7, #12
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	609a      	str	r2, [r3, #8]
 80027e4:	60da      	str	r2, [r3, #12]
	    sprintf(sen_to_lcd,"%0.1fC", temperature);
 80027e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002854 <Temp_Task+0xb4>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7fd fe1c 	bl	8000428 <__aeabi_f2d>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	f107 0008 	add.w	r0, r7, #8
 80027f8:	4917      	ldr	r1, [pc, #92]	@ (8002858 <Temp_Task+0xb8>)
 80027fa:	f007 f9a9 	bl	8009b50 <siprintf>
	    osMessagePut(StringPrintHandle, (uint32_t)sen_to_lcd, osWaitForever);
 80027fe:	4b17      	ldr	r3, [pc, #92]	@ (800285c <Temp_Task+0xbc>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f107 0108 	add.w	r1, r7, #8
 8002806:	f04f 32ff 	mov.w	r2, #4294967295
 800280a:	4618      	mov	r0, r3
 800280c:	f003 fef8 	bl	8006600 <osMessagePut>
	    sen_to_lcd[strlen(sen_to_lcd)+1] = UPGRADE(CODE_TEMP);
 8002810:	f107 0308 	add.w	r3, r7, #8
 8002814:	4618      	mov	r0, r3
 8002816:	f7fd fc9b 	bl	8000150 <strlen>
 800281a:	4603      	mov	r3, r0
 800281c:	3301      	adds	r3, #1
 800281e:	3320      	adds	r3, #32
 8002820:	443b      	add	r3, r7
 8002822:	2280      	movs	r2, #128	@ 0x80
 8002824:	f803 2c18 	strb.w	r2, [r3, #-24]
	    osMessagePut(StringRS485Handle, (uint32_t)sen_to_lcd, osWaitForever);
 8002828:	4b0d      	ldr	r3, [pc, #52]	@ (8002860 <Temp_Task+0xc0>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f107 0108 	add.w	r1, r7, #8
 8002830:	f04f 32ff 	mov.w	r2, #4294967295
 8002834:	4618      	mov	r0, r3
 8002836:	f003 fee3 	bl	8006600 <osMessagePut>
//	    osDelay(5000);
	    UserDelayUntil(&GetTick,Temp_PM[T_INDEX]);
 800283a:	4b0a      	ldr	r3, [pc, #40]	@ (8002864 <Temp_Task+0xc4>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	461a      	mov	r2, r3
 8002840:	f107 031c 	add.w	r3, r7, #28
 8002844:	4611      	mov	r1, r2
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff f9ae 	bl	8001ba8 <UserDelayUntil>
  {
 800284c:	e7ae      	b.n	80027ac <Temp_Task+0xc>
 800284e:	bf00      	nop
 8002850:	2000069c 	.word	0x2000069c
 8002854:	200006a0 	.word	0x200006a0
 8002858:	0800c8a4 	.word	0x0800c8a4
 800285c:	20000694 	.word	0x20000694
 8002860:	20000698 	.word	0x20000698
 8002864:	2000004c 	.word	0x2000004c

08002868 <Press_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Press_Task */
void Press_Task(void const * argument)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b088      	sub	sp, #32
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Press_Task */
  /* Infinite loop */
//	int32_t pressure;
	osDelay(2500);
 8002870:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8002874:	f003 fdeb 	bl	800644e <osDelay>
	uint32_t GetTick = 0;
 8002878:	2300      	movs	r3, #0
 800287a:	61fb      	str	r3, [r7, #28]
  for(;;)
  {
	    if (osMutexWait(I2C_BusHandle, osWaitForever) == osOK)
 800287c:	4b25      	ldr	r3, [pc, #148]	@ (8002914 <Press_Task+0xac>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f04f 31ff 	mov.w	r1, #4294967295
 8002884:	4618      	mov	r0, r3
 8002886:	f003 fe0f 	bl	80064a8 <osMutexWait>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d109      	bne.n	80028a4 <Press_Task+0x3c>
	    {
	    	pressure = BMP180_GetPressure();
 8002890:	f7fe fbba 	bl	8001008 <BMP180_GetPressure>
 8002894:	4603      	mov	r3, r0
 8002896:	4a20      	ldr	r2, [pc, #128]	@ (8002918 <Press_Task+0xb0>)
 8002898:	6013      	str	r3, [r2, #0]
	        osMutexRelease(I2C_BusHandle);
 800289a:	4b1e      	ldr	r3, [pc, #120]	@ (8002914 <Press_Task+0xac>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f003 fe50 	bl	8006544 <osMutexRelease>
	    }
	    osDelay(Pres_PM[T_INDEX]/2);
 80028a4:	4b1d      	ldr	r3, [pc, #116]	@ (800291c <Press_Task+0xb4>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	0fda      	lsrs	r2, r3, #31
 80028aa:	4413      	add	r3, r2
 80028ac:	105b      	asrs	r3, r3, #1
 80028ae:	4618      	mov	r0, r3
 80028b0:	f003 fdcd 	bl	800644e <osDelay>
	    char sen_to_lcd[20];
	    sprintf(sen_to_lcd,"%dPa", (int)pressure);
 80028b4:	4b18      	ldr	r3, [pc, #96]	@ (8002918 <Press_Task+0xb0>)
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	f107 0308 	add.w	r3, r7, #8
 80028bc:	4918      	ldr	r1, [pc, #96]	@ (8002920 <Press_Task+0xb8>)
 80028be:	4618      	mov	r0, r3
 80028c0:	f007 f946 	bl	8009b50 <siprintf>
	    osMessagePut(StringPrintHandle, (uint32_t)sen_to_lcd, osWaitForever);
 80028c4:	4b17      	ldr	r3, [pc, #92]	@ (8002924 <Press_Task+0xbc>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f107 0108 	add.w	r1, r7, #8
 80028cc:	f04f 32ff 	mov.w	r2, #4294967295
 80028d0:	4618      	mov	r0, r3
 80028d2:	f003 fe95 	bl	8006600 <osMessagePut>
	    sen_to_lcd[strlen(sen_to_lcd)+1] = UPGRADE(CODE_PRES);
 80028d6:	f107 0308 	add.w	r3, r7, #8
 80028da:	4618      	mov	r0, r3
 80028dc:	f7fd fc38 	bl	8000150 <strlen>
 80028e0:	4603      	mov	r3, r0
 80028e2:	3301      	adds	r3, #1
 80028e4:	3320      	adds	r3, #32
 80028e6:	443b      	add	r3, r7
 80028e8:	2281      	movs	r2, #129	@ 0x81
 80028ea:	f803 2c18 	strb.w	r2, [r3, #-24]
	    osMessagePut(StringRS485Handle, (uint32_t)sen_to_lcd, osWaitForever);
 80028ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002928 <Press_Task+0xc0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f107 0108 	add.w	r1, r7, #8
 80028f6:	f04f 32ff 	mov.w	r2, #4294967295
 80028fa:	4618      	mov	r0, r3
 80028fc:	f003 fe80 	bl	8006600 <osMessagePut>
	    UserDelayUntil(&GetTick,Pres_PM[T_INDEX]);
 8002900:	4b06      	ldr	r3, [pc, #24]	@ (800291c <Press_Task+0xb4>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	461a      	mov	r2, r3
 8002906:	f107 031c 	add.w	r3, r7, #28
 800290a:	4611      	mov	r1, r2
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff f94b 	bl	8001ba8 <UserDelayUntil>
  {
 8002912:	e7b3      	b.n	800287c <Press_Task+0x14>
 8002914:	2000069c 	.word	0x2000069c
 8002918:	200006a4 	.word	0x200006a4
 800291c:	20000058 	.word	0x20000058
 8002920:	0800c844 	.word	0x0800c844
 8002924:	20000694 	.word	0x20000694
 8002928:	20000698 	.word	0x20000698

0800292c <Key_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Key_Task */
void Key_Task(void const * argument)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b090      	sub	sp, #64	@ 0x40
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Key_Task */
  /* Infinite loop */
	char key_board[20];
	uint8_t len_key_board = 0;
 8002934:	2300      	movs	r3, #0
 8002936:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint16_t last_touch = 0, new_touch = 0;
 800293a:	2300      	movs	r3, #0
 800293c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800293e:	2300      	movs	r3, #0
 8002940:	877b      	strh	r3, [r7, #58]	@ 0x3a
	uint32_t GetTick = 0;
 8002942:	2300      	movs	r3, #0
 8002944:	623b      	str	r3, [r7, #32]
  for(;;)
  {
		if (osMutexWait(I2C_BusHandle, osWaitForever) == osOK)
 8002946:	4b64      	ldr	r3, [pc, #400]	@ (8002ad8 <Key_Task+0x1ac>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f04f 31ff 	mov.w	r1, #4294967295
 800294e:	4618      	mov	r0, r3
 8002950:	f003 fdaa 	bl	80064a8 <osMutexWait>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d108      	bne.n	800296c <Key_Task+0x40>
		{
			new_touch = touched();
 800295a:	f7fe f9c3 	bl	8000ce4 <touched>
 800295e:	4603      	mov	r3, r0
 8002960:	877b      	strh	r3, [r7, #58]	@ 0x3a
			osMutexRelease(I2C_BusHandle);
 8002962:	4b5d      	ldr	r3, [pc, #372]	@ (8002ad8 <Key_Task+0x1ac>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f003 fdec 	bl	8006544 <osMutexRelease>
		}
	  if(new_touch != last_touch)
 800296c:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800296e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002970:	429a      	cmp	r2, r3
 8002972:	f000 80a1 	beq.w	8002ab8 <Key_Task+0x18c>
	  {
		  if(new_touch == 0)
 8002976:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002978:	2b00      	cmp	r3, #0
 800297a:	f040 809d 	bne.w	8002ab8 <Key_Task+0x18c>
		  {
			  char C = convert_to_char(last_touch);
 800297e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff f865 	bl	8001a50 <convert_to_char>
 8002986:	4603      	mov	r3, r0
 8002988:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
			  if(C != '\0' && C != '*' && C != '#')
 800298c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002990:	2b00      	cmp	r3, #0
 8002992:	d04a      	beq.n	8002a2a <Key_Task+0xfe>
 8002994:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002998:	2b2a      	cmp	r3, #42	@ 0x2a
 800299a:	d046      	beq.n	8002a2a <Key_Task+0xfe>
 800299c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80029a0:	2b23      	cmp	r3, #35	@ 0x23
 80029a2:	d042      	beq.n	8002a2a <Key_Task+0xfe>
			  {
				  if(len_key_board < 16)
 80029a4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80029a8:	2b0f      	cmp	r3, #15
 80029aa:	d812      	bhi.n	80029d2 <Key_Task+0xa6>
				  {
					  key_board[len_key_board++] = C;
 80029ac:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80029b0:	1c5a      	adds	r2, r3, #1
 80029b2:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80029b6:	3340      	adds	r3, #64	@ 0x40
 80029b8:	443b      	add	r3, r7
 80029ba:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80029be:	f803 2c1c 	strb.w	r2, [r3, #-28]
					  key_board[len_key_board] = '\0';
 80029c2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80029c6:	3340      	adds	r3, #64	@ 0x40
 80029c8:	443b      	add	r3, r7
 80029ca:	2200      	movs	r2, #0
 80029cc:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80029d0:	e018      	b.n	8002a04 <Key_Task+0xd8>
				  }
				  else
				  {
					  memmove(key_board,&key_board[1],sizeof(key_board) - 1);
 80029d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029d6:	1c59      	adds	r1, r3, #1
 80029d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029dc:	2213      	movs	r2, #19
 80029de:	4618      	mov	r0, r3
 80029e0:	f007 f945 	bl	8009c6e <memmove>
					  key_board[len_key_board - 1] = C;
 80029e4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80029e8:	3b01      	subs	r3, #1
 80029ea:	3340      	adds	r3, #64	@ 0x40
 80029ec:	443b      	add	r3, r7
 80029ee:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80029f2:	f803 2c1c 	strb.w	r2, [r3, #-28]
					  key_board[len_key_board] = '\0';
 80029f6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80029fa:	3340      	adds	r3, #64	@ 0x40
 80029fc:	443b      	add	r3, r7
 80029fe:	2200      	movs	r2, #0
 8002a00:	f803 2c1c 	strb.w	r2, [r3, #-28]
				  }
				  char sen_to_lcd[20];
				  sprintf(sen_to_lcd, "Detect Touch %d",count_touch);
 8002a04:	4b35      	ldr	r3, [pc, #212]	@ (8002adc <Key_Task+0x1b0>)
 8002a06:	881b      	ldrh	r3, [r3, #0]
 8002a08:	461a      	mov	r2, r3
 8002a0a:	f107 030c 	add.w	r3, r7, #12
 8002a0e:	4934      	ldr	r1, [pc, #208]	@ (8002ae0 <Key_Task+0x1b4>)
 8002a10:	4618      	mov	r0, r3
 8002a12:	f007 f89d 	bl	8009b50 <siprintf>
				  osMessagePut(StringPrintHandle, (uint32_t)sen_to_lcd, osWaitForever);
 8002a16:	4b33      	ldr	r3, [pc, #204]	@ (8002ae4 <Key_Task+0x1b8>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f107 010c 	add.w	r1, r7, #12
 8002a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8002a22:	4618      	mov	r0, r3
 8002a24:	f003 fdec 	bl	8006600 <osMessagePut>
			  {
 8002a28:	e046      	b.n	8002ab8 <Key_Task+0x18c>
			  }
			  else if(C == '#' && len_key_board > 0)
 8002a2a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002a2e:	2b23      	cmp	r3, #35	@ 0x23
 8002a30:	d125      	bne.n	8002a7e <Key_Task+0x152>
 8002a32:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d021      	beq.n	8002a7e <Key_Task+0x152>
			  {
//				  osMessagePut(StringPrintHandle, (uint32_t)indicate_1, osWaitForever);
				  osMessagePut(StringPrintHandle, (uint32_t)key_board, osWaitForever);
 8002a3a:	4b2a      	ldr	r3, [pc, #168]	@ (8002ae4 <Key_Task+0x1b8>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8002a42:	f04f 32ff 	mov.w	r2, #4294967295
 8002a46:	4618      	mov	r0, r3
 8002a48:	f003 fdda 	bl	8006600 <osMessagePut>
				  key_board[strlen(key_board)+1] = UPGRADE(CODE_KEY);
 8002a4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7fd fb7d 	bl	8000150 <strlen>
 8002a56:	4603      	mov	r3, r0
 8002a58:	3301      	adds	r3, #1
 8002a5a:	3340      	adds	r3, #64	@ 0x40
 8002a5c:	443b      	add	r3, r7
 8002a5e:	2282      	movs	r2, #130	@ 0x82
 8002a60:	f803 2c1c 	strb.w	r2, [r3, #-28]
				  osMessagePut(StringRS485Handle, (uint32_t)key_board, osWaitForever);
 8002a64:	4b20      	ldr	r3, [pc, #128]	@ (8002ae8 <Key_Task+0x1bc>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8002a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a70:	4618      	mov	r0, r3
 8002a72:	f003 fdc5 	bl	8006600 <osMessagePut>
				  len_key_board = 0;
 8002a76:	2300      	movs	r3, #0
 8002a78:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8002a7c:	e01c      	b.n	8002ab8 <Key_Task+0x18c>
			  }
			  else if(C == '*' && len_key_board > 0)
 8002a7e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002a82:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a84:	d118      	bne.n	8002ab8 <Key_Task+0x18c>
 8002a86:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d014      	beq.n	8002ab8 <Key_Task+0x18c>
			  {
				  key_board[--len_key_board] = '\0';
 8002a8e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002a92:	3b01      	subs	r3, #1
 8002a94:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8002a98:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002a9c:	3340      	adds	r3, #64	@ 0x40
 8002a9e:	443b      	add	r3, r7
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f803 2c1c 	strb.w	r2, [r3, #-28]
				  osMessagePut(StringPrintHandle, (uint32_t)key_board, osWaitForever);
 8002aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8002ae4 <Key_Task+0x1b8>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8002aae:	f04f 32ff 	mov.w	r2, #4294967295
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f003 fda4 	bl	8006600 <osMessagePut>
			  }
		  }
	  }
	  last_touch = new_touch;
 8002ab8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002aba:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	  osDelay(20);
 8002abc:	2014      	movs	r0, #20
 8002abe:	f003 fcc6 	bl	800644e <osDelay>
	  UserDelayUntil(&GetTick,KeyB_PM[T_INDEX]);
 8002ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8002aec <Key_Task+0x1c0>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	f107 0320 	add.w	r3, r7, #32
 8002acc:	4611      	mov	r1, r2
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff f86a 	bl	8001ba8 <UserDelayUntil>
		if (osMutexWait(I2C_BusHandle, osWaitForever) == osOK)
 8002ad4:	e737      	b.n	8002946 <Key_Task+0x1a>
 8002ad6:	bf00      	nop
 8002ad8:	2000069c 	.word	0x2000069c
 8002adc:	200006a8 	.word	0x200006a8
 8002ae0:	0800c8ac 	.word	0x0800c8ac
 8002ae4:	20000694 	.word	0x20000694
 8002ae8:	20000698 	.word	0x20000698
 8002aec:	20000064 	.word	0x20000064

08002af0 <TX_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TX_Task */
void TX_Task(void const * argument)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b094      	sub	sp, #80	@ 0x50
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TX_Task */
  /* Infinite loop */
	char *receivedMessageTX = NULL;
 8002af8:	2300      	movs	r3, #0
 8002afa:	64fb      	str	r3, [r7, #76]	@ 0x4c
	char send_to_bus_rs485[50];
	osEvent event;
	uint32_t GetTick = 0;
 8002afc:	2300      	movs	r3, #0
 8002afe:	60bb      	str	r3, [r7, #8]
  for(;;)
  {
	  event = osMessageGet(StringRS485Handle, osWaitForever);
 8002b00:	4b29      	ldr	r3, [pc, #164]	@ (8002ba8 <TX_Task+0xb8>)
 8002b02:	6819      	ldr	r1, [r3, #0]
 8002b04:	f107 030c 	add.w	r3, r7, #12
 8002b08:	f04f 32ff 	mov.w	r2, #4294967295
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f003 fdb7 	bl	8006680 <osMessageGet>
	  if (event.status == osEventMessage) {
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2b10      	cmp	r3, #16
 8002b16:	d13a      	bne.n	8002b8e <TX_Task+0x9e>
		  receivedMessageTX = (char*)event.value.v;
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		  memset(send_to_bus_rs485,0,sizeof(send_to_bus_rs485));
 8002b1c:	f107 0318 	add.w	r3, r7, #24
 8002b20:	2232      	movs	r2, #50	@ 0x32
 8002b22:	2100      	movs	r1, #0
 8002b24:	4618      	mov	r0, r3
 8002b26:	f007 f8bc 	bl	8009ca2 <memset>
		  uint8_t Code = receivedMessageTX[strlen(receivedMessageTX)+1];
 8002b2a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002b2c:	f7fd fb10 	bl	8000150 <strlen>
 8002b30:	4603      	mov	r3, r0
 8002b32:	3301      	adds	r3, #1
 8002b34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b36:	4413      	add	r3, r2
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
		  memcpy(send_to_bus_rs485, receivedMessageTX, strlen(receivedMessageTX));
 8002b3e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002b40:	f7fd fb06 	bl	8000150 <strlen>
 8002b44:	4602      	mov	r2, r0
 8002b46:	f107 0318 	add.w	r3, r7, #24
 8002b4a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f007 f99e 	bl	8009e8e <memcpy>
		  gen_data_send_rs485(Code,send_to_bus_rs485);
 8002b52:	f107 0218 	add.w	r2, r7, #24
 8002b56:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8002b5a:	4611      	mov	r1, r2
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7fe ffab 	bl	8001ab8 <gen_data_send_rs485>
		  if(HAL_UART_Transmit(&huart1, (uint8_t *)send_to_bus_rs485, strlen(send_to_bus_rs485) , 1000) == HAL_OK)
 8002b62:	f107 0318 	add.w	r3, r7, #24
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fd faf2 	bl	8000150 <strlen>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	f107 0118 	add.w	r1, r7, #24
 8002b74:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b78:	480c      	ldr	r0, [pc, #48]	@ (8002bac <TX_Task+0xbc>)
 8002b7a:	f003 f981 	bl	8005e80 <HAL_UART_Transmit>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d104      	bne.n	8002b8e <TX_Task+0x9e>
		  {
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002b84:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002b88:	4809      	ldr	r0, [pc, #36]	@ (8002bb0 <TX_Task+0xc0>)
 8002b8a:	f000 fd59 	bl	8003640 <HAL_GPIO_TogglePin>
		  }
	  }
	  osDelay(20);
 8002b8e:	2014      	movs	r0, #20
 8002b90:	f003 fc5d 	bl	800644e <osDelay>
	  UserDelayUntil(&GetTick,TX_PM[T_INDEX]);
 8002b94:	4b07      	ldr	r3, [pc, #28]	@ (8002bb4 <TX_Task+0xc4>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	461a      	mov	r2, r3
 8002b9a:	f107 0308 	add.w	r3, r7, #8
 8002b9e:	4611      	mov	r1, r2
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff f801 	bl	8001ba8 <UserDelayUntil>
	  event = osMessageGet(StringRS485Handle, osWaitForever);
 8002ba6:	e7ab      	b.n	8002b00 <TX_Task+0x10>
 8002ba8:	20000698 	.word	0x20000698
 8002bac:	20000634 	.word	0x20000634
 8002bb0:	40011000 	.word	0x40011000
 8002bb4:	20000040 	.word	0x20000040

08002bb8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a04      	ldr	r2, [pc, #16]	@ (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d101      	bne.n	8002bce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002bca:	f000 fa7d 	bl	80030c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002bce:	bf00      	nop
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40000800 	.word	0x40000800

08002bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002be0:	b672      	cpsid	i
}
 8002be2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002be4:	bf00      	nop
 8002be6:	e7fd      	b.n	8002be4 <Error_Handler+0x8>

08002be8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002bee:	4b18      	ldr	r3, [pc, #96]	@ (8002c50 <HAL_MspInit+0x68>)
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	4a17      	ldr	r2, [pc, #92]	@ (8002c50 <HAL_MspInit+0x68>)
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	6193      	str	r3, [r2, #24]
 8002bfa:	4b15      	ldr	r3, [pc, #84]	@ (8002c50 <HAL_MspInit+0x68>)
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	60bb      	str	r3, [r7, #8]
 8002c04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c06:	4b12      	ldr	r3, [pc, #72]	@ (8002c50 <HAL_MspInit+0x68>)
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	4a11      	ldr	r2, [pc, #68]	@ (8002c50 <HAL_MspInit+0x68>)
 8002c0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c10:	61d3      	str	r3, [r2, #28]
 8002c12:	4b0f      	ldr	r3, [pc, #60]	@ (8002c50 <HAL_MspInit+0x68>)
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c1a:	607b      	str	r3, [r7, #4]
 8002c1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c1e:	2200      	movs	r2, #0
 8002c20:	210f      	movs	r1, #15
 8002c22:	f06f 0001 	mvn.w	r0, #1
 8002c26:	f000 fb44 	bl	80032b2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c54 <HAL_MspInit+0x6c>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	4a04      	ldr	r2, [pc, #16]	@ (8002c54 <HAL_MspInit+0x6c>)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c46:	bf00      	nop
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	40021000 	.word	0x40021000
 8002c54:	40010000 	.word	0x40010000

08002c58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b088      	sub	sp, #32
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c60:	f107 0310 	add.w	r3, r7, #16
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	605a      	str	r2, [r3, #4]
 8002c6a:	609a      	str	r2, [r3, #8]
 8002c6c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a15      	ldr	r2, [pc, #84]	@ (8002cc8 <HAL_I2C_MspInit+0x70>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d123      	bne.n	8002cc0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c78:	4b14      	ldr	r3, [pc, #80]	@ (8002ccc <HAL_I2C_MspInit+0x74>)
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	4a13      	ldr	r2, [pc, #76]	@ (8002ccc <HAL_I2C_MspInit+0x74>)
 8002c7e:	f043 0308 	orr.w	r3, r3, #8
 8002c82:	6193      	str	r3, [r2, #24]
 8002c84:	4b11      	ldr	r3, [pc, #68]	@ (8002ccc <HAL_I2C_MspInit+0x74>)
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	f003 0308 	and.w	r3, r3, #8
 8002c8c:	60fb      	str	r3, [r7, #12]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c90:	23c0      	movs	r3, #192	@ 0xc0
 8002c92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c94:	2312      	movs	r3, #18
 8002c96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c9c:	f107 0310 	add.w	r3, r7, #16
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	480b      	ldr	r0, [pc, #44]	@ (8002cd0 <HAL_I2C_MspInit+0x78>)
 8002ca4:	f000 fb30 	bl	8003308 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ca8:	4b08      	ldr	r3, [pc, #32]	@ (8002ccc <HAL_I2C_MspInit+0x74>)
 8002caa:	69db      	ldr	r3, [r3, #28]
 8002cac:	4a07      	ldr	r2, [pc, #28]	@ (8002ccc <HAL_I2C_MspInit+0x74>)
 8002cae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002cb2:	61d3      	str	r3, [r2, #28]
 8002cb4:	4b05      	ldr	r3, [pc, #20]	@ (8002ccc <HAL_I2C_MspInit+0x74>)
 8002cb6:	69db      	ldr	r3, [r3, #28]
 8002cb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cbc:	60bb      	str	r3, [r7, #8]
 8002cbe:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002cc0:	bf00      	nop
 8002cc2:	3720      	adds	r7, #32
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40005400 	.word	0x40005400
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	40010c00 	.word	0x40010c00

08002cd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b088      	sub	sp, #32
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cdc:	f107 0310 	add.w	r3, r7, #16
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	605a      	str	r2, [r3, #4]
 8002ce6:	609a      	str	r2, [r3, #8]
 8002ce8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a1c      	ldr	r2, [pc, #112]	@ (8002d60 <HAL_UART_MspInit+0x8c>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d131      	bne.n	8002d58 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cf4:	4b1b      	ldr	r3, [pc, #108]	@ (8002d64 <HAL_UART_MspInit+0x90>)
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	4a1a      	ldr	r2, [pc, #104]	@ (8002d64 <HAL_UART_MspInit+0x90>)
 8002cfa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cfe:	6193      	str	r3, [r2, #24]
 8002d00:	4b18      	ldr	r3, [pc, #96]	@ (8002d64 <HAL_UART_MspInit+0x90>)
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d0c:	4b15      	ldr	r3, [pc, #84]	@ (8002d64 <HAL_UART_MspInit+0x90>)
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	4a14      	ldr	r2, [pc, #80]	@ (8002d64 <HAL_UART_MspInit+0x90>)
 8002d12:	f043 0304 	orr.w	r3, r3, #4
 8002d16:	6193      	str	r3, [r2, #24]
 8002d18:	4b12      	ldr	r3, [pc, #72]	@ (8002d64 <HAL_UART_MspInit+0x90>)
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	60bb      	str	r3, [r7, #8]
 8002d22:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d32:	f107 0310 	add.w	r3, r7, #16
 8002d36:	4619      	mov	r1, r3
 8002d38:	480b      	ldr	r0, [pc, #44]	@ (8002d68 <HAL_UART_MspInit+0x94>)
 8002d3a:	f000 fae5 	bl	8003308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d44:	2300      	movs	r3, #0
 8002d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d4c:	f107 0310 	add.w	r3, r7, #16
 8002d50:	4619      	mov	r1, r3
 8002d52:	4805      	ldr	r0, [pc, #20]	@ (8002d68 <HAL_UART_MspInit+0x94>)
 8002d54:	f000 fad8 	bl	8003308 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002d58:	bf00      	nop
 8002d5a:	3720      	adds	r7, #32
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40013800 	.word	0x40013800
 8002d64:	40021000 	.word	0x40021000
 8002d68:	40010800 	.word	0x40010800

08002d6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b08e      	sub	sp, #56	@ 0x38
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002d74:	2300      	movs	r3, #0
 8002d76:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002d82:	4b34      	ldr	r3, [pc, #208]	@ (8002e54 <HAL_InitTick+0xe8>)
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	4a33      	ldr	r2, [pc, #204]	@ (8002e54 <HAL_InitTick+0xe8>)
 8002d88:	f043 0304 	orr.w	r3, r3, #4
 8002d8c:	61d3      	str	r3, [r2, #28]
 8002d8e:	4b31      	ldr	r3, [pc, #196]	@ (8002e54 <HAL_InitTick+0xe8>)
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	f003 0304 	and.w	r3, r3, #4
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002d9a:	f107 0210 	add.w	r2, r7, #16
 8002d9e:	f107 0314 	add.w	r3, r7, #20
 8002da2:	4611      	mov	r1, r2
 8002da4:	4618      	mov	r0, r3
 8002da6:	f002 fd8f 	bl	80058c8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d103      	bne.n	8002dbc <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002db4:	f002 fd60 	bl	8005878 <HAL_RCC_GetPCLK1Freq>
 8002db8:	6378      	str	r0, [r7, #52]	@ 0x34
 8002dba:	e004      	b.n	8002dc6 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002dbc:	f002 fd5c 	bl	8005878 <HAL_RCC_GetPCLK1Freq>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dc8:	4a23      	ldr	r2, [pc, #140]	@ (8002e58 <HAL_InitTick+0xec>)
 8002dca:	fba2 2303 	umull	r2, r3, r2, r3
 8002dce:	0c9b      	lsrs	r3, r3, #18
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002dd4:	4b21      	ldr	r3, [pc, #132]	@ (8002e5c <HAL_InitTick+0xf0>)
 8002dd6:	4a22      	ldr	r2, [pc, #136]	@ (8002e60 <HAL_InitTick+0xf4>)
 8002dd8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002dda:	4b20      	ldr	r3, [pc, #128]	@ (8002e5c <HAL_InitTick+0xf0>)
 8002ddc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002de0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002de2:	4a1e      	ldr	r2, [pc, #120]	@ (8002e5c <HAL_InitTick+0xf0>)
 8002de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002de6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002de8:	4b1c      	ldr	r3, [pc, #112]	@ (8002e5c <HAL_InitTick+0xf0>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dee:	4b1b      	ldr	r3, [pc, #108]	@ (8002e5c <HAL_InitTick+0xf0>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002df4:	4b19      	ldr	r3, [pc, #100]	@ (8002e5c <HAL_InitTick+0xf0>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8002dfa:	4818      	ldr	r0, [pc, #96]	@ (8002e5c <HAL_InitTick+0xf0>)
 8002dfc:	f002 fdb2 	bl	8005964 <HAL_TIM_Base_Init>
 8002e00:	4603      	mov	r3, r0
 8002e02:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002e06:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d11b      	bne.n	8002e46 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8002e0e:	4813      	ldr	r0, [pc, #76]	@ (8002e5c <HAL_InitTick+0xf0>)
 8002e10:	f002 fe00 	bl	8005a14 <HAL_TIM_Base_Start_IT>
 8002e14:	4603      	mov	r3, r0
 8002e16:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002e1a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d111      	bne.n	8002e46 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002e22:	201e      	movs	r0, #30
 8002e24:	f000 fa61 	bl	80032ea <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b0f      	cmp	r3, #15
 8002e2c:	d808      	bhi.n	8002e40 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8002e2e:	2200      	movs	r2, #0
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	201e      	movs	r0, #30
 8002e34:	f000 fa3d 	bl	80032b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e38:	4a0a      	ldr	r2, [pc, #40]	@ (8002e64 <HAL_InitTick+0xf8>)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6013      	str	r3, [r2, #0]
 8002e3e:	e002      	b.n	8002e46 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002e46:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3738      	adds	r7, #56	@ 0x38
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	40021000 	.word	0x40021000
 8002e58:	431bde83 	.word	0x431bde83
 8002e5c:	200006ac 	.word	0x200006ac
 8002e60:	40000800 	.word	0x40000800
 8002e64:	20000120 	.word	0x20000120

08002e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e6c:	bf00      	nop
 8002e6e:	e7fd      	b.n	8002e6c <NMI_Handler+0x4>

08002e70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e74:	bf00      	nop
 8002e76:	e7fd      	b.n	8002e74 <HardFault_Handler+0x4>

08002e78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e7c:	bf00      	nop
 8002e7e:	e7fd      	b.n	8002e7c <MemManage_Handler+0x4>

08002e80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e84:	bf00      	nop
 8002e86:	e7fd      	b.n	8002e84 <BusFault_Handler+0x4>

08002e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e8c:	bf00      	nop
 8002e8e:	e7fd      	b.n	8002e8c <UsageFault_Handler+0x4>

08002e90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e94:	bf00      	nop
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bc80      	pop	{r7}
 8002e9a:	4770      	bx	lr

08002e9c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_Pin);
 8002ea0:	2020      	movs	r0, #32
 8002ea2:	f000 fbe7 	bl	8003674 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002ea6:	bf00      	nop
 8002ea8:	bd80      	pop	{r7, pc}
	...

08002eac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002eb0:	4802      	ldr	r0, [pc, #8]	@ (8002ebc <TIM4_IRQHandler+0x10>)
 8002eb2:	f002 fe01 	bl	8005ab8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002eb6:	bf00      	nop
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	200006ac 	.word	0x200006ac

08002ec0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  return 1;
 8002ec4:	2301      	movs	r3, #1
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bc80      	pop	{r7}
 8002ecc:	4770      	bx	lr

08002ece <_kill>:

int _kill(int pid, int sig)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b082      	sub	sp, #8
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
 8002ed6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ed8:	f006 ff9e 	bl	8009e18 <__errno>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2216      	movs	r2, #22
 8002ee0:	601a      	str	r2, [r3, #0]
  return -1;
 8002ee2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <_exit>:

void _exit (int status)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b082      	sub	sp, #8
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ef6:	f04f 31ff 	mov.w	r1, #4294967295
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7ff ffe7 	bl	8002ece <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f00:	bf00      	nop
 8002f02:	e7fd      	b.n	8002f00 <_exit+0x12>

08002f04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f10:	2300      	movs	r3, #0
 8002f12:	617b      	str	r3, [r7, #20]
 8002f14:	e00a      	b.n	8002f2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f16:	f3af 8000 	nop.w
 8002f1a:	4601      	mov	r1, r0
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	1c5a      	adds	r2, r3, #1
 8002f20:	60ba      	str	r2, [r7, #8]
 8002f22:	b2ca      	uxtb	r2, r1
 8002f24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	617b      	str	r3, [r7, #20]
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	dbf0      	blt.n	8002f16 <_read+0x12>
  }

  return len;
 8002f34:	687b      	ldr	r3, [r7, #4]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3718      	adds	r7, #24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b086      	sub	sp, #24
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	60f8      	str	r0, [r7, #12]
 8002f46:	60b9      	str	r1, [r7, #8]
 8002f48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	617b      	str	r3, [r7, #20]
 8002f4e:	e009      	b.n	8002f64 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	1c5a      	adds	r2, r3, #1
 8002f54:	60ba      	str	r2, [r7, #8]
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	3301      	adds	r3, #1
 8002f62:	617b      	str	r3, [r7, #20]
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	dbf1      	blt.n	8002f50 <_write+0x12>
  }
  return len;
 8002f6c:	687b      	ldr	r3, [r7, #4]
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3718      	adds	r7, #24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <_close>:

int _close(int file)
{
 8002f76:	b480      	push	{r7}
 8002f78:	b083      	sub	sp, #12
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr

08002f8c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f9c:	605a      	str	r2, [r3, #4]
  return 0;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bc80      	pop	{r7}
 8002fa8:	4770      	bx	lr

08002faa <_isatty>:

int _isatty(int file)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b083      	sub	sp, #12
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002fb2:	2301      	movs	r3, #1
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bc80      	pop	{r7}
 8002fbc:	4770      	bx	lr

08002fbe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b085      	sub	sp, #20
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	60f8      	str	r0, [r7, #12]
 8002fc6:	60b9      	str	r1, [r7, #8]
 8002fc8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3714      	adds	r7, #20
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bc80      	pop	{r7}
 8002fd4:	4770      	bx	lr
	...

08002fd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fe0:	4a14      	ldr	r2, [pc, #80]	@ (8003034 <_sbrk+0x5c>)
 8002fe2:	4b15      	ldr	r3, [pc, #84]	@ (8003038 <_sbrk+0x60>)
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fec:	4b13      	ldr	r3, [pc, #76]	@ (800303c <_sbrk+0x64>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d102      	bne.n	8002ffa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ff4:	4b11      	ldr	r3, [pc, #68]	@ (800303c <_sbrk+0x64>)
 8002ff6:	4a12      	ldr	r2, [pc, #72]	@ (8003040 <_sbrk+0x68>)
 8002ff8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ffa:	4b10      	ldr	r3, [pc, #64]	@ (800303c <_sbrk+0x64>)
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4413      	add	r3, r2
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	429a      	cmp	r2, r3
 8003006:	d207      	bcs.n	8003018 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003008:	f006 ff06 	bl	8009e18 <__errno>
 800300c:	4603      	mov	r3, r0
 800300e:	220c      	movs	r2, #12
 8003010:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003012:	f04f 33ff 	mov.w	r3, #4294967295
 8003016:	e009      	b.n	800302c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003018:	4b08      	ldr	r3, [pc, #32]	@ (800303c <_sbrk+0x64>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800301e:	4b07      	ldr	r3, [pc, #28]	@ (800303c <_sbrk+0x64>)
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4413      	add	r3, r2
 8003026:	4a05      	ldr	r2, [pc, #20]	@ (800303c <_sbrk+0x64>)
 8003028:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800302a:	68fb      	ldr	r3, [r7, #12]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	20005000 	.word	0x20005000
 8003038:	00000400 	.word	0x00000400
 800303c:	200006f4 	.word	0x200006f4
 8003040:	200049a8 	.word	0x200049a8

08003044 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003048:	bf00      	nop
 800304a:	46bd      	mov	sp, r7
 800304c:	bc80      	pop	{r7}
 800304e:	4770      	bx	lr

08003050 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003050:	f7ff fff8 	bl	8003044 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003054:	480b      	ldr	r0, [pc, #44]	@ (8003084 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003056:	490c      	ldr	r1, [pc, #48]	@ (8003088 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003058:	4a0c      	ldr	r2, [pc, #48]	@ (800308c <LoopFillZerobss+0x16>)
  movs r3, #0
 800305a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800305c:	e002      	b.n	8003064 <LoopCopyDataInit>

0800305e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800305e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003062:	3304      	adds	r3, #4

08003064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003068:	d3f9      	bcc.n	800305e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800306a:	4a09      	ldr	r2, [pc, #36]	@ (8003090 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800306c:	4c09      	ldr	r4, [pc, #36]	@ (8003094 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800306e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003070:	e001      	b.n	8003076 <LoopFillZerobss>

08003072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003074:	3204      	adds	r2, #4

08003076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003078:	d3fb      	bcc.n	8003072 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800307a:	f006 fed3 	bl	8009e24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800307e:	f7fe fdbd 	bl	8001bfc <main>
  bx lr
 8003082:	4770      	bx	lr
  ldr r0, =_sdata
 8003084:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003088:	200002f4 	.word	0x200002f4
  ldr r2, =_sidata
 800308c:	0800ccc4 	.word	0x0800ccc4
  ldr r2, =_sbss
 8003090:	200002f4 	.word	0x200002f4
  ldr r4, =_ebss
 8003094:	200049a4 	.word	0x200049a4

08003098 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003098:	e7fe      	b.n	8003098 <ADC1_2_IRQHandler>
	...

0800309c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030a0:	4b08      	ldr	r3, [pc, #32]	@ (80030c4 <HAL_Init+0x28>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a07      	ldr	r2, [pc, #28]	@ (80030c4 <HAL_Init+0x28>)
 80030a6:	f043 0310 	orr.w	r3, r3, #16
 80030aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030ac:	2003      	movs	r0, #3
 80030ae:	f000 f8f5 	bl	800329c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030b2:	200f      	movs	r0, #15
 80030b4:	f7ff fe5a 	bl	8002d6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030b8:	f7ff fd96 	bl	8002be8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	40022000 	.word	0x40022000

080030c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030cc:	4b05      	ldr	r3, [pc, #20]	@ (80030e4 <HAL_IncTick+0x1c>)
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	461a      	mov	r2, r3
 80030d2:	4b05      	ldr	r3, [pc, #20]	@ (80030e8 <HAL_IncTick+0x20>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4413      	add	r3, r2
 80030d8:	4a03      	ldr	r2, [pc, #12]	@ (80030e8 <HAL_IncTick+0x20>)
 80030da:	6013      	str	r3, [r2, #0]
}
 80030dc:	bf00      	nop
 80030de:	46bd      	mov	sp, r7
 80030e0:	bc80      	pop	{r7}
 80030e2:	4770      	bx	lr
 80030e4:	20000124 	.word	0x20000124
 80030e8:	200006f8 	.word	0x200006f8

080030ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  return uwTick;
 80030f0:	4b02      	ldr	r3, [pc, #8]	@ (80030fc <HAL_GetTick+0x10>)
 80030f2:	681b      	ldr	r3, [r3, #0]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bc80      	pop	{r7}
 80030fa:	4770      	bx	lr
 80030fc:	200006f8 	.word	0x200006f8

08003100 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003108:	f7ff fff0 	bl	80030ec <HAL_GetTick>
 800310c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003118:	d005      	beq.n	8003126 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800311a:	4b0a      	ldr	r3, [pc, #40]	@ (8003144 <HAL_Delay+0x44>)
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	461a      	mov	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4413      	add	r3, r2
 8003124:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003126:	bf00      	nop
 8003128:	f7ff ffe0 	bl	80030ec <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	429a      	cmp	r2, r3
 8003136:	d8f7      	bhi.n	8003128 <HAL_Delay+0x28>
  {
  }
}
 8003138:	bf00      	nop
 800313a:	bf00      	nop
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	20000124 	.word	0x20000124

08003148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003158:	4b0c      	ldr	r3, [pc, #48]	@ (800318c <__NVIC_SetPriorityGrouping+0x44>)
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800315e:	68ba      	ldr	r2, [r7, #8]
 8003160:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003164:	4013      	ands	r3, r2
 8003166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003170:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003174:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800317a:	4a04      	ldr	r2, [pc, #16]	@ (800318c <__NVIC_SetPriorityGrouping+0x44>)
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	60d3      	str	r3, [r2, #12]
}
 8003180:	bf00      	nop
 8003182:	3714      	adds	r7, #20
 8003184:	46bd      	mov	sp, r7
 8003186:	bc80      	pop	{r7}
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	e000ed00 	.word	0xe000ed00

08003190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003194:	4b04      	ldr	r3, [pc, #16]	@ (80031a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	0a1b      	lsrs	r3, r3, #8
 800319a:	f003 0307 	and.w	r3, r3, #7
}
 800319e:	4618      	mov	r0, r3
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bc80      	pop	{r7}
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	e000ed00 	.word	0xe000ed00

080031ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	4603      	mov	r3, r0
 80031b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	db0b      	blt.n	80031d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031be:	79fb      	ldrb	r3, [r7, #7]
 80031c0:	f003 021f 	and.w	r2, r3, #31
 80031c4:	4906      	ldr	r1, [pc, #24]	@ (80031e0 <__NVIC_EnableIRQ+0x34>)
 80031c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ca:	095b      	lsrs	r3, r3, #5
 80031cc:	2001      	movs	r0, #1
 80031ce:	fa00 f202 	lsl.w	r2, r0, r2
 80031d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031d6:	bf00      	nop
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	bc80      	pop	{r7}
 80031de:	4770      	bx	lr
 80031e0:	e000e100 	.word	0xe000e100

080031e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	4603      	mov	r3, r0
 80031ec:	6039      	str	r1, [r7, #0]
 80031ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	db0a      	blt.n	800320e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	b2da      	uxtb	r2, r3
 80031fc:	490c      	ldr	r1, [pc, #48]	@ (8003230 <__NVIC_SetPriority+0x4c>)
 80031fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003202:	0112      	lsls	r2, r2, #4
 8003204:	b2d2      	uxtb	r2, r2
 8003206:	440b      	add	r3, r1
 8003208:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800320c:	e00a      	b.n	8003224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	b2da      	uxtb	r2, r3
 8003212:	4908      	ldr	r1, [pc, #32]	@ (8003234 <__NVIC_SetPriority+0x50>)
 8003214:	79fb      	ldrb	r3, [r7, #7]
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	3b04      	subs	r3, #4
 800321c:	0112      	lsls	r2, r2, #4
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	440b      	add	r3, r1
 8003222:	761a      	strb	r2, [r3, #24]
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	bc80      	pop	{r7}
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	e000e100 	.word	0xe000e100
 8003234:	e000ed00 	.word	0xe000ed00

08003238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003238:	b480      	push	{r7}
 800323a:	b089      	sub	sp, #36	@ 0x24
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f003 0307 	and.w	r3, r3, #7
 800324a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	f1c3 0307 	rsb	r3, r3, #7
 8003252:	2b04      	cmp	r3, #4
 8003254:	bf28      	it	cs
 8003256:	2304      	movcs	r3, #4
 8003258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	3304      	adds	r3, #4
 800325e:	2b06      	cmp	r3, #6
 8003260:	d902      	bls.n	8003268 <NVIC_EncodePriority+0x30>
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	3b03      	subs	r3, #3
 8003266:	e000      	b.n	800326a <NVIC_EncodePriority+0x32>
 8003268:	2300      	movs	r3, #0
 800326a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800326c:	f04f 32ff 	mov.w	r2, #4294967295
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	43da      	mvns	r2, r3
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	401a      	ands	r2, r3
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003280:	f04f 31ff 	mov.w	r1, #4294967295
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	fa01 f303 	lsl.w	r3, r1, r3
 800328a:	43d9      	mvns	r1, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003290:	4313      	orrs	r3, r2
         );
}
 8003292:	4618      	mov	r0, r3
 8003294:	3724      	adds	r7, #36	@ 0x24
 8003296:	46bd      	mov	sp, r7
 8003298:	bc80      	pop	{r7}
 800329a:	4770      	bx	lr

0800329c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f7ff ff4f 	bl	8003148 <__NVIC_SetPriorityGrouping>
}
 80032aa:	bf00      	nop
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b086      	sub	sp, #24
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	4603      	mov	r3, r0
 80032ba:	60b9      	str	r1, [r7, #8]
 80032bc:	607a      	str	r2, [r7, #4]
 80032be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032c0:	2300      	movs	r3, #0
 80032c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032c4:	f7ff ff64 	bl	8003190 <__NVIC_GetPriorityGrouping>
 80032c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	68b9      	ldr	r1, [r7, #8]
 80032ce:	6978      	ldr	r0, [r7, #20]
 80032d0:	f7ff ffb2 	bl	8003238 <NVIC_EncodePriority>
 80032d4:	4602      	mov	r2, r0
 80032d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032da:	4611      	mov	r1, r2
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff ff81 	bl	80031e4 <__NVIC_SetPriority>
}
 80032e2:	bf00      	nop
 80032e4:	3718      	adds	r7, #24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b082      	sub	sp, #8
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	4603      	mov	r3, r0
 80032f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff ff57 	bl	80031ac <__NVIC_EnableIRQ>
}
 80032fe:	bf00      	nop
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
	...

08003308 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003308:	b480      	push	{r7}
 800330a:	b08b      	sub	sp, #44	@ 0x2c
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003312:	2300      	movs	r3, #0
 8003314:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003316:	2300      	movs	r3, #0
 8003318:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800331a:	e169      	b.n	80035f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800331c:	2201      	movs	r2, #1
 800331e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	69fa      	ldr	r2, [r7, #28]
 800332c:	4013      	ands	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	429a      	cmp	r2, r3
 8003336:	f040 8158 	bne.w	80035ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	4a9a      	ldr	r2, [pc, #616]	@ (80035a8 <HAL_GPIO_Init+0x2a0>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d05e      	beq.n	8003402 <HAL_GPIO_Init+0xfa>
 8003344:	4a98      	ldr	r2, [pc, #608]	@ (80035a8 <HAL_GPIO_Init+0x2a0>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d875      	bhi.n	8003436 <HAL_GPIO_Init+0x12e>
 800334a:	4a98      	ldr	r2, [pc, #608]	@ (80035ac <HAL_GPIO_Init+0x2a4>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d058      	beq.n	8003402 <HAL_GPIO_Init+0xfa>
 8003350:	4a96      	ldr	r2, [pc, #600]	@ (80035ac <HAL_GPIO_Init+0x2a4>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d86f      	bhi.n	8003436 <HAL_GPIO_Init+0x12e>
 8003356:	4a96      	ldr	r2, [pc, #600]	@ (80035b0 <HAL_GPIO_Init+0x2a8>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d052      	beq.n	8003402 <HAL_GPIO_Init+0xfa>
 800335c:	4a94      	ldr	r2, [pc, #592]	@ (80035b0 <HAL_GPIO_Init+0x2a8>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d869      	bhi.n	8003436 <HAL_GPIO_Init+0x12e>
 8003362:	4a94      	ldr	r2, [pc, #592]	@ (80035b4 <HAL_GPIO_Init+0x2ac>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d04c      	beq.n	8003402 <HAL_GPIO_Init+0xfa>
 8003368:	4a92      	ldr	r2, [pc, #584]	@ (80035b4 <HAL_GPIO_Init+0x2ac>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d863      	bhi.n	8003436 <HAL_GPIO_Init+0x12e>
 800336e:	4a92      	ldr	r2, [pc, #584]	@ (80035b8 <HAL_GPIO_Init+0x2b0>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d046      	beq.n	8003402 <HAL_GPIO_Init+0xfa>
 8003374:	4a90      	ldr	r2, [pc, #576]	@ (80035b8 <HAL_GPIO_Init+0x2b0>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d85d      	bhi.n	8003436 <HAL_GPIO_Init+0x12e>
 800337a:	2b12      	cmp	r3, #18
 800337c:	d82a      	bhi.n	80033d4 <HAL_GPIO_Init+0xcc>
 800337e:	2b12      	cmp	r3, #18
 8003380:	d859      	bhi.n	8003436 <HAL_GPIO_Init+0x12e>
 8003382:	a201      	add	r2, pc, #4	@ (adr r2, 8003388 <HAL_GPIO_Init+0x80>)
 8003384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003388:	08003403 	.word	0x08003403
 800338c:	080033dd 	.word	0x080033dd
 8003390:	080033ef 	.word	0x080033ef
 8003394:	08003431 	.word	0x08003431
 8003398:	08003437 	.word	0x08003437
 800339c:	08003437 	.word	0x08003437
 80033a0:	08003437 	.word	0x08003437
 80033a4:	08003437 	.word	0x08003437
 80033a8:	08003437 	.word	0x08003437
 80033ac:	08003437 	.word	0x08003437
 80033b0:	08003437 	.word	0x08003437
 80033b4:	08003437 	.word	0x08003437
 80033b8:	08003437 	.word	0x08003437
 80033bc:	08003437 	.word	0x08003437
 80033c0:	08003437 	.word	0x08003437
 80033c4:	08003437 	.word	0x08003437
 80033c8:	08003437 	.word	0x08003437
 80033cc:	080033e5 	.word	0x080033e5
 80033d0:	080033f9 	.word	0x080033f9
 80033d4:	4a79      	ldr	r2, [pc, #484]	@ (80035bc <HAL_GPIO_Init+0x2b4>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d013      	beq.n	8003402 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80033da:	e02c      	b.n	8003436 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	623b      	str	r3, [r7, #32]
          break;
 80033e2:	e029      	b.n	8003438 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	3304      	adds	r3, #4
 80033ea:	623b      	str	r3, [r7, #32]
          break;
 80033ec:	e024      	b.n	8003438 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	3308      	adds	r3, #8
 80033f4:	623b      	str	r3, [r7, #32]
          break;
 80033f6:	e01f      	b.n	8003438 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	330c      	adds	r3, #12
 80033fe:	623b      	str	r3, [r7, #32]
          break;
 8003400:	e01a      	b.n	8003438 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d102      	bne.n	8003410 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800340a:	2304      	movs	r3, #4
 800340c:	623b      	str	r3, [r7, #32]
          break;
 800340e:	e013      	b.n	8003438 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d105      	bne.n	8003424 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003418:	2308      	movs	r3, #8
 800341a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	69fa      	ldr	r2, [r7, #28]
 8003420:	611a      	str	r2, [r3, #16]
          break;
 8003422:	e009      	b.n	8003438 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003424:	2308      	movs	r3, #8
 8003426:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	69fa      	ldr	r2, [r7, #28]
 800342c:	615a      	str	r2, [r3, #20]
          break;
 800342e:	e003      	b.n	8003438 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003430:	2300      	movs	r3, #0
 8003432:	623b      	str	r3, [r7, #32]
          break;
 8003434:	e000      	b.n	8003438 <HAL_GPIO_Init+0x130>
          break;
 8003436:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	2bff      	cmp	r3, #255	@ 0xff
 800343c:	d801      	bhi.n	8003442 <HAL_GPIO_Init+0x13a>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	e001      	b.n	8003446 <HAL_GPIO_Init+0x13e>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	3304      	adds	r3, #4
 8003446:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	2bff      	cmp	r3, #255	@ 0xff
 800344c:	d802      	bhi.n	8003454 <HAL_GPIO_Init+0x14c>
 800344e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	e002      	b.n	800345a <HAL_GPIO_Init+0x152>
 8003454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003456:	3b08      	subs	r3, #8
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	210f      	movs	r1, #15
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	fa01 f303 	lsl.w	r3, r1, r3
 8003468:	43db      	mvns	r3, r3
 800346a:	401a      	ands	r2, r3
 800346c:	6a39      	ldr	r1, [r7, #32]
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	fa01 f303 	lsl.w	r3, r1, r3
 8003474:	431a      	orrs	r2, r3
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 80b1 	beq.w	80035ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003488:	4b4d      	ldr	r3, [pc, #308]	@ (80035c0 <HAL_GPIO_Init+0x2b8>)
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	4a4c      	ldr	r2, [pc, #304]	@ (80035c0 <HAL_GPIO_Init+0x2b8>)
 800348e:	f043 0301 	orr.w	r3, r3, #1
 8003492:	6193      	str	r3, [r2, #24]
 8003494:	4b4a      	ldr	r3, [pc, #296]	@ (80035c0 <HAL_GPIO_Init+0x2b8>)
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	60bb      	str	r3, [r7, #8]
 800349e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80034a0:	4a48      	ldr	r2, [pc, #288]	@ (80035c4 <HAL_GPIO_Init+0x2bc>)
 80034a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a4:	089b      	lsrs	r3, r3, #2
 80034a6:	3302      	adds	r3, #2
 80034a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80034ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b0:	f003 0303 	and.w	r3, r3, #3
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	220f      	movs	r2, #15
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	43db      	mvns	r3, r3
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	4013      	ands	r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a40      	ldr	r2, [pc, #256]	@ (80035c8 <HAL_GPIO_Init+0x2c0>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d013      	beq.n	80034f4 <HAL_GPIO_Init+0x1ec>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a3f      	ldr	r2, [pc, #252]	@ (80035cc <HAL_GPIO_Init+0x2c4>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d00d      	beq.n	80034f0 <HAL_GPIO_Init+0x1e8>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a3e      	ldr	r2, [pc, #248]	@ (80035d0 <HAL_GPIO_Init+0x2c8>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d007      	beq.n	80034ec <HAL_GPIO_Init+0x1e4>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a3d      	ldr	r2, [pc, #244]	@ (80035d4 <HAL_GPIO_Init+0x2cc>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d101      	bne.n	80034e8 <HAL_GPIO_Init+0x1e0>
 80034e4:	2303      	movs	r3, #3
 80034e6:	e006      	b.n	80034f6 <HAL_GPIO_Init+0x1ee>
 80034e8:	2304      	movs	r3, #4
 80034ea:	e004      	b.n	80034f6 <HAL_GPIO_Init+0x1ee>
 80034ec:	2302      	movs	r3, #2
 80034ee:	e002      	b.n	80034f6 <HAL_GPIO_Init+0x1ee>
 80034f0:	2301      	movs	r3, #1
 80034f2:	e000      	b.n	80034f6 <HAL_GPIO_Init+0x1ee>
 80034f4:	2300      	movs	r3, #0
 80034f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034f8:	f002 0203 	and.w	r2, r2, #3
 80034fc:	0092      	lsls	r2, r2, #2
 80034fe:	4093      	lsls	r3, r2
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	4313      	orrs	r3, r2
 8003504:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003506:	492f      	ldr	r1, [pc, #188]	@ (80035c4 <HAL_GPIO_Init+0x2bc>)
 8003508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350a:	089b      	lsrs	r3, r3, #2
 800350c:	3302      	adds	r3, #2
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d006      	beq.n	800352e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003520:	4b2d      	ldr	r3, [pc, #180]	@ (80035d8 <HAL_GPIO_Init+0x2d0>)
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	492c      	ldr	r1, [pc, #176]	@ (80035d8 <HAL_GPIO_Init+0x2d0>)
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	4313      	orrs	r3, r2
 800352a:	608b      	str	r3, [r1, #8]
 800352c:	e006      	b.n	800353c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800352e:	4b2a      	ldr	r3, [pc, #168]	@ (80035d8 <HAL_GPIO_Init+0x2d0>)
 8003530:	689a      	ldr	r2, [r3, #8]
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	43db      	mvns	r3, r3
 8003536:	4928      	ldr	r1, [pc, #160]	@ (80035d8 <HAL_GPIO_Init+0x2d0>)
 8003538:	4013      	ands	r3, r2
 800353a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d006      	beq.n	8003556 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003548:	4b23      	ldr	r3, [pc, #140]	@ (80035d8 <HAL_GPIO_Init+0x2d0>)
 800354a:	68da      	ldr	r2, [r3, #12]
 800354c:	4922      	ldr	r1, [pc, #136]	@ (80035d8 <HAL_GPIO_Init+0x2d0>)
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	4313      	orrs	r3, r2
 8003552:	60cb      	str	r3, [r1, #12]
 8003554:	e006      	b.n	8003564 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003556:	4b20      	ldr	r3, [pc, #128]	@ (80035d8 <HAL_GPIO_Init+0x2d0>)
 8003558:	68da      	ldr	r2, [r3, #12]
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	43db      	mvns	r3, r3
 800355e:	491e      	ldr	r1, [pc, #120]	@ (80035d8 <HAL_GPIO_Init+0x2d0>)
 8003560:	4013      	ands	r3, r2
 8003562:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d006      	beq.n	800357e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003570:	4b19      	ldr	r3, [pc, #100]	@ (80035d8 <HAL_GPIO_Init+0x2d0>)
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	4918      	ldr	r1, [pc, #96]	@ (80035d8 <HAL_GPIO_Init+0x2d0>)
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	4313      	orrs	r3, r2
 800357a:	604b      	str	r3, [r1, #4]
 800357c:	e006      	b.n	800358c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800357e:	4b16      	ldr	r3, [pc, #88]	@ (80035d8 <HAL_GPIO_Init+0x2d0>)
 8003580:	685a      	ldr	r2, [r3, #4]
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	43db      	mvns	r3, r3
 8003586:	4914      	ldr	r1, [pc, #80]	@ (80035d8 <HAL_GPIO_Init+0x2d0>)
 8003588:	4013      	ands	r3, r2
 800358a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d021      	beq.n	80035dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003598:	4b0f      	ldr	r3, [pc, #60]	@ (80035d8 <HAL_GPIO_Init+0x2d0>)
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	490e      	ldr	r1, [pc, #56]	@ (80035d8 <HAL_GPIO_Init+0x2d0>)
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	600b      	str	r3, [r1, #0]
 80035a4:	e021      	b.n	80035ea <HAL_GPIO_Init+0x2e2>
 80035a6:	bf00      	nop
 80035a8:	10320000 	.word	0x10320000
 80035ac:	10310000 	.word	0x10310000
 80035b0:	10220000 	.word	0x10220000
 80035b4:	10210000 	.word	0x10210000
 80035b8:	10120000 	.word	0x10120000
 80035bc:	10110000 	.word	0x10110000
 80035c0:	40021000 	.word	0x40021000
 80035c4:	40010000 	.word	0x40010000
 80035c8:	40010800 	.word	0x40010800
 80035cc:	40010c00 	.word	0x40010c00
 80035d0:	40011000 	.word	0x40011000
 80035d4:	40011400 	.word	0x40011400
 80035d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80035dc:	4b0b      	ldr	r3, [pc, #44]	@ (800360c <HAL_GPIO_Init+0x304>)
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	43db      	mvns	r3, r3
 80035e4:	4909      	ldr	r1, [pc, #36]	@ (800360c <HAL_GPIO_Init+0x304>)
 80035e6:	4013      	ands	r3, r2
 80035e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80035ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ec:	3301      	adds	r3, #1
 80035ee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f6:	fa22 f303 	lsr.w	r3, r2, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f47f ae8e 	bne.w	800331c <HAL_GPIO_Init+0x14>
  }
}
 8003600:	bf00      	nop
 8003602:	bf00      	nop
 8003604:	372c      	adds	r7, #44	@ 0x2c
 8003606:	46bd      	mov	sp, r7
 8003608:	bc80      	pop	{r7}
 800360a:	4770      	bx	lr
 800360c:	40010400 	.word	0x40010400

08003610 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	460b      	mov	r3, r1
 800361a:	807b      	strh	r3, [r7, #2]
 800361c:	4613      	mov	r3, r2
 800361e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003620:	787b      	ldrb	r3, [r7, #1]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003626:	887a      	ldrh	r2, [r7, #2]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800362c:	e003      	b.n	8003636 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800362e:	887b      	ldrh	r3, [r7, #2]
 8003630:	041a      	lsls	r2, r3, #16
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	611a      	str	r2, [r3, #16]
}
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	bc80      	pop	{r7}
 800363e:	4770      	bx	lr

08003640 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	460b      	mov	r3, r1
 800364a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003652:	887a      	ldrh	r2, [r7, #2]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4013      	ands	r3, r2
 8003658:	041a      	lsls	r2, r3, #16
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	43d9      	mvns	r1, r3
 800365e:	887b      	ldrh	r3, [r7, #2]
 8003660:	400b      	ands	r3, r1
 8003662:	431a      	orrs	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	611a      	str	r2, [r3, #16]
}
 8003668:	bf00      	nop
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	bc80      	pop	{r7}
 8003670:	4770      	bx	lr
	...

08003674 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	4603      	mov	r3, r0
 800367c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800367e:	4b08      	ldr	r3, [pc, #32]	@ (80036a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003680:	695a      	ldr	r2, [r3, #20]
 8003682:	88fb      	ldrh	r3, [r7, #6]
 8003684:	4013      	ands	r3, r2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d006      	beq.n	8003698 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800368a:	4a05      	ldr	r2, [pc, #20]	@ (80036a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800368c:	88fb      	ldrh	r3, [r7, #6]
 800368e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003690:	88fb      	ldrh	r3, [r7, #6]
 8003692:	4618      	mov	r0, r3
 8003694:	f7fe fcaa 	bl	8001fec <HAL_GPIO_EXTI_Callback>
  }
}
 8003698:	bf00      	nop
 800369a:	3708      	adds	r7, #8
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40010400 	.word	0x40010400

080036a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e12b      	b.n	800390e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d106      	bne.n	80036d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7ff fac4 	bl	8002c58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2224      	movs	r2, #36	@ 0x24
 80036d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 0201 	bic.w	r2, r2, #1
 80036e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003706:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003708:	f002 f8b6 	bl	8005878 <HAL_RCC_GetPCLK1Freq>
 800370c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	4a81      	ldr	r2, [pc, #516]	@ (8003918 <HAL_I2C_Init+0x274>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d807      	bhi.n	8003728 <HAL_I2C_Init+0x84>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4a80      	ldr	r2, [pc, #512]	@ (800391c <HAL_I2C_Init+0x278>)
 800371c:	4293      	cmp	r3, r2
 800371e:	bf94      	ite	ls
 8003720:	2301      	movls	r3, #1
 8003722:	2300      	movhi	r3, #0
 8003724:	b2db      	uxtb	r3, r3
 8003726:	e006      	b.n	8003736 <HAL_I2C_Init+0x92>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4a7d      	ldr	r2, [pc, #500]	@ (8003920 <HAL_I2C_Init+0x27c>)
 800372c:	4293      	cmp	r3, r2
 800372e:	bf94      	ite	ls
 8003730:	2301      	movls	r3, #1
 8003732:	2300      	movhi	r3, #0
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e0e7      	b.n	800390e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	4a78      	ldr	r2, [pc, #480]	@ (8003924 <HAL_I2C_Init+0x280>)
 8003742:	fba2 2303 	umull	r2, r3, r2, r3
 8003746:	0c9b      	lsrs	r3, r3, #18
 8003748:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	430a      	orrs	r2, r1
 800375c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	4a6a      	ldr	r2, [pc, #424]	@ (8003918 <HAL_I2C_Init+0x274>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d802      	bhi.n	8003778 <HAL_I2C_Init+0xd4>
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	3301      	adds	r3, #1
 8003776:	e009      	b.n	800378c <HAL_I2C_Init+0xe8>
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800377e:	fb02 f303 	mul.w	r3, r2, r3
 8003782:	4a69      	ldr	r2, [pc, #420]	@ (8003928 <HAL_I2C_Init+0x284>)
 8003784:	fba2 2303 	umull	r2, r3, r2, r3
 8003788:	099b      	lsrs	r3, r3, #6
 800378a:	3301      	adds	r3, #1
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6812      	ldr	r2, [r2, #0]
 8003790:	430b      	orrs	r3, r1
 8003792:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800379e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	495c      	ldr	r1, [pc, #368]	@ (8003918 <HAL_I2C_Init+0x274>)
 80037a8:	428b      	cmp	r3, r1
 80037aa:	d819      	bhi.n	80037e0 <HAL_I2C_Init+0x13c>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	1e59      	subs	r1, r3, #1
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80037ba:	1c59      	adds	r1, r3, #1
 80037bc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80037c0:	400b      	ands	r3, r1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00a      	beq.n	80037dc <HAL_I2C_Init+0x138>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	1e59      	subs	r1, r3, #1
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80037d4:	3301      	adds	r3, #1
 80037d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037da:	e051      	b.n	8003880 <HAL_I2C_Init+0x1dc>
 80037dc:	2304      	movs	r3, #4
 80037de:	e04f      	b.n	8003880 <HAL_I2C_Init+0x1dc>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d111      	bne.n	800380c <HAL_I2C_Init+0x168>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	1e58      	subs	r0, r3, #1
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6859      	ldr	r1, [r3, #4]
 80037f0:	460b      	mov	r3, r1
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	440b      	add	r3, r1
 80037f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037fa:	3301      	adds	r3, #1
 80037fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003800:	2b00      	cmp	r3, #0
 8003802:	bf0c      	ite	eq
 8003804:	2301      	moveq	r3, #1
 8003806:	2300      	movne	r3, #0
 8003808:	b2db      	uxtb	r3, r3
 800380a:	e012      	b.n	8003832 <HAL_I2C_Init+0x18e>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	1e58      	subs	r0, r3, #1
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6859      	ldr	r1, [r3, #4]
 8003814:	460b      	mov	r3, r1
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	440b      	add	r3, r1
 800381a:	0099      	lsls	r1, r3, #2
 800381c:	440b      	add	r3, r1
 800381e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003822:	3301      	adds	r3, #1
 8003824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003828:	2b00      	cmp	r3, #0
 800382a:	bf0c      	ite	eq
 800382c:	2301      	moveq	r3, #1
 800382e:	2300      	movne	r3, #0
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <HAL_I2C_Init+0x196>
 8003836:	2301      	movs	r3, #1
 8003838:	e022      	b.n	8003880 <HAL_I2C_Init+0x1dc>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10e      	bne.n	8003860 <HAL_I2C_Init+0x1bc>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	1e58      	subs	r0, r3, #1
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6859      	ldr	r1, [r3, #4]
 800384a:	460b      	mov	r3, r1
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	440b      	add	r3, r1
 8003850:	fbb0 f3f3 	udiv	r3, r0, r3
 8003854:	3301      	adds	r3, #1
 8003856:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800385a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800385e:	e00f      	b.n	8003880 <HAL_I2C_Init+0x1dc>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	1e58      	subs	r0, r3, #1
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6859      	ldr	r1, [r3, #4]
 8003868:	460b      	mov	r3, r1
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	0099      	lsls	r1, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	fbb0 f3f3 	udiv	r3, r0, r3
 8003876:	3301      	adds	r3, #1
 8003878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800387c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003880:	6879      	ldr	r1, [r7, #4]
 8003882:	6809      	ldr	r1, [r1, #0]
 8003884:	4313      	orrs	r3, r2
 8003886:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	69da      	ldr	r2, [r3, #28]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	431a      	orrs	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	430a      	orrs	r2, r1
 80038a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80038ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	6911      	ldr	r1, [r2, #16]
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	68d2      	ldr	r2, [r2, #12]
 80038ba:	4311      	orrs	r1, r2
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6812      	ldr	r2, [r2, #0]
 80038c0:	430b      	orrs	r3, r1
 80038c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	695a      	ldr	r2, [r3, #20]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	430a      	orrs	r2, r1
 80038de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f042 0201 	orr.w	r2, r2, #1
 80038ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2220      	movs	r2, #32
 80038fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	000186a0 	.word	0x000186a0
 800391c:	001e847f 	.word	0x001e847f
 8003920:	003d08ff 	.word	0x003d08ff
 8003924:	431bde83 	.word	0x431bde83
 8003928:	10624dd3 	.word	0x10624dd3

0800392c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b088      	sub	sp, #32
 8003930:	af02      	add	r7, sp, #8
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	607a      	str	r2, [r7, #4]
 8003936:	461a      	mov	r2, r3
 8003938:	460b      	mov	r3, r1
 800393a:	817b      	strh	r3, [r7, #10]
 800393c:	4613      	mov	r3, r2
 800393e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003940:	f7ff fbd4 	bl	80030ec <HAL_GetTick>
 8003944:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b20      	cmp	r3, #32
 8003950:	f040 80e0 	bne.w	8003b14 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	9300      	str	r3, [sp, #0]
 8003958:	2319      	movs	r3, #25
 800395a:	2201      	movs	r2, #1
 800395c:	4970      	ldr	r1, [pc, #448]	@ (8003b20 <HAL_I2C_Master_Transmit+0x1f4>)
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f001 f98a 	bl	8004c78 <I2C_WaitOnFlagUntilTimeout>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800396a:	2302      	movs	r3, #2
 800396c:	e0d3      	b.n	8003b16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003974:	2b01      	cmp	r3, #1
 8003976:	d101      	bne.n	800397c <HAL_I2C_Master_Transmit+0x50>
 8003978:	2302      	movs	r3, #2
 800397a:	e0cc      	b.n	8003b16 <HAL_I2C_Master_Transmit+0x1ea>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b01      	cmp	r3, #1
 8003990:	d007      	beq.n	80039a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f042 0201 	orr.w	r2, r2, #1
 80039a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2221      	movs	r2, #33	@ 0x21
 80039b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2210      	movs	r2, #16
 80039be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	893a      	ldrh	r2, [r7, #8]
 80039d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039d8:	b29a      	uxth	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	4a50      	ldr	r2, [pc, #320]	@ (8003b24 <HAL_I2C_Master_Transmit+0x1f8>)
 80039e2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80039e4:	8979      	ldrh	r1, [r7, #10]
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	6a3a      	ldr	r2, [r7, #32]
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f000 fe76 	bl	80046dc <I2C_MasterRequestWrite>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e08d      	b.n	8003b16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039fa:	2300      	movs	r3, #0
 80039fc:	613b      	str	r3, [r7, #16]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	613b      	str	r3, [r7, #16]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	613b      	str	r3, [r7, #16]
 8003a0e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003a10:	e066      	b.n	8003ae0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	6a39      	ldr	r1, [r7, #32]
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f001 fa48 	bl	8004eac <I2C_WaitOnTXEFlagUntilTimeout>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00d      	beq.n	8003a3e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a26:	2b04      	cmp	r3, #4
 8003a28:	d107      	bne.n	8003a3a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e06b      	b.n	8003b16 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a42:	781a      	ldrb	r2, [r3, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4e:	1c5a      	adds	r2, r3, #1
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a66:	3b01      	subs	r3, #1
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	f003 0304 	and.w	r3, r3, #4
 8003a78:	2b04      	cmp	r3, #4
 8003a7a:	d11b      	bne.n	8003ab4 <HAL_I2C_Master_Transmit+0x188>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d017      	beq.n	8003ab4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a88:	781a      	ldrb	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a94:	1c5a      	adds	r2, r3, #1
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aac:	3b01      	subs	r3, #1
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	6a39      	ldr	r1, [r7, #32]
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f001 fa3f 	bl	8004f3c <I2C_WaitOnBTFFlagUntilTimeout>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00d      	beq.n	8003ae0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac8:	2b04      	cmp	r3, #4
 8003aca:	d107      	bne.n	8003adc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ada:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e01a      	b.n	8003b16 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d194      	bne.n	8003a12 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003af6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b10:	2300      	movs	r3, #0
 8003b12:	e000      	b.n	8003b16 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003b14:	2302      	movs	r3, #2
  }
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3718      	adds	r7, #24
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	00100002 	.word	0x00100002
 8003b24:	ffff0000 	.word	0xffff0000

08003b28 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b08c      	sub	sp, #48	@ 0x30
 8003b2c:	af02      	add	r7, sp, #8
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	607a      	str	r2, [r7, #4]
 8003b32:	461a      	mov	r2, r3
 8003b34:	460b      	mov	r3, r1
 8003b36:	817b      	strh	r3, [r7, #10]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b40:	f7ff fad4 	bl	80030ec <HAL_GetTick>
 8003b44:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b20      	cmp	r3, #32
 8003b50:	f040 824b 	bne.w	8003fea <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	2319      	movs	r3, #25
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	497f      	ldr	r1, [pc, #508]	@ (8003d5c <HAL_I2C_Master_Receive+0x234>)
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f001 f88a 	bl	8004c78 <I2C_WaitOnFlagUntilTimeout>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	e23e      	b.n	8003fec <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d101      	bne.n	8003b7c <HAL_I2C_Master_Receive+0x54>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	e237      	b.n	8003fec <HAL_I2C_Master_Receive+0x4c4>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d007      	beq.n	8003ba2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f042 0201 	orr.w	r2, r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bb0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2222      	movs	r2, #34	@ 0x22
 8003bb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2210      	movs	r2, #16
 8003bbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	893a      	ldrh	r2, [r7, #8]
 8003bd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	4a5f      	ldr	r2, [pc, #380]	@ (8003d60 <HAL_I2C_Master_Receive+0x238>)
 8003be2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003be4:	8979      	ldrh	r1, [r7, #10]
 8003be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f000 fdf8 	bl	80047e0 <I2C_MasterRequestRead>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e1f8      	b.n	8003fec <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d113      	bne.n	8003c2a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c02:	2300      	movs	r3, #0
 8003c04:	61fb      	str	r3, [r7, #28]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	61fb      	str	r3, [r7, #28]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	61fb      	str	r3, [r7, #28]
 8003c16:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	e1cc      	b.n	8003fc4 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d11e      	bne.n	8003c70 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c40:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c42:	b672      	cpsid	i
}
 8003c44:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c46:	2300      	movs	r3, #0
 8003c48:	61bb      	str	r3, [r7, #24]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	61bb      	str	r3, [r7, #24]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	61bb      	str	r3, [r7, #24]
 8003c5a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c6a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003c6c:	b662      	cpsie	i
}
 8003c6e:	e035      	b.n	8003cdc <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d11e      	bne.n	8003cb6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c86:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c88:	b672      	cpsid	i
}
 8003c8a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	617b      	str	r3, [r7, #20]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	617b      	str	r3, [r7, #20]
 8003ca0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cb0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003cb2:	b662      	cpsie	i
}
 8003cb4:	e012      	b.n	8003cdc <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003cc4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	613b      	str	r3, [r7, #16]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	613b      	str	r3, [r7, #16]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	613b      	str	r3, [r7, #16]
 8003cda:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003cdc:	e172      	b.n	8003fc4 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ce2:	2b03      	cmp	r3, #3
 8003ce4:	f200 811f 	bhi.w	8003f26 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d123      	bne.n	8003d38 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cf2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f001 f969 	bl	8004fcc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e173      	b.n	8003fec <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	691a      	ldr	r2, [r3, #16]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d16:	1c5a      	adds	r2, r3, #1
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d20:	3b01      	subs	r3, #1
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d36:	e145      	b.n	8003fc4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d152      	bne.n	8003de6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d42:	9300      	str	r3, [sp, #0]
 8003d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d46:	2200      	movs	r2, #0
 8003d48:	4906      	ldr	r1, [pc, #24]	@ (8003d64 <HAL_I2C_Master_Receive+0x23c>)
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f000 ff94 	bl	8004c78 <I2C_WaitOnFlagUntilTimeout>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d008      	beq.n	8003d68 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e148      	b.n	8003fec <HAL_I2C_Master_Receive+0x4c4>
 8003d5a:	bf00      	nop
 8003d5c:	00100002 	.word	0x00100002
 8003d60:	ffff0000 	.word	0xffff0000
 8003d64:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003d68:	b672      	cpsid	i
}
 8003d6a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	691a      	ldr	r2, [r3, #16]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d86:	b2d2      	uxtb	r2, r2
 8003d88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8e:	1c5a      	adds	r2, r3, #1
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	3b01      	subs	r3, #1
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003dae:	b662      	cpsie	i
}
 8003db0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	691a      	ldr	r2, [r3, #16]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dbc:	b2d2      	uxtb	r2, r2
 8003dbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc4:	1c5a      	adds	r2, r3, #1
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003de4:	e0ee      	b.n	8003fc4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de8:	9300      	str	r3, [sp, #0]
 8003dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dec:	2200      	movs	r2, #0
 8003dee:	4981      	ldr	r1, [pc, #516]	@ (8003ff4 <HAL_I2C_Master_Receive+0x4cc>)
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	f000 ff41 	bl	8004c78 <I2C_WaitOnFlagUntilTimeout>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d001      	beq.n	8003e00 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e0f5      	b.n	8003fec <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e0e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e10:	b672      	cpsid	i
}
 8003e12:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	691a      	ldr	r2, [r3, #16]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e1e:	b2d2      	uxtb	r2, r2
 8003e20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e26:	1c5a      	adds	r2, r3, #1
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e30:	3b01      	subs	r3, #1
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003e46:	4b6c      	ldr	r3, [pc, #432]	@ (8003ff8 <HAL_I2C_Master_Receive+0x4d0>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	08db      	lsrs	r3, r3, #3
 8003e4c:	4a6b      	ldr	r2, [pc, #428]	@ (8003ffc <HAL_I2C_Master_Receive+0x4d4>)
 8003e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e52:	0a1a      	lsrs	r2, r3, #8
 8003e54:	4613      	mov	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4413      	add	r3, r2
 8003e5a:	00da      	lsls	r2, r3, #3
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003e60:	6a3b      	ldr	r3, [r7, #32]
 8003e62:	3b01      	subs	r3, #1
 8003e64:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d118      	bne.n	8003e9e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2220      	movs	r2, #32
 8003e76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e86:	f043 0220 	orr.w	r2, r3, #32
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003e8e:	b662      	cpsie	i
}
 8003e90:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e0a6      	b.n	8003fec <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b04      	cmp	r3, #4
 8003eaa:	d1d9      	bne.n	8003e60 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003eba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	691a      	ldr	r2, [r3, #16]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec6:	b2d2      	uxtb	r2, r2
 8003ec8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ece:	1c5a      	adds	r2, r3, #1
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003eee:	b662      	cpsie	i
}
 8003ef0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	691a      	ldr	r2, [r3, #16]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efc:	b2d2      	uxtb	r2, r2
 8003efe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f24:	e04e      	b.n	8003fc4 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f28:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f001 f84e 	bl	8004fcc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e058      	b.n	8003fec <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	691a      	ldr	r2, [r3, #16]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f44:	b2d2      	uxtb	r2, r2
 8003f46:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4c:	1c5a      	adds	r2, r3, #1
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f56:	3b01      	subs	r3, #1
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	3b01      	subs	r3, #1
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	f003 0304 	and.w	r3, r3, #4
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	d124      	bne.n	8003fc4 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f7e:	2b03      	cmp	r3, #3
 8003f80:	d107      	bne.n	8003f92 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f90:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	691a      	ldr	r2, [r3, #16]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9c:	b2d2      	uxtb	r2, r2
 8003f9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa4:	1c5a      	adds	r2, r3, #1
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f47f ae88 	bne.w	8003cde <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	e000      	b.n	8003fec <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8003fea:	2302      	movs	r3, #2
  }
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3728      	adds	r7, #40	@ 0x28
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	00010004 	.word	0x00010004
 8003ff8:	2000011c 	.word	0x2000011c
 8003ffc:	14f8b589 	.word	0x14f8b589

08004000 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b088      	sub	sp, #32
 8004004:	af02      	add	r7, sp, #8
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	4608      	mov	r0, r1
 800400a:	4611      	mov	r1, r2
 800400c:	461a      	mov	r2, r3
 800400e:	4603      	mov	r3, r0
 8004010:	817b      	strh	r3, [r7, #10]
 8004012:	460b      	mov	r3, r1
 8004014:	813b      	strh	r3, [r7, #8]
 8004016:	4613      	mov	r3, r2
 8004018:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800401a:	f7ff f867 	bl	80030ec <HAL_GetTick>
 800401e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b20      	cmp	r3, #32
 800402a:	f040 80d9 	bne.w	80041e0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	9300      	str	r3, [sp, #0]
 8004032:	2319      	movs	r3, #25
 8004034:	2201      	movs	r2, #1
 8004036:	496d      	ldr	r1, [pc, #436]	@ (80041ec <HAL_I2C_Mem_Write+0x1ec>)
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f000 fe1d 	bl	8004c78 <I2C_WaitOnFlagUntilTimeout>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d001      	beq.n	8004048 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004044:	2302      	movs	r3, #2
 8004046:	e0cc      	b.n	80041e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800404e:	2b01      	cmp	r3, #1
 8004050:	d101      	bne.n	8004056 <HAL_I2C_Mem_Write+0x56>
 8004052:	2302      	movs	r3, #2
 8004054:	e0c5      	b.n	80041e2 <HAL_I2C_Mem_Write+0x1e2>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	2b01      	cmp	r3, #1
 800406a:	d007      	beq.n	800407c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f042 0201 	orr.w	r2, r2, #1
 800407a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800408a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2221      	movs	r2, #33	@ 0x21
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2240      	movs	r2, #64	@ 0x40
 8004098:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6a3a      	ldr	r2, [r7, #32]
 80040a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80040ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	4a4d      	ldr	r2, [pc, #308]	@ (80041f0 <HAL_I2C_Mem_Write+0x1f0>)
 80040bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040be:	88f8      	ldrh	r0, [r7, #6]
 80040c0:	893a      	ldrh	r2, [r7, #8]
 80040c2:	8979      	ldrh	r1, [r7, #10]
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	9301      	str	r3, [sp, #4]
 80040c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	4603      	mov	r3, r0
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f000 fc54 	bl	800497c <I2C_RequestMemoryWrite>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d052      	beq.n	8004180 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e081      	b.n	80041e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f000 fee2 	bl	8004eac <I2C_WaitOnTXEFlagUntilTimeout>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00d      	beq.n	800410a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f2:	2b04      	cmp	r3, #4
 80040f4:	d107      	bne.n	8004106 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004104:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e06b      	b.n	80041e2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410e:	781a      	ldrb	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411a:	1c5a      	adds	r2, r3, #1
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004124:	3b01      	subs	r3, #1
 8004126:	b29a      	uxth	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004130:	b29b      	uxth	r3, r3
 8004132:	3b01      	subs	r3, #1
 8004134:	b29a      	uxth	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	f003 0304 	and.w	r3, r3, #4
 8004144:	2b04      	cmp	r3, #4
 8004146:	d11b      	bne.n	8004180 <HAL_I2C_Mem_Write+0x180>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800414c:	2b00      	cmp	r3, #0
 800414e:	d017      	beq.n	8004180 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004154:	781a      	ldrb	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004160:	1c5a      	adds	r2, r3, #1
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800416a:	3b01      	subs	r3, #1
 800416c:	b29a      	uxth	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004176:	b29b      	uxth	r3, r3
 8004178:	3b01      	subs	r3, #1
 800417a:	b29a      	uxth	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1aa      	bne.n	80040de <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f000 fed5 	bl	8004f3c <I2C_WaitOnBTFFlagUntilTimeout>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00d      	beq.n	80041b4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800419c:	2b04      	cmp	r3, #4
 800419e:	d107      	bne.n	80041b0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041ae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e016      	b.n	80041e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2220      	movs	r2, #32
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80041dc:	2300      	movs	r3, #0
 80041de:	e000      	b.n	80041e2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80041e0:	2302      	movs	r3, #2
  }
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3718      	adds	r7, #24
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	00100002 	.word	0x00100002
 80041f0:	ffff0000 	.word	0xffff0000

080041f4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b08c      	sub	sp, #48	@ 0x30
 80041f8:	af02      	add	r7, sp, #8
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	4608      	mov	r0, r1
 80041fe:	4611      	mov	r1, r2
 8004200:	461a      	mov	r2, r3
 8004202:	4603      	mov	r3, r0
 8004204:	817b      	strh	r3, [r7, #10]
 8004206:	460b      	mov	r3, r1
 8004208:	813b      	strh	r3, [r7, #8]
 800420a:	4613      	mov	r3, r2
 800420c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800420e:	2300      	movs	r3, #0
 8004210:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004212:	f7fe ff6b 	bl	80030ec <HAL_GetTick>
 8004216:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b20      	cmp	r3, #32
 8004222:	f040 8250 	bne.w	80046c6 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	2319      	movs	r3, #25
 800422c:	2201      	movs	r2, #1
 800422e:	4982      	ldr	r1, [pc, #520]	@ (8004438 <HAL_I2C_Mem_Read+0x244>)
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f000 fd21 	bl	8004c78 <I2C_WaitOnFlagUntilTimeout>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d001      	beq.n	8004240 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800423c:	2302      	movs	r3, #2
 800423e:	e243      	b.n	80046c8 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004246:	2b01      	cmp	r3, #1
 8004248:	d101      	bne.n	800424e <HAL_I2C_Mem_Read+0x5a>
 800424a:	2302      	movs	r3, #2
 800424c:	e23c      	b.n	80046c8 <HAL_I2C_Mem_Read+0x4d4>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b01      	cmp	r3, #1
 8004262:	d007      	beq.n	8004274 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 0201 	orr.w	r2, r2, #1
 8004272:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004282:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2222      	movs	r2, #34	@ 0x22
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2240      	movs	r2, #64	@ 0x40
 8004290:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800429e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80042a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	4a62      	ldr	r2, [pc, #392]	@ (800443c <HAL_I2C_Mem_Read+0x248>)
 80042b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042b6:	88f8      	ldrh	r0, [r7, #6]
 80042b8:	893a      	ldrh	r2, [r7, #8]
 80042ba:	8979      	ldrh	r1, [r7, #10]
 80042bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042be:	9301      	str	r3, [sp, #4]
 80042c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042c2:	9300      	str	r3, [sp, #0]
 80042c4:	4603      	mov	r3, r0
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f000 fbee 	bl	8004aa8 <I2C_RequestMemoryRead>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e1f8      	b.n	80046c8 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d113      	bne.n	8004306 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042de:	2300      	movs	r3, #0
 80042e0:	61fb      	str	r3, [r7, #28]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	695b      	ldr	r3, [r3, #20]
 80042e8:	61fb      	str	r3, [r7, #28]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	61fb      	str	r3, [r7, #28]
 80042f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004302:	601a      	str	r2, [r3, #0]
 8004304:	e1cc      	b.n	80046a0 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800430a:	2b01      	cmp	r3, #1
 800430c:	d11e      	bne.n	800434c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800431c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800431e:	b672      	cpsid	i
}
 8004320:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004322:	2300      	movs	r3, #0
 8004324:	61bb      	str	r3, [r7, #24]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	61bb      	str	r3, [r7, #24]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	61bb      	str	r3, [r7, #24]
 8004336:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004346:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004348:	b662      	cpsie	i
}
 800434a:	e035      	b.n	80043b8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004350:	2b02      	cmp	r3, #2
 8004352:	d11e      	bne.n	8004392 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004362:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004364:	b672      	cpsid	i
}
 8004366:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004368:	2300      	movs	r3, #0
 800436a:	617b      	str	r3, [r7, #20]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	617b      	str	r3, [r7, #20]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	617b      	str	r3, [r7, #20]
 800437c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800438c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800438e:	b662      	cpsie	i
}
 8004390:	e012      	b.n	80043b8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80043a0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043a2:	2300      	movs	r3, #0
 80043a4:	613b      	str	r3, [r7, #16]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	613b      	str	r3, [r7, #16]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	613b      	str	r3, [r7, #16]
 80043b6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80043b8:	e172      	b.n	80046a0 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043be:	2b03      	cmp	r3, #3
 80043c0:	f200 811f 	bhi.w	8004602 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d123      	bne.n	8004414 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043ce:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f000 fdfb 	bl	8004fcc <I2C_WaitOnRXNEFlagUntilTimeout>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d001      	beq.n	80043e0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e173      	b.n	80046c8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	691a      	ldr	r2, [r3, #16]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ea:	b2d2      	uxtb	r2, r2
 80043ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f2:	1c5a      	adds	r2, r3, #1
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043fc:	3b01      	subs	r3, #1
 80043fe:	b29a      	uxth	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004408:	b29b      	uxth	r3, r3
 800440a:	3b01      	subs	r3, #1
 800440c:	b29a      	uxth	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004412:	e145      	b.n	80046a0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004418:	2b02      	cmp	r3, #2
 800441a:	d152      	bne.n	80044c2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800441c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004422:	2200      	movs	r2, #0
 8004424:	4906      	ldr	r1, [pc, #24]	@ (8004440 <HAL_I2C_Mem_Read+0x24c>)
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f000 fc26 	bl	8004c78 <I2C_WaitOnFlagUntilTimeout>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d008      	beq.n	8004444 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e148      	b.n	80046c8 <HAL_I2C_Mem_Read+0x4d4>
 8004436:	bf00      	nop
 8004438:	00100002 	.word	0x00100002
 800443c:	ffff0000 	.word	0xffff0000
 8004440:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004444:	b672      	cpsid	i
}
 8004446:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004456:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	691a      	ldr	r2, [r3, #16]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004462:	b2d2      	uxtb	r2, r2
 8004464:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446a:	1c5a      	adds	r2, r3, #1
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004474:	3b01      	subs	r3, #1
 8004476:	b29a      	uxth	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004480:	b29b      	uxth	r3, r3
 8004482:	3b01      	subs	r3, #1
 8004484:	b29a      	uxth	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800448a:	b662      	cpsie	i
}
 800448c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	691a      	ldr	r2, [r3, #16]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004498:	b2d2      	uxtb	r2, r2
 800449a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a0:	1c5a      	adds	r2, r3, #1
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044aa:	3b01      	subs	r3, #1
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	3b01      	subs	r3, #1
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80044c0:	e0ee      	b.n	80046a0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044c8:	2200      	movs	r2, #0
 80044ca:	4981      	ldr	r1, [pc, #516]	@ (80046d0 <HAL_I2C_Mem_Read+0x4dc>)
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f000 fbd3 	bl	8004c78 <I2C_WaitOnFlagUntilTimeout>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d001      	beq.n	80044dc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e0f5      	b.n	80046c8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80044ec:	b672      	cpsid	i
}
 80044ee:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	691a      	ldr	r2, [r3, #16]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fa:	b2d2      	uxtb	r2, r2
 80044fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004502:	1c5a      	adds	r2, r3, #1
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800450c:	3b01      	subs	r3, #1
 800450e:	b29a      	uxth	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004518:	b29b      	uxth	r3, r3
 800451a:	3b01      	subs	r3, #1
 800451c:	b29a      	uxth	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004522:	4b6c      	ldr	r3, [pc, #432]	@ (80046d4 <HAL_I2C_Mem_Read+0x4e0>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	08db      	lsrs	r3, r3, #3
 8004528:	4a6b      	ldr	r2, [pc, #428]	@ (80046d8 <HAL_I2C_Mem_Read+0x4e4>)
 800452a:	fba2 2303 	umull	r2, r3, r2, r3
 800452e:	0a1a      	lsrs	r2, r3, #8
 8004530:	4613      	mov	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4413      	add	r3, r2
 8004536:	00da      	lsls	r2, r3, #3
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	3b01      	subs	r3, #1
 8004540:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004542:	6a3b      	ldr	r3, [r7, #32]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d118      	bne.n	800457a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2220      	movs	r2, #32
 8004552:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004562:	f043 0220 	orr.w	r2, r3, #32
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800456a:	b662      	cpsie	i
}
 800456c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e0a6      	b.n	80046c8 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	2b04      	cmp	r3, #4
 8004586:	d1d9      	bne.n	800453c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004596:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	691a      	ldr	r2, [r3, #16]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a2:	b2d2      	uxtb	r2, r2
 80045a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045aa:	1c5a      	adds	r2, r3, #1
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045b4:	3b01      	subs	r3, #1
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	3b01      	subs	r3, #1
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80045ca:	b662      	cpsie	i
}
 80045cc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	691a      	ldr	r2, [r3, #16]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d8:	b2d2      	uxtb	r2, r2
 80045da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e0:	1c5a      	adds	r2, r3, #1
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ea:	3b01      	subs	r3, #1
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	3b01      	subs	r3, #1
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004600:	e04e      	b.n	80046a0 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004602:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004604:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 fce0 	bl	8004fcc <I2C_WaitOnRXNEFlagUntilTimeout>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e058      	b.n	80046c8 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	691a      	ldr	r2, [r3, #16]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004620:	b2d2      	uxtb	r2, r2
 8004622:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004628:	1c5a      	adds	r2, r3, #1
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004632:	3b01      	subs	r3, #1
 8004634:	b29a      	uxth	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800463e:	b29b      	uxth	r3, r3
 8004640:	3b01      	subs	r3, #1
 8004642:	b29a      	uxth	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	f003 0304 	and.w	r3, r3, #4
 8004652:	2b04      	cmp	r3, #4
 8004654:	d124      	bne.n	80046a0 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800465a:	2b03      	cmp	r3, #3
 800465c:	d107      	bne.n	800466e <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800466c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	691a      	ldr	r2, [r3, #16]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004678:	b2d2      	uxtb	r2, r2
 800467a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004680:	1c5a      	adds	r2, r3, #1
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800468a:	3b01      	subs	r3, #1
 800468c:	b29a      	uxth	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004696:	b29b      	uxth	r3, r3
 8004698:	3b01      	subs	r3, #1
 800469a:	b29a      	uxth	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f47f ae88 	bne.w	80043ba <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2220      	movs	r2, #32
 80046ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80046c2:	2300      	movs	r3, #0
 80046c4:	e000      	b.n	80046c8 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80046c6:	2302      	movs	r3, #2
  }
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3728      	adds	r7, #40	@ 0x28
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	00010004 	.word	0x00010004
 80046d4:	2000011c 	.word	0x2000011c
 80046d8:	14f8b589 	.word	0x14f8b589

080046dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b088      	sub	sp, #32
 80046e0:	af02      	add	r7, sp, #8
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	607a      	str	r2, [r7, #4]
 80046e6:	603b      	str	r3, [r7, #0]
 80046e8:	460b      	mov	r3, r1
 80046ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	2b08      	cmp	r3, #8
 80046f6:	d006      	beq.n	8004706 <I2C_MasterRequestWrite+0x2a>
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d003      	beq.n	8004706 <I2C_MasterRequestWrite+0x2a>
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004704:	d108      	bne.n	8004718 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	e00b      	b.n	8004730 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800471c:	2b12      	cmp	r3, #18
 800471e:	d107      	bne.n	8004730 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800472e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	9300      	str	r3, [sp, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 fa9b 	bl	8004c78 <I2C_WaitOnFlagUntilTimeout>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00d      	beq.n	8004764 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004752:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004756:	d103      	bne.n	8004760 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800475e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e035      	b.n	80047d0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800476c:	d108      	bne.n	8004780 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800476e:	897b      	ldrh	r3, [r7, #10]
 8004770:	b2db      	uxtb	r3, r3
 8004772:	461a      	mov	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800477c:	611a      	str	r2, [r3, #16]
 800477e:	e01b      	b.n	80047b8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004780:	897b      	ldrh	r3, [r7, #10]
 8004782:	11db      	asrs	r3, r3, #7
 8004784:	b2db      	uxtb	r3, r3
 8004786:	f003 0306 	and.w	r3, r3, #6
 800478a:	b2db      	uxtb	r3, r3
 800478c:	f063 030f 	orn	r3, r3, #15
 8004790:	b2da      	uxtb	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	490e      	ldr	r1, [pc, #56]	@ (80047d8 <I2C_MasterRequestWrite+0xfc>)
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f000 fae4 	bl	8004d6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e010      	b.n	80047d0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80047ae:	897b      	ldrh	r3, [r7, #10]
 80047b0:	b2da      	uxtb	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	4907      	ldr	r1, [pc, #28]	@ (80047dc <I2C_MasterRequestWrite+0x100>)
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f000 fad4 	bl	8004d6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d001      	beq.n	80047ce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e000      	b.n	80047d0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3718      	adds	r7, #24
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	00010008 	.word	0x00010008
 80047dc:	00010002 	.word	0x00010002

080047e0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b088      	sub	sp, #32
 80047e4:	af02      	add	r7, sp, #8
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	607a      	str	r2, [r7, #4]
 80047ea:	603b      	str	r3, [r7, #0]
 80047ec:	460b      	mov	r3, r1
 80047ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004804:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	2b08      	cmp	r3, #8
 800480a:	d006      	beq.n	800481a <I2C_MasterRequestRead+0x3a>
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d003      	beq.n	800481a <I2C_MasterRequestRead+0x3a>
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004818:	d108      	bne.n	800482c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	e00b      	b.n	8004844 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004830:	2b11      	cmp	r3, #17
 8004832:	d107      	bne.n	8004844 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004842:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	9300      	str	r3, [sp, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f000 fa11 	bl	8004c78 <I2C_WaitOnFlagUntilTimeout>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00d      	beq.n	8004878 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004866:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800486a:	d103      	bne.n	8004874 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004872:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e079      	b.n	800496c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004880:	d108      	bne.n	8004894 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004882:	897b      	ldrh	r3, [r7, #10]
 8004884:	b2db      	uxtb	r3, r3
 8004886:	f043 0301 	orr.w	r3, r3, #1
 800488a:	b2da      	uxtb	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	611a      	str	r2, [r3, #16]
 8004892:	e05f      	b.n	8004954 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004894:	897b      	ldrh	r3, [r7, #10]
 8004896:	11db      	asrs	r3, r3, #7
 8004898:	b2db      	uxtb	r3, r3
 800489a:	f003 0306 	and.w	r3, r3, #6
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	f063 030f 	orn	r3, r3, #15
 80048a4:	b2da      	uxtb	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	4930      	ldr	r1, [pc, #192]	@ (8004974 <I2C_MasterRequestRead+0x194>)
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	f000 fa5a 	bl	8004d6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e054      	b.n	800496c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80048c2:	897b      	ldrh	r3, [r7, #10]
 80048c4:	b2da      	uxtb	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	4929      	ldr	r1, [pc, #164]	@ (8004978 <I2C_MasterRequestRead+0x198>)
 80048d2:	68f8      	ldr	r0, [r7, #12]
 80048d4:	f000 fa4a 	bl	8004d6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d001      	beq.n	80048e2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e044      	b.n	800496c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048e2:	2300      	movs	r3, #0
 80048e4:	613b      	str	r3, [r7, #16]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	613b      	str	r3, [r7, #16]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	613b      	str	r3, [r7, #16]
 80048f6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004906:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f000 f9af 	bl	8004c78 <I2C_WaitOnFlagUntilTimeout>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00d      	beq.n	800493c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800492a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800492e:	d103      	bne.n	8004938 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004936:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e017      	b.n	800496c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800493c:	897b      	ldrh	r3, [r7, #10]
 800493e:	11db      	asrs	r3, r3, #7
 8004940:	b2db      	uxtb	r3, r3
 8004942:	f003 0306 	and.w	r3, r3, #6
 8004946:	b2db      	uxtb	r3, r3
 8004948:	f063 030e 	orn	r3, r3, #14
 800494c:	b2da      	uxtb	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	4907      	ldr	r1, [pc, #28]	@ (8004978 <I2C_MasterRequestRead+0x198>)
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f000 fa06 	bl	8004d6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e000      	b.n	800496c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3718      	adds	r7, #24
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	00010008 	.word	0x00010008
 8004978:	00010002 	.word	0x00010002

0800497c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b088      	sub	sp, #32
 8004980:	af02      	add	r7, sp, #8
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	4608      	mov	r0, r1
 8004986:	4611      	mov	r1, r2
 8004988:	461a      	mov	r2, r3
 800498a:	4603      	mov	r3, r0
 800498c:	817b      	strh	r3, [r7, #10]
 800498e:	460b      	mov	r3, r1
 8004990:	813b      	strh	r3, [r7, #8]
 8004992:	4613      	mov	r3, r2
 8004994:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a8:	9300      	str	r3, [sp, #0]
 80049aa:	6a3b      	ldr	r3, [r7, #32]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f000 f960 	bl	8004c78 <I2C_WaitOnFlagUntilTimeout>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00d      	beq.n	80049da <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049cc:	d103      	bne.n	80049d6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049d4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e05f      	b.n	8004a9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049da:	897b      	ldrh	r3, [r7, #10]
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	461a      	mov	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80049e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ec:	6a3a      	ldr	r2, [r7, #32]
 80049ee:	492d      	ldr	r1, [pc, #180]	@ (8004aa4 <I2C_RequestMemoryWrite+0x128>)
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f000 f9bb 	bl	8004d6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e04c      	b.n	8004a9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a00:	2300      	movs	r3, #0
 8004a02:	617b      	str	r3, [r7, #20]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	617b      	str	r3, [r7, #20]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	617b      	str	r3, [r7, #20]
 8004a14:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a18:	6a39      	ldr	r1, [r7, #32]
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f000 fa46 	bl	8004eac <I2C_WaitOnTXEFlagUntilTimeout>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00d      	beq.n	8004a42 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a2a:	2b04      	cmp	r3, #4
 8004a2c:	d107      	bne.n	8004a3e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a3c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e02b      	b.n	8004a9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a42:	88fb      	ldrh	r3, [r7, #6]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d105      	bne.n	8004a54 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a48:	893b      	ldrh	r3, [r7, #8]
 8004a4a:	b2da      	uxtb	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	611a      	str	r2, [r3, #16]
 8004a52:	e021      	b.n	8004a98 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a54:	893b      	ldrh	r3, [r7, #8]
 8004a56:	0a1b      	lsrs	r3, r3, #8
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	b2da      	uxtb	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a64:	6a39      	ldr	r1, [r7, #32]
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f000 fa20 	bl	8004eac <I2C_WaitOnTXEFlagUntilTimeout>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00d      	beq.n	8004a8e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a76:	2b04      	cmp	r3, #4
 8004a78:	d107      	bne.n	8004a8a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a88:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e005      	b.n	8004a9a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a8e:	893b      	ldrh	r3, [r7, #8]
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3718      	adds	r7, #24
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	00010002 	.word	0x00010002

08004aa8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b088      	sub	sp, #32
 8004aac:	af02      	add	r7, sp, #8
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	4608      	mov	r0, r1
 8004ab2:	4611      	mov	r1, r2
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	817b      	strh	r3, [r7, #10]
 8004aba:	460b      	mov	r3, r1
 8004abc:	813b      	strh	r3, [r7, #8]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004ad0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ae0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	6a3b      	ldr	r3, [r7, #32]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f000 f8c2 	bl	8004c78 <I2C_WaitOnFlagUntilTimeout>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00d      	beq.n	8004b16 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b08:	d103      	bne.n	8004b12 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b10:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e0aa      	b.n	8004c6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b16:	897b      	ldrh	r3, [r7, #10]
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004b24:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b28:	6a3a      	ldr	r2, [r7, #32]
 8004b2a:	4952      	ldr	r1, [pc, #328]	@ (8004c74 <I2C_RequestMemoryRead+0x1cc>)
 8004b2c:	68f8      	ldr	r0, [r7, #12]
 8004b2e:	f000 f91d 	bl	8004d6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d001      	beq.n	8004b3c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e097      	b.n	8004c6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	617b      	str	r3, [r7, #20]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	617b      	str	r3, [r7, #20]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	617b      	str	r3, [r7, #20]
 8004b50:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b54:	6a39      	ldr	r1, [r7, #32]
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f000 f9a8 	bl	8004eac <I2C_WaitOnTXEFlagUntilTimeout>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00d      	beq.n	8004b7e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b66:	2b04      	cmp	r3, #4
 8004b68:	d107      	bne.n	8004b7a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b78:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e076      	b.n	8004c6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b7e:	88fb      	ldrh	r3, [r7, #6]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d105      	bne.n	8004b90 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b84:	893b      	ldrh	r3, [r7, #8]
 8004b86:	b2da      	uxtb	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	611a      	str	r2, [r3, #16]
 8004b8e:	e021      	b.n	8004bd4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b90:	893b      	ldrh	r3, [r7, #8]
 8004b92:	0a1b      	lsrs	r3, r3, #8
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	b2da      	uxtb	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ba0:	6a39      	ldr	r1, [r7, #32]
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f000 f982 	bl	8004eac <I2C_WaitOnTXEFlagUntilTimeout>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00d      	beq.n	8004bca <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb2:	2b04      	cmp	r3, #4
 8004bb4:	d107      	bne.n	8004bc6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bc4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e050      	b.n	8004c6c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004bca:	893b      	ldrh	r3, [r7, #8]
 8004bcc:	b2da      	uxtb	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bd6:	6a39      	ldr	r1, [r7, #32]
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f000 f967 	bl	8004eac <I2C_WaitOnTXEFlagUntilTimeout>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00d      	beq.n	8004c00 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	d107      	bne.n	8004bfc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bfa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e035      	b.n	8004c6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c0e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	6a3b      	ldr	r3, [r7, #32]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f000 f82b 	bl	8004c78 <I2C_WaitOnFlagUntilTimeout>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00d      	beq.n	8004c44 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c36:	d103      	bne.n	8004c40 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c3e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e013      	b.n	8004c6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c44:	897b      	ldrh	r3, [r7, #10]
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	f043 0301 	orr.w	r3, r3, #1
 8004c4c:	b2da      	uxtb	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c56:	6a3a      	ldr	r2, [r7, #32]
 8004c58:	4906      	ldr	r1, [pc, #24]	@ (8004c74 <I2C_RequestMemoryRead+0x1cc>)
 8004c5a:	68f8      	ldr	r0, [r7, #12]
 8004c5c:	f000 f886 	bl	8004d6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d001      	beq.n	8004c6a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e000      	b.n	8004c6c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3718      	adds	r7, #24
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	00010002 	.word	0x00010002

08004c78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	603b      	str	r3, [r7, #0]
 8004c84:	4613      	mov	r3, r2
 8004c86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c88:	e048      	b.n	8004d1c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c90:	d044      	beq.n	8004d1c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c92:	f7fe fa2b 	bl	80030ec <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	683a      	ldr	r2, [r7, #0]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d302      	bcc.n	8004ca8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d139      	bne.n	8004d1c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	0c1b      	lsrs	r3, r3, #16
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d10d      	bne.n	8004cce <I2C_WaitOnFlagUntilTimeout+0x56>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	695b      	ldr	r3, [r3, #20]
 8004cb8:	43da      	mvns	r2, r3
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	bf0c      	ite	eq
 8004cc4:	2301      	moveq	r3, #1
 8004cc6:	2300      	movne	r3, #0
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	461a      	mov	r2, r3
 8004ccc:	e00c      	b.n	8004ce8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	43da      	mvns	r2, r3
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	4013      	ands	r3, r2
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	bf0c      	ite	eq
 8004ce0:	2301      	moveq	r3, #1
 8004ce2:	2300      	movne	r3, #0
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	79fb      	ldrb	r3, [r7, #7]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d116      	bne.n	8004d1c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d08:	f043 0220 	orr.w	r2, r3, #32
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e023      	b.n	8004d64 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	0c1b      	lsrs	r3, r3, #16
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d10d      	bne.n	8004d42 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	695b      	ldr	r3, [r3, #20]
 8004d2c:	43da      	mvns	r2, r3
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	4013      	ands	r3, r2
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	bf0c      	ite	eq
 8004d38:	2301      	moveq	r3, #1
 8004d3a:	2300      	movne	r3, #0
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	461a      	mov	r2, r3
 8004d40:	e00c      	b.n	8004d5c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	699b      	ldr	r3, [r3, #24]
 8004d48:	43da      	mvns	r2, r3
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	bf0c      	ite	eq
 8004d54:	2301      	moveq	r3, #1
 8004d56:	2300      	movne	r3, #0
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	79fb      	ldrb	r3, [r7, #7]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d093      	beq.n	8004c8a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
 8004d78:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d7a:	e071      	b.n	8004e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d8a:	d123      	bne.n	8004dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d9a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004da4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2220      	movs	r2, #32
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc0:	f043 0204 	orr.w	r2, r3, #4
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e067      	b.n	8004ea4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dda:	d041      	beq.n	8004e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ddc:	f7fe f986 	bl	80030ec <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d302      	bcc.n	8004df2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d136      	bne.n	8004e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	0c1b      	lsrs	r3, r3, #16
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d10c      	bne.n	8004e16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	43da      	mvns	r2, r3
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	4013      	ands	r3, r2
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	bf14      	ite	ne
 8004e0e:	2301      	movne	r3, #1
 8004e10:	2300      	moveq	r3, #0
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	e00b      	b.n	8004e2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	43da      	mvns	r2, r3
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	4013      	ands	r3, r2
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	bf14      	ite	ne
 8004e28:	2301      	movne	r3, #1
 8004e2a:	2300      	moveq	r3, #0
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d016      	beq.n	8004e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e4c:	f043 0220 	orr.w	r2, r3, #32
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e021      	b.n	8004ea4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	0c1b      	lsrs	r3, r3, #16
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d10c      	bne.n	8004e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	695b      	ldr	r3, [r3, #20]
 8004e70:	43da      	mvns	r2, r3
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	4013      	ands	r3, r2
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	bf14      	ite	ne
 8004e7c:	2301      	movne	r3, #1
 8004e7e:	2300      	moveq	r3, #0
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	e00b      	b.n	8004e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	43da      	mvns	r2, r3
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	4013      	ands	r3, r2
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	bf14      	ite	ne
 8004e96:	2301      	movne	r3, #1
 8004e98:	2300      	moveq	r3, #0
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f47f af6d 	bne.w	8004d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004eb8:	e034      	b.n	8004f24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f000 f8e3 	bl	8005086 <I2C_IsAcknowledgeFailed>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e034      	b.n	8004f34 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed0:	d028      	beq.n	8004f24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ed2:	f7fe f90b 	bl	80030ec <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d302      	bcc.n	8004ee8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d11d      	bne.n	8004f24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ef2:	2b80      	cmp	r3, #128	@ 0x80
 8004ef4:	d016      	beq.n	8004f24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2220      	movs	r2, #32
 8004f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f10:	f043 0220 	orr.w	r2, r3, #32
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e007      	b.n	8004f34 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f2e:	2b80      	cmp	r3, #128	@ 0x80
 8004f30:	d1c3      	bne.n	8004eba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f48:	e034      	b.n	8004fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	f000 f89b 	bl	8005086 <I2C_IsAcknowledgeFailed>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d001      	beq.n	8004f5a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e034      	b.n	8004fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f60:	d028      	beq.n	8004fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f62:	f7fe f8c3 	bl	80030ec <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d302      	bcc.n	8004f78 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d11d      	bne.n	8004fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	f003 0304 	and.w	r3, r3, #4
 8004f82:	2b04      	cmp	r3, #4
 8004f84:	d016      	beq.n	8004fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2220      	movs	r2, #32
 8004f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa0:	f043 0220 	orr.w	r2, r3, #32
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e007      	b.n	8004fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	f003 0304 	and.w	r3, r3, #4
 8004fbe:	2b04      	cmp	r3, #4
 8004fc0:	d1c3      	bne.n	8004f4a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004fd8:	e049      	b.n	800506e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	695b      	ldr	r3, [r3, #20]
 8004fe0:	f003 0310 	and.w	r3, r3, #16
 8004fe4:	2b10      	cmp	r3, #16
 8004fe6:	d119      	bne.n	800501c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f06f 0210 	mvn.w	r2, #16
 8004ff0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e030      	b.n	800507e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800501c:	f7fe f866 	bl	80030ec <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	68ba      	ldr	r2, [r7, #8]
 8005028:	429a      	cmp	r2, r3
 800502a:	d302      	bcc.n	8005032 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d11d      	bne.n	800506e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800503c:	2b40      	cmp	r3, #64	@ 0x40
 800503e:	d016      	beq.n	800506e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2220      	movs	r2, #32
 800504a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800505a:	f043 0220 	orr.w	r2, r3, #32
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e007      	b.n	800507e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	695b      	ldr	r3, [r3, #20]
 8005074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005078:	2b40      	cmp	r3, #64	@ 0x40
 800507a:	d1ae      	bne.n	8004fda <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005086:	b480      	push	{r7}
 8005088:	b083      	sub	sp, #12
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005098:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800509c:	d11b      	bne.n	80050d6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80050a6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2220      	movs	r2, #32
 80050b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c2:	f043 0204 	orr.w	r2, r3, #4
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e000      	b.n	80050d8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	bc80      	pop	{r7}
 80050e0:	4770      	bx	lr
	...

080050e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b086      	sub	sp, #24
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e272      	b.n	80055dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0301 	and.w	r3, r3, #1
 80050fe:	2b00      	cmp	r3, #0
 8005100:	f000 8087 	beq.w	8005212 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005104:	4b92      	ldr	r3, [pc, #584]	@ (8005350 <HAL_RCC_OscConfig+0x26c>)
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f003 030c 	and.w	r3, r3, #12
 800510c:	2b04      	cmp	r3, #4
 800510e:	d00c      	beq.n	800512a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005110:	4b8f      	ldr	r3, [pc, #572]	@ (8005350 <HAL_RCC_OscConfig+0x26c>)
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f003 030c 	and.w	r3, r3, #12
 8005118:	2b08      	cmp	r3, #8
 800511a:	d112      	bne.n	8005142 <HAL_RCC_OscConfig+0x5e>
 800511c:	4b8c      	ldr	r3, [pc, #560]	@ (8005350 <HAL_RCC_OscConfig+0x26c>)
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005124:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005128:	d10b      	bne.n	8005142 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800512a:	4b89      	ldr	r3, [pc, #548]	@ (8005350 <HAL_RCC_OscConfig+0x26c>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d06c      	beq.n	8005210 <HAL_RCC_OscConfig+0x12c>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d168      	bne.n	8005210 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e24c      	b.n	80055dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800514a:	d106      	bne.n	800515a <HAL_RCC_OscConfig+0x76>
 800514c:	4b80      	ldr	r3, [pc, #512]	@ (8005350 <HAL_RCC_OscConfig+0x26c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a7f      	ldr	r2, [pc, #508]	@ (8005350 <HAL_RCC_OscConfig+0x26c>)
 8005152:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005156:	6013      	str	r3, [r2, #0]
 8005158:	e02e      	b.n	80051b8 <HAL_RCC_OscConfig+0xd4>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10c      	bne.n	800517c <HAL_RCC_OscConfig+0x98>
 8005162:	4b7b      	ldr	r3, [pc, #492]	@ (8005350 <HAL_RCC_OscConfig+0x26c>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a7a      	ldr	r2, [pc, #488]	@ (8005350 <HAL_RCC_OscConfig+0x26c>)
 8005168:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800516c:	6013      	str	r3, [r2, #0]
 800516e:	4b78      	ldr	r3, [pc, #480]	@ (8005350 <HAL_RCC_OscConfig+0x26c>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a77      	ldr	r2, [pc, #476]	@ (8005350 <HAL_RCC_OscConfig+0x26c>)
 8005174:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005178:	6013      	str	r3, [r2, #0]
 800517a:	e01d      	b.n	80051b8 <HAL_RCC_OscConfig+0xd4>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005184:	d10c      	bne.n	80051a0 <HAL_RCC_OscConfig+0xbc>
 8005186:	4b72      	ldr	r3, [pc, #456]	@ (8005350 <HAL_RCC_OscConfig+0x26c>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a71      	ldr	r2, [pc, #452]	@ (8005350 <HAL_RCC_OscConfig+0x26c>)
 800518c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005190:	6013      	str	r3, [r2, #0]
 8005192:	4b6f      	ldr	r3, [pc, #444]	@ (8005350 <HAL_RCC_OscConfig+0x26c>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a6e      	ldr	r2, [pc, #440]	@ (8005350 <HAL_RCC_OscConfig+0x26c>)
 8005198:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800519c:	6013      	str	r3, [r2, #0]
 800519e:	e00b      	b.n	80051b8 <HAL_RCC_OscConfig+0xd4>
 80051a0:	4b6b      	ldr	r3, [pc, #428]	@ (8005350 <HAL_RCC_OscConfig+0x26c>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a6a      	ldr	r2, [pc, #424]	@ (8005350 <HAL_RCC_OscConfig+0x26c>)
 80051a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051aa:	6013      	str	r3, [r2, #0]
 80051ac:	4b68      	ldr	r3, [pc, #416]	@ (8005350 <HAL_RCC_OscConfig+0x26c>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a67      	ldr	r2, [pc, #412]	@ (8005350 <HAL_RCC_OscConfig+0x26c>)
 80051b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80051b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d013      	beq.n	80051e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051c0:	f7fd ff94 	bl	80030ec <HAL_GetTick>
 80051c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051c6:	e008      	b.n	80051da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051c8:	f7fd ff90 	bl	80030ec <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b64      	cmp	r3, #100	@ 0x64
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e200      	b.n	80055dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051da:	4b5d      	ldr	r3, [pc, #372]	@ (8005350 <HAL_RCC_OscConfig+0x26c>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d0f0      	beq.n	80051c8 <HAL_RCC_OscConfig+0xe4>
 80051e6:	e014      	b.n	8005212 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051e8:	f7fd ff80 	bl	80030ec <HAL_GetTick>
 80051ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051ee:	e008      	b.n	8005202 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051f0:	f7fd ff7c 	bl	80030ec <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b64      	cmp	r3, #100	@ 0x64
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e1ec      	b.n	80055dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005202:	4b53      	ldr	r3, [pc, #332]	@ (8005350 <HAL_RCC_OscConfig+0x26c>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1f0      	bne.n	80051f0 <HAL_RCC_OscConfig+0x10c>
 800520e:	e000      	b.n	8005212 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005210:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d063      	beq.n	80052e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800521e:	4b4c      	ldr	r3, [pc, #304]	@ (8005350 <HAL_RCC_OscConfig+0x26c>)
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f003 030c 	and.w	r3, r3, #12
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00b      	beq.n	8005242 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800522a:	4b49      	ldr	r3, [pc, #292]	@ (8005350 <HAL_RCC_OscConfig+0x26c>)
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f003 030c 	and.w	r3, r3, #12
 8005232:	2b08      	cmp	r3, #8
 8005234:	d11c      	bne.n	8005270 <HAL_RCC_OscConfig+0x18c>
 8005236:	4b46      	ldr	r3, [pc, #280]	@ (8005350 <HAL_RCC_OscConfig+0x26c>)
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d116      	bne.n	8005270 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005242:	4b43      	ldr	r3, [pc, #268]	@ (8005350 <HAL_RCC_OscConfig+0x26c>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0302 	and.w	r3, r3, #2
 800524a:	2b00      	cmp	r3, #0
 800524c:	d005      	beq.n	800525a <HAL_RCC_OscConfig+0x176>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d001      	beq.n	800525a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e1c0      	b.n	80055dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800525a:	4b3d      	ldr	r3, [pc, #244]	@ (8005350 <HAL_RCC_OscConfig+0x26c>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	00db      	lsls	r3, r3, #3
 8005268:	4939      	ldr	r1, [pc, #228]	@ (8005350 <HAL_RCC_OscConfig+0x26c>)
 800526a:	4313      	orrs	r3, r2
 800526c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800526e:	e03a      	b.n	80052e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d020      	beq.n	80052ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005278:	4b36      	ldr	r3, [pc, #216]	@ (8005354 <HAL_RCC_OscConfig+0x270>)
 800527a:	2201      	movs	r2, #1
 800527c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800527e:	f7fd ff35 	bl	80030ec <HAL_GetTick>
 8005282:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005284:	e008      	b.n	8005298 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005286:	f7fd ff31 	bl	80030ec <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	2b02      	cmp	r3, #2
 8005292:	d901      	bls.n	8005298 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e1a1      	b.n	80055dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005298:	4b2d      	ldr	r3, [pc, #180]	@ (8005350 <HAL_RCC_OscConfig+0x26c>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0302 	and.w	r3, r3, #2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d0f0      	beq.n	8005286 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052a4:	4b2a      	ldr	r3, [pc, #168]	@ (8005350 <HAL_RCC_OscConfig+0x26c>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	00db      	lsls	r3, r3, #3
 80052b2:	4927      	ldr	r1, [pc, #156]	@ (8005350 <HAL_RCC_OscConfig+0x26c>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	600b      	str	r3, [r1, #0]
 80052b8:	e015      	b.n	80052e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052ba:	4b26      	ldr	r3, [pc, #152]	@ (8005354 <HAL_RCC_OscConfig+0x270>)
 80052bc:	2200      	movs	r2, #0
 80052be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052c0:	f7fd ff14 	bl	80030ec <HAL_GetTick>
 80052c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052c6:	e008      	b.n	80052da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052c8:	f7fd ff10 	bl	80030ec <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d901      	bls.n	80052da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e180      	b.n	80055dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052da:	4b1d      	ldr	r3, [pc, #116]	@ (8005350 <HAL_RCC_OscConfig+0x26c>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0302 	and.w	r3, r3, #2
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1f0      	bne.n	80052c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0308 	and.w	r3, r3, #8
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d03a      	beq.n	8005368 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d019      	beq.n	800532e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052fa:	4b17      	ldr	r3, [pc, #92]	@ (8005358 <HAL_RCC_OscConfig+0x274>)
 80052fc:	2201      	movs	r2, #1
 80052fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005300:	f7fd fef4 	bl	80030ec <HAL_GetTick>
 8005304:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005306:	e008      	b.n	800531a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005308:	f7fd fef0 	bl	80030ec <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	2b02      	cmp	r3, #2
 8005314:	d901      	bls.n	800531a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e160      	b.n	80055dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800531a:	4b0d      	ldr	r3, [pc, #52]	@ (8005350 <HAL_RCC_OscConfig+0x26c>)
 800531c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800531e:	f003 0302 	and.w	r3, r3, #2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d0f0      	beq.n	8005308 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005326:	2001      	movs	r0, #1
 8005328:	f000 fafe 	bl	8005928 <RCC_Delay>
 800532c:	e01c      	b.n	8005368 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800532e:	4b0a      	ldr	r3, [pc, #40]	@ (8005358 <HAL_RCC_OscConfig+0x274>)
 8005330:	2200      	movs	r2, #0
 8005332:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005334:	f7fd feda 	bl	80030ec <HAL_GetTick>
 8005338:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800533a:	e00f      	b.n	800535c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800533c:	f7fd fed6 	bl	80030ec <HAL_GetTick>
 8005340:	4602      	mov	r2, r0
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	2b02      	cmp	r3, #2
 8005348:	d908      	bls.n	800535c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e146      	b.n	80055dc <HAL_RCC_OscConfig+0x4f8>
 800534e:	bf00      	nop
 8005350:	40021000 	.word	0x40021000
 8005354:	42420000 	.word	0x42420000
 8005358:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800535c:	4b92      	ldr	r3, [pc, #584]	@ (80055a8 <HAL_RCC_OscConfig+0x4c4>)
 800535e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1e9      	bne.n	800533c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0304 	and.w	r3, r3, #4
 8005370:	2b00      	cmp	r3, #0
 8005372:	f000 80a6 	beq.w	80054c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005376:	2300      	movs	r3, #0
 8005378:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800537a:	4b8b      	ldr	r3, [pc, #556]	@ (80055a8 <HAL_RCC_OscConfig+0x4c4>)
 800537c:	69db      	ldr	r3, [r3, #28]
 800537e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10d      	bne.n	80053a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005386:	4b88      	ldr	r3, [pc, #544]	@ (80055a8 <HAL_RCC_OscConfig+0x4c4>)
 8005388:	69db      	ldr	r3, [r3, #28]
 800538a:	4a87      	ldr	r2, [pc, #540]	@ (80055a8 <HAL_RCC_OscConfig+0x4c4>)
 800538c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005390:	61d3      	str	r3, [r2, #28]
 8005392:	4b85      	ldr	r3, [pc, #532]	@ (80055a8 <HAL_RCC_OscConfig+0x4c4>)
 8005394:	69db      	ldr	r3, [r3, #28]
 8005396:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800539a:	60bb      	str	r3, [r7, #8]
 800539c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800539e:	2301      	movs	r3, #1
 80053a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053a2:	4b82      	ldr	r3, [pc, #520]	@ (80055ac <HAL_RCC_OscConfig+0x4c8>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d118      	bne.n	80053e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053ae:	4b7f      	ldr	r3, [pc, #508]	@ (80055ac <HAL_RCC_OscConfig+0x4c8>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a7e      	ldr	r2, [pc, #504]	@ (80055ac <HAL_RCC_OscConfig+0x4c8>)
 80053b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053ba:	f7fd fe97 	bl	80030ec <HAL_GetTick>
 80053be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053c0:	e008      	b.n	80053d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053c2:	f7fd fe93 	bl	80030ec <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	2b64      	cmp	r3, #100	@ 0x64
 80053ce:	d901      	bls.n	80053d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e103      	b.n	80055dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053d4:	4b75      	ldr	r3, [pc, #468]	@ (80055ac <HAL_RCC_OscConfig+0x4c8>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d0f0      	beq.n	80053c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d106      	bne.n	80053f6 <HAL_RCC_OscConfig+0x312>
 80053e8:	4b6f      	ldr	r3, [pc, #444]	@ (80055a8 <HAL_RCC_OscConfig+0x4c4>)
 80053ea:	6a1b      	ldr	r3, [r3, #32]
 80053ec:	4a6e      	ldr	r2, [pc, #440]	@ (80055a8 <HAL_RCC_OscConfig+0x4c4>)
 80053ee:	f043 0301 	orr.w	r3, r3, #1
 80053f2:	6213      	str	r3, [r2, #32]
 80053f4:	e02d      	b.n	8005452 <HAL_RCC_OscConfig+0x36e>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d10c      	bne.n	8005418 <HAL_RCC_OscConfig+0x334>
 80053fe:	4b6a      	ldr	r3, [pc, #424]	@ (80055a8 <HAL_RCC_OscConfig+0x4c4>)
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	4a69      	ldr	r2, [pc, #420]	@ (80055a8 <HAL_RCC_OscConfig+0x4c4>)
 8005404:	f023 0301 	bic.w	r3, r3, #1
 8005408:	6213      	str	r3, [r2, #32]
 800540a:	4b67      	ldr	r3, [pc, #412]	@ (80055a8 <HAL_RCC_OscConfig+0x4c4>)
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	4a66      	ldr	r2, [pc, #408]	@ (80055a8 <HAL_RCC_OscConfig+0x4c4>)
 8005410:	f023 0304 	bic.w	r3, r3, #4
 8005414:	6213      	str	r3, [r2, #32]
 8005416:	e01c      	b.n	8005452 <HAL_RCC_OscConfig+0x36e>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	2b05      	cmp	r3, #5
 800541e:	d10c      	bne.n	800543a <HAL_RCC_OscConfig+0x356>
 8005420:	4b61      	ldr	r3, [pc, #388]	@ (80055a8 <HAL_RCC_OscConfig+0x4c4>)
 8005422:	6a1b      	ldr	r3, [r3, #32]
 8005424:	4a60      	ldr	r2, [pc, #384]	@ (80055a8 <HAL_RCC_OscConfig+0x4c4>)
 8005426:	f043 0304 	orr.w	r3, r3, #4
 800542a:	6213      	str	r3, [r2, #32]
 800542c:	4b5e      	ldr	r3, [pc, #376]	@ (80055a8 <HAL_RCC_OscConfig+0x4c4>)
 800542e:	6a1b      	ldr	r3, [r3, #32]
 8005430:	4a5d      	ldr	r2, [pc, #372]	@ (80055a8 <HAL_RCC_OscConfig+0x4c4>)
 8005432:	f043 0301 	orr.w	r3, r3, #1
 8005436:	6213      	str	r3, [r2, #32]
 8005438:	e00b      	b.n	8005452 <HAL_RCC_OscConfig+0x36e>
 800543a:	4b5b      	ldr	r3, [pc, #364]	@ (80055a8 <HAL_RCC_OscConfig+0x4c4>)
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	4a5a      	ldr	r2, [pc, #360]	@ (80055a8 <HAL_RCC_OscConfig+0x4c4>)
 8005440:	f023 0301 	bic.w	r3, r3, #1
 8005444:	6213      	str	r3, [r2, #32]
 8005446:	4b58      	ldr	r3, [pc, #352]	@ (80055a8 <HAL_RCC_OscConfig+0x4c4>)
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	4a57      	ldr	r2, [pc, #348]	@ (80055a8 <HAL_RCC_OscConfig+0x4c4>)
 800544c:	f023 0304 	bic.w	r3, r3, #4
 8005450:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d015      	beq.n	8005486 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800545a:	f7fd fe47 	bl	80030ec <HAL_GetTick>
 800545e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005460:	e00a      	b.n	8005478 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005462:	f7fd fe43 	bl	80030ec <HAL_GetTick>
 8005466:	4602      	mov	r2, r0
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005470:	4293      	cmp	r3, r2
 8005472:	d901      	bls.n	8005478 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e0b1      	b.n	80055dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005478:	4b4b      	ldr	r3, [pc, #300]	@ (80055a8 <HAL_RCC_OscConfig+0x4c4>)
 800547a:	6a1b      	ldr	r3, [r3, #32]
 800547c:	f003 0302 	and.w	r3, r3, #2
 8005480:	2b00      	cmp	r3, #0
 8005482:	d0ee      	beq.n	8005462 <HAL_RCC_OscConfig+0x37e>
 8005484:	e014      	b.n	80054b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005486:	f7fd fe31 	bl	80030ec <HAL_GetTick>
 800548a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800548c:	e00a      	b.n	80054a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800548e:	f7fd fe2d 	bl	80030ec <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	f241 3288 	movw	r2, #5000	@ 0x1388
 800549c:	4293      	cmp	r3, r2
 800549e:	d901      	bls.n	80054a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e09b      	b.n	80055dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054a4:	4b40      	ldr	r3, [pc, #256]	@ (80055a8 <HAL_RCC_OscConfig+0x4c4>)
 80054a6:	6a1b      	ldr	r3, [r3, #32]
 80054a8:	f003 0302 	and.w	r3, r3, #2
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d1ee      	bne.n	800548e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80054b0:	7dfb      	ldrb	r3, [r7, #23]
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d105      	bne.n	80054c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054b6:	4b3c      	ldr	r3, [pc, #240]	@ (80055a8 <HAL_RCC_OscConfig+0x4c4>)
 80054b8:	69db      	ldr	r3, [r3, #28]
 80054ba:	4a3b      	ldr	r2, [pc, #236]	@ (80055a8 <HAL_RCC_OscConfig+0x4c4>)
 80054bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	69db      	ldr	r3, [r3, #28]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	f000 8087 	beq.w	80055da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054cc:	4b36      	ldr	r3, [pc, #216]	@ (80055a8 <HAL_RCC_OscConfig+0x4c4>)
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f003 030c 	and.w	r3, r3, #12
 80054d4:	2b08      	cmp	r3, #8
 80054d6:	d061      	beq.n	800559c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	69db      	ldr	r3, [r3, #28]
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d146      	bne.n	800556e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054e0:	4b33      	ldr	r3, [pc, #204]	@ (80055b0 <HAL_RCC_OscConfig+0x4cc>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054e6:	f7fd fe01 	bl	80030ec <HAL_GetTick>
 80054ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054ec:	e008      	b.n	8005500 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054ee:	f7fd fdfd 	bl	80030ec <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d901      	bls.n	8005500 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e06d      	b.n	80055dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005500:	4b29      	ldr	r3, [pc, #164]	@ (80055a8 <HAL_RCC_OscConfig+0x4c4>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1f0      	bne.n	80054ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a1b      	ldr	r3, [r3, #32]
 8005510:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005514:	d108      	bne.n	8005528 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005516:	4b24      	ldr	r3, [pc, #144]	@ (80055a8 <HAL_RCC_OscConfig+0x4c4>)
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	4921      	ldr	r1, [pc, #132]	@ (80055a8 <HAL_RCC_OscConfig+0x4c4>)
 8005524:	4313      	orrs	r3, r2
 8005526:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005528:	4b1f      	ldr	r3, [pc, #124]	@ (80055a8 <HAL_RCC_OscConfig+0x4c4>)
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a19      	ldr	r1, [r3, #32]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005538:	430b      	orrs	r3, r1
 800553a:	491b      	ldr	r1, [pc, #108]	@ (80055a8 <HAL_RCC_OscConfig+0x4c4>)
 800553c:	4313      	orrs	r3, r2
 800553e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005540:	4b1b      	ldr	r3, [pc, #108]	@ (80055b0 <HAL_RCC_OscConfig+0x4cc>)
 8005542:	2201      	movs	r2, #1
 8005544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005546:	f7fd fdd1 	bl	80030ec <HAL_GetTick>
 800554a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800554c:	e008      	b.n	8005560 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800554e:	f7fd fdcd 	bl	80030ec <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	2b02      	cmp	r3, #2
 800555a:	d901      	bls.n	8005560 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e03d      	b.n	80055dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005560:	4b11      	ldr	r3, [pc, #68]	@ (80055a8 <HAL_RCC_OscConfig+0x4c4>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d0f0      	beq.n	800554e <HAL_RCC_OscConfig+0x46a>
 800556c:	e035      	b.n	80055da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800556e:	4b10      	ldr	r3, [pc, #64]	@ (80055b0 <HAL_RCC_OscConfig+0x4cc>)
 8005570:	2200      	movs	r2, #0
 8005572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005574:	f7fd fdba 	bl	80030ec <HAL_GetTick>
 8005578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800557a:	e008      	b.n	800558e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800557c:	f7fd fdb6 	bl	80030ec <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	2b02      	cmp	r3, #2
 8005588:	d901      	bls.n	800558e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e026      	b.n	80055dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800558e:	4b06      	ldr	r3, [pc, #24]	@ (80055a8 <HAL_RCC_OscConfig+0x4c4>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1f0      	bne.n	800557c <HAL_RCC_OscConfig+0x498>
 800559a:	e01e      	b.n	80055da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	69db      	ldr	r3, [r3, #28]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d107      	bne.n	80055b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e019      	b.n	80055dc <HAL_RCC_OscConfig+0x4f8>
 80055a8:	40021000 	.word	0x40021000
 80055ac:	40007000 	.word	0x40007000
 80055b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80055b4:	4b0b      	ldr	r3, [pc, #44]	@ (80055e4 <HAL_RCC_OscConfig+0x500>)
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a1b      	ldr	r3, [r3, #32]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d106      	bne.n	80055d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d001      	beq.n	80055da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e000      	b.n	80055dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3718      	adds	r7, #24
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	40021000 	.word	0x40021000

080055e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e0d0      	b.n	800579e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055fc:	4b6a      	ldr	r3, [pc, #424]	@ (80057a8 <HAL_RCC_ClockConfig+0x1c0>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0307 	and.w	r3, r3, #7
 8005604:	683a      	ldr	r2, [r7, #0]
 8005606:	429a      	cmp	r2, r3
 8005608:	d910      	bls.n	800562c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800560a:	4b67      	ldr	r3, [pc, #412]	@ (80057a8 <HAL_RCC_ClockConfig+0x1c0>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f023 0207 	bic.w	r2, r3, #7
 8005612:	4965      	ldr	r1, [pc, #404]	@ (80057a8 <HAL_RCC_ClockConfig+0x1c0>)
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	4313      	orrs	r3, r2
 8005618:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800561a:	4b63      	ldr	r3, [pc, #396]	@ (80057a8 <HAL_RCC_ClockConfig+0x1c0>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0307 	and.w	r3, r3, #7
 8005622:	683a      	ldr	r2, [r7, #0]
 8005624:	429a      	cmp	r2, r3
 8005626:	d001      	beq.n	800562c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e0b8      	b.n	800579e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0302 	and.w	r3, r3, #2
 8005634:	2b00      	cmp	r3, #0
 8005636:	d020      	beq.n	800567a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0304 	and.w	r3, r3, #4
 8005640:	2b00      	cmp	r3, #0
 8005642:	d005      	beq.n	8005650 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005644:	4b59      	ldr	r3, [pc, #356]	@ (80057ac <HAL_RCC_ClockConfig+0x1c4>)
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	4a58      	ldr	r2, [pc, #352]	@ (80057ac <HAL_RCC_ClockConfig+0x1c4>)
 800564a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800564e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0308 	and.w	r3, r3, #8
 8005658:	2b00      	cmp	r3, #0
 800565a:	d005      	beq.n	8005668 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800565c:	4b53      	ldr	r3, [pc, #332]	@ (80057ac <HAL_RCC_ClockConfig+0x1c4>)
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	4a52      	ldr	r2, [pc, #328]	@ (80057ac <HAL_RCC_ClockConfig+0x1c4>)
 8005662:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005666:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005668:	4b50      	ldr	r3, [pc, #320]	@ (80057ac <HAL_RCC_ClockConfig+0x1c4>)
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	494d      	ldr	r1, [pc, #308]	@ (80057ac <HAL_RCC_ClockConfig+0x1c4>)
 8005676:	4313      	orrs	r3, r2
 8005678:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0301 	and.w	r3, r3, #1
 8005682:	2b00      	cmp	r3, #0
 8005684:	d040      	beq.n	8005708 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	2b01      	cmp	r3, #1
 800568c:	d107      	bne.n	800569e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800568e:	4b47      	ldr	r3, [pc, #284]	@ (80057ac <HAL_RCC_ClockConfig+0x1c4>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d115      	bne.n	80056c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e07f      	b.n	800579e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d107      	bne.n	80056b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056a6:	4b41      	ldr	r3, [pc, #260]	@ (80057ac <HAL_RCC_ClockConfig+0x1c4>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d109      	bne.n	80056c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e073      	b.n	800579e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056b6:	4b3d      	ldr	r3, [pc, #244]	@ (80057ac <HAL_RCC_ClockConfig+0x1c4>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0302 	and.w	r3, r3, #2
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d101      	bne.n	80056c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e06b      	b.n	800579e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056c6:	4b39      	ldr	r3, [pc, #228]	@ (80057ac <HAL_RCC_ClockConfig+0x1c4>)
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	f023 0203 	bic.w	r2, r3, #3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	4936      	ldr	r1, [pc, #216]	@ (80057ac <HAL_RCC_ClockConfig+0x1c4>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056d8:	f7fd fd08 	bl	80030ec <HAL_GetTick>
 80056dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056de:	e00a      	b.n	80056f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056e0:	f7fd fd04 	bl	80030ec <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d901      	bls.n	80056f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e053      	b.n	800579e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056f6:	4b2d      	ldr	r3, [pc, #180]	@ (80057ac <HAL_RCC_ClockConfig+0x1c4>)
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f003 020c 	and.w	r2, r3, #12
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	429a      	cmp	r2, r3
 8005706:	d1eb      	bne.n	80056e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005708:	4b27      	ldr	r3, [pc, #156]	@ (80057a8 <HAL_RCC_ClockConfig+0x1c0>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0307 	and.w	r3, r3, #7
 8005710:	683a      	ldr	r2, [r7, #0]
 8005712:	429a      	cmp	r2, r3
 8005714:	d210      	bcs.n	8005738 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005716:	4b24      	ldr	r3, [pc, #144]	@ (80057a8 <HAL_RCC_ClockConfig+0x1c0>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f023 0207 	bic.w	r2, r3, #7
 800571e:	4922      	ldr	r1, [pc, #136]	@ (80057a8 <HAL_RCC_ClockConfig+0x1c0>)
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	4313      	orrs	r3, r2
 8005724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005726:	4b20      	ldr	r3, [pc, #128]	@ (80057a8 <HAL_RCC_ClockConfig+0x1c0>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0307 	and.w	r3, r3, #7
 800572e:	683a      	ldr	r2, [r7, #0]
 8005730:	429a      	cmp	r2, r3
 8005732:	d001      	beq.n	8005738 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e032      	b.n	800579e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0304 	and.w	r3, r3, #4
 8005740:	2b00      	cmp	r3, #0
 8005742:	d008      	beq.n	8005756 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005744:	4b19      	ldr	r3, [pc, #100]	@ (80057ac <HAL_RCC_ClockConfig+0x1c4>)
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	4916      	ldr	r1, [pc, #88]	@ (80057ac <HAL_RCC_ClockConfig+0x1c4>)
 8005752:	4313      	orrs	r3, r2
 8005754:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0308 	and.w	r3, r3, #8
 800575e:	2b00      	cmp	r3, #0
 8005760:	d009      	beq.n	8005776 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005762:	4b12      	ldr	r3, [pc, #72]	@ (80057ac <HAL_RCC_ClockConfig+0x1c4>)
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	00db      	lsls	r3, r3, #3
 8005770:	490e      	ldr	r1, [pc, #56]	@ (80057ac <HAL_RCC_ClockConfig+0x1c4>)
 8005772:	4313      	orrs	r3, r2
 8005774:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005776:	f000 f821 	bl	80057bc <HAL_RCC_GetSysClockFreq>
 800577a:	4602      	mov	r2, r0
 800577c:	4b0b      	ldr	r3, [pc, #44]	@ (80057ac <HAL_RCC_ClockConfig+0x1c4>)
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	091b      	lsrs	r3, r3, #4
 8005782:	f003 030f 	and.w	r3, r3, #15
 8005786:	490a      	ldr	r1, [pc, #40]	@ (80057b0 <HAL_RCC_ClockConfig+0x1c8>)
 8005788:	5ccb      	ldrb	r3, [r1, r3]
 800578a:	fa22 f303 	lsr.w	r3, r2, r3
 800578e:	4a09      	ldr	r2, [pc, #36]	@ (80057b4 <HAL_RCC_ClockConfig+0x1cc>)
 8005790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005792:	4b09      	ldr	r3, [pc, #36]	@ (80057b8 <HAL_RCC_ClockConfig+0x1d0>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4618      	mov	r0, r3
 8005798:	f7fd fae8 	bl	8002d6c <HAL_InitTick>

  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	40022000 	.word	0x40022000
 80057ac:	40021000 	.word	0x40021000
 80057b0:	0800c900 	.word	0x0800c900
 80057b4:	2000011c 	.word	0x2000011c
 80057b8:	20000120 	.word	0x20000120

080057bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057bc:	b480      	push	{r7}
 80057be:	b087      	sub	sp, #28
 80057c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80057c2:	2300      	movs	r3, #0
 80057c4:	60fb      	str	r3, [r7, #12]
 80057c6:	2300      	movs	r3, #0
 80057c8:	60bb      	str	r3, [r7, #8]
 80057ca:	2300      	movs	r3, #0
 80057cc:	617b      	str	r3, [r7, #20]
 80057ce:	2300      	movs	r3, #0
 80057d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80057d2:	2300      	movs	r3, #0
 80057d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80057d6:	4b1e      	ldr	r3, [pc, #120]	@ (8005850 <HAL_RCC_GetSysClockFreq+0x94>)
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f003 030c 	and.w	r3, r3, #12
 80057e2:	2b04      	cmp	r3, #4
 80057e4:	d002      	beq.n	80057ec <HAL_RCC_GetSysClockFreq+0x30>
 80057e6:	2b08      	cmp	r3, #8
 80057e8:	d003      	beq.n	80057f2 <HAL_RCC_GetSysClockFreq+0x36>
 80057ea:	e027      	b.n	800583c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80057ec:	4b19      	ldr	r3, [pc, #100]	@ (8005854 <HAL_RCC_GetSysClockFreq+0x98>)
 80057ee:	613b      	str	r3, [r7, #16]
      break;
 80057f0:	e027      	b.n	8005842 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	0c9b      	lsrs	r3, r3, #18
 80057f6:	f003 030f 	and.w	r3, r3, #15
 80057fa:	4a17      	ldr	r2, [pc, #92]	@ (8005858 <HAL_RCC_GetSysClockFreq+0x9c>)
 80057fc:	5cd3      	ldrb	r3, [r2, r3]
 80057fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d010      	beq.n	800582c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800580a:	4b11      	ldr	r3, [pc, #68]	@ (8005850 <HAL_RCC_GetSysClockFreq+0x94>)
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	0c5b      	lsrs	r3, r3, #17
 8005810:	f003 0301 	and.w	r3, r3, #1
 8005814:	4a11      	ldr	r2, [pc, #68]	@ (800585c <HAL_RCC_GetSysClockFreq+0xa0>)
 8005816:	5cd3      	ldrb	r3, [r2, r3]
 8005818:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a0d      	ldr	r2, [pc, #52]	@ (8005854 <HAL_RCC_GetSysClockFreq+0x98>)
 800581e:	fb03 f202 	mul.w	r2, r3, r2
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	fbb2 f3f3 	udiv	r3, r2, r3
 8005828:	617b      	str	r3, [r7, #20]
 800582a:	e004      	b.n	8005836 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a0c      	ldr	r2, [pc, #48]	@ (8005860 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005830:	fb02 f303 	mul.w	r3, r2, r3
 8005834:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	613b      	str	r3, [r7, #16]
      break;
 800583a:	e002      	b.n	8005842 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800583c:	4b05      	ldr	r3, [pc, #20]	@ (8005854 <HAL_RCC_GetSysClockFreq+0x98>)
 800583e:	613b      	str	r3, [r7, #16]
      break;
 8005840:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005842:	693b      	ldr	r3, [r7, #16]
}
 8005844:	4618      	mov	r0, r3
 8005846:	371c      	adds	r7, #28
 8005848:	46bd      	mov	sp, r7
 800584a:	bc80      	pop	{r7}
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	40021000 	.word	0x40021000
 8005854:	007a1200 	.word	0x007a1200
 8005858:	0800c918 	.word	0x0800c918
 800585c:	0800c928 	.word	0x0800c928
 8005860:	003d0900 	.word	0x003d0900

08005864 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005864:	b480      	push	{r7}
 8005866:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005868:	4b02      	ldr	r3, [pc, #8]	@ (8005874 <HAL_RCC_GetHCLKFreq+0x10>)
 800586a:	681b      	ldr	r3, [r3, #0]
}
 800586c:	4618      	mov	r0, r3
 800586e:	46bd      	mov	sp, r7
 8005870:	bc80      	pop	{r7}
 8005872:	4770      	bx	lr
 8005874:	2000011c 	.word	0x2000011c

08005878 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800587c:	f7ff fff2 	bl	8005864 <HAL_RCC_GetHCLKFreq>
 8005880:	4602      	mov	r2, r0
 8005882:	4b05      	ldr	r3, [pc, #20]	@ (8005898 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	0a1b      	lsrs	r3, r3, #8
 8005888:	f003 0307 	and.w	r3, r3, #7
 800588c:	4903      	ldr	r1, [pc, #12]	@ (800589c <HAL_RCC_GetPCLK1Freq+0x24>)
 800588e:	5ccb      	ldrb	r3, [r1, r3]
 8005890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005894:	4618      	mov	r0, r3
 8005896:	bd80      	pop	{r7, pc}
 8005898:	40021000 	.word	0x40021000
 800589c:	0800c910 	.word	0x0800c910

080058a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80058a4:	f7ff ffde 	bl	8005864 <HAL_RCC_GetHCLKFreq>
 80058a8:	4602      	mov	r2, r0
 80058aa:	4b05      	ldr	r3, [pc, #20]	@ (80058c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	0adb      	lsrs	r3, r3, #11
 80058b0:	f003 0307 	and.w	r3, r3, #7
 80058b4:	4903      	ldr	r1, [pc, #12]	@ (80058c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058b6:	5ccb      	ldrb	r3, [r1, r3]
 80058b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058bc:	4618      	mov	r0, r3
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	40021000 	.word	0x40021000
 80058c4:	0800c910 	.word	0x0800c910

080058c8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	220f      	movs	r2, #15
 80058d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80058d8:	4b11      	ldr	r3, [pc, #68]	@ (8005920 <HAL_RCC_GetClockConfig+0x58>)
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	f003 0203 	and.w	r2, r3, #3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80058e4:	4b0e      	ldr	r3, [pc, #56]	@ (8005920 <HAL_RCC_GetClockConfig+0x58>)
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80058f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005920 <HAL_RCC_GetClockConfig+0x58>)
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80058fc:	4b08      	ldr	r3, [pc, #32]	@ (8005920 <HAL_RCC_GetClockConfig+0x58>)
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	08db      	lsrs	r3, r3, #3
 8005902:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800590a:	4b06      	ldr	r3, [pc, #24]	@ (8005924 <HAL_RCC_GetClockConfig+0x5c>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0207 	and.w	r2, r3, #7
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8005916:	bf00      	nop
 8005918:	370c      	adds	r7, #12
 800591a:	46bd      	mov	sp, r7
 800591c:	bc80      	pop	{r7}
 800591e:	4770      	bx	lr
 8005920:	40021000 	.word	0x40021000
 8005924:	40022000 	.word	0x40022000

08005928 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005930:	4b0a      	ldr	r3, [pc, #40]	@ (800595c <RCC_Delay+0x34>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a0a      	ldr	r2, [pc, #40]	@ (8005960 <RCC_Delay+0x38>)
 8005936:	fba2 2303 	umull	r2, r3, r2, r3
 800593a:	0a5b      	lsrs	r3, r3, #9
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	fb02 f303 	mul.w	r3, r2, r3
 8005942:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005944:	bf00      	nop
  }
  while (Delay --);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	1e5a      	subs	r2, r3, #1
 800594a:	60fa      	str	r2, [r7, #12]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1f9      	bne.n	8005944 <RCC_Delay+0x1c>
}
 8005950:	bf00      	nop
 8005952:	bf00      	nop
 8005954:	3714      	adds	r7, #20
 8005956:	46bd      	mov	sp, r7
 8005958:	bc80      	pop	{r7}
 800595a:	4770      	bx	lr
 800595c:	2000011c 	.word	0x2000011c
 8005960:	10624dd3 	.word	0x10624dd3

08005964 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d101      	bne.n	8005976 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e041      	b.n	80059fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b00      	cmp	r3, #0
 8005980:	d106      	bne.n	8005990 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f839 	bl	8005a02 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2202      	movs	r2, #2
 8005994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	3304      	adds	r3, #4
 80059a0:	4619      	mov	r1, r3
 80059a2:	4610      	mov	r0, r2
 80059a4:	f000 f99c 	bl	8005ce0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3708      	adds	r7, #8
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b083      	sub	sp, #12
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005a0a:	bf00      	nop
 8005a0c:	370c      	adds	r7, #12
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bc80      	pop	{r7}
 8005a12:	4770      	bx	lr

08005a14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d001      	beq.n	8005a2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e03a      	b.n	8005aa2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2202      	movs	r2, #2
 8005a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68da      	ldr	r2, [r3, #12]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f042 0201 	orr.w	r2, r2, #1
 8005a42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a18      	ldr	r2, [pc, #96]	@ (8005aac <HAL_TIM_Base_Start_IT+0x98>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d00e      	beq.n	8005a6c <HAL_TIM_Base_Start_IT+0x58>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a56:	d009      	beq.n	8005a6c <HAL_TIM_Base_Start_IT+0x58>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a14      	ldr	r2, [pc, #80]	@ (8005ab0 <HAL_TIM_Base_Start_IT+0x9c>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d004      	beq.n	8005a6c <HAL_TIM_Base_Start_IT+0x58>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a13      	ldr	r2, [pc, #76]	@ (8005ab4 <HAL_TIM_Base_Start_IT+0xa0>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d111      	bne.n	8005a90 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f003 0307 	and.w	r3, r3, #7
 8005a76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2b06      	cmp	r3, #6
 8005a7c:	d010      	beq.n	8005aa0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f042 0201 	orr.w	r2, r2, #1
 8005a8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a8e:	e007      	b.n	8005aa0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f042 0201 	orr.w	r2, r2, #1
 8005a9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3714      	adds	r7, #20
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bc80      	pop	{r7}
 8005aaa:	4770      	bx	lr
 8005aac:	40012c00 	.word	0x40012c00
 8005ab0:	40000400 	.word	0x40000400
 8005ab4:	40000800 	.word	0x40000800

08005ab8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	f003 0302 	and.w	r3, r3, #2
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d020      	beq.n	8005b1c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f003 0302 	and.w	r3, r3, #2
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d01b      	beq.n	8005b1c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f06f 0202 	mvn.w	r2, #2
 8005aec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2201      	movs	r2, #1
 8005af2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	f003 0303 	and.w	r3, r3, #3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d003      	beq.n	8005b0a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 f8d1 	bl	8005caa <HAL_TIM_IC_CaptureCallback>
 8005b08:	e005      	b.n	8005b16 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f8c4 	bl	8005c98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 f8d3 	bl	8005cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	f003 0304 	and.w	r3, r3, #4
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d020      	beq.n	8005b68 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f003 0304 	and.w	r3, r3, #4
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d01b      	beq.n	8005b68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f06f 0204 	mvn.w	r2, #4
 8005b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2202      	movs	r2, #2
 8005b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d003      	beq.n	8005b56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 f8ab 	bl	8005caa <HAL_TIM_IC_CaptureCallback>
 8005b54:	e005      	b.n	8005b62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f89e 	bl	8005c98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 f8ad 	bl	8005cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	f003 0308 	and.w	r3, r3, #8
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d020      	beq.n	8005bb4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f003 0308 	and.w	r3, r3, #8
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d01b      	beq.n	8005bb4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f06f 0208 	mvn.w	r2, #8
 8005b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2204      	movs	r2, #4
 8005b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	69db      	ldr	r3, [r3, #28]
 8005b92:	f003 0303 	and.w	r3, r3, #3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d003      	beq.n	8005ba2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f885 	bl	8005caa <HAL_TIM_IC_CaptureCallback>
 8005ba0:	e005      	b.n	8005bae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 f878 	bl	8005c98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 f887 	bl	8005cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	f003 0310 	and.w	r3, r3, #16
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d020      	beq.n	8005c00 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f003 0310 	and.w	r3, r3, #16
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d01b      	beq.n	8005c00 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f06f 0210 	mvn.w	r2, #16
 8005bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2208      	movs	r2, #8
 8005bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	69db      	ldr	r3, [r3, #28]
 8005bde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d003      	beq.n	8005bee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 f85f 	bl	8005caa <HAL_TIM_IC_CaptureCallback>
 8005bec:	e005      	b.n	8005bfa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 f852 	bl	8005c98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 f861 	bl	8005cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00c      	beq.n	8005c24 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f003 0301 	and.w	r3, r3, #1
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d007      	beq.n	8005c24 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f06f 0201 	mvn.w	r2, #1
 8005c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f7fc ffca 	bl	8002bb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00c      	beq.n	8005c48 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d007      	beq.n	8005c48 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 f8c3 	bl	8005dce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00c      	beq.n	8005c6c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d007      	beq.n	8005c6c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 f831 	bl	8005cce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	f003 0320 	and.w	r3, r3, #32
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00c      	beq.n	8005c90 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f003 0320 	and.w	r3, r3, #32
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d007      	beq.n	8005c90 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f06f 0220 	mvn.w	r2, #32
 8005c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 f896 	bl	8005dbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c90:	bf00      	nop
 8005c92:	3710      	adds	r7, #16
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ca0:	bf00      	nop
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bc80      	pop	{r7}
 8005ca8:	4770      	bx	lr

08005caa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005caa:	b480      	push	{r7}
 8005cac:	b083      	sub	sp, #12
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005cb2:	bf00      	nop
 8005cb4:	370c      	adds	r7, #12
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bc80      	pop	{r7}
 8005cba:	4770      	bx	lr

08005cbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cc4:	bf00      	nop
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bc80      	pop	{r7}
 8005ccc:	4770      	bx	lr

08005cce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b083      	sub	sp, #12
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cd6:	bf00      	nop
 8005cd8:	370c      	adds	r7, #12
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bc80      	pop	{r7}
 8005cde:	4770      	bx	lr

08005ce0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a2f      	ldr	r2, [pc, #188]	@ (8005db0 <TIM_Base_SetConfig+0xd0>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d00b      	beq.n	8005d10 <TIM_Base_SetConfig+0x30>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cfe:	d007      	beq.n	8005d10 <TIM_Base_SetConfig+0x30>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a2c      	ldr	r2, [pc, #176]	@ (8005db4 <TIM_Base_SetConfig+0xd4>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d003      	beq.n	8005d10 <TIM_Base_SetConfig+0x30>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a2b      	ldr	r2, [pc, #172]	@ (8005db8 <TIM_Base_SetConfig+0xd8>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d108      	bne.n	8005d22 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a22      	ldr	r2, [pc, #136]	@ (8005db0 <TIM_Base_SetConfig+0xd0>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d00b      	beq.n	8005d42 <TIM_Base_SetConfig+0x62>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d30:	d007      	beq.n	8005d42 <TIM_Base_SetConfig+0x62>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a1f      	ldr	r2, [pc, #124]	@ (8005db4 <TIM_Base_SetConfig+0xd4>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d003      	beq.n	8005d42 <TIM_Base_SetConfig+0x62>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a1e      	ldr	r2, [pc, #120]	@ (8005db8 <TIM_Base_SetConfig+0xd8>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d108      	bne.n	8005d54 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	68fa      	ldr	r2, [r7, #12]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	689a      	ldr	r2, [r3, #8]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a0d      	ldr	r2, [pc, #52]	@ (8005db0 <TIM_Base_SetConfig+0xd0>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d103      	bne.n	8005d88 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	691a      	ldr	r2, [r3, #16]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	f003 0301 	and.w	r3, r3, #1
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d005      	beq.n	8005da6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	f023 0201 	bic.w	r2, r3, #1
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	611a      	str	r2, [r3, #16]
  }
}
 8005da6:	bf00      	nop
 8005da8:	3714      	adds	r7, #20
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bc80      	pop	{r7}
 8005dae:	4770      	bx	lr
 8005db0:	40012c00 	.word	0x40012c00
 8005db4:	40000400 	.word	0x40000400
 8005db8:	40000800 	.word	0x40000800

08005dbc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bc80      	pop	{r7}
 8005dcc:	4770      	bx	lr

08005dce <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005dce:	b480      	push	{r7}
 8005dd0:	b083      	sub	sp, #12
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005dd6:	bf00      	nop
 8005dd8:	370c      	adds	r7, #12
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bc80      	pop	{r7}
 8005dde:	4770      	bx	lr

08005de0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d101      	bne.n	8005df2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e042      	b.n	8005e78 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d106      	bne.n	8005e0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f7fc ff64 	bl	8002cd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2224      	movs	r2, #36	@ 0x24
 8005e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68da      	ldr	r2, [r3, #12]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005e22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 fa09 	bl	800623c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	691a      	ldr	r2, [r3, #16]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005e38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	695a      	ldr	r2, [r3, #20]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005e48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68da      	ldr	r2, [r3, #12]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005e58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2220      	movs	r2, #32
 8005e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2220      	movs	r2, #32
 8005e6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3708      	adds	r7, #8
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b08a      	sub	sp, #40	@ 0x28
 8005e84:	af02      	add	r7, sp, #8
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	603b      	str	r3, [r7, #0]
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005e90:	2300      	movs	r3, #0
 8005e92:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	2b20      	cmp	r3, #32
 8005e9e:	d175      	bne.n	8005f8c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d002      	beq.n	8005eac <HAL_UART_Transmit+0x2c>
 8005ea6:	88fb      	ldrh	r3, [r7, #6]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d101      	bne.n	8005eb0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e06e      	b.n	8005f8e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2221      	movs	r2, #33	@ 0x21
 8005eba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ebe:	f7fd f915 	bl	80030ec <HAL_GetTick>
 8005ec2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	88fa      	ldrh	r2, [r7, #6]
 8005ec8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	88fa      	ldrh	r2, [r7, #6]
 8005ece:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ed8:	d108      	bne.n	8005eec <HAL_UART_Transmit+0x6c>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d104      	bne.n	8005eec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	61bb      	str	r3, [r7, #24]
 8005eea:	e003      	b.n	8005ef4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ef4:	e02e      	b.n	8005f54 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	2200      	movs	r2, #0
 8005efe:	2180      	movs	r1, #128	@ 0x80
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f000 f8df 	bl	80060c4 <UART_WaitOnFlagUntilTimeout>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d005      	beq.n	8005f18 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2220      	movs	r2, #32
 8005f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e03a      	b.n	8005f8e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d10b      	bne.n	8005f36 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	881b      	ldrh	r3, [r3, #0]
 8005f22:	461a      	mov	r2, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	3302      	adds	r3, #2
 8005f32:	61bb      	str	r3, [r7, #24]
 8005f34:	e007      	b.n	8005f46 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	781a      	ldrb	r2, [r3, #0]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	3301      	adds	r3, #1
 8005f44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	b29a      	uxth	r2, r3
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1cb      	bne.n	8005ef6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	2200      	movs	r2, #0
 8005f66:	2140      	movs	r1, #64	@ 0x40
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f000 f8ab 	bl	80060c4 <UART_WaitOnFlagUntilTimeout>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d005      	beq.n	8005f80 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2220      	movs	r2, #32
 8005f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e006      	b.n	8005f8e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2220      	movs	r2, #32
 8005f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	e000      	b.n	8005f8e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005f8c:	2302      	movs	r3, #2
  }
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3720      	adds	r7, #32
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b08a      	sub	sp, #40	@ 0x28
 8005f9a:	af02      	add	r7, sp, #8
 8005f9c:	60f8      	str	r0, [r7, #12]
 8005f9e:	60b9      	str	r1, [r7, #8]
 8005fa0:	603b      	str	r3, [r7, #0]
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	2b20      	cmp	r3, #32
 8005fb4:	f040 8081 	bne.w	80060ba <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d002      	beq.n	8005fc4 <HAL_UART_Receive+0x2e>
 8005fbe:	88fb      	ldrh	r3, [r7, #6]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d101      	bne.n	8005fc8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e079      	b.n	80060bc <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2222      	movs	r2, #34	@ 0x22
 8005fd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fdc:	f7fd f886 	bl	80030ec <HAL_GetTick>
 8005fe0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	88fa      	ldrh	r2, [r7, #6]
 8005fe6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	88fa      	ldrh	r2, [r7, #6]
 8005fec:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ff6:	d108      	bne.n	800600a <HAL_UART_Receive+0x74>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d104      	bne.n	800600a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8006000:	2300      	movs	r3, #0
 8006002:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	61bb      	str	r3, [r7, #24]
 8006008:	e003      	b.n	8006012 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800600e:	2300      	movs	r3, #0
 8006010:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006012:	e047      	b.n	80060a4 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	9300      	str	r3, [sp, #0]
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	2200      	movs	r2, #0
 800601c:	2120      	movs	r1, #32
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	f000 f850 	bl	80060c4 <UART_WaitOnFlagUntilTimeout>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d005      	beq.n	8006036 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2220      	movs	r2, #32
 800602e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e042      	b.n	80060bc <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d10c      	bne.n	8006056 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	b29b      	uxth	r3, r3
 8006044:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006048:	b29a      	uxth	r2, r3
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	3302      	adds	r3, #2
 8006052:	61bb      	str	r3, [r7, #24]
 8006054:	e01f      	b.n	8006096 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800605e:	d007      	beq.n	8006070 <HAL_UART_Receive+0xda>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d10a      	bne.n	800607e <HAL_UART_Receive+0xe8>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d106      	bne.n	800607e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	b2da      	uxtb	r2, r3
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	701a      	strb	r2, [r3, #0]
 800607c:	e008      	b.n	8006090 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	b2db      	uxtb	r3, r3
 8006086:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800608a:	b2da      	uxtb	r2, r3
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	3301      	adds	r3, #1
 8006094:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800609a:	b29b      	uxth	r3, r3
 800609c:	3b01      	subs	r3, #1
 800609e:	b29a      	uxth	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1b2      	bne.n	8006014 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2220      	movs	r2, #32
 80060b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80060b6:	2300      	movs	r3, #0
 80060b8:	e000      	b.n	80060bc <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80060ba:	2302      	movs	r3, #2
  }
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3720      	adds	r7, #32
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b086      	sub	sp, #24
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	603b      	str	r3, [r7, #0]
 80060d0:	4613      	mov	r3, r2
 80060d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060d4:	e03b      	b.n	800614e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060d6:	6a3b      	ldr	r3, [r7, #32]
 80060d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060dc:	d037      	beq.n	800614e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060de:	f7fd f805 	bl	80030ec <HAL_GetTick>
 80060e2:	4602      	mov	r2, r0
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	6a3a      	ldr	r2, [r7, #32]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d302      	bcc.n	80060f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80060ee:	6a3b      	ldr	r3, [r7, #32]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d101      	bne.n	80060f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80060f4:	2303      	movs	r3, #3
 80060f6:	e03a      	b.n	800616e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	f003 0304 	and.w	r3, r3, #4
 8006102:	2b00      	cmp	r3, #0
 8006104:	d023      	beq.n	800614e <UART_WaitOnFlagUntilTimeout+0x8a>
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	2b80      	cmp	r3, #128	@ 0x80
 800610a:	d020      	beq.n	800614e <UART_WaitOnFlagUntilTimeout+0x8a>
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	2b40      	cmp	r3, #64	@ 0x40
 8006110:	d01d      	beq.n	800614e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 0308 	and.w	r3, r3, #8
 800611c:	2b08      	cmp	r3, #8
 800611e:	d116      	bne.n	800614e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006120:	2300      	movs	r3, #0
 8006122:	617b      	str	r3, [r7, #20]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	617b      	str	r3, [r7, #20]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	617b      	str	r3, [r7, #20]
 8006134:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006136:	68f8      	ldr	r0, [r7, #12]
 8006138:	f000 f81d 	bl	8006176 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2208      	movs	r2, #8
 8006140:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e00f      	b.n	800616e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	4013      	ands	r3, r2
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	429a      	cmp	r2, r3
 800615c:	bf0c      	ite	eq
 800615e:	2301      	moveq	r3, #1
 8006160:	2300      	movne	r3, #0
 8006162:	b2db      	uxtb	r3, r3
 8006164:	461a      	mov	r2, r3
 8006166:	79fb      	ldrb	r3, [r7, #7]
 8006168:	429a      	cmp	r2, r3
 800616a:	d0b4      	beq.n	80060d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3718      	adds	r7, #24
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006176:	b480      	push	{r7}
 8006178:	b095      	sub	sp, #84	@ 0x54
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	330c      	adds	r3, #12
 8006184:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006186:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006188:	e853 3f00 	ldrex	r3, [r3]
 800618c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800618e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006190:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006194:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	330c      	adds	r3, #12
 800619c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800619e:	643a      	str	r2, [r7, #64]	@ 0x40
 80061a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80061a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80061a6:	e841 2300 	strex	r3, r2, [r1]
 80061aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80061ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1e5      	bne.n	800617e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	3314      	adds	r3, #20
 80061b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ba:	6a3b      	ldr	r3, [r7, #32]
 80061bc:	e853 3f00 	ldrex	r3, [r3]
 80061c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	f023 0301 	bic.w	r3, r3, #1
 80061c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	3314      	adds	r3, #20
 80061d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80061d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061da:	e841 2300 	strex	r3, r2, [r1]
 80061de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80061e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d1e5      	bne.n	80061b2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d119      	bne.n	8006222 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	330c      	adds	r3, #12
 80061f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	e853 3f00 	ldrex	r3, [r3]
 80061fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	f023 0310 	bic.w	r3, r3, #16
 8006204:	647b      	str	r3, [r7, #68]	@ 0x44
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	330c      	adds	r3, #12
 800620c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800620e:	61ba      	str	r2, [r7, #24]
 8006210:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006212:	6979      	ldr	r1, [r7, #20]
 8006214:	69ba      	ldr	r2, [r7, #24]
 8006216:	e841 2300 	strex	r3, r2, [r1]
 800621a:	613b      	str	r3, [r7, #16]
   return(result);
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1e5      	bne.n	80061ee <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2220      	movs	r2, #32
 8006226:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006230:	bf00      	nop
 8006232:	3754      	adds	r7, #84	@ 0x54
 8006234:	46bd      	mov	sp, r7
 8006236:	bc80      	pop	{r7}
 8006238:	4770      	bx	lr
	...

0800623c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	68da      	ldr	r2, [r3, #12]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	430a      	orrs	r2, r1
 8006258:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	689a      	ldr	r2, [r3, #8]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	431a      	orrs	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	695b      	ldr	r3, [r3, #20]
 8006268:	4313      	orrs	r3, r2
 800626a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006276:	f023 030c 	bic.w	r3, r3, #12
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	6812      	ldr	r2, [r2, #0]
 800627e:	68b9      	ldr	r1, [r7, #8]
 8006280:	430b      	orrs	r3, r1
 8006282:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	695b      	ldr	r3, [r3, #20]
 800628a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	699a      	ldr	r2, [r3, #24]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	430a      	orrs	r2, r1
 8006298:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a2c      	ldr	r2, [pc, #176]	@ (8006350 <UART_SetConfig+0x114>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d103      	bne.n	80062ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80062a4:	f7ff fafc 	bl	80058a0 <HAL_RCC_GetPCLK2Freq>
 80062a8:	60f8      	str	r0, [r7, #12]
 80062aa:	e002      	b.n	80062b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80062ac:	f7ff fae4 	bl	8005878 <HAL_RCC_GetPCLK1Freq>
 80062b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	4613      	mov	r3, r2
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	009a      	lsls	r2, r3, #2
 80062bc:	441a      	add	r2, r3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062c8:	4a22      	ldr	r2, [pc, #136]	@ (8006354 <UART_SetConfig+0x118>)
 80062ca:	fba2 2303 	umull	r2, r3, r2, r3
 80062ce:	095b      	lsrs	r3, r3, #5
 80062d0:	0119      	lsls	r1, r3, #4
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	4613      	mov	r3, r2
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	4413      	add	r3, r2
 80062da:	009a      	lsls	r2, r3, #2
 80062dc:	441a      	add	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80062e8:	4b1a      	ldr	r3, [pc, #104]	@ (8006354 <UART_SetConfig+0x118>)
 80062ea:	fba3 0302 	umull	r0, r3, r3, r2
 80062ee:	095b      	lsrs	r3, r3, #5
 80062f0:	2064      	movs	r0, #100	@ 0x64
 80062f2:	fb00 f303 	mul.w	r3, r0, r3
 80062f6:	1ad3      	subs	r3, r2, r3
 80062f8:	011b      	lsls	r3, r3, #4
 80062fa:	3332      	adds	r3, #50	@ 0x32
 80062fc:	4a15      	ldr	r2, [pc, #84]	@ (8006354 <UART_SetConfig+0x118>)
 80062fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006302:	095b      	lsrs	r3, r3, #5
 8006304:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006308:	4419      	add	r1, r3
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	4613      	mov	r3, r2
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	4413      	add	r3, r2
 8006312:	009a      	lsls	r2, r3, #2
 8006314:	441a      	add	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006320:	4b0c      	ldr	r3, [pc, #48]	@ (8006354 <UART_SetConfig+0x118>)
 8006322:	fba3 0302 	umull	r0, r3, r3, r2
 8006326:	095b      	lsrs	r3, r3, #5
 8006328:	2064      	movs	r0, #100	@ 0x64
 800632a:	fb00 f303 	mul.w	r3, r0, r3
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	011b      	lsls	r3, r3, #4
 8006332:	3332      	adds	r3, #50	@ 0x32
 8006334:	4a07      	ldr	r2, [pc, #28]	@ (8006354 <UART_SetConfig+0x118>)
 8006336:	fba2 2303 	umull	r2, r3, r2, r3
 800633a:	095b      	lsrs	r3, r3, #5
 800633c:	f003 020f 	and.w	r2, r3, #15
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	440a      	add	r2, r1
 8006346:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006348:	bf00      	nop
 800634a:	3710      	adds	r7, #16
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	40013800 	.word	0x40013800
 8006354:	51eb851f 	.word	0x51eb851f

08006358 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
 800635e:	4603      	mov	r3, r0
 8006360:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006362:	2300      	movs	r3, #0
 8006364:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006366:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800636a:	2b84      	cmp	r3, #132	@ 0x84
 800636c:	d005      	beq.n	800637a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800636e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	4413      	add	r3, r2
 8006376:	3303      	adds	r3, #3
 8006378:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800637a:	68fb      	ldr	r3, [r7, #12]
}
 800637c:	4618      	mov	r0, r3
 800637e:	3714      	adds	r7, #20
 8006380:	46bd      	mov	sp, r7
 8006382:	bc80      	pop	{r7}
 8006384:	4770      	bx	lr

08006386 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006386:	b480      	push	{r7}
 8006388:	b083      	sub	sp, #12
 800638a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800638c:	f3ef 8305 	mrs	r3, IPSR
 8006390:	607b      	str	r3, [r7, #4]
  return(result);
 8006392:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006394:	2b00      	cmp	r3, #0
 8006396:	bf14      	ite	ne
 8006398:	2301      	movne	r3, #1
 800639a:	2300      	moveq	r3, #0
 800639c:	b2db      	uxtb	r3, r3
}
 800639e:	4618      	mov	r0, r3
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bc80      	pop	{r7}
 80063a6:	4770      	bx	lr

080063a8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80063ac:	f001 fbdc 	bl	8007b68 <vTaskStartScheduler>
  
  return osOK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80063b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063b8:	b089      	sub	sp, #36	@ 0x24
 80063ba:	af04      	add	r7, sp, #16
 80063bc:	6078      	str	r0, [r7, #4]
 80063be:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	695b      	ldr	r3, [r3, #20]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d020      	beq.n	800640a <osThreadCreate+0x54>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	699b      	ldr	r3, [r3, #24]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d01c      	beq.n	800640a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685c      	ldr	r4, [r3, #4]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	691e      	ldr	r6, [r3, #16]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7ff ffb8 	bl	8006358 <makeFreeRtosPriority>
 80063e8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80063f2:	9202      	str	r2, [sp, #8]
 80063f4:	9301      	str	r3, [sp, #4]
 80063f6:	9100      	str	r1, [sp, #0]
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	4632      	mov	r2, r6
 80063fc:	4629      	mov	r1, r5
 80063fe:	4620      	mov	r0, r4
 8006400:	f001 f9bf 	bl	8007782 <xTaskCreateStatic>
 8006404:	4603      	mov	r3, r0
 8006406:	60fb      	str	r3, [r7, #12]
 8006408:	e01c      	b.n	8006444 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	685c      	ldr	r4, [r3, #4]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006416:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800641e:	4618      	mov	r0, r3
 8006420:	f7ff ff9a 	bl	8006358 <makeFreeRtosPriority>
 8006424:	4602      	mov	r2, r0
 8006426:	f107 030c 	add.w	r3, r7, #12
 800642a:	9301      	str	r3, [sp, #4]
 800642c:	9200      	str	r2, [sp, #0]
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	4632      	mov	r2, r6
 8006432:	4629      	mov	r1, r5
 8006434:	4620      	mov	r0, r4
 8006436:	f001 fa04 	bl	8007842 <xTaskCreate>
 800643a:	4603      	mov	r3, r0
 800643c:	2b01      	cmp	r3, #1
 800643e:	d001      	beq.n	8006444 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006440:	2300      	movs	r3, #0
 8006442:	e000      	b.n	8006446 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006444:	68fb      	ldr	r3, [r7, #12]
}
 8006446:	4618      	mov	r0, r3
 8006448:	3714      	adds	r7, #20
 800644a:	46bd      	mov	sp, r7
 800644c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800644e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800644e:	b580      	push	{r7, lr}
 8006450:	b084      	sub	sp, #16
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d001      	beq.n	8006464 <osDelay+0x16>
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	e000      	b.n	8006466 <osDelay+0x18>
 8006464:	2301      	movs	r3, #1
 8006466:	4618      	mov	r0, r3
 8006468:	f001 fb48 	bl	8007afc <vTaskDelay>
  
  return osOK;
 800646c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800646e:	4618      	mov	r0, r3
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b082      	sub	sp, #8
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d007      	beq.n	8006496 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	4619      	mov	r1, r3
 800648c:	2001      	movs	r0, #1
 800648e:	f000 fb92 	bl	8006bb6 <xQueueCreateMutexStatic>
 8006492:	4603      	mov	r3, r0
 8006494:	e003      	b.n	800649e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8006496:	2001      	movs	r0, #1
 8006498:	f000 fb75 	bl	8006b86 <xQueueCreateMutex>
 800649c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3708      	adds	r7, #8
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
	...

080064a8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80064b2:	2300      	movs	r3, #0
 80064b4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d101      	bne.n	80064c0 <osMutexWait+0x18>
    return osErrorParameter;
 80064bc:	2380      	movs	r3, #128	@ 0x80
 80064be:	e03a      	b.n	8006536 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80064c0:	2300      	movs	r3, #0
 80064c2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ca:	d103      	bne.n	80064d4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80064cc:	f04f 33ff 	mov.w	r3, #4294967295
 80064d0:	60fb      	str	r3, [r7, #12]
 80064d2:	e009      	b.n	80064e8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d006      	beq.n	80064e8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d101      	bne.n	80064e8 <osMutexWait+0x40>
      ticks = 1;
 80064e4:	2301      	movs	r3, #1
 80064e6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80064e8:	f7ff ff4d 	bl	8006386 <inHandlerMode>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d017      	beq.n	8006522 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80064f2:	f107 0308 	add.w	r3, r7, #8
 80064f6:	461a      	mov	r2, r3
 80064f8:	2100      	movs	r1, #0
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 ff98 	bl	8007430 <xQueueReceiveFromISR>
 8006500:	4603      	mov	r3, r0
 8006502:	2b01      	cmp	r3, #1
 8006504:	d001      	beq.n	800650a <osMutexWait+0x62>
      return osErrorOS;
 8006506:	23ff      	movs	r3, #255	@ 0xff
 8006508:	e015      	b.n	8006536 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d011      	beq.n	8006534 <osMutexWait+0x8c>
 8006510:	4b0b      	ldr	r3, [pc, #44]	@ (8006540 <osMutexWait+0x98>)
 8006512:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006516:	601a      	str	r2, [r3, #0]
 8006518:	f3bf 8f4f 	dsb	sy
 800651c:	f3bf 8f6f 	isb	sy
 8006520:	e008      	b.n	8006534 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8006522:	68f9      	ldr	r1, [r7, #12]
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 fe73 	bl	8007210 <xQueueSemaphoreTake>
 800652a:	4603      	mov	r3, r0
 800652c:	2b01      	cmp	r3, #1
 800652e:	d001      	beq.n	8006534 <osMutexWait+0x8c>
    return osErrorOS;
 8006530:	23ff      	movs	r3, #255	@ 0xff
 8006532:	e000      	b.n	8006536 <osMutexWait+0x8e>
  }
  
  return osOK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3710      	adds	r7, #16
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	e000ed04 	.word	0xe000ed04

08006544 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800654c:	2300      	movs	r3, #0
 800654e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006550:	2300      	movs	r3, #0
 8006552:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8006554:	f7ff ff17 	bl	8006386 <inHandlerMode>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d016      	beq.n	800658c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800655e:	f107 0308 	add.w	r3, r7, #8
 8006562:	4619      	mov	r1, r3
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 fce1 	bl	8006f2c <xQueueGiveFromISR>
 800656a:	4603      	mov	r3, r0
 800656c:	2b01      	cmp	r3, #1
 800656e:	d001      	beq.n	8006574 <osMutexRelease+0x30>
      return osErrorOS;
 8006570:	23ff      	movs	r3, #255	@ 0xff
 8006572:	e017      	b.n	80065a4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d013      	beq.n	80065a2 <osMutexRelease+0x5e>
 800657a:	4b0c      	ldr	r3, [pc, #48]	@ (80065ac <osMutexRelease+0x68>)
 800657c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006580:	601a      	str	r2, [r3, #0]
 8006582:	f3bf 8f4f 	dsb	sy
 8006586:	f3bf 8f6f 	isb	sy
 800658a:	e00a      	b.n	80065a2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800658c:	2300      	movs	r3, #0
 800658e:	2200      	movs	r2, #0
 8006590:	2100      	movs	r1, #0
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 fb2a 	bl	8006bec <xQueueGenericSend>
 8006598:	4603      	mov	r3, r0
 800659a:	2b01      	cmp	r3, #1
 800659c:	d001      	beq.n	80065a2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800659e:	23ff      	movs	r3, #255	@ 0xff
 80065a0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80065a2:	68fb      	ldr	r3, [r7, #12]
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3710      	adds	r7, #16
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	e000ed04 	.word	0xe000ed04

080065b0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80065b0:	b590      	push	{r4, r7, lr}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af02      	add	r7, sp, #8
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d011      	beq.n	80065e6 <osMessageCreate+0x36>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00d      	beq.n	80065e6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6818      	ldr	r0, [r3, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6859      	ldr	r1, [r3, #4]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	689a      	ldr	r2, [r3, #8]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	2400      	movs	r4, #0
 80065dc:	9400      	str	r4, [sp, #0]
 80065de:	f000 f9dd 	bl	800699c <xQueueGenericCreateStatic>
 80065e2:	4603      	mov	r3, r0
 80065e4:	e008      	b.n	80065f8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6818      	ldr	r0, [r3, #0]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	4619      	mov	r1, r3
 80065f2:	f000 fa50 	bl	8006a96 <xQueueGenericCreate>
 80065f6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd90      	pop	{r4, r7, pc}

08006600 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b086      	sub	sp, #24
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800660c:	2300      	movs	r3, #0
 800660e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d101      	bne.n	800661e <osMessagePut+0x1e>
    ticks = 1;
 800661a:	2301      	movs	r3, #1
 800661c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800661e:	f7ff feb2 	bl	8006386 <inHandlerMode>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d018      	beq.n	800665a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8006628:	f107 0210 	add.w	r2, r7, #16
 800662c:	f107 0108 	add.w	r1, r7, #8
 8006630:	2300      	movs	r3, #0
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f000 fbdc 	bl	8006df0 <xQueueGenericSendFromISR>
 8006638:	4603      	mov	r3, r0
 800663a:	2b01      	cmp	r3, #1
 800663c:	d001      	beq.n	8006642 <osMessagePut+0x42>
      return osErrorOS;
 800663e:	23ff      	movs	r3, #255	@ 0xff
 8006640:	e018      	b.n	8006674 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d014      	beq.n	8006672 <osMessagePut+0x72>
 8006648:	4b0c      	ldr	r3, [pc, #48]	@ (800667c <osMessagePut+0x7c>)
 800664a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800664e:	601a      	str	r2, [r3, #0]
 8006650:	f3bf 8f4f 	dsb	sy
 8006654:	f3bf 8f6f 	isb	sy
 8006658:	e00b      	b.n	8006672 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800665a:	f107 0108 	add.w	r1, r7, #8
 800665e:	2300      	movs	r3, #0
 8006660:	697a      	ldr	r2, [r7, #20]
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f000 fac2 	bl	8006bec <xQueueGenericSend>
 8006668:	4603      	mov	r3, r0
 800666a:	2b01      	cmp	r3, #1
 800666c:	d001      	beq.n	8006672 <osMessagePut+0x72>
      return osErrorOS;
 800666e:	23ff      	movs	r3, #255	@ 0xff
 8006670:	e000      	b.n	8006674 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8006672:	2300      	movs	r3, #0
}
 8006674:	4618      	mov	r0, r3
 8006676:	3718      	adds	r7, #24
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	e000ed04 	.word	0xe000ed04

08006680 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8006680:	b590      	push	{r4, r7, lr}
 8006682:	b08b      	sub	sp, #44	@ 0x2c
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8006690:	2300      	movs	r3, #0
 8006692:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d10a      	bne.n	80066b0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800669a:	2380      	movs	r3, #128	@ 0x80
 800669c:	617b      	str	r3, [r7, #20]
    return event;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	461c      	mov	r4, r3
 80066a2:	f107 0314 	add.w	r3, r7, #20
 80066a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80066aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80066ae:	e054      	b.n	800675a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80066b0:	2300      	movs	r3, #0
 80066b2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80066b4:	2300      	movs	r3, #0
 80066b6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066be:	d103      	bne.n	80066c8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80066c0:	f04f 33ff 	mov.w	r3, #4294967295
 80066c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80066c6:	e009      	b.n	80066dc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d006      	beq.n	80066dc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 80066d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d101      	bne.n	80066dc <osMessageGet+0x5c>
      ticks = 1;
 80066d8:	2301      	movs	r3, #1
 80066da:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 80066dc:	f7ff fe53 	bl	8006386 <inHandlerMode>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d01c      	beq.n	8006720 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80066e6:	f107 0220 	add.w	r2, r7, #32
 80066ea:	f107 0314 	add.w	r3, r7, #20
 80066ee:	3304      	adds	r3, #4
 80066f0:	4619      	mov	r1, r3
 80066f2:	68b8      	ldr	r0, [r7, #8]
 80066f4:	f000 fe9c 	bl	8007430 <xQueueReceiveFromISR>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d102      	bne.n	8006704 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80066fe:	2310      	movs	r3, #16
 8006700:	617b      	str	r3, [r7, #20]
 8006702:	e001      	b.n	8006708 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8006704:	2300      	movs	r3, #0
 8006706:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006708:	6a3b      	ldr	r3, [r7, #32]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d01d      	beq.n	800674a <osMessageGet+0xca>
 800670e:	4b15      	ldr	r3, [pc, #84]	@ (8006764 <osMessageGet+0xe4>)
 8006710:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006714:	601a      	str	r2, [r3, #0]
 8006716:	f3bf 8f4f 	dsb	sy
 800671a:	f3bf 8f6f 	isb	sy
 800671e:	e014      	b.n	800674a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8006720:	f107 0314 	add.w	r3, r7, #20
 8006724:	3304      	adds	r3, #4
 8006726:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006728:	4619      	mov	r1, r3
 800672a:	68b8      	ldr	r0, [r7, #8]
 800672c:	f000 fc8e 	bl	800704c <xQueueReceive>
 8006730:	4603      	mov	r3, r0
 8006732:	2b01      	cmp	r3, #1
 8006734:	d102      	bne.n	800673c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8006736:	2310      	movs	r3, #16
 8006738:	617b      	str	r3, [r7, #20]
 800673a:	e006      	b.n	800674a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800673c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800673e:	2b00      	cmp	r3, #0
 8006740:	d101      	bne.n	8006746 <osMessageGet+0xc6>
 8006742:	2300      	movs	r3, #0
 8006744:	e000      	b.n	8006748 <osMessageGet+0xc8>
 8006746:	2340      	movs	r3, #64	@ 0x40
 8006748:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	461c      	mov	r4, r3
 800674e:	f107 0314 	add.w	r3, r7, #20
 8006752:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006756:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800675a:	68f8      	ldr	r0, [r7, #12]
 800675c:	372c      	adds	r7, #44	@ 0x2c
 800675e:	46bd      	mov	sp, r7
 8006760:	bd90      	pop	{r4, r7, pc}
 8006762:	bf00      	nop
 8006764:	e000ed04 	.word	0xe000ed04

08006768 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f103 0208 	add.w	r2, r3, #8
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f04f 32ff 	mov.w	r2, #4294967295
 8006780:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f103 0208 	add.w	r2, r3, #8
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f103 0208 	add.w	r2, r3, #8
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800679c:	bf00      	nop
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bc80      	pop	{r7}
 80067a4:	4770      	bx	lr

080067a6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80067a6:	b480      	push	{r7}
 80067a8:	b083      	sub	sp, #12
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bc80      	pop	{r7}
 80067bc:	4770      	bx	lr

080067be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067be:	b480      	push	{r7}
 80067c0:	b085      	sub	sp, #20
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
 80067c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	689a      	ldr	r2, [r3, #8]
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	683a      	ldr	r2, [r7, #0]
 80067e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	683a      	ldr	r2, [r7, #0]
 80067e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	1c5a      	adds	r2, r3, #1
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	601a      	str	r2, [r3, #0]
}
 80067fa:	bf00      	nop
 80067fc:	3714      	adds	r7, #20
 80067fe:	46bd      	mov	sp, r7
 8006800:	bc80      	pop	{r7}
 8006802:	4770      	bx	lr

08006804 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800681a:	d103      	bne.n	8006824 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	60fb      	str	r3, [r7, #12]
 8006822:	e00c      	b.n	800683e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	3308      	adds	r3, #8
 8006828:	60fb      	str	r3, [r7, #12]
 800682a:	e002      	b.n	8006832 <vListInsert+0x2e>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	60fb      	str	r3, [r7, #12]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68ba      	ldr	r2, [r7, #8]
 800683a:	429a      	cmp	r2, r3
 800683c:	d2f6      	bcs.n	800682c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	685a      	ldr	r2, [r3, #4]
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	683a      	ldr	r2, [r7, #0]
 800684c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	683a      	ldr	r2, [r7, #0]
 8006858:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	1c5a      	adds	r2, r3, #1
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	601a      	str	r2, [r3, #0]
}
 800686a:	bf00      	nop
 800686c:	3714      	adds	r7, #20
 800686e:	46bd      	mov	sp, r7
 8006870:	bc80      	pop	{r7}
 8006872:	4770      	bx	lr

08006874 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	6892      	ldr	r2, [r2, #8]
 800688a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	6852      	ldr	r2, [r2, #4]
 8006894:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	429a      	cmp	r2, r3
 800689e:	d103      	bne.n	80068a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	689a      	ldr	r2, [r3, #8]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	1e5a      	subs	r2, r3, #1
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3714      	adds	r7, #20
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bc80      	pop	{r7}
 80068c4:	4770      	bx	lr
	...

080068c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d10b      	bne.n	80068f4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80068dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e0:	f383 8811 	msr	BASEPRI, r3
 80068e4:	f3bf 8f6f 	isb	sy
 80068e8:	f3bf 8f4f 	dsb	sy
 80068ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80068ee:	bf00      	nop
 80068f0:	bf00      	nop
 80068f2:	e7fd      	b.n	80068f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80068f4:	f002 f89a 	bl	8008a2c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006900:	68f9      	ldr	r1, [r7, #12]
 8006902:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006904:	fb01 f303 	mul.w	r3, r1, r3
 8006908:	441a      	add	r2, r3
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006924:	3b01      	subs	r3, #1
 8006926:	68f9      	ldr	r1, [r7, #12]
 8006928:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800692a:	fb01 f303 	mul.w	r3, r1, r3
 800692e:	441a      	add	r2, r3
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	22ff      	movs	r2, #255	@ 0xff
 8006938:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	22ff      	movs	r2, #255	@ 0xff
 8006940:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d114      	bne.n	8006974 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d01a      	beq.n	8006988 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	3310      	adds	r3, #16
 8006956:	4618      	mov	r0, r3
 8006958:	f001 fb8a 	bl	8008070 <xTaskRemoveFromEventList>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d012      	beq.n	8006988 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006962:	4b0d      	ldr	r3, [pc, #52]	@ (8006998 <xQueueGenericReset+0xd0>)
 8006964:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006968:	601a      	str	r2, [r3, #0]
 800696a:	f3bf 8f4f 	dsb	sy
 800696e:	f3bf 8f6f 	isb	sy
 8006972:	e009      	b.n	8006988 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	3310      	adds	r3, #16
 8006978:	4618      	mov	r0, r3
 800697a:	f7ff fef5 	bl	8006768 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	3324      	adds	r3, #36	@ 0x24
 8006982:	4618      	mov	r0, r3
 8006984:	f7ff fef0 	bl	8006768 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006988:	f002 f880 	bl	8008a8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800698c:	2301      	movs	r3, #1
}
 800698e:	4618      	mov	r0, r3
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	e000ed04 	.word	0xe000ed04

0800699c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800699c:	b580      	push	{r7, lr}
 800699e:	b08e      	sub	sp, #56	@ 0x38
 80069a0:	af02      	add	r7, sp, #8
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
 80069a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d10b      	bne.n	80069c8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80069b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b4:	f383 8811 	msr	BASEPRI, r3
 80069b8:	f3bf 8f6f 	isb	sy
 80069bc:	f3bf 8f4f 	dsb	sy
 80069c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80069c2:	bf00      	nop
 80069c4:	bf00      	nop
 80069c6:	e7fd      	b.n	80069c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d10b      	bne.n	80069e6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80069ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d2:	f383 8811 	msr	BASEPRI, r3
 80069d6:	f3bf 8f6f 	isb	sy
 80069da:	f3bf 8f4f 	dsb	sy
 80069de:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80069e0:	bf00      	nop
 80069e2:	bf00      	nop
 80069e4:	e7fd      	b.n	80069e2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d002      	beq.n	80069f2 <xQueueGenericCreateStatic+0x56>
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d001      	beq.n	80069f6 <xQueueGenericCreateStatic+0x5a>
 80069f2:	2301      	movs	r3, #1
 80069f4:	e000      	b.n	80069f8 <xQueueGenericCreateStatic+0x5c>
 80069f6:	2300      	movs	r3, #0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d10b      	bne.n	8006a14 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80069fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a00:	f383 8811 	msr	BASEPRI, r3
 8006a04:	f3bf 8f6f 	isb	sy
 8006a08:	f3bf 8f4f 	dsb	sy
 8006a0c:	623b      	str	r3, [r7, #32]
}
 8006a0e:	bf00      	nop
 8006a10:	bf00      	nop
 8006a12:	e7fd      	b.n	8006a10 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d102      	bne.n	8006a20 <xQueueGenericCreateStatic+0x84>
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d101      	bne.n	8006a24 <xQueueGenericCreateStatic+0x88>
 8006a20:	2301      	movs	r3, #1
 8006a22:	e000      	b.n	8006a26 <xQueueGenericCreateStatic+0x8a>
 8006a24:	2300      	movs	r3, #0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d10b      	bne.n	8006a42 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006a2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a2e:	f383 8811 	msr	BASEPRI, r3
 8006a32:	f3bf 8f6f 	isb	sy
 8006a36:	f3bf 8f4f 	dsb	sy
 8006a3a:	61fb      	str	r3, [r7, #28]
}
 8006a3c:	bf00      	nop
 8006a3e:	bf00      	nop
 8006a40:	e7fd      	b.n	8006a3e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006a42:	2350      	movs	r3, #80	@ 0x50
 8006a44:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	2b50      	cmp	r3, #80	@ 0x50
 8006a4a:	d00b      	beq.n	8006a64 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a50:	f383 8811 	msr	BASEPRI, r3
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	f3bf 8f4f 	dsb	sy
 8006a5c:	61bb      	str	r3, [r7, #24]
}
 8006a5e:	bf00      	nop
 8006a60:	bf00      	nop
 8006a62:	e7fd      	b.n	8006a60 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006a64:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00d      	beq.n	8006a8c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a78:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a7e:	9300      	str	r3, [sp, #0]
 8006a80:	4613      	mov	r3, r2
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	68b9      	ldr	r1, [r7, #8]
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f000 f840 	bl	8006b0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3730      	adds	r7, #48	@ 0x30
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b08a      	sub	sp, #40	@ 0x28
 8006a9a:	af02      	add	r7, sp, #8
 8006a9c:	60f8      	str	r0, [r7, #12]
 8006a9e:	60b9      	str	r1, [r7, #8]
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d10b      	bne.n	8006ac2 <xQueueGenericCreate+0x2c>
	__asm volatile
 8006aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aae:	f383 8811 	msr	BASEPRI, r3
 8006ab2:	f3bf 8f6f 	isb	sy
 8006ab6:	f3bf 8f4f 	dsb	sy
 8006aba:	613b      	str	r3, [r7, #16]
}
 8006abc:	bf00      	nop
 8006abe:	bf00      	nop
 8006ac0:	e7fd      	b.n	8006abe <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	68ba      	ldr	r2, [r7, #8]
 8006ac6:	fb02 f303 	mul.w	r3, r2, r3
 8006aca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	3350      	adds	r3, #80	@ 0x50
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f002 f8ad 	bl	8008c30 <pvPortMalloc>
 8006ad6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d011      	beq.n	8006b02 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	3350      	adds	r3, #80	@ 0x50
 8006ae6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006af0:	79fa      	ldrb	r2, [r7, #7]
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	9300      	str	r3, [sp, #0]
 8006af6:	4613      	mov	r3, r2
 8006af8:	697a      	ldr	r2, [r7, #20]
 8006afa:	68b9      	ldr	r1, [r7, #8]
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f000 f805 	bl	8006b0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006b02:	69bb      	ldr	r3, [r7, #24]
	}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3720      	adds	r7, #32
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]
 8006b18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d103      	bne.n	8006b28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	69ba      	ldr	r2, [r7, #24]
 8006b24:	601a      	str	r2, [r3, #0]
 8006b26:	e002      	b.n	8006b2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006b3a:	2101      	movs	r1, #1
 8006b3c:	69b8      	ldr	r0, [r7, #24]
 8006b3e:	f7ff fec3 	bl	80068c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	78fa      	ldrb	r2, [r7, #3]
 8006b46:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006b4a:	bf00      	nop
 8006b4c:	3710      	adds	r7, #16
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b082      	sub	sp, #8
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00e      	beq.n	8006b7e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006b72:	2300      	movs	r3, #0
 8006b74:	2200      	movs	r2, #0
 8006b76:	2100      	movs	r1, #0
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 f837 	bl	8006bec <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006b7e:	bf00      	nop
 8006b80:	3708      	adds	r7, #8
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b086      	sub	sp, #24
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006b90:	2301      	movs	r3, #1
 8006b92:	617b      	str	r3, [r7, #20]
 8006b94:	2300      	movs	r3, #0
 8006b96:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006b98:	79fb      	ldrb	r3, [r7, #7]
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	6939      	ldr	r1, [r7, #16]
 8006b9e:	6978      	ldr	r0, [r7, #20]
 8006ba0:	f7ff ff79 	bl	8006a96 <xQueueGenericCreate>
 8006ba4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f7ff ffd3 	bl	8006b52 <prvInitialiseMutex>

		return xNewQueue;
 8006bac:	68fb      	ldr	r3, [r7, #12]
	}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3718      	adds	r7, #24
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b088      	sub	sp, #32
 8006bba:	af02      	add	r7, sp, #8
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	6039      	str	r1, [r7, #0]
 8006bc0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	617b      	str	r3, [r7, #20]
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006bca:	79fb      	ldrb	r3, [r7, #7]
 8006bcc:	9300      	str	r3, [sp, #0]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	6939      	ldr	r1, [r7, #16]
 8006bd4:	6978      	ldr	r0, [r7, #20]
 8006bd6:	f7ff fee1 	bl	800699c <xQueueGenericCreateStatic>
 8006bda:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006bdc:	68f8      	ldr	r0, [r7, #12]
 8006bde:	f7ff ffb8 	bl	8006b52 <prvInitialiseMutex>

		return xNewQueue;
 8006be2:	68fb      	ldr	r3, [r7, #12]
	}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3718      	adds	r7, #24
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b08e      	sub	sp, #56	@ 0x38
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	607a      	str	r2, [r7, #4]
 8006bf8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d10b      	bne.n	8006c20 <xQueueGenericSend+0x34>
	__asm volatile
 8006c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c0c:	f383 8811 	msr	BASEPRI, r3
 8006c10:	f3bf 8f6f 	isb	sy
 8006c14:	f3bf 8f4f 	dsb	sy
 8006c18:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006c1a:	bf00      	nop
 8006c1c:	bf00      	nop
 8006c1e:	e7fd      	b.n	8006c1c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d103      	bne.n	8006c2e <xQueueGenericSend+0x42>
 8006c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d101      	bne.n	8006c32 <xQueueGenericSend+0x46>
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e000      	b.n	8006c34 <xQueueGenericSend+0x48>
 8006c32:	2300      	movs	r3, #0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d10b      	bne.n	8006c50 <xQueueGenericSend+0x64>
	__asm volatile
 8006c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c3c:	f383 8811 	msr	BASEPRI, r3
 8006c40:	f3bf 8f6f 	isb	sy
 8006c44:	f3bf 8f4f 	dsb	sy
 8006c48:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006c4a:	bf00      	nop
 8006c4c:	bf00      	nop
 8006c4e:	e7fd      	b.n	8006c4c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d103      	bne.n	8006c5e <xQueueGenericSend+0x72>
 8006c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d101      	bne.n	8006c62 <xQueueGenericSend+0x76>
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e000      	b.n	8006c64 <xQueueGenericSend+0x78>
 8006c62:	2300      	movs	r3, #0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d10b      	bne.n	8006c80 <xQueueGenericSend+0x94>
	__asm volatile
 8006c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c6c:	f383 8811 	msr	BASEPRI, r3
 8006c70:	f3bf 8f6f 	isb	sy
 8006c74:	f3bf 8f4f 	dsb	sy
 8006c78:	623b      	str	r3, [r7, #32]
}
 8006c7a:	bf00      	nop
 8006c7c:	bf00      	nop
 8006c7e:	e7fd      	b.n	8006c7c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c80:	f001 fbbc 	bl	80083fc <xTaskGetSchedulerState>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d102      	bne.n	8006c90 <xQueueGenericSend+0xa4>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d101      	bne.n	8006c94 <xQueueGenericSend+0xa8>
 8006c90:	2301      	movs	r3, #1
 8006c92:	e000      	b.n	8006c96 <xQueueGenericSend+0xaa>
 8006c94:	2300      	movs	r3, #0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d10b      	bne.n	8006cb2 <xQueueGenericSend+0xc6>
	__asm volatile
 8006c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c9e:	f383 8811 	msr	BASEPRI, r3
 8006ca2:	f3bf 8f6f 	isb	sy
 8006ca6:	f3bf 8f4f 	dsb	sy
 8006caa:	61fb      	str	r3, [r7, #28]
}
 8006cac:	bf00      	nop
 8006cae:	bf00      	nop
 8006cb0:	e7fd      	b.n	8006cae <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006cb2:	f001 febb 	bl	8008a2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d302      	bcc.n	8006cc8 <xQueueGenericSend+0xdc>
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	2b02      	cmp	r3, #2
 8006cc6:	d129      	bne.n	8006d1c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006cc8:	683a      	ldr	r2, [r7, #0]
 8006cca:	68b9      	ldr	r1, [r7, #8]
 8006ccc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006cce:	f000 fc48 	bl	8007562 <prvCopyDataToQueue>
 8006cd2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d010      	beq.n	8006cfe <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cde:	3324      	adds	r3, #36	@ 0x24
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f001 f9c5 	bl	8008070 <xTaskRemoveFromEventList>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d013      	beq.n	8006d14 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006cec:	4b3f      	ldr	r3, [pc, #252]	@ (8006dec <xQueueGenericSend+0x200>)
 8006cee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cf2:	601a      	str	r2, [r3, #0]
 8006cf4:	f3bf 8f4f 	dsb	sy
 8006cf8:	f3bf 8f6f 	isb	sy
 8006cfc:	e00a      	b.n	8006d14 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d007      	beq.n	8006d14 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006d04:	4b39      	ldr	r3, [pc, #228]	@ (8006dec <xQueueGenericSend+0x200>)
 8006d06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d0a:	601a      	str	r2, [r3, #0]
 8006d0c:	f3bf 8f4f 	dsb	sy
 8006d10:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006d14:	f001 feba 	bl	8008a8c <vPortExitCritical>
				return pdPASS;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e063      	b.n	8006de4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d103      	bne.n	8006d2a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d22:	f001 feb3 	bl	8008a8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006d26:	2300      	movs	r3, #0
 8006d28:	e05c      	b.n	8006de4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d106      	bne.n	8006d3e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d30:	f107 0314 	add.w	r3, r7, #20
 8006d34:	4618      	mov	r0, r3
 8006d36:	f001 f9ff 	bl	8008138 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d3e:	f001 fea5 	bl	8008a8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d42:	f000 ff7d 	bl	8007c40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d46:	f001 fe71 	bl	8008a2c <vPortEnterCritical>
 8006d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006d50:	b25b      	sxtb	r3, r3
 8006d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d56:	d103      	bne.n	8006d60 <xQueueGenericSend+0x174>
 8006d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d62:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006d66:	b25b      	sxtb	r3, r3
 8006d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d6c:	d103      	bne.n	8006d76 <xQueueGenericSend+0x18a>
 8006d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d70:	2200      	movs	r2, #0
 8006d72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006d76:	f001 fe89 	bl	8008a8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d7a:	1d3a      	adds	r2, r7, #4
 8006d7c:	f107 0314 	add.w	r3, r7, #20
 8006d80:	4611      	mov	r1, r2
 8006d82:	4618      	mov	r0, r3
 8006d84:	f001 f9ee 	bl	8008164 <xTaskCheckForTimeOut>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d124      	bne.n	8006dd8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006d8e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d90:	f000 fcdf 	bl	8007752 <prvIsQueueFull>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d018      	beq.n	8006dcc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d9c:	3310      	adds	r3, #16
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	4611      	mov	r1, r2
 8006da2:	4618      	mov	r0, r3
 8006da4:	f001 f93e 	bl	8008024 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006da8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006daa:	f000 fc6a 	bl	8007682 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006dae:	f000 ff55 	bl	8007c5c <xTaskResumeAll>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f47f af7c 	bne.w	8006cb2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006dba:	4b0c      	ldr	r3, [pc, #48]	@ (8006dec <xQueueGenericSend+0x200>)
 8006dbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006dc0:	601a      	str	r2, [r3, #0]
 8006dc2:	f3bf 8f4f 	dsb	sy
 8006dc6:	f3bf 8f6f 	isb	sy
 8006dca:	e772      	b.n	8006cb2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006dcc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006dce:	f000 fc58 	bl	8007682 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006dd2:	f000 ff43 	bl	8007c5c <xTaskResumeAll>
 8006dd6:	e76c      	b.n	8006cb2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006dd8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006dda:	f000 fc52 	bl	8007682 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006dde:	f000 ff3d 	bl	8007c5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006de2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3738      	adds	r7, #56	@ 0x38
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	e000ed04 	.word	0xe000ed04

08006df0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b090      	sub	sp, #64	@ 0x40
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	607a      	str	r2, [r7, #4]
 8006dfc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d10b      	bne.n	8006e20 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e0c:	f383 8811 	msr	BASEPRI, r3
 8006e10:	f3bf 8f6f 	isb	sy
 8006e14:	f3bf 8f4f 	dsb	sy
 8006e18:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006e1a:	bf00      	nop
 8006e1c:	bf00      	nop
 8006e1e:	e7fd      	b.n	8006e1c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d103      	bne.n	8006e2e <xQueueGenericSendFromISR+0x3e>
 8006e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d101      	bne.n	8006e32 <xQueueGenericSendFromISR+0x42>
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e000      	b.n	8006e34 <xQueueGenericSendFromISR+0x44>
 8006e32:	2300      	movs	r3, #0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d10b      	bne.n	8006e50 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e3c:	f383 8811 	msr	BASEPRI, r3
 8006e40:	f3bf 8f6f 	isb	sy
 8006e44:	f3bf 8f4f 	dsb	sy
 8006e48:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006e4a:	bf00      	nop
 8006e4c:	bf00      	nop
 8006e4e:	e7fd      	b.n	8006e4c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	2b02      	cmp	r3, #2
 8006e54:	d103      	bne.n	8006e5e <xQueueGenericSendFromISR+0x6e>
 8006e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d101      	bne.n	8006e62 <xQueueGenericSendFromISR+0x72>
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e000      	b.n	8006e64 <xQueueGenericSendFromISR+0x74>
 8006e62:	2300      	movs	r3, #0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d10b      	bne.n	8006e80 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e6c:	f383 8811 	msr	BASEPRI, r3
 8006e70:	f3bf 8f6f 	isb	sy
 8006e74:	f3bf 8f4f 	dsb	sy
 8006e78:	623b      	str	r3, [r7, #32]
}
 8006e7a:	bf00      	nop
 8006e7c:	bf00      	nop
 8006e7e:	e7fd      	b.n	8006e7c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e80:	f001 fe96 	bl	8008bb0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006e84:	f3ef 8211 	mrs	r2, BASEPRI
 8006e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e8c:	f383 8811 	msr	BASEPRI, r3
 8006e90:	f3bf 8f6f 	isb	sy
 8006e94:	f3bf 8f4f 	dsb	sy
 8006e98:	61fa      	str	r2, [r7, #28]
 8006e9a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006e9c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e9e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ea2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d302      	bcc.n	8006eb2 <xQueueGenericSendFromISR+0xc2>
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d12f      	bne.n	8006f12 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eb4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006eb8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ec2:	683a      	ldr	r2, [r7, #0]
 8006ec4:	68b9      	ldr	r1, [r7, #8]
 8006ec6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006ec8:	f000 fb4b 	bl	8007562 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006ecc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed4:	d112      	bne.n	8006efc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d016      	beq.n	8006f0c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ee0:	3324      	adds	r3, #36	@ 0x24
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f001 f8c4 	bl	8008070 <xTaskRemoveFromEventList>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d00e      	beq.n	8006f0c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00b      	beq.n	8006f0c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	601a      	str	r2, [r3, #0]
 8006efa:	e007      	b.n	8006f0c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006efc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006f00:	3301      	adds	r3, #1
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	b25a      	sxtb	r2, r3
 8006f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006f10:	e001      	b.n	8006f16 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006f12:	2300      	movs	r3, #0
 8006f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f18:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006f20:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3740      	adds	r7, #64	@ 0x40
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b08e      	sub	sp, #56	@ 0x38
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d10b      	bne.n	8006f58 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f44:	f383 8811 	msr	BASEPRI, r3
 8006f48:	f3bf 8f6f 	isb	sy
 8006f4c:	f3bf 8f4f 	dsb	sy
 8006f50:	623b      	str	r3, [r7, #32]
}
 8006f52:	bf00      	nop
 8006f54:	bf00      	nop
 8006f56:	e7fd      	b.n	8006f54 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d00b      	beq.n	8006f78 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8006f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f64:	f383 8811 	msr	BASEPRI, r3
 8006f68:	f3bf 8f6f 	isb	sy
 8006f6c:	f3bf 8f4f 	dsb	sy
 8006f70:	61fb      	str	r3, [r7, #28]
}
 8006f72:	bf00      	nop
 8006f74:	bf00      	nop
 8006f76:	e7fd      	b.n	8006f74 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d103      	bne.n	8006f88 <xQueueGiveFromISR+0x5c>
 8006f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d101      	bne.n	8006f8c <xQueueGiveFromISR+0x60>
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e000      	b.n	8006f8e <xQueueGiveFromISR+0x62>
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d10b      	bne.n	8006faa <xQueueGiveFromISR+0x7e>
	__asm volatile
 8006f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f96:	f383 8811 	msr	BASEPRI, r3
 8006f9a:	f3bf 8f6f 	isb	sy
 8006f9e:	f3bf 8f4f 	dsb	sy
 8006fa2:	61bb      	str	r3, [r7, #24]
}
 8006fa4:	bf00      	nop
 8006fa6:	bf00      	nop
 8006fa8:	e7fd      	b.n	8006fa6 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006faa:	f001 fe01 	bl	8008bb0 <vPortValidateInterruptPriority>
	__asm volatile
 8006fae:	f3ef 8211 	mrs	r2, BASEPRI
 8006fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fb6:	f383 8811 	msr	BASEPRI, r3
 8006fba:	f3bf 8f6f 	isb	sy
 8006fbe:	f3bf 8f4f 	dsb	sy
 8006fc2:	617a      	str	r2, [r7, #20]
 8006fc4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006fc6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fce:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d22b      	bcs.n	8007032 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fdc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006fe0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fe6:	1c5a      	adds	r2, r3, #1
 8006fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fea:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006fec:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff4:	d112      	bne.n	800701c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d016      	beq.n	800702c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007000:	3324      	adds	r3, #36	@ 0x24
 8007002:	4618      	mov	r0, r3
 8007004:	f001 f834 	bl	8008070 <xTaskRemoveFromEventList>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00e      	beq.n	800702c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00b      	beq.n	800702c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	2201      	movs	r2, #1
 8007018:	601a      	str	r2, [r3, #0]
 800701a:	e007      	b.n	800702c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800701c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007020:	3301      	adds	r3, #1
 8007022:	b2db      	uxtb	r3, r3
 8007024:	b25a      	sxtb	r2, r3
 8007026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007028:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800702c:	2301      	movs	r3, #1
 800702e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007030:	e001      	b.n	8007036 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007032:	2300      	movs	r3, #0
 8007034:	637b      	str	r3, [r7, #52]	@ 0x34
 8007036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007038:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f383 8811 	msr	BASEPRI, r3
}
 8007040:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007044:	4618      	mov	r0, r3
 8007046:	3738      	adds	r7, #56	@ 0x38
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b08c      	sub	sp, #48	@ 0x30
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007058:	2300      	movs	r3, #0
 800705a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007062:	2b00      	cmp	r3, #0
 8007064:	d10b      	bne.n	800707e <xQueueReceive+0x32>
	__asm volatile
 8007066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800706a:	f383 8811 	msr	BASEPRI, r3
 800706e:	f3bf 8f6f 	isb	sy
 8007072:	f3bf 8f4f 	dsb	sy
 8007076:	623b      	str	r3, [r7, #32]
}
 8007078:	bf00      	nop
 800707a:	bf00      	nop
 800707c:	e7fd      	b.n	800707a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d103      	bne.n	800708c <xQueueReceive+0x40>
 8007084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007088:	2b00      	cmp	r3, #0
 800708a:	d101      	bne.n	8007090 <xQueueReceive+0x44>
 800708c:	2301      	movs	r3, #1
 800708e:	e000      	b.n	8007092 <xQueueReceive+0x46>
 8007090:	2300      	movs	r3, #0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d10b      	bne.n	80070ae <xQueueReceive+0x62>
	__asm volatile
 8007096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800709a:	f383 8811 	msr	BASEPRI, r3
 800709e:	f3bf 8f6f 	isb	sy
 80070a2:	f3bf 8f4f 	dsb	sy
 80070a6:	61fb      	str	r3, [r7, #28]
}
 80070a8:	bf00      	nop
 80070aa:	bf00      	nop
 80070ac:	e7fd      	b.n	80070aa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80070ae:	f001 f9a5 	bl	80083fc <xTaskGetSchedulerState>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d102      	bne.n	80070be <xQueueReceive+0x72>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d101      	bne.n	80070c2 <xQueueReceive+0x76>
 80070be:	2301      	movs	r3, #1
 80070c0:	e000      	b.n	80070c4 <xQueueReceive+0x78>
 80070c2:	2300      	movs	r3, #0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d10b      	bne.n	80070e0 <xQueueReceive+0x94>
	__asm volatile
 80070c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070cc:	f383 8811 	msr	BASEPRI, r3
 80070d0:	f3bf 8f6f 	isb	sy
 80070d4:	f3bf 8f4f 	dsb	sy
 80070d8:	61bb      	str	r3, [r7, #24]
}
 80070da:	bf00      	nop
 80070dc:	bf00      	nop
 80070de:	e7fd      	b.n	80070dc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80070e0:	f001 fca4 	bl	8008a2c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070e8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d01f      	beq.n	8007130 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80070f0:	68b9      	ldr	r1, [r7, #8]
 80070f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070f4:	f000 fa9f 	bl	8007636 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80070f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070fa:	1e5a      	subs	r2, r3, #1
 80070fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070fe:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d00f      	beq.n	8007128 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800710a:	3310      	adds	r3, #16
 800710c:	4618      	mov	r0, r3
 800710e:	f000 ffaf 	bl	8008070 <xTaskRemoveFromEventList>
 8007112:	4603      	mov	r3, r0
 8007114:	2b00      	cmp	r3, #0
 8007116:	d007      	beq.n	8007128 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007118:	4b3c      	ldr	r3, [pc, #240]	@ (800720c <xQueueReceive+0x1c0>)
 800711a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800711e:	601a      	str	r2, [r3, #0]
 8007120:	f3bf 8f4f 	dsb	sy
 8007124:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007128:	f001 fcb0 	bl	8008a8c <vPortExitCritical>
				return pdPASS;
 800712c:	2301      	movs	r3, #1
 800712e:	e069      	b.n	8007204 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d103      	bne.n	800713e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007136:	f001 fca9 	bl	8008a8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800713a:	2300      	movs	r3, #0
 800713c:	e062      	b.n	8007204 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800713e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007140:	2b00      	cmp	r3, #0
 8007142:	d106      	bne.n	8007152 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007144:	f107 0310 	add.w	r3, r7, #16
 8007148:	4618      	mov	r0, r3
 800714a:	f000 fff5 	bl	8008138 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800714e:	2301      	movs	r3, #1
 8007150:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007152:	f001 fc9b 	bl	8008a8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007156:	f000 fd73 	bl	8007c40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800715a:	f001 fc67 	bl	8008a2c <vPortEnterCritical>
 800715e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007160:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007164:	b25b      	sxtb	r3, r3
 8007166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800716a:	d103      	bne.n	8007174 <xQueueReceive+0x128>
 800716c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800716e:	2200      	movs	r2, #0
 8007170:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007176:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800717a:	b25b      	sxtb	r3, r3
 800717c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007180:	d103      	bne.n	800718a <xQueueReceive+0x13e>
 8007182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007184:	2200      	movs	r2, #0
 8007186:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800718a:	f001 fc7f 	bl	8008a8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800718e:	1d3a      	adds	r2, r7, #4
 8007190:	f107 0310 	add.w	r3, r7, #16
 8007194:	4611      	mov	r1, r2
 8007196:	4618      	mov	r0, r3
 8007198:	f000 ffe4 	bl	8008164 <xTaskCheckForTimeOut>
 800719c:	4603      	mov	r3, r0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d123      	bne.n	80071ea <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80071a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071a4:	f000 fabf 	bl	8007726 <prvIsQueueEmpty>
 80071a8:	4603      	mov	r3, r0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d017      	beq.n	80071de <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80071ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071b0:	3324      	adds	r3, #36	@ 0x24
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	4611      	mov	r1, r2
 80071b6:	4618      	mov	r0, r3
 80071b8:	f000 ff34 	bl	8008024 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80071bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071be:	f000 fa60 	bl	8007682 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80071c2:	f000 fd4b 	bl	8007c5c <xTaskResumeAll>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d189      	bne.n	80070e0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80071cc:	4b0f      	ldr	r3, [pc, #60]	@ (800720c <xQueueReceive+0x1c0>)
 80071ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071d2:	601a      	str	r2, [r3, #0]
 80071d4:	f3bf 8f4f 	dsb	sy
 80071d8:	f3bf 8f6f 	isb	sy
 80071dc:	e780      	b.n	80070e0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80071de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071e0:	f000 fa4f 	bl	8007682 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80071e4:	f000 fd3a 	bl	8007c5c <xTaskResumeAll>
 80071e8:	e77a      	b.n	80070e0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80071ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071ec:	f000 fa49 	bl	8007682 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80071f0:	f000 fd34 	bl	8007c5c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80071f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071f6:	f000 fa96 	bl	8007726 <prvIsQueueEmpty>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f43f af6f 	beq.w	80070e0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007202:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007204:	4618      	mov	r0, r3
 8007206:	3730      	adds	r7, #48	@ 0x30
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}
 800720c:	e000ed04 	.word	0xe000ed04

08007210 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b08e      	sub	sp, #56	@ 0x38
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800721a:	2300      	movs	r3, #0
 800721c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007222:	2300      	movs	r3, #0
 8007224:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007228:	2b00      	cmp	r3, #0
 800722a:	d10b      	bne.n	8007244 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800722c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007230:	f383 8811 	msr	BASEPRI, r3
 8007234:	f3bf 8f6f 	isb	sy
 8007238:	f3bf 8f4f 	dsb	sy
 800723c:	623b      	str	r3, [r7, #32]
}
 800723e:	bf00      	nop
 8007240:	bf00      	nop
 8007242:	e7fd      	b.n	8007240 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007248:	2b00      	cmp	r3, #0
 800724a:	d00b      	beq.n	8007264 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800724c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007250:	f383 8811 	msr	BASEPRI, r3
 8007254:	f3bf 8f6f 	isb	sy
 8007258:	f3bf 8f4f 	dsb	sy
 800725c:	61fb      	str	r3, [r7, #28]
}
 800725e:	bf00      	nop
 8007260:	bf00      	nop
 8007262:	e7fd      	b.n	8007260 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007264:	f001 f8ca 	bl	80083fc <xTaskGetSchedulerState>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d102      	bne.n	8007274 <xQueueSemaphoreTake+0x64>
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d101      	bne.n	8007278 <xQueueSemaphoreTake+0x68>
 8007274:	2301      	movs	r3, #1
 8007276:	e000      	b.n	800727a <xQueueSemaphoreTake+0x6a>
 8007278:	2300      	movs	r3, #0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d10b      	bne.n	8007296 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800727e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007282:	f383 8811 	msr	BASEPRI, r3
 8007286:	f3bf 8f6f 	isb	sy
 800728a:	f3bf 8f4f 	dsb	sy
 800728e:	61bb      	str	r3, [r7, #24]
}
 8007290:	bf00      	nop
 8007292:	bf00      	nop
 8007294:	e7fd      	b.n	8007292 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007296:	f001 fbc9 	bl	8008a2c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800729a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800729c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800729e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80072a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d024      	beq.n	80072f0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80072a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072a8:	1e5a      	subs	r2, r3, #1
 80072aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ac:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80072ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d104      	bne.n	80072c0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80072b6:	f001 fa4d 	bl	8008754 <pvTaskIncrementMutexHeldCount>
 80072ba:	4602      	mov	r2, r0
 80072bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072be:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d00f      	beq.n	80072e8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ca:	3310      	adds	r3, #16
 80072cc:	4618      	mov	r0, r3
 80072ce:	f000 fecf 	bl	8008070 <xTaskRemoveFromEventList>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d007      	beq.n	80072e8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80072d8:	4b54      	ldr	r3, [pc, #336]	@ (800742c <xQueueSemaphoreTake+0x21c>)
 80072da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072de:	601a      	str	r2, [r3, #0]
 80072e0:	f3bf 8f4f 	dsb	sy
 80072e4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80072e8:	f001 fbd0 	bl	8008a8c <vPortExitCritical>
				return pdPASS;
 80072ec:	2301      	movs	r3, #1
 80072ee:	e098      	b.n	8007422 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d112      	bne.n	800731c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80072f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d00b      	beq.n	8007314 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80072fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007300:	f383 8811 	msr	BASEPRI, r3
 8007304:	f3bf 8f6f 	isb	sy
 8007308:	f3bf 8f4f 	dsb	sy
 800730c:	617b      	str	r3, [r7, #20]
}
 800730e:	bf00      	nop
 8007310:	bf00      	nop
 8007312:	e7fd      	b.n	8007310 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007314:	f001 fbba 	bl	8008a8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007318:	2300      	movs	r3, #0
 800731a:	e082      	b.n	8007422 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800731c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800731e:	2b00      	cmp	r3, #0
 8007320:	d106      	bne.n	8007330 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007322:	f107 030c 	add.w	r3, r7, #12
 8007326:	4618      	mov	r0, r3
 8007328:	f000 ff06 	bl	8008138 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800732c:	2301      	movs	r3, #1
 800732e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007330:	f001 fbac 	bl	8008a8c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007334:	f000 fc84 	bl	8007c40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007338:	f001 fb78 	bl	8008a2c <vPortEnterCritical>
 800733c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800733e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007342:	b25b      	sxtb	r3, r3
 8007344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007348:	d103      	bne.n	8007352 <xQueueSemaphoreTake+0x142>
 800734a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800734c:	2200      	movs	r2, #0
 800734e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007354:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007358:	b25b      	sxtb	r3, r3
 800735a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800735e:	d103      	bne.n	8007368 <xQueueSemaphoreTake+0x158>
 8007360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007362:	2200      	movs	r2, #0
 8007364:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007368:	f001 fb90 	bl	8008a8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800736c:	463a      	mov	r2, r7
 800736e:	f107 030c 	add.w	r3, r7, #12
 8007372:	4611      	mov	r1, r2
 8007374:	4618      	mov	r0, r3
 8007376:	f000 fef5 	bl	8008164 <xTaskCheckForTimeOut>
 800737a:	4603      	mov	r3, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d132      	bne.n	80073e6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007380:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007382:	f000 f9d0 	bl	8007726 <prvIsQueueEmpty>
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d026      	beq.n	80073da <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800738c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d109      	bne.n	80073a8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007394:	f001 fb4a 	bl	8008a2c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	4618      	mov	r0, r3
 800739e:	f001 f84b 	bl	8008438 <xTaskPriorityInherit>
 80073a2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80073a4:	f001 fb72 	bl	8008a8c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80073a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073aa:	3324      	adds	r3, #36	@ 0x24
 80073ac:	683a      	ldr	r2, [r7, #0]
 80073ae:	4611      	mov	r1, r2
 80073b0:	4618      	mov	r0, r3
 80073b2:	f000 fe37 	bl	8008024 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80073b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80073b8:	f000 f963 	bl	8007682 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80073bc:	f000 fc4e 	bl	8007c5c <xTaskResumeAll>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	f47f af67 	bne.w	8007296 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80073c8:	4b18      	ldr	r3, [pc, #96]	@ (800742c <xQueueSemaphoreTake+0x21c>)
 80073ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073ce:	601a      	str	r2, [r3, #0]
 80073d0:	f3bf 8f4f 	dsb	sy
 80073d4:	f3bf 8f6f 	isb	sy
 80073d8:	e75d      	b.n	8007296 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80073da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80073dc:	f000 f951 	bl	8007682 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80073e0:	f000 fc3c 	bl	8007c5c <xTaskResumeAll>
 80073e4:	e757      	b.n	8007296 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80073e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80073e8:	f000 f94b 	bl	8007682 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80073ec:	f000 fc36 	bl	8007c5c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80073f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80073f2:	f000 f998 	bl	8007726 <prvIsQueueEmpty>
 80073f6:	4603      	mov	r3, r0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	f43f af4c 	beq.w	8007296 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80073fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00d      	beq.n	8007420 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007404:	f001 fb12 	bl	8008a2c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007408:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800740a:	f000 f893 	bl	8007534 <prvGetDisinheritPriorityAfterTimeout>
 800740e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007416:	4618      	mov	r0, r3
 8007418:	f001 f90c 	bl	8008634 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800741c:	f001 fb36 	bl	8008a8c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007420:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007422:	4618      	mov	r0, r3
 8007424:	3738      	adds	r7, #56	@ 0x38
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	e000ed04 	.word	0xe000ed04

08007430 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b08e      	sub	sp, #56	@ 0x38
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007442:	2b00      	cmp	r3, #0
 8007444:	d10b      	bne.n	800745e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8007446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800744a:	f383 8811 	msr	BASEPRI, r3
 800744e:	f3bf 8f6f 	isb	sy
 8007452:	f3bf 8f4f 	dsb	sy
 8007456:	623b      	str	r3, [r7, #32]
}
 8007458:	bf00      	nop
 800745a:	bf00      	nop
 800745c:	e7fd      	b.n	800745a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d103      	bne.n	800746c <xQueueReceiveFromISR+0x3c>
 8007464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007468:	2b00      	cmp	r3, #0
 800746a:	d101      	bne.n	8007470 <xQueueReceiveFromISR+0x40>
 800746c:	2301      	movs	r3, #1
 800746e:	e000      	b.n	8007472 <xQueueReceiveFromISR+0x42>
 8007470:	2300      	movs	r3, #0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d10b      	bne.n	800748e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8007476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800747a:	f383 8811 	msr	BASEPRI, r3
 800747e:	f3bf 8f6f 	isb	sy
 8007482:	f3bf 8f4f 	dsb	sy
 8007486:	61fb      	str	r3, [r7, #28]
}
 8007488:	bf00      	nop
 800748a:	bf00      	nop
 800748c:	e7fd      	b.n	800748a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800748e:	f001 fb8f 	bl	8008bb0 <vPortValidateInterruptPriority>
	__asm volatile
 8007492:	f3ef 8211 	mrs	r2, BASEPRI
 8007496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800749a:	f383 8811 	msr	BASEPRI, r3
 800749e:	f3bf 8f6f 	isb	sy
 80074a2:	f3bf 8f4f 	dsb	sy
 80074a6:	61ba      	str	r2, [r7, #24]
 80074a8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80074aa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80074ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074b2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80074b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d02f      	beq.n	800751a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80074ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80074c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80074c4:	68b9      	ldr	r1, [r7, #8]
 80074c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80074c8:	f000 f8b5 	bl	8007636 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80074cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ce:	1e5a      	subs	r2, r3, #1
 80074d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80074d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80074d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074dc:	d112      	bne.n	8007504 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d016      	beq.n	8007514 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e8:	3310      	adds	r3, #16
 80074ea:	4618      	mov	r0, r3
 80074ec:	f000 fdc0 	bl	8008070 <xTaskRemoveFromEventList>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00e      	beq.n	8007514 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d00b      	beq.n	8007514 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	601a      	str	r2, [r3, #0]
 8007502:	e007      	b.n	8007514 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007504:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007508:	3301      	adds	r3, #1
 800750a:	b2db      	uxtb	r3, r3
 800750c:	b25a      	sxtb	r2, r3
 800750e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007510:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007514:	2301      	movs	r3, #1
 8007516:	637b      	str	r3, [r7, #52]	@ 0x34
 8007518:	e001      	b.n	800751e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800751a:	2300      	movs	r3, #0
 800751c:	637b      	str	r3, [r7, #52]	@ 0x34
 800751e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007520:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	f383 8811 	msr	BASEPRI, r3
}
 8007528:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800752a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800752c:	4618      	mov	r0, r3
 800752e:	3738      	adds	r7, #56	@ 0x38
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007534:	b480      	push	{r7}
 8007536:	b085      	sub	sp, #20
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007540:	2b00      	cmp	r3, #0
 8007542:	d006      	beq.n	8007552 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f1c3 0307 	rsb	r3, r3, #7
 800754e:	60fb      	str	r3, [r7, #12]
 8007550:	e001      	b.n	8007556 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007552:	2300      	movs	r3, #0
 8007554:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007556:	68fb      	ldr	r3, [r7, #12]
	}
 8007558:	4618      	mov	r0, r3
 800755a:	3714      	adds	r7, #20
 800755c:	46bd      	mov	sp, r7
 800755e:	bc80      	pop	{r7}
 8007560:	4770      	bx	lr

08007562 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b086      	sub	sp, #24
 8007566:	af00      	add	r7, sp, #0
 8007568:	60f8      	str	r0, [r7, #12]
 800756a:	60b9      	str	r1, [r7, #8]
 800756c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800756e:	2300      	movs	r3, #0
 8007570:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007576:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800757c:	2b00      	cmp	r3, #0
 800757e:	d10d      	bne.n	800759c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d14d      	bne.n	8007624 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	4618      	mov	r0, r3
 800758e:	f000 ffc9 	bl	8008524 <xTaskPriorityDisinherit>
 8007592:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2200      	movs	r2, #0
 8007598:	609a      	str	r2, [r3, #8]
 800759a:	e043      	b.n	8007624 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d119      	bne.n	80075d6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	6858      	ldr	r0, [r3, #4]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075aa:	461a      	mov	r2, r3
 80075ac:	68b9      	ldr	r1, [r7, #8]
 80075ae:	f002 fc6e 	bl	8009e8e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	685a      	ldr	r2, [r3, #4]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ba:	441a      	add	r2, r3
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	685a      	ldr	r2, [r3, #4]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d32b      	bcc.n	8007624 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	605a      	str	r2, [r3, #4]
 80075d4:	e026      	b.n	8007624 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	68d8      	ldr	r0, [r3, #12]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075de:	461a      	mov	r2, r3
 80075e0:	68b9      	ldr	r1, [r7, #8]
 80075e2:	f002 fc54 	bl	8009e8e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	68da      	ldr	r2, [r3, #12]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ee:	425b      	negs	r3, r3
 80075f0:	441a      	add	r2, r3
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	68da      	ldr	r2, [r3, #12]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d207      	bcs.n	8007612 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	689a      	ldr	r2, [r3, #8]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800760a:	425b      	negs	r3, r3
 800760c:	441a      	add	r2, r3
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2b02      	cmp	r3, #2
 8007616:	d105      	bne.n	8007624 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d002      	beq.n	8007624 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	3b01      	subs	r3, #1
 8007622:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	1c5a      	adds	r2, r3, #1
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800762c:	697b      	ldr	r3, [r7, #20]
}
 800762e:	4618      	mov	r0, r3
 8007630:	3718      	adds	r7, #24
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b082      	sub	sp, #8
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
 800763e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007644:	2b00      	cmp	r3, #0
 8007646:	d018      	beq.n	800767a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	68da      	ldr	r2, [r3, #12]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007650:	441a      	add	r2, r3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	68da      	ldr	r2, [r3, #12]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	429a      	cmp	r2, r3
 8007660:	d303      	bcc.n	800766a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	68d9      	ldr	r1, [r3, #12]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007672:	461a      	mov	r2, r3
 8007674:	6838      	ldr	r0, [r7, #0]
 8007676:	f002 fc0a 	bl	8009e8e <memcpy>
	}
}
 800767a:	bf00      	nop
 800767c:	3708      	adds	r7, #8
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}

08007682 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007682:	b580      	push	{r7, lr}
 8007684:	b084      	sub	sp, #16
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800768a:	f001 f9cf 	bl	8008a2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007694:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007696:	e011      	b.n	80076bc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800769c:	2b00      	cmp	r3, #0
 800769e:	d012      	beq.n	80076c6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	3324      	adds	r3, #36	@ 0x24
 80076a4:	4618      	mov	r0, r3
 80076a6:	f000 fce3 	bl	8008070 <xTaskRemoveFromEventList>
 80076aa:	4603      	mov	r3, r0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d001      	beq.n	80076b4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80076b0:	f000 fdbc 	bl	800822c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80076b4:	7bfb      	ldrb	r3, [r7, #15]
 80076b6:	3b01      	subs	r3, #1
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	dce9      	bgt.n	8007698 <prvUnlockQueue+0x16>
 80076c4:	e000      	b.n	80076c8 <prvUnlockQueue+0x46>
					break;
 80076c6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	22ff      	movs	r2, #255	@ 0xff
 80076cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80076d0:	f001 f9dc 	bl	8008a8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80076d4:	f001 f9aa 	bl	8008a2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80076de:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80076e0:	e011      	b.n	8007706 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	691b      	ldr	r3, [r3, #16]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d012      	beq.n	8007710 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	3310      	adds	r3, #16
 80076ee:	4618      	mov	r0, r3
 80076f0:	f000 fcbe 	bl	8008070 <xTaskRemoveFromEventList>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d001      	beq.n	80076fe <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80076fa:	f000 fd97 	bl	800822c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80076fe:	7bbb      	ldrb	r3, [r7, #14]
 8007700:	3b01      	subs	r3, #1
 8007702:	b2db      	uxtb	r3, r3
 8007704:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007706:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800770a:	2b00      	cmp	r3, #0
 800770c:	dce9      	bgt.n	80076e2 <prvUnlockQueue+0x60>
 800770e:	e000      	b.n	8007712 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007710:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	22ff      	movs	r2, #255	@ 0xff
 8007716:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800771a:	f001 f9b7 	bl	8008a8c <vPortExitCritical>
}
 800771e:	bf00      	nop
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007726:	b580      	push	{r7, lr}
 8007728:	b084      	sub	sp, #16
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800772e:	f001 f97d 	bl	8008a2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007736:	2b00      	cmp	r3, #0
 8007738:	d102      	bne.n	8007740 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800773a:	2301      	movs	r3, #1
 800773c:	60fb      	str	r3, [r7, #12]
 800773e:	e001      	b.n	8007744 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007740:	2300      	movs	r3, #0
 8007742:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007744:	f001 f9a2 	bl	8008a8c <vPortExitCritical>

	return xReturn;
 8007748:	68fb      	ldr	r3, [r7, #12]
}
 800774a:	4618      	mov	r0, r3
 800774c:	3710      	adds	r7, #16
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}

08007752 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007752:	b580      	push	{r7, lr}
 8007754:	b084      	sub	sp, #16
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800775a:	f001 f967 	bl	8008a2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007766:	429a      	cmp	r2, r3
 8007768:	d102      	bne.n	8007770 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800776a:	2301      	movs	r3, #1
 800776c:	60fb      	str	r3, [r7, #12]
 800776e:	e001      	b.n	8007774 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007770:	2300      	movs	r3, #0
 8007772:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007774:	f001 f98a 	bl	8008a8c <vPortExitCritical>

	return xReturn;
 8007778:	68fb      	ldr	r3, [r7, #12]
}
 800777a:	4618      	mov	r0, r3
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007782:	b580      	push	{r7, lr}
 8007784:	b08e      	sub	sp, #56	@ 0x38
 8007786:	af04      	add	r7, sp, #16
 8007788:	60f8      	str	r0, [r7, #12]
 800778a:	60b9      	str	r1, [r7, #8]
 800778c:	607a      	str	r2, [r7, #4]
 800778e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007792:	2b00      	cmp	r3, #0
 8007794:	d10b      	bne.n	80077ae <xTaskCreateStatic+0x2c>
	__asm volatile
 8007796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800779a:	f383 8811 	msr	BASEPRI, r3
 800779e:	f3bf 8f6f 	isb	sy
 80077a2:	f3bf 8f4f 	dsb	sy
 80077a6:	623b      	str	r3, [r7, #32]
}
 80077a8:	bf00      	nop
 80077aa:	bf00      	nop
 80077ac:	e7fd      	b.n	80077aa <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80077ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d10b      	bne.n	80077cc <xTaskCreateStatic+0x4a>
	__asm volatile
 80077b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077b8:	f383 8811 	msr	BASEPRI, r3
 80077bc:	f3bf 8f6f 	isb	sy
 80077c0:	f3bf 8f4f 	dsb	sy
 80077c4:	61fb      	str	r3, [r7, #28]
}
 80077c6:	bf00      	nop
 80077c8:	bf00      	nop
 80077ca:	e7fd      	b.n	80077c8 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80077cc:	23ac      	movs	r3, #172	@ 0xac
 80077ce:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	2bac      	cmp	r3, #172	@ 0xac
 80077d4:	d00b      	beq.n	80077ee <xTaskCreateStatic+0x6c>
	__asm volatile
 80077d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077da:	f383 8811 	msr	BASEPRI, r3
 80077de:	f3bf 8f6f 	isb	sy
 80077e2:	f3bf 8f4f 	dsb	sy
 80077e6:	61bb      	str	r3, [r7, #24]
}
 80077e8:	bf00      	nop
 80077ea:	bf00      	nop
 80077ec:	e7fd      	b.n	80077ea <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80077ee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80077f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d01e      	beq.n	8007834 <xTaskCreateStatic+0xb2>
 80077f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d01b      	beq.n	8007834 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80077fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077fe:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007802:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007804:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007808:	2202      	movs	r2, #2
 800780a:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800780e:	2300      	movs	r3, #0
 8007810:	9303      	str	r3, [sp, #12]
 8007812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007814:	9302      	str	r3, [sp, #8]
 8007816:	f107 0314 	add.w	r3, r7, #20
 800781a:	9301      	str	r3, [sp, #4]
 800781c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800781e:	9300      	str	r3, [sp, #0]
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	68b9      	ldr	r1, [r7, #8]
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f000 f850 	bl	80078cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800782c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800782e:	f000 f8f7 	bl	8007a20 <prvAddNewTaskToReadyList>
 8007832:	e001      	b.n	8007838 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007834:	2300      	movs	r3, #0
 8007836:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007838:	697b      	ldr	r3, [r7, #20]
	}
 800783a:	4618      	mov	r0, r3
 800783c:	3728      	adds	r7, #40	@ 0x28
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007842:	b580      	push	{r7, lr}
 8007844:	b08c      	sub	sp, #48	@ 0x30
 8007846:	af04      	add	r7, sp, #16
 8007848:	60f8      	str	r0, [r7, #12]
 800784a:	60b9      	str	r1, [r7, #8]
 800784c:	603b      	str	r3, [r7, #0]
 800784e:	4613      	mov	r3, r2
 8007850:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007852:	88fb      	ldrh	r3, [r7, #6]
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	4618      	mov	r0, r3
 8007858:	f001 f9ea 	bl	8008c30 <pvPortMalloc>
 800785c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d00e      	beq.n	8007882 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007864:	20ac      	movs	r0, #172	@ 0xac
 8007866:	f001 f9e3 	bl	8008c30 <pvPortMalloc>
 800786a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800786c:	69fb      	ldr	r3, [r7, #28]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d003      	beq.n	800787a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	697a      	ldr	r2, [r7, #20]
 8007876:	631a      	str	r2, [r3, #48]	@ 0x30
 8007878:	e005      	b.n	8007886 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800787a:	6978      	ldr	r0, [r7, #20]
 800787c:	f001 faa6 	bl	8008dcc <vPortFree>
 8007880:	e001      	b.n	8007886 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007882:	2300      	movs	r3, #0
 8007884:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d017      	beq.n	80078bc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	2200      	movs	r2, #0
 8007890:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007894:	88fa      	ldrh	r2, [r7, #6]
 8007896:	2300      	movs	r3, #0
 8007898:	9303      	str	r3, [sp, #12]
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	9302      	str	r3, [sp, #8]
 800789e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078a0:	9301      	str	r3, [sp, #4]
 80078a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078a4:	9300      	str	r3, [sp, #0]
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	68b9      	ldr	r1, [r7, #8]
 80078aa:	68f8      	ldr	r0, [r7, #12]
 80078ac:	f000 f80e 	bl	80078cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80078b0:	69f8      	ldr	r0, [r7, #28]
 80078b2:	f000 f8b5 	bl	8007a20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80078b6:	2301      	movs	r3, #1
 80078b8:	61bb      	str	r3, [r7, #24]
 80078ba:	e002      	b.n	80078c2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80078bc:	f04f 33ff 	mov.w	r3, #4294967295
 80078c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80078c2:	69bb      	ldr	r3, [r7, #24]
	}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3720      	adds	r7, #32
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b088      	sub	sp, #32
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	60f8      	str	r0, [r7, #12]
 80078d4:	60b9      	str	r1, [r7, #8]
 80078d6:	607a      	str	r2, [r7, #4]
 80078d8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80078da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078dc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	461a      	mov	r2, r3
 80078e4:	21a5      	movs	r1, #165	@ 0xa5
 80078e6:	f002 f9dc 	bl	8009ca2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80078ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80078f4:	3b01      	subs	r3, #1
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	4413      	add	r3, r2
 80078fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	f023 0307 	bic.w	r3, r3, #7
 8007902:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007904:	69bb      	ldr	r3, [r7, #24]
 8007906:	f003 0307 	and.w	r3, r3, #7
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00b      	beq.n	8007926 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800790e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007912:	f383 8811 	msr	BASEPRI, r3
 8007916:	f3bf 8f6f 	isb	sy
 800791a:	f3bf 8f4f 	dsb	sy
 800791e:	617b      	str	r3, [r7, #20]
}
 8007920:	bf00      	nop
 8007922:	bf00      	nop
 8007924:	e7fd      	b.n	8007922 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d01f      	beq.n	800796c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800792c:	2300      	movs	r3, #0
 800792e:	61fb      	str	r3, [r7, #28]
 8007930:	e012      	b.n	8007958 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007932:	68ba      	ldr	r2, [r7, #8]
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	4413      	add	r3, r2
 8007938:	7819      	ldrb	r1, [r3, #0]
 800793a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800793c:	69fb      	ldr	r3, [r7, #28]
 800793e:	4413      	add	r3, r2
 8007940:	3334      	adds	r3, #52	@ 0x34
 8007942:	460a      	mov	r2, r1
 8007944:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007946:	68ba      	ldr	r2, [r7, #8]
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	4413      	add	r3, r2
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d006      	beq.n	8007960 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	3301      	adds	r3, #1
 8007956:	61fb      	str	r3, [r7, #28]
 8007958:	69fb      	ldr	r3, [r7, #28]
 800795a:	2b0f      	cmp	r3, #15
 800795c:	d9e9      	bls.n	8007932 <prvInitialiseNewTask+0x66>
 800795e:	e000      	b.n	8007962 <prvInitialiseNewTask+0x96>
			{
				break;
 8007960:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007964:	2200      	movs	r2, #0
 8007966:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800796a:	e003      	b.n	8007974 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800796c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800796e:	2200      	movs	r2, #0
 8007970:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007976:	2b06      	cmp	r3, #6
 8007978:	d901      	bls.n	800797e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800797a:	2306      	movs	r3, #6
 800797c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800797e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007980:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007982:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007986:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007988:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800798a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800798c:	2200      	movs	r2, #0
 800798e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007992:	3304      	adds	r3, #4
 8007994:	4618      	mov	r0, r3
 8007996:	f7fe ff06 	bl	80067a6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800799a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800799c:	3318      	adds	r3, #24
 800799e:	4618      	mov	r0, r3
 80079a0:	f7fe ff01 	bl	80067a6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80079a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079a8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ac:	f1c3 0207 	rsb	r2, r3, #7
 80079b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80079b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079b8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80079ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079bc:	2200      	movs	r2, #0
 80079be:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80079c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c2:	2200      	movs	r2, #0
 80079c4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80079c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ca:	2200      	movs	r2, #0
 80079cc:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80079d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d2:	3358      	adds	r3, #88	@ 0x58
 80079d4:	224c      	movs	r2, #76	@ 0x4c
 80079d6:	2100      	movs	r1, #0
 80079d8:	4618      	mov	r0, r3
 80079da:	f002 f962 	bl	8009ca2 <memset>
 80079de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e0:	4a0c      	ldr	r2, [pc, #48]	@ (8007a14 <prvInitialiseNewTask+0x148>)
 80079e2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80079e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e6:	4a0c      	ldr	r2, [pc, #48]	@ (8007a18 <prvInitialiseNewTask+0x14c>)
 80079e8:	661a      	str	r2, [r3, #96]	@ 0x60
 80079ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ec:	4a0b      	ldr	r2, [pc, #44]	@ (8007a1c <prvInitialiseNewTask+0x150>)
 80079ee:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80079f0:	683a      	ldr	r2, [r7, #0]
 80079f2:	68f9      	ldr	r1, [r7, #12]
 80079f4:	69b8      	ldr	r0, [r7, #24]
 80079f6:	f000 ff27 	bl	8008848 <pxPortInitialiseStack>
 80079fa:	4602      	mov	r2, r0
 80079fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079fe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d002      	beq.n	8007a0c <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a0a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a0c:	bf00      	nop
 8007a0e:	3720      	adds	r7, #32
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	20004858 	.word	0x20004858
 8007a18:	200048c0 	.word	0x200048c0
 8007a1c:	20004928 	.word	0x20004928

08007a20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007a28:	f001 f800 	bl	8008a2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007a2c:	4b2c      	ldr	r3, [pc, #176]	@ (8007ae0 <prvAddNewTaskToReadyList+0xc0>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	3301      	adds	r3, #1
 8007a32:	4a2b      	ldr	r2, [pc, #172]	@ (8007ae0 <prvAddNewTaskToReadyList+0xc0>)
 8007a34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007a36:	4b2b      	ldr	r3, [pc, #172]	@ (8007ae4 <prvAddNewTaskToReadyList+0xc4>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d109      	bne.n	8007a52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007a3e:	4a29      	ldr	r2, [pc, #164]	@ (8007ae4 <prvAddNewTaskToReadyList+0xc4>)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007a44:	4b26      	ldr	r3, [pc, #152]	@ (8007ae0 <prvAddNewTaskToReadyList+0xc0>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d110      	bne.n	8007a6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007a4c:	f000 fc12 	bl	8008274 <prvInitialiseTaskLists>
 8007a50:	e00d      	b.n	8007a6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007a52:	4b25      	ldr	r3, [pc, #148]	@ (8007ae8 <prvAddNewTaskToReadyList+0xc8>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d109      	bne.n	8007a6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007a5a:	4b22      	ldr	r3, [pc, #136]	@ (8007ae4 <prvAddNewTaskToReadyList+0xc4>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d802      	bhi.n	8007a6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007a68:	4a1e      	ldr	r2, [pc, #120]	@ (8007ae4 <prvAddNewTaskToReadyList+0xc4>)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007a6e:	4b1f      	ldr	r3, [pc, #124]	@ (8007aec <prvAddNewTaskToReadyList+0xcc>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	3301      	adds	r3, #1
 8007a74:	4a1d      	ldr	r2, [pc, #116]	@ (8007aec <prvAddNewTaskToReadyList+0xcc>)
 8007a76:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007a78:	4b1c      	ldr	r3, [pc, #112]	@ (8007aec <prvAddNewTaskToReadyList+0xcc>)
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a84:	2201      	movs	r2, #1
 8007a86:	409a      	lsls	r2, r3
 8007a88:	4b19      	ldr	r3, [pc, #100]	@ (8007af0 <prvAddNewTaskToReadyList+0xd0>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	4a18      	ldr	r2, [pc, #96]	@ (8007af0 <prvAddNewTaskToReadyList+0xd0>)
 8007a90:	6013      	str	r3, [r2, #0]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a96:	4613      	mov	r3, r2
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	4413      	add	r3, r2
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	4a15      	ldr	r2, [pc, #84]	@ (8007af4 <prvAddNewTaskToReadyList+0xd4>)
 8007aa0:	441a      	add	r2, r3
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	3304      	adds	r3, #4
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	4610      	mov	r0, r2
 8007aaa:	f7fe fe88 	bl	80067be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007aae:	f000 ffed 	bl	8008a8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8007ae8 <prvAddNewTaskToReadyList+0xc8>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00e      	beq.n	8007ad8 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007aba:	4b0a      	ldr	r3, [pc, #40]	@ (8007ae4 <prvAddNewTaskToReadyList+0xc4>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d207      	bcs.n	8007ad8 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8007af8 <prvAddNewTaskToReadyList+0xd8>)
 8007aca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ace:	601a      	str	r2, [r3, #0]
 8007ad0:	f3bf 8f4f 	dsb	sy
 8007ad4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ad8:	bf00      	nop
 8007ada:	3708      	adds	r7, #8
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	200007fc 	.word	0x200007fc
 8007ae4:	200006fc 	.word	0x200006fc
 8007ae8:	20000808 	.word	0x20000808
 8007aec:	20000818 	.word	0x20000818
 8007af0:	20000804 	.word	0x20000804
 8007af4:	20000700 	.word	0x20000700
 8007af8:	e000ed04 	.word	0xe000ed04

08007afc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007b04:	2300      	movs	r3, #0
 8007b06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d018      	beq.n	8007b40 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007b0e:	4b14      	ldr	r3, [pc, #80]	@ (8007b60 <vTaskDelay+0x64>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d00b      	beq.n	8007b2e <vTaskDelay+0x32>
	__asm volatile
 8007b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b1a:	f383 8811 	msr	BASEPRI, r3
 8007b1e:	f3bf 8f6f 	isb	sy
 8007b22:	f3bf 8f4f 	dsb	sy
 8007b26:	60bb      	str	r3, [r7, #8]
}
 8007b28:	bf00      	nop
 8007b2a:	bf00      	nop
 8007b2c:	e7fd      	b.n	8007b2a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007b2e:	f000 f887 	bl	8007c40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007b32:	2100      	movs	r1, #0
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 fe21 	bl	800877c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007b3a:	f000 f88f 	bl	8007c5c <xTaskResumeAll>
 8007b3e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d107      	bne.n	8007b56 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007b46:	4b07      	ldr	r3, [pc, #28]	@ (8007b64 <vTaskDelay+0x68>)
 8007b48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b4c:	601a      	str	r2, [r3, #0]
 8007b4e:	f3bf 8f4f 	dsb	sy
 8007b52:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007b56:	bf00      	nop
 8007b58:	3710      	adds	r7, #16
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	20000824 	.word	0x20000824
 8007b64:	e000ed04 	.word	0xe000ed04

08007b68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b08a      	sub	sp, #40	@ 0x28
 8007b6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007b72:	2300      	movs	r3, #0
 8007b74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007b76:	463a      	mov	r2, r7
 8007b78:	1d39      	adds	r1, r7, #4
 8007b7a:	f107 0308 	add.w	r3, r7, #8
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f7f9 fb8c 	bl	800129c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007b84:	6839      	ldr	r1, [r7, #0]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	68ba      	ldr	r2, [r7, #8]
 8007b8a:	9202      	str	r2, [sp, #8]
 8007b8c:	9301      	str	r3, [sp, #4]
 8007b8e:	2300      	movs	r3, #0
 8007b90:	9300      	str	r3, [sp, #0]
 8007b92:	2300      	movs	r3, #0
 8007b94:	460a      	mov	r2, r1
 8007b96:	4922      	ldr	r1, [pc, #136]	@ (8007c20 <vTaskStartScheduler+0xb8>)
 8007b98:	4822      	ldr	r0, [pc, #136]	@ (8007c24 <vTaskStartScheduler+0xbc>)
 8007b9a:	f7ff fdf2 	bl	8007782 <xTaskCreateStatic>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	4a21      	ldr	r2, [pc, #132]	@ (8007c28 <vTaskStartScheduler+0xc0>)
 8007ba2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007ba4:	4b20      	ldr	r3, [pc, #128]	@ (8007c28 <vTaskStartScheduler+0xc0>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d002      	beq.n	8007bb2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007bac:	2301      	movs	r3, #1
 8007bae:	617b      	str	r3, [r7, #20]
 8007bb0:	e001      	b.n	8007bb6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d11d      	bne.n	8007bf8 <vTaskStartScheduler+0x90>
	__asm volatile
 8007bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bc0:	f383 8811 	msr	BASEPRI, r3
 8007bc4:	f3bf 8f6f 	isb	sy
 8007bc8:	f3bf 8f4f 	dsb	sy
 8007bcc:	613b      	str	r3, [r7, #16]
}
 8007bce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007bd0:	4b16      	ldr	r3, [pc, #88]	@ (8007c2c <vTaskStartScheduler+0xc4>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	3358      	adds	r3, #88	@ 0x58
 8007bd6:	4a16      	ldr	r2, [pc, #88]	@ (8007c30 <vTaskStartScheduler+0xc8>)
 8007bd8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007bda:	4b16      	ldr	r3, [pc, #88]	@ (8007c34 <vTaskStartScheduler+0xcc>)
 8007bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8007be0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007be2:	4b15      	ldr	r3, [pc, #84]	@ (8007c38 <vTaskStartScheduler+0xd0>)
 8007be4:	2201      	movs	r2, #1
 8007be6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007be8:	4b14      	ldr	r3, [pc, #80]	@ (8007c3c <vTaskStartScheduler+0xd4>)
 8007bea:	2200      	movs	r2, #0
 8007bec:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8007bee:	f7f9 fb47 	bl	8001280 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007bf2:	f000 fea9 	bl	8008948 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007bf6:	e00f      	b.n	8007c18 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bfe:	d10b      	bne.n	8007c18 <vTaskStartScheduler+0xb0>
	__asm volatile
 8007c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c04:	f383 8811 	msr	BASEPRI, r3
 8007c08:	f3bf 8f6f 	isb	sy
 8007c0c:	f3bf 8f4f 	dsb	sy
 8007c10:	60fb      	str	r3, [r7, #12]
}
 8007c12:	bf00      	nop
 8007c14:	bf00      	nop
 8007c16:	e7fd      	b.n	8007c14 <vTaskStartScheduler+0xac>
}
 8007c18:	bf00      	nop
 8007c1a:	3718      	adds	r7, #24
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}
 8007c20:	0800c8bc 	.word	0x0800c8bc
 8007c24:	08008245 	.word	0x08008245
 8007c28:	20000820 	.word	0x20000820
 8007c2c:	200006fc 	.word	0x200006fc
 8007c30:	20000138 	.word	0x20000138
 8007c34:	2000081c 	.word	0x2000081c
 8007c38:	20000808 	.word	0x20000808
 8007c3c:	20000800 	.word	0x20000800

08007c40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007c40:	b480      	push	{r7}
 8007c42:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007c44:	4b04      	ldr	r3, [pc, #16]	@ (8007c58 <vTaskSuspendAll+0x18>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	3301      	adds	r3, #1
 8007c4a:	4a03      	ldr	r2, [pc, #12]	@ (8007c58 <vTaskSuspendAll+0x18>)
 8007c4c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007c4e:	bf00      	nop
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bc80      	pop	{r7}
 8007c54:	4770      	bx	lr
 8007c56:	bf00      	nop
 8007c58:	20000824 	.word	0x20000824

08007c5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007c62:	2300      	movs	r3, #0
 8007c64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007c66:	2300      	movs	r3, #0
 8007c68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007c6a:	4b42      	ldr	r3, [pc, #264]	@ (8007d74 <xTaskResumeAll+0x118>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d10b      	bne.n	8007c8a <xTaskResumeAll+0x2e>
	__asm volatile
 8007c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c76:	f383 8811 	msr	BASEPRI, r3
 8007c7a:	f3bf 8f6f 	isb	sy
 8007c7e:	f3bf 8f4f 	dsb	sy
 8007c82:	603b      	str	r3, [r7, #0]
}
 8007c84:	bf00      	nop
 8007c86:	bf00      	nop
 8007c88:	e7fd      	b.n	8007c86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007c8a:	f000 fecf 	bl	8008a2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007c8e:	4b39      	ldr	r3, [pc, #228]	@ (8007d74 <xTaskResumeAll+0x118>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	3b01      	subs	r3, #1
 8007c94:	4a37      	ldr	r2, [pc, #220]	@ (8007d74 <xTaskResumeAll+0x118>)
 8007c96:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c98:	4b36      	ldr	r3, [pc, #216]	@ (8007d74 <xTaskResumeAll+0x118>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d161      	bne.n	8007d64 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007ca0:	4b35      	ldr	r3, [pc, #212]	@ (8007d78 <xTaskResumeAll+0x11c>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d05d      	beq.n	8007d64 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ca8:	e02e      	b.n	8007d08 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007caa:	4b34      	ldr	r3, [pc, #208]	@ (8007d7c <xTaskResumeAll+0x120>)
 8007cac:	68db      	ldr	r3, [r3, #12]
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	3318      	adds	r3, #24
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7fe fddc 	bl	8006874 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	3304      	adds	r3, #4
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f7fe fdd7 	bl	8006874 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cca:	2201      	movs	r2, #1
 8007ccc:	409a      	lsls	r2, r3
 8007cce:	4b2c      	ldr	r3, [pc, #176]	@ (8007d80 <xTaskResumeAll+0x124>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	4a2a      	ldr	r2, [pc, #168]	@ (8007d80 <xTaskResumeAll+0x124>)
 8007cd6:	6013      	str	r3, [r2, #0]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cdc:	4613      	mov	r3, r2
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	4413      	add	r3, r2
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	4a27      	ldr	r2, [pc, #156]	@ (8007d84 <xTaskResumeAll+0x128>)
 8007ce6:	441a      	add	r2, r3
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	3304      	adds	r3, #4
 8007cec:	4619      	mov	r1, r3
 8007cee:	4610      	mov	r0, r2
 8007cf0:	f7fe fd65 	bl	80067be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cf8:	4b23      	ldr	r3, [pc, #140]	@ (8007d88 <xTaskResumeAll+0x12c>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d302      	bcc.n	8007d08 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007d02:	4b22      	ldr	r3, [pc, #136]	@ (8007d8c <xTaskResumeAll+0x130>)
 8007d04:	2201      	movs	r2, #1
 8007d06:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d08:	4b1c      	ldr	r3, [pc, #112]	@ (8007d7c <xTaskResumeAll+0x120>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d1cc      	bne.n	8007caa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d001      	beq.n	8007d1a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007d16:	f000 fb51 	bl	80083bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007d1a:	4b1d      	ldr	r3, [pc, #116]	@ (8007d90 <xTaskResumeAll+0x134>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d010      	beq.n	8007d48 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007d26:	f000 f845 	bl	8007db4 <xTaskIncrementTick>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d002      	beq.n	8007d36 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007d30:	4b16      	ldr	r3, [pc, #88]	@ (8007d8c <xTaskResumeAll+0x130>)
 8007d32:	2201      	movs	r2, #1
 8007d34:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	3b01      	subs	r3, #1
 8007d3a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d1f1      	bne.n	8007d26 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007d42:	4b13      	ldr	r3, [pc, #76]	@ (8007d90 <xTaskResumeAll+0x134>)
 8007d44:	2200      	movs	r2, #0
 8007d46:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007d48:	4b10      	ldr	r3, [pc, #64]	@ (8007d8c <xTaskResumeAll+0x130>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d009      	beq.n	8007d64 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007d50:	2301      	movs	r3, #1
 8007d52:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007d54:	4b0f      	ldr	r3, [pc, #60]	@ (8007d94 <xTaskResumeAll+0x138>)
 8007d56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d5a:	601a      	str	r2, [r3, #0]
 8007d5c:	f3bf 8f4f 	dsb	sy
 8007d60:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d64:	f000 fe92 	bl	8008a8c <vPortExitCritical>

	return xAlreadyYielded;
 8007d68:	68bb      	ldr	r3, [r7, #8]
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3710      	adds	r7, #16
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	20000824 	.word	0x20000824
 8007d78:	200007fc 	.word	0x200007fc
 8007d7c:	200007bc 	.word	0x200007bc
 8007d80:	20000804 	.word	0x20000804
 8007d84:	20000700 	.word	0x20000700
 8007d88:	200006fc 	.word	0x200006fc
 8007d8c:	20000810 	.word	0x20000810
 8007d90:	2000080c 	.word	0x2000080c
 8007d94:	e000ed04 	.word	0xe000ed04

08007d98 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007d9e:	4b04      	ldr	r3, [pc, #16]	@ (8007db0 <xTaskGetTickCount+0x18>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007da4:	687b      	ldr	r3, [r7, #4]
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	370c      	adds	r7, #12
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bc80      	pop	{r7}
 8007dae:	4770      	bx	lr
 8007db0:	20000800 	.word	0x20000800

08007db4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b086      	sub	sp, #24
 8007db8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007dbe:	4b4f      	ldr	r3, [pc, #316]	@ (8007efc <xTaskIncrementTick+0x148>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	f040 808f 	bne.w	8007ee6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007dc8:	4b4d      	ldr	r3, [pc, #308]	@ (8007f00 <xTaskIncrementTick+0x14c>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	3301      	adds	r3, #1
 8007dce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007dd0:	4a4b      	ldr	r2, [pc, #300]	@ (8007f00 <xTaskIncrementTick+0x14c>)
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d121      	bne.n	8007e20 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007ddc:	4b49      	ldr	r3, [pc, #292]	@ (8007f04 <xTaskIncrementTick+0x150>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00b      	beq.n	8007dfe <xTaskIncrementTick+0x4a>
	__asm volatile
 8007de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dea:	f383 8811 	msr	BASEPRI, r3
 8007dee:	f3bf 8f6f 	isb	sy
 8007df2:	f3bf 8f4f 	dsb	sy
 8007df6:	603b      	str	r3, [r7, #0]
}
 8007df8:	bf00      	nop
 8007dfa:	bf00      	nop
 8007dfc:	e7fd      	b.n	8007dfa <xTaskIncrementTick+0x46>
 8007dfe:	4b41      	ldr	r3, [pc, #260]	@ (8007f04 <xTaskIncrementTick+0x150>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	60fb      	str	r3, [r7, #12]
 8007e04:	4b40      	ldr	r3, [pc, #256]	@ (8007f08 <xTaskIncrementTick+0x154>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a3e      	ldr	r2, [pc, #248]	@ (8007f04 <xTaskIncrementTick+0x150>)
 8007e0a:	6013      	str	r3, [r2, #0]
 8007e0c:	4a3e      	ldr	r2, [pc, #248]	@ (8007f08 <xTaskIncrementTick+0x154>)
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	6013      	str	r3, [r2, #0]
 8007e12:	4b3e      	ldr	r3, [pc, #248]	@ (8007f0c <xTaskIncrementTick+0x158>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	3301      	adds	r3, #1
 8007e18:	4a3c      	ldr	r2, [pc, #240]	@ (8007f0c <xTaskIncrementTick+0x158>)
 8007e1a:	6013      	str	r3, [r2, #0]
 8007e1c:	f000 face 	bl	80083bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007e20:	4b3b      	ldr	r3, [pc, #236]	@ (8007f10 <xTaskIncrementTick+0x15c>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	693a      	ldr	r2, [r7, #16]
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d348      	bcc.n	8007ebc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e2a:	4b36      	ldr	r3, [pc, #216]	@ (8007f04 <xTaskIncrementTick+0x150>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d104      	bne.n	8007e3e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e34:	4b36      	ldr	r3, [pc, #216]	@ (8007f10 <xTaskIncrementTick+0x15c>)
 8007e36:	f04f 32ff 	mov.w	r2, #4294967295
 8007e3a:	601a      	str	r2, [r3, #0]
					break;
 8007e3c:	e03e      	b.n	8007ebc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e3e:	4b31      	ldr	r3, [pc, #196]	@ (8007f04 <xTaskIncrementTick+0x150>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007e4e:	693a      	ldr	r2, [r7, #16]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d203      	bcs.n	8007e5e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007e56:	4a2e      	ldr	r2, [pc, #184]	@ (8007f10 <xTaskIncrementTick+0x15c>)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007e5c:	e02e      	b.n	8007ebc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	3304      	adds	r3, #4
 8007e62:	4618      	mov	r0, r3
 8007e64:	f7fe fd06 	bl	8006874 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d004      	beq.n	8007e7a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	3318      	adds	r3, #24
 8007e74:	4618      	mov	r0, r3
 8007e76:	f7fe fcfd 	bl	8006874 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e7e:	2201      	movs	r2, #1
 8007e80:	409a      	lsls	r2, r3
 8007e82:	4b24      	ldr	r3, [pc, #144]	@ (8007f14 <xTaskIncrementTick+0x160>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	4a22      	ldr	r2, [pc, #136]	@ (8007f14 <xTaskIncrementTick+0x160>)
 8007e8a:	6013      	str	r3, [r2, #0]
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e90:	4613      	mov	r3, r2
 8007e92:	009b      	lsls	r3, r3, #2
 8007e94:	4413      	add	r3, r2
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	4a1f      	ldr	r2, [pc, #124]	@ (8007f18 <xTaskIncrementTick+0x164>)
 8007e9a:	441a      	add	r2, r3
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	3304      	adds	r3, #4
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	4610      	mov	r0, r2
 8007ea4:	f7fe fc8b 	bl	80067be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eac:	4b1b      	ldr	r3, [pc, #108]	@ (8007f1c <xTaskIncrementTick+0x168>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d3b9      	bcc.n	8007e2a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007eba:	e7b6      	b.n	8007e2a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007ebc:	4b17      	ldr	r3, [pc, #92]	@ (8007f1c <xTaskIncrementTick+0x168>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ec2:	4915      	ldr	r1, [pc, #84]	@ (8007f18 <xTaskIncrementTick+0x164>)
 8007ec4:	4613      	mov	r3, r2
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	4413      	add	r3, r2
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	440b      	add	r3, r1
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d901      	bls.n	8007ed8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007ed8:	4b11      	ldr	r3, [pc, #68]	@ (8007f20 <xTaskIncrementTick+0x16c>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d007      	beq.n	8007ef0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	617b      	str	r3, [r7, #20]
 8007ee4:	e004      	b.n	8007ef0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8007f24 <xTaskIncrementTick+0x170>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	3301      	adds	r3, #1
 8007eec:	4a0d      	ldr	r2, [pc, #52]	@ (8007f24 <xTaskIncrementTick+0x170>)
 8007eee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007ef0:	697b      	ldr	r3, [r7, #20]
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3718      	adds	r7, #24
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	20000824 	.word	0x20000824
 8007f00:	20000800 	.word	0x20000800
 8007f04:	200007b4 	.word	0x200007b4
 8007f08:	200007b8 	.word	0x200007b8
 8007f0c:	20000814 	.word	0x20000814
 8007f10:	2000081c 	.word	0x2000081c
 8007f14:	20000804 	.word	0x20000804
 8007f18:	20000700 	.word	0x20000700
 8007f1c:	200006fc 	.word	0x200006fc
 8007f20:	20000810 	.word	0x20000810
 8007f24:	2000080c 	.word	0x2000080c

08007f28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b086      	sub	sp, #24
 8007f2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007f2e:	4b35      	ldr	r3, [pc, #212]	@ (8008004 <vTaskSwitchContext+0xdc>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d003      	beq.n	8007f3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007f36:	4b34      	ldr	r3, [pc, #208]	@ (8008008 <vTaskSwitchContext+0xe0>)
 8007f38:	2201      	movs	r2, #1
 8007f3a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007f3c:	e05e      	b.n	8007ffc <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
 8007f3e:	4b32      	ldr	r3, [pc, #200]	@ (8008008 <vTaskSwitchContext+0xe0>)
 8007f40:	2200      	movs	r2, #0
 8007f42:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8007f44:	f7f9 f9a2 	bl	800128c <getRunTimeCounterValue>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	4a30      	ldr	r2, [pc, #192]	@ (800800c <vTaskSwitchContext+0xe4>)
 8007f4c:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8007f4e:	4b2f      	ldr	r3, [pc, #188]	@ (800800c <vTaskSwitchContext+0xe4>)
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	4b2f      	ldr	r3, [pc, #188]	@ (8008010 <vTaskSwitchContext+0xe8>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d909      	bls.n	8007f6e <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8007f5a:	4b2e      	ldr	r3, [pc, #184]	@ (8008014 <vTaskSwitchContext+0xec>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007f60:	4a2a      	ldr	r2, [pc, #168]	@ (800800c <vTaskSwitchContext+0xe4>)
 8007f62:	6810      	ldr	r0, [r2, #0]
 8007f64:	4a2a      	ldr	r2, [pc, #168]	@ (8008010 <vTaskSwitchContext+0xe8>)
 8007f66:	6812      	ldr	r2, [r2, #0]
 8007f68:	1a82      	subs	r2, r0, r2
 8007f6a:	440a      	add	r2, r1
 8007f6c:	655a      	str	r2, [r3, #84]	@ 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8007f6e:	4b27      	ldr	r3, [pc, #156]	@ (800800c <vTaskSwitchContext+0xe4>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a27      	ldr	r2, [pc, #156]	@ (8008010 <vTaskSwitchContext+0xe8>)
 8007f74:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f76:	4b28      	ldr	r3, [pc, #160]	@ (8008018 <vTaskSwitchContext+0xf0>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	fab3 f383 	clz	r3, r3
 8007f82:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007f84:	7afb      	ldrb	r3, [r7, #11]
 8007f86:	f1c3 031f 	rsb	r3, r3, #31
 8007f8a:	617b      	str	r3, [r7, #20]
 8007f8c:	4923      	ldr	r1, [pc, #140]	@ (800801c <vTaskSwitchContext+0xf4>)
 8007f8e:	697a      	ldr	r2, [r7, #20]
 8007f90:	4613      	mov	r3, r2
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	4413      	add	r3, r2
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	440b      	add	r3, r1
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d10b      	bne.n	8007fb8 <vTaskSwitchContext+0x90>
	__asm volatile
 8007fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fa4:	f383 8811 	msr	BASEPRI, r3
 8007fa8:	f3bf 8f6f 	isb	sy
 8007fac:	f3bf 8f4f 	dsb	sy
 8007fb0:	607b      	str	r3, [r7, #4]
}
 8007fb2:	bf00      	nop
 8007fb4:	bf00      	nop
 8007fb6:	e7fd      	b.n	8007fb4 <vTaskSwitchContext+0x8c>
 8007fb8:	697a      	ldr	r2, [r7, #20]
 8007fba:	4613      	mov	r3, r2
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	4413      	add	r3, r2
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	4a16      	ldr	r2, [pc, #88]	@ (800801c <vTaskSwitchContext+0xf4>)
 8007fc4:	4413      	add	r3, r2
 8007fc6:	613b      	str	r3, [r7, #16]
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	685a      	ldr	r2, [r3, #4]
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	605a      	str	r2, [r3, #4]
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	685a      	ldr	r2, [r3, #4]
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	3308      	adds	r3, #8
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d104      	bne.n	8007fe8 <vTaskSwitchContext+0xc0>
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	685a      	ldr	r2, [r3, #4]
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	605a      	str	r2, [r3, #4]
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	4a09      	ldr	r2, [pc, #36]	@ (8008014 <vTaskSwitchContext+0xec>)
 8007ff0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007ff2:	4b08      	ldr	r3, [pc, #32]	@ (8008014 <vTaskSwitchContext+0xec>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	3358      	adds	r3, #88	@ 0x58
 8007ff8:	4a09      	ldr	r2, [pc, #36]	@ (8008020 <vTaskSwitchContext+0xf8>)
 8007ffa:	6013      	str	r3, [r2, #0]
}
 8007ffc:	bf00      	nop
 8007ffe:	3718      	adds	r7, #24
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}
 8008004:	20000824 	.word	0x20000824
 8008008:	20000810 	.word	0x20000810
 800800c:	2000082c 	.word	0x2000082c
 8008010:	20000828 	.word	0x20000828
 8008014:	200006fc 	.word	0x200006fc
 8008018:	20000804 	.word	0x20000804
 800801c:	20000700 	.word	0x20000700
 8008020:	20000138 	.word	0x20000138

08008024 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d10b      	bne.n	800804c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008038:	f383 8811 	msr	BASEPRI, r3
 800803c:	f3bf 8f6f 	isb	sy
 8008040:	f3bf 8f4f 	dsb	sy
 8008044:	60fb      	str	r3, [r7, #12]
}
 8008046:	bf00      	nop
 8008048:	bf00      	nop
 800804a:	e7fd      	b.n	8008048 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800804c:	4b07      	ldr	r3, [pc, #28]	@ (800806c <vTaskPlaceOnEventList+0x48>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	3318      	adds	r3, #24
 8008052:	4619      	mov	r1, r3
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f7fe fbd5 	bl	8006804 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800805a:	2101      	movs	r1, #1
 800805c:	6838      	ldr	r0, [r7, #0]
 800805e:	f000 fb8d 	bl	800877c <prvAddCurrentTaskToDelayedList>
}
 8008062:	bf00      	nop
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	200006fc 	.word	0x200006fc

08008070 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b086      	sub	sp, #24
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	68db      	ldr	r3, [r3, #12]
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d10b      	bne.n	800809e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800808a:	f383 8811 	msr	BASEPRI, r3
 800808e:	f3bf 8f6f 	isb	sy
 8008092:	f3bf 8f4f 	dsb	sy
 8008096:	60fb      	str	r3, [r7, #12]
}
 8008098:	bf00      	nop
 800809a:	bf00      	nop
 800809c:	e7fd      	b.n	800809a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	3318      	adds	r3, #24
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7fe fbe6 	bl	8006874 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080a8:	4b1d      	ldr	r3, [pc, #116]	@ (8008120 <xTaskRemoveFromEventList+0xb0>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d11c      	bne.n	80080ea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	3304      	adds	r3, #4
 80080b4:	4618      	mov	r0, r3
 80080b6:	f7fe fbdd 	bl	8006874 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080be:	2201      	movs	r2, #1
 80080c0:	409a      	lsls	r2, r3
 80080c2:	4b18      	ldr	r3, [pc, #96]	@ (8008124 <xTaskRemoveFromEventList+0xb4>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	4a16      	ldr	r2, [pc, #88]	@ (8008124 <xTaskRemoveFromEventList+0xb4>)
 80080ca:	6013      	str	r3, [r2, #0]
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080d0:	4613      	mov	r3, r2
 80080d2:	009b      	lsls	r3, r3, #2
 80080d4:	4413      	add	r3, r2
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	4a13      	ldr	r2, [pc, #76]	@ (8008128 <xTaskRemoveFromEventList+0xb8>)
 80080da:	441a      	add	r2, r3
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	3304      	adds	r3, #4
 80080e0:	4619      	mov	r1, r3
 80080e2:	4610      	mov	r0, r2
 80080e4:	f7fe fb6b 	bl	80067be <vListInsertEnd>
 80080e8:	e005      	b.n	80080f6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	3318      	adds	r3, #24
 80080ee:	4619      	mov	r1, r3
 80080f0:	480e      	ldr	r0, [pc, #56]	@ (800812c <xTaskRemoveFromEventList+0xbc>)
 80080f2:	f7fe fb64 	bl	80067be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080fa:	4b0d      	ldr	r3, [pc, #52]	@ (8008130 <xTaskRemoveFromEventList+0xc0>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008100:	429a      	cmp	r2, r3
 8008102:	d905      	bls.n	8008110 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008104:	2301      	movs	r3, #1
 8008106:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008108:	4b0a      	ldr	r3, [pc, #40]	@ (8008134 <xTaskRemoveFromEventList+0xc4>)
 800810a:	2201      	movs	r2, #1
 800810c:	601a      	str	r2, [r3, #0]
 800810e:	e001      	b.n	8008114 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008110:	2300      	movs	r3, #0
 8008112:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008114:	697b      	ldr	r3, [r7, #20]
}
 8008116:	4618      	mov	r0, r3
 8008118:	3718      	adds	r7, #24
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop
 8008120:	20000824 	.word	0x20000824
 8008124:	20000804 	.word	0x20000804
 8008128:	20000700 	.word	0x20000700
 800812c:	200007bc 	.word	0x200007bc
 8008130:	200006fc 	.word	0x200006fc
 8008134:	20000810 	.word	0x20000810

08008138 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008140:	4b06      	ldr	r3, [pc, #24]	@ (800815c <vTaskInternalSetTimeOutState+0x24>)
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008148:	4b05      	ldr	r3, [pc, #20]	@ (8008160 <vTaskInternalSetTimeOutState+0x28>)
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	605a      	str	r2, [r3, #4]
}
 8008150:	bf00      	nop
 8008152:	370c      	adds	r7, #12
 8008154:	46bd      	mov	sp, r7
 8008156:	bc80      	pop	{r7}
 8008158:	4770      	bx	lr
 800815a:	bf00      	nop
 800815c:	20000814 	.word	0x20000814
 8008160:	20000800 	.word	0x20000800

08008164 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b088      	sub	sp, #32
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d10b      	bne.n	800818c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008178:	f383 8811 	msr	BASEPRI, r3
 800817c:	f3bf 8f6f 	isb	sy
 8008180:	f3bf 8f4f 	dsb	sy
 8008184:	613b      	str	r3, [r7, #16]
}
 8008186:	bf00      	nop
 8008188:	bf00      	nop
 800818a:	e7fd      	b.n	8008188 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d10b      	bne.n	80081aa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008196:	f383 8811 	msr	BASEPRI, r3
 800819a:	f3bf 8f6f 	isb	sy
 800819e:	f3bf 8f4f 	dsb	sy
 80081a2:	60fb      	str	r3, [r7, #12]
}
 80081a4:	bf00      	nop
 80081a6:	bf00      	nop
 80081a8:	e7fd      	b.n	80081a6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80081aa:	f000 fc3f 	bl	8008a2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80081ae:	4b1d      	ldr	r3, [pc, #116]	@ (8008224 <xTaskCheckForTimeOut+0xc0>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	69ba      	ldr	r2, [r7, #24]
 80081ba:	1ad3      	subs	r3, r2, r3
 80081bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081c6:	d102      	bne.n	80081ce <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80081c8:	2300      	movs	r3, #0
 80081ca:	61fb      	str	r3, [r7, #28]
 80081cc:	e023      	b.n	8008216 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681a      	ldr	r2, [r3, #0]
 80081d2:	4b15      	ldr	r3, [pc, #84]	@ (8008228 <xTaskCheckForTimeOut+0xc4>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d007      	beq.n	80081ea <xTaskCheckForTimeOut+0x86>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	69ba      	ldr	r2, [r7, #24]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d302      	bcc.n	80081ea <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80081e4:	2301      	movs	r3, #1
 80081e6:	61fb      	str	r3, [r7, #28]
 80081e8:	e015      	b.n	8008216 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	697a      	ldr	r2, [r7, #20]
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d20b      	bcs.n	800820c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	1ad2      	subs	r2, r2, r3
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f7ff ff99 	bl	8008138 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008206:	2300      	movs	r3, #0
 8008208:	61fb      	str	r3, [r7, #28]
 800820a:	e004      	b.n	8008216 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	2200      	movs	r2, #0
 8008210:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008212:	2301      	movs	r3, #1
 8008214:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008216:	f000 fc39 	bl	8008a8c <vPortExitCritical>

	return xReturn;
 800821a:	69fb      	ldr	r3, [r7, #28]
}
 800821c:	4618      	mov	r0, r3
 800821e:	3720      	adds	r7, #32
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}
 8008224:	20000800 	.word	0x20000800
 8008228:	20000814 	.word	0x20000814

0800822c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800822c:	b480      	push	{r7}
 800822e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008230:	4b03      	ldr	r3, [pc, #12]	@ (8008240 <vTaskMissedYield+0x14>)
 8008232:	2201      	movs	r2, #1
 8008234:	601a      	str	r2, [r3, #0]
}
 8008236:	bf00      	nop
 8008238:	46bd      	mov	sp, r7
 800823a:	bc80      	pop	{r7}
 800823c:	4770      	bx	lr
 800823e:	bf00      	nop
 8008240:	20000810 	.word	0x20000810

08008244 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800824c:	f000 f852 	bl	80082f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008250:	4b06      	ldr	r3, [pc, #24]	@ (800826c <prvIdleTask+0x28>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	2b01      	cmp	r3, #1
 8008256:	d9f9      	bls.n	800824c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008258:	4b05      	ldr	r3, [pc, #20]	@ (8008270 <prvIdleTask+0x2c>)
 800825a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800825e:	601a      	str	r2, [r3, #0]
 8008260:	f3bf 8f4f 	dsb	sy
 8008264:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008268:	e7f0      	b.n	800824c <prvIdleTask+0x8>
 800826a:	bf00      	nop
 800826c:	20000700 	.word	0x20000700
 8008270:	e000ed04 	.word	0xe000ed04

08008274 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b082      	sub	sp, #8
 8008278:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800827a:	2300      	movs	r3, #0
 800827c:	607b      	str	r3, [r7, #4]
 800827e:	e00c      	b.n	800829a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	4613      	mov	r3, r2
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	4413      	add	r3, r2
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	4a12      	ldr	r2, [pc, #72]	@ (80082d4 <prvInitialiseTaskLists+0x60>)
 800828c:	4413      	add	r3, r2
 800828e:	4618      	mov	r0, r3
 8008290:	f7fe fa6a 	bl	8006768 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	3301      	adds	r3, #1
 8008298:	607b      	str	r3, [r7, #4]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2b06      	cmp	r3, #6
 800829e:	d9ef      	bls.n	8008280 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80082a0:	480d      	ldr	r0, [pc, #52]	@ (80082d8 <prvInitialiseTaskLists+0x64>)
 80082a2:	f7fe fa61 	bl	8006768 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80082a6:	480d      	ldr	r0, [pc, #52]	@ (80082dc <prvInitialiseTaskLists+0x68>)
 80082a8:	f7fe fa5e 	bl	8006768 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80082ac:	480c      	ldr	r0, [pc, #48]	@ (80082e0 <prvInitialiseTaskLists+0x6c>)
 80082ae:	f7fe fa5b 	bl	8006768 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80082b2:	480c      	ldr	r0, [pc, #48]	@ (80082e4 <prvInitialiseTaskLists+0x70>)
 80082b4:	f7fe fa58 	bl	8006768 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80082b8:	480b      	ldr	r0, [pc, #44]	@ (80082e8 <prvInitialiseTaskLists+0x74>)
 80082ba:	f7fe fa55 	bl	8006768 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80082be:	4b0b      	ldr	r3, [pc, #44]	@ (80082ec <prvInitialiseTaskLists+0x78>)
 80082c0:	4a05      	ldr	r2, [pc, #20]	@ (80082d8 <prvInitialiseTaskLists+0x64>)
 80082c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80082c4:	4b0a      	ldr	r3, [pc, #40]	@ (80082f0 <prvInitialiseTaskLists+0x7c>)
 80082c6:	4a05      	ldr	r2, [pc, #20]	@ (80082dc <prvInitialiseTaskLists+0x68>)
 80082c8:	601a      	str	r2, [r3, #0]
}
 80082ca:	bf00      	nop
 80082cc:	3708      	adds	r7, #8
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	20000700 	.word	0x20000700
 80082d8:	2000078c 	.word	0x2000078c
 80082dc:	200007a0 	.word	0x200007a0
 80082e0:	200007bc 	.word	0x200007bc
 80082e4:	200007d0 	.word	0x200007d0
 80082e8:	200007e8 	.word	0x200007e8
 80082ec:	200007b4 	.word	0x200007b4
 80082f0:	200007b8 	.word	0x200007b8

080082f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80082fa:	e019      	b.n	8008330 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80082fc:	f000 fb96 	bl	8008a2c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008300:	4b10      	ldr	r3, [pc, #64]	@ (8008344 <prvCheckTasksWaitingTermination+0x50>)
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	3304      	adds	r3, #4
 800830c:	4618      	mov	r0, r3
 800830e:	f7fe fab1 	bl	8006874 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008312:	4b0d      	ldr	r3, [pc, #52]	@ (8008348 <prvCheckTasksWaitingTermination+0x54>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	3b01      	subs	r3, #1
 8008318:	4a0b      	ldr	r2, [pc, #44]	@ (8008348 <prvCheckTasksWaitingTermination+0x54>)
 800831a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800831c:	4b0b      	ldr	r3, [pc, #44]	@ (800834c <prvCheckTasksWaitingTermination+0x58>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	3b01      	subs	r3, #1
 8008322:	4a0a      	ldr	r2, [pc, #40]	@ (800834c <prvCheckTasksWaitingTermination+0x58>)
 8008324:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008326:	f000 fbb1 	bl	8008a8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 f810 	bl	8008350 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008330:	4b06      	ldr	r3, [pc, #24]	@ (800834c <prvCheckTasksWaitingTermination+0x58>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d1e1      	bne.n	80082fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008338:	bf00      	nop
 800833a:	bf00      	nop
 800833c:	3708      	adds	r7, #8
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	200007d0 	.word	0x200007d0
 8008348:	200007fc 	.word	0x200007fc
 800834c:	200007e4 	.word	0x200007e4

08008350 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	3358      	adds	r3, #88	@ 0x58
 800835c:	4618      	mov	r0, r3
 800835e:	f001 fccf 	bl	8009d00 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8008368:	2b00      	cmp	r3, #0
 800836a:	d108      	bne.n	800837e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008370:	4618      	mov	r0, r3
 8008372:	f000 fd2b 	bl	8008dcc <vPortFree>
				vPortFree( pxTCB );
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 fd28 	bl	8008dcc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800837c:	e019      	b.n	80083b2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8008384:	2b01      	cmp	r3, #1
 8008386:	d103      	bne.n	8008390 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 fd1f 	bl	8008dcc <vPortFree>
	}
 800838e:	e010      	b.n	80083b2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8008396:	2b02      	cmp	r3, #2
 8008398:	d00b      	beq.n	80083b2 <prvDeleteTCB+0x62>
	__asm volatile
 800839a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800839e:	f383 8811 	msr	BASEPRI, r3
 80083a2:	f3bf 8f6f 	isb	sy
 80083a6:	f3bf 8f4f 	dsb	sy
 80083aa:	60fb      	str	r3, [r7, #12]
}
 80083ac:	bf00      	nop
 80083ae:	bf00      	nop
 80083b0:	e7fd      	b.n	80083ae <prvDeleteTCB+0x5e>
	}
 80083b2:	bf00      	nop
 80083b4:	3710      	adds	r7, #16
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
	...

080083bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80083bc:	b480      	push	{r7}
 80083be:	b083      	sub	sp, #12
 80083c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083c2:	4b0c      	ldr	r3, [pc, #48]	@ (80083f4 <prvResetNextTaskUnblockTime+0x38>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d104      	bne.n	80083d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80083cc:	4b0a      	ldr	r3, [pc, #40]	@ (80083f8 <prvResetNextTaskUnblockTime+0x3c>)
 80083ce:	f04f 32ff 	mov.w	r2, #4294967295
 80083d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80083d4:	e008      	b.n	80083e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083d6:	4b07      	ldr	r3, [pc, #28]	@ (80083f4 <prvResetNextTaskUnblockTime+0x38>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	4a04      	ldr	r2, [pc, #16]	@ (80083f8 <prvResetNextTaskUnblockTime+0x3c>)
 80083e6:	6013      	str	r3, [r2, #0]
}
 80083e8:	bf00      	nop
 80083ea:	370c      	adds	r7, #12
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bc80      	pop	{r7}
 80083f0:	4770      	bx	lr
 80083f2:	bf00      	nop
 80083f4:	200007b4 	.word	0x200007b4
 80083f8:	2000081c 	.word	0x2000081c

080083fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80083fc:	b480      	push	{r7}
 80083fe:	b083      	sub	sp, #12
 8008400:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008402:	4b0b      	ldr	r3, [pc, #44]	@ (8008430 <xTaskGetSchedulerState+0x34>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d102      	bne.n	8008410 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800840a:	2301      	movs	r3, #1
 800840c:	607b      	str	r3, [r7, #4]
 800840e:	e008      	b.n	8008422 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008410:	4b08      	ldr	r3, [pc, #32]	@ (8008434 <xTaskGetSchedulerState+0x38>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d102      	bne.n	800841e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008418:	2302      	movs	r3, #2
 800841a:	607b      	str	r3, [r7, #4]
 800841c:	e001      	b.n	8008422 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800841e:	2300      	movs	r3, #0
 8008420:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008422:	687b      	ldr	r3, [r7, #4]
	}
 8008424:	4618      	mov	r0, r3
 8008426:	370c      	adds	r7, #12
 8008428:	46bd      	mov	sp, r7
 800842a:	bc80      	pop	{r7}
 800842c:	4770      	bx	lr
 800842e:	bf00      	nop
 8008430:	20000808 	.word	0x20000808
 8008434:	20000824 	.word	0x20000824

08008438 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008438:	b580      	push	{r7, lr}
 800843a:	b084      	sub	sp, #16
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008444:	2300      	movs	r3, #0
 8008446:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d05e      	beq.n	800850c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008452:	4b31      	ldr	r3, [pc, #196]	@ (8008518 <xTaskPriorityInherit+0xe0>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008458:	429a      	cmp	r2, r3
 800845a:	d24e      	bcs.n	80084fa <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	699b      	ldr	r3, [r3, #24]
 8008460:	2b00      	cmp	r3, #0
 8008462:	db06      	blt.n	8008472 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008464:	4b2c      	ldr	r3, [pc, #176]	@ (8008518 <xTaskPriorityInherit+0xe0>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800846a:	f1c3 0207 	rsb	r2, r3, #7
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	6959      	ldr	r1, [r3, #20]
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800847a:	4613      	mov	r3, r2
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	4413      	add	r3, r2
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	4a26      	ldr	r2, [pc, #152]	@ (800851c <xTaskPriorityInherit+0xe4>)
 8008484:	4413      	add	r3, r2
 8008486:	4299      	cmp	r1, r3
 8008488:	d12f      	bne.n	80084ea <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	3304      	adds	r3, #4
 800848e:	4618      	mov	r0, r3
 8008490:	f7fe f9f0 	bl	8006874 <uxListRemove>
 8008494:	4603      	mov	r3, r0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d10a      	bne.n	80084b0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800849e:	2201      	movs	r2, #1
 80084a0:	fa02 f303 	lsl.w	r3, r2, r3
 80084a4:	43da      	mvns	r2, r3
 80084a6:	4b1e      	ldr	r3, [pc, #120]	@ (8008520 <xTaskPriorityInherit+0xe8>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4013      	ands	r3, r2
 80084ac:	4a1c      	ldr	r2, [pc, #112]	@ (8008520 <xTaskPriorityInherit+0xe8>)
 80084ae:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80084b0:	4b19      	ldr	r3, [pc, #100]	@ (8008518 <xTaskPriorityInherit+0xe0>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084be:	2201      	movs	r2, #1
 80084c0:	409a      	lsls	r2, r3
 80084c2:	4b17      	ldr	r3, [pc, #92]	@ (8008520 <xTaskPriorityInherit+0xe8>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4313      	orrs	r3, r2
 80084c8:	4a15      	ldr	r2, [pc, #84]	@ (8008520 <xTaskPriorityInherit+0xe8>)
 80084ca:	6013      	str	r3, [r2, #0]
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084d0:	4613      	mov	r3, r2
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	4413      	add	r3, r2
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	4a10      	ldr	r2, [pc, #64]	@ (800851c <xTaskPriorityInherit+0xe4>)
 80084da:	441a      	add	r2, r3
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	3304      	adds	r3, #4
 80084e0:	4619      	mov	r1, r3
 80084e2:	4610      	mov	r0, r2
 80084e4:	f7fe f96b 	bl	80067be <vListInsertEnd>
 80084e8:	e004      	b.n	80084f4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80084ea:	4b0b      	ldr	r3, [pc, #44]	@ (8008518 <xTaskPriorityInherit+0xe0>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80084f4:	2301      	movs	r3, #1
 80084f6:	60fb      	str	r3, [r7, #12]
 80084f8:	e008      	b.n	800850c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80084fe:	4b06      	ldr	r3, [pc, #24]	@ (8008518 <xTaskPriorityInherit+0xe0>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008504:	429a      	cmp	r2, r3
 8008506:	d201      	bcs.n	800850c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008508:	2301      	movs	r3, #1
 800850a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800850c:	68fb      	ldr	r3, [r7, #12]
	}
 800850e:	4618      	mov	r0, r3
 8008510:	3710      	adds	r7, #16
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	200006fc 	.word	0x200006fc
 800851c:	20000700 	.word	0x20000700
 8008520:	20000804 	.word	0x20000804

08008524 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008524:	b580      	push	{r7, lr}
 8008526:	b086      	sub	sp, #24
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008530:	2300      	movs	r3, #0
 8008532:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d070      	beq.n	800861c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800853a:	4b3b      	ldr	r3, [pc, #236]	@ (8008628 <xTaskPriorityDisinherit+0x104>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	693a      	ldr	r2, [r7, #16]
 8008540:	429a      	cmp	r2, r3
 8008542:	d00b      	beq.n	800855c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008548:	f383 8811 	msr	BASEPRI, r3
 800854c:	f3bf 8f6f 	isb	sy
 8008550:	f3bf 8f4f 	dsb	sy
 8008554:	60fb      	str	r3, [r7, #12]
}
 8008556:	bf00      	nop
 8008558:	bf00      	nop
 800855a:	e7fd      	b.n	8008558 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008560:	2b00      	cmp	r3, #0
 8008562:	d10b      	bne.n	800857c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008568:	f383 8811 	msr	BASEPRI, r3
 800856c:	f3bf 8f6f 	isb	sy
 8008570:	f3bf 8f4f 	dsb	sy
 8008574:	60bb      	str	r3, [r7, #8]
}
 8008576:	bf00      	nop
 8008578:	bf00      	nop
 800857a:	e7fd      	b.n	8008578 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008580:	1e5a      	subs	r2, r3, #1
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800858e:	429a      	cmp	r2, r3
 8008590:	d044      	beq.n	800861c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008596:	2b00      	cmp	r3, #0
 8008598:	d140      	bne.n	800861c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	3304      	adds	r3, #4
 800859e:	4618      	mov	r0, r3
 80085a0:	f7fe f968 	bl	8006874 <uxListRemove>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d115      	bne.n	80085d6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085ae:	491f      	ldr	r1, [pc, #124]	@ (800862c <xTaskPriorityDisinherit+0x108>)
 80085b0:	4613      	mov	r3, r2
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	4413      	add	r3, r2
 80085b6:	009b      	lsls	r3, r3, #2
 80085b8:	440b      	add	r3, r1
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d10a      	bne.n	80085d6 <xTaskPriorityDisinherit+0xb2>
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085c4:	2201      	movs	r2, #1
 80085c6:	fa02 f303 	lsl.w	r3, r2, r3
 80085ca:	43da      	mvns	r2, r3
 80085cc:	4b18      	ldr	r3, [pc, #96]	@ (8008630 <xTaskPriorityDisinherit+0x10c>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4013      	ands	r3, r2
 80085d2:	4a17      	ldr	r2, [pc, #92]	@ (8008630 <xTaskPriorityDisinherit+0x10c>)
 80085d4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085e2:	f1c3 0207 	rsb	r2, r3, #7
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085ee:	2201      	movs	r2, #1
 80085f0:	409a      	lsls	r2, r3
 80085f2:	4b0f      	ldr	r3, [pc, #60]	@ (8008630 <xTaskPriorityDisinherit+0x10c>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4313      	orrs	r3, r2
 80085f8:	4a0d      	ldr	r2, [pc, #52]	@ (8008630 <xTaskPriorityDisinherit+0x10c>)
 80085fa:	6013      	str	r3, [r2, #0]
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008600:	4613      	mov	r3, r2
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	4413      	add	r3, r2
 8008606:	009b      	lsls	r3, r3, #2
 8008608:	4a08      	ldr	r2, [pc, #32]	@ (800862c <xTaskPriorityDisinherit+0x108>)
 800860a:	441a      	add	r2, r3
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	3304      	adds	r3, #4
 8008610:	4619      	mov	r1, r3
 8008612:	4610      	mov	r0, r2
 8008614:	f7fe f8d3 	bl	80067be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008618:	2301      	movs	r3, #1
 800861a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800861c:	697b      	ldr	r3, [r7, #20]
	}
 800861e:	4618      	mov	r0, r3
 8008620:	3718      	adds	r7, #24
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	200006fc 	.word	0x200006fc
 800862c:	20000700 	.word	0x20000700
 8008630:	20000804 	.word	0x20000804

08008634 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008634:	b580      	push	{r7, lr}
 8008636:	b088      	sub	sp, #32
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008642:	2301      	movs	r3, #1
 8008644:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d079      	beq.n	8008740 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800864c:	69bb      	ldr	r3, [r7, #24]
 800864e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008650:	2b00      	cmp	r3, #0
 8008652:	d10b      	bne.n	800866c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008658:	f383 8811 	msr	BASEPRI, r3
 800865c:	f3bf 8f6f 	isb	sy
 8008660:	f3bf 8f4f 	dsb	sy
 8008664:	60fb      	str	r3, [r7, #12]
}
 8008666:	bf00      	nop
 8008668:	bf00      	nop
 800866a:	e7fd      	b.n	8008668 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008670:	683a      	ldr	r2, [r7, #0]
 8008672:	429a      	cmp	r2, r3
 8008674:	d902      	bls.n	800867c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	61fb      	str	r3, [r7, #28]
 800867a:	e002      	b.n	8008682 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800867c:	69bb      	ldr	r3, [r7, #24]
 800867e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008680:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008682:	69bb      	ldr	r3, [r7, #24]
 8008684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008686:	69fa      	ldr	r2, [r7, #28]
 8008688:	429a      	cmp	r2, r3
 800868a:	d059      	beq.n	8008740 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800868c:	69bb      	ldr	r3, [r7, #24]
 800868e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008690:	697a      	ldr	r2, [r7, #20]
 8008692:	429a      	cmp	r2, r3
 8008694:	d154      	bne.n	8008740 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008696:	4b2c      	ldr	r3, [pc, #176]	@ (8008748 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	69ba      	ldr	r2, [r7, #24]
 800869c:	429a      	cmp	r2, r3
 800869e:	d10b      	bne.n	80086b8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80086a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086a4:	f383 8811 	msr	BASEPRI, r3
 80086a8:	f3bf 8f6f 	isb	sy
 80086ac:	f3bf 8f4f 	dsb	sy
 80086b0:	60bb      	str	r3, [r7, #8]
}
 80086b2:	bf00      	nop
 80086b4:	bf00      	nop
 80086b6:	e7fd      	b.n	80086b4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80086b8:	69bb      	ldr	r3, [r7, #24]
 80086ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086bc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	69fa      	ldr	r2, [r7, #28]
 80086c2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80086c4:	69bb      	ldr	r3, [r7, #24]
 80086c6:	699b      	ldr	r3, [r3, #24]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	db04      	blt.n	80086d6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	f1c3 0207 	rsb	r2, r3, #7
 80086d2:	69bb      	ldr	r3, [r7, #24]
 80086d4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	6959      	ldr	r1, [r3, #20]
 80086da:	693a      	ldr	r2, [r7, #16]
 80086dc:	4613      	mov	r3, r2
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	4413      	add	r3, r2
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	4a19      	ldr	r2, [pc, #100]	@ (800874c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80086e6:	4413      	add	r3, r2
 80086e8:	4299      	cmp	r1, r3
 80086ea:	d129      	bne.n	8008740 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086ec:	69bb      	ldr	r3, [r7, #24]
 80086ee:	3304      	adds	r3, #4
 80086f0:	4618      	mov	r0, r3
 80086f2:	f7fe f8bf 	bl	8006874 <uxListRemove>
 80086f6:	4603      	mov	r3, r0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d10a      	bne.n	8008712 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80086fc:	69bb      	ldr	r3, [r7, #24]
 80086fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008700:	2201      	movs	r2, #1
 8008702:	fa02 f303 	lsl.w	r3, r2, r3
 8008706:	43da      	mvns	r2, r3
 8008708:	4b11      	ldr	r3, [pc, #68]	@ (8008750 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4013      	ands	r3, r2
 800870e:	4a10      	ldr	r2, [pc, #64]	@ (8008750 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008710:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008712:	69bb      	ldr	r3, [r7, #24]
 8008714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008716:	2201      	movs	r2, #1
 8008718:	409a      	lsls	r2, r3
 800871a:	4b0d      	ldr	r3, [pc, #52]	@ (8008750 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4313      	orrs	r3, r2
 8008720:	4a0b      	ldr	r2, [pc, #44]	@ (8008750 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008722:	6013      	str	r3, [r2, #0]
 8008724:	69bb      	ldr	r3, [r7, #24]
 8008726:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008728:	4613      	mov	r3, r2
 800872a:	009b      	lsls	r3, r3, #2
 800872c:	4413      	add	r3, r2
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	4a06      	ldr	r2, [pc, #24]	@ (800874c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008732:	441a      	add	r2, r3
 8008734:	69bb      	ldr	r3, [r7, #24]
 8008736:	3304      	adds	r3, #4
 8008738:	4619      	mov	r1, r3
 800873a:	4610      	mov	r0, r2
 800873c:	f7fe f83f 	bl	80067be <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008740:	bf00      	nop
 8008742:	3720      	adds	r7, #32
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}
 8008748:	200006fc 	.word	0x200006fc
 800874c:	20000700 	.word	0x20000700
 8008750:	20000804 	.word	0x20000804

08008754 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008754:	b480      	push	{r7}
 8008756:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008758:	4b07      	ldr	r3, [pc, #28]	@ (8008778 <pvTaskIncrementMutexHeldCount+0x24>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d004      	beq.n	800876a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008760:	4b05      	ldr	r3, [pc, #20]	@ (8008778 <pvTaskIncrementMutexHeldCount+0x24>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008766:	3201      	adds	r2, #1
 8008768:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800876a:	4b03      	ldr	r3, [pc, #12]	@ (8008778 <pvTaskIncrementMutexHeldCount+0x24>)
 800876c:	681b      	ldr	r3, [r3, #0]
	}
 800876e:	4618      	mov	r0, r3
 8008770:	46bd      	mov	sp, r7
 8008772:	bc80      	pop	{r7}
 8008774:	4770      	bx	lr
 8008776:	bf00      	nop
 8008778:	200006fc 	.word	0x200006fc

0800877c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008786:	4b29      	ldr	r3, [pc, #164]	@ (800882c <prvAddCurrentTaskToDelayedList+0xb0>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800878c:	4b28      	ldr	r3, [pc, #160]	@ (8008830 <prvAddCurrentTaskToDelayedList+0xb4>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	3304      	adds	r3, #4
 8008792:	4618      	mov	r0, r3
 8008794:	f7fe f86e 	bl	8006874 <uxListRemove>
 8008798:	4603      	mov	r3, r0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d10b      	bne.n	80087b6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800879e:	4b24      	ldr	r3, [pc, #144]	@ (8008830 <prvAddCurrentTaskToDelayedList+0xb4>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087a4:	2201      	movs	r2, #1
 80087a6:	fa02 f303 	lsl.w	r3, r2, r3
 80087aa:	43da      	mvns	r2, r3
 80087ac:	4b21      	ldr	r3, [pc, #132]	@ (8008834 <prvAddCurrentTaskToDelayedList+0xb8>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4013      	ands	r3, r2
 80087b2:	4a20      	ldr	r2, [pc, #128]	@ (8008834 <prvAddCurrentTaskToDelayedList+0xb8>)
 80087b4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087bc:	d10a      	bne.n	80087d4 <prvAddCurrentTaskToDelayedList+0x58>
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d007      	beq.n	80087d4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087c4:	4b1a      	ldr	r3, [pc, #104]	@ (8008830 <prvAddCurrentTaskToDelayedList+0xb4>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	3304      	adds	r3, #4
 80087ca:	4619      	mov	r1, r3
 80087cc:	481a      	ldr	r0, [pc, #104]	@ (8008838 <prvAddCurrentTaskToDelayedList+0xbc>)
 80087ce:	f7fd fff6 	bl	80067be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80087d2:	e026      	b.n	8008822 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80087d4:	68fa      	ldr	r2, [r7, #12]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	4413      	add	r3, r2
 80087da:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80087dc:	4b14      	ldr	r3, [pc, #80]	@ (8008830 <prvAddCurrentTaskToDelayedList+0xb4>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	68ba      	ldr	r2, [r7, #8]
 80087e2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80087e4:	68ba      	ldr	r2, [r7, #8]
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d209      	bcs.n	8008800 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087ec:	4b13      	ldr	r3, [pc, #76]	@ (800883c <prvAddCurrentTaskToDelayedList+0xc0>)
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	4b0f      	ldr	r3, [pc, #60]	@ (8008830 <prvAddCurrentTaskToDelayedList+0xb4>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	3304      	adds	r3, #4
 80087f6:	4619      	mov	r1, r3
 80087f8:	4610      	mov	r0, r2
 80087fa:	f7fe f803 	bl	8006804 <vListInsert>
}
 80087fe:	e010      	b.n	8008822 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008800:	4b0f      	ldr	r3, [pc, #60]	@ (8008840 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	4b0a      	ldr	r3, [pc, #40]	@ (8008830 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	3304      	adds	r3, #4
 800880a:	4619      	mov	r1, r3
 800880c:	4610      	mov	r0, r2
 800880e:	f7fd fff9 	bl	8006804 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008812:	4b0c      	ldr	r3, [pc, #48]	@ (8008844 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	68ba      	ldr	r2, [r7, #8]
 8008818:	429a      	cmp	r2, r3
 800881a:	d202      	bcs.n	8008822 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800881c:	4a09      	ldr	r2, [pc, #36]	@ (8008844 <prvAddCurrentTaskToDelayedList+0xc8>)
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	6013      	str	r3, [r2, #0]
}
 8008822:	bf00      	nop
 8008824:	3710      	adds	r7, #16
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	20000800 	.word	0x20000800
 8008830:	200006fc 	.word	0x200006fc
 8008834:	20000804 	.word	0x20000804
 8008838:	200007e8 	.word	0x200007e8
 800883c:	200007b8 	.word	0x200007b8
 8008840:	200007b4 	.word	0x200007b4
 8008844:	2000081c 	.word	0x2000081c

08008848 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008848:	b480      	push	{r7}
 800884a:	b085      	sub	sp, #20
 800884c:	af00      	add	r7, sp, #0
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	60b9      	str	r1, [r7, #8]
 8008852:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	3b04      	subs	r3, #4
 8008858:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008860:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	3b04      	subs	r3, #4
 8008866:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	f023 0201 	bic.w	r2, r3, #1
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	3b04      	subs	r3, #4
 8008876:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008878:	4a08      	ldr	r2, [pc, #32]	@ (800889c <pxPortInitialiseStack+0x54>)
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	3b14      	subs	r3, #20
 8008882:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008884:	687a      	ldr	r2, [r7, #4]
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	3b20      	subs	r3, #32
 800888e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008890:	68fb      	ldr	r3, [r7, #12]
}
 8008892:	4618      	mov	r0, r3
 8008894:	3714      	adds	r7, #20
 8008896:	46bd      	mov	sp, r7
 8008898:	bc80      	pop	{r7}
 800889a:	4770      	bx	lr
 800889c:	080088a1 	.word	0x080088a1

080088a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80088a0:	b480      	push	{r7}
 80088a2:	b085      	sub	sp, #20
 80088a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80088a6:	2300      	movs	r3, #0
 80088a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80088aa:	4b12      	ldr	r3, [pc, #72]	@ (80088f4 <prvTaskExitError+0x54>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088b2:	d00b      	beq.n	80088cc <prvTaskExitError+0x2c>
	__asm volatile
 80088b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088b8:	f383 8811 	msr	BASEPRI, r3
 80088bc:	f3bf 8f6f 	isb	sy
 80088c0:	f3bf 8f4f 	dsb	sy
 80088c4:	60fb      	str	r3, [r7, #12]
}
 80088c6:	bf00      	nop
 80088c8:	bf00      	nop
 80088ca:	e7fd      	b.n	80088c8 <prvTaskExitError+0x28>
	__asm volatile
 80088cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088d0:	f383 8811 	msr	BASEPRI, r3
 80088d4:	f3bf 8f6f 	isb	sy
 80088d8:	f3bf 8f4f 	dsb	sy
 80088dc:	60bb      	str	r3, [r7, #8]
}
 80088de:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80088e0:	bf00      	nop
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d0fc      	beq.n	80088e2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80088e8:	bf00      	nop
 80088ea:	bf00      	nop
 80088ec:	3714      	adds	r7, #20
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bc80      	pop	{r7}
 80088f2:	4770      	bx	lr
 80088f4:	20000128 	.word	0x20000128
	...

08008900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008900:	4b07      	ldr	r3, [pc, #28]	@ (8008920 <pxCurrentTCBConst2>)
 8008902:	6819      	ldr	r1, [r3, #0]
 8008904:	6808      	ldr	r0, [r1, #0]
 8008906:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800890a:	f380 8809 	msr	PSP, r0
 800890e:	f3bf 8f6f 	isb	sy
 8008912:	f04f 0000 	mov.w	r0, #0
 8008916:	f380 8811 	msr	BASEPRI, r0
 800891a:	f04e 0e0d 	orr.w	lr, lr, #13
 800891e:	4770      	bx	lr

08008920 <pxCurrentTCBConst2>:
 8008920:	200006fc 	.word	0x200006fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008924:	bf00      	nop
 8008926:	bf00      	nop

08008928 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008928:	4806      	ldr	r0, [pc, #24]	@ (8008944 <prvPortStartFirstTask+0x1c>)
 800892a:	6800      	ldr	r0, [r0, #0]
 800892c:	6800      	ldr	r0, [r0, #0]
 800892e:	f380 8808 	msr	MSP, r0
 8008932:	b662      	cpsie	i
 8008934:	b661      	cpsie	f
 8008936:	f3bf 8f4f 	dsb	sy
 800893a:	f3bf 8f6f 	isb	sy
 800893e:	df00      	svc	0
 8008940:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008942:	bf00      	nop
 8008944:	e000ed08 	.word	0xe000ed08

08008948 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800894e:	4b32      	ldr	r3, [pc, #200]	@ (8008a18 <xPortStartScheduler+0xd0>)
 8008950:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	b2db      	uxtb	r3, r3
 8008958:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	22ff      	movs	r2, #255	@ 0xff
 800895e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	b2db      	uxtb	r3, r3
 8008966:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008968:	78fb      	ldrb	r3, [r7, #3]
 800896a:	b2db      	uxtb	r3, r3
 800896c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008970:	b2da      	uxtb	r2, r3
 8008972:	4b2a      	ldr	r3, [pc, #168]	@ (8008a1c <xPortStartScheduler+0xd4>)
 8008974:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008976:	4b2a      	ldr	r3, [pc, #168]	@ (8008a20 <xPortStartScheduler+0xd8>)
 8008978:	2207      	movs	r2, #7
 800897a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800897c:	e009      	b.n	8008992 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800897e:	4b28      	ldr	r3, [pc, #160]	@ (8008a20 <xPortStartScheduler+0xd8>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	3b01      	subs	r3, #1
 8008984:	4a26      	ldr	r2, [pc, #152]	@ (8008a20 <xPortStartScheduler+0xd8>)
 8008986:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008988:	78fb      	ldrb	r3, [r7, #3]
 800898a:	b2db      	uxtb	r3, r3
 800898c:	005b      	lsls	r3, r3, #1
 800898e:	b2db      	uxtb	r3, r3
 8008990:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008992:	78fb      	ldrb	r3, [r7, #3]
 8008994:	b2db      	uxtb	r3, r3
 8008996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800899a:	2b80      	cmp	r3, #128	@ 0x80
 800899c:	d0ef      	beq.n	800897e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800899e:	4b20      	ldr	r3, [pc, #128]	@ (8008a20 <xPortStartScheduler+0xd8>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f1c3 0307 	rsb	r3, r3, #7
 80089a6:	2b04      	cmp	r3, #4
 80089a8:	d00b      	beq.n	80089c2 <xPortStartScheduler+0x7a>
	__asm volatile
 80089aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ae:	f383 8811 	msr	BASEPRI, r3
 80089b2:	f3bf 8f6f 	isb	sy
 80089b6:	f3bf 8f4f 	dsb	sy
 80089ba:	60bb      	str	r3, [r7, #8]
}
 80089bc:	bf00      	nop
 80089be:	bf00      	nop
 80089c0:	e7fd      	b.n	80089be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80089c2:	4b17      	ldr	r3, [pc, #92]	@ (8008a20 <xPortStartScheduler+0xd8>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	021b      	lsls	r3, r3, #8
 80089c8:	4a15      	ldr	r2, [pc, #84]	@ (8008a20 <xPortStartScheduler+0xd8>)
 80089ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80089cc:	4b14      	ldr	r3, [pc, #80]	@ (8008a20 <xPortStartScheduler+0xd8>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80089d4:	4a12      	ldr	r2, [pc, #72]	@ (8008a20 <xPortStartScheduler+0xd8>)
 80089d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	b2da      	uxtb	r2, r3
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80089e0:	4b10      	ldr	r3, [pc, #64]	@ (8008a24 <xPortStartScheduler+0xdc>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a0f      	ldr	r2, [pc, #60]	@ (8008a24 <xPortStartScheduler+0xdc>)
 80089e6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80089ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80089ec:	4b0d      	ldr	r3, [pc, #52]	@ (8008a24 <xPortStartScheduler+0xdc>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a0c      	ldr	r2, [pc, #48]	@ (8008a24 <xPortStartScheduler+0xdc>)
 80089f2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80089f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80089f8:	f000 f8b8 	bl	8008b6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80089fc:	4b0a      	ldr	r3, [pc, #40]	@ (8008a28 <xPortStartScheduler+0xe0>)
 80089fe:	2200      	movs	r2, #0
 8008a00:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008a02:	f7ff ff91 	bl	8008928 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008a06:	f7ff fa8f 	bl	8007f28 <vTaskSwitchContext>
	prvTaskExitError();
 8008a0a:	f7ff ff49 	bl	80088a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008a0e:	2300      	movs	r3, #0
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3710      	adds	r7, #16
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}
 8008a18:	e000e400 	.word	0xe000e400
 8008a1c:	20000830 	.word	0x20000830
 8008a20:	20000834 	.word	0x20000834
 8008a24:	e000ed20 	.word	0xe000ed20
 8008a28:	20000128 	.word	0x20000128

08008a2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
	__asm volatile
 8008a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a36:	f383 8811 	msr	BASEPRI, r3
 8008a3a:	f3bf 8f6f 	isb	sy
 8008a3e:	f3bf 8f4f 	dsb	sy
 8008a42:	607b      	str	r3, [r7, #4]
}
 8008a44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008a46:	4b0f      	ldr	r3, [pc, #60]	@ (8008a84 <vPortEnterCritical+0x58>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8008a84 <vPortEnterCritical+0x58>)
 8008a4e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008a50:	4b0c      	ldr	r3, [pc, #48]	@ (8008a84 <vPortEnterCritical+0x58>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d110      	bne.n	8008a7a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008a58:	4b0b      	ldr	r3, [pc, #44]	@ (8008a88 <vPortEnterCritical+0x5c>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	b2db      	uxtb	r3, r3
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d00b      	beq.n	8008a7a <vPortEnterCritical+0x4e>
	__asm volatile
 8008a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a66:	f383 8811 	msr	BASEPRI, r3
 8008a6a:	f3bf 8f6f 	isb	sy
 8008a6e:	f3bf 8f4f 	dsb	sy
 8008a72:	603b      	str	r3, [r7, #0]
}
 8008a74:	bf00      	nop
 8008a76:	bf00      	nop
 8008a78:	e7fd      	b.n	8008a76 <vPortEnterCritical+0x4a>
	}
}
 8008a7a:	bf00      	nop
 8008a7c:	370c      	adds	r7, #12
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bc80      	pop	{r7}
 8008a82:	4770      	bx	lr
 8008a84:	20000128 	.word	0x20000128
 8008a88:	e000ed04 	.word	0xe000ed04

08008a8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b083      	sub	sp, #12
 8008a90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008a92:	4b12      	ldr	r3, [pc, #72]	@ (8008adc <vPortExitCritical+0x50>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d10b      	bne.n	8008ab2 <vPortExitCritical+0x26>
	__asm volatile
 8008a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a9e:	f383 8811 	msr	BASEPRI, r3
 8008aa2:	f3bf 8f6f 	isb	sy
 8008aa6:	f3bf 8f4f 	dsb	sy
 8008aaa:	607b      	str	r3, [r7, #4]
}
 8008aac:	bf00      	nop
 8008aae:	bf00      	nop
 8008ab0:	e7fd      	b.n	8008aae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8008adc <vPortExitCritical+0x50>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	3b01      	subs	r3, #1
 8008ab8:	4a08      	ldr	r2, [pc, #32]	@ (8008adc <vPortExitCritical+0x50>)
 8008aba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008abc:	4b07      	ldr	r3, [pc, #28]	@ (8008adc <vPortExitCritical+0x50>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d105      	bne.n	8008ad0 <vPortExitCritical+0x44>
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	f383 8811 	msr	BASEPRI, r3
}
 8008ace:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008ad0:	bf00      	nop
 8008ad2:	370c      	adds	r7, #12
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bc80      	pop	{r7}
 8008ad8:	4770      	bx	lr
 8008ada:	bf00      	nop
 8008adc:	20000128 	.word	0x20000128

08008ae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008ae0:	f3ef 8009 	mrs	r0, PSP
 8008ae4:	f3bf 8f6f 	isb	sy
 8008ae8:	4b0d      	ldr	r3, [pc, #52]	@ (8008b20 <pxCurrentTCBConst>)
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008af0:	6010      	str	r0, [r2, #0]
 8008af2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008af6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008afa:	f380 8811 	msr	BASEPRI, r0
 8008afe:	f7ff fa13 	bl	8007f28 <vTaskSwitchContext>
 8008b02:	f04f 0000 	mov.w	r0, #0
 8008b06:	f380 8811 	msr	BASEPRI, r0
 8008b0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008b0e:	6819      	ldr	r1, [r3, #0]
 8008b10:	6808      	ldr	r0, [r1, #0]
 8008b12:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008b16:	f380 8809 	msr	PSP, r0
 8008b1a:	f3bf 8f6f 	isb	sy
 8008b1e:	4770      	bx	lr

08008b20 <pxCurrentTCBConst>:
 8008b20:	200006fc 	.word	0x200006fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008b24:	bf00      	nop
 8008b26:	bf00      	nop

08008b28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b082      	sub	sp, #8
 8008b2c:	af00      	add	r7, sp, #0
	__asm volatile
 8008b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b32:	f383 8811 	msr	BASEPRI, r3
 8008b36:	f3bf 8f6f 	isb	sy
 8008b3a:	f3bf 8f4f 	dsb	sy
 8008b3e:	607b      	str	r3, [r7, #4]
}
 8008b40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008b42:	f7ff f937 	bl	8007db4 <xTaskIncrementTick>
 8008b46:	4603      	mov	r3, r0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d003      	beq.n	8008b54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008b4c:	4b06      	ldr	r3, [pc, #24]	@ (8008b68 <SysTick_Handler+0x40>)
 8008b4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b52:	601a      	str	r2, [r3, #0]
 8008b54:	2300      	movs	r3, #0
 8008b56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	f383 8811 	msr	BASEPRI, r3
}
 8008b5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008b60:	bf00      	nop
 8008b62:	3708      	adds	r7, #8
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	e000ed04 	.word	0xe000ed04

08008b6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008b70:	4b0a      	ldr	r3, [pc, #40]	@ (8008b9c <vPortSetupTimerInterrupt+0x30>)
 8008b72:	2200      	movs	r2, #0
 8008b74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008b76:	4b0a      	ldr	r3, [pc, #40]	@ (8008ba0 <vPortSetupTimerInterrupt+0x34>)
 8008b78:	2200      	movs	r2, #0
 8008b7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008b7c:	4b09      	ldr	r3, [pc, #36]	@ (8008ba4 <vPortSetupTimerInterrupt+0x38>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a09      	ldr	r2, [pc, #36]	@ (8008ba8 <vPortSetupTimerInterrupt+0x3c>)
 8008b82:	fba2 2303 	umull	r2, r3, r2, r3
 8008b86:	099b      	lsrs	r3, r3, #6
 8008b88:	4a08      	ldr	r2, [pc, #32]	@ (8008bac <vPortSetupTimerInterrupt+0x40>)
 8008b8a:	3b01      	subs	r3, #1
 8008b8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008b8e:	4b03      	ldr	r3, [pc, #12]	@ (8008b9c <vPortSetupTimerInterrupt+0x30>)
 8008b90:	2207      	movs	r2, #7
 8008b92:	601a      	str	r2, [r3, #0]
}
 8008b94:	bf00      	nop
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bc80      	pop	{r7}
 8008b9a:	4770      	bx	lr
 8008b9c:	e000e010 	.word	0xe000e010
 8008ba0:	e000e018 	.word	0xe000e018
 8008ba4:	2000011c 	.word	0x2000011c
 8008ba8:	10624dd3 	.word	0x10624dd3
 8008bac:	e000e014 	.word	0xe000e014

08008bb0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b085      	sub	sp, #20
 8008bb4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008bb6:	f3ef 8305 	mrs	r3, IPSR
 8008bba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2b0f      	cmp	r3, #15
 8008bc0:	d915      	bls.n	8008bee <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008bc2:	4a17      	ldr	r2, [pc, #92]	@ (8008c20 <vPortValidateInterruptPriority+0x70>)
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008bcc:	4b15      	ldr	r3, [pc, #84]	@ (8008c24 <vPortValidateInterruptPriority+0x74>)
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	7afa      	ldrb	r2, [r7, #11]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d20b      	bcs.n	8008bee <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bda:	f383 8811 	msr	BASEPRI, r3
 8008bde:	f3bf 8f6f 	isb	sy
 8008be2:	f3bf 8f4f 	dsb	sy
 8008be6:	607b      	str	r3, [r7, #4]
}
 8008be8:	bf00      	nop
 8008bea:	bf00      	nop
 8008bec:	e7fd      	b.n	8008bea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008bee:	4b0e      	ldr	r3, [pc, #56]	@ (8008c28 <vPortValidateInterruptPriority+0x78>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8008c2c <vPortValidateInterruptPriority+0x7c>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d90b      	bls.n	8008c16 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c02:	f383 8811 	msr	BASEPRI, r3
 8008c06:	f3bf 8f6f 	isb	sy
 8008c0a:	f3bf 8f4f 	dsb	sy
 8008c0e:	603b      	str	r3, [r7, #0]
}
 8008c10:	bf00      	nop
 8008c12:	bf00      	nop
 8008c14:	e7fd      	b.n	8008c12 <vPortValidateInterruptPriority+0x62>
	}
 8008c16:	bf00      	nop
 8008c18:	3714      	adds	r7, #20
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bc80      	pop	{r7}
 8008c1e:	4770      	bx	lr
 8008c20:	e000e3f0 	.word	0xe000e3f0
 8008c24:	20000830 	.word	0x20000830
 8008c28:	e000ed0c 	.word	0xe000ed0c
 8008c2c:	20000834 	.word	0x20000834

08008c30 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b08a      	sub	sp, #40	@ 0x28
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008c3c:	f7ff f800 	bl	8007c40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008c40:	4b5c      	ldr	r3, [pc, #368]	@ (8008db4 <pvPortMalloc+0x184>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d101      	bne.n	8008c4c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008c48:	f000 f924 	bl	8008e94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008c4c:	4b5a      	ldr	r3, [pc, #360]	@ (8008db8 <pvPortMalloc+0x188>)
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	4013      	ands	r3, r2
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	f040 8095 	bne.w	8008d84 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d01e      	beq.n	8008c9e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008c60:	2208      	movs	r2, #8
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	4413      	add	r3, r2
 8008c66:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f003 0307 	and.w	r3, r3, #7
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d015      	beq.n	8008c9e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f023 0307 	bic.w	r3, r3, #7
 8008c78:	3308      	adds	r3, #8
 8008c7a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f003 0307 	and.w	r3, r3, #7
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d00b      	beq.n	8008c9e <pvPortMalloc+0x6e>
	__asm volatile
 8008c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c8a:	f383 8811 	msr	BASEPRI, r3
 8008c8e:	f3bf 8f6f 	isb	sy
 8008c92:	f3bf 8f4f 	dsb	sy
 8008c96:	617b      	str	r3, [r7, #20]
}
 8008c98:	bf00      	nop
 8008c9a:	bf00      	nop
 8008c9c:	e7fd      	b.n	8008c9a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d06f      	beq.n	8008d84 <pvPortMalloc+0x154>
 8008ca4:	4b45      	ldr	r3, [pc, #276]	@ (8008dbc <pvPortMalloc+0x18c>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d86a      	bhi.n	8008d84 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008cae:	4b44      	ldr	r3, [pc, #272]	@ (8008dc0 <pvPortMalloc+0x190>)
 8008cb0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008cb2:	4b43      	ldr	r3, [pc, #268]	@ (8008dc0 <pvPortMalloc+0x190>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008cb8:	e004      	b.n	8008cc4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cbc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d903      	bls.n	8008cd6 <pvPortMalloc+0xa6>
 8008cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d1f1      	bne.n	8008cba <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008cd6:	4b37      	ldr	r3, [pc, #220]	@ (8008db4 <pvPortMalloc+0x184>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d051      	beq.n	8008d84 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008ce0:	6a3b      	ldr	r3, [r7, #32]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	2208      	movs	r2, #8
 8008ce6:	4413      	add	r3, r2
 8008ce8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	6a3b      	ldr	r3, [r7, #32]
 8008cf0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cf4:	685a      	ldr	r2, [r3, #4]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	1ad2      	subs	r2, r2, r3
 8008cfa:	2308      	movs	r3, #8
 8008cfc:	005b      	lsls	r3, r3, #1
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d920      	bls.n	8008d44 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008d02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4413      	add	r3, r2
 8008d08:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d0a:	69bb      	ldr	r3, [r7, #24]
 8008d0c:	f003 0307 	and.w	r3, r3, #7
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d00b      	beq.n	8008d2c <pvPortMalloc+0xfc>
	__asm volatile
 8008d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d18:	f383 8811 	msr	BASEPRI, r3
 8008d1c:	f3bf 8f6f 	isb	sy
 8008d20:	f3bf 8f4f 	dsb	sy
 8008d24:	613b      	str	r3, [r7, #16]
}
 8008d26:	bf00      	nop
 8008d28:	bf00      	nop
 8008d2a:	e7fd      	b.n	8008d28 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d2e:	685a      	ldr	r2, [r3, #4]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	1ad2      	subs	r2, r2, r3
 8008d34:	69bb      	ldr	r3, [r7, #24]
 8008d36:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d3a:	687a      	ldr	r2, [r7, #4]
 8008d3c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008d3e:	69b8      	ldr	r0, [r7, #24]
 8008d40:	f000 f90a 	bl	8008f58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008d44:	4b1d      	ldr	r3, [pc, #116]	@ (8008dbc <pvPortMalloc+0x18c>)
 8008d46:	681a      	ldr	r2, [r3, #0]
 8008d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	1ad3      	subs	r3, r2, r3
 8008d4e:	4a1b      	ldr	r2, [pc, #108]	@ (8008dbc <pvPortMalloc+0x18c>)
 8008d50:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008d52:	4b1a      	ldr	r3, [pc, #104]	@ (8008dbc <pvPortMalloc+0x18c>)
 8008d54:	681a      	ldr	r2, [r3, #0]
 8008d56:	4b1b      	ldr	r3, [pc, #108]	@ (8008dc4 <pvPortMalloc+0x194>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d203      	bcs.n	8008d66 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008d5e:	4b17      	ldr	r3, [pc, #92]	@ (8008dbc <pvPortMalloc+0x18c>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a18      	ldr	r2, [pc, #96]	@ (8008dc4 <pvPortMalloc+0x194>)
 8008d64:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d68:	685a      	ldr	r2, [r3, #4]
 8008d6a:	4b13      	ldr	r3, [pc, #76]	@ (8008db8 <pvPortMalloc+0x188>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	431a      	orrs	r2, r3
 8008d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d72:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d76:	2200      	movs	r2, #0
 8008d78:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008d7a:	4b13      	ldr	r3, [pc, #76]	@ (8008dc8 <pvPortMalloc+0x198>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	3301      	adds	r3, #1
 8008d80:	4a11      	ldr	r2, [pc, #68]	@ (8008dc8 <pvPortMalloc+0x198>)
 8008d82:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008d84:	f7fe ff6a 	bl	8007c5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d88:	69fb      	ldr	r3, [r7, #28]
 8008d8a:	f003 0307 	and.w	r3, r3, #7
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d00b      	beq.n	8008daa <pvPortMalloc+0x17a>
	__asm volatile
 8008d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d96:	f383 8811 	msr	BASEPRI, r3
 8008d9a:	f3bf 8f6f 	isb	sy
 8008d9e:	f3bf 8f4f 	dsb	sy
 8008da2:	60fb      	str	r3, [r7, #12]
}
 8008da4:	bf00      	nop
 8008da6:	bf00      	nop
 8008da8:	e7fd      	b.n	8008da6 <pvPortMalloc+0x176>
	return pvReturn;
 8008daa:	69fb      	ldr	r3, [r7, #28]
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3728      	adds	r7, #40	@ 0x28
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	20004840 	.word	0x20004840
 8008db8:	20004854 	.word	0x20004854
 8008dbc:	20004844 	.word	0x20004844
 8008dc0:	20004838 	.word	0x20004838
 8008dc4:	20004848 	.word	0x20004848
 8008dc8:	2000484c 	.word	0x2000484c

08008dcc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b086      	sub	sp, #24
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d04f      	beq.n	8008e7e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008dde:	2308      	movs	r3, #8
 8008de0:	425b      	negs	r3, r3
 8008de2:	697a      	ldr	r2, [r7, #20]
 8008de4:	4413      	add	r3, r2
 8008de6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	685a      	ldr	r2, [r3, #4]
 8008df0:	4b25      	ldr	r3, [pc, #148]	@ (8008e88 <vPortFree+0xbc>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4013      	ands	r3, r2
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d10b      	bne.n	8008e12 <vPortFree+0x46>
	__asm volatile
 8008dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dfe:	f383 8811 	msr	BASEPRI, r3
 8008e02:	f3bf 8f6f 	isb	sy
 8008e06:	f3bf 8f4f 	dsb	sy
 8008e0a:	60fb      	str	r3, [r7, #12]
}
 8008e0c:	bf00      	nop
 8008e0e:	bf00      	nop
 8008e10:	e7fd      	b.n	8008e0e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00b      	beq.n	8008e32 <vPortFree+0x66>
	__asm volatile
 8008e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e1e:	f383 8811 	msr	BASEPRI, r3
 8008e22:	f3bf 8f6f 	isb	sy
 8008e26:	f3bf 8f4f 	dsb	sy
 8008e2a:	60bb      	str	r3, [r7, #8]
}
 8008e2c:	bf00      	nop
 8008e2e:	bf00      	nop
 8008e30:	e7fd      	b.n	8008e2e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	685a      	ldr	r2, [r3, #4]
 8008e36:	4b14      	ldr	r3, [pc, #80]	@ (8008e88 <vPortFree+0xbc>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4013      	ands	r3, r2
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d01e      	beq.n	8008e7e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d11a      	bne.n	8008e7e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	685a      	ldr	r2, [r3, #4]
 8008e4c:	4b0e      	ldr	r3, [pc, #56]	@ (8008e88 <vPortFree+0xbc>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	43db      	mvns	r3, r3
 8008e52:	401a      	ands	r2, r3
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008e58:	f7fe fef2 	bl	8007c40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	685a      	ldr	r2, [r3, #4]
 8008e60:	4b0a      	ldr	r3, [pc, #40]	@ (8008e8c <vPortFree+0xc0>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4413      	add	r3, r2
 8008e66:	4a09      	ldr	r2, [pc, #36]	@ (8008e8c <vPortFree+0xc0>)
 8008e68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008e6a:	6938      	ldr	r0, [r7, #16]
 8008e6c:	f000 f874 	bl	8008f58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008e70:	4b07      	ldr	r3, [pc, #28]	@ (8008e90 <vPortFree+0xc4>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	3301      	adds	r3, #1
 8008e76:	4a06      	ldr	r2, [pc, #24]	@ (8008e90 <vPortFree+0xc4>)
 8008e78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008e7a:	f7fe feef 	bl	8007c5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008e7e:	bf00      	nop
 8008e80:	3718      	adds	r7, #24
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	bf00      	nop
 8008e88:	20004854 	.word	0x20004854
 8008e8c:	20004844 	.word	0x20004844
 8008e90:	20004850 	.word	0x20004850

08008e94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008e94:	b480      	push	{r7}
 8008e96:	b085      	sub	sp, #20
 8008e98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008e9a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008e9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008ea0:	4b27      	ldr	r3, [pc, #156]	@ (8008f40 <prvHeapInit+0xac>)
 8008ea2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f003 0307 	and.w	r3, r3, #7
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d00c      	beq.n	8008ec8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	3307      	adds	r3, #7
 8008eb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f023 0307 	bic.w	r3, r3, #7
 8008eba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008ebc:	68ba      	ldr	r2, [r7, #8]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	1ad3      	subs	r3, r2, r3
 8008ec2:	4a1f      	ldr	r2, [pc, #124]	@ (8008f40 <prvHeapInit+0xac>)
 8008ec4:	4413      	add	r3, r2
 8008ec6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008ecc:	4a1d      	ldr	r2, [pc, #116]	@ (8008f44 <prvHeapInit+0xb0>)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008ed2:	4b1c      	ldr	r3, [pc, #112]	@ (8008f44 <prvHeapInit+0xb0>)
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	68ba      	ldr	r2, [r7, #8]
 8008edc:	4413      	add	r3, r2
 8008ede:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008ee0:	2208      	movs	r2, #8
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	1a9b      	subs	r3, r3, r2
 8008ee6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f023 0307 	bic.w	r3, r3, #7
 8008eee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	4a15      	ldr	r2, [pc, #84]	@ (8008f48 <prvHeapInit+0xb4>)
 8008ef4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008ef6:	4b14      	ldr	r3, [pc, #80]	@ (8008f48 <prvHeapInit+0xb4>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	2200      	movs	r2, #0
 8008efc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008efe:	4b12      	ldr	r3, [pc, #72]	@ (8008f48 <prvHeapInit+0xb4>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2200      	movs	r2, #0
 8008f04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	68fa      	ldr	r2, [r7, #12]
 8008f0e:	1ad2      	subs	r2, r2, r3
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008f14:	4b0c      	ldr	r3, [pc, #48]	@ (8008f48 <prvHeapInit+0xb4>)
 8008f16:	681a      	ldr	r2, [r3, #0]
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	4a0a      	ldr	r2, [pc, #40]	@ (8008f4c <prvHeapInit+0xb8>)
 8008f22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	4a09      	ldr	r2, [pc, #36]	@ (8008f50 <prvHeapInit+0xbc>)
 8008f2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008f2c:	4b09      	ldr	r3, [pc, #36]	@ (8008f54 <prvHeapInit+0xc0>)
 8008f2e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008f32:	601a      	str	r2, [r3, #0]
}
 8008f34:	bf00      	nop
 8008f36:	3714      	adds	r7, #20
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bc80      	pop	{r7}
 8008f3c:	4770      	bx	lr
 8008f3e:	bf00      	nop
 8008f40:	20000838 	.word	0x20000838
 8008f44:	20004838 	.word	0x20004838
 8008f48:	20004840 	.word	0x20004840
 8008f4c:	20004848 	.word	0x20004848
 8008f50:	20004844 	.word	0x20004844
 8008f54:	20004854 	.word	0x20004854

08008f58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b085      	sub	sp, #20
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008f60:	4b27      	ldr	r3, [pc, #156]	@ (8009000 <prvInsertBlockIntoFreeList+0xa8>)
 8008f62:	60fb      	str	r3, [r7, #12]
 8008f64:	e002      	b.n	8008f6c <prvInsertBlockIntoFreeList+0x14>
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	60fb      	str	r3, [r7, #12]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d8f7      	bhi.n	8008f66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	68ba      	ldr	r2, [r7, #8]
 8008f80:	4413      	add	r3, r2
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d108      	bne.n	8008f9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	685a      	ldr	r2, [r3, #4]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	441a      	add	r2, r3
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	68ba      	ldr	r2, [r7, #8]
 8008fa4:	441a      	add	r2, r3
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d118      	bne.n	8008fe0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	4b14      	ldr	r3, [pc, #80]	@ (8009004 <prvInsertBlockIntoFreeList+0xac>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d00d      	beq.n	8008fd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	685a      	ldr	r2, [r3, #4]
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	441a      	add	r2, r3
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	681a      	ldr	r2, [r3, #0]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	601a      	str	r2, [r3, #0]
 8008fd4:	e008      	b.n	8008fe8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8009004 <prvInsertBlockIntoFreeList+0xac>)
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	601a      	str	r2, [r3, #0]
 8008fde:	e003      	b.n	8008fe8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681a      	ldr	r2, [r3, #0]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008fe8:	68fa      	ldr	r2, [r7, #12]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d002      	beq.n	8008ff6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	687a      	ldr	r2, [r7, #4]
 8008ff4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ff6:	bf00      	nop
 8008ff8:	3714      	adds	r7, #20
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bc80      	pop	{r7}
 8008ffe:	4770      	bx	lr
 8009000:	20004838 	.word	0x20004838
 8009004:	20004840 	.word	0x20004840

08009008 <_strtol_l.constprop.0>:
 8009008:	2b24      	cmp	r3, #36	@ 0x24
 800900a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800900e:	4686      	mov	lr, r0
 8009010:	4690      	mov	r8, r2
 8009012:	d801      	bhi.n	8009018 <_strtol_l.constprop.0+0x10>
 8009014:	2b01      	cmp	r3, #1
 8009016:	d106      	bne.n	8009026 <_strtol_l.constprop.0+0x1e>
 8009018:	f000 fefe 	bl	8009e18 <__errno>
 800901c:	2316      	movs	r3, #22
 800901e:	6003      	str	r3, [r0, #0]
 8009020:	2000      	movs	r0, #0
 8009022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009026:	460d      	mov	r5, r1
 8009028:	4833      	ldr	r0, [pc, #204]	@ (80090f8 <_strtol_l.constprop.0+0xf0>)
 800902a:	462a      	mov	r2, r5
 800902c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009030:	5d06      	ldrb	r6, [r0, r4]
 8009032:	f016 0608 	ands.w	r6, r6, #8
 8009036:	d1f8      	bne.n	800902a <_strtol_l.constprop.0+0x22>
 8009038:	2c2d      	cmp	r4, #45	@ 0x2d
 800903a:	d12d      	bne.n	8009098 <_strtol_l.constprop.0+0x90>
 800903c:	2601      	movs	r6, #1
 800903e:	782c      	ldrb	r4, [r5, #0]
 8009040:	1c95      	adds	r5, r2, #2
 8009042:	f033 0210 	bics.w	r2, r3, #16
 8009046:	d109      	bne.n	800905c <_strtol_l.constprop.0+0x54>
 8009048:	2c30      	cmp	r4, #48	@ 0x30
 800904a:	d12a      	bne.n	80090a2 <_strtol_l.constprop.0+0x9a>
 800904c:	782a      	ldrb	r2, [r5, #0]
 800904e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009052:	2a58      	cmp	r2, #88	@ 0x58
 8009054:	d125      	bne.n	80090a2 <_strtol_l.constprop.0+0x9a>
 8009056:	2310      	movs	r3, #16
 8009058:	786c      	ldrb	r4, [r5, #1]
 800905a:	3502      	adds	r5, #2
 800905c:	2200      	movs	r2, #0
 800905e:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009062:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009066:	fbbc f9f3 	udiv	r9, ip, r3
 800906a:	4610      	mov	r0, r2
 800906c:	fb03 ca19 	mls	sl, r3, r9, ip
 8009070:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009074:	2f09      	cmp	r7, #9
 8009076:	d81b      	bhi.n	80090b0 <_strtol_l.constprop.0+0xa8>
 8009078:	463c      	mov	r4, r7
 800907a:	42a3      	cmp	r3, r4
 800907c:	dd27      	ble.n	80090ce <_strtol_l.constprop.0+0xc6>
 800907e:	1c57      	adds	r7, r2, #1
 8009080:	d007      	beq.n	8009092 <_strtol_l.constprop.0+0x8a>
 8009082:	4581      	cmp	r9, r0
 8009084:	d320      	bcc.n	80090c8 <_strtol_l.constprop.0+0xc0>
 8009086:	d101      	bne.n	800908c <_strtol_l.constprop.0+0x84>
 8009088:	45a2      	cmp	sl, r4
 800908a:	db1d      	blt.n	80090c8 <_strtol_l.constprop.0+0xc0>
 800908c:	2201      	movs	r2, #1
 800908e:	fb00 4003 	mla	r0, r0, r3, r4
 8009092:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009096:	e7eb      	b.n	8009070 <_strtol_l.constprop.0+0x68>
 8009098:	2c2b      	cmp	r4, #43	@ 0x2b
 800909a:	bf04      	itt	eq
 800909c:	782c      	ldrbeq	r4, [r5, #0]
 800909e:	1c95      	addeq	r5, r2, #2
 80090a0:	e7cf      	b.n	8009042 <_strtol_l.constprop.0+0x3a>
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d1da      	bne.n	800905c <_strtol_l.constprop.0+0x54>
 80090a6:	2c30      	cmp	r4, #48	@ 0x30
 80090a8:	bf0c      	ite	eq
 80090aa:	2308      	moveq	r3, #8
 80090ac:	230a      	movne	r3, #10
 80090ae:	e7d5      	b.n	800905c <_strtol_l.constprop.0+0x54>
 80090b0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80090b4:	2f19      	cmp	r7, #25
 80090b6:	d801      	bhi.n	80090bc <_strtol_l.constprop.0+0xb4>
 80090b8:	3c37      	subs	r4, #55	@ 0x37
 80090ba:	e7de      	b.n	800907a <_strtol_l.constprop.0+0x72>
 80090bc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80090c0:	2f19      	cmp	r7, #25
 80090c2:	d804      	bhi.n	80090ce <_strtol_l.constprop.0+0xc6>
 80090c4:	3c57      	subs	r4, #87	@ 0x57
 80090c6:	e7d8      	b.n	800907a <_strtol_l.constprop.0+0x72>
 80090c8:	f04f 32ff 	mov.w	r2, #4294967295
 80090cc:	e7e1      	b.n	8009092 <_strtol_l.constprop.0+0x8a>
 80090ce:	1c53      	adds	r3, r2, #1
 80090d0:	d108      	bne.n	80090e4 <_strtol_l.constprop.0+0xdc>
 80090d2:	2322      	movs	r3, #34	@ 0x22
 80090d4:	4660      	mov	r0, ip
 80090d6:	f8ce 3000 	str.w	r3, [lr]
 80090da:	f1b8 0f00 	cmp.w	r8, #0
 80090de:	d0a0      	beq.n	8009022 <_strtol_l.constprop.0+0x1a>
 80090e0:	1e69      	subs	r1, r5, #1
 80090e2:	e006      	b.n	80090f2 <_strtol_l.constprop.0+0xea>
 80090e4:	b106      	cbz	r6, 80090e8 <_strtol_l.constprop.0+0xe0>
 80090e6:	4240      	negs	r0, r0
 80090e8:	f1b8 0f00 	cmp.w	r8, #0
 80090ec:	d099      	beq.n	8009022 <_strtol_l.constprop.0+0x1a>
 80090ee:	2a00      	cmp	r2, #0
 80090f0:	d1f6      	bne.n	80090e0 <_strtol_l.constprop.0+0xd8>
 80090f2:	f8c8 1000 	str.w	r1, [r8]
 80090f6:	e794      	b.n	8009022 <_strtol_l.constprop.0+0x1a>
 80090f8:	0800c92b 	.word	0x0800c92b

080090fc <_strtol_r>:
 80090fc:	f7ff bf84 	b.w	8009008 <_strtol_l.constprop.0>

08009100 <strtol>:
 8009100:	4613      	mov	r3, r2
 8009102:	460a      	mov	r2, r1
 8009104:	4601      	mov	r1, r0
 8009106:	4802      	ldr	r0, [pc, #8]	@ (8009110 <strtol+0x10>)
 8009108:	6800      	ldr	r0, [r0, #0]
 800910a:	f7ff bf7d 	b.w	8009008 <_strtol_l.constprop.0>
 800910e:	bf00      	nop
 8009110:	20000138 	.word	0x20000138

08009114 <__cvt>:
 8009114:	2b00      	cmp	r3, #0
 8009116:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800911a:	461d      	mov	r5, r3
 800911c:	bfbb      	ittet	lt
 800911e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8009122:	461d      	movlt	r5, r3
 8009124:	2300      	movge	r3, #0
 8009126:	232d      	movlt	r3, #45	@ 0x2d
 8009128:	b088      	sub	sp, #32
 800912a:	4614      	mov	r4, r2
 800912c:	bfb8      	it	lt
 800912e:	4614      	movlt	r4, r2
 8009130:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009132:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8009134:	7013      	strb	r3, [r2, #0]
 8009136:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009138:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800913c:	f023 0820 	bic.w	r8, r3, #32
 8009140:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009144:	d005      	beq.n	8009152 <__cvt+0x3e>
 8009146:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800914a:	d100      	bne.n	800914e <__cvt+0x3a>
 800914c:	3601      	adds	r6, #1
 800914e:	2302      	movs	r3, #2
 8009150:	e000      	b.n	8009154 <__cvt+0x40>
 8009152:	2303      	movs	r3, #3
 8009154:	aa07      	add	r2, sp, #28
 8009156:	9204      	str	r2, [sp, #16]
 8009158:	aa06      	add	r2, sp, #24
 800915a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800915e:	e9cd 3600 	strd	r3, r6, [sp]
 8009162:	4622      	mov	r2, r4
 8009164:	462b      	mov	r3, r5
 8009166:	f000 ff2b 	bl	8009fc0 <_dtoa_r>
 800916a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800916e:	4607      	mov	r7, r0
 8009170:	d119      	bne.n	80091a6 <__cvt+0x92>
 8009172:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009174:	07db      	lsls	r3, r3, #31
 8009176:	d50e      	bpl.n	8009196 <__cvt+0x82>
 8009178:	eb00 0906 	add.w	r9, r0, r6
 800917c:	2200      	movs	r2, #0
 800917e:	2300      	movs	r3, #0
 8009180:	4620      	mov	r0, r4
 8009182:	4629      	mov	r1, r5
 8009184:	f7f7 fc10 	bl	80009a8 <__aeabi_dcmpeq>
 8009188:	b108      	cbz	r0, 800918e <__cvt+0x7a>
 800918a:	f8cd 901c 	str.w	r9, [sp, #28]
 800918e:	2230      	movs	r2, #48	@ 0x30
 8009190:	9b07      	ldr	r3, [sp, #28]
 8009192:	454b      	cmp	r3, r9
 8009194:	d31e      	bcc.n	80091d4 <__cvt+0xc0>
 8009196:	4638      	mov	r0, r7
 8009198:	9b07      	ldr	r3, [sp, #28]
 800919a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800919c:	1bdb      	subs	r3, r3, r7
 800919e:	6013      	str	r3, [r2, #0]
 80091a0:	b008      	add	sp, #32
 80091a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091a6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80091aa:	eb00 0906 	add.w	r9, r0, r6
 80091ae:	d1e5      	bne.n	800917c <__cvt+0x68>
 80091b0:	7803      	ldrb	r3, [r0, #0]
 80091b2:	2b30      	cmp	r3, #48	@ 0x30
 80091b4:	d10a      	bne.n	80091cc <__cvt+0xb8>
 80091b6:	2200      	movs	r2, #0
 80091b8:	2300      	movs	r3, #0
 80091ba:	4620      	mov	r0, r4
 80091bc:	4629      	mov	r1, r5
 80091be:	f7f7 fbf3 	bl	80009a8 <__aeabi_dcmpeq>
 80091c2:	b918      	cbnz	r0, 80091cc <__cvt+0xb8>
 80091c4:	f1c6 0601 	rsb	r6, r6, #1
 80091c8:	f8ca 6000 	str.w	r6, [sl]
 80091cc:	f8da 3000 	ldr.w	r3, [sl]
 80091d0:	4499      	add	r9, r3
 80091d2:	e7d3      	b.n	800917c <__cvt+0x68>
 80091d4:	1c59      	adds	r1, r3, #1
 80091d6:	9107      	str	r1, [sp, #28]
 80091d8:	701a      	strb	r2, [r3, #0]
 80091da:	e7d9      	b.n	8009190 <__cvt+0x7c>

080091dc <__exponent>:
 80091dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091de:	2900      	cmp	r1, #0
 80091e0:	bfb6      	itet	lt
 80091e2:	232d      	movlt	r3, #45	@ 0x2d
 80091e4:	232b      	movge	r3, #43	@ 0x2b
 80091e6:	4249      	neglt	r1, r1
 80091e8:	2909      	cmp	r1, #9
 80091ea:	7002      	strb	r2, [r0, #0]
 80091ec:	7043      	strb	r3, [r0, #1]
 80091ee:	dd29      	ble.n	8009244 <__exponent+0x68>
 80091f0:	f10d 0307 	add.w	r3, sp, #7
 80091f4:	461d      	mov	r5, r3
 80091f6:	270a      	movs	r7, #10
 80091f8:	fbb1 f6f7 	udiv	r6, r1, r7
 80091fc:	461a      	mov	r2, r3
 80091fe:	fb07 1416 	mls	r4, r7, r6, r1
 8009202:	3430      	adds	r4, #48	@ 0x30
 8009204:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009208:	460c      	mov	r4, r1
 800920a:	2c63      	cmp	r4, #99	@ 0x63
 800920c:	4631      	mov	r1, r6
 800920e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009212:	dcf1      	bgt.n	80091f8 <__exponent+0x1c>
 8009214:	3130      	adds	r1, #48	@ 0x30
 8009216:	1e94      	subs	r4, r2, #2
 8009218:	f803 1c01 	strb.w	r1, [r3, #-1]
 800921c:	4623      	mov	r3, r4
 800921e:	1c41      	adds	r1, r0, #1
 8009220:	42ab      	cmp	r3, r5
 8009222:	d30a      	bcc.n	800923a <__exponent+0x5e>
 8009224:	f10d 0309 	add.w	r3, sp, #9
 8009228:	1a9b      	subs	r3, r3, r2
 800922a:	42ac      	cmp	r4, r5
 800922c:	bf88      	it	hi
 800922e:	2300      	movhi	r3, #0
 8009230:	3302      	adds	r3, #2
 8009232:	4403      	add	r3, r0
 8009234:	1a18      	subs	r0, r3, r0
 8009236:	b003      	add	sp, #12
 8009238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800923a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800923e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009242:	e7ed      	b.n	8009220 <__exponent+0x44>
 8009244:	2330      	movs	r3, #48	@ 0x30
 8009246:	3130      	adds	r1, #48	@ 0x30
 8009248:	7083      	strb	r3, [r0, #2]
 800924a:	70c1      	strb	r1, [r0, #3]
 800924c:	1d03      	adds	r3, r0, #4
 800924e:	e7f1      	b.n	8009234 <__exponent+0x58>

08009250 <_printf_float>:
 8009250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009254:	b091      	sub	sp, #68	@ 0x44
 8009256:	460c      	mov	r4, r1
 8009258:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800925c:	4616      	mov	r6, r2
 800925e:	461f      	mov	r7, r3
 8009260:	4605      	mov	r5, r0
 8009262:	f000 fd39 	bl	8009cd8 <_localeconv_r>
 8009266:	6803      	ldr	r3, [r0, #0]
 8009268:	4618      	mov	r0, r3
 800926a:	9308      	str	r3, [sp, #32]
 800926c:	f7f6 ff70 	bl	8000150 <strlen>
 8009270:	2300      	movs	r3, #0
 8009272:	930e      	str	r3, [sp, #56]	@ 0x38
 8009274:	f8d8 3000 	ldr.w	r3, [r8]
 8009278:	9009      	str	r0, [sp, #36]	@ 0x24
 800927a:	3307      	adds	r3, #7
 800927c:	f023 0307 	bic.w	r3, r3, #7
 8009280:	f103 0208 	add.w	r2, r3, #8
 8009284:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009288:	f8d4 b000 	ldr.w	fp, [r4]
 800928c:	f8c8 2000 	str.w	r2, [r8]
 8009290:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009294:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009298:	930b      	str	r3, [sp, #44]	@ 0x2c
 800929a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800929e:	f04f 32ff 	mov.w	r2, #4294967295
 80092a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80092a6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80092aa:	4b9c      	ldr	r3, [pc, #624]	@ (800951c <_printf_float+0x2cc>)
 80092ac:	f7f7 fbae 	bl	8000a0c <__aeabi_dcmpun>
 80092b0:	bb70      	cbnz	r0, 8009310 <_printf_float+0xc0>
 80092b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80092b6:	f04f 32ff 	mov.w	r2, #4294967295
 80092ba:	4b98      	ldr	r3, [pc, #608]	@ (800951c <_printf_float+0x2cc>)
 80092bc:	f7f7 fb88 	bl	80009d0 <__aeabi_dcmple>
 80092c0:	bb30      	cbnz	r0, 8009310 <_printf_float+0xc0>
 80092c2:	2200      	movs	r2, #0
 80092c4:	2300      	movs	r3, #0
 80092c6:	4640      	mov	r0, r8
 80092c8:	4649      	mov	r1, r9
 80092ca:	f7f7 fb77 	bl	80009bc <__aeabi_dcmplt>
 80092ce:	b110      	cbz	r0, 80092d6 <_printf_float+0x86>
 80092d0:	232d      	movs	r3, #45	@ 0x2d
 80092d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80092d6:	4a92      	ldr	r2, [pc, #584]	@ (8009520 <_printf_float+0x2d0>)
 80092d8:	4b92      	ldr	r3, [pc, #584]	@ (8009524 <_printf_float+0x2d4>)
 80092da:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80092de:	bf94      	ite	ls
 80092e0:	4690      	movls	r8, r2
 80092e2:	4698      	movhi	r8, r3
 80092e4:	2303      	movs	r3, #3
 80092e6:	f04f 0900 	mov.w	r9, #0
 80092ea:	6123      	str	r3, [r4, #16]
 80092ec:	f02b 0304 	bic.w	r3, fp, #4
 80092f0:	6023      	str	r3, [r4, #0]
 80092f2:	4633      	mov	r3, r6
 80092f4:	4621      	mov	r1, r4
 80092f6:	4628      	mov	r0, r5
 80092f8:	9700      	str	r7, [sp, #0]
 80092fa:	aa0f      	add	r2, sp, #60	@ 0x3c
 80092fc:	f000 f9d4 	bl	80096a8 <_printf_common>
 8009300:	3001      	adds	r0, #1
 8009302:	f040 8090 	bne.w	8009426 <_printf_float+0x1d6>
 8009306:	f04f 30ff 	mov.w	r0, #4294967295
 800930a:	b011      	add	sp, #68	@ 0x44
 800930c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009310:	4642      	mov	r2, r8
 8009312:	464b      	mov	r3, r9
 8009314:	4640      	mov	r0, r8
 8009316:	4649      	mov	r1, r9
 8009318:	f7f7 fb78 	bl	8000a0c <__aeabi_dcmpun>
 800931c:	b148      	cbz	r0, 8009332 <_printf_float+0xe2>
 800931e:	464b      	mov	r3, r9
 8009320:	2b00      	cmp	r3, #0
 8009322:	bfb8      	it	lt
 8009324:	232d      	movlt	r3, #45	@ 0x2d
 8009326:	4a80      	ldr	r2, [pc, #512]	@ (8009528 <_printf_float+0x2d8>)
 8009328:	bfb8      	it	lt
 800932a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800932e:	4b7f      	ldr	r3, [pc, #508]	@ (800952c <_printf_float+0x2dc>)
 8009330:	e7d3      	b.n	80092da <_printf_float+0x8a>
 8009332:	6863      	ldr	r3, [r4, #4]
 8009334:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8009338:	1c5a      	adds	r2, r3, #1
 800933a:	d13f      	bne.n	80093bc <_printf_float+0x16c>
 800933c:	2306      	movs	r3, #6
 800933e:	6063      	str	r3, [r4, #4]
 8009340:	2200      	movs	r2, #0
 8009342:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8009346:	6023      	str	r3, [r4, #0]
 8009348:	9206      	str	r2, [sp, #24]
 800934a:	aa0e      	add	r2, sp, #56	@ 0x38
 800934c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8009350:	aa0d      	add	r2, sp, #52	@ 0x34
 8009352:	9203      	str	r2, [sp, #12]
 8009354:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8009358:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800935c:	6863      	ldr	r3, [r4, #4]
 800935e:	4642      	mov	r2, r8
 8009360:	9300      	str	r3, [sp, #0]
 8009362:	4628      	mov	r0, r5
 8009364:	464b      	mov	r3, r9
 8009366:	910a      	str	r1, [sp, #40]	@ 0x28
 8009368:	f7ff fed4 	bl	8009114 <__cvt>
 800936c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800936e:	4680      	mov	r8, r0
 8009370:	2947      	cmp	r1, #71	@ 0x47
 8009372:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009374:	d128      	bne.n	80093c8 <_printf_float+0x178>
 8009376:	1cc8      	adds	r0, r1, #3
 8009378:	db02      	blt.n	8009380 <_printf_float+0x130>
 800937a:	6863      	ldr	r3, [r4, #4]
 800937c:	4299      	cmp	r1, r3
 800937e:	dd40      	ble.n	8009402 <_printf_float+0x1b2>
 8009380:	f1aa 0a02 	sub.w	sl, sl, #2
 8009384:	fa5f fa8a 	uxtb.w	sl, sl
 8009388:	4652      	mov	r2, sl
 800938a:	3901      	subs	r1, #1
 800938c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009390:	910d      	str	r1, [sp, #52]	@ 0x34
 8009392:	f7ff ff23 	bl	80091dc <__exponent>
 8009396:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009398:	4681      	mov	r9, r0
 800939a:	1813      	adds	r3, r2, r0
 800939c:	2a01      	cmp	r2, #1
 800939e:	6123      	str	r3, [r4, #16]
 80093a0:	dc02      	bgt.n	80093a8 <_printf_float+0x158>
 80093a2:	6822      	ldr	r2, [r4, #0]
 80093a4:	07d2      	lsls	r2, r2, #31
 80093a6:	d501      	bpl.n	80093ac <_printf_float+0x15c>
 80093a8:	3301      	adds	r3, #1
 80093aa:	6123      	str	r3, [r4, #16]
 80093ac:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d09e      	beq.n	80092f2 <_printf_float+0xa2>
 80093b4:	232d      	movs	r3, #45	@ 0x2d
 80093b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80093ba:	e79a      	b.n	80092f2 <_printf_float+0xa2>
 80093bc:	2947      	cmp	r1, #71	@ 0x47
 80093be:	d1bf      	bne.n	8009340 <_printf_float+0xf0>
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d1bd      	bne.n	8009340 <_printf_float+0xf0>
 80093c4:	2301      	movs	r3, #1
 80093c6:	e7ba      	b.n	800933e <_printf_float+0xee>
 80093c8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80093cc:	d9dc      	bls.n	8009388 <_printf_float+0x138>
 80093ce:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80093d2:	d118      	bne.n	8009406 <_printf_float+0x1b6>
 80093d4:	2900      	cmp	r1, #0
 80093d6:	6863      	ldr	r3, [r4, #4]
 80093d8:	dd0b      	ble.n	80093f2 <_printf_float+0x1a2>
 80093da:	6121      	str	r1, [r4, #16]
 80093dc:	b913      	cbnz	r3, 80093e4 <_printf_float+0x194>
 80093de:	6822      	ldr	r2, [r4, #0]
 80093e0:	07d0      	lsls	r0, r2, #31
 80093e2:	d502      	bpl.n	80093ea <_printf_float+0x19a>
 80093e4:	3301      	adds	r3, #1
 80093e6:	440b      	add	r3, r1
 80093e8:	6123      	str	r3, [r4, #16]
 80093ea:	f04f 0900 	mov.w	r9, #0
 80093ee:	65a1      	str	r1, [r4, #88]	@ 0x58
 80093f0:	e7dc      	b.n	80093ac <_printf_float+0x15c>
 80093f2:	b913      	cbnz	r3, 80093fa <_printf_float+0x1aa>
 80093f4:	6822      	ldr	r2, [r4, #0]
 80093f6:	07d2      	lsls	r2, r2, #31
 80093f8:	d501      	bpl.n	80093fe <_printf_float+0x1ae>
 80093fa:	3302      	adds	r3, #2
 80093fc:	e7f4      	b.n	80093e8 <_printf_float+0x198>
 80093fe:	2301      	movs	r3, #1
 8009400:	e7f2      	b.n	80093e8 <_printf_float+0x198>
 8009402:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009406:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009408:	4299      	cmp	r1, r3
 800940a:	db05      	blt.n	8009418 <_printf_float+0x1c8>
 800940c:	6823      	ldr	r3, [r4, #0]
 800940e:	6121      	str	r1, [r4, #16]
 8009410:	07d8      	lsls	r0, r3, #31
 8009412:	d5ea      	bpl.n	80093ea <_printf_float+0x19a>
 8009414:	1c4b      	adds	r3, r1, #1
 8009416:	e7e7      	b.n	80093e8 <_printf_float+0x198>
 8009418:	2900      	cmp	r1, #0
 800941a:	bfcc      	ite	gt
 800941c:	2201      	movgt	r2, #1
 800941e:	f1c1 0202 	rsble	r2, r1, #2
 8009422:	4413      	add	r3, r2
 8009424:	e7e0      	b.n	80093e8 <_printf_float+0x198>
 8009426:	6823      	ldr	r3, [r4, #0]
 8009428:	055a      	lsls	r2, r3, #21
 800942a:	d407      	bmi.n	800943c <_printf_float+0x1ec>
 800942c:	6923      	ldr	r3, [r4, #16]
 800942e:	4642      	mov	r2, r8
 8009430:	4631      	mov	r1, r6
 8009432:	4628      	mov	r0, r5
 8009434:	47b8      	blx	r7
 8009436:	3001      	adds	r0, #1
 8009438:	d12b      	bne.n	8009492 <_printf_float+0x242>
 800943a:	e764      	b.n	8009306 <_printf_float+0xb6>
 800943c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009440:	f240 80dc 	bls.w	80095fc <_printf_float+0x3ac>
 8009444:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009448:	2200      	movs	r2, #0
 800944a:	2300      	movs	r3, #0
 800944c:	f7f7 faac 	bl	80009a8 <__aeabi_dcmpeq>
 8009450:	2800      	cmp	r0, #0
 8009452:	d033      	beq.n	80094bc <_printf_float+0x26c>
 8009454:	2301      	movs	r3, #1
 8009456:	4631      	mov	r1, r6
 8009458:	4628      	mov	r0, r5
 800945a:	4a35      	ldr	r2, [pc, #212]	@ (8009530 <_printf_float+0x2e0>)
 800945c:	47b8      	blx	r7
 800945e:	3001      	adds	r0, #1
 8009460:	f43f af51 	beq.w	8009306 <_printf_float+0xb6>
 8009464:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8009468:	4543      	cmp	r3, r8
 800946a:	db02      	blt.n	8009472 <_printf_float+0x222>
 800946c:	6823      	ldr	r3, [r4, #0]
 800946e:	07d8      	lsls	r0, r3, #31
 8009470:	d50f      	bpl.n	8009492 <_printf_float+0x242>
 8009472:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009476:	4631      	mov	r1, r6
 8009478:	4628      	mov	r0, r5
 800947a:	47b8      	blx	r7
 800947c:	3001      	adds	r0, #1
 800947e:	f43f af42 	beq.w	8009306 <_printf_float+0xb6>
 8009482:	f04f 0900 	mov.w	r9, #0
 8009486:	f108 38ff 	add.w	r8, r8, #4294967295
 800948a:	f104 0a1a 	add.w	sl, r4, #26
 800948e:	45c8      	cmp	r8, r9
 8009490:	dc09      	bgt.n	80094a6 <_printf_float+0x256>
 8009492:	6823      	ldr	r3, [r4, #0]
 8009494:	079b      	lsls	r3, r3, #30
 8009496:	f100 8102 	bmi.w	800969e <_printf_float+0x44e>
 800949a:	68e0      	ldr	r0, [r4, #12]
 800949c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800949e:	4298      	cmp	r0, r3
 80094a0:	bfb8      	it	lt
 80094a2:	4618      	movlt	r0, r3
 80094a4:	e731      	b.n	800930a <_printf_float+0xba>
 80094a6:	2301      	movs	r3, #1
 80094a8:	4652      	mov	r2, sl
 80094aa:	4631      	mov	r1, r6
 80094ac:	4628      	mov	r0, r5
 80094ae:	47b8      	blx	r7
 80094b0:	3001      	adds	r0, #1
 80094b2:	f43f af28 	beq.w	8009306 <_printf_float+0xb6>
 80094b6:	f109 0901 	add.w	r9, r9, #1
 80094ba:	e7e8      	b.n	800948e <_printf_float+0x23e>
 80094bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80094be:	2b00      	cmp	r3, #0
 80094c0:	dc38      	bgt.n	8009534 <_printf_float+0x2e4>
 80094c2:	2301      	movs	r3, #1
 80094c4:	4631      	mov	r1, r6
 80094c6:	4628      	mov	r0, r5
 80094c8:	4a19      	ldr	r2, [pc, #100]	@ (8009530 <_printf_float+0x2e0>)
 80094ca:	47b8      	blx	r7
 80094cc:	3001      	adds	r0, #1
 80094ce:	f43f af1a 	beq.w	8009306 <_printf_float+0xb6>
 80094d2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80094d6:	ea59 0303 	orrs.w	r3, r9, r3
 80094da:	d102      	bne.n	80094e2 <_printf_float+0x292>
 80094dc:	6823      	ldr	r3, [r4, #0]
 80094de:	07d9      	lsls	r1, r3, #31
 80094e0:	d5d7      	bpl.n	8009492 <_printf_float+0x242>
 80094e2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80094e6:	4631      	mov	r1, r6
 80094e8:	4628      	mov	r0, r5
 80094ea:	47b8      	blx	r7
 80094ec:	3001      	adds	r0, #1
 80094ee:	f43f af0a 	beq.w	8009306 <_printf_float+0xb6>
 80094f2:	f04f 0a00 	mov.w	sl, #0
 80094f6:	f104 0b1a 	add.w	fp, r4, #26
 80094fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80094fc:	425b      	negs	r3, r3
 80094fe:	4553      	cmp	r3, sl
 8009500:	dc01      	bgt.n	8009506 <_printf_float+0x2b6>
 8009502:	464b      	mov	r3, r9
 8009504:	e793      	b.n	800942e <_printf_float+0x1de>
 8009506:	2301      	movs	r3, #1
 8009508:	465a      	mov	r2, fp
 800950a:	4631      	mov	r1, r6
 800950c:	4628      	mov	r0, r5
 800950e:	47b8      	blx	r7
 8009510:	3001      	adds	r0, #1
 8009512:	f43f aef8 	beq.w	8009306 <_printf_float+0xb6>
 8009516:	f10a 0a01 	add.w	sl, sl, #1
 800951a:	e7ee      	b.n	80094fa <_printf_float+0x2aa>
 800951c:	7fefffff 	.word	0x7fefffff
 8009520:	0800ca2b 	.word	0x0800ca2b
 8009524:	0800ca2f 	.word	0x0800ca2f
 8009528:	0800ca33 	.word	0x0800ca33
 800952c:	0800ca37 	.word	0x0800ca37
 8009530:	0800cc67 	.word	0x0800cc67
 8009534:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009536:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800953a:	4553      	cmp	r3, sl
 800953c:	bfa8      	it	ge
 800953e:	4653      	movge	r3, sl
 8009540:	2b00      	cmp	r3, #0
 8009542:	4699      	mov	r9, r3
 8009544:	dc36      	bgt.n	80095b4 <_printf_float+0x364>
 8009546:	f04f 0b00 	mov.w	fp, #0
 800954a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800954e:	f104 021a 	add.w	r2, r4, #26
 8009552:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009554:	930a      	str	r3, [sp, #40]	@ 0x28
 8009556:	eba3 0309 	sub.w	r3, r3, r9
 800955a:	455b      	cmp	r3, fp
 800955c:	dc31      	bgt.n	80095c2 <_printf_float+0x372>
 800955e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009560:	459a      	cmp	sl, r3
 8009562:	dc3a      	bgt.n	80095da <_printf_float+0x38a>
 8009564:	6823      	ldr	r3, [r4, #0]
 8009566:	07da      	lsls	r2, r3, #31
 8009568:	d437      	bmi.n	80095da <_printf_float+0x38a>
 800956a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800956c:	ebaa 0903 	sub.w	r9, sl, r3
 8009570:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009572:	ebaa 0303 	sub.w	r3, sl, r3
 8009576:	4599      	cmp	r9, r3
 8009578:	bfa8      	it	ge
 800957a:	4699      	movge	r9, r3
 800957c:	f1b9 0f00 	cmp.w	r9, #0
 8009580:	dc33      	bgt.n	80095ea <_printf_float+0x39a>
 8009582:	f04f 0800 	mov.w	r8, #0
 8009586:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800958a:	f104 0b1a 	add.w	fp, r4, #26
 800958e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009590:	ebaa 0303 	sub.w	r3, sl, r3
 8009594:	eba3 0309 	sub.w	r3, r3, r9
 8009598:	4543      	cmp	r3, r8
 800959a:	f77f af7a 	ble.w	8009492 <_printf_float+0x242>
 800959e:	2301      	movs	r3, #1
 80095a0:	465a      	mov	r2, fp
 80095a2:	4631      	mov	r1, r6
 80095a4:	4628      	mov	r0, r5
 80095a6:	47b8      	blx	r7
 80095a8:	3001      	adds	r0, #1
 80095aa:	f43f aeac 	beq.w	8009306 <_printf_float+0xb6>
 80095ae:	f108 0801 	add.w	r8, r8, #1
 80095b2:	e7ec      	b.n	800958e <_printf_float+0x33e>
 80095b4:	4642      	mov	r2, r8
 80095b6:	4631      	mov	r1, r6
 80095b8:	4628      	mov	r0, r5
 80095ba:	47b8      	blx	r7
 80095bc:	3001      	adds	r0, #1
 80095be:	d1c2      	bne.n	8009546 <_printf_float+0x2f6>
 80095c0:	e6a1      	b.n	8009306 <_printf_float+0xb6>
 80095c2:	2301      	movs	r3, #1
 80095c4:	4631      	mov	r1, r6
 80095c6:	4628      	mov	r0, r5
 80095c8:	920a      	str	r2, [sp, #40]	@ 0x28
 80095ca:	47b8      	blx	r7
 80095cc:	3001      	adds	r0, #1
 80095ce:	f43f ae9a 	beq.w	8009306 <_printf_float+0xb6>
 80095d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80095d4:	f10b 0b01 	add.w	fp, fp, #1
 80095d8:	e7bb      	b.n	8009552 <_printf_float+0x302>
 80095da:	4631      	mov	r1, r6
 80095dc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80095e0:	4628      	mov	r0, r5
 80095e2:	47b8      	blx	r7
 80095e4:	3001      	adds	r0, #1
 80095e6:	d1c0      	bne.n	800956a <_printf_float+0x31a>
 80095e8:	e68d      	b.n	8009306 <_printf_float+0xb6>
 80095ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80095ec:	464b      	mov	r3, r9
 80095ee:	4631      	mov	r1, r6
 80095f0:	4628      	mov	r0, r5
 80095f2:	4442      	add	r2, r8
 80095f4:	47b8      	blx	r7
 80095f6:	3001      	adds	r0, #1
 80095f8:	d1c3      	bne.n	8009582 <_printf_float+0x332>
 80095fa:	e684      	b.n	8009306 <_printf_float+0xb6>
 80095fc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009600:	f1ba 0f01 	cmp.w	sl, #1
 8009604:	dc01      	bgt.n	800960a <_printf_float+0x3ba>
 8009606:	07db      	lsls	r3, r3, #31
 8009608:	d536      	bpl.n	8009678 <_printf_float+0x428>
 800960a:	2301      	movs	r3, #1
 800960c:	4642      	mov	r2, r8
 800960e:	4631      	mov	r1, r6
 8009610:	4628      	mov	r0, r5
 8009612:	47b8      	blx	r7
 8009614:	3001      	adds	r0, #1
 8009616:	f43f ae76 	beq.w	8009306 <_printf_float+0xb6>
 800961a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800961e:	4631      	mov	r1, r6
 8009620:	4628      	mov	r0, r5
 8009622:	47b8      	blx	r7
 8009624:	3001      	adds	r0, #1
 8009626:	f43f ae6e 	beq.w	8009306 <_printf_float+0xb6>
 800962a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800962e:	2200      	movs	r2, #0
 8009630:	2300      	movs	r3, #0
 8009632:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009636:	f7f7 f9b7 	bl	80009a8 <__aeabi_dcmpeq>
 800963a:	b9c0      	cbnz	r0, 800966e <_printf_float+0x41e>
 800963c:	4653      	mov	r3, sl
 800963e:	f108 0201 	add.w	r2, r8, #1
 8009642:	4631      	mov	r1, r6
 8009644:	4628      	mov	r0, r5
 8009646:	47b8      	blx	r7
 8009648:	3001      	adds	r0, #1
 800964a:	d10c      	bne.n	8009666 <_printf_float+0x416>
 800964c:	e65b      	b.n	8009306 <_printf_float+0xb6>
 800964e:	2301      	movs	r3, #1
 8009650:	465a      	mov	r2, fp
 8009652:	4631      	mov	r1, r6
 8009654:	4628      	mov	r0, r5
 8009656:	47b8      	blx	r7
 8009658:	3001      	adds	r0, #1
 800965a:	f43f ae54 	beq.w	8009306 <_printf_float+0xb6>
 800965e:	f108 0801 	add.w	r8, r8, #1
 8009662:	45d0      	cmp	r8, sl
 8009664:	dbf3      	blt.n	800964e <_printf_float+0x3fe>
 8009666:	464b      	mov	r3, r9
 8009668:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800966c:	e6e0      	b.n	8009430 <_printf_float+0x1e0>
 800966e:	f04f 0800 	mov.w	r8, #0
 8009672:	f104 0b1a 	add.w	fp, r4, #26
 8009676:	e7f4      	b.n	8009662 <_printf_float+0x412>
 8009678:	2301      	movs	r3, #1
 800967a:	4642      	mov	r2, r8
 800967c:	e7e1      	b.n	8009642 <_printf_float+0x3f2>
 800967e:	2301      	movs	r3, #1
 8009680:	464a      	mov	r2, r9
 8009682:	4631      	mov	r1, r6
 8009684:	4628      	mov	r0, r5
 8009686:	47b8      	blx	r7
 8009688:	3001      	adds	r0, #1
 800968a:	f43f ae3c 	beq.w	8009306 <_printf_float+0xb6>
 800968e:	f108 0801 	add.w	r8, r8, #1
 8009692:	68e3      	ldr	r3, [r4, #12]
 8009694:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009696:	1a5b      	subs	r3, r3, r1
 8009698:	4543      	cmp	r3, r8
 800969a:	dcf0      	bgt.n	800967e <_printf_float+0x42e>
 800969c:	e6fd      	b.n	800949a <_printf_float+0x24a>
 800969e:	f04f 0800 	mov.w	r8, #0
 80096a2:	f104 0919 	add.w	r9, r4, #25
 80096a6:	e7f4      	b.n	8009692 <_printf_float+0x442>

080096a8 <_printf_common>:
 80096a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096ac:	4616      	mov	r6, r2
 80096ae:	4698      	mov	r8, r3
 80096b0:	688a      	ldr	r2, [r1, #8]
 80096b2:	690b      	ldr	r3, [r1, #16]
 80096b4:	4607      	mov	r7, r0
 80096b6:	4293      	cmp	r3, r2
 80096b8:	bfb8      	it	lt
 80096ba:	4613      	movlt	r3, r2
 80096bc:	6033      	str	r3, [r6, #0]
 80096be:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80096c2:	460c      	mov	r4, r1
 80096c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80096c8:	b10a      	cbz	r2, 80096ce <_printf_common+0x26>
 80096ca:	3301      	adds	r3, #1
 80096cc:	6033      	str	r3, [r6, #0]
 80096ce:	6823      	ldr	r3, [r4, #0]
 80096d0:	0699      	lsls	r1, r3, #26
 80096d2:	bf42      	ittt	mi
 80096d4:	6833      	ldrmi	r3, [r6, #0]
 80096d6:	3302      	addmi	r3, #2
 80096d8:	6033      	strmi	r3, [r6, #0]
 80096da:	6825      	ldr	r5, [r4, #0]
 80096dc:	f015 0506 	ands.w	r5, r5, #6
 80096e0:	d106      	bne.n	80096f0 <_printf_common+0x48>
 80096e2:	f104 0a19 	add.w	sl, r4, #25
 80096e6:	68e3      	ldr	r3, [r4, #12]
 80096e8:	6832      	ldr	r2, [r6, #0]
 80096ea:	1a9b      	subs	r3, r3, r2
 80096ec:	42ab      	cmp	r3, r5
 80096ee:	dc2b      	bgt.n	8009748 <_printf_common+0xa0>
 80096f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80096f4:	6822      	ldr	r2, [r4, #0]
 80096f6:	3b00      	subs	r3, #0
 80096f8:	bf18      	it	ne
 80096fa:	2301      	movne	r3, #1
 80096fc:	0692      	lsls	r2, r2, #26
 80096fe:	d430      	bmi.n	8009762 <_printf_common+0xba>
 8009700:	4641      	mov	r1, r8
 8009702:	4638      	mov	r0, r7
 8009704:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009708:	47c8      	blx	r9
 800970a:	3001      	adds	r0, #1
 800970c:	d023      	beq.n	8009756 <_printf_common+0xae>
 800970e:	6823      	ldr	r3, [r4, #0]
 8009710:	6922      	ldr	r2, [r4, #16]
 8009712:	f003 0306 	and.w	r3, r3, #6
 8009716:	2b04      	cmp	r3, #4
 8009718:	bf14      	ite	ne
 800971a:	2500      	movne	r5, #0
 800971c:	6833      	ldreq	r3, [r6, #0]
 800971e:	f04f 0600 	mov.w	r6, #0
 8009722:	bf08      	it	eq
 8009724:	68e5      	ldreq	r5, [r4, #12]
 8009726:	f104 041a 	add.w	r4, r4, #26
 800972a:	bf08      	it	eq
 800972c:	1aed      	subeq	r5, r5, r3
 800972e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009732:	bf08      	it	eq
 8009734:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009738:	4293      	cmp	r3, r2
 800973a:	bfc4      	itt	gt
 800973c:	1a9b      	subgt	r3, r3, r2
 800973e:	18ed      	addgt	r5, r5, r3
 8009740:	42b5      	cmp	r5, r6
 8009742:	d11a      	bne.n	800977a <_printf_common+0xd2>
 8009744:	2000      	movs	r0, #0
 8009746:	e008      	b.n	800975a <_printf_common+0xb2>
 8009748:	2301      	movs	r3, #1
 800974a:	4652      	mov	r2, sl
 800974c:	4641      	mov	r1, r8
 800974e:	4638      	mov	r0, r7
 8009750:	47c8      	blx	r9
 8009752:	3001      	adds	r0, #1
 8009754:	d103      	bne.n	800975e <_printf_common+0xb6>
 8009756:	f04f 30ff 	mov.w	r0, #4294967295
 800975a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800975e:	3501      	adds	r5, #1
 8009760:	e7c1      	b.n	80096e6 <_printf_common+0x3e>
 8009762:	2030      	movs	r0, #48	@ 0x30
 8009764:	18e1      	adds	r1, r4, r3
 8009766:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800976a:	1c5a      	adds	r2, r3, #1
 800976c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009770:	4422      	add	r2, r4
 8009772:	3302      	adds	r3, #2
 8009774:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009778:	e7c2      	b.n	8009700 <_printf_common+0x58>
 800977a:	2301      	movs	r3, #1
 800977c:	4622      	mov	r2, r4
 800977e:	4641      	mov	r1, r8
 8009780:	4638      	mov	r0, r7
 8009782:	47c8      	blx	r9
 8009784:	3001      	adds	r0, #1
 8009786:	d0e6      	beq.n	8009756 <_printf_common+0xae>
 8009788:	3601      	adds	r6, #1
 800978a:	e7d9      	b.n	8009740 <_printf_common+0x98>

0800978c <_printf_i>:
 800978c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009790:	7e0f      	ldrb	r7, [r1, #24]
 8009792:	4691      	mov	r9, r2
 8009794:	2f78      	cmp	r7, #120	@ 0x78
 8009796:	4680      	mov	r8, r0
 8009798:	460c      	mov	r4, r1
 800979a:	469a      	mov	sl, r3
 800979c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800979e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80097a2:	d807      	bhi.n	80097b4 <_printf_i+0x28>
 80097a4:	2f62      	cmp	r7, #98	@ 0x62
 80097a6:	d80a      	bhi.n	80097be <_printf_i+0x32>
 80097a8:	2f00      	cmp	r7, #0
 80097aa:	f000 80d3 	beq.w	8009954 <_printf_i+0x1c8>
 80097ae:	2f58      	cmp	r7, #88	@ 0x58
 80097b0:	f000 80ba 	beq.w	8009928 <_printf_i+0x19c>
 80097b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80097b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80097bc:	e03a      	b.n	8009834 <_printf_i+0xa8>
 80097be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80097c2:	2b15      	cmp	r3, #21
 80097c4:	d8f6      	bhi.n	80097b4 <_printf_i+0x28>
 80097c6:	a101      	add	r1, pc, #4	@ (adr r1, 80097cc <_printf_i+0x40>)
 80097c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80097cc:	08009825 	.word	0x08009825
 80097d0:	08009839 	.word	0x08009839
 80097d4:	080097b5 	.word	0x080097b5
 80097d8:	080097b5 	.word	0x080097b5
 80097dc:	080097b5 	.word	0x080097b5
 80097e0:	080097b5 	.word	0x080097b5
 80097e4:	08009839 	.word	0x08009839
 80097e8:	080097b5 	.word	0x080097b5
 80097ec:	080097b5 	.word	0x080097b5
 80097f0:	080097b5 	.word	0x080097b5
 80097f4:	080097b5 	.word	0x080097b5
 80097f8:	0800993b 	.word	0x0800993b
 80097fc:	08009863 	.word	0x08009863
 8009800:	080098f5 	.word	0x080098f5
 8009804:	080097b5 	.word	0x080097b5
 8009808:	080097b5 	.word	0x080097b5
 800980c:	0800995d 	.word	0x0800995d
 8009810:	080097b5 	.word	0x080097b5
 8009814:	08009863 	.word	0x08009863
 8009818:	080097b5 	.word	0x080097b5
 800981c:	080097b5 	.word	0x080097b5
 8009820:	080098fd 	.word	0x080098fd
 8009824:	6833      	ldr	r3, [r6, #0]
 8009826:	1d1a      	adds	r2, r3, #4
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	6032      	str	r2, [r6, #0]
 800982c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009830:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009834:	2301      	movs	r3, #1
 8009836:	e09e      	b.n	8009976 <_printf_i+0x1ea>
 8009838:	6833      	ldr	r3, [r6, #0]
 800983a:	6820      	ldr	r0, [r4, #0]
 800983c:	1d19      	adds	r1, r3, #4
 800983e:	6031      	str	r1, [r6, #0]
 8009840:	0606      	lsls	r6, r0, #24
 8009842:	d501      	bpl.n	8009848 <_printf_i+0xbc>
 8009844:	681d      	ldr	r5, [r3, #0]
 8009846:	e003      	b.n	8009850 <_printf_i+0xc4>
 8009848:	0645      	lsls	r5, r0, #25
 800984a:	d5fb      	bpl.n	8009844 <_printf_i+0xb8>
 800984c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009850:	2d00      	cmp	r5, #0
 8009852:	da03      	bge.n	800985c <_printf_i+0xd0>
 8009854:	232d      	movs	r3, #45	@ 0x2d
 8009856:	426d      	negs	r5, r5
 8009858:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800985c:	230a      	movs	r3, #10
 800985e:	4859      	ldr	r0, [pc, #356]	@ (80099c4 <_printf_i+0x238>)
 8009860:	e011      	b.n	8009886 <_printf_i+0xfa>
 8009862:	6821      	ldr	r1, [r4, #0]
 8009864:	6833      	ldr	r3, [r6, #0]
 8009866:	0608      	lsls	r0, r1, #24
 8009868:	f853 5b04 	ldr.w	r5, [r3], #4
 800986c:	d402      	bmi.n	8009874 <_printf_i+0xe8>
 800986e:	0649      	lsls	r1, r1, #25
 8009870:	bf48      	it	mi
 8009872:	b2ad      	uxthmi	r5, r5
 8009874:	2f6f      	cmp	r7, #111	@ 0x6f
 8009876:	6033      	str	r3, [r6, #0]
 8009878:	bf14      	ite	ne
 800987a:	230a      	movne	r3, #10
 800987c:	2308      	moveq	r3, #8
 800987e:	4851      	ldr	r0, [pc, #324]	@ (80099c4 <_printf_i+0x238>)
 8009880:	2100      	movs	r1, #0
 8009882:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009886:	6866      	ldr	r6, [r4, #4]
 8009888:	2e00      	cmp	r6, #0
 800988a:	bfa8      	it	ge
 800988c:	6821      	ldrge	r1, [r4, #0]
 800988e:	60a6      	str	r6, [r4, #8]
 8009890:	bfa4      	itt	ge
 8009892:	f021 0104 	bicge.w	r1, r1, #4
 8009896:	6021      	strge	r1, [r4, #0]
 8009898:	b90d      	cbnz	r5, 800989e <_printf_i+0x112>
 800989a:	2e00      	cmp	r6, #0
 800989c:	d04b      	beq.n	8009936 <_printf_i+0x1aa>
 800989e:	4616      	mov	r6, r2
 80098a0:	fbb5 f1f3 	udiv	r1, r5, r3
 80098a4:	fb03 5711 	mls	r7, r3, r1, r5
 80098a8:	5dc7      	ldrb	r7, [r0, r7]
 80098aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80098ae:	462f      	mov	r7, r5
 80098b0:	42bb      	cmp	r3, r7
 80098b2:	460d      	mov	r5, r1
 80098b4:	d9f4      	bls.n	80098a0 <_printf_i+0x114>
 80098b6:	2b08      	cmp	r3, #8
 80098b8:	d10b      	bne.n	80098d2 <_printf_i+0x146>
 80098ba:	6823      	ldr	r3, [r4, #0]
 80098bc:	07df      	lsls	r7, r3, #31
 80098be:	d508      	bpl.n	80098d2 <_printf_i+0x146>
 80098c0:	6923      	ldr	r3, [r4, #16]
 80098c2:	6861      	ldr	r1, [r4, #4]
 80098c4:	4299      	cmp	r1, r3
 80098c6:	bfde      	ittt	le
 80098c8:	2330      	movle	r3, #48	@ 0x30
 80098ca:	f806 3c01 	strble.w	r3, [r6, #-1]
 80098ce:	f106 36ff 	addle.w	r6, r6, #4294967295
 80098d2:	1b92      	subs	r2, r2, r6
 80098d4:	6122      	str	r2, [r4, #16]
 80098d6:	464b      	mov	r3, r9
 80098d8:	4621      	mov	r1, r4
 80098da:	4640      	mov	r0, r8
 80098dc:	f8cd a000 	str.w	sl, [sp]
 80098e0:	aa03      	add	r2, sp, #12
 80098e2:	f7ff fee1 	bl	80096a8 <_printf_common>
 80098e6:	3001      	adds	r0, #1
 80098e8:	d14a      	bne.n	8009980 <_printf_i+0x1f4>
 80098ea:	f04f 30ff 	mov.w	r0, #4294967295
 80098ee:	b004      	add	sp, #16
 80098f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098f4:	6823      	ldr	r3, [r4, #0]
 80098f6:	f043 0320 	orr.w	r3, r3, #32
 80098fa:	6023      	str	r3, [r4, #0]
 80098fc:	2778      	movs	r7, #120	@ 0x78
 80098fe:	4832      	ldr	r0, [pc, #200]	@ (80099c8 <_printf_i+0x23c>)
 8009900:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009904:	6823      	ldr	r3, [r4, #0]
 8009906:	6831      	ldr	r1, [r6, #0]
 8009908:	061f      	lsls	r7, r3, #24
 800990a:	f851 5b04 	ldr.w	r5, [r1], #4
 800990e:	d402      	bmi.n	8009916 <_printf_i+0x18a>
 8009910:	065f      	lsls	r7, r3, #25
 8009912:	bf48      	it	mi
 8009914:	b2ad      	uxthmi	r5, r5
 8009916:	6031      	str	r1, [r6, #0]
 8009918:	07d9      	lsls	r1, r3, #31
 800991a:	bf44      	itt	mi
 800991c:	f043 0320 	orrmi.w	r3, r3, #32
 8009920:	6023      	strmi	r3, [r4, #0]
 8009922:	b11d      	cbz	r5, 800992c <_printf_i+0x1a0>
 8009924:	2310      	movs	r3, #16
 8009926:	e7ab      	b.n	8009880 <_printf_i+0xf4>
 8009928:	4826      	ldr	r0, [pc, #152]	@ (80099c4 <_printf_i+0x238>)
 800992a:	e7e9      	b.n	8009900 <_printf_i+0x174>
 800992c:	6823      	ldr	r3, [r4, #0]
 800992e:	f023 0320 	bic.w	r3, r3, #32
 8009932:	6023      	str	r3, [r4, #0]
 8009934:	e7f6      	b.n	8009924 <_printf_i+0x198>
 8009936:	4616      	mov	r6, r2
 8009938:	e7bd      	b.n	80098b6 <_printf_i+0x12a>
 800993a:	6833      	ldr	r3, [r6, #0]
 800993c:	6825      	ldr	r5, [r4, #0]
 800993e:	1d18      	adds	r0, r3, #4
 8009940:	6961      	ldr	r1, [r4, #20]
 8009942:	6030      	str	r0, [r6, #0]
 8009944:	062e      	lsls	r6, r5, #24
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	d501      	bpl.n	800994e <_printf_i+0x1c2>
 800994a:	6019      	str	r1, [r3, #0]
 800994c:	e002      	b.n	8009954 <_printf_i+0x1c8>
 800994e:	0668      	lsls	r0, r5, #25
 8009950:	d5fb      	bpl.n	800994a <_printf_i+0x1be>
 8009952:	8019      	strh	r1, [r3, #0]
 8009954:	2300      	movs	r3, #0
 8009956:	4616      	mov	r6, r2
 8009958:	6123      	str	r3, [r4, #16]
 800995a:	e7bc      	b.n	80098d6 <_printf_i+0x14a>
 800995c:	6833      	ldr	r3, [r6, #0]
 800995e:	2100      	movs	r1, #0
 8009960:	1d1a      	adds	r2, r3, #4
 8009962:	6032      	str	r2, [r6, #0]
 8009964:	681e      	ldr	r6, [r3, #0]
 8009966:	6862      	ldr	r2, [r4, #4]
 8009968:	4630      	mov	r0, r6
 800996a:	f000 fa82 	bl	8009e72 <memchr>
 800996e:	b108      	cbz	r0, 8009974 <_printf_i+0x1e8>
 8009970:	1b80      	subs	r0, r0, r6
 8009972:	6060      	str	r0, [r4, #4]
 8009974:	6863      	ldr	r3, [r4, #4]
 8009976:	6123      	str	r3, [r4, #16]
 8009978:	2300      	movs	r3, #0
 800997a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800997e:	e7aa      	b.n	80098d6 <_printf_i+0x14a>
 8009980:	4632      	mov	r2, r6
 8009982:	4649      	mov	r1, r9
 8009984:	4640      	mov	r0, r8
 8009986:	6923      	ldr	r3, [r4, #16]
 8009988:	47d0      	blx	sl
 800998a:	3001      	adds	r0, #1
 800998c:	d0ad      	beq.n	80098ea <_printf_i+0x15e>
 800998e:	6823      	ldr	r3, [r4, #0]
 8009990:	079b      	lsls	r3, r3, #30
 8009992:	d413      	bmi.n	80099bc <_printf_i+0x230>
 8009994:	68e0      	ldr	r0, [r4, #12]
 8009996:	9b03      	ldr	r3, [sp, #12]
 8009998:	4298      	cmp	r0, r3
 800999a:	bfb8      	it	lt
 800999c:	4618      	movlt	r0, r3
 800999e:	e7a6      	b.n	80098ee <_printf_i+0x162>
 80099a0:	2301      	movs	r3, #1
 80099a2:	4632      	mov	r2, r6
 80099a4:	4649      	mov	r1, r9
 80099a6:	4640      	mov	r0, r8
 80099a8:	47d0      	blx	sl
 80099aa:	3001      	adds	r0, #1
 80099ac:	d09d      	beq.n	80098ea <_printf_i+0x15e>
 80099ae:	3501      	adds	r5, #1
 80099b0:	68e3      	ldr	r3, [r4, #12]
 80099b2:	9903      	ldr	r1, [sp, #12]
 80099b4:	1a5b      	subs	r3, r3, r1
 80099b6:	42ab      	cmp	r3, r5
 80099b8:	dcf2      	bgt.n	80099a0 <_printf_i+0x214>
 80099ba:	e7eb      	b.n	8009994 <_printf_i+0x208>
 80099bc:	2500      	movs	r5, #0
 80099be:	f104 0619 	add.w	r6, r4, #25
 80099c2:	e7f5      	b.n	80099b0 <_printf_i+0x224>
 80099c4:	0800ca3b 	.word	0x0800ca3b
 80099c8:	0800ca4c 	.word	0x0800ca4c

080099cc <std>:
 80099cc:	2300      	movs	r3, #0
 80099ce:	b510      	push	{r4, lr}
 80099d0:	4604      	mov	r4, r0
 80099d2:	e9c0 3300 	strd	r3, r3, [r0]
 80099d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80099da:	6083      	str	r3, [r0, #8]
 80099dc:	8181      	strh	r1, [r0, #12]
 80099de:	6643      	str	r3, [r0, #100]	@ 0x64
 80099e0:	81c2      	strh	r2, [r0, #14]
 80099e2:	6183      	str	r3, [r0, #24]
 80099e4:	4619      	mov	r1, r3
 80099e6:	2208      	movs	r2, #8
 80099e8:	305c      	adds	r0, #92	@ 0x5c
 80099ea:	f000 f95a 	bl	8009ca2 <memset>
 80099ee:	4b0d      	ldr	r3, [pc, #52]	@ (8009a24 <std+0x58>)
 80099f0:	6224      	str	r4, [r4, #32]
 80099f2:	6263      	str	r3, [r4, #36]	@ 0x24
 80099f4:	4b0c      	ldr	r3, [pc, #48]	@ (8009a28 <std+0x5c>)
 80099f6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80099f8:	4b0c      	ldr	r3, [pc, #48]	@ (8009a2c <std+0x60>)
 80099fa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80099fc:	4b0c      	ldr	r3, [pc, #48]	@ (8009a30 <std+0x64>)
 80099fe:	6323      	str	r3, [r4, #48]	@ 0x30
 8009a00:	4b0c      	ldr	r3, [pc, #48]	@ (8009a34 <std+0x68>)
 8009a02:	429c      	cmp	r4, r3
 8009a04:	d006      	beq.n	8009a14 <std+0x48>
 8009a06:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009a0a:	4294      	cmp	r4, r2
 8009a0c:	d002      	beq.n	8009a14 <std+0x48>
 8009a0e:	33d0      	adds	r3, #208	@ 0xd0
 8009a10:	429c      	cmp	r4, r3
 8009a12:	d105      	bne.n	8009a20 <std+0x54>
 8009a14:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a1c:	f000 ba26 	b.w	8009e6c <__retarget_lock_init_recursive>
 8009a20:	bd10      	pop	{r4, pc}
 8009a22:	bf00      	nop
 8009a24:	08009be5 	.word	0x08009be5
 8009a28:	08009c0b 	.word	0x08009c0b
 8009a2c:	08009c43 	.word	0x08009c43
 8009a30:	08009c67 	.word	0x08009c67
 8009a34:	20004858 	.word	0x20004858

08009a38 <stdio_exit_handler>:
 8009a38:	4a02      	ldr	r2, [pc, #8]	@ (8009a44 <stdio_exit_handler+0xc>)
 8009a3a:	4903      	ldr	r1, [pc, #12]	@ (8009a48 <stdio_exit_handler+0x10>)
 8009a3c:	4803      	ldr	r0, [pc, #12]	@ (8009a4c <stdio_exit_handler+0x14>)
 8009a3e:	f000 b869 	b.w	8009b14 <_fwalk_sglue>
 8009a42:	bf00      	nop
 8009a44:	2000012c 	.word	0x2000012c
 8009a48:	0800be29 	.word	0x0800be29
 8009a4c:	2000013c 	.word	0x2000013c

08009a50 <cleanup_stdio>:
 8009a50:	6841      	ldr	r1, [r0, #4]
 8009a52:	4b0c      	ldr	r3, [pc, #48]	@ (8009a84 <cleanup_stdio+0x34>)
 8009a54:	b510      	push	{r4, lr}
 8009a56:	4299      	cmp	r1, r3
 8009a58:	4604      	mov	r4, r0
 8009a5a:	d001      	beq.n	8009a60 <cleanup_stdio+0x10>
 8009a5c:	f002 f9e4 	bl	800be28 <_fflush_r>
 8009a60:	68a1      	ldr	r1, [r4, #8]
 8009a62:	4b09      	ldr	r3, [pc, #36]	@ (8009a88 <cleanup_stdio+0x38>)
 8009a64:	4299      	cmp	r1, r3
 8009a66:	d002      	beq.n	8009a6e <cleanup_stdio+0x1e>
 8009a68:	4620      	mov	r0, r4
 8009a6a:	f002 f9dd 	bl	800be28 <_fflush_r>
 8009a6e:	68e1      	ldr	r1, [r4, #12]
 8009a70:	4b06      	ldr	r3, [pc, #24]	@ (8009a8c <cleanup_stdio+0x3c>)
 8009a72:	4299      	cmp	r1, r3
 8009a74:	d004      	beq.n	8009a80 <cleanup_stdio+0x30>
 8009a76:	4620      	mov	r0, r4
 8009a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a7c:	f002 b9d4 	b.w	800be28 <_fflush_r>
 8009a80:	bd10      	pop	{r4, pc}
 8009a82:	bf00      	nop
 8009a84:	20004858 	.word	0x20004858
 8009a88:	200048c0 	.word	0x200048c0
 8009a8c:	20004928 	.word	0x20004928

08009a90 <global_stdio_init.part.0>:
 8009a90:	b510      	push	{r4, lr}
 8009a92:	4b0b      	ldr	r3, [pc, #44]	@ (8009ac0 <global_stdio_init.part.0+0x30>)
 8009a94:	4c0b      	ldr	r4, [pc, #44]	@ (8009ac4 <global_stdio_init.part.0+0x34>)
 8009a96:	4a0c      	ldr	r2, [pc, #48]	@ (8009ac8 <global_stdio_init.part.0+0x38>)
 8009a98:	4620      	mov	r0, r4
 8009a9a:	601a      	str	r2, [r3, #0]
 8009a9c:	2104      	movs	r1, #4
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	f7ff ff94 	bl	80099cc <std>
 8009aa4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	2109      	movs	r1, #9
 8009aac:	f7ff ff8e 	bl	80099cc <std>
 8009ab0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009ab4:	2202      	movs	r2, #2
 8009ab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009aba:	2112      	movs	r1, #18
 8009abc:	f7ff bf86 	b.w	80099cc <std>
 8009ac0:	20004990 	.word	0x20004990
 8009ac4:	20004858 	.word	0x20004858
 8009ac8:	08009a39 	.word	0x08009a39

08009acc <__sfp_lock_acquire>:
 8009acc:	4801      	ldr	r0, [pc, #4]	@ (8009ad4 <__sfp_lock_acquire+0x8>)
 8009ace:	f000 b9ce 	b.w	8009e6e <__retarget_lock_acquire_recursive>
 8009ad2:	bf00      	nop
 8009ad4:	20004999 	.word	0x20004999

08009ad8 <__sfp_lock_release>:
 8009ad8:	4801      	ldr	r0, [pc, #4]	@ (8009ae0 <__sfp_lock_release+0x8>)
 8009ada:	f000 b9c9 	b.w	8009e70 <__retarget_lock_release_recursive>
 8009ade:	bf00      	nop
 8009ae0:	20004999 	.word	0x20004999

08009ae4 <__sinit>:
 8009ae4:	b510      	push	{r4, lr}
 8009ae6:	4604      	mov	r4, r0
 8009ae8:	f7ff fff0 	bl	8009acc <__sfp_lock_acquire>
 8009aec:	6a23      	ldr	r3, [r4, #32]
 8009aee:	b11b      	cbz	r3, 8009af8 <__sinit+0x14>
 8009af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009af4:	f7ff bff0 	b.w	8009ad8 <__sfp_lock_release>
 8009af8:	4b04      	ldr	r3, [pc, #16]	@ (8009b0c <__sinit+0x28>)
 8009afa:	6223      	str	r3, [r4, #32]
 8009afc:	4b04      	ldr	r3, [pc, #16]	@ (8009b10 <__sinit+0x2c>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d1f5      	bne.n	8009af0 <__sinit+0xc>
 8009b04:	f7ff ffc4 	bl	8009a90 <global_stdio_init.part.0>
 8009b08:	e7f2      	b.n	8009af0 <__sinit+0xc>
 8009b0a:	bf00      	nop
 8009b0c:	08009a51 	.word	0x08009a51
 8009b10:	20004990 	.word	0x20004990

08009b14 <_fwalk_sglue>:
 8009b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b18:	4607      	mov	r7, r0
 8009b1a:	4688      	mov	r8, r1
 8009b1c:	4614      	mov	r4, r2
 8009b1e:	2600      	movs	r6, #0
 8009b20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b24:	f1b9 0901 	subs.w	r9, r9, #1
 8009b28:	d505      	bpl.n	8009b36 <_fwalk_sglue+0x22>
 8009b2a:	6824      	ldr	r4, [r4, #0]
 8009b2c:	2c00      	cmp	r4, #0
 8009b2e:	d1f7      	bne.n	8009b20 <_fwalk_sglue+0xc>
 8009b30:	4630      	mov	r0, r6
 8009b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b36:	89ab      	ldrh	r3, [r5, #12]
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d907      	bls.n	8009b4c <_fwalk_sglue+0x38>
 8009b3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b40:	3301      	adds	r3, #1
 8009b42:	d003      	beq.n	8009b4c <_fwalk_sglue+0x38>
 8009b44:	4629      	mov	r1, r5
 8009b46:	4638      	mov	r0, r7
 8009b48:	47c0      	blx	r8
 8009b4a:	4306      	orrs	r6, r0
 8009b4c:	3568      	adds	r5, #104	@ 0x68
 8009b4e:	e7e9      	b.n	8009b24 <_fwalk_sglue+0x10>

08009b50 <siprintf>:
 8009b50:	b40e      	push	{r1, r2, r3}
 8009b52:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009b56:	b500      	push	{lr}
 8009b58:	b09c      	sub	sp, #112	@ 0x70
 8009b5a:	ab1d      	add	r3, sp, #116	@ 0x74
 8009b5c:	9002      	str	r0, [sp, #8]
 8009b5e:	9006      	str	r0, [sp, #24]
 8009b60:	9107      	str	r1, [sp, #28]
 8009b62:	9104      	str	r1, [sp, #16]
 8009b64:	4808      	ldr	r0, [pc, #32]	@ (8009b88 <siprintf+0x38>)
 8009b66:	4909      	ldr	r1, [pc, #36]	@ (8009b8c <siprintf+0x3c>)
 8009b68:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b6c:	9105      	str	r1, [sp, #20]
 8009b6e:	6800      	ldr	r0, [r0, #0]
 8009b70:	a902      	add	r1, sp, #8
 8009b72:	9301      	str	r3, [sp, #4]
 8009b74:	f001 fcc6 	bl	800b504 <_svfiprintf_r>
 8009b78:	2200      	movs	r2, #0
 8009b7a:	9b02      	ldr	r3, [sp, #8]
 8009b7c:	701a      	strb	r2, [r3, #0]
 8009b7e:	b01c      	add	sp, #112	@ 0x70
 8009b80:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b84:	b003      	add	sp, #12
 8009b86:	4770      	bx	lr
 8009b88:	20000138 	.word	0x20000138
 8009b8c:	ffff0208 	.word	0xffff0208

08009b90 <siscanf>:
 8009b90:	b40e      	push	{r1, r2, r3}
 8009b92:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8009b96:	b530      	push	{r4, r5, lr}
 8009b98:	b09c      	sub	sp, #112	@ 0x70
 8009b9a:	ac1f      	add	r4, sp, #124	@ 0x7c
 8009b9c:	f854 5b04 	ldr.w	r5, [r4], #4
 8009ba0:	f8ad 2014 	strh.w	r2, [sp, #20]
 8009ba4:	9002      	str	r0, [sp, #8]
 8009ba6:	9006      	str	r0, [sp, #24]
 8009ba8:	f7f6 fad2 	bl	8000150 <strlen>
 8009bac:	4b0b      	ldr	r3, [pc, #44]	@ (8009bdc <siscanf+0x4c>)
 8009bae:	9003      	str	r0, [sp, #12]
 8009bb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009bb6:	9314      	str	r3, [sp, #80]	@ 0x50
 8009bb8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009bbc:	9007      	str	r0, [sp, #28]
 8009bbe:	4808      	ldr	r0, [pc, #32]	@ (8009be0 <siscanf+0x50>)
 8009bc0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009bc4:	462a      	mov	r2, r5
 8009bc6:	4623      	mov	r3, r4
 8009bc8:	a902      	add	r1, sp, #8
 8009bca:	6800      	ldr	r0, [r0, #0]
 8009bcc:	9401      	str	r4, [sp, #4]
 8009bce:	f001 fded 	bl	800b7ac <__ssvfiscanf_r>
 8009bd2:	b01c      	add	sp, #112	@ 0x70
 8009bd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009bd8:	b003      	add	sp, #12
 8009bda:	4770      	bx	lr
 8009bdc:	08009c07 	.word	0x08009c07
 8009be0:	20000138 	.word	0x20000138

08009be4 <__sread>:
 8009be4:	b510      	push	{r4, lr}
 8009be6:	460c      	mov	r4, r1
 8009be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bec:	f000 f8f0 	bl	8009dd0 <_read_r>
 8009bf0:	2800      	cmp	r0, #0
 8009bf2:	bfab      	itete	ge
 8009bf4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009bf6:	89a3      	ldrhlt	r3, [r4, #12]
 8009bf8:	181b      	addge	r3, r3, r0
 8009bfa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009bfe:	bfac      	ite	ge
 8009c00:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009c02:	81a3      	strhlt	r3, [r4, #12]
 8009c04:	bd10      	pop	{r4, pc}

08009c06 <__seofread>:
 8009c06:	2000      	movs	r0, #0
 8009c08:	4770      	bx	lr

08009c0a <__swrite>:
 8009c0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c0e:	461f      	mov	r7, r3
 8009c10:	898b      	ldrh	r3, [r1, #12]
 8009c12:	4605      	mov	r5, r0
 8009c14:	05db      	lsls	r3, r3, #23
 8009c16:	460c      	mov	r4, r1
 8009c18:	4616      	mov	r6, r2
 8009c1a:	d505      	bpl.n	8009c28 <__swrite+0x1e>
 8009c1c:	2302      	movs	r3, #2
 8009c1e:	2200      	movs	r2, #0
 8009c20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c24:	f000 f8c2 	bl	8009dac <_lseek_r>
 8009c28:	89a3      	ldrh	r3, [r4, #12]
 8009c2a:	4632      	mov	r2, r6
 8009c2c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009c30:	81a3      	strh	r3, [r4, #12]
 8009c32:	4628      	mov	r0, r5
 8009c34:	463b      	mov	r3, r7
 8009c36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c3e:	f000 b8d9 	b.w	8009df4 <_write_r>

08009c42 <__sseek>:
 8009c42:	b510      	push	{r4, lr}
 8009c44:	460c      	mov	r4, r1
 8009c46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c4a:	f000 f8af 	bl	8009dac <_lseek_r>
 8009c4e:	1c43      	adds	r3, r0, #1
 8009c50:	89a3      	ldrh	r3, [r4, #12]
 8009c52:	bf15      	itete	ne
 8009c54:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009c56:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009c5a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009c5e:	81a3      	strheq	r3, [r4, #12]
 8009c60:	bf18      	it	ne
 8009c62:	81a3      	strhne	r3, [r4, #12]
 8009c64:	bd10      	pop	{r4, pc}

08009c66 <__sclose>:
 8009c66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c6a:	f000 b839 	b.w	8009ce0 <_close_r>

08009c6e <memmove>:
 8009c6e:	4288      	cmp	r0, r1
 8009c70:	b510      	push	{r4, lr}
 8009c72:	eb01 0402 	add.w	r4, r1, r2
 8009c76:	d902      	bls.n	8009c7e <memmove+0x10>
 8009c78:	4284      	cmp	r4, r0
 8009c7a:	4623      	mov	r3, r4
 8009c7c:	d807      	bhi.n	8009c8e <memmove+0x20>
 8009c7e:	1e43      	subs	r3, r0, #1
 8009c80:	42a1      	cmp	r1, r4
 8009c82:	d008      	beq.n	8009c96 <memmove+0x28>
 8009c84:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c88:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c8c:	e7f8      	b.n	8009c80 <memmove+0x12>
 8009c8e:	4601      	mov	r1, r0
 8009c90:	4402      	add	r2, r0
 8009c92:	428a      	cmp	r2, r1
 8009c94:	d100      	bne.n	8009c98 <memmove+0x2a>
 8009c96:	bd10      	pop	{r4, pc}
 8009c98:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c9c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009ca0:	e7f7      	b.n	8009c92 <memmove+0x24>

08009ca2 <memset>:
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	4402      	add	r2, r0
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d100      	bne.n	8009cac <memset+0xa>
 8009caa:	4770      	bx	lr
 8009cac:	f803 1b01 	strb.w	r1, [r3], #1
 8009cb0:	e7f9      	b.n	8009ca6 <memset+0x4>

08009cb2 <strncpy>:
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	b510      	push	{r4, lr}
 8009cb6:	3901      	subs	r1, #1
 8009cb8:	b132      	cbz	r2, 8009cc8 <strncpy+0x16>
 8009cba:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009cbe:	3a01      	subs	r2, #1
 8009cc0:	f803 4b01 	strb.w	r4, [r3], #1
 8009cc4:	2c00      	cmp	r4, #0
 8009cc6:	d1f7      	bne.n	8009cb8 <strncpy+0x6>
 8009cc8:	2100      	movs	r1, #0
 8009cca:	441a      	add	r2, r3
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d100      	bne.n	8009cd2 <strncpy+0x20>
 8009cd0:	bd10      	pop	{r4, pc}
 8009cd2:	f803 1b01 	strb.w	r1, [r3], #1
 8009cd6:	e7f9      	b.n	8009ccc <strncpy+0x1a>

08009cd8 <_localeconv_r>:
 8009cd8:	4800      	ldr	r0, [pc, #0]	@ (8009cdc <_localeconv_r+0x4>)
 8009cda:	4770      	bx	lr
 8009cdc:	20000278 	.word	0x20000278

08009ce0 <_close_r>:
 8009ce0:	b538      	push	{r3, r4, r5, lr}
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	4d05      	ldr	r5, [pc, #20]	@ (8009cfc <_close_r+0x1c>)
 8009ce6:	4604      	mov	r4, r0
 8009ce8:	4608      	mov	r0, r1
 8009cea:	602b      	str	r3, [r5, #0]
 8009cec:	f7f9 f943 	bl	8002f76 <_close>
 8009cf0:	1c43      	adds	r3, r0, #1
 8009cf2:	d102      	bne.n	8009cfa <_close_r+0x1a>
 8009cf4:	682b      	ldr	r3, [r5, #0]
 8009cf6:	b103      	cbz	r3, 8009cfa <_close_r+0x1a>
 8009cf8:	6023      	str	r3, [r4, #0]
 8009cfa:	bd38      	pop	{r3, r4, r5, pc}
 8009cfc:	20004994 	.word	0x20004994

08009d00 <_reclaim_reent>:
 8009d00:	4b29      	ldr	r3, [pc, #164]	@ (8009da8 <_reclaim_reent+0xa8>)
 8009d02:	b570      	push	{r4, r5, r6, lr}
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4604      	mov	r4, r0
 8009d08:	4283      	cmp	r3, r0
 8009d0a:	d04b      	beq.n	8009da4 <_reclaim_reent+0xa4>
 8009d0c:	69c3      	ldr	r3, [r0, #28]
 8009d0e:	b1ab      	cbz	r3, 8009d3c <_reclaim_reent+0x3c>
 8009d10:	68db      	ldr	r3, [r3, #12]
 8009d12:	b16b      	cbz	r3, 8009d30 <_reclaim_reent+0x30>
 8009d14:	2500      	movs	r5, #0
 8009d16:	69e3      	ldr	r3, [r4, #28]
 8009d18:	68db      	ldr	r3, [r3, #12]
 8009d1a:	5959      	ldr	r1, [r3, r5]
 8009d1c:	2900      	cmp	r1, #0
 8009d1e:	d13b      	bne.n	8009d98 <_reclaim_reent+0x98>
 8009d20:	3504      	adds	r5, #4
 8009d22:	2d80      	cmp	r5, #128	@ 0x80
 8009d24:	d1f7      	bne.n	8009d16 <_reclaim_reent+0x16>
 8009d26:	69e3      	ldr	r3, [r4, #28]
 8009d28:	4620      	mov	r0, r4
 8009d2a:	68d9      	ldr	r1, [r3, #12]
 8009d2c:	f000 ff10 	bl	800ab50 <_free_r>
 8009d30:	69e3      	ldr	r3, [r4, #28]
 8009d32:	6819      	ldr	r1, [r3, #0]
 8009d34:	b111      	cbz	r1, 8009d3c <_reclaim_reent+0x3c>
 8009d36:	4620      	mov	r0, r4
 8009d38:	f000 ff0a 	bl	800ab50 <_free_r>
 8009d3c:	6961      	ldr	r1, [r4, #20]
 8009d3e:	b111      	cbz	r1, 8009d46 <_reclaim_reent+0x46>
 8009d40:	4620      	mov	r0, r4
 8009d42:	f000 ff05 	bl	800ab50 <_free_r>
 8009d46:	69e1      	ldr	r1, [r4, #28]
 8009d48:	b111      	cbz	r1, 8009d50 <_reclaim_reent+0x50>
 8009d4a:	4620      	mov	r0, r4
 8009d4c:	f000 ff00 	bl	800ab50 <_free_r>
 8009d50:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009d52:	b111      	cbz	r1, 8009d5a <_reclaim_reent+0x5a>
 8009d54:	4620      	mov	r0, r4
 8009d56:	f000 fefb 	bl	800ab50 <_free_r>
 8009d5a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d5c:	b111      	cbz	r1, 8009d64 <_reclaim_reent+0x64>
 8009d5e:	4620      	mov	r0, r4
 8009d60:	f000 fef6 	bl	800ab50 <_free_r>
 8009d64:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009d66:	b111      	cbz	r1, 8009d6e <_reclaim_reent+0x6e>
 8009d68:	4620      	mov	r0, r4
 8009d6a:	f000 fef1 	bl	800ab50 <_free_r>
 8009d6e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009d70:	b111      	cbz	r1, 8009d78 <_reclaim_reent+0x78>
 8009d72:	4620      	mov	r0, r4
 8009d74:	f000 feec 	bl	800ab50 <_free_r>
 8009d78:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009d7a:	b111      	cbz	r1, 8009d82 <_reclaim_reent+0x82>
 8009d7c:	4620      	mov	r0, r4
 8009d7e:	f000 fee7 	bl	800ab50 <_free_r>
 8009d82:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009d84:	b111      	cbz	r1, 8009d8c <_reclaim_reent+0x8c>
 8009d86:	4620      	mov	r0, r4
 8009d88:	f000 fee2 	bl	800ab50 <_free_r>
 8009d8c:	6a23      	ldr	r3, [r4, #32]
 8009d8e:	b14b      	cbz	r3, 8009da4 <_reclaim_reent+0xa4>
 8009d90:	4620      	mov	r0, r4
 8009d92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009d96:	4718      	bx	r3
 8009d98:	680e      	ldr	r6, [r1, #0]
 8009d9a:	4620      	mov	r0, r4
 8009d9c:	f000 fed8 	bl	800ab50 <_free_r>
 8009da0:	4631      	mov	r1, r6
 8009da2:	e7bb      	b.n	8009d1c <_reclaim_reent+0x1c>
 8009da4:	bd70      	pop	{r4, r5, r6, pc}
 8009da6:	bf00      	nop
 8009da8:	20000138 	.word	0x20000138

08009dac <_lseek_r>:
 8009dac:	b538      	push	{r3, r4, r5, lr}
 8009dae:	4604      	mov	r4, r0
 8009db0:	4608      	mov	r0, r1
 8009db2:	4611      	mov	r1, r2
 8009db4:	2200      	movs	r2, #0
 8009db6:	4d05      	ldr	r5, [pc, #20]	@ (8009dcc <_lseek_r+0x20>)
 8009db8:	602a      	str	r2, [r5, #0]
 8009dba:	461a      	mov	r2, r3
 8009dbc:	f7f9 f8ff 	bl	8002fbe <_lseek>
 8009dc0:	1c43      	adds	r3, r0, #1
 8009dc2:	d102      	bne.n	8009dca <_lseek_r+0x1e>
 8009dc4:	682b      	ldr	r3, [r5, #0]
 8009dc6:	b103      	cbz	r3, 8009dca <_lseek_r+0x1e>
 8009dc8:	6023      	str	r3, [r4, #0]
 8009dca:	bd38      	pop	{r3, r4, r5, pc}
 8009dcc:	20004994 	.word	0x20004994

08009dd0 <_read_r>:
 8009dd0:	b538      	push	{r3, r4, r5, lr}
 8009dd2:	4604      	mov	r4, r0
 8009dd4:	4608      	mov	r0, r1
 8009dd6:	4611      	mov	r1, r2
 8009dd8:	2200      	movs	r2, #0
 8009dda:	4d05      	ldr	r5, [pc, #20]	@ (8009df0 <_read_r+0x20>)
 8009ddc:	602a      	str	r2, [r5, #0]
 8009dde:	461a      	mov	r2, r3
 8009de0:	f7f9 f890 	bl	8002f04 <_read>
 8009de4:	1c43      	adds	r3, r0, #1
 8009de6:	d102      	bne.n	8009dee <_read_r+0x1e>
 8009de8:	682b      	ldr	r3, [r5, #0]
 8009dea:	b103      	cbz	r3, 8009dee <_read_r+0x1e>
 8009dec:	6023      	str	r3, [r4, #0]
 8009dee:	bd38      	pop	{r3, r4, r5, pc}
 8009df0:	20004994 	.word	0x20004994

08009df4 <_write_r>:
 8009df4:	b538      	push	{r3, r4, r5, lr}
 8009df6:	4604      	mov	r4, r0
 8009df8:	4608      	mov	r0, r1
 8009dfa:	4611      	mov	r1, r2
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	4d05      	ldr	r5, [pc, #20]	@ (8009e14 <_write_r+0x20>)
 8009e00:	602a      	str	r2, [r5, #0]
 8009e02:	461a      	mov	r2, r3
 8009e04:	f7f9 f89b 	bl	8002f3e <_write>
 8009e08:	1c43      	adds	r3, r0, #1
 8009e0a:	d102      	bne.n	8009e12 <_write_r+0x1e>
 8009e0c:	682b      	ldr	r3, [r5, #0]
 8009e0e:	b103      	cbz	r3, 8009e12 <_write_r+0x1e>
 8009e10:	6023      	str	r3, [r4, #0]
 8009e12:	bd38      	pop	{r3, r4, r5, pc}
 8009e14:	20004994 	.word	0x20004994

08009e18 <__errno>:
 8009e18:	4b01      	ldr	r3, [pc, #4]	@ (8009e20 <__errno+0x8>)
 8009e1a:	6818      	ldr	r0, [r3, #0]
 8009e1c:	4770      	bx	lr
 8009e1e:	bf00      	nop
 8009e20:	20000138 	.word	0x20000138

08009e24 <__libc_init_array>:
 8009e24:	b570      	push	{r4, r5, r6, lr}
 8009e26:	2600      	movs	r6, #0
 8009e28:	4d0c      	ldr	r5, [pc, #48]	@ (8009e5c <__libc_init_array+0x38>)
 8009e2a:	4c0d      	ldr	r4, [pc, #52]	@ (8009e60 <__libc_init_array+0x3c>)
 8009e2c:	1b64      	subs	r4, r4, r5
 8009e2e:	10a4      	asrs	r4, r4, #2
 8009e30:	42a6      	cmp	r6, r4
 8009e32:	d109      	bne.n	8009e48 <__libc_init_array+0x24>
 8009e34:	f002 fc4e 	bl	800c6d4 <_init>
 8009e38:	2600      	movs	r6, #0
 8009e3a:	4d0a      	ldr	r5, [pc, #40]	@ (8009e64 <__libc_init_array+0x40>)
 8009e3c:	4c0a      	ldr	r4, [pc, #40]	@ (8009e68 <__libc_init_array+0x44>)
 8009e3e:	1b64      	subs	r4, r4, r5
 8009e40:	10a4      	asrs	r4, r4, #2
 8009e42:	42a6      	cmp	r6, r4
 8009e44:	d105      	bne.n	8009e52 <__libc_init_array+0x2e>
 8009e46:	bd70      	pop	{r4, r5, r6, pc}
 8009e48:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e4c:	4798      	blx	r3
 8009e4e:	3601      	adds	r6, #1
 8009e50:	e7ee      	b.n	8009e30 <__libc_init_array+0xc>
 8009e52:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e56:	4798      	blx	r3
 8009e58:	3601      	adds	r6, #1
 8009e5a:	e7f2      	b.n	8009e42 <__libc_init_array+0x1e>
 8009e5c:	0800ccbc 	.word	0x0800ccbc
 8009e60:	0800ccbc 	.word	0x0800ccbc
 8009e64:	0800ccbc 	.word	0x0800ccbc
 8009e68:	0800ccc0 	.word	0x0800ccc0

08009e6c <__retarget_lock_init_recursive>:
 8009e6c:	4770      	bx	lr

08009e6e <__retarget_lock_acquire_recursive>:
 8009e6e:	4770      	bx	lr

08009e70 <__retarget_lock_release_recursive>:
 8009e70:	4770      	bx	lr

08009e72 <memchr>:
 8009e72:	4603      	mov	r3, r0
 8009e74:	b510      	push	{r4, lr}
 8009e76:	b2c9      	uxtb	r1, r1
 8009e78:	4402      	add	r2, r0
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	d101      	bne.n	8009e84 <memchr+0x12>
 8009e80:	2000      	movs	r0, #0
 8009e82:	e003      	b.n	8009e8c <memchr+0x1a>
 8009e84:	7804      	ldrb	r4, [r0, #0]
 8009e86:	3301      	adds	r3, #1
 8009e88:	428c      	cmp	r4, r1
 8009e8a:	d1f6      	bne.n	8009e7a <memchr+0x8>
 8009e8c:	bd10      	pop	{r4, pc}

08009e8e <memcpy>:
 8009e8e:	440a      	add	r2, r1
 8009e90:	4291      	cmp	r1, r2
 8009e92:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e96:	d100      	bne.n	8009e9a <memcpy+0xc>
 8009e98:	4770      	bx	lr
 8009e9a:	b510      	push	{r4, lr}
 8009e9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ea0:	4291      	cmp	r1, r2
 8009ea2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ea6:	d1f9      	bne.n	8009e9c <memcpy+0xe>
 8009ea8:	bd10      	pop	{r4, pc}

08009eaa <quorem>:
 8009eaa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eae:	6903      	ldr	r3, [r0, #16]
 8009eb0:	690c      	ldr	r4, [r1, #16]
 8009eb2:	4607      	mov	r7, r0
 8009eb4:	42a3      	cmp	r3, r4
 8009eb6:	db7e      	blt.n	8009fb6 <quorem+0x10c>
 8009eb8:	3c01      	subs	r4, #1
 8009eba:	00a3      	lsls	r3, r4, #2
 8009ebc:	f100 0514 	add.w	r5, r0, #20
 8009ec0:	f101 0814 	add.w	r8, r1, #20
 8009ec4:	9300      	str	r3, [sp, #0]
 8009ec6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009eca:	9301      	str	r3, [sp, #4]
 8009ecc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009ed0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ed4:	3301      	adds	r3, #1
 8009ed6:	429a      	cmp	r2, r3
 8009ed8:	fbb2 f6f3 	udiv	r6, r2, r3
 8009edc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009ee0:	d32e      	bcc.n	8009f40 <quorem+0x96>
 8009ee2:	f04f 0a00 	mov.w	sl, #0
 8009ee6:	46c4      	mov	ip, r8
 8009ee8:	46ae      	mov	lr, r5
 8009eea:	46d3      	mov	fp, sl
 8009eec:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009ef0:	b298      	uxth	r0, r3
 8009ef2:	fb06 a000 	mla	r0, r6, r0, sl
 8009ef6:	0c1b      	lsrs	r3, r3, #16
 8009ef8:	0c02      	lsrs	r2, r0, #16
 8009efa:	fb06 2303 	mla	r3, r6, r3, r2
 8009efe:	f8de 2000 	ldr.w	r2, [lr]
 8009f02:	b280      	uxth	r0, r0
 8009f04:	b292      	uxth	r2, r2
 8009f06:	1a12      	subs	r2, r2, r0
 8009f08:	445a      	add	r2, fp
 8009f0a:	f8de 0000 	ldr.w	r0, [lr]
 8009f0e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009f12:	b29b      	uxth	r3, r3
 8009f14:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009f18:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009f1c:	b292      	uxth	r2, r2
 8009f1e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009f22:	45e1      	cmp	r9, ip
 8009f24:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009f28:	f84e 2b04 	str.w	r2, [lr], #4
 8009f2c:	d2de      	bcs.n	8009eec <quorem+0x42>
 8009f2e:	9b00      	ldr	r3, [sp, #0]
 8009f30:	58eb      	ldr	r3, [r5, r3]
 8009f32:	b92b      	cbnz	r3, 8009f40 <quorem+0x96>
 8009f34:	9b01      	ldr	r3, [sp, #4]
 8009f36:	3b04      	subs	r3, #4
 8009f38:	429d      	cmp	r5, r3
 8009f3a:	461a      	mov	r2, r3
 8009f3c:	d32f      	bcc.n	8009f9e <quorem+0xf4>
 8009f3e:	613c      	str	r4, [r7, #16]
 8009f40:	4638      	mov	r0, r7
 8009f42:	f001 f97b 	bl	800b23c <__mcmp>
 8009f46:	2800      	cmp	r0, #0
 8009f48:	db25      	blt.n	8009f96 <quorem+0xec>
 8009f4a:	4629      	mov	r1, r5
 8009f4c:	2000      	movs	r0, #0
 8009f4e:	f858 2b04 	ldr.w	r2, [r8], #4
 8009f52:	f8d1 c000 	ldr.w	ip, [r1]
 8009f56:	fa1f fe82 	uxth.w	lr, r2
 8009f5a:	fa1f f38c 	uxth.w	r3, ip
 8009f5e:	eba3 030e 	sub.w	r3, r3, lr
 8009f62:	4403      	add	r3, r0
 8009f64:	0c12      	lsrs	r2, r2, #16
 8009f66:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009f6a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009f6e:	b29b      	uxth	r3, r3
 8009f70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f74:	45c1      	cmp	r9, r8
 8009f76:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009f7a:	f841 3b04 	str.w	r3, [r1], #4
 8009f7e:	d2e6      	bcs.n	8009f4e <quorem+0xa4>
 8009f80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f84:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f88:	b922      	cbnz	r2, 8009f94 <quorem+0xea>
 8009f8a:	3b04      	subs	r3, #4
 8009f8c:	429d      	cmp	r5, r3
 8009f8e:	461a      	mov	r2, r3
 8009f90:	d30b      	bcc.n	8009faa <quorem+0x100>
 8009f92:	613c      	str	r4, [r7, #16]
 8009f94:	3601      	adds	r6, #1
 8009f96:	4630      	mov	r0, r6
 8009f98:	b003      	add	sp, #12
 8009f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f9e:	6812      	ldr	r2, [r2, #0]
 8009fa0:	3b04      	subs	r3, #4
 8009fa2:	2a00      	cmp	r2, #0
 8009fa4:	d1cb      	bne.n	8009f3e <quorem+0x94>
 8009fa6:	3c01      	subs	r4, #1
 8009fa8:	e7c6      	b.n	8009f38 <quorem+0x8e>
 8009faa:	6812      	ldr	r2, [r2, #0]
 8009fac:	3b04      	subs	r3, #4
 8009fae:	2a00      	cmp	r2, #0
 8009fb0:	d1ef      	bne.n	8009f92 <quorem+0xe8>
 8009fb2:	3c01      	subs	r4, #1
 8009fb4:	e7ea      	b.n	8009f8c <quorem+0xe2>
 8009fb6:	2000      	movs	r0, #0
 8009fb8:	e7ee      	b.n	8009f98 <quorem+0xee>
 8009fba:	0000      	movs	r0, r0
 8009fbc:	0000      	movs	r0, r0
	...

08009fc0 <_dtoa_r>:
 8009fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fc4:	4614      	mov	r4, r2
 8009fc6:	461d      	mov	r5, r3
 8009fc8:	69c7      	ldr	r7, [r0, #28]
 8009fca:	b097      	sub	sp, #92	@ 0x5c
 8009fcc:	4683      	mov	fp, r0
 8009fce:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009fd2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8009fd4:	b97f      	cbnz	r7, 8009ff6 <_dtoa_r+0x36>
 8009fd6:	2010      	movs	r0, #16
 8009fd8:	f000 fe02 	bl	800abe0 <malloc>
 8009fdc:	4602      	mov	r2, r0
 8009fde:	f8cb 001c 	str.w	r0, [fp, #28]
 8009fe2:	b920      	cbnz	r0, 8009fee <_dtoa_r+0x2e>
 8009fe4:	21ef      	movs	r1, #239	@ 0xef
 8009fe6:	4ba8      	ldr	r3, [pc, #672]	@ (800a288 <_dtoa_r+0x2c8>)
 8009fe8:	48a8      	ldr	r0, [pc, #672]	@ (800a28c <_dtoa_r+0x2cc>)
 8009fea:	f001 ffc7 	bl	800bf7c <__assert_func>
 8009fee:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009ff2:	6007      	str	r7, [r0, #0]
 8009ff4:	60c7      	str	r7, [r0, #12]
 8009ff6:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009ffa:	6819      	ldr	r1, [r3, #0]
 8009ffc:	b159      	cbz	r1, 800a016 <_dtoa_r+0x56>
 8009ffe:	685a      	ldr	r2, [r3, #4]
 800a000:	2301      	movs	r3, #1
 800a002:	4093      	lsls	r3, r2
 800a004:	604a      	str	r2, [r1, #4]
 800a006:	608b      	str	r3, [r1, #8]
 800a008:	4658      	mov	r0, fp
 800a00a:	f000 fedf 	bl	800adcc <_Bfree>
 800a00e:	2200      	movs	r2, #0
 800a010:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a014:	601a      	str	r2, [r3, #0]
 800a016:	1e2b      	subs	r3, r5, #0
 800a018:	bfaf      	iteee	ge
 800a01a:	2300      	movge	r3, #0
 800a01c:	2201      	movlt	r2, #1
 800a01e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a022:	9303      	strlt	r3, [sp, #12]
 800a024:	bfa8      	it	ge
 800a026:	6033      	strge	r3, [r6, #0]
 800a028:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a02c:	4b98      	ldr	r3, [pc, #608]	@ (800a290 <_dtoa_r+0x2d0>)
 800a02e:	bfb8      	it	lt
 800a030:	6032      	strlt	r2, [r6, #0]
 800a032:	ea33 0308 	bics.w	r3, r3, r8
 800a036:	d112      	bne.n	800a05e <_dtoa_r+0x9e>
 800a038:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a03c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a03e:	6013      	str	r3, [r2, #0]
 800a040:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a044:	4323      	orrs	r3, r4
 800a046:	f000 8550 	beq.w	800aaea <_dtoa_r+0xb2a>
 800a04a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a04c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800a294 <_dtoa_r+0x2d4>
 800a050:	2b00      	cmp	r3, #0
 800a052:	f000 8552 	beq.w	800aafa <_dtoa_r+0xb3a>
 800a056:	f10a 0303 	add.w	r3, sl, #3
 800a05a:	f000 bd4c 	b.w	800aaf6 <_dtoa_r+0xb36>
 800a05e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a062:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a066:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a06a:	2200      	movs	r2, #0
 800a06c:	2300      	movs	r3, #0
 800a06e:	f7f6 fc9b 	bl	80009a8 <__aeabi_dcmpeq>
 800a072:	4607      	mov	r7, r0
 800a074:	b158      	cbz	r0, 800a08e <_dtoa_r+0xce>
 800a076:	2301      	movs	r3, #1
 800a078:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a07a:	6013      	str	r3, [r2, #0]
 800a07c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a07e:	b113      	cbz	r3, 800a086 <_dtoa_r+0xc6>
 800a080:	4b85      	ldr	r3, [pc, #532]	@ (800a298 <_dtoa_r+0x2d8>)
 800a082:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a084:	6013      	str	r3, [r2, #0]
 800a086:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800a29c <_dtoa_r+0x2dc>
 800a08a:	f000 bd36 	b.w	800aafa <_dtoa_r+0xb3a>
 800a08e:	ab14      	add	r3, sp, #80	@ 0x50
 800a090:	9301      	str	r3, [sp, #4]
 800a092:	ab15      	add	r3, sp, #84	@ 0x54
 800a094:	9300      	str	r3, [sp, #0]
 800a096:	4658      	mov	r0, fp
 800a098:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a09c:	f001 f97e 	bl	800b39c <__d2b>
 800a0a0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800a0a4:	4681      	mov	r9, r0
 800a0a6:	2e00      	cmp	r6, #0
 800a0a8:	d077      	beq.n	800a19a <_dtoa_r+0x1da>
 800a0aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a0ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a0b0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a0b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0b8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a0bc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a0c0:	9712      	str	r7, [sp, #72]	@ 0x48
 800a0c2:	4619      	mov	r1, r3
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	4b76      	ldr	r3, [pc, #472]	@ (800a2a0 <_dtoa_r+0x2e0>)
 800a0c8:	f7f6 f84e 	bl	8000168 <__aeabi_dsub>
 800a0cc:	a368      	add	r3, pc, #416	@ (adr r3, 800a270 <_dtoa_r+0x2b0>)
 800a0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d2:	f7f6 fa01 	bl	80004d8 <__aeabi_dmul>
 800a0d6:	a368      	add	r3, pc, #416	@ (adr r3, 800a278 <_dtoa_r+0x2b8>)
 800a0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0dc:	f7f6 f846 	bl	800016c <__adddf3>
 800a0e0:	4604      	mov	r4, r0
 800a0e2:	4630      	mov	r0, r6
 800a0e4:	460d      	mov	r5, r1
 800a0e6:	f7f6 f98d 	bl	8000404 <__aeabi_i2d>
 800a0ea:	a365      	add	r3, pc, #404	@ (adr r3, 800a280 <_dtoa_r+0x2c0>)
 800a0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f0:	f7f6 f9f2 	bl	80004d8 <__aeabi_dmul>
 800a0f4:	4602      	mov	r2, r0
 800a0f6:	460b      	mov	r3, r1
 800a0f8:	4620      	mov	r0, r4
 800a0fa:	4629      	mov	r1, r5
 800a0fc:	f7f6 f836 	bl	800016c <__adddf3>
 800a100:	4604      	mov	r4, r0
 800a102:	460d      	mov	r5, r1
 800a104:	f7f6 fc98 	bl	8000a38 <__aeabi_d2iz>
 800a108:	2200      	movs	r2, #0
 800a10a:	4607      	mov	r7, r0
 800a10c:	2300      	movs	r3, #0
 800a10e:	4620      	mov	r0, r4
 800a110:	4629      	mov	r1, r5
 800a112:	f7f6 fc53 	bl	80009bc <__aeabi_dcmplt>
 800a116:	b140      	cbz	r0, 800a12a <_dtoa_r+0x16a>
 800a118:	4638      	mov	r0, r7
 800a11a:	f7f6 f973 	bl	8000404 <__aeabi_i2d>
 800a11e:	4622      	mov	r2, r4
 800a120:	462b      	mov	r3, r5
 800a122:	f7f6 fc41 	bl	80009a8 <__aeabi_dcmpeq>
 800a126:	b900      	cbnz	r0, 800a12a <_dtoa_r+0x16a>
 800a128:	3f01      	subs	r7, #1
 800a12a:	2f16      	cmp	r7, #22
 800a12c:	d853      	bhi.n	800a1d6 <_dtoa_r+0x216>
 800a12e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a132:	4b5c      	ldr	r3, [pc, #368]	@ (800a2a4 <_dtoa_r+0x2e4>)
 800a134:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a13c:	f7f6 fc3e 	bl	80009bc <__aeabi_dcmplt>
 800a140:	2800      	cmp	r0, #0
 800a142:	d04a      	beq.n	800a1da <_dtoa_r+0x21a>
 800a144:	2300      	movs	r3, #0
 800a146:	3f01      	subs	r7, #1
 800a148:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a14a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a14c:	1b9b      	subs	r3, r3, r6
 800a14e:	1e5a      	subs	r2, r3, #1
 800a150:	bf46      	itte	mi
 800a152:	f1c3 0801 	rsbmi	r8, r3, #1
 800a156:	2300      	movmi	r3, #0
 800a158:	f04f 0800 	movpl.w	r8, #0
 800a15c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a15e:	bf48      	it	mi
 800a160:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800a162:	2f00      	cmp	r7, #0
 800a164:	db3b      	blt.n	800a1de <_dtoa_r+0x21e>
 800a166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a168:	970e      	str	r7, [sp, #56]	@ 0x38
 800a16a:	443b      	add	r3, r7
 800a16c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a16e:	2300      	movs	r3, #0
 800a170:	930a      	str	r3, [sp, #40]	@ 0x28
 800a172:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a174:	2b09      	cmp	r3, #9
 800a176:	d866      	bhi.n	800a246 <_dtoa_r+0x286>
 800a178:	2b05      	cmp	r3, #5
 800a17a:	bfc4      	itt	gt
 800a17c:	3b04      	subgt	r3, #4
 800a17e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800a180:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a182:	bfc8      	it	gt
 800a184:	2400      	movgt	r4, #0
 800a186:	f1a3 0302 	sub.w	r3, r3, #2
 800a18a:	bfd8      	it	le
 800a18c:	2401      	movle	r4, #1
 800a18e:	2b03      	cmp	r3, #3
 800a190:	d864      	bhi.n	800a25c <_dtoa_r+0x29c>
 800a192:	e8df f003 	tbb	[pc, r3]
 800a196:	382b      	.short	0x382b
 800a198:	5636      	.short	0x5636
 800a19a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a19e:	441e      	add	r6, r3
 800a1a0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a1a4:	2b20      	cmp	r3, #32
 800a1a6:	bfc1      	itttt	gt
 800a1a8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a1ac:	fa08 f803 	lslgt.w	r8, r8, r3
 800a1b0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a1b4:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a1b8:	bfd6      	itet	le
 800a1ba:	f1c3 0320 	rsble	r3, r3, #32
 800a1be:	ea48 0003 	orrgt.w	r0, r8, r3
 800a1c2:	fa04 f003 	lslle.w	r0, r4, r3
 800a1c6:	f7f6 f90d 	bl	80003e4 <__aeabi_ui2d>
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a1d0:	3e01      	subs	r6, #1
 800a1d2:	9212      	str	r2, [sp, #72]	@ 0x48
 800a1d4:	e775      	b.n	800a0c2 <_dtoa_r+0x102>
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	e7b6      	b.n	800a148 <_dtoa_r+0x188>
 800a1da:	900f      	str	r0, [sp, #60]	@ 0x3c
 800a1dc:	e7b5      	b.n	800a14a <_dtoa_r+0x18a>
 800a1de:	427b      	negs	r3, r7
 800a1e0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	eba8 0807 	sub.w	r8, r8, r7
 800a1e8:	930e      	str	r3, [sp, #56]	@ 0x38
 800a1ea:	e7c2      	b.n	800a172 <_dtoa_r+0x1b2>
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a1f0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	dc35      	bgt.n	800a262 <_dtoa_r+0x2a2>
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	461a      	mov	r2, r3
 800a1fa:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800a1fe:	9221      	str	r2, [sp, #132]	@ 0x84
 800a200:	e00b      	b.n	800a21a <_dtoa_r+0x25a>
 800a202:	2301      	movs	r3, #1
 800a204:	e7f3      	b.n	800a1ee <_dtoa_r+0x22e>
 800a206:	2300      	movs	r3, #0
 800a208:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a20a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a20c:	18fb      	adds	r3, r7, r3
 800a20e:	9308      	str	r3, [sp, #32]
 800a210:	3301      	adds	r3, #1
 800a212:	2b01      	cmp	r3, #1
 800a214:	9307      	str	r3, [sp, #28]
 800a216:	bfb8      	it	lt
 800a218:	2301      	movlt	r3, #1
 800a21a:	2100      	movs	r1, #0
 800a21c:	2204      	movs	r2, #4
 800a21e:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a222:	f102 0514 	add.w	r5, r2, #20
 800a226:	429d      	cmp	r5, r3
 800a228:	d91f      	bls.n	800a26a <_dtoa_r+0x2aa>
 800a22a:	6041      	str	r1, [r0, #4]
 800a22c:	4658      	mov	r0, fp
 800a22e:	f000 fd8d 	bl	800ad4c <_Balloc>
 800a232:	4682      	mov	sl, r0
 800a234:	2800      	cmp	r0, #0
 800a236:	d139      	bne.n	800a2ac <_dtoa_r+0x2ec>
 800a238:	4602      	mov	r2, r0
 800a23a:	f240 11af 	movw	r1, #431	@ 0x1af
 800a23e:	4b1a      	ldr	r3, [pc, #104]	@ (800a2a8 <_dtoa_r+0x2e8>)
 800a240:	e6d2      	b.n	8009fe8 <_dtoa_r+0x28>
 800a242:	2301      	movs	r3, #1
 800a244:	e7e0      	b.n	800a208 <_dtoa_r+0x248>
 800a246:	2401      	movs	r4, #1
 800a248:	2300      	movs	r3, #0
 800a24a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a24c:	9320      	str	r3, [sp, #128]	@ 0x80
 800a24e:	f04f 33ff 	mov.w	r3, #4294967295
 800a252:	2200      	movs	r2, #0
 800a254:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800a258:	2312      	movs	r3, #18
 800a25a:	e7d0      	b.n	800a1fe <_dtoa_r+0x23e>
 800a25c:	2301      	movs	r3, #1
 800a25e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a260:	e7f5      	b.n	800a24e <_dtoa_r+0x28e>
 800a262:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a264:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800a268:	e7d7      	b.n	800a21a <_dtoa_r+0x25a>
 800a26a:	3101      	adds	r1, #1
 800a26c:	0052      	lsls	r2, r2, #1
 800a26e:	e7d8      	b.n	800a222 <_dtoa_r+0x262>
 800a270:	636f4361 	.word	0x636f4361
 800a274:	3fd287a7 	.word	0x3fd287a7
 800a278:	8b60c8b3 	.word	0x8b60c8b3
 800a27c:	3fc68a28 	.word	0x3fc68a28
 800a280:	509f79fb 	.word	0x509f79fb
 800a284:	3fd34413 	.word	0x3fd34413
 800a288:	0800ca6a 	.word	0x0800ca6a
 800a28c:	0800ca81 	.word	0x0800ca81
 800a290:	7ff00000 	.word	0x7ff00000
 800a294:	0800ca66 	.word	0x0800ca66
 800a298:	0800cc68 	.word	0x0800cc68
 800a29c:	0800cc67 	.word	0x0800cc67
 800a2a0:	3ff80000 	.word	0x3ff80000
 800a2a4:	0800cb78 	.word	0x0800cb78
 800a2a8:	0800cad9 	.word	0x0800cad9
 800a2ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a2b0:	6018      	str	r0, [r3, #0]
 800a2b2:	9b07      	ldr	r3, [sp, #28]
 800a2b4:	2b0e      	cmp	r3, #14
 800a2b6:	f200 80a4 	bhi.w	800a402 <_dtoa_r+0x442>
 800a2ba:	2c00      	cmp	r4, #0
 800a2bc:	f000 80a1 	beq.w	800a402 <_dtoa_r+0x442>
 800a2c0:	2f00      	cmp	r7, #0
 800a2c2:	dd33      	ble.n	800a32c <_dtoa_r+0x36c>
 800a2c4:	4b86      	ldr	r3, [pc, #536]	@ (800a4e0 <_dtoa_r+0x520>)
 800a2c6:	f007 020f 	and.w	r2, r7, #15
 800a2ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a2ce:	05f8      	lsls	r0, r7, #23
 800a2d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a2d4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a2d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a2dc:	d516      	bpl.n	800a30c <_dtoa_r+0x34c>
 800a2de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a2e2:	4b80      	ldr	r3, [pc, #512]	@ (800a4e4 <_dtoa_r+0x524>)
 800a2e4:	2603      	movs	r6, #3
 800a2e6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a2ea:	f7f6 fa1f 	bl	800072c <__aeabi_ddiv>
 800a2ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2f2:	f004 040f 	and.w	r4, r4, #15
 800a2f6:	4d7b      	ldr	r5, [pc, #492]	@ (800a4e4 <_dtoa_r+0x524>)
 800a2f8:	b954      	cbnz	r4, 800a310 <_dtoa_r+0x350>
 800a2fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a302:	f7f6 fa13 	bl	800072c <__aeabi_ddiv>
 800a306:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a30a:	e028      	b.n	800a35e <_dtoa_r+0x39e>
 800a30c:	2602      	movs	r6, #2
 800a30e:	e7f2      	b.n	800a2f6 <_dtoa_r+0x336>
 800a310:	07e1      	lsls	r1, r4, #31
 800a312:	d508      	bpl.n	800a326 <_dtoa_r+0x366>
 800a314:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a318:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a31c:	f7f6 f8dc 	bl	80004d8 <__aeabi_dmul>
 800a320:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a324:	3601      	adds	r6, #1
 800a326:	1064      	asrs	r4, r4, #1
 800a328:	3508      	adds	r5, #8
 800a32a:	e7e5      	b.n	800a2f8 <_dtoa_r+0x338>
 800a32c:	f000 80d2 	beq.w	800a4d4 <_dtoa_r+0x514>
 800a330:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a334:	427c      	negs	r4, r7
 800a336:	4b6a      	ldr	r3, [pc, #424]	@ (800a4e0 <_dtoa_r+0x520>)
 800a338:	f004 020f 	and.w	r2, r4, #15
 800a33c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a344:	f7f6 f8c8 	bl	80004d8 <__aeabi_dmul>
 800a348:	2602      	movs	r6, #2
 800a34a:	2300      	movs	r3, #0
 800a34c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a350:	4d64      	ldr	r5, [pc, #400]	@ (800a4e4 <_dtoa_r+0x524>)
 800a352:	1124      	asrs	r4, r4, #4
 800a354:	2c00      	cmp	r4, #0
 800a356:	f040 80b2 	bne.w	800a4be <_dtoa_r+0x4fe>
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d1d3      	bne.n	800a306 <_dtoa_r+0x346>
 800a35e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a362:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a364:	2b00      	cmp	r3, #0
 800a366:	f000 80b7 	beq.w	800a4d8 <_dtoa_r+0x518>
 800a36a:	2200      	movs	r2, #0
 800a36c:	4620      	mov	r0, r4
 800a36e:	4629      	mov	r1, r5
 800a370:	4b5d      	ldr	r3, [pc, #372]	@ (800a4e8 <_dtoa_r+0x528>)
 800a372:	f7f6 fb23 	bl	80009bc <__aeabi_dcmplt>
 800a376:	2800      	cmp	r0, #0
 800a378:	f000 80ae 	beq.w	800a4d8 <_dtoa_r+0x518>
 800a37c:	9b07      	ldr	r3, [sp, #28]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	f000 80aa 	beq.w	800a4d8 <_dtoa_r+0x518>
 800a384:	9b08      	ldr	r3, [sp, #32]
 800a386:	2b00      	cmp	r3, #0
 800a388:	dd37      	ble.n	800a3fa <_dtoa_r+0x43a>
 800a38a:	1e7b      	subs	r3, r7, #1
 800a38c:	4620      	mov	r0, r4
 800a38e:	9304      	str	r3, [sp, #16]
 800a390:	2200      	movs	r2, #0
 800a392:	4629      	mov	r1, r5
 800a394:	4b55      	ldr	r3, [pc, #340]	@ (800a4ec <_dtoa_r+0x52c>)
 800a396:	f7f6 f89f 	bl	80004d8 <__aeabi_dmul>
 800a39a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a39e:	9c08      	ldr	r4, [sp, #32]
 800a3a0:	3601      	adds	r6, #1
 800a3a2:	4630      	mov	r0, r6
 800a3a4:	f7f6 f82e 	bl	8000404 <__aeabi_i2d>
 800a3a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a3ac:	f7f6 f894 	bl	80004d8 <__aeabi_dmul>
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	4b4f      	ldr	r3, [pc, #316]	@ (800a4f0 <_dtoa_r+0x530>)
 800a3b4:	f7f5 feda 	bl	800016c <__adddf3>
 800a3b8:	4605      	mov	r5, r0
 800a3ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a3be:	2c00      	cmp	r4, #0
 800a3c0:	f040 809a 	bne.w	800a4f8 <_dtoa_r+0x538>
 800a3c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	4b4a      	ldr	r3, [pc, #296]	@ (800a4f4 <_dtoa_r+0x534>)
 800a3cc:	f7f5 fecc 	bl	8000168 <__aeabi_dsub>
 800a3d0:	4602      	mov	r2, r0
 800a3d2:	460b      	mov	r3, r1
 800a3d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a3d8:	462a      	mov	r2, r5
 800a3da:	4633      	mov	r3, r6
 800a3dc:	f7f6 fb0c 	bl	80009f8 <__aeabi_dcmpgt>
 800a3e0:	2800      	cmp	r0, #0
 800a3e2:	f040 828e 	bne.w	800a902 <_dtoa_r+0x942>
 800a3e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3ea:	462a      	mov	r2, r5
 800a3ec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a3f0:	f7f6 fae4 	bl	80009bc <__aeabi_dcmplt>
 800a3f4:	2800      	cmp	r0, #0
 800a3f6:	f040 8127 	bne.w	800a648 <_dtoa_r+0x688>
 800a3fa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a3fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a402:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a404:	2b00      	cmp	r3, #0
 800a406:	f2c0 8163 	blt.w	800a6d0 <_dtoa_r+0x710>
 800a40a:	2f0e      	cmp	r7, #14
 800a40c:	f300 8160 	bgt.w	800a6d0 <_dtoa_r+0x710>
 800a410:	4b33      	ldr	r3, [pc, #204]	@ (800a4e0 <_dtoa_r+0x520>)
 800a412:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a416:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a41a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a41e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a420:	2b00      	cmp	r3, #0
 800a422:	da03      	bge.n	800a42c <_dtoa_r+0x46c>
 800a424:	9b07      	ldr	r3, [sp, #28]
 800a426:	2b00      	cmp	r3, #0
 800a428:	f340 8100 	ble.w	800a62c <_dtoa_r+0x66c>
 800a42c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a430:	4656      	mov	r6, sl
 800a432:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a436:	4620      	mov	r0, r4
 800a438:	4629      	mov	r1, r5
 800a43a:	f7f6 f977 	bl	800072c <__aeabi_ddiv>
 800a43e:	f7f6 fafb 	bl	8000a38 <__aeabi_d2iz>
 800a442:	4680      	mov	r8, r0
 800a444:	f7f5 ffde 	bl	8000404 <__aeabi_i2d>
 800a448:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a44c:	f7f6 f844 	bl	80004d8 <__aeabi_dmul>
 800a450:	4602      	mov	r2, r0
 800a452:	460b      	mov	r3, r1
 800a454:	4620      	mov	r0, r4
 800a456:	4629      	mov	r1, r5
 800a458:	f7f5 fe86 	bl	8000168 <__aeabi_dsub>
 800a45c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a460:	9d07      	ldr	r5, [sp, #28]
 800a462:	f806 4b01 	strb.w	r4, [r6], #1
 800a466:	eba6 040a 	sub.w	r4, r6, sl
 800a46a:	42a5      	cmp	r5, r4
 800a46c:	4602      	mov	r2, r0
 800a46e:	460b      	mov	r3, r1
 800a470:	f040 8116 	bne.w	800a6a0 <_dtoa_r+0x6e0>
 800a474:	f7f5 fe7a 	bl	800016c <__adddf3>
 800a478:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a47c:	4604      	mov	r4, r0
 800a47e:	460d      	mov	r5, r1
 800a480:	f7f6 faba 	bl	80009f8 <__aeabi_dcmpgt>
 800a484:	2800      	cmp	r0, #0
 800a486:	f040 80f8 	bne.w	800a67a <_dtoa_r+0x6ba>
 800a48a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a48e:	4620      	mov	r0, r4
 800a490:	4629      	mov	r1, r5
 800a492:	f7f6 fa89 	bl	80009a8 <__aeabi_dcmpeq>
 800a496:	b118      	cbz	r0, 800a4a0 <_dtoa_r+0x4e0>
 800a498:	f018 0f01 	tst.w	r8, #1
 800a49c:	f040 80ed 	bne.w	800a67a <_dtoa_r+0x6ba>
 800a4a0:	4649      	mov	r1, r9
 800a4a2:	4658      	mov	r0, fp
 800a4a4:	f000 fc92 	bl	800adcc <_Bfree>
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	7033      	strb	r3, [r6, #0]
 800a4ac:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a4ae:	3701      	adds	r7, #1
 800a4b0:	601f      	str	r7, [r3, #0]
 800a4b2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	f000 8320 	beq.w	800aafa <_dtoa_r+0xb3a>
 800a4ba:	601e      	str	r6, [r3, #0]
 800a4bc:	e31d      	b.n	800aafa <_dtoa_r+0xb3a>
 800a4be:	07e2      	lsls	r2, r4, #31
 800a4c0:	d505      	bpl.n	800a4ce <_dtoa_r+0x50e>
 800a4c2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a4c6:	f7f6 f807 	bl	80004d8 <__aeabi_dmul>
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	3601      	adds	r6, #1
 800a4ce:	1064      	asrs	r4, r4, #1
 800a4d0:	3508      	adds	r5, #8
 800a4d2:	e73f      	b.n	800a354 <_dtoa_r+0x394>
 800a4d4:	2602      	movs	r6, #2
 800a4d6:	e742      	b.n	800a35e <_dtoa_r+0x39e>
 800a4d8:	9c07      	ldr	r4, [sp, #28]
 800a4da:	9704      	str	r7, [sp, #16]
 800a4dc:	e761      	b.n	800a3a2 <_dtoa_r+0x3e2>
 800a4de:	bf00      	nop
 800a4e0:	0800cb78 	.word	0x0800cb78
 800a4e4:	0800cb50 	.word	0x0800cb50
 800a4e8:	3ff00000 	.word	0x3ff00000
 800a4ec:	40240000 	.word	0x40240000
 800a4f0:	401c0000 	.word	0x401c0000
 800a4f4:	40140000 	.word	0x40140000
 800a4f8:	4b70      	ldr	r3, [pc, #448]	@ (800a6bc <_dtoa_r+0x6fc>)
 800a4fa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a4fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a500:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a504:	4454      	add	r4, sl
 800a506:	2900      	cmp	r1, #0
 800a508:	d045      	beq.n	800a596 <_dtoa_r+0x5d6>
 800a50a:	2000      	movs	r0, #0
 800a50c:	496c      	ldr	r1, [pc, #432]	@ (800a6c0 <_dtoa_r+0x700>)
 800a50e:	f7f6 f90d 	bl	800072c <__aeabi_ddiv>
 800a512:	4633      	mov	r3, r6
 800a514:	462a      	mov	r2, r5
 800a516:	f7f5 fe27 	bl	8000168 <__aeabi_dsub>
 800a51a:	4656      	mov	r6, sl
 800a51c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a520:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a524:	f7f6 fa88 	bl	8000a38 <__aeabi_d2iz>
 800a528:	4605      	mov	r5, r0
 800a52a:	f7f5 ff6b 	bl	8000404 <__aeabi_i2d>
 800a52e:	4602      	mov	r2, r0
 800a530:	460b      	mov	r3, r1
 800a532:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a536:	f7f5 fe17 	bl	8000168 <__aeabi_dsub>
 800a53a:	4602      	mov	r2, r0
 800a53c:	460b      	mov	r3, r1
 800a53e:	3530      	adds	r5, #48	@ 0x30
 800a540:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a544:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a548:	f806 5b01 	strb.w	r5, [r6], #1
 800a54c:	f7f6 fa36 	bl	80009bc <__aeabi_dcmplt>
 800a550:	2800      	cmp	r0, #0
 800a552:	d163      	bne.n	800a61c <_dtoa_r+0x65c>
 800a554:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a558:	2000      	movs	r0, #0
 800a55a:	495a      	ldr	r1, [pc, #360]	@ (800a6c4 <_dtoa_r+0x704>)
 800a55c:	f7f5 fe04 	bl	8000168 <__aeabi_dsub>
 800a560:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a564:	f7f6 fa2a 	bl	80009bc <__aeabi_dcmplt>
 800a568:	2800      	cmp	r0, #0
 800a56a:	f040 8087 	bne.w	800a67c <_dtoa_r+0x6bc>
 800a56e:	42a6      	cmp	r6, r4
 800a570:	f43f af43 	beq.w	800a3fa <_dtoa_r+0x43a>
 800a574:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a578:	2200      	movs	r2, #0
 800a57a:	4b53      	ldr	r3, [pc, #332]	@ (800a6c8 <_dtoa_r+0x708>)
 800a57c:	f7f5 ffac 	bl	80004d8 <__aeabi_dmul>
 800a580:	2200      	movs	r2, #0
 800a582:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a586:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a58a:	4b4f      	ldr	r3, [pc, #316]	@ (800a6c8 <_dtoa_r+0x708>)
 800a58c:	f7f5 ffa4 	bl	80004d8 <__aeabi_dmul>
 800a590:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a594:	e7c4      	b.n	800a520 <_dtoa_r+0x560>
 800a596:	4631      	mov	r1, r6
 800a598:	4628      	mov	r0, r5
 800a59a:	f7f5 ff9d 	bl	80004d8 <__aeabi_dmul>
 800a59e:	4656      	mov	r6, sl
 800a5a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a5a4:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a5a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5aa:	f7f6 fa45 	bl	8000a38 <__aeabi_d2iz>
 800a5ae:	4605      	mov	r5, r0
 800a5b0:	f7f5 ff28 	bl	8000404 <__aeabi_i2d>
 800a5b4:	4602      	mov	r2, r0
 800a5b6:	460b      	mov	r3, r1
 800a5b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5bc:	f7f5 fdd4 	bl	8000168 <__aeabi_dsub>
 800a5c0:	4602      	mov	r2, r0
 800a5c2:	460b      	mov	r3, r1
 800a5c4:	3530      	adds	r5, #48	@ 0x30
 800a5c6:	f806 5b01 	strb.w	r5, [r6], #1
 800a5ca:	42a6      	cmp	r6, r4
 800a5cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a5d0:	f04f 0200 	mov.w	r2, #0
 800a5d4:	d124      	bne.n	800a620 <_dtoa_r+0x660>
 800a5d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a5da:	4b39      	ldr	r3, [pc, #228]	@ (800a6c0 <_dtoa_r+0x700>)
 800a5dc:	f7f5 fdc6 	bl	800016c <__adddf3>
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	460b      	mov	r3, r1
 800a5e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5e8:	f7f6 fa06 	bl	80009f8 <__aeabi_dcmpgt>
 800a5ec:	2800      	cmp	r0, #0
 800a5ee:	d145      	bne.n	800a67c <_dtoa_r+0x6bc>
 800a5f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a5f4:	2000      	movs	r0, #0
 800a5f6:	4932      	ldr	r1, [pc, #200]	@ (800a6c0 <_dtoa_r+0x700>)
 800a5f8:	f7f5 fdb6 	bl	8000168 <__aeabi_dsub>
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	460b      	mov	r3, r1
 800a600:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a604:	f7f6 f9da 	bl	80009bc <__aeabi_dcmplt>
 800a608:	2800      	cmp	r0, #0
 800a60a:	f43f aef6 	beq.w	800a3fa <_dtoa_r+0x43a>
 800a60e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a610:	1e73      	subs	r3, r6, #1
 800a612:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a614:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a618:	2b30      	cmp	r3, #48	@ 0x30
 800a61a:	d0f8      	beq.n	800a60e <_dtoa_r+0x64e>
 800a61c:	9f04      	ldr	r7, [sp, #16]
 800a61e:	e73f      	b.n	800a4a0 <_dtoa_r+0x4e0>
 800a620:	4b29      	ldr	r3, [pc, #164]	@ (800a6c8 <_dtoa_r+0x708>)
 800a622:	f7f5 ff59 	bl	80004d8 <__aeabi_dmul>
 800a626:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a62a:	e7bc      	b.n	800a5a6 <_dtoa_r+0x5e6>
 800a62c:	d10c      	bne.n	800a648 <_dtoa_r+0x688>
 800a62e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a632:	2200      	movs	r2, #0
 800a634:	4b25      	ldr	r3, [pc, #148]	@ (800a6cc <_dtoa_r+0x70c>)
 800a636:	f7f5 ff4f 	bl	80004d8 <__aeabi_dmul>
 800a63a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a63e:	f7f6 f9d1 	bl	80009e4 <__aeabi_dcmpge>
 800a642:	2800      	cmp	r0, #0
 800a644:	f000 815b 	beq.w	800a8fe <_dtoa_r+0x93e>
 800a648:	2400      	movs	r4, #0
 800a64a:	4625      	mov	r5, r4
 800a64c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a64e:	4656      	mov	r6, sl
 800a650:	43db      	mvns	r3, r3
 800a652:	9304      	str	r3, [sp, #16]
 800a654:	2700      	movs	r7, #0
 800a656:	4621      	mov	r1, r4
 800a658:	4658      	mov	r0, fp
 800a65a:	f000 fbb7 	bl	800adcc <_Bfree>
 800a65e:	2d00      	cmp	r5, #0
 800a660:	d0dc      	beq.n	800a61c <_dtoa_r+0x65c>
 800a662:	b12f      	cbz	r7, 800a670 <_dtoa_r+0x6b0>
 800a664:	42af      	cmp	r7, r5
 800a666:	d003      	beq.n	800a670 <_dtoa_r+0x6b0>
 800a668:	4639      	mov	r1, r7
 800a66a:	4658      	mov	r0, fp
 800a66c:	f000 fbae 	bl	800adcc <_Bfree>
 800a670:	4629      	mov	r1, r5
 800a672:	4658      	mov	r0, fp
 800a674:	f000 fbaa 	bl	800adcc <_Bfree>
 800a678:	e7d0      	b.n	800a61c <_dtoa_r+0x65c>
 800a67a:	9704      	str	r7, [sp, #16]
 800a67c:	4633      	mov	r3, r6
 800a67e:	461e      	mov	r6, r3
 800a680:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a684:	2a39      	cmp	r2, #57	@ 0x39
 800a686:	d107      	bne.n	800a698 <_dtoa_r+0x6d8>
 800a688:	459a      	cmp	sl, r3
 800a68a:	d1f8      	bne.n	800a67e <_dtoa_r+0x6be>
 800a68c:	9a04      	ldr	r2, [sp, #16]
 800a68e:	3201      	adds	r2, #1
 800a690:	9204      	str	r2, [sp, #16]
 800a692:	2230      	movs	r2, #48	@ 0x30
 800a694:	f88a 2000 	strb.w	r2, [sl]
 800a698:	781a      	ldrb	r2, [r3, #0]
 800a69a:	3201      	adds	r2, #1
 800a69c:	701a      	strb	r2, [r3, #0]
 800a69e:	e7bd      	b.n	800a61c <_dtoa_r+0x65c>
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	4b09      	ldr	r3, [pc, #36]	@ (800a6c8 <_dtoa_r+0x708>)
 800a6a4:	f7f5 ff18 	bl	80004d8 <__aeabi_dmul>
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	4604      	mov	r4, r0
 800a6ae:	460d      	mov	r5, r1
 800a6b0:	f7f6 f97a 	bl	80009a8 <__aeabi_dcmpeq>
 800a6b4:	2800      	cmp	r0, #0
 800a6b6:	f43f aebc 	beq.w	800a432 <_dtoa_r+0x472>
 800a6ba:	e6f1      	b.n	800a4a0 <_dtoa_r+0x4e0>
 800a6bc:	0800cb78 	.word	0x0800cb78
 800a6c0:	3fe00000 	.word	0x3fe00000
 800a6c4:	3ff00000 	.word	0x3ff00000
 800a6c8:	40240000 	.word	0x40240000
 800a6cc:	40140000 	.word	0x40140000
 800a6d0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a6d2:	2a00      	cmp	r2, #0
 800a6d4:	f000 80db 	beq.w	800a88e <_dtoa_r+0x8ce>
 800a6d8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a6da:	2a01      	cmp	r2, #1
 800a6dc:	f300 80bf 	bgt.w	800a85e <_dtoa_r+0x89e>
 800a6e0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a6e2:	2a00      	cmp	r2, #0
 800a6e4:	f000 80b7 	beq.w	800a856 <_dtoa_r+0x896>
 800a6e8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a6ec:	4646      	mov	r6, r8
 800a6ee:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a6f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a6f2:	2101      	movs	r1, #1
 800a6f4:	441a      	add	r2, r3
 800a6f6:	4658      	mov	r0, fp
 800a6f8:	4498      	add	r8, r3
 800a6fa:	9209      	str	r2, [sp, #36]	@ 0x24
 800a6fc:	f000 fc1a 	bl	800af34 <__i2b>
 800a700:	4605      	mov	r5, r0
 800a702:	b15e      	cbz	r6, 800a71c <_dtoa_r+0x75c>
 800a704:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a706:	2b00      	cmp	r3, #0
 800a708:	dd08      	ble.n	800a71c <_dtoa_r+0x75c>
 800a70a:	42b3      	cmp	r3, r6
 800a70c:	bfa8      	it	ge
 800a70e:	4633      	movge	r3, r6
 800a710:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a712:	eba8 0803 	sub.w	r8, r8, r3
 800a716:	1af6      	subs	r6, r6, r3
 800a718:	1ad3      	subs	r3, r2, r3
 800a71a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a71c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a71e:	b1f3      	cbz	r3, 800a75e <_dtoa_r+0x79e>
 800a720:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a722:	2b00      	cmp	r3, #0
 800a724:	f000 80b7 	beq.w	800a896 <_dtoa_r+0x8d6>
 800a728:	b18c      	cbz	r4, 800a74e <_dtoa_r+0x78e>
 800a72a:	4629      	mov	r1, r5
 800a72c:	4622      	mov	r2, r4
 800a72e:	4658      	mov	r0, fp
 800a730:	f000 fcbe 	bl	800b0b0 <__pow5mult>
 800a734:	464a      	mov	r2, r9
 800a736:	4601      	mov	r1, r0
 800a738:	4605      	mov	r5, r0
 800a73a:	4658      	mov	r0, fp
 800a73c:	f000 fc10 	bl	800af60 <__multiply>
 800a740:	4649      	mov	r1, r9
 800a742:	9004      	str	r0, [sp, #16]
 800a744:	4658      	mov	r0, fp
 800a746:	f000 fb41 	bl	800adcc <_Bfree>
 800a74a:	9b04      	ldr	r3, [sp, #16]
 800a74c:	4699      	mov	r9, r3
 800a74e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a750:	1b1a      	subs	r2, r3, r4
 800a752:	d004      	beq.n	800a75e <_dtoa_r+0x79e>
 800a754:	4649      	mov	r1, r9
 800a756:	4658      	mov	r0, fp
 800a758:	f000 fcaa 	bl	800b0b0 <__pow5mult>
 800a75c:	4681      	mov	r9, r0
 800a75e:	2101      	movs	r1, #1
 800a760:	4658      	mov	r0, fp
 800a762:	f000 fbe7 	bl	800af34 <__i2b>
 800a766:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a768:	4604      	mov	r4, r0
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	f000 81c9 	beq.w	800ab02 <_dtoa_r+0xb42>
 800a770:	461a      	mov	r2, r3
 800a772:	4601      	mov	r1, r0
 800a774:	4658      	mov	r0, fp
 800a776:	f000 fc9b 	bl	800b0b0 <__pow5mult>
 800a77a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a77c:	4604      	mov	r4, r0
 800a77e:	2b01      	cmp	r3, #1
 800a780:	f300 808f 	bgt.w	800a8a2 <_dtoa_r+0x8e2>
 800a784:	9b02      	ldr	r3, [sp, #8]
 800a786:	2b00      	cmp	r3, #0
 800a788:	f040 8087 	bne.w	800a89a <_dtoa_r+0x8da>
 800a78c:	9b03      	ldr	r3, [sp, #12]
 800a78e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a792:	2b00      	cmp	r3, #0
 800a794:	f040 8083 	bne.w	800a89e <_dtoa_r+0x8de>
 800a798:	9b03      	ldr	r3, [sp, #12]
 800a79a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a79e:	0d1b      	lsrs	r3, r3, #20
 800a7a0:	051b      	lsls	r3, r3, #20
 800a7a2:	b12b      	cbz	r3, 800a7b0 <_dtoa_r+0x7f0>
 800a7a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7a6:	f108 0801 	add.w	r8, r8, #1
 800a7aa:	3301      	adds	r3, #1
 800a7ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a7b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	f000 81aa 	beq.w	800ab0e <_dtoa_r+0xb4e>
 800a7ba:	6923      	ldr	r3, [r4, #16]
 800a7bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a7c0:	6918      	ldr	r0, [r3, #16]
 800a7c2:	f000 fb6b 	bl	800ae9c <__hi0bits>
 800a7c6:	f1c0 0020 	rsb	r0, r0, #32
 800a7ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7cc:	4418      	add	r0, r3
 800a7ce:	f010 001f 	ands.w	r0, r0, #31
 800a7d2:	d071      	beq.n	800a8b8 <_dtoa_r+0x8f8>
 800a7d4:	f1c0 0320 	rsb	r3, r0, #32
 800a7d8:	2b04      	cmp	r3, #4
 800a7da:	dd65      	ble.n	800a8a8 <_dtoa_r+0x8e8>
 800a7dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7de:	f1c0 001c 	rsb	r0, r0, #28
 800a7e2:	4403      	add	r3, r0
 800a7e4:	4480      	add	r8, r0
 800a7e6:	4406      	add	r6, r0
 800a7e8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7ea:	f1b8 0f00 	cmp.w	r8, #0
 800a7ee:	dd05      	ble.n	800a7fc <_dtoa_r+0x83c>
 800a7f0:	4649      	mov	r1, r9
 800a7f2:	4642      	mov	r2, r8
 800a7f4:	4658      	mov	r0, fp
 800a7f6:	f000 fcb5 	bl	800b164 <__lshift>
 800a7fa:	4681      	mov	r9, r0
 800a7fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	dd05      	ble.n	800a80e <_dtoa_r+0x84e>
 800a802:	4621      	mov	r1, r4
 800a804:	461a      	mov	r2, r3
 800a806:	4658      	mov	r0, fp
 800a808:	f000 fcac 	bl	800b164 <__lshift>
 800a80c:	4604      	mov	r4, r0
 800a80e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a810:	2b00      	cmp	r3, #0
 800a812:	d053      	beq.n	800a8bc <_dtoa_r+0x8fc>
 800a814:	4621      	mov	r1, r4
 800a816:	4648      	mov	r0, r9
 800a818:	f000 fd10 	bl	800b23c <__mcmp>
 800a81c:	2800      	cmp	r0, #0
 800a81e:	da4d      	bge.n	800a8bc <_dtoa_r+0x8fc>
 800a820:	1e7b      	subs	r3, r7, #1
 800a822:	4649      	mov	r1, r9
 800a824:	9304      	str	r3, [sp, #16]
 800a826:	220a      	movs	r2, #10
 800a828:	2300      	movs	r3, #0
 800a82a:	4658      	mov	r0, fp
 800a82c:	f000 faf0 	bl	800ae10 <__multadd>
 800a830:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a832:	4681      	mov	r9, r0
 800a834:	2b00      	cmp	r3, #0
 800a836:	f000 816c 	beq.w	800ab12 <_dtoa_r+0xb52>
 800a83a:	2300      	movs	r3, #0
 800a83c:	4629      	mov	r1, r5
 800a83e:	220a      	movs	r2, #10
 800a840:	4658      	mov	r0, fp
 800a842:	f000 fae5 	bl	800ae10 <__multadd>
 800a846:	9b08      	ldr	r3, [sp, #32]
 800a848:	4605      	mov	r5, r0
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	dc61      	bgt.n	800a912 <_dtoa_r+0x952>
 800a84e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a850:	2b02      	cmp	r3, #2
 800a852:	dc3b      	bgt.n	800a8cc <_dtoa_r+0x90c>
 800a854:	e05d      	b.n	800a912 <_dtoa_r+0x952>
 800a856:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a858:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a85c:	e746      	b.n	800a6ec <_dtoa_r+0x72c>
 800a85e:	9b07      	ldr	r3, [sp, #28]
 800a860:	1e5c      	subs	r4, r3, #1
 800a862:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a864:	42a3      	cmp	r3, r4
 800a866:	bfbf      	itttt	lt
 800a868:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a86a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800a86c:	1ae3      	sublt	r3, r4, r3
 800a86e:	18d2      	addlt	r2, r2, r3
 800a870:	bfa8      	it	ge
 800a872:	1b1c      	subge	r4, r3, r4
 800a874:	9b07      	ldr	r3, [sp, #28]
 800a876:	bfbe      	ittt	lt
 800a878:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a87a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800a87c:	2400      	movlt	r4, #0
 800a87e:	2b00      	cmp	r3, #0
 800a880:	bfb5      	itete	lt
 800a882:	eba8 0603 	sublt.w	r6, r8, r3
 800a886:	4646      	movge	r6, r8
 800a888:	2300      	movlt	r3, #0
 800a88a:	9b07      	ldrge	r3, [sp, #28]
 800a88c:	e730      	b.n	800a6f0 <_dtoa_r+0x730>
 800a88e:	4646      	mov	r6, r8
 800a890:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a892:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a894:	e735      	b.n	800a702 <_dtoa_r+0x742>
 800a896:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a898:	e75c      	b.n	800a754 <_dtoa_r+0x794>
 800a89a:	2300      	movs	r3, #0
 800a89c:	e788      	b.n	800a7b0 <_dtoa_r+0x7f0>
 800a89e:	9b02      	ldr	r3, [sp, #8]
 800a8a0:	e786      	b.n	800a7b0 <_dtoa_r+0x7f0>
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	930a      	str	r3, [sp, #40]	@ 0x28
 800a8a6:	e788      	b.n	800a7ba <_dtoa_r+0x7fa>
 800a8a8:	d09f      	beq.n	800a7ea <_dtoa_r+0x82a>
 800a8aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a8ac:	331c      	adds	r3, #28
 800a8ae:	441a      	add	r2, r3
 800a8b0:	4498      	add	r8, r3
 800a8b2:	441e      	add	r6, r3
 800a8b4:	9209      	str	r2, [sp, #36]	@ 0x24
 800a8b6:	e798      	b.n	800a7ea <_dtoa_r+0x82a>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	e7f6      	b.n	800a8aa <_dtoa_r+0x8ea>
 800a8bc:	9b07      	ldr	r3, [sp, #28]
 800a8be:	9704      	str	r7, [sp, #16]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	dc20      	bgt.n	800a906 <_dtoa_r+0x946>
 800a8c4:	9308      	str	r3, [sp, #32]
 800a8c6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a8c8:	2b02      	cmp	r3, #2
 800a8ca:	dd1e      	ble.n	800a90a <_dtoa_r+0x94a>
 800a8cc:	9b08      	ldr	r3, [sp, #32]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	f47f aebc 	bne.w	800a64c <_dtoa_r+0x68c>
 800a8d4:	4621      	mov	r1, r4
 800a8d6:	2205      	movs	r2, #5
 800a8d8:	4658      	mov	r0, fp
 800a8da:	f000 fa99 	bl	800ae10 <__multadd>
 800a8de:	4601      	mov	r1, r0
 800a8e0:	4604      	mov	r4, r0
 800a8e2:	4648      	mov	r0, r9
 800a8e4:	f000 fcaa 	bl	800b23c <__mcmp>
 800a8e8:	2800      	cmp	r0, #0
 800a8ea:	f77f aeaf 	ble.w	800a64c <_dtoa_r+0x68c>
 800a8ee:	2331      	movs	r3, #49	@ 0x31
 800a8f0:	4656      	mov	r6, sl
 800a8f2:	f806 3b01 	strb.w	r3, [r6], #1
 800a8f6:	9b04      	ldr	r3, [sp, #16]
 800a8f8:	3301      	adds	r3, #1
 800a8fa:	9304      	str	r3, [sp, #16]
 800a8fc:	e6aa      	b.n	800a654 <_dtoa_r+0x694>
 800a8fe:	9c07      	ldr	r4, [sp, #28]
 800a900:	9704      	str	r7, [sp, #16]
 800a902:	4625      	mov	r5, r4
 800a904:	e7f3      	b.n	800a8ee <_dtoa_r+0x92e>
 800a906:	9b07      	ldr	r3, [sp, #28]
 800a908:	9308      	str	r3, [sp, #32]
 800a90a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	f000 8104 	beq.w	800ab1a <_dtoa_r+0xb5a>
 800a912:	2e00      	cmp	r6, #0
 800a914:	dd05      	ble.n	800a922 <_dtoa_r+0x962>
 800a916:	4629      	mov	r1, r5
 800a918:	4632      	mov	r2, r6
 800a91a:	4658      	mov	r0, fp
 800a91c:	f000 fc22 	bl	800b164 <__lshift>
 800a920:	4605      	mov	r5, r0
 800a922:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a924:	2b00      	cmp	r3, #0
 800a926:	d05a      	beq.n	800a9de <_dtoa_r+0xa1e>
 800a928:	4658      	mov	r0, fp
 800a92a:	6869      	ldr	r1, [r5, #4]
 800a92c:	f000 fa0e 	bl	800ad4c <_Balloc>
 800a930:	4606      	mov	r6, r0
 800a932:	b928      	cbnz	r0, 800a940 <_dtoa_r+0x980>
 800a934:	4602      	mov	r2, r0
 800a936:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a93a:	4b83      	ldr	r3, [pc, #524]	@ (800ab48 <_dtoa_r+0xb88>)
 800a93c:	f7ff bb54 	b.w	8009fe8 <_dtoa_r+0x28>
 800a940:	692a      	ldr	r2, [r5, #16]
 800a942:	f105 010c 	add.w	r1, r5, #12
 800a946:	3202      	adds	r2, #2
 800a948:	0092      	lsls	r2, r2, #2
 800a94a:	300c      	adds	r0, #12
 800a94c:	f7ff fa9f 	bl	8009e8e <memcpy>
 800a950:	2201      	movs	r2, #1
 800a952:	4631      	mov	r1, r6
 800a954:	4658      	mov	r0, fp
 800a956:	f000 fc05 	bl	800b164 <__lshift>
 800a95a:	462f      	mov	r7, r5
 800a95c:	4605      	mov	r5, r0
 800a95e:	f10a 0301 	add.w	r3, sl, #1
 800a962:	9307      	str	r3, [sp, #28]
 800a964:	9b08      	ldr	r3, [sp, #32]
 800a966:	4453      	add	r3, sl
 800a968:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a96a:	9b02      	ldr	r3, [sp, #8]
 800a96c:	f003 0301 	and.w	r3, r3, #1
 800a970:	930a      	str	r3, [sp, #40]	@ 0x28
 800a972:	9b07      	ldr	r3, [sp, #28]
 800a974:	4621      	mov	r1, r4
 800a976:	3b01      	subs	r3, #1
 800a978:	4648      	mov	r0, r9
 800a97a:	9302      	str	r3, [sp, #8]
 800a97c:	f7ff fa95 	bl	8009eaa <quorem>
 800a980:	4639      	mov	r1, r7
 800a982:	9008      	str	r0, [sp, #32]
 800a984:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a988:	4648      	mov	r0, r9
 800a98a:	f000 fc57 	bl	800b23c <__mcmp>
 800a98e:	462a      	mov	r2, r5
 800a990:	9009      	str	r0, [sp, #36]	@ 0x24
 800a992:	4621      	mov	r1, r4
 800a994:	4658      	mov	r0, fp
 800a996:	f000 fc6d 	bl	800b274 <__mdiff>
 800a99a:	68c2      	ldr	r2, [r0, #12]
 800a99c:	4606      	mov	r6, r0
 800a99e:	bb02      	cbnz	r2, 800a9e2 <_dtoa_r+0xa22>
 800a9a0:	4601      	mov	r1, r0
 800a9a2:	4648      	mov	r0, r9
 800a9a4:	f000 fc4a 	bl	800b23c <__mcmp>
 800a9a8:	4602      	mov	r2, r0
 800a9aa:	4631      	mov	r1, r6
 800a9ac:	4658      	mov	r0, fp
 800a9ae:	920c      	str	r2, [sp, #48]	@ 0x30
 800a9b0:	f000 fa0c 	bl	800adcc <_Bfree>
 800a9b4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a9b6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a9b8:	9e07      	ldr	r6, [sp, #28]
 800a9ba:	ea43 0102 	orr.w	r1, r3, r2
 800a9be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9c0:	4319      	orrs	r1, r3
 800a9c2:	d110      	bne.n	800a9e6 <_dtoa_r+0xa26>
 800a9c4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a9c8:	d029      	beq.n	800aa1e <_dtoa_r+0xa5e>
 800a9ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	dd02      	ble.n	800a9d6 <_dtoa_r+0xa16>
 800a9d0:	9b08      	ldr	r3, [sp, #32]
 800a9d2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a9d6:	9b02      	ldr	r3, [sp, #8]
 800a9d8:	f883 8000 	strb.w	r8, [r3]
 800a9dc:	e63b      	b.n	800a656 <_dtoa_r+0x696>
 800a9de:	4628      	mov	r0, r5
 800a9e0:	e7bb      	b.n	800a95a <_dtoa_r+0x99a>
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	e7e1      	b.n	800a9aa <_dtoa_r+0x9ea>
 800a9e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	db04      	blt.n	800a9f6 <_dtoa_r+0xa36>
 800a9ec:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800a9ee:	430b      	orrs	r3, r1
 800a9f0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a9f2:	430b      	orrs	r3, r1
 800a9f4:	d120      	bne.n	800aa38 <_dtoa_r+0xa78>
 800a9f6:	2a00      	cmp	r2, #0
 800a9f8:	dded      	ble.n	800a9d6 <_dtoa_r+0xa16>
 800a9fa:	4649      	mov	r1, r9
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	4658      	mov	r0, fp
 800aa00:	f000 fbb0 	bl	800b164 <__lshift>
 800aa04:	4621      	mov	r1, r4
 800aa06:	4681      	mov	r9, r0
 800aa08:	f000 fc18 	bl	800b23c <__mcmp>
 800aa0c:	2800      	cmp	r0, #0
 800aa0e:	dc03      	bgt.n	800aa18 <_dtoa_r+0xa58>
 800aa10:	d1e1      	bne.n	800a9d6 <_dtoa_r+0xa16>
 800aa12:	f018 0f01 	tst.w	r8, #1
 800aa16:	d0de      	beq.n	800a9d6 <_dtoa_r+0xa16>
 800aa18:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800aa1c:	d1d8      	bne.n	800a9d0 <_dtoa_r+0xa10>
 800aa1e:	2339      	movs	r3, #57	@ 0x39
 800aa20:	9a02      	ldr	r2, [sp, #8]
 800aa22:	7013      	strb	r3, [r2, #0]
 800aa24:	4633      	mov	r3, r6
 800aa26:	461e      	mov	r6, r3
 800aa28:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800aa2c:	3b01      	subs	r3, #1
 800aa2e:	2a39      	cmp	r2, #57	@ 0x39
 800aa30:	d052      	beq.n	800aad8 <_dtoa_r+0xb18>
 800aa32:	3201      	adds	r2, #1
 800aa34:	701a      	strb	r2, [r3, #0]
 800aa36:	e60e      	b.n	800a656 <_dtoa_r+0x696>
 800aa38:	2a00      	cmp	r2, #0
 800aa3a:	dd07      	ble.n	800aa4c <_dtoa_r+0xa8c>
 800aa3c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800aa40:	d0ed      	beq.n	800aa1e <_dtoa_r+0xa5e>
 800aa42:	9a02      	ldr	r2, [sp, #8]
 800aa44:	f108 0301 	add.w	r3, r8, #1
 800aa48:	7013      	strb	r3, [r2, #0]
 800aa4a:	e604      	b.n	800a656 <_dtoa_r+0x696>
 800aa4c:	9b07      	ldr	r3, [sp, #28]
 800aa4e:	9a07      	ldr	r2, [sp, #28]
 800aa50:	f803 8c01 	strb.w	r8, [r3, #-1]
 800aa54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d028      	beq.n	800aaac <_dtoa_r+0xaec>
 800aa5a:	4649      	mov	r1, r9
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	220a      	movs	r2, #10
 800aa60:	4658      	mov	r0, fp
 800aa62:	f000 f9d5 	bl	800ae10 <__multadd>
 800aa66:	42af      	cmp	r7, r5
 800aa68:	4681      	mov	r9, r0
 800aa6a:	f04f 0300 	mov.w	r3, #0
 800aa6e:	f04f 020a 	mov.w	r2, #10
 800aa72:	4639      	mov	r1, r7
 800aa74:	4658      	mov	r0, fp
 800aa76:	d107      	bne.n	800aa88 <_dtoa_r+0xac8>
 800aa78:	f000 f9ca 	bl	800ae10 <__multadd>
 800aa7c:	4607      	mov	r7, r0
 800aa7e:	4605      	mov	r5, r0
 800aa80:	9b07      	ldr	r3, [sp, #28]
 800aa82:	3301      	adds	r3, #1
 800aa84:	9307      	str	r3, [sp, #28]
 800aa86:	e774      	b.n	800a972 <_dtoa_r+0x9b2>
 800aa88:	f000 f9c2 	bl	800ae10 <__multadd>
 800aa8c:	4629      	mov	r1, r5
 800aa8e:	4607      	mov	r7, r0
 800aa90:	2300      	movs	r3, #0
 800aa92:	220a      	movs	r2, #10
 800aa94:	4658      	mov	r0, fp
 800aa96:	f000 f9bb 	bl	800ae10 <__multadd>
 800aa9a:	4605      	mov	r5, r0
 800aa9c:	e7f0      	b.n	800aa80 <_dtoa_r+0xac0>
 800aa9e:	9b08      	ldr	r3, [sp, #32]
 800aaa0:	2700      	movs	r7, #0
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	bfcc      	ite	gt
 800aaa6:	461e      	movgt	r6, r3
 800aaa8:	2601      	movle	r6, #1
 800aaaa:	4456      	add	r6, sl
 800aaac:	4649      	mov	r1, r9
 800aaae:	2201      	movs	r2, #1
 800aab0:	4658      	mov	r0, fp
 800aab2:	f000 fb57 	bl	800b164 <__lshift>
 800aab6:	4621      	mov	r1, r4
 800aab8:	4681      	mov	r9, r0
 800aaba:	f000 fbbf 	bl	800b23c <__mcmp>
 800aabe:	2800      	cmp	r0, #0
 800aac0:	dcb0      	bgt.n	800aa24 <_dtoa_r+0xa64>
 800aac2:	d102      	bne.n	800aaca <_dtoa_r+0xb0a>
 800aac4:	f018 0f01 	tst.w	r8, #1
 800aac8:	d1ac      	bne.n	800aa24 <_dtoa_r+0xa64>
 800aaca:	4633      	mov	r3, r6
 800aacc:	461e      	mov	r6, r3
 800aace:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aad2:	2a30      	cmp	r2, #48	@ 0x30
 800aad4:	d0fa      	beq.n	800aacc <_dtoa_r+0xb0c>
 800aad6:	e5be      	b.n	800a656 <_dtoa_r+0x696>
 800aad8:	459a      	cmp	sl, r3
 800aada:	d1a4      	bne.n	800aa26 <_dtoa_r+0xa66>
 800aadc:	9b04      	ldr	r3, [sp, #16]
 800aade:	3301      	adds	r3, #1
 800aae0:	9304      	str	r3, [sp, #16]
 800aae2:	2331      	movs	r3, #49	@ 0x31
 800aae4:	f88a 3000 	strb.w	r3, [sl]
 800aae8:	e5b5      	b.n	800a656 <_dtoa_r+0x696>
 800aaea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800aaec:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ab4c <_dtoa_r+0xb8c>
 800aaf0:	b11b      	cbz	r3, 800aafa <_dtoa_r+0xb3a>
 800aaf2:	f10a 0308 	add.w	r3, sl, #8
 800aaf6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800aaf8:	6013      	str	r3, [r2, #0]
 800aafa:	4650      	mov	r0, sl
 800aafc:	b017      	add	sp, #92	@ 0x5c
 800aafe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab02:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ab04:	2b01      	cmp	r3, #1
 800ab06:	f77f ae3d 	ble.w	800a784 <_dtoa_r+0x7c4>
 800ab0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab0c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab0e:	2001      	movs	r0, #1
 800ab10:	e65b      	b.n	800a7ca <_dtoa_r+0x80a>
 800ab12:	9b08      	ldr	r3, [sp, #32]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	f77f aed6 	ble.w	800a8c6 <_dtoa_r+0x906>
 800ab1a:	4656      	mov	r6, sl
 800ab1c:	4621      	mov	r1, r4
 800ab1e:	4648      	mov	r0, r9
 800ab20:	f7ff f9c3 	bl	8009eaa <quorem>
 800ab24:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ab28:	9b08      	ldr	r3, [sp, #32]
 800ab2a:	f806 8b01 	strb.w	r8, [r6], #1
 800ab2e:	eba6 020a 	sub.w	r2, r6, sl
 800ab32:	4293      	cmp	r3, r2
 800ab34:	ddb3      	ble.n	800aa9e <_dtoa_r+0xade>
 800ab36:	4649      	mov	r1, r9
 800ab38:	2300      	movs	r3, #0
 800ab3a:	220a      	movs	r2, #10
 800ab3c:	4658      	mov	r0, fp
 800ab3e:	f000 f967 	bl	800ae10 <__multadd>
 800ab42:	4681      	mov	r9, r0
 800ab44:	e7ea      	b.n	800ab1c <_dtoa_r+0xb5c>
 800ab46:	bf00      	nop
 800ab48:	0800cad9 	.word	0x0800cad9
 800ab4c:	0800ca5d 	.word	0x0800ca5d

0800ab50 <_free_r>:
 800ab50:	b538      	push	{r3, r4, r5, lr}
 800ab52:	4605      	mov	r5, r0
 800ab54:	2900      	cmp	r1, #0
 800ab56:	d040      	beq.n	800abda <_free_r+0x8a>
 800ab58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab5c:	1f0c      	subs	r4, r1, #4
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	bfb8      	it	lt
 800ab62:	18e4      	addlt	r4, r4, r3
 800ab64:	f000 f8e6 	bl	800ad34 <__malloc_lock>
 800ab68:	4a1c      	ldr	r2, [pc, #112]	@ (800abdc <_free_r+0x8c>)
 800ab6a:	6813      	ldr	r3, [r2, #0]
 800ab6c:	b933      	cbnz	r3, 800ab7c <_free_r+0x2c>
 800ab6e:	6063      	str	r3, [r4, #4]
 800ab70:	6014      	str	r4, [r2, #0]
 800ab72:	4628      	mov	r0, r5
 800ab74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab78:	f000 b8e2 	b.w	800ad40 <__malloc_unlock>
 800ab7c:	42a3      	cmp	r3, r4
 800ab7e:	d908      	bls.n	800ab92 <_free_r+0x42>
 800ab80:	6820      	ldr	r0, [r4, #0]
 800ab82:	1821      	adds	r1, r4, r0
 800ab84:	428b      	cmp	r3, r1
 800ab86:	bf01      	itttt	eq
 800ab88:	6819      	ldreq	r1, [r3, #0]
 800ab8a:	685b      	ldreq	r3, [r3, #4]
 800ab8c:	1809      	addeq	r1, r1, r0
 800ab8e:	6021      	streq	r1, [r4, #0]
 800ab90:	e7ed      	b.n	800ab6e <_free_r+0x1e>
 800ab92:	461a      	mov	r2, r3
 800ab94:	685b      	ldr	r3, [r3, #4]
 800ab96:	b10b      	cbz	r3, 800ab9c <_free_r+0x4c>
 800ab98:	42a3      	cmp	r3, r4
 800ab9a:	d9fa      	bls.n	800ab92 <_free_r+0x42>
 800ab9c:	6811      	ldr	r1, [r2, #0]
 800ab9e:	1850      	adds	r0, r2, r1
 800aba0:	42a0      	cmp	r0, r4
 800aba2:	d10b      	bne.n	800abbc <_free_r+0x6c>
 800aba4:	6820      	ldr	r0, [r4, #0]
 800aba6:	4401      	add	r1, r0
 800aba8:	1850      	adds	r0, r2, r1
 800abaa:	4283      	cmp	r3, r0
 800abac:	6011      	str	r1, [r2, #0]
 800abae:	d1e0      	bne.n	800ab72 <_free_r+0x22>
 800abb0:	6818      	ldr	r0, [r3, #0]
 800abb2:	685b      	ldr	r3, [r3, #4]
 800abb4:	4408      	add	r0, r1
 800abb6:	6010      	str	r0, [r2, #0]
 800abb8:	6053      	str	r3, [r2, #4]
 800abba:	e7da      	b.n	800ab72 <_free_r+0x22>
 800abbc:	d902      	bls.n	800abc4 <_free_r+0x74>
 800abbe:	230c      	movs	r3, #12
 800abc0:	602b      	str	r3, [r5, #0]
 800abc2:	e7d6      	b.n	800ab72 <_free_r+0x22>
 800abc4:	6820      	ldr	r0, [r4, #0]
 800abc6:	1821      	adds	r1, r4, r0
 800abc8:	428b      	cmp	r3, r1
 800abca:	bf01      	itttt	eq
 800abcc:	6819      	ldreq	r1, [r3, #0]
 800abce:	685b      	ldreq	r3, [r3, #4]
 800abd0:	1809      	addeq	r1, r1, r0
 800abd2:	6021      	streq	r1, [r4, #0]
 800abd4:	6063      	str	r3, [r4, #4]
 800abd6:	6054      	str	r4, [r2, #4]
 800abd8:	e7cb      	b.n	800ab72 <_free_r+0x22>
 800abda:	bd38      	pop	{r3, r4, r5, pc}
 800abdc:	200049a0 	.word	0x200049a0

0800abe0 <malloc>:
 800abe0:	4b02      	ldr	r3, [pc, #8]	@ (800abec <malloc+0xc>)
 800abe2:	4601      	mov	r1, r0
 800abe4:	6818      	ldr	r0, [r3, #0]
 800abe6:	f000 b825 	b.w	800ac34 <_malloc_r>
 800abea:	bf00      	nop
 800abec:	20000138 	.word	0x20000138

0800abf0 <sbrk_aligned>:
 800abf0:	b570      	push	{r4, r5, r6, lr}
 800abf2:	4e0f      	ldr	r6, [pc, #60]	@ (800ac30 <sbrk_aligned+0x40>)
 800abf4:	460c      	mov	r4, r1
 800abf6:	6831      	ldr	r1, [r6, #0]
 800abf8:	4605      	mov	r5, r0
 800abfa:	b911      	cbnz	r1, 800ac02 <sbrk_aligned+0x12>
 800abfc:	f001 f9ae 	bl	800bf5c <_sbrk_r>
 800ac00:	6030      	str	r0, [r6, #0]
 800ac02:	4621      	mov	r1, r4
 800ac04:	4628      	mov	r0, r5
 800ac06:	f001 f9a9 	bl	800bf5c <_sbrk_r>
 800ac0a:	1c43      	adds	r3, r0, #1
 800ac0c:	d103      	bne.n	800ac16 <sbrk_aligned+0x26>
 800ac0e:	f04f 34ff 	mov.w	r4, #4294967295
 800ac12:	4620      	mov	r0, r4
 800ac14:	bd70      	pop	{r4, r5, r6, pc}
 800ac16:	1cc4      	adds	r4, r0, #3
 800ac18:	f024 0403 	bic.w	r4, r4, #3
 800ac1c:	42a0      	cmp	r0, r4
 800ac1e:	d0f8      	beq.n	800ac12 <sbrk_aligned+0x22>
 800ac20:	1a21      	subs	r1, r4, r0
 800ac22:	4628      	mov	r0, r5
 800ac24:	f001 f99a 	bl	800bf5c <_sbrk_r>
 800ac28:	3001      	adds	r0, #1
 800ac2a:	d1f2      	bne.n	800ac12 <sbrk_aligned+0x22>
 800ac2c:	e7ef      	b.n	800ac0e <sbrk_aligned+0x1e>
 800ac2e:	bf00      	nop
 800ac30:	2000499c 	.word	0x2000499c

0800ac34 <_malloc_r>:
 800ac34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac38:	1ccd      	adds	r5, r1, #3
 800ac3a:	f025 0503 	bic.w	r5, r5, #3
 800ac3e:	3508      	adds	r5, #8
 800ac40:	2d0c      	cmp	r5, #12
 800ac42:	bf38      	it	cc
 800ac44:	250c      	movcc	r5, #12
 800ac46:	2d00      	cmp	r5, #0
 800ac48:	4606      	mov	r6, r0
 800ac4a:	db01      	blt.n	800ac50 <_malloc_r+0x1c>
 800ac4c:	42a9      	cmp	r1, r5
 800ac4e:	d904      	bls.n	800ac5a <_malloc_r+0x26>
 800ac50:	230c      	movs	r3, #12
 800ac52:	6033      	str	r3, [r6, #0]
 800ac54:	2000      	movs	r0, #0
 800ac56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ad30 <_malloc_r+0xfc>
 800ac5e:	f000 f869 	bl	800ad34 <__malloc_lock>
 800ac62:	f8d8 3000 	ldr.w	r3, [r8]
 800ac66:	461c      	mov	r4, r3
 800ac68:	bb44      	cbnz	r4, 800acbc <_malloc_r+0x88>
 800ac6a:	4629      	mov	r1, r5
 800ac6c:	4630      	mov	r0, r6
 800ac6e:	f7ff ffbf 	bl	800abf0 <sbrk_aligned>
 800ac72:	1c43      	adds	r3, r0, #1
 800ac74:	4604      	mov	r4, r0
 800ac76:	d158      	bne.n	800ad2a <_malloc_r+0xf6>
 800ac78:	f8d8 4000 	ldr.w	r4, [r8]
 800ac7c:	4627      	mov	r7, r4
 800ac7e:	2f00      	cmp	r7, #0
 800ac80:	d143      	bne.n	800ad0a <_malloc_r+0xd6>
 800ac82:	2c00      	cmp	r4, #0
 800ac84:	d04b      	beq.n	800ad1e <_malloc_r+0xea>
 800ac86:	6823      	ldr	r3, [r4, #0]
 800ac88:	4639      	mov	r1, r7
 800ac8a:	4630      	mov	r0, r6
 800ac8c:	eb04 0903 	add.w	r9, r4, r3
 800ac90:	f001 f964 	bl	800bf5c <_sbrk_r>
 800ac94:	4581      	cmp	r9, r0
 800ac96:	d142      	bne.n	800ad1e <_malloc_r+0xea>
 800ac98:	6821      	ldr	r1, [r4, #0]
 800ac9a:	4630      	mov	r0, r6
 800ac9c:	1a6d      	subs	r5, r5, r1
 800ac9e:	4629      	mov	r1, r5
 800aca0:	f7ff ffa6 	bl	800abf0 <sbrk_aligned>
 800aca4:	3001      	adds	r0, #1
 800aca6:	d03a      	beq.n	800ad1e <_malloc_r+0xea>
 800aca8:	6823      	ldr	r3, [r4, #0]
 800acaa:	442b      	add	r3, r5
 800acac:	6023      	str	r3, [r4, #0]
 800acae:	f8d8 3000 	ldr.w	r3, [r8]
 800acb2:	685a      	ldr	r2, [r3, #4]
 800acb4:	bb62      	cbnz	r2, 800ad10 <_malloc_r+0xdc>
 800acb6:	f8c8 7000 	str.w	r7, [r8]
 800acba:	e00f      	b.n	800acdc <_malloc_r+0xa8>
 800acbc:	6822      	ldr	r2, [r4, #0]
 800acbe:	1b52      	subs	r2, r2, r5
 800acc0:	d420      	bmi.n	800ad04 <_malloc_r+0xd0>
 800acc2:	2a0b      	cmp	r2, #11
 800acc4:	d917      	bls.n	800acf6 <_malloc_r+0xc2>
 800acc6:	1961      	adds	r1, r4, r5
 800acc8:	42a3      	cmp	r3, r4
 800acca:	6025      	str	r5, [r4, #0]
 800accc:	bf18      	it	ne
 800acce:	6059      	strne	r1, [r3, #4]
 800acd0:	6863      	ldr	r3, [r4, #4]
 800acd2:	bf08      	it	eq
 800acd4:	f8c8 1000 	streq.w	r1, [r8]
 800acd8:	5162      	str	r2, [r4, r5]
 800acda:	604b      	str	r3, [r1, #4]
 800acdc:	4630      	mov	r0, r6
 800acde:	f000 f82f 	bl	800ad40 <__malloc_unlock>
 800ace2:	f104 000b 	add.w	r0, r4, #11
 800ace6:	1d23      	adds	r3, r4, #4
 800ace8:	f020 0007 	bic.w	r0, r0, #7
 800acec:	1ac2      	subs	r2, r0, r3
 800acee:	bf1c      	itt	ne
 800acf0:	1a1b      	subne	r3, r3, r0
 800acf2:	50a3      	strne	r3, [r4, r2]
 800acf4:	e7af      	b.n	800ac56 <_malloc_r+0x22>
 800acf6:	6862      	ldr	r2, [r4, #4]
 800acf8:	42a3      	cmp	r3, r4
 800acfa:	bf0c      	ite	eq
 800acfc:	f8c8 2000 	streq.w	r2, [r8]
 800ad00:	605a      	strne	r2, [r3, #4]
 800ad02:	e7eb      	b.n	800acdc <_malloc_r+0xa8>
 800ad04:	4623      	mov	r3, r4
 800ad06:	6864      	ldr	r4, [r4, #4]
 800ad08:	e7ae      	b.n	800ac68 <_malloc_r+0x34>
 800ad0a:	463c      	mov	r4, r7
 800ad0c:	687f      	ldr	r7, [r7, #4]
 800ad0e:	e7b6      	b.n	800ac7e <_malloc_r+0x4a>
 800ad10:	461a      	mov	r2, r3
 800ad12:	685b      	ldr	r3, [r3, #4]
 800ad14:	42a3      	cmp	r3, r4
 800ad16:	d1fb      	bne.n	800ad10 <_malloc_r+0xdc>
 800ad18:	2300      	movs	r3, #0
 800ad1a:	6053      	str	r3, [r2, #4]
 800ad1c:	e7de      	b.n	800acdc <_malloc_r+0xa8>
 800ad1e:	230c      	movs	r3, #12
 800ad20:	4630      	mov	r0, r6
 800ad22:	6033      	str	r3, [r6, #0]
 800ad24:	f000 f80c 	bl	800ad40 <__malloc_unlock>
 800ad28:	e794      	b.n	800ac54 <_malloc_r+0x20>
 800ad2a:	6005      	str	r5, [r0, #0]
 800ad2c:	e7d6      	b.n	800acdc <_malloc_r+0xa8>
 800ad2e:	bf00      	nop
 800ad30:	200049a0 	.word	0x200049a0

0800ad34 <__malloc_lock>:
 800ad34:	4801      	ldr	r0, [pc, #4]	@ (800ad3c <__malloc_lock+0x8>)
 800ad36:	f7ff b89a 	b.w	8009e6e <__retarget_lock_acquire_recursive>
 800ad3a:	bf00      	nop
 800ad3c:	20004998 	.word	0x20004998

0800ad40 <__malloc_unlock>:
 800ad40:	4801      	ldr	r0, [pc, #4]	@ (800ad48 <__malloc_unlock+0x8>)
 800ad42:	f7ff b895 	b.w	8009e70 <__retarget_lock_release_recursive>
 800ad46:	bf00      	nop
 800ad48:	20004998 	.word	0x20004998

0800ad4c <_Balloc>:
 800ad4c:	b570      	push	{r4, r5, r6, lr}
 800ad4e:	69c6      	ldr	r6, [r0, #28]
 800ad50:	4604      	mov	r4, r0
 800ad52:	460d      	mov	r5, r1
 800ad54:	b976      	cbnz	r6, 800ad74 <_Balloc+0x28>
 800ad56:	2010      	movs	r0, #16
 800ad58:	f7ff ff42 	bl	800abe0 <malloc>
 800ad5c:	4602      	mov	r2, r0
 800ad5e:	61e0      	str	r0, [r4, #28]
 800ad60:	b920      	cbnz	r0, 800ad6c <_Balloc+0x20>
 800ad62:	216b      	movs	r1, #107	@ 0x6b
 800ad64:	4b17      	ldr	r3, [pc, #92]	@ (800adc4 <_Balloc+0x78>)
 800ad66:	4818      	ldr	r0, [pc, #96]	@ (800adc8 <_Balloc+0x7c>)
 800ad68:	f001 f908 	bl	800bf7c <__assert_func>
 800ad6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad70:	6006      	str	r6, [r0, #0]
 800ad72:	60c6      	str	r6, [r0, #12]
 800ad74:	69e6      	ldr	r6, [r4, #28]
 800ad76:	68f3      	ldr	r3, [r6, #12]
 800ad78:	b183      	cbz	r3, 800ad9c <_Balloc+0x50>
 800ad7a:	69e3      	ldr	r3, [r4, #28]
 800ad7c:	68db      	ldr	r3, [r3, #12]
 800ad7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ad82:	b9b8      	cbnz	r0, 800adb4 <_Balloc+0x68>
 800ad84:	2101      	movs	r1, #1
 800ad86:	fa01 f605 	lsl.w	r6, r1, r5
 800ad8a:	1d72      	adds	r2, r6, #5
 800ad8c:	4620      	mov	r0, r4
 800ad8e:	0092      	lsls	r2, r2, #2
 800ad90:	f001 f912 	bl	800bfb8 <_calloc_r>
 800ad94:	b160      	cbz	r0, 800adb0 <_Balloc+0x64>
 800ad96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ad9a:	e00e      	b.n	800adba <_Balloc+0x6e>
 800ad9c:	2221      	movs	r2, #33	@ 0x21
 800ad9e:	2104      	movs	r1, #4
 800ada0:	4620      	mov	r0, r4
 800ada2:	f001 f909 	bl	800bfb8 <_calloc_r>
 800ada6:	69e3      	ldr	r3, [r4, #28]
 800ada8:	60f0      	str	r0, [r6, #12]
 800adaa:	68db      	ldr	r3, [r3, #12]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d1e4      	bne.n	800ad7a <_Balloc+0x2e>
 800adb0:	2000      	movs	r0, #0
 800adb2:	bd70      	pop	{r4, r5, r6, pc}
 800adb4:	6802      	ldr	r2, [r0, #0]
 800adb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800adba:	2300      	movs	r3, #0
 800adbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800adc0:	e7f7      	b.n	800adb2 <_Balloc+0x66>
 800adc2:	bf00      	nop
 800adc4:	0800ca6a 	.word	0x0800ca6a
 800adc8:	0800caea 	.word	0x0800caea

0800adcc <_Bfree>:
 800adcc:	b570      	push	{r4, r5, r6, lr}
 800adce:	69c6      	ldr	r6, [r0, #28]
 800add0:	4605      	mov	r5, r0
 800add2:	460c      	mov	r4, r1
 800add4:	b976      	cbnz	r6, 800adf4 <_Bfree+0x28>
 800add6:	2010      	movs	r0, #16
 800add8:	f7ff ff02 	bl	800abe0 <malloc>
 800addc:	4602      	mov	r2, r0
 800adde:	61e8      	str	r0, [r5, #28]
 800ade0:	b920      	cbnz	r0, 800adec <_Bfree+0x20>
 800ade2:	218f      	movs	r1, #143	@ 0x8f
 800ade4:	4b08      	ldr	r3, [pc, #32]	@ (800ae08 <_Bfree+0x3c>)
 800ade6:	4809      	ldr	r0, [pc, #36]	@ (800ae0c <_Bfree+0x40>)
 800ade8:	f001 f8c8 	bl	800bf7c <__assert_func>
 800adec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800adf0:	6006      	str	r6, [r0, #0]
 800adf2:	60c6      	str	r6, [r0, #12]
 800adf4:	b13c      	cbz	r4, 800ae06 <_Bfree+0x3a>
 800adf6:	69eb      	ldr	r3, [r5, #28]
 800adf8:	6862      	ldr	r2, [r4, #4]
 800adfa:	68db      	ldr	r3, [r3, #12]
 800adfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ae00:	6021      	str	r1, [r4, #0]
 800ae02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ae06:	bd70      	pop	{r4, r5, r6, pc}
 800ae08:	0800ca6a 	.word	0x0800ca6a
 800ae0c:	0800caea 	.word	0x0800caea

0800ae10 <__multadd>:
 800ae10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae14:	4607      	mov	r7, r0
 800ae16:	460c      	mov	r4, r1
 800ae18:	461e      	mov	r6, r3
 800ae1a:	2000      	movs	r0, #0
 800ae1c:	690d      	ldr	r5, [r1, #16]
 800ae1e:	f101 0c14 	add.w	ip, r1, #20
 800ae22:	f8dc 3000 	ldr.w	r3, [ip]
 800ae26:	3001      	adds	r0, #1
 800ae28:	b299      	uxth	r1, r3
 800ae2a:	fb02 6101 	mla	r1, r2, r1, r6
 800ae2e:	0c1e      	lsrs	r6, r3, #16
 800ae30:	0c0b      	lsrs	r3, r1, #16
 800ae32:	fb02 3306 	mla	r3, r2, r6, r3
 800ae36:	b289      	uxth	r1, r1
 800ae38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ae3c:	4285      	cmp	r5, r0
 800ae3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ae42:	f84c 1b04 	str.w	r1, [ip], #4
 800ae46:	dcec      	bgt.n	800ae22 <__multadd+0x12>
 800ae48:	b30e      	cbz	r6, 800ae8e <__multadd+0x7e>
 800ae4a:	68a3      	ldr	r3, [r4, #8]
 800ae4c:	42ab      	cmp	r3, r5
 800ae4e:	dc19      	bgt.n	800ae84 <__multadd+0x74>
 800ae50:	6861      	ldr	r1, [r4, #4]
 800ae52:	4638      	mov	r0, r7
 800ae54:	3101      	adds	r1, #1
 800ae56:	f7ff ff79 	bl	800ad4c <_Balloc>
 800ae5a:	4680      	mov	r8, r0
 800ae5c:	b928      	cbnz	r0, 800ae6a <__multadd+0x5a>
 800ae5e:	4602      	mov	r2, r0
 800ae60:	21ba      	movs	r1, #186	@ 0xba
 800ae62:	4b0c      	ldr	r3, [pc, #48]	@ (800ae94 <__multadd+0x84>)
 800ae64:	480c      	ldr	r0, [pc, #48]	@ (800ae98 <__multadd+0x88>)
 800ae66:	f001 f889 	bl	800bf7c <__assert_func>
 800ae6a:	6922      	ldr	r2, [r4, #16]
 800ae6c:	f104 010c 	add.w	r1, r4, #12
 800ae70:	3202      	adds	r2, #2
 800ae72:	0092      	lsls	r2, r2, #2
 800ae74:	300c      	adds	r0, #12
 800ae76:	f7ff f80a 	bl	8009e8e <memcpy>
 800ae7a:	4621      	mov	r1, r4
 800ae7c:	4638      	mov	r0, r7
 800ae7e:	f7ff ffa5 	bl	800adcc <_Bfree>
 800ae82:	4644      	mov	r4, r8
 800ae84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ae88:	3501      	adds	r5, #1
 800ae8a:	615e      	str	r6, [r3, #20]
 800ae8c:	6125      	str	r5, [r4, #16]
 800ae8e:	4620      	mov	r0, r4
 800ae90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae94:	0800cad9 	.word	0x0800cad9
 800ae98:	0800caea 	.word	0x0800caea

0800ae9c <__hi0bits>:
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800aea2:	bf3a      	itte	cc
 800aea4:	0403      	lslcc	r3, r0, #16
 800aea6:	2010      	movcc	r0, #16
 800aea8:	2000      	movcs	r0, #0
 800aeaa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aeae:	bf3c      	itt	cc
 800aeb0:	021b      	lslcc	r3, r3, #8
 800aeb2:	3008      	addcc	r0, #8
 800aeb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aeb8:	bf3c      	itt	cc
 800aeba:	011b      	lslcc	r3, r3, #4
 800aebc:	3004      	addcc	r0, #4
 800aebe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aec2:	bf3c      	itt	cc
 800aec4:	009b      	lslcc	r3, r3, #2
 800aec6:	3002      	addcc	r0, #2
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	db05      	blt.n	800aed8 <__hi0bits+0x3c>
 800aecc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800aed0:	f100 0001 	add.w	r0, r0, #1
 800aed4:	bf08      	it	eq
 800aed6:	2020      	moveq	r0, #32
 800aed8:	4770      	bx	lr

0800aeda <__lo0bits>:
 800aeda:	6803      	ldr	r3, [r0, #0]
 800aedc:	4602      	mov	r2, r0
 800aede:	f013 0007 	ands.w	r0, r3, #7
 800aee2:	d00b      	beq.n	800aefc <__lo0bits+0x22>
 800aee4:	07d9      	lsls	r1, r3, #31
 800aee6:	d421      	bmi.n	800af2c <__lo0bits+0x52>
 800aee8:	0798      	lsls	r0, r3, #30
 800aeea:	bf49      	itett	mi
 800aeec:	085b      	lsrmi	r3, r3, #1
 800aeee:	089b      	lsrpl	r3, r3, #2
 800aef0:	2001      	movmi	r0, #1
 800aef2:	6013      	strmi	r3, [r2, #0]
 800aef4:	bf5c      	itt	pl
 800aef6:	2002      	movpl	r0, #2
 800aef8:	6013      	strpl	r3, [r2, #0]
 800aefa:	4770      	bx	lr
 800aefc:	b299      	uxth	r1, r3
 800aefe:	b909      	cbnz	r1, 800af04 <__lo0bits+0x2a>
 800af00:	2010      	movs	r0, #16
 800af02:	0c1b      	lsrs	r3, r3, #16
 800af04:	b2d9      	uxtb	r1, r3
 800af06:	b909      	cbnz	r1, 800af0c <__lo0bits+0x32>
 800af08:	3008      	adds	r0, #8
 800af0a:	0a1b      	lsrs	r3, r3, #8
 800af0c:	0719      	lsls	r1, r3, #28
 800af0e:	bf04      	itt	eq
 800af10:	091b      	lsreq	r3, r3, #4
 800af12:	3004      	addeq	r0, #4
 800af14:	0799      	lsls	r1, r3, #30
 800af16:	bf04      	itt	eq
 800af18:	089b      	lsreq	r3, r3, #2
 800af1a:	3002      	addeq	r0, #2
 800af1c:	07d9      	lsls	r1, r3, #31
 800af1e:	d403      	bmi.n	800af28 <__lo0bits+0x4e>
 800af20:	085b      	lsrs	r3, r3, #1
 800af22:	f100 0001 	add.w	r0, r0, #1
 800af26:	d003      	beq.n	800af30 <__lo0bits+0x56>
 800af28:	6013      	str	r3, [r2, #0]
 800af2a:	4770      	bx	lr
 800af2c:	2000      	movs	r0, #0
 800af2e:	4770      	bx	lr
 800af30:	2020      	movs	r0, #32
 800af32:	4770      	bx	lr

0800af34 <__i2b>:
 800af34:	b510      	push	{r4, lr}
 800af36:	460c      	mov	r4, r1
 800af38:	2101      	movs	r1, #1
 800af3a:	f7ff ff07 	bl	800ad4c <_Balloc>
 800af3e:	4602      	mov	r2, r0
 800af40:	b928      	cbnz	r0, 800af4e <__i2b+0x1a>
 800af42:	f240 1145 	movw	r1, #325	@ 0x145
 800af46:	4b04      	ldr	r3, [pc, #16]	@ (800af58 <__i2b+0x24>)
 800af48:	4804      	ldr	r0, [pc, #16]	@ (800af5c <__i2b+0x28>)
 800af4a:	f001 f817 	bl	800bf7c <__assert_func>
 800af4e:	2301      	movs	r3, #1
 800af50:	6144      	str	r4, [r0, #20]
 800af52:	6103      	str	r3, [r0, #16]
 800af54:	bd10      	pop	{r4, pc}
 800af56:	bf00      	nop
 800af58:	0800cad9 	.word	0x0800cad9
 800af5c:	0800caea 	.word	0x0800caea

0800af60 <__multiply>:
 800af60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af64:	4614      	mov	r4, r2
 800af66:	690a      	ldr	r2, [r1, #16]
 800af68:	6923      	ldr	r3, [r4, #16]
 800af6a:	460f      	mov	r7, r1
 800af6c:	429a      	cmp	r2, r3
 800af6e:	bfa2      	ittt	ge
 800af70:	4623      	movge	r3, r4
 800af72:	460c      	movge	r4, r1
 800af74:	461f      	movge	r7, r3
 800af76:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800af7a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800af7e:	68a3      	ldr	r3, [r4, #8]
 800af80:	6861      	ldr	r1, [r4, #4]
 800af82:	eb0a 0609 	add.w	r6, sl, r9
 800af86:	42b3      	cmp	r3, r6
 800af88:	b085      	sub	sp, #20
 800af8a:	bfb8      	it	lt
 800af8c:	3101      	addlt	r1, #1
 800af8e:	f7ff fedd 	bl	800ad4c <_Balloc>
 800af92:	b930      	cbnz	r0, 800afa2 <__multiply+0x42>
 800af94:	4602      	mov	r2, r0
 800af96:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800af9a:	4b43      	ldr	r3, [pc, #268]	@ (800b0a8 <__multiply+0x148>)
 800af9c:	4843      	ldr	r0, [pc, #268]	@ (800b0ac <__multiply+0x14c>)
 800af9e:	f000 ffed 	bl	800bf7c <__assert_func>
 800afa2:	f100 0514 	add.w	r5, r0, #20
 800afa6:	462b      	mov	r3, r5
 800afa8:	2200      	movs	r2, #0
 800afaa:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800afae:	4543      	cmp	r3, r8
 800afb0:	d321      	bcc.n	800aff6 <__multiply+0x96>
 800afb2:	f107 0114 	add.w	r1, r7, #20
 800afb6:	f104 0214 	add.w	r2, r4, #20
 800afba:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800afbe:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800afc2:	9302      	str	r3, [sp, #8]
 800afc4:	1b13      	subs	r3, r2, r4
 800afc6:	3b15      	subs	r3, #21
 800afc8:	f023 0303 	bic.w	r3, r3, #3
 800afcc:	3304      	adds	r3, #4
 800afce:	f104 0715 	add.w	r7, r4, #21
 800afd2:	42ba      	cmp	r2, r7
 800afd4:	bf38      	it	cc
 800afd6:	2304      	movcc	r3, #4
 800afd8:	9301      	str	r3, [sp, #4]
 800afda:	9b02      	ldr	r3, [sp, #8]
 800afdc:	9103      	str	r1, [sp, #12]
 800afde:	428b      	cmp	r3, r1
 800afe0:	d80c      	bhi.n	800affc <__multiply+0x9c>
 800afe2:	2e00      	cmp	r6, #0
 800afe4:	dd03      	ble.n	800afee <__multiply+0x8e>
 800afe6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800afea:	2b00      	cmp	r3, #0
 800afec:	d05a      	beq.n	800b0a4 <__multiply+0x144>
 800afee:	6106      	str	r6, [r0, #16]
 800aff0:	b005      	add	sp, #20
 800aff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aff6:	f843 2b04 	str.w	r2, [r3], #4
 800affa:	e7d8      	b.n	800afae <__multiply+0x4e>
 800affc:	f8b1 a000 	ldrh.w	sl, [r1]
 800b000:	f1ba 0f00 	cmp.w	sl, #0
 800b004:	d023      	beq.n	800b04e <__multiply+0xee>
 800b006:	46a9      	mov	r9, r5
 800b008:	f04f 0c00 	mov.w	ip, #0
 800b00c:	f104 0e14 	add.w	lr, r4, #20
 800b010:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b014:	f8d9 3000 	ldr.w	r3, [r9]
 800b018:	fa1f fb87 	uxth.w	fp, r7
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	fb0a 330b 	mla	r3, sl, fp, r3
 800b022:	4463      	add	r3, ip
 800b024:	f8d9 c000 	ldr.w	ip, [r9]
 800b028:	0c3f      	lsrs	r7, r7, #16
 800b02a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b02e:	fb0a c707 	mla	r7, sl, r7, ip
 800b032:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b036:	b29b      	uxth	r3, r3
 800b038:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b03c:	4572      	cmp	r2, lr
 800b03e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b042:	f849 3b04 	str.w	r3, [r9], #4
 800b046:	d8e3      	bhi.n	800b010 <__multiply+0xb0>
 800b048:	9b01      	ldr	r3, [sp, #4]
 800b04a:	f845 c003 	str.w	ip, [r5, r3]
 800b04e:	9b03      	ldr	r3, [sp, #12]
 800b050:	3104      	adds	r1, #4
 800b052:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b056:	f1b9 0f00 	cmp.w	r9, #0
 800b05a:	d021      	beq.n	800b0a0 <__multiply+0x140>
 800b05c:	46ae      	mov	lr, r5
 800b05e:	f04f 0a00 	mov.w	sl, #0
 800b062:	682b      	ldr	r3, [r5, #0]
 800b064:	f104 0c14 	add.w	ip, r4, #20
 800b068:	f8bc b000 	ldrh.w	fp, [ip]
 800b06c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b070:	b29b      	uxth	r3, r3
 800b072:	fb09 770b 	mla	r7, r9, fp, r7
 800b076:	4457      	add	r7, sl
 800b078:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b07c:	f84e 3b04 	str.w	r3, [lr], #4
 800b080:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b084:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b088:	f8be 3000 	ldrh.w	r3, [lr]
 800b08c:	4562      	cmp	r2, ip
 800b08e:	fb09 330a 	mla	r3, r9, sl, r3
 800b092:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b096:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b09a:	d8e5      	bhi.n	800b068 <__multiply+0x108>
 800b09c:	9f01      	ldr	r7, [sp, #4]
 800b09e:	51eb      	str	r3, [r5, r7]
 800b0a0:	3504      	adds	r5, #4
 800b0a2:	e79a      	b.n	800afda <__multiply+0x7a>
 800b0a4:	3e01      	subs	r6, #1
 800b0a6:	e79c      	b.n	800afe2 <__multiply+0x82>
 800b0a8:	0800cad9 	.word	0x0800cad9
 800b0ac:	0800caea 	.word	0x0800caea

0800b0b0 <__pow5mult>:
 800b0b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0b4:	4615      	mov	r5, r2
 800b0b6:	f012 0203 	ands.w	r2, r2, #3
 800b0ba:	4607      	mov	r7, r0
 800b0bc:	460e      	mov	r6, r1
 800b0be:	d007      	beq.n	800b0d0 <__pow5mult+0x20>
 800b0c0:	4c25      	ldr	r4, [pc, #148]	@ (800b158 <__pow5mult+0xa8>)
 800b0c2:	3a01      	subs	r2, #1
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b0ca:	f7ff fea1 	bl	800ae10 <__multadd>
 800b0ce:	4606      	mov	r6, r0
 800b0d0:	10ad      	asrs	r5, r5, #2
 800b0d2:	d03d      	beq.n	800b150 <__pow5mult+0xa0>
 800b0d4:	69fc      	ldr	r4, [r7, #28]
 800b0d6:	b97c      	cbnz	r4, 800b0f8 <__pow5mult+0x48>
 800b0d8:	2010      	movs	r0, #16
 800b0da:	f7ff fd81 	bl	800abe0 <malloc>
 800b0de:	4602      	mov	r2, r0
 800b0e0:	61f8      	str	r0, [r7, #28]
 800b0e2:	b928      	cbnz	r0, 800b0f0 <__pow5mult+0x40>
 800b0e4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b0e8:	4b1c      	ldr	r3, [pc, #112]	@ (800b15c <__pow5mult+0xac>)
 800b0ea:	481d      	ldr	r0, [pc, #116]	@ (800b160 <__pow5mult+0xb0>)
 800b0ec:	f000 ff46 	bl	800bf7c <__assert_func>
 800b0f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b0f4:	6004      	str	r4, [r0, #0]
 800b0f6:	60c4      	str	r4, [r0, #12]
 800b0f8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b0fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b100:	b94c      	cbnz	r4, 800b116 <__pow5mult+0x66>
 800b102:	f240 2171 	movw	r1, #625	@ 0x271
 800b106:	4638      	mov	r0, r7
 800b108:	f7ff ff14 	bl	800af34 <__i2b>
 800b10c:	2300      	movs	r3, #0
 800b10e:	4604      	mov	r4, r0
 800b110:	f8c8 0008 	str.w	r0, [r8, #8]
 800b114:	6003      	str	r3, [r0, #0]
 800b116:	f04f 0900 	mov.w	r9, #0
 800b11a:	07eb      	lsls	r3, r5, #31
 800b11c:	d50a      	bpl.n	800b134 <__pow5mult+0x84>
 800b11e:	4631      	mov	r1, r6
 800b120:	4622      	mov	r2, r4
 800b122:	4638      	mov	r0, r7
 800b124:	f7ff ff1c 	bl	800af60 <__multiply>
 800b128:	4680      	mov	r8, r0
 800b12a:	4631      	mov	r1, r6
 800b12c:	4638      	mov	r0, r7
 800b12e:	f7ff fe4d 	bl	800adcc <_Bfree>
 800b132:	4646      	mov	r6, r8
 800b134:	106d      	asrs	r5, r5, #1
 800b136:	d00b      	beq.n	800b150 <__pow5mult+0xa0>
 800b138:	6820      	ldr	r0, [r4, #0]
 800b13a:	b938      	cbnz	r0, 800b14c <__pow5mult+0x9c>
 800b13c:	4622      	mov	r2, r4
 800b13e:	4621      	mov	r1, r4
 800b140:	4638      	mov	r0, r7
 800b142:	f7ff ff0d 	bl	800af60 <__multiply>
 800b146:	6020      	str	r0, [r4, #0]
 800b148:	f8c0 9000 	str.w	r9, [r0]
 800b14c:	4604      	mov	r4, r0
 800b14e:	e7e4      	b.n	800b11a <__pow5mult+0x6a>
 800b150:	4630      	mov	r0, r6
 800b152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b156:	bf00      	nop
 800b158:	0800cb44 	.word	0x0800cb44
 800b15c:	0800ca6a 	.word	0x0800ca6a
 800b160:	0800caea 	.word	0x0800caea

0800b164 <__lshift>:
 800b164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b168:	460c      	mov	r4, r1
 800b16a:	4607      	mov	r7, r0
 800b16c:	4691      	mov	r9, r2
 800b16e:	6923      	ldr	r3, [r4, #16]
 800b170:	6849      	ldr	r1, [r1, #4]
 800b172:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b176:	68a3      	ldr	r3, [r4, #8]
 800b178:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b17c:	f108 0601 	add.w	r6, r8, #1
 800b180:	42b3      	cmp	r3, r6
 800b182:	db0b      	blt.n	800b19c <__lshift+0x38>
 800b184:	4638      	mov	r0, r7
 800b186:	f7ff fde1 	bl	800ad4c <_Balloc>
 800b18a:	4605      	mov	r5, r0
 800b18c:	b948      	cbnz	r0, 800b1a2 <__lshift+0x3e>
 800b18e:	4602      	mov	r2, r0
 800b190:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b194:	4b27      	ldr	r3, [pc, #156]	@ (800b234 <__lshift+0xd0>)
 800b196:	4828      	ldr	r0, [pc, #160]	@ (800b238 <__lshift+0xd4>)
 800b198:	f000 fef0 	bl	800bf7c <__assert_func>
 800b19c:	3101      	adds	r1, #1
 800b19e:	005b      	lsls	r3, r3, #1
 800b1a0:	e7ee      	b.n	800b180 <__lshift+0x1c>
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	f100 0114 	add.w	r1, r0, #20
 800b1a8:	f100 0210 	add.w	r2, r0, #16
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	4553      	cmp	r3, sl
 800b1b0:	db33      	blt.n	800b21a <__lshift+0xb6>
 800b1b2:	6920      	ldr	r0, [r4, #16]
 800b1b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b1b8:	f104 0314 	add.w	r3, r4, #20
 800b1bc:	f019 091f 	ands.w	r9, r9, #31
 800b1c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b1c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b1c8:	d02b      	beq.n	800b222 <__lshift+0xbe>
 800b1ca:	468a      	mov	sl, r1
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	f1c9 0e20 	rsb	lr, r9, #32
 800b1d2:	6818      	ldr	r0, [r3, #0]
 800b1d4:	fa00 f009 	lsl.w	r0, r0, r9
 800b1d8:	4310      	orrs	r0, r2
 800b1da:	f84a 0b04 	str.w	r0, [sl], #4
 800b1de:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1e2:	459c      	cmp	ip, r3
 800b1e4:	fa22 f20e 	lsr.w	r2, r2, lr
 800b1e8:	d8f3      	bhi.n	800b1d2 <__lshift+0x6e>
 800b1ea:	ebac 0304 	sub.w	r3, ip, r4
 800b1ee:	3b15      	subs	r3, #21
 800b1f0:	f023 0303 	bic.w	r3, r3, #3
 800b1f4:	3304      	adds	r3, #4
 800b1f6:	f104 0015 	add.w	r0, r4, #21
 800b1fa:	4584      	cmp	ip, r0
 800b1fc:	bf38      	it	cc
 800b1fe:	2304      	movcc	r3, #4
 800b200:	50ca      	str	r2, [r1, r3]
 800b202:	b10a      	cbz	r2, 800b208 <__lshift+0xa4>
 800b204:	f108 0602 	add.w	r6, r8, #2
 800b208:	3e01      	subs	r6, #1
 800b20a:	4638      	mov	r0, r7
 800b20c:	4621      	mov	r1, r4
 800b20e:	612e      	str	r6, [r5, #16]
 800b210:	f7ff fddc 	bl	800adcc <_Bfree>
 800b214:	4628      	mov	r0, r5
 800b216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b21a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b21e:	3301      	adds	r3, #1
 800b220:	e7c5      	b.n	800b1ae <__lshift+0x4a>
 800b222:	3904      	subs	r1, #4
 800b224:	f853 2b04 	ldr.w	r2, [r3], #4
 800b228:	459c      	cmp	ip, r3
 800b22a:	f841 2f04 	str.w	r2, [r1, #4]!
 800b22e:	d8f9      	bhi.n	800b224 <__lshift+0xc0>
 800b230:	e7ea      	b.n	800b208 <__lshift+0xa4>
 800b232:	bf00      	nop
 800b234:	0800cad9 	.word	0x0800cad9
 800b238:	0800caea 	.word	0x0800caea

0800b23c <__mcmp>:
 800b23c:	4603      	mov	r3, r0
 800b23e:	690a      	ldr	r2, [r1, #16]
 800b240:	6900      	ldr	r0, [r0, #16]
 800b242:	b530      	push	{r4, r5, lr}
 800b244:	1a80      	subs	r0, r0, r2
 800b246:	d10e      	bne.n	800b266 <__mcmp+0x2a>
 800b248:	3314      	adds	r3, #20
 800b24a:	3114      	adds	r1, #20
 800b24c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b250:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b254:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b258:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b25c:	4295      	cmp	r5, r2
 800b25e:	d003      	beq.n	800b268 <__mcmp+0x2c>
 800b260:	d205      	bcs.n	800b26e <__mcmp+0x32>
 800b262:	f04f 30ff 	mov.w	r0, #4294967295
 800b266:	bd30      	pop	{r4, r5, pc}
 800b268:	42a3      	cmp	r3, r4
 800b26a:	d3f3      	bcc.n	800b254 <__mcmp+0x18>
 800b26c:	e7fb      	b.n	800b266 <__mcmp+0x2a>
 800b26e:	2001      	movs	r0, #1
 800b270:	e7f9      	b.n	800b266 <__mcmp+0x2a>
	...

0800b274 <__mdiff>:
 800b274:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b278:	4689      	mov	r9, r1
 800b27a:	4606      	mov	r6, r0
 800b27c:	4611      	mov	r1, r2
 800b27e:	4648      	mov	r0, r9
 800b280:	4614      	mov	r4, r2
 800b282:	f7ff ffdb 	bl	800b23c <__mcmp>
 800b286:	1e05      	subs	r5, r0, #0
 800b288:	d112      	bne.n	800b2b0 <__mdiff+0x3c>
 800b28a:	4629      	mov	r1, r5
 800b28c:	4630      	mov	r0, r6
 800b28e:	f7ff fd5d 	bl	800ad4c <_Balloc>
 800b292:	4602      	mov	r2, r0
 800b294:	b928      	cbnz	r0, 800b2a2 <__mdiff+0x2e>
 800b296:	f240 2137 	movw	r1, #567	@ 0x237
 800b29a:	4b3e      	ldr	r3, [pc, #248]	@ (800b394 <__mdiff+0x120>)
 800b29c:	483e      	ldr	r0, [pc, #248]	@ (800b398 <__mdiff+0x124>)
 800b29e:	f000 fe6d 	bl	800bf7c <__assert_func>
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b2a8:	4610      	mov	r0, r2
 800b2aa:	b003      	add	sp, #12
 800b2ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2b0:	bfbc      	itt	lt
 800b2b2:	464b      	movlt	r3, r9
 800b2b4:	46a1      	movlt	r9, r4
 800b2b6:	4630      	mov	r0, r6
 800b2b8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b2bc:	bfba      	itte	lt
 800b2be:	461c      	movlt	r4, r3
 800b2c0:	2501      	movlt	r5, #1
 800b2c2:	2500      	movge	r5, #0
 800b2c4:	f7ff fd42 	bl	800ad4c <_Balloc>
 800b2c8:	4602      	mov	r2, r0
 800b2ca:	b918      	cbnz	r0, 800b2d4 <__mdiff+0x60>
 800b2cc:	f240 2145 	movw	r1, #581	@ 0x245
 800b2d0:	4b30      	ldr	r3, [pc, #192]	@ (800b394 <__mdiff+0x120>)
 800b2d2:	e7e3      	b.n	800b29c <__mdiff+0x28>
 800b2d4:	f100 0b14 	add.w	fp, r0, #20
 800b2d8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b2dc:	f109 0310 	add.w	r3, r9, #16
 800b2e0:	60c5      	str	r5, [r0, #12]
 800b2e2:	f04f 0c00 	mov.w	ip, #0
 800b2e6:	f109 0514 	add.w	r5, r9, #20
 800b2ea:	46d9      	mov	r9, fp
 800b2ec:	6926      	ldr	r6, [r4, #16]
 800b2ee:	f104 0e14 	add.w	lr, r4, #20
 800b2f2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b2f6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b2fa:	9301      	str	r3, [sp, #4]
 800b2fc:	9b01      	ldr	r3, [sp, #4]
 800b2fe:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b302:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b306:	b281      	uxth	r1, r0
 800b308:	9301      	str	r3, [sp, #4]
 800b30a:	fa1f f38a 	uxth.w	r3, sl
 800b30e:	1a5b      	subs	r3, r3, r1
 800b310:	0c00      	lsrs	r0, r0, #16
 800b312:	4463      	add	r3, ip
 800b314:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b318:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b31c:	b29b      	uxth	r3, r3
 800b31e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b322:	4576      	cmp	r6, lr
 800b324:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b328:	f849 3b04 	str.w	r3, [r9], #4
 800b32c:	d8e6      	bhi.n	800b2fc <__mdiff+0x88>
 800b32e:	1b33      	subs	r3, r6, r4
 800b330:	3b15      	subs	r3, #21
 800b332:	f023 0303 	bic.w	r3, r3, #3
 800b336:	3415      	adds	r4, #21
 800b338:	3304      	adds	r3, #4
 800b33a:	42a6      	cmp	r6, r4
 800b33c:	bf38      	it	cc
 800b33e:	2304      	movcc	r3, #4
 800b340:	441d      	add	r5, r3
 800b342:	445b      	add	r3, fp
 800b344:	461e      	mov	r6, r3
 800b346:	462c      	mov	r4, r5
 800b348:	4544      	cmp	r4, r8
 800b34a:	d30e      	bcc.n	800b36a <__mdiff+0xf6>
 800b34c:	f108 0103 	add.w	r1, r8, #3
 800b350:	1b49      	subs	r1, r1, r5
 800b352:	f021 0103 	bic.w	r1, r1, #3
 800b356:	3d03      	subs	r5, #3
 800b358:	45a8      	cmp	r8, r5
 800b35a:	bf38      	it	cc
 800b35c:	2100      	movcc	r1, #0
 800b35e:	440b      	add	r3, r1
 800b360:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b364:	b199      	cbz	r1, 800b38e <__mdiff+0x11a>
 800b366:	6117      	str	r7, [r2, #16]
 800b368:	e79e      	b.n	800b2a8 <__mdiff+0x34>
 800b36a:	46e6      	mov	lr, ip
 800b36c:	f854 1b04 	ldr.w	r1, [r4], #4
 800b370:	fa1f fc81 	uxth.w	ip, r1
 800b374:	44f4      	add	ip, lr
 800b376:	0c08      	lsrs	r0, r1, #16
 800b378:	4471      	add	r1, lr
 800b37a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b37e:	b289      	uxth	r1, r1
 800b380:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b384:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b388:	f846 1b04 	str.w	r1, [r6], #4
 800b38c:	e7dc      	b.n	800b348 <__mdiff+0xd4>
 800b38e:	3f01      	subs	r7, #1
 800b390:	e7e6      	b.n	800b360 <__mdiff+0xec>
 800b392:	bf00      	nop
 800b394:	0800cad9 	.word	0x0800cad9
 800b398:	0800caea 	.word	0x0800caea

0800b39c <__d2b>:
 800b39c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800b3a0:	2101      	movs	r1, #1
 800b3a2:	4690      	mov	r8, r2
 800b3a4:	4699      	mov	r9, r3
 800b3a6:	9e08      	ldr	r6, [sp, #32]
 800b3a8:	f7ff fcd0 	bl	800ad4c <_Balloc>
 800b3ac:	4604      	mov	r4, r0
 800b3ae:	b930      	cbnz	r0, 800b3be <__d2b+0x22>
 800b3b0:	4602      	mov	r2, r0
 800b3b2:	f240 310f 	movw	r1, #783	@ 0x30f
 800b3b6:	4b23      	ldr	r3, [pc, #140]	@ (800b444 <__d2b+0xa8>)
 800b3b8:	4823      	ldr	r0, [pc, #140]	@ (800b448 <__d2b+0xac>)
 800b3ba:	f000 fddf 	bl	800bf7c <__assert_func>
 800b3be:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b3c2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b3c6:	b10d      	cbz	r5, 800b3cc <__d2b+0x30>
 800b3c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b3cc:	9301      	str	r3, [sp, #4]
 800b3ce:	f1b8 0300 	subs.w	r3, r8, #0
 800b3d2:	d024      	beq.n	800b41e <__d2b+0x82>
 800b3d4:	4668      	mov	r0, sp
 800b3d6:	9300      	str	r3, [sp, #0]
 800b3d8:	f7ff fd7f 	bl	800aeda <__lo0bits>
 800b3dc:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b3e0:	b1d8      	cbz	r0, 800b41a <__d2b+0x7e>
 800b3e2:	f1c0 0320 	rsb	r3, r0, #32
 800b3e6:	fa02 f303 	lsl.w	r3, r2, r3
 800b3ea:	430b      	orrs	r3, r1
 800b3ec:	40c2      	lsrs	r2, r0
 800b3ee:	6163      	str	r3, [r4, #20]
 800b3f0:	9201      	str	r2, [sp, #4]
 800b3f2:	9b01      	ldr	r3, [sp, #4]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	bf0c      	ite	eq
 800b3f8:	2201      	moveq	r2, #1
 800b3fa:	2202      	movne	r2, #2
 800b3fc:	61a3      	str	r3, [r4, #24]
 800b3fe:	6122      	str	r2, [r4, #16]
 800b400:	b1ad      	cbz	r5, 800b42e <__d2b+0x92>
 800b402:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b406:	4405      	add	r5, r0
 800b408:	6035      	str	r5, [r6, #0]
 800b40a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b40e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b410:	6018      	str	r0, [r3, #0]
 800b412:	4620      	mov	r0, r4
 800b414:	b002      	add	sp, #8
 800b416:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800b41a:	6161      	str	r1, [r4, #20]
 800b41c:	e7e9      	b.n	800b3f2 <__d2b+0x56>
 800b41e:	a801      	add	r0, sp, #4
 800b420:	f7ff fd5b 	bl	800aeda <__lo0bits>
 800b424:	9b01      	ldr	r3, [sp, #4]
 800b426:	2201      	movs	r2, #1
 800b428:	6163      	str	r3, [r4, #20]
 800b42a:	3020      	adds	r0, #32
 800b42c:	e7e7      	b.n	800b3fe <__d2b+0x62>
 800b42e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b432:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b436:	6030      	str	r0, [r6, #0]
 800b438:	6918      	ldr	r0, [r3, #16]
 800b43a:	f7ff fd2f 	bl	800ae9c <__hi0bits>
 800b43e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b442:	e7e4      	b.n	800b40e <__d2b+0x72>
 800b444:	0800cad9 	.word	0x0800cad9
 800b448:	0800caea 	.word	0x0800caea

0800b44c <__ssputs_r>:
 800b44c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b450:	461f      	mov	r7, r3
 800b452:	688e      	ldr	r6, [r1, #8]
 800b454:	4682      	mov	sl, r0
 800b456:	42be      	cmp	r6, r7
 800b458:	460c      	mov	r4, r1
 800b45a:	4690      	mov	r8, r2
 800b45c:	680b      	ldr	r3, [r1, #0]
 800b45e:	d82d      	bhi.n	800b4bc <__ssputs_r+0x70>
 800b460:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b464:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b468:	d026      	beq.n	800b4b8 <__ssputs_r+0x6c>
 800b46a:	6965      	ldr	r5, [r4, #20]
 800b46c:	6909      	ldr	r1, [r1, #16]
 800b46e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b472:	eba3 0901 	sub.w	r9, r3, r1
 800b476:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b47a:	1c7b      	adds	r3, r7, #1
 800b47c:	444b      	add	r3, r9
 800b47e:	106d      	asrs	r5, r5, #1
 800b480:	429d      	cmp	r5, r3
 800b482:	bf38      	it	cc
 800b484:	461d      	movcc	r5, r3
 800b486:	0553      	lsls	r3, r2, #21
 800b488:	d527      	bpl.n	800b4da <__ssputs_r+0x8e>
 800b48a:	4629      	mov	r1, r5
 800b48c:	f7ff fbd2 	bl	800ac34 <_malloc_r>
 800b490:	4606      	mov	r6, r0
 800b492:	b360      	cbz	r0, 800b4ee <__ssputs_r+0xa2>
 800b494:	464a      	mov	r2, r9
 800b496:	6921      	ldr	r1, [r4, #16]
 800b498:	f7fe fcf9 	bl	8009e8e <memcpy>
 800b49c:	89a3      	ldrh	r3, [r4, #12]
 800b49e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b4a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4a6:	81a3      	strh	r3, [r4, #12]
 800b4a8:	6126      	str	r6, [r4, #16]
 800b4aa:	444e      	add	r6, r9
 800b4ac:	6026      	str	r6, [r4, #0]
 800b4ae:	463e      	mov	r6, r7
 800b4b0:	6165      	str	r5, [r4, #20]
 800b4b2:	eba5 0509 	sub.w	r5, r5, r9
 800b4b6:	60a5      	str	r5, [r4, #8]
 800b4b8:	42be      	cmp	r6, r7
 800b4ba:	d900      	bls.n	800b4be <__ssputs_r+0x72>
 800b4bc:	463e      	mov	r6, r7
 800b4be:	4632      	mov	r2, r6
 800b4c0:	4641      	mov	r1, r8
 800b4c2:	6820      	ldr	r0, [r4, #0]
 800b4c4:	f7fe fbd3 	bl	8009c6e <memmove>
 800b4c8:	2000      	movs	r0, #0
 800b4ca:	68a3      	ldr	r3, [r4, #8]
 800b4cc:	1b9b      	subs	r3, r3, r6
 800b4ce:	60a3      	str	r3, [r4, #8]
 800b4d0:	6823      	ldr	r3, [r4, #0]
 800b4d2:	4433      	add	r3, r6
 800b4d4:	6023      	str	r3, [r4, #0]
 800b4d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4da:	462a      	mov	r2, r5
 800b4dc:	f000 fd92 	bl	800c004 <_realloc_r>
 800b4e0:	4606      	mov	r6, r0
 800b4e2:	2800      	cmp	r0, #0
 800b4e4:	d1e0      	bne.n	800b4a8 <__ssputs_r+0x5c>
 800b4e6:	4650      	mov	r0, sl
 800b4e8:	6921      	ldr	r1, [r4, #16]
 800b4ea:	f7ff fb31 	bl	800ab50 <_free_r>
 800b4ee:	230c      	movs	r3, #12
 800b4f0:	f8ca 3000 	str.w	r3, [sl]
 800b4f4:	89a3      	ldrh	r3, [r4, #12]
 800b4f6:	f04f 30ff 	mov.w	r0, #4294967295
 800b4fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b4fe:	81a3      	strh	r3, [r4, #12]
 800b500:	e7e9      	b.n	800b4d6 <__ssputs_r+0x8a>
	...

0800b504 <_svfiprintf_r>:
 800b504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b508:	4698      	mov	r8, r3
 800b50a:	898b      	ldrh	r3, [r1, #12]
 800b50c:	4607      	mov	r7, r0
 800b50e:	061b      	lsls	r3, r3, #24
 800b510:	460d      	mov	r5, r1
 800b512:	4614      	mov	r4, r2
 800b514:	b09d      	sub	sp, #116	@ 0x74
 800b516:	d510      	bpl.n	800b53a <_svfiprintf_r+0x36>
 800b518:	690b      	ldr	r3, [r1, #16]
 800b51a:	b973      	cbnz	r3, 800b53a <_svfiprintf_r+0x36>
 800b51c:	2140      	movs	r1, #64	@ 0x40
 800b51e:	f7ff fb89 	bl	800ac34 <_malloc_r>
 800b522:	6028      	str	r0, [r5, #0]
 800b524:	6128      	str	r0, [r5, #16]
 800b526:	b930      	cbnz	r0, 800b536 <_svfiprintf_r+0x32>
 800b528:	230c      	movs	r3, #12
 800b52a:	603b      	str	r3, [r7, #0]
 800b52c:	f04f 30ff 	mov.w	r0, #4294967295
 800b530:	b01d      	add	sp, #116	@ 0x74
 800b532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b536:	2340      	movs	r3, #64	@ 0x40
 800b538:	616b      	str	r3, [r5, #20]
 800b53a:	2300      	movs	r3, #0
 800b53c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b53e:	2320      	movs	r3, #32
 800b540:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b544:	2330      	movs	r3, #48	@ 0x30
 800b546:	f04f 0901 	mov.w	r9, #1
 800b54a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b54e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800b6e8 <_svfiprintf_r+0x1e4>
 800b552:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b556:	4623      	mov	r3, r4
 800b558:	469a      	mov	sl, r3
 800b55a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b55e:	b10a      	cbz	r2, 800b564 <_svfiprintf_r+0x60>
 800b560:	2a25      	cmp	r2, #37	@ 0x25
 800b562:	d1f9      	bne.n	800b558 <_svfiprintf_r+0x54>
 800b564:	ebba 0b04 	subs.w	fp, sl, r4
 800b568:	d00b      	beq.n	800b582 <_svfiprintf_r+0x7e>
 800b56a:	465b      	mov	r3, fp
 800b56c:	4622      	mov	r2, r4
 800b56e:	4629      	mov	r1, r5
 800b570:	4638      	mov	r0, r7
 800b572:	f7ff ff6b 	bl	800b44c <__ssputs_r>
 800b576:	3001      	adds	r0, #1
 800b578:	f000 80a7 	beq.w	800b6ca <_svfiprintf_r+0x1c6>
 800b57c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b57e:	445a      	add	r2, fp
 800b580:	9209      	str	r2, [sp, #36]	@ 0x24
 800b582:	f89a 3000 	ldrb.w	r3, [sl]
 800b586:	2b00      	cmp	r3, #0
 800b588:	f000 809f 	beq.w	800b6ca <_svfiprintf_r+0x1c6>
 800b58c:	2300      	movs	r3, #0
 800b58e:	f04f 32ff 	mov.w	r2, #4294967295
 800b592:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b596:	f10a 0a01 	add.w	sl, sl, #1
 800b59a:	9304      	str	r3, [sp, #16]
 800b59c:	9307      	str	r3, [sp, #28]
 800b59e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b5a2:	931a      	str	r3, [sp, #104]	@ 0x68
 800b5a4:	4654      	mov	r4, sl
 800b5a6:	2205      	movs	r2, #5
 800b5a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5ac:	484e      	ldr	r0, [pc, #312]	@ (800b6e8 <_svfiprintf_r+0x1e4>)
 800b5ae:	f7fe fc60 	bl	8009e72 <memchr>
 800b5b2:	9a04      	ldr	r2, [sp, #16]
 800b5b4:	b9d8      	cbnz	r0, 800b5ee <_svfiprintf_r+0xea>
 800b5b6:	06d0      	lsls	r0, r2, #27
 800b5b8:	bf44      	itt	mi
 800b5ba:	2320      	movmi	r3, #32
 800b5bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5c0:	0711      	lsls	r1, r2, #28
 800b5c2:	bf44      	itt	mi
 800b5c4:	232b      	movmi	r3, #43	@ 0x2b
 800b5c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5ca:	f89a 3000 	ldrb.w	r3, [sl]
 800b5ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800b5d0:	d015      	beq.n	800b5fe <_svfiprintf_r+0xfa>
 800b5d2:	4654      	mov	r4, sl
 800b5d4:	2000      	movs	r0, #0
 800b5d6:	f04f 0c0a 	mov.w	ip, #10
 800b5da:	9a07      	ldr	r2, [sp, #28]
 800b5dc:	4621      	mov	r1, r4
 800b5de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5e2:	3b30      	subs	r3, #48	@ 0x30
 800b5e4:	2b09      	cmp	r3, #9
 800b5e6:	d94b      	bls.n	800b680 <_svfiprintf_r+0x17c>
 800b5e8:	b1b0      	cbz	r0, 800b618 <_svfiprintf_r+0x114>
 800b5ea:	9207      	str	r2, [sp, #28]
 800b5ec:	e014      	b.n	800b618 <_svfiprintf_r+0x114>
 800b5ee:	eba0 0308 	sub.w	r3, r0, r8
 800b5f2:	fa09 f303 	lsl.w	r3, r9, r3
 800b5f6:	4313      	orrs	r3, r2
 800b5f8:	46a2      	mov	sl, r4
 800b5fa:	9304      	str	r3, [sp, #16]
 800b5fc:	e7d2      	b.n	800b5a4 <_svfiprintf_r+0xa0>
 800b5fe:	9b03      	ldr	r3, [sp, #12]
 800b600:	1d19      	adds	r1, r3, #4
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	9103      	str	r1, [sp, #12]
 800b606:	2b00      	cmp	r3, #0
 800b608:	bfbb      	ittet	lt
 800b60a:	425b      	neglt	r3, r3
 800b60c:	f042 0202 	orrlt.w	r2, r2, #2
 800b610:	9307      	strge	r3, [sp, #28]
 800b612:	9307      	strlt	r3, [sp, #28]
 800b614:	bfb8      	it	lt
 800b616:	9204      	strlt	r2, [sp, #16]
 800b618:	7823      	ldrb	r3, [r4, #0]
 800b61a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b61c:	d10a      	bne.n	800b634 <_svfiprintf_r+0x130>
 800b61e:	7863      	ldrb	r3, [r4, #1]
 800b620:	2b2a      	cmp	r3, #42	@ 0x2a
 800b622:	d132      	bne.n	800b68a <_svfiprintf_r+0x186>
 800b624:	9b03      	ldr	r3, [sp, #12]
 800b626:	3402      	adds	r4, #2
 800b628:	1d1a      	adds	r2, r3, #4
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	9203      	str	r2, [sp, #12]
 800b62e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b632:	9305      	str	r3, [sp, #20]
 800b634:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800b6ec <_svfiprintf_r+0x1e8>
 800b638:	2203      	movs	r2, #3
 800b63a:	4650      	mov	r0, sl
 800b63c:	7821      	ldrb	r1, [r4, #0]
 800b63e:	f7fe fc18 	bl	8009e72 <memchr>
 800b642:	b138      	cbz	r0, 800b654 <_svfiprintf_r+0x150>
 800b644:	2240      	movs	r2, #64	@ 0x40
 800b646:	9b04      	ldr	r3, [sp, #16]
 800b648:	eba0 000a 	sub.w	r0, r0, sl
 800b64c:	4082      	lsls	r2, r0
 800b64e:	4313      	orrs	r3, r2
 800b650:	3401      	adds	r4, #1
 800b652:	9304      	str	r3, [sp, #16]
 800b654:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b658:	2206      	movs	r2, #6
 800b65a:	4825      	ldr	r0, [pc, #148]	@ (800b6f0 <_svfiprintf_r+0x1ec>)
 800b65c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b660:	f7fe fc07 	bl	8009e72 <memchr>
 800b664:	2800      	cmp	r0, #0
 800b666:	d036      	beq.n	800b6d6 <_svfiprintf_r+0x1d2>
 800b668:	4b22      	ldr	r3, [pc, #136]	@ (800b6f4 <_svfiprintf_r+0x1f0>)
 800b66a:	bb1b      	cbnz	r3, 800b6b4 <_svfiprintf_r+0x1b0>
 800b66c:	9b03      	ldr	r3, [sp, #12]
 800b66e:	3307      	adds	r3, #7
 800b670:	f023 0307 	bic.w	r3, r3, #7
 800b674:	3308      	adds	r3, #8
 800b676:	9303      	str	r3, [sp, #12]
 800b678:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b67a:	4433      	add	r3, r6
 800b67c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b67e:	e76a      	b.n	800b556 <_svfiprintf_r+0x52>
 800b680:	460c      	mov	r4, r1
 800b682:	2001      	movs	r0, #1
 800b684:	fb0c 3202 	mla	r2, ip, r2, r3
 800b688:	e7a8      	b.n	800b5dc <_svfiprintf_r+0xd8>
 800b68a:	2300      	movs	r3, #0
 800b68c:	f04f 0c0a 	mov.w	ip, #10
 800b690:	4619      	mov	r1, r3
 800b692:	3401      	adds	r4, #1
 800b694:	9305      	str	r3, [sp, #20]
 800b696:	4620      	mov	r0, r4
 800b698:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b69c:	3a30      	subs	r2, #48	@ 0x30
 800b69e:	2a09      	cmp	r2, #9
 800b6a0:	d903      	bls.n	800b6aa <_svfiprintf_r+0x1a6>
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d0c6      	beq.n	800b634 <_svfiprintf_r+0x130>
 800b6a6:	9105      	str	r1, [sp, #20]
 800b6a8:	e7c4      	b.n	800b634 <_svfiprintf_r+0x130>
 800b6aa:	4604      	mov	r4, r0
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6b2:	e7f0      	b.n	800b696 <_svfiprintf_r+0x192>
 800b6b4:	ab03      	add	r3, sp, #12
 800b6b6:	9300      	str	r3, [sp, #0]
 800b6b8:	462a      	mov	r2, r5
 800b6ba:	4638      	mov	r0, r7
 800b6bc:	4b0e      	ldr	r3, [pc, #56]	@ (800b6f8 <_svfiprintf_r+0x1f4>)
 800b6be:	a904      	add	r1, sp, #16
 800b6c0:	f7fd fdc6 	bl	8009250 <_printf_float>
 800b6c4:	1c42      	adds	r2, r0, #1
 800b6c6:	4606      	mov	r6, r0
 800b6c8:	d1d6      	bne.n	800b678 <_svfiprintf_r+0x174>
 800b6ca:	89ab      	ldrh	r3, [r5, #12]
 800b6cc:	065b      	lsls	r3, r3, #25
 800b6ce:	f53f af2d 	bmi.w	800b52c <_svfiprintf_r+0x28>
 800b6d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b6d4:	e72c      	b.n	800b530 <_svfiprintf_r+0x2c>
 800b6d6:	ab03      	add	r3, sp, #12
 800b6d8:	9300      	str	r3, [sp, #0]
 800b6da:	462a      	mov	r2, r5
 800b6dc:	4638      	mov	r0, r7
 800b6de:	4b06      	ldr	r3, [pc, #24]	@ (800b6f8 <_svfiprintf_r+0x1f4>)
 800b6e0:	a904      	add	r1, sp, #16
 800b6e2:	f7fe f853 	bl	800978c <_printf_i>
 800b6e6:	e7ed      	b.n	800b6c4 <_svfiprintf_r+0x1c0>
 800b6e8:	0800cc40 	.word	0x0800cc40
 800b6ec:	0800cc46 	.word	0x0800cc46
 800b6f0:	0800cc4a 	.word	0x0800cc4a
 800b6f4:	08009251 	.word	0x08009251
 800b6f8:	0800b44d 	.word	0x0800b44d

0800b6fc <_sungetc_r>:
 800b6fc:	b538      	push	{r3, r4, r5, lr}
 800b6fe:	1c4b      	adds	r3, r1, #1
 800b700:	4614      	mov	r4, r2
 800b702:	d103      	bne.n	800b70c <_sungetc_r+0x10>
 800b704:	f04f 35ff 	mov.w	r5, #4294967295
 800b708:	4628      	mov	r0, r5
 800b70a:	bd38      	pop	{r3, r4, r5, pc}
 800b70c:	8993      	ldrh	r3, [r2, #12]
 800b70e:	b2cd      	uxtb	r5, r1
 800b710:	f023 0320 	bic.w	r3, r3, #32
 800b714:	8193      	strh	r3, [r2, #12]
 800b716:	6853      	ldr	r3, [r2, #4]
 800b718:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b71a:	b18a      	cbz	r2, 800b740 <_sungetc_r+0x44>
 800b71c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800b71e:	429a      	cmp	r2, r3
 800b720:	dd08      	ble.n	800b734 <_sungetc_r+0x38>
 800b722:	6823      	ldr	r3, [r4, #0]
 800b724:	1e5a      	subs	r2, r3, #1
 800b726:	6022      	str	r2, [r4, #0]
 800b728:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b72c:	6863      	ldr	r3, [r4, #4]
 800b72e:	3301      	adds	r3, #1
 800b730:	6063      	str	r3, [r4, #4]
 800b732:	e7e9      	b.n	800b708 <_sungetc_r+0xc>
 800b734:	4621      	mov	r1, r4
 800b736:	f000 fbd8 	bl	800beea <__submore>
 800b73a:	2800      	cmp	r0, #0
 800b73c:	d0f1      	beq.n	800b722 <_sungetc_r+0x26>
 800b73e:	e7e1      	b.n	800b704 <_sungetc_r+0x8>
 800b740:	6921      	ldr	r1, [r4, #16]
 800b742:	6822      	ldr	r2, [r4, #0]
 800b744:	b141      	cbz	r1, 800b758 <_sungetc_r+0x5c>
 800b746:	4291      	cmp	r1, r2
 800b748:	d206      	bcs.n	800b758 <_sungetc_r+0x5c>
 800b74a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800b74e:	42a9      	cmp	r1, r5
 800b750:	d102      	bne.n	800b758 <_sungetc_r+0x5c>
 800b752:	3a01      	subs	r2, #1
 800b754:	6022      	str	r2, [r4, #0]
 800b756:	e7ea      	b.n	800b72e <_sungetc_r+0x32>
 800b758:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800b75c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b760:	6363      	str	r3, [r4, #52]	@ 0x34
 800b762:	2303      	movs	r3, #3
 800b764:	63a3      	str	r3, [r4, #56]	@ 0x38
 800b766:	4623      	mov	r3, r4
 800b768:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b76c:	6023      	str	r3, [r4, #0]
 800b76e:	2301      	movs	r3, #1
 800b770:	e7de      	b.n	800b730 <_sungetc_r+0x34>

0800b772 <__ssrefill_r>:
 800b772:	b510      	push	{r4, lr}
 800b774:	460c      	mov	r4, r1
 800b776:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800b778:	b169      	cbz	r1, 800b796 <__ssrefill_r+0x24>
 800b77a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b77e:	4299      	cmp	r1, r3
 800b780:	d001      	beq.n	800b786 <__ssrefill_r+0x14>
 800b782:	f7ff f9e5 	bl	800ab50 <_free_r>
 800b786:	2000      	movs	r0, #0
 800b788:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b78a:	6360      	str	r0, [r4, #52]	@ 0x34
 800b78c:	6063      	str	r3, [r4, #4]
 800b78e:	b113      	cbz	r3, 800b796 <__ssrefill_r+0x24>
 800b790:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800b792:	6023      	str	r3, [r4, #0]
 800b794:	bd10      	pop	{r4, pc}
 800b796:	6923      	ldr	r3, [r4, #16]
 800b798:	f04f 30ff 	mov.w	r0, #4294967295
 800b79c:	6023      	str	r3, [r4, #0]
 800b79e:	2300      	movs	r3, #0
 800b7a0:	6063      	str	r3, [r4, #4]
 800b7a2:	89a3      	ldrh	r3, [r4, #12]
 800b7a4:	f043 0320 	orr.w	r3, r3, #32
 800b7a8:	81a3      	strh	r3, [r4, #12]
 800b7aa:	e7f3      	b.n	800b794 <__ssrefill_r+0x22>

0800b7ac <__ssvfiscanf_r>:
 800b7ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7b0:	460c      	mov	r4, r1
 800b7b2:	2100      	movs	r1, #0
 800b7b4:	4606      	mov	r6, r0
 800b7b6:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800b7ba:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800b7be:	49aa      	ldr	r1, [pc, #680]	@ (800ba68 <__ssvfiscanf_r+0x2bc>)
 800b7c0:	f10d 0804 	add.w	r8, sp, #4
 800b7c4:	91a0      	str	r1, [sp, #640]	@ 0x280
 800b7c6:	49a9      	ldr	r1, [pc, #676]	@ (800ba6c <__ssvfiscanf_r+0x2c0>)
 800b7c8:	4fa9      	ldr	r7, [pc, #676]	@ (800ba70 <__ssvfiscanf_r+0x2c4>)
 800b7ca:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800b7ce:	91a1      	str	r1, [sp, #644]	@ 0x284
 800b7d0:	9300      	str	r3, [sp, #0]
 800b7d2:	7813      	ldrb	r3, [r2, #0]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	f000 8159 	beq.w	800ba8c <__ssvfiscanf_r+0x2e0>
 800b7da:	5cf9      	ldrb	r1, [r7, r3]
 800b7dc:	1c55      	adds	r5, r2, #1
 800b7de:	f011 0108 	ands.w	r1, r1, #8
 800b7e2:	d019      	beq.n	800b818 <__ssvfiscanf_r+0x6c>
 800b7e4:	6863      	ldr	r3, [r4, #4]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	dd0f      	ble.n	800b80a <__ssvfiscanf_r+0x5e>
 800b7ea:	6823      	ldr	r3, [r4, #0]
 800b7ec:	781a      	ldrb	r2, [r3, #0]
 800b7ee:	5cba      	ldrb	r2, [r7, r2]
 800b7f0:	0712      	lsls	r2, r2, #28
 800b7f2:	d401      	bmi.n	800b7f8 <__ssvfiscanf_r+0x4c>
 800b7f4:	462a      	mov	r2, r5
 800b7f6:	e7ec      	b.n	800b7d2 <__ssvfiscanf_r+0x26>
 800b7f8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800b7fa:	3301      	adds	r3, #1
 800b7fc:	3201      	adds	r2, #1
 800b7fe:	9245      	str	r2, [sp, #276]	@ 0x114
 800b800:	6862      	ldr	r2, [r4, #4]
 800b802:	6023      	str	r3, [r4, #0]
 800b804:	3a01      	subs	r2, #1
 800b806:	6062      	str	r2, [r4, #4]
 800b808:	e7ec      	b.n	800b7e4 <__ssvfiscanf_r+0x38>
 800b80a:	4621      	mov	r1, r4
 800b80c:	4630      	mov	r0, r6
 800b80e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800b810:	4798      	blx	r3
 800b812:	2800      	cmp	r0, #0
 800b814:	d0e9      	beq.n	800b7ea <__ssvfiscanf_r+0x3e>
 800b816:	e7ed      	b.n	800b7f4 <__ssvfiscanf_r+0x48>
 800b818:	2b25      	cmp	r3, #37	@ 0x25
 800b81a:	d012      	beq.n	800b842 <__ssvfiscanf_r+0x96>
 800b81c:	4699      	mov	r9, r3
 800b81e:	6863      	ldr	r3, [r4, #4]
 800b820:	2b00      	cmp	r3, #0
 800b822:	f340 8094 	ble.w	800b94e <__ssvfiscanf_r+0x1a2>
 800b826:	6822      	ldr	r2, [r4, #0]
 800b828:	7813      	ldrb	r3, [r2, #0]
 800b82a:	454b      	cmp	r3, r9
 800b82c:	f040 812e 	bne.w	800ba8c <__ssvfiscanf_r+0x2e0>
 800b830:	6863      	ldr	r3, [r4, #4]
 800b832:	3201      	adds	r2, #1
 800b834:	3b01      	subs	r3, #1
 800b836:	6063      	str	r3, [r4, #4]
 800b838:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800b83a:	6022      	str	r2, [r4, #0]
 800b83c:	3301      	adds	r3, #1
 800b83e:	9345      	str	r3, [sp, #276]	@ 0x114
 800b840:	e7d8      	b.n	800b7f4 <__ssvfiscanf_r+0x48>
 800b842:	9141      	str	r1, [sp, #260]	@ 0x104
 800b844:	9143      	str	r1, [sp, #268]	@ 0x10c
 800b846:	7853      	ldrb	r3, [r2, #1]
 800b848:	2b2a      	cmp	r3, #42	@ 0x2a
 800b84a:	bf04      	itt	eq
 800b84c:	2310      	moveq	r3, #16
 800b84e:	1c95      	addeq	r5, r2, #2
 800b850:	f04f 020a 	mov.w	r2, #10
 800b854:	bf08      	it	eq
 800b856:	9341      	streq	r3, [sp, #260]	@ 0x104
 800b858:	46a9      	mov	r9, r5
 800b85a:	f819 1b01 	ldrb.w	r1, [r9], #1
 800b85e:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800b862:	2b09      	cmp	r3, #9
 800b864:	d91e      	bls.n	800b8a4 <__ssvfiscanf_r+0xf8>
 800b866:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 800ba74 <__ssvfiscanf_r+0x2c8>
 800b86a:	2203      	movs	r2, #3
 800b86c:	4650      	mov	r0, sl
 800b86e:	f7fe fb00 	bl	8009e72 <memchr>
 800b872:	b138      	cbz	r0, 800b884 <__ssvfiscanf_r+0xd8>
 800b874:	2301      	movs	r3, #1
 800b876:	464d      	mov	r5, r9
 800b878:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800b87a:	eba0 000a 	sub.w	r0, r0, sl
 800b87e:	4083      	lsls	r3, r0
 800b880:	4313      	orrs	r3, r2
 800b882:	9341      	str	r3, [sp, #260]	@ 0x104
 800b884:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b888:	2b78      	cmp	r3, #120	@ 0x78
 800b88a:	d806      	bhi.n	800b89a <__ssvfiscanf_r+0xee>
 800b88c:	2b57      	cmp	r3, #87	@ 0x57
 800b88e:	d810      	bhi.n	800b8b2 <__ssvfiscanf_r+0x106>
 800b890:	2b25      	cmp	r3, #37	@ 0x25
 800b892:	d0c3      	beq.n	800b81c <__ssvfiscanf_r+0x70>
 800b894:	d856      	bhi.n	800b944 <__ssvfiscanf_r+0x198>
 800b896:	2b00      	cmp	r3, #0
 800b898:	d064      	beq.n	800b964 <__ssvfiscanf_r+0x1b8>
 800b89a:	2303      	movs	r3, #3
 800b89c:	9347      	str	r3, [sp, #284]	@ 0x11c
 800b89e:	230a      	movs	r3, #10
 800b8a0:	9342      	str	r3, [sp, #264]	@ 0x108
 800b8a2:	e077      	b.n	800b994 <__ssvfiscanf_r+0x1e8>
 800b8a4:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800b8a6:	464d      	mov	r5, r9
 800b8a8:	fb02 1103 	mla	r1, r2, r3, r1
 800b8ac:	3930      	subs	r1, #48	@ 0x30
 800b8ae:	9143      	str	r1, [sp, #268]	@ 0x10c
 800b8b0:	e7d2      	b.n	800b858 <__ssvfiscanf_r+0xac>
 800b8b2:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800b8b6:	2a20      	cmp	r2, #32
 800b8b8:	d8ef      	bhi.n	800b89a <__ssvfiscanf_r+0xee>
 800b8ba:	a101      	add	r1, pc, #4	@ (adr r1, 800b8c0 <__ssvfiscanf_r+0x114>)
 800b8bc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b8c0:	0800b973 	.word	0x0800b973
 800b8c4:	0800b89b 	.word	0x0800b89b
 800b8c8:	0800b89b 	.word	0x0800b89b
 800b8cc:	0800b9cd 	.word	0x0800b9cd
 800b8d0:	0800b89b 	.word	0x0800b89b
 800b8d4:	0800b89b 	.word	0x0800b89b
 800b8d8:	0800b89b 	.word	0x0800b89b
 800b8dc:	0800b89b 	.word	0x0800b89b
 800b8e0:	0800b89b 	.word	0x0800b89b
 800b8e4:	0800b89b 	.word	0x0800b89b
 800b8e8:	0800b89b 	.word	0x0800b89b
 800b8ec:	0800b9e3 	.word	0x0800b9e3
 800b8f0:	0800b9c9 	.word	0x0800b9c9
 800b8f4:	0800b94b 	.word	0x0800b94b
 800b8f8:	0800b94b 	.word	0x0800b94b
 800b8fc:	0800b94b 	.word	0x0800b94b
 800b900:	0800b89b 	.word	0x0800b89b
 800b904:	0800b985 	.word	0x0800b985
 800b908:	0800b89b 	.word	0x0800b89b
 800b90c:	0800b89b 	.word	0x0800b89b
 800b910:	0800b89b 	.word	0x0800b89b
 800b914:	0800b89b 	.word	0x0800b89b
 800b918:	0800b9f3 	.word	0x0800b9f3
 800b91c:	0800b98d 	.word	0x0800b98d
 800b920:	0800b96b 	.word	0x0800b96b
 800b924:	0800b89b 	.word	0x0800b89b
 800b928:	0800b89b 	.word	0x0800b89b
 800b92c:	0800b9ef 	.word	0x0800b9ef
 800b930:	0800b89b 	.word	0x0800b89b
 800b934:	0800b9c9 	.word	0x0800b9c9
 800b938:	0800b89b 	.word	0x0800b89b
 800b93c:	0800b89b 	.word	0x0800b89b
 800b940:	0800b973 	.word	0x0800b973
 800b944:	3b45      	subs	r3, #69	@ 0x45
 800b946:	2b02      	cmp	r3, #2
 800b948:	d8a7      	bhi.n	800b89a <__ssvfiscanf_r+0xee>
 800b94a:	2305      	movs	r3, #5
 800b94c:	e021      	b.n	800b992 <__ssvfiscanf_r+0x1e6>
 800b94e:	4621      	mov	r1, r4
 800b950:	4630      	mov	r0, r6
 800b952:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800b954:	4798      	blx	r3
 800b956:	2800      	cmp	r0, #0
 800b958:	f43f af65 	beq.w	800b826 <__ssvfiscanf_r+0x7a>
 800b95c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800b95e:	2800      	cmp	r0, #0
 800b960:	f040 808c 	bne.w	800ba7c <__ssvfiscanf_r+0x2d0>
 800b964:	f04f 30ff 	mov.w	r0, #4294967295
 800b968:	e08c      	b.n	800ba84 <__ssvfiscanf_r+0x2d8>
 800b96a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800b96c:	f042 0220 	orr.w	r2, r2, #32
 800b970:	9241      	str	r2, [sp, #260]	@ 0x104
 800b972:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800b974:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b978:	9241      	str	r2, [sp, #260]	@ 0x104
 800b97a:	2210      	movs	r2, #16
 800b97c:	2b6e      	cmp	r3, #110	@ 0x6e
 800b97e:	9242      	str	r2, [sp, #264]	@ 0x108
 800b980:	d902      	bls.n	800b988 <__ssvfiscanf_r+0x1dc>
 800b982:	e005      	b.n	800b990 <__ssvfiscanf_r+0x1e4>
 800b984:	2300      	movs	r3, #0
 800b986:	9342      	str	r3, [sp, #264]	@ 0x108
 800b988:	2303      	movs	r3, #3
 800b98a:	e002      	b.n	800b992 <__ssvfiscanf_r+0x1e6>
 800b98c:	2308      	movs	r3, #8
 800b98e:	9342      	str	r3, [sp, #264]	@ 0x108
 800b990:	2304      	movs	r3, #4
 800b992:	9347      	str	r3, [sp, #284]	@ 0x11c
 800b994:	6863      	ldr	r3, [r4, #4]
 800b996:	2b00      	cmp	r3, #0
 800b998:	dd39      	ble.n	800ba0e <__ssvfiscanf_r+0x262>
 800b99a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800b99c:	0659      	lsls	r1, r3, #25
 800b99e:	d404      	bmi.n	800b9aa <__ssvfiscanf_r+0x1fe>
 800b9a0:	6823      	ldr	r3, [r4, #0]
 800b9a2:	781a      	ldrb	r2, [r3, #0]
 800b9a4:	5cba      	ldrb	r2, [r7, r2]
 800b9a6:	0712      	lsls	r2, r2, #28
 800b9a8:	d438      	bmi.n	800ba1c <__ssvfiscanf_r+0x270>
 800b9aa:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800b9ac:	2b02      	cmp	r3, #2
 800b9ae:	dc47      	bgt.n	800ba40 <__ssvfiscanf_r+0x294>
 800b9b0:	466b      	mov	r3, sp
 800b9b2:	4622      	mov	r2, r4
 800b9b4:	4630      	mov	r0, r6
 800b9b6:	a941      	add	r1, sp, #260	@ 0x104
 800b9b8:	f000 f86a 	bl	800ba90 <_scanf_chars>
 800b9bc:	2801      	cmp	r0, #1
 800b9be:	d065      	beq.n	800ba8c <__ssvfiscanf_r+0x2e0>
 800b9c0:	2802      	cmp	r0, #2
 800b9c2:	f47f af17 	bne.w	800b7f4 <__ssvfiscanf_r+0x48>
 800b9c6:	e7c9      	b.n	800b95c <__ssvfiscanf_r+0x1b0>
 800b9c8:	220a      	movs	r2, #10
 800b9ca:	e7d7      	b.n	800b97c <__ssvfiscanf_r+0x1d0>
 800b9cc:	4629      	mov	r1, r5
 800b9ce:	4640      	mov	r0, r8
 800b9d0:	f000 fa52 	bl	800be78 <__sccl>
 800b9d4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800b9d6:	4605      	mov	r5, r0
 800b9d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b9dc:	9341      	str	r3, [sp, #260]	@ 0x104
 800b9de:	2301      	movs	r3, #1
 800b9e0:	e7d7      	b.n	800b992 <__ssvfiscanf_r+0x1e6>
 800b9e2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800b9e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b9e8:	9341      	str	r3, [sp, #260]	@ 0x104
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	e7d1      	b.n	800b992 <__ssvfiscanf_r+0x1e6>
 800b9ee:	2302      	movs	r3, #2
 800b9f0:	e7cf      	b.n	800b992 <__ssvfiscanf_r+0x1e6>
 800b9f2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800b9f4:	06c3      	lsls	r3, r0, #27
 800b9f6:	f53f aefd 	bmi.w	800b7f4 <__ssvfiscanf_r+0x48>
 800b9fa:	9b00      	ldr	r3, [sp, #0]
 800b9fc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800b9fe:	1d19      	adds	r1, r3, #4
 800ba00:	9100      	str	r1, [sp, #0]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	07c0      	lsls	r0, r0, #31
 800ba06:	bf4c      	ite	mi
 800ba08:	801a      	strhmi	r2, [r3, #0]
 800ba0a:	601a      	strpl	r2, [r3, #0]
 800ba0c:	e6f2      	b.n	800b7f4 <__ssvfiscanf_r+0x48>
 800ba0e:	4621      	mov	r1, r4
 800ba10:	4630      	mov	r0, r6
 800ba12:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800ba14:	4798      	blx	r3
 800ba16:	2800      	cmp	r0, #0
 800ba18:	d0bf      	beq.n	800b99a <__ssvfiscanf_r+0x1ee>
 800ba1a:	e79f      	b.n	800b95c <__ssvfiscanf_r+0x1b0>
 800ba1c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800ba1e:	3201      	adds	r2, #1
 800ba20:	9245      	str	r2, [sp, #276]	@ 0x114
 800ba22:	6862      	ldr	r2, [r4, #4]
 800ba24:	3a01      	subs	r2, #1
 800ba26:	2a00      	cmp	r2, #0
 800ba28:	6062      	str	r2, [r4, #4]
 800ba2a:	dd02      	ble.n	800ba32 <__ssvfiscanf_r+0x286>
 800ba2c:	3301      	adds	r3, #1
 800ba2e:	6023      	str	r3, [r4, #0]
 800ba30:	e7b6      	b.n	800b9a0 <__ssvfiscanf_r+0x1f4>
 800ba32:	4621      	mov	r1, r4
 800ba34:	4630      	mov	r0, r6
 800ba36:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800ba38:	4798      	blx	r3
 800ba3a:	2800      	cmp	r0, #0
 800ba3c:	d0b0      	beq.n	800b9a0 <__ssvfiscanf_r+0x1f4>
 800ba3e:	e78d      	b.n	800b95c <__ssvfiscanf_r+0x1b0>
 800ba40:	2b04      	cmp	r3, #4
 800ba42:	dc06      	bgt.n	800ba52 <__ssvfiscanf_r+0x2a6>
 800ba44:	466b      	mov	r3, sp
 800ba46:	4622      	mov	r2, r4
 800ba48:	4630      	mov	r0, r6
 800ba4a:	a941      	add	r1, sp, #260	@ 0x104
 800ba4c:	f000 f87a 	bl	800bb44 <_scanf_i>
 800ba50:	e7b4      	b.n	800b9bc <__ssvfiscanf_r+0x210>
 800ba52:	4b09      	ldr	r3, [pc, #36]	@ (800ba78 <__ssvfiscanf_r+0x2cc>)
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	f43f aecd 	beq.w	800b7f4 <__ssvfiscanf_r+0x48>
 800ba5a:	466b      	mov	r3, sp
 800ba5c:	4622      	mov	r2, r4
 800ba5e:	4630      	mov	r0, r6
 800ba60:	a941      	add	r1, sp, #260	@ 0x104
 800ba62:	f3af 8000 	nop.w
 800ba66:	e7a9      	b.n	800b9bc <__ssvfiscanf_r+0x210>
 800ba68:	0800b6fd 	.word	0x0800b6fd
 800ba6c:	0800b773 	.word	0x0800b773
 800ba70:	0800c92b 	.word	0x0800c92b
 800ba74:	0800cc46 	.word	0x0800cc46
 800ba78:	00000000 	.word	0x00000000
 800ba7c:	89a3      	ldrh	r3, [r4, #12]
 800ba7e:	065b      	lsls	r3, r3, #25
 800ba80:	f53f af70 	bmi.w	800b964 <__ssvfiscanf_r+0x1b8>
 800ba84:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800ba88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba8c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800ba8e:	e7f9      	b.n	800ba84 <__ssvfiscanf_r+0x2d8>

0800ba90 <_scanf_chars>:
 800ba90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba94:	4615      	mov	r5, r2
 800ba96:	688a      	ldr	r2, [r1, #8]
 800ba98:	4680      	mov	r8, r0
 800ba9a:	460c      	mov	r4, r1
 800ba9c:	b932      	cbnz	r2, 800baac <_scanf_chars+0x1c>
 800ba9e:	698a      	ldr	r2, [r1, #24]
 800baa0:	2a00      	cmp	r2, #0
 800baa2:	bf14      	ite	ne
 800baa4:	f04f 32ff 	movne.w	r2, #4294967295
 800baa8:	2201      	moveq	r2, #1
 800baaa:	608a      	str	r2, [r1, #8]
 800baac:	2700      	movs	r7, #0
 800baae:	6822      	ldr	r2, [r4, #0]
 800bab0:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 800bb40 <_scanf_chars+0xb0>
 800bab4:	06d1      	lsls	r1, r2, #27
 800bab6:	bf5f      	itttt	pl
 800bab8:	681a      	ldrpl	r2, [r3, #0]
 800baba:	1d11      	addpl	r1, r2, #4
 800babc:	6019      	strpl	r1, [r3, #0]
 800babe:	6816      	ldrpl	r6, [r2, #0]
 800bac0:	69a0      	ldr	r0, [r4, #24]
 800bac2:	b188      	cbz	r0, 800bae8 <_scanf_chars+0x58>
 800bac4:	2801      	cmp	r0, #1
 800bac6:	d107      	bne.n	800bad8 <_scanf_chars+0x48>
 800bac8:	682b      	ldr	r3, [r5, #0]
 800baca:	781a      	ldrb	r2, [r3, #0]
 800bacc:	6963      	ldr	r3, [r4, #20]
 800bace:	5c9b      	ldrb	r3, [r3, r2]
 800bad0:	b953      	cbnz	r3, 800bae8 <_scanf_chars+0x58>
 800bad2:	2f00      	cmp	r7, #0
 800bad4:	d031      	beq.n	800bb3a <_scanf_chars+0xaa>
 800bad6:	e022      	b.n	800bb1e <_scanf_chars+0x8e>
 800bad8:	2802      	cmp	r0, #2
 800bada:	d120      	bne.n	800bb1e <_scanf_chars+0x8e>
 800badc:	682b      	ldr	r3, [r5, #0]
 800bade:	781b      	ldrb	r3, [r3, #0]
 800bae0:	f819 3003 	ldrb.w	r3, [r9, r3]
 800bae4:	071b      	lsls	r3, r3, #28
 800bae6:	d41a      	bmi.n	800bb1e <_scanf_chars+0x8e>
 800bae8:	6823      	ldr	r3, [r4, #0]
 800baea:	3701      	adds	r7, #1
 800baec:	06da      	lsls	r2, r3, #27
 800baee:	bf5e      	ittt	pl
 800baf0:	682b      	ldrpl	r3, [r5, #0]
 800baf2:	781b      	ldrbpl	r3, [r3, #0]
 800baf4:	f806 3b01 	strbpl.w	r3, [r6], #1
 800baf8:	682a      	ldr	r2, [r5, #0]
 800bafa:	686b      	ldr	r3, [r5, #4]
 800bafc:	3201      	adds	r2, #1
 800bafe:	602a      	str	r2, [r5, #0]
 800bb00:	68a2      	ldr	r2, [r4, #8]
 800bb02:	3b01      	subs	r3, #1
 800bb04:	3a01      	subs	r2, #1
 800bb06:	606b      	str	r3, [r5, #4]
 800bb08:	60a2      	str	r2, [r4, #8]
 800bb0a:	b142      	cbz	r2, 800bb1e <_scanf_chars+0x8e>
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	dcd7      	bgt.n	800bac0 <_scanf_chars+0x30>
 800bb10:	4629      	mov	r1, r5
 800bb12:	4640      	mov	r0, r8
 800bb14:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800bb18:	4798      	blx	r3
 800bb1a:	2800      	cmp	r0, #0
 800bb1c:	d0d0      	beq.n	800bac0 <_scanf_chars+0x30>
 800bb1e:	6823      	ldr	r3, [r4, #0]
 800bb20:	f013 0310 	ands.w	r3, r3, #16
 800bb24:	d105      	bne.n	800bb32 <_scanf_chars+0xa2>
 800bb26:	68e2      	ldr	r2, [r4, #12]
 800bb28:	3201      	adds	r2, #1
 800bb2a:	60e2      	str	r2, [r4, #12]
 800bb2c:	69a2      	ldr	r2, [r4, #24]
 800bb2e:	b102      	cbz	r2, 800bb32 <_scanf_chars+0xa2>
 800bb30:	7033      	strb	r3, [r6, #0]
 800bb32:	2000      	movs	r0, #0
 800bb34:	6923      	ldr	r3, [r4, #16]
 800bb36:	443b      	add	r3, r7
 800bb38:	6123      	str	r3, [r4, #16]
 800bb3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb3e:	bf00      	nop
 800bb40:	0800c92b 	.word	0x0800c92b

0800bb44 <_scanf_i>:
 800bb44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb48:	460c      	mov	r4, r1
 800bb4a:	4698      	mov	r8, r3
 800bb4c:	4b72      	ldr	r3, [pc, #456]	@ (800bd18 <_scanf_i+0x1d4>)
 800bb4e:	b087      	sub	sp, #28
 800bb50:	4682      	mov	sl, r0
 800bb52:	4616      	mov	r6, r2
 800bb54:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bb58:	ab03      	add	r3, sp, #12
 800bb5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800bb5e:	4b6f      	ldr	r3, [pc, #444]	@ (800bd1c <_scanf_i+0x1d8>)
 800bb60:	69a1      	ldr	r1, [r4, #24]
 800bb62:	4a6f      	ldr	r2, [pc, #444]	@ (800bd20 <_scanf_i+0x1dc>)
 800bb64:	4627      	mov	r7, r4
 800bb66:	2903      	cmp	r1, #3
 800bb68:	bf08      	it	eq
 800bb6a:	461a      	moveq	r2, r3
 800bb6c:	68a3      	ldr	r3, [r4, #8]
 800bb6e:	9201      	str	r2, [sp, #4]
 800bb70:	1e5a      	subs	r2, r3, #1
 800bb72:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800bb76:	bf81      	itttt	hi
 800bb78:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800bb7c:	eb03 0905 	addhi.w	r9, r3, r5
 800bb80:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800bb84:	60a3      	strhi	r3, [r4, #8]
 800bb86:	f857 3b1c 	ldr.w	r3, [r7], #28
 800bb8a:	bf98      	it	ls
 800bb8c:	f04f 0900 	movls.w	r9, #0
 800bb90:	463d      	mov	r5, r7
 800bb92:	f04f 0b00 	mov.w	fp, #0
 800bb96:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800bb9a:	6023      	str	r3, [r4, #0]
 800bb9c:	6831      	ldr	r1, [r6, #0]
 800bb9e:	ab03      	add	r3, sp, #12
 800bba0:	2202      	movs	r2, #2
 800bba2:	7809      	ldrb	r1, [r1, #0]
 800bba4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800bba8:	f7fe f963 	bl	8009e72 <memchr>
 800bbac:	b328      	cbz	r0, 800bbfa <_scanf_i+0xb6>
 800bbae:	f1bb 0f01 	cmp.w	fp, #1
 800bbb2:	d159      	bne.n	800bc68 <_scanf_i+0x124>
 800bbb4:	6862      	ldr	r2, [r4, #4]
 800bbb6:	b92a      	cbnz	r2, 800bbc4 <_scanf_i+0x80>
 800bbb8:	2108      	movs	r1, #8
 800bbba:	6822      	ldr	r2, [r4, #0]
 800bbbc:	6061      	str	r1, [r4, #4]
 800bbbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bbc2:	6022      	str	r2, [r4, #0]
 800bbc4:	6822      	ldr	r2, [r4, #0]
 800bbc6:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800bbca:	6022      	str	r2, [r4, #0]
 800bbcc:	68a2      	ldr	r2, [r4, #8]
 800bbce:	1e51      	subs	r1, r2, #1
 800bbd0:	60a1      	str	r1, [r4, #8]
 800bbd2:	b192      	cbz	r2, 800bbfa <_scanf_i+0xb6>
 800bbd4:	6832      	ldr	r2, [r6, #0]
 800bbd6:	1c51      	adds	r1, r2, #1
 800bbd8:	6031      	str	r1, [r6, #0]
 800bbda:	7812      	ldrb	r2, [r2, #0]
 800bbdc:	f805 2b01 	strb.w	r2, [r5], #1
 800bbe0:	6872      	ldr	r2, [r6, #4]
 800bbe2:	3a01      	subs	r2, #1
 800bbe4:	2a00      	cmp	r2, #0
 800bbe6:	6072      	str	r2, [r6, #4]
 800bbe8:	dc07      	bgt.n	800bbfa <_scanf_i+0xb6>
 800bbea:	4631      	mov	r1, r6
 800bbec:	4650      	mov	r0, sl
 800bbee:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800bbf2:	4790      	blx	r2
 800bbf4:	2800      	cmp	r0, #0
 800bbf6:	f040 8085 	bne.w	800bd04 <_scanf_i+0x1c0>
 800bbfa:	f10b 0b01 	add.w	fp, fp, #1
 800bbfe:	f1bb 0f03 	cmp.w	fp, #3
 800bc02:	d1cb      	bne.n	800bb9c <_scanf_i+0x58>
 800bc04:	6863      	ldr	r3, [r4, #4]
 800bc06:	b90b      	cbnz	r3, 800bc0c <_scanf_i+0xc8>
 800bc08:	230a      	movs	r3, #10
 800bc0a:	6063      	str	r3, [r4, #4]
 800bc0c:	6863      	ldr	r3, [r4, #4]
 800bc0e:	4945      	ldr	r1, [pc, #276]	@ (800bd24 <_scanf_i+0x1e0>)
 800bc10:	6960      	ldr	r0, [r4, #20]
 800bc12:	1ac9      	subs	r1, r1, r3
 800bc14:	f000 f930 	bl	800be78 <__sccl>
 800bc18:	f04f 0b00 	mov.w	fp, #0
 800bc1c:	68a3      	ldr	r3, [r4, #8]
 800bc1e:	6822      	ldr	r2, [r4, #0]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d03d      	beq.n	800bca0 <_scanf_i+0x15c>
 800bc24:	6831      	ldr	r1, [r6, #0]
 800bc26:	6960      	ldr	r0, [r4, #20]
 800bc28:	f891 c000 	ldrb.w	ip, [r1]
 800bc2c:	f810 000c 	ldrb.w	r0, [r0, ip]
 800bc30:	2800      	cmp	r0, #0
 800bc32:	d035      	beq.n	800bca0 <_scanf_i+0x15c>
 800bc34:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800bc38:	d124      	bne.n	800bc84 <_scanf_i+0x140>
 800bc3a:	0510      	lsls	r0, r2, #20
 800bc3c:	d522      	bpl.n	800bc84 <_scanf_i+0x140>
 800bc3e:	f10b 0b01 	add.w	fp, fp, #1
 800bc42:	f1b9 0f00 	cmp.w	r9, #0
 800bc46:	d003      	beq.n	800bc50 <_scanf_i+0x10c>
 800bc48:	3301      	adds	r3, #1
 800bc4a:	f109 39ff 	add.w	r9, r9, #4294967295
 800bc4e:	60a3      	str	r3, [r4, #8]
 800bc50:	6873      	ldr	r3, [r6, #4]
 800bc52:	3b01      	subs	r3, #1
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	6073      	str	r3, [r6, #4]
 800bc58:	dd1b      	ble.n	800bc92 <_scanf_i+0x14e>
 800bc5a:	6833      	ldr	r3, [r6, #0]
 800bc5c:	3301      	adds	r3, #1
 800bc5e:	6033      	str	r3, [r6, #0]
 800bc60:	68a3      	ldr	r3, [r4, #8]
 800bc62:	3b01      	subs	r3, #1
 800bc64:	60a3      	str	r3, [r4, #8]
 800bc66:	e7d9      	b.n	800bc1c <_scanf_i+0xd8>
 800bc68:	f1bb 0f02 	cmp.w	fp, #2
 800bc6c:	d1ae      	bne.n	800bbcc <_scanf_i+0x88>
 800bc6e:	6822      	ldr	r2, [r4, #0]
 800bc70:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800bc74:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800bc78:	d1bf      	bne.n	800bbfa <_scanf_i+0xb6>
 800bc7a:	2110      	movs	r1, #16
 800bc7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bc80:	6061      	str	r1, [r4, #4]
 800bc82:	e7a2      	b.n	800bbca <_scanf_i+0x86>
 800bc84:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800bc88:	6022      	str	r2, [r4, #0]
 800bc8a:	780b      	ldrb	r3, [r1, #0]
 800bc8c:	f805 3b01 	strb.w	r3, [r5], #1
 800bc90:	e7de      	b.n	800bc50 <_scanf_i+0x10c>
 800bc92:	4631      	mov	r1, r6
 800bc94:	4650      	mov	r0, sl
 800bc96:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800bc9a:	4798      	blx	r3
 800bc9c:	2800      	cmp	r0, #0
 800bc9e:	d0df      	beq.n	800bc60 <_scanf_i+0x11c>
 800bca0:	6823      	ldr	r3, [r4, #0]
 800bca2:	05d9      	lsls	r1, r3, #23
 800bca4:	d50d      	bpl.n	800bcc2 <_scanf_i+0x17e>
 800bca6:	42bd      	cmp	r5, r7
 800bca8:	d909      	bls.n	800bcbe <_scanf_i+0x17a>
 800bcaa:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800bcae:	4632      	mov	r2, r6
 800bcb0:	4650      	mov	r0, sl
 800bcb2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bcb6:	f105 39ff 	add.w	r9, r5, #4294967295
 800bcba:	4798      	blx	r3
 800bcbc:	464d      	mov	r5, r9
 800bcbe:	42bd      	cmp	r5, r7
 800bcc0:	d028      	beq.n	800bd14 <_scanf_i+0x1d0>
 800bcc2:	6822      	ldr	r2, [r4, #0]
 800bcc4:	f012 0210 	ands.w	r2, r2, #16
 800bcc8:	d113      	bne.n	800bcf2 <_scanf_i+0x1ae>
 800bcca:	702a      	strb	r2, [r5, #0]
 800bccc:	4639      	mov	r1, r7
 800bcce:	6863      	ldr	r3, [r4, #4]
 800bcd0:	4650      	mov	r0, sl
 800bcd2:	9e01      	ldr	r6, [sp, #4]
 800bcd4:	47b0      	blx	r6
 800bcd6:	f8d8 3000 	ldr.w	r3, [r8]
 800bcda:	6821      	ldr	r1, [r4, #0]
 800bcdc:	1d1a      	adds	r2, r3, #4
 800bcde:	f8c8 2000 	str.w	r2, [r8]
 800bce2:	f011 0f20 	tst.w	r1, #32
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	d00f      	beq.n	800bd0a <_scanf_i+0x1c6>
 800bcea:	6018      	str	r0, [r3, #0]
 800bcec:	68e3      	ldr	r3, [r4, #12]
 800bcee:	3301      	adds	r3, #1
 800bcf0:	60e3      	str	r3, [r4, #12]
 800bcf2:	2000      	movs	r0, #0
 800bcf4:	6923      	ldr	r3, [r4, #16]
 800bcf6:	1bed      	subs	r5, r5, r7
 800bcf8:	445d      	add	r5, fp
 800bcfa:	442b      	add	r3, r5
 800bcfc:	6123      	str	r3, [r4, #16]
 800bcfe:	b007      	add	sp, #28
 800bd00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd04:	f04f 0b00 	mov.w	fp, #0
 800bd08:	e7ca      	b.n	800bca0 <_scanf_i+0x15c>
 800bd0a:	07ca      	lsls	r2, r1, #31
 800bd0c:	bf4c      	ite	mi
 800bd0e:	8018      	strhmi	r0, [r3, #0]
 800bd10:	6018      	strpl	r0, [r3, #0]
 800bd12:	e7eb      	b.n	800bcec <_scanf_i+0x1a8>
 800bd14:	2001      	movs	r0, #1
 800bd16:	e7f2      	b.n	800bcfe <_scanf_i+0x1ba>
 800bd18:	0800c8ec 	.word	0x0800c8ec
 800bd1c:	080090fd 	.word	0x080090fd
 800bd20:	0800c13d 	.word	0x0800c13d
 800bd24:	0800cc61 	.word	0x0800cc61

0800bd28 <__sflush_r>:
 800bd28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd2e:	0716      	lsls	r6, r2, #28
 800bd30:	4605      	mov	r5, r0
 800bd32:	460c      	mov	r4, r1
 800bd34:	d454      	bmi.n	800bde0 <__sflush_r+0xb8>
 800bd36:	684b      	ldr	r3, [r1, #4]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	dc02      	bgt.n	800bd42 <__sflush_r+0x1a>
 800bd3c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	dd48      	ble.n	800bdd4 <__sflush_r+0xac>
 800bd42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bd44:	2e00      	cmp	r6, #0
 800bd46:	d045      	beq.n	800bdd4 <__sflush_r+0xac>
 800bd48:	2300      	movs	r3, #0
 800bd4a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bd4e:	682f      	ldr	r7, [r5, #0]
 800bd50:	6a21      	ldr	r1, [r4, #32]
 800bd52:	602b      	str	r3, [r5, #0]
 800bd54:	d030      	beq.n	800bdb8 <__sflush_r+0x90>
 800bd56:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bd58:	89a3      	ldrh	r3, [r4, #12]
 800bd5a:	0759      	lsls	r1, r3, #29
 800bd5c:	d505      	bpl.n	800bd6a <__sflush_r+0x42>
 800bd5e:	6863      	ldr	r3, [r4, #4]
 800bd60:	1ad2      	subs	r2, r2, r3
 800bd62:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bd64:	b10b      	cbz	r3, 800bd6a <__sflush_r+0x42>
 800bd66:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bd68:	1ad2      	subs	r2, r2, r3
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	4628      	mov	r0, r5
 800bd6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bd70:	6a21      	ldr	r1, [r4, #32]
 800bd72:	47b0      	blx	r6
 800bd74:	1c43      	adds	r3, r0, #1
 800bd76:	89a3      	ldrh	r3, [r4, #12]
 800bd78:	d106      	bne.n	800bd88 <__sflush_r+0x60>
 800bd7a:	6829      	ldr	r1, [r5, #0]
 800bd7c:	291d      	cmp	r1, #29
 800bd7e:	d82b      	bhi.n	800bdd8 <__sflush_r+0xb0>
 800bd80:	4a28      	ldr	r2, [pc, #160]	@ (800be24 <__sflush_r+0xfc>)
 800bd82:	410a      	asrs	r2, r1
 800bd84:	07d6      	lsls	r6, r2, #31
 800bd86:	d427      	bmi.n	800bdd8 <__sflush_r+0xb0>
 800bd88:	2200      	movs	r2, #0
 800bd8a:	6062      	str	r2, [r4, #4]
 800bd8c:	6922      	ldr	r2, [r4, #16]
 800bd8e:	04d9      	lsls	r1, r3, #19
 800bd90:	6022      	str	r2, [r4, #0]
 800bd92:	d504      	bpl.n	800bd9e <__sflush_r+0x76>
 800bd94:	1c42      	adds	r2, r0, #1
 800bd96:	d101      	bne.n	800bd9c <__sflush_r+0x74>
 800bd98:	682b      	ldr	r3, [r5, #0]
 800bd9a:	b903      	cbnz	r3, 800bd9e <__sflush_r+0x76>
 800bd9c:	6560      	str	r0, [r4, #84]	@ 0x54
 800bd9e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bda0:	602f      	str	r7, [r5, #0]
 800bda2:	b1b9      	cbz	r1, 800bdd4 <__sflush_r+0xac>
 800bda4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bda8:	4299      	cmp	r1, r3
 800bdaa:	d002      	beq.n	800bdb2 <__sflush_r+0x8a>
 800bdac:	4628      	mov	r0, r5
 800bdae:	f7fe fecf 	bl	800ab50 <_free_r>
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	6363      	str	r3, [r4, #52]	@ 0x34
 800bdb6:	e00d      	b.n	800bdd4 <__sflush_r+0xac>
 800bdb8:	2301      	movs	r3, #1
 800bdba:	4628      	mov	r0, r5
 800bdbc:	47b0      	blx	r6
 800bdbe:	4602      	mov	r2, r0
 800bdc0:	1c50      	adds	r0, r2, #1
 800bdc2:	d1c9      	bne.n	800bd58 <__sflush_r+0x30>
 800bdc4:	682b      	ldr	r3, [r5, #0]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d0c6      	beq.n	800bd58 <__sflush_r+0x30>
 800bdca:	2b1d      	cmp	r3, #29
 800bdcc:	d001      	beq.n	800bdd2 <__sflush_r+0xaa>
 800bdce:	2b16      	cmp	r3, #22
 800bdd0:	d11d      	bne.n	800be0e <__sflush_r+0xe6>
 800bdd2:	602f      	str	r7, [r5, #0]
 800bdd4:	2000      	movs	r0, #0
 800bdd6:	e021      	b.n	800be1c <__sflush_r+0xf4>
 800bdd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bddc:	b21b      	sxth	r3, r3
 800bdde:	e01a      	b.n	800be16 <__sflush_r+0xee>
 800bde0:	690f      	ldr	r7, [r1, #16]
 800bde2:	2f00      	cmp	r7, #0
 800bde4:	d0f6      	beq.n	800bdd4 <__sflush_r+0xac>
 800bde6:	0793      	lsls	r3, r2, #30
 800bde8:	bf18      	it	ne
 800bdea:	2300      	movne	r3, #0
 800bdec:	680e      	ldr	r6, [r1, #0]
 800bdee:	bf08      	it	eq
 800bdf0:	694b      	ldreq	r3, [r1, #20]
 800bdf2:	1bf6      	subs	r6, r6, r7
 800bdf4:	600f      	str	r7, [r1, #0]
 800bdf6:	608b      	str	r3, [r1, #8]
 800bdf8:	2e00      	cmp	r6, #0
 800bdfa:	ddeb      	ble.n	800bdd4 <__sflush_r+0xac>
 800bdfc:	4633      	mov	r3, r6
 800bdfe:	463a      	mov	r2, r7
 800be00:	4628      	mov	r0, r5
 800be02:	6a21      	ldr	r1, [r4, #32]
 800be04:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800be08:	47e0      	blx	ip
 800be0a:	2800      	cmp	r0, #0
 800be0c:	dc07      	bgt.n	800be1e <__sflush_r+0xf6>
 800be0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be16:	f04f 30ff 	mov.w	r0, #4294967295
 800be1a:	81a3      	strh	r3, [r4, #12]
 800be1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be1e:	4407      	add	r7, r0
 800be20:	1a36      	subs	r6, r6, r0
 800be22:	e7e9      	b.n	800bdf8 <__sflush_r+0xd0>
 800be24:	dfbffffe 	.word	0xdfbffffe

0800be28 <_fflush_r>:
 800be28:	b538      	push	{r3, r4, r5, lr}
 800be2a:	690b      	ldr	r3, [r1, #16]
 800be2c:	4605      	mov	r5, r0
 800be2e:	460c      	mov	r4, r1
 800be30:	b913      	cbnz	r3, 800be38 <_fflush_r+0x10>
 800be32:	2500      	movs	r5, #0
 800be34:	4628      	mov	r0, r5
 800be36:	bd38      	pop	{r3, r4, r5, pc}
 800be38:	b118      	cbz	r0, 800be42 <_fflush_r+0x1a>
 800be3a:	6a03      	ldr	r3, [r0, #32]
 800be3c:	b90b      	cbnz	r3, 800be42 <_fflush_r+0x1a>
 800be3e:	f7fd fe51 	bl	8009ae4 <__sinit>
 800be42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d0f3      	beq.n	800be32 <_fflush_r+0xa>
 800be4a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800be4c:	07d0      	lsls	r0, r2, #31
 800be4e:	d404      	bmi.n	800be5a <_fflush_r+0x32>
 800be50:	0599      	lsls	r1, r3, #22
 800be52:	d402      	bmi.n	800be5a <_fflush_r+0x32>
 800be54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be56:	f7fe f80a 	bl	8009e6e <__retarget_lock_acquire_recursive>
 800be5a:	4628      	mov	r0, r5
 800be5c:	4621      	mov	r1, r4
 800be5e:	f7ff ff63 	bl	800bd28 <__sflush_r>
 800be62:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800be64:	4605      	mov	r5, r0
 800be66:	07da      	lsls	r2, r3, #31
 800be68:	d4e4      	bmi.n	800be34 <_fflush_r+0xc>
 800be6a:	89a3      	ldrh	r3, [r4, #12]
 800be6c:	059b      	lsls	r3, r3, #22
 800be6e:	d4e1      	bmi.n	800be34 <_fflush_r+0xc>
 800be70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be72:	f7fd fffd 	bl	8009e70 <__retarget_lock_release_recursive>
 800be76:	e7dd      	b.n	800be34 <_fflush_r+0xc>

0800be78 <__sccl>:
 800be78:	b570      	push	{r4, r5, r6, lr}
 800be7a:	780b      	ldrb	r3, [r1, #0]
 800be7c:	4604      	mov	r4, r0
 800be7e:	2b5e      	cmp	r3, #94	@ 0x5e
 800be80:	bf0b      	itete	eq
 800be82:	784b      	ldrbeq	r3, [r1, #1]
 800be84:	1c4a      	addne	r2, r1, #1
 800be86:	1c8a      	addeq	r2, r1, #2
 800be88:	2100      	movne	r1, #0
 800be8a:	bf08      	it	eq
 800be8c:	2101      	moveq	r1, #1
 800be8e:	3801      	subs	r0, #1
 800be90:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800be94:	f800 1f01 	strb.w	r1, [r0, #1]!
 800be98:	42a8      	cmp	r0, r5
 800be9a:	d1fb      	bne.n	800be94 <__sccl+0x1c>
 800be9c:	b90b      	cbnz	r3, 800bea2 <__sccl+0x2a>
 800be9e:	1e50      	subs	r0, r2, #1
 800bea0:	bd70      	pop	{r4, r5, r6, pc}
 800bea2:	f081 0101 	eor.w	r1, r1, #1
 800bea6:	4610      	mov	r0, r2
 800bea8:	54e1      	strb	r1, [r4, r3]
 800beaa:	4602      	mov	r2, r0
 800beac:	f812 5b01 	ldrb.w	r5, [r2], #1
 800beb0:	2d2d      	cmp	r5, #45	@ 0x2d
 800beb2:	d005      	beq.n	800bec0 <__sccl+0x48>
 800beb4:	2d5d      	cmp	r5, #93	@ 0x5d
 800beb6:	d016      	beq.n	800bee6 <__sccl+0x6e>
 800beb8:	2d00      	cmp	r5, #0
 800beba:	d0f1      	beq.n	800bea0 <__sccl+0x28>
 800bebc:	462b      	mov	r3, r5
 800bebe:	e7f2      	b.n	800bea6 <__sccl+0x2e>
 800bec0:	7846      	ldrb	r6, [r0, #1]
 800bec2:	2e5d      	cmp	r6, #93	@ 0x5d
 800bec4:	d0fa      	beq.n	800bebc <__sccl+0x44>
 800bec6:	42b3      	cmp	r3, r6
 800bec8:	dcf8      	bgt.n	800bebc <__sccl+0x44>
 800beca:	461a      	mov	r2, r3
 800becc:	3002      	adds	r0, #2
 800bece:	3201      	adds	r2, #1
 800bed0:	4296      	cmp	r6, r2
 800bed2:	54a1      	strb	r1, [r4, r2]
 800bed4:	dcfb      	bgt.n	800bece <__sccl+0x56>
 800bed6:	1af2      	subs	r2, r6, r3
 800bed8:	3a01      	subs	r2, #1
 800beda:	42b3      	cmp	r3, r6
 800bedc:	bfa8      	it	ge
 800bede:	2200      	movge	r2, #0
 800bee0:	1c5d      	adds	r5, r3, #1
 800bee2:	18ab      	adds	r3, r5, r2
 800bee4:	e7e1      	b.n	800beaa <__sccl+0x32>
 800bee6:	4610      	mov	r0, r2
 800bee8:	e7da      	b.n	800bea0 <__sccl+0x28>

0800beea <__submore>:
 800beea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800beee:	460c      	mov	r4, r1
 800bef0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800bef2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bef6:	4299      	cmp	r1, r3
 800bef8:	d11b      	bne.n	800bf32 <__submore+0x48>
 800befa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800befe:	f7fe fe99 	bl	800ac34 <_malloc_r>
 800bf02:	b918      	cbnz	r0, 800bf0c <__submore+0x22>
 800bf04:	f04f 30ff 	mov.w	r0, #4294967295
 800bf08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bf10:	63a3      	str	r3, [r4, #56]	@ 0x38
 800bf12:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800bf16:	6360      	str	r0, [r4, #52]	@ 0x34
 800bf18:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800bf1c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800bf20:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800bf24:	7043      	strb	r3, [r0, #1]
 800bf26:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800bf2a:	7003      	strb	r3, [r0, #0]
 800bf2c:	6020      	str	r0, [r4, #0]
 800bf2e:	2000      	movs	r0, #0
 800bf30:	e7ea      	b.n	800bf08 <__submore+0x1e>
 800bf32:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800bf34:	0077      	lsls	r7, r6, #1
 800bf36:	463a      	mov	r2, r7
 800bf38:	f000 f864 	bl	800c004 <_realloc_r>
 800bf3c:	4605      	mov	r5, r0
 800bf3e:	2800      	cmp	r0, #0
 800bf40:	d0e0      	beq.n	800bf04 <__submore+0x1a>
 800bf42:	eb00 0806 	add.w	r8, r0, r6
 800bf46:	4601      	mov	r1, r0
 800bf48:	4632      	mov	r2, r6
 800bf4a:	4640      	mov	r0, r8
 800bf4c:	f7fd ff9f 	bl	8009e8e <memcpy>
 800bf50:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800bf54:	f8c4 8000 	str.w	r8, [r4]
 800bf58:	e7e9      	b.n	800bf2e <__submore+0x44>
	...

0800bf5c <_sbrk_r>:
 800bf5c:	b538      	push	{r3, r4, r5, lr}
 800bf5e:	2300      	movs	r3, #0
 800bf60:	4d05      	ldr	r5, [pc, #20]	@ (800bf78 <_sbrk_r+0x1c>)
 800bf62:	4604      	mov	r4, r0
 800bf64:	4608      	mov	r0, r1
 800bf66:	602b      	str	r3, [r5, #0]
 800bf68:	f7f7 f836 	bl	8002fd8 <_sbrk>
 800bf6c:	1c43      	adds	r3, r0, #1
 800bf6e:	d102      	bne.n	800bf76 <_sbrk_r+0x1a>
 800bf70:	682b      	ldr	r3, [r5, #0]
 800bf72:	b103      	cbz	r3, 800bf76 <_sbrk_r+0x1a>
 800bf74:	6023      	str	r3, [r4, #0]
 800bf76:	bd38      	pop	{r3, r4, r5, pc}
 800bf78:	20004994 	.word	0x20004994

0800bf7c <__assert_func>:
 800bf7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bf7e:	4614      	mov	r4, r2
 800bf80:	461a      	mov	r2, r3
 800bf82:	4b09      	ldr	r3, [pc, #36]	@ (800bfa8 <__assert_func+0x2c>)
 800bf84:	4605      	mov	r5, r0
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	68d8      	ldr	r0, [r3, #12]
 800bf8a:	b954      	cbnz	r4, 800bfa2 <__assert_func+0x26>
 800bf8c:	4b07      	ldr	r3, [pc, #28]	@ (800bfac <__assert_func+0x30>)
 800bf8e:	461c      	mov	r4, r3
 800bf90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bf94:	9100      	str	r1, [sp, #0]
 800bf96:	462b      	mov	r3, r5
 800bf98:	4905      	ldr	r1, [pc, #20]	@ (800bfb0 <__assert_func+0x34>)
 800bf9a:	f000 f8df 	bl	800c15c <fiprintf>
 800bf9e:	f000 f8ef 	bl	800c180 <abort>
 800bfa2:	4b04      	ldr	r3, [pc, #16]	@ (800bfb4 <__assert_func+0x38>)
 800bfa4:	e7f4      	b.n	800bf90 <__assert_func+0x14>
 800bfa6:	bf00      	nop
 800bfa8:	20000138 	.word	0x20000138
 800bfac:	0800ccb1 	.word	0x0800ccb1
 800bfb0:	0800cc83 	.word	0x0800cc83
 800bfb4:	0800cc76 	.word	0x0800cc76

0800bfb8 <_calloc_r>:
 800bfb8:	b570      	push	{r4, r5, r6, lr}
 800bfba:	fba1 5402 	umull	r5, r4, r1, r2
 800bfbe:	b93c      	cbnz	r4, 800bfd0 <_calloc_r+0x18>
 800bfc0:	4629      	mov	r1, r5
 800bfc2:	f7fe fe37 	bl	800ac34 <_malloc_r>
 800bfc6:	4606      	mov	r6, r0
 800bfc8:	b928      	cbnz	r0, 800bfd6 <_calloc_r+0x1e>
 800bfca:	2600      	movs	r6, #0
 800bfcc:	4630      	mov	r0, r6
 800bfce:	bd70      	pop	{r4, r5, r6, pc}
 800bfd0:	220c      	movs	r2, #12
 800bfd2:	6002      	str	r2, [r0, #0]
 800bfd4:	e7f9      	b.n	800bfca <_calloc_r+0x12>
 800bfd6:	462a      	mov	r2, r5
 800bfd8:	4621      	mov	r1, r4
 800bfda:	f7fd fe62 	bl	8009ca2 <memset>
 800bfde:	e7f5      	b.n	800bfcc <_calloc_r+0x14>

0800bfe0 <__ascii_mbtowc>:
 800bfe0:	b082      	sub	sp, #8
 800bfe2:	b901      	cbnz	r1, 800bfe6 <__ascii_mbtowc+0x6>
 800bfe4:	a901      	add	r1, sp, #4
 800bfe6:	b142      	cbz	r2, 800bffa <__ascii_mbtowc+0x1a>
 800bfe8:	b14b      	cbz	r3, 800bffe <__ascii_mbtowc+0x1e>
 800bfea:	7813      	ldrb	r3, [r2, #0]
 800bfec:	600b      	str	r3, [r1, #0]
 800bfee:	7812      	ldrb	r2, [r2, #0]
 800bff0:	1e10      	subs	r0, r2, #0
 800bff2:	bf18      	it	ne
 800bff4:	2001      	movne	r0, #1
 800bff6:	b002      	add	sp, #8
 800bff8:	4770      	bx	lr
 800bffa:	4610      	mov	r0, r2
 800bffc:	e7fb      	b.n	800bff6 <__ascii_mbtowc+0x16>
 800bffe:	f06f 0001 	mvn.w	r0, #1
 800c002:	e7f8      	b.n	800bff6 <__ascii_mbtowc+0x16>

0800c004 <_realloc_r>:
 800c004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c008:	4680      	mov	r8, r0
 800c00a:	4615      	mov	r5, r2
 800c00c:	460c      	mov	r4, r1
 800c00e:	b921      	cbnz	r1, 800c01a <_realloc_r+0x16>
 800c010:	4611      	mov	r1, r2
 800c012:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c016:	f7fe be0d 	b.w	800ac34 <_malloc_r>
 800c01a:	b92a      	cbnz	r2, 800c028 <_realloc_r+0x24>
 800c01c:	f7fe fd98 	bl	800ab50 <_free_r>
 800c020:	2400      	movs	r4, #0
 800c022:	4620      	mov	r0, r4
 800c024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c028:	f000 f8b1 	bl	800c18e <_malloc_usable_size_r>
 800c02c:	4285      	cmp	r5, r0
 800c02e:	4606      	mov	r6, r0
 800c030:	d802      	bhi.n	800c038 <_realloc_r+0x34>
 800c032:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c036:	d8f4      	bhi.n	800c022 <_realloc_r+0x1e>
 800c038:	4629      	mov	r1, r5
 800c03a:	4640      	mov	r0, r8
 800c03c:	f7fe fdfa 	bl	800ac34 <_malloc_r>
 800c040:	4607      	mov	r7, r0
 800c042:	2800      	cmp	r0, #0
 800c044:	d0ec      	beq.n	800c020 <_realloc_r+0x1c>
 800c046:	42b5      	cmp	r5, r6
 800c048:	462a      	mov	r2, r5
 800c04a:	4621      	mov	r1, r4
 800c04c:	bf28      	it	cs
 800c04e:	4632      	movcs	r2, r6
 800c050:	f7fd ff1d 	bl	8009e8e <memcpy>
 800c054:	4621      	mov	r1, r4
 800c056:	4640      	mov	r0, r8
 800c058:	f7fe fd7a 	bl	800ab50 <_free_r>
 800c05c:	463c      	mov	r4, r7
 800c05e:	e7e0      	b.n	800c022 <_realloc_r+0x1e>

0800c060 <_strtoul_l.constprop.0>:
 800c060:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c064:	4686      	mov	lr, r0
 800c066:	460d      	mov	r5, r1
 800c068:	4e33      	ldr	r6, [pc, #204]	@ (800c138 <_strtoul_l.constprop.0+0xd8>)
 800c06a:	4628      	mov	r0, r5
 800c06c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c070:	5d37      	ldrb	r7, [r6, r4]
 800c072:	f017 0708 	ands.w	r7, r7, #8
 800c076:	d1f8      	bne.n	800c06a <_strtoul_l.constprop.0+0xa>
 800c078:	2c2d      	cmp	r4, #45	@ 0x2d
 800c07a:	d12f      	bne.n	800c0dc <_strtoul_l.constprop.0+0x7c>
 800c07c:	2701      	movs	r7, #1
 800c07e:	782c      	ldrb	r4, [r5, #0]
 800c080:	1c85      	adds	r5, r0, #2
 800c082:	f033 0010 	bics.w	r0, r3, #16
 800c086:	d109      	bne.n	800c09c <_strtoul_l.constprop.0+0x3c>
 800c088:	2c30      	cmp	r4, #48	@ 0x30
 800c08a:	d12c      	bne.n	800c0e6 <_strtoul_l.constprop.0+0x86>
 800c08c:	7828      	ldrb	r0, [r5, #0]
 800c08e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800c092:	2858      	cmp	r0, #88	@ 0x58
 800c094:	d127      	bne.n	800c0e6 <_strtoul_l.constprop.0+0x86>
 800c096:	2310      	movs	r3, #16
 800c098:	786c      	ldrb	r4, [r5, #1]
 800c09a:	3502      	adds	r5, #2
 800c09c:	f04f 38ff 	mov.w	r8, #4294967295
 800c0a0:	fbb8 f8f3 	udiv	r8, r8, r3
 800c0a4:	2600      	movs	r6, #0
 800c0a6:	fb03 f908 	mul.w	r9, r3, r8
 800c0aa:	4630      	mov	r0, r6
 800c0ac:	ea6f 0909 	mvn.w	r9, r9
 800c0b0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800c0b4:	f1bc 0f09 	cmp.w	ip, #9
 800c0b8:	d81c      	bhi.n	800c0f4 <_strtoul_l.constprop.0+0x94>
 800c0ba:	4664      	mov	r4, ip
 800c0bc:	42a3      	cmp	r3, r4
 800c0be:	dd2a      	ble.n	800c116 <_strtoul_l.constprop.0+0xb6>
 800c0c0:	f1b6 3fff 	cmp.w	r6, #4294967295
 800c0c4:	d007      	beq.n	800c0d6 <_strtoul_l.constprop.0+0x76>
 800c0c6:	4580      	cmp	r8, r0
 800c0c8:	d322      	bcc.n	800c110 <_strtoul_l.constprop.0+0xb0>
 800c0ca:	d101      	bne.n	800c0d0 <_strtoul_l.constprop.0+0x70>
 800c0cc:	45a1      	cmp	r9, r4
 800c0ce:	db1f      	blt.n	800c110 <_strtoul_l.constprop.0+0xb0>
 800c0d0:	2601      	movs	r6, #1
 800c0d2:	fb00 4003 	mla	r0, r0, r3, r4
 800c0d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c0da:	e7e9      	b.n	800c0b0 <_strtoul_l.constprop.0+0x50>
 800c0dc:	2c2b      	cmp	r4, #43	@ 0x2b
 800c0de:	bf04      	itt	eq
 800c0e0:	782c      	ldrbeq	r4, [r5, #0]
 800c0e2:	1c85      	addeq	r5, r0, #2
 800c0e4:	e7cd      	b.n	800c082 <_strtoul_l.constprop.0+0x22>
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d1d8      	bne.n	800c09c <_strtoul_l.constprop.0+0x3c>
 800c0ea:	2c30      	cmp	r4, #48	@ 0x30
 800c0ec:	bf0c      	ite	eq
 800c0ee:	2308      	moveq	r3, #8
 800c0f0:	230a      	movne	r3, #10
 800c0f2:	e7d3      	b.n	800c09c <_strtoul_l.constprop.0+0x3c>
 800c0f4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800c0f8:	f1bc 0f19 	cmp.w	ip, #25
 800c0fc:	d801      	bhi.n	800c102 <_strtoul_l.constprop.0+0xa2>
 800c0fe:	3c37      	subs	r4, #55	@ 0x37
 800c100:	e7dc      	b.n	800c0bc <_strtoul_l.constprop.0+0x5c>
 800c102:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800c106:	f1bc 0f19 	cmp.w	ip, #25
 800c10a:	d804      	bhi.n	800c116 <_strtoul_l.constprop.0+0xb6>
 800c10c:	3c57      	subs	r4, #87	@ 0x57
 800c10e:	e7d5      	b.n	800c0bc <_strtoul_l.constprop.0+0x5c>
 800c110:	f04f 36ff 	mov.w	r6, #4294967295
 800c114:	e7df      	b.n	800c0d6 <_strtoul_l.constprop.0+0x76>
 800c116:	1c73      	adds	r3, r6, #1
 800c118:	d106      	bne.n	800c128 <_strtoul_l.constprop.0+0xc8>
 800c11a:	2322      	movs	r3, #34	@ 0x22
 800c11c:	4630      	mov	r0, r6
 800c11e:	f8ce 3000 	str.w	r3, [lr]
 800c122:	b932      	cbnz	r2, 800c132 <_strtoul_l.constprop.0+0xd2>
 800c124:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c128:	b107      	cbz	r7, 800c12c <_strtoul_l.constprop.0+0xcc>
 800c12a:	4240      	negs	r0, r0
 800c12c:	2a00      	cmp	r2, #0
 800c12e:	d0f9      	beq.n	800c124 <_strtoul_l.constprop.0+0xc4>
 800c130:	b106      	cbz	r6, 800c134 <_strtoul_l.constprop.0+0xd4>
 800c132:	1e69      	subs	r1, r5, #1
 800c134:	6011      	str	r1, [r2, #0]
 800c136:	e7f5      	b.n	800c124 <_strtoul_l.constprop.0+0xc4>
 800c138:	0800c92b 	.word	0x0800c92b

0800c13c <_strtoul_r>:
 800c13c:	f7ff bf90 	b.w	800c060 <_strtoul_l.constprop.0>

0800c140 <__ascii_wctomb>:
 800c140:	4603      	mov	r3, r0
 800c142:	4608      	mov	r0, r1
 800c144:	b141      	cbz	r1, 800c158 <__ascii_wctomb+0x18>
 800c146:	2aff      	cmp	r2, #255	@ 0xff
 800c148:	d904      	bls.n	800c154 <__ascii_wctomb+0x14>
 800c14a:	228a      	movs	r2, #138	@ 0x8a
 800c14c:	f04f 30ff 	mov.w	r0, #4294967295
 800c150:	601a      	str	r2, [r3, #0]
 800c152:	4770      	bx	lr
 800c154:	2001      	movs	r0, #1
 800c156:	700a      	strb	r2, [r1, #0]
 800c158:	4770      	bx	lr
	...

0800c15c <fiprintf>:
 800c15c:	b40e      	push	{r1, r2, r3}
 800c15e:	b503      	push	{r0, r1, lr}
 800c160:	4601      	mov	r1, r0
 800c162:	ab03      	add	r3, sp, #12
 800c164:	4805      	ldr	r0, [pc, #20]	@ (800c17c <fiprintf+0x20>)
 800c166:	f853 2b04 	ldr.w	r2, [r3], #4
 800c16a:	6800      	ldr	r0, [r0, #0]
 800c16c:	9301      	str	r3, [sp, #4]
 800c16e:	f000 f83d 	bl	800c1ec <_vfiprintf_r>
 800c172:	b002      	add	sp, #8
 800c174:	f85d eb04 	ldr.w	lr, [sp], #4
 800c178:	b003      	add	sp, #12
 800c17a:	4770      	bx	lr
 800c17c:	20000138 	.word	0x20000138

0800c180 <abort>:
 800c180:	2006      	movs	r0, #6
 800c182:	b508      	push	{r3, lr}
 800c184:	f000 fa06 	bl	800c594 <raise>
 800c188:	2001      	movs	r0, #1
 800c18a:	f7f6 feb0 	bl	8002eee <_exit>

0800c18e <_malloc_usable_size_r>:
 800c18e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c192:	1f18      	subs	r0, r3, #4
 800c194:	2b00      	cmp	r3, #0
 800c196:	bfbc      	itt	lt
 800c198:	580b      	ldrlt	r3, [r1, r0]
 800c19a:	18c0      	addlt	r0, r0, r3
 800c19c:	4770      	bx	lr

0800c19e <__sfputc_r>:
 800c19e:	6893      	ldr	r3, [r2, #8]
 800c1a0:	b410      	push	{r4}
 800c1a2:	3b01      	subs	r3, #1
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	6093      	str	r3, [r2, #8]
 800c1a8:	da07      	bge.n	800c1ba <__sfputc_r+0x1c>
 800c1aa:	6994      	ldr	r4, [r2, #24]
 800c1ac:	42a3      	cmp	r3, r4
 800c1ae:	db01      	blt.n	800c1b4 <__sfputc_r+0x16>
 800c1b0:	290a      	cmp	r1, #10
 800c1b2:	d102      	bne.n	800c1ba <__sfputc_r+0x1c>
 800c1b4:	bc10      	pop	{r4}
 800c1b6:	f000 b931 	b.w	800c41c <__swbuf_r>
 800c1ba:	6813      	ldr	r3, [r2, #0]
 800c1bc:	1c58      	adds	r0, r3, #1
 800c1be:	6010      	str	r0, [r2, #0]
 800c1c0:	7019      	strb	r1, [r3, #0]
 800c1c2:	4608      	mov	r0, r1
 800c1c4:	bc10      	pop	{r4}
 800c1c6:	4770      	bx	lr

0800c1c8 <__sfputs_r>:
 800c1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ca:	4606      	mov	r6, r0
 800c1cc:	460f      	mov	r7, r1
 800c1ce:	4614      	mov	r4, r2
 800c1d0:	18d5      	adds	r5, r2, r3
 800c1d2:	42ac      	cmp	r4, r5
 800c1d4:	d101      	bne.n	800c1da <__sfputs_r+0x12>
 800c1d6:	2000      	movs	r0, #0
 800c1d8:	e007      	b.n	800c1ea <__sfputs_r+0x22>
 800c1da:	463a      	mov	r2, r7
 800c1dc:	4630      	mov	r0, r6
 800c1de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1e2:	f7ff ffdc 	bl	800c19e <__sfputc_r>
 800c1e6:	1c43      	adds	r3, r0, #1
 800c1e8:	d1f3      	bne.n	800c1d2 <__sfputs_r+0xa>
 800c1ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c1ec <_vfiprintf_r>:
 800c1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1f0:	460d      	mov	r5, r1
 800c1f2:	4614      	mov	r4, r2
 800c1f4:	4698      	mov	r8, r3
 800c1f6:	4606      	mov	r6, r0
 800c1f8:	b09d      	sub	sp, #116	@ 0x74
 800c1fa:	b118      	cbz	r0, 800c204 <_vfiprintf_r+0x18>
 800c1fc:	6a03      	ldr	r3, [r0, #32]
 800c1fe:	b90b      	cbnz	r3, 800c204 <_vfiprintf_r+0x18>
 800c200:	f7fd fc70 	bl	8009ae4 <__sinit>
 800c204:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c206:	07d9      	lsls	r1, r3, #31
 800c208:	d405      	bmi.n	800c216 <_vfiprintf_r+0x2a>
 800c20a:	89ab      	ldrh	r3, [r5, #12]
 800c20c:	059a      	lsls	r2, r3, #22
 800c20e:	d402      	bmi.n	800c216 <_vfiprintf_r+0x2a>
 800c210:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c212:	f7fd fe2c 	bl	8009e6e <__retarget_lock_acquire_recursive>
 800c216:	89ab      	ldrh	r3, [r5, #12]
 800c218:	071b      	lsls	r3, r3, #28
 800c21a:	d501      	bpl.n	800c220 <_vfiprintf_r+0x34>
 800c21c:	692b      	ldr	r3, [r5, #16]
 800c21e:	b99b      	cbnz	r3, 800c248 <_vfiprintf_r+0x5c>
 800c220:	4629      	mov	r1, r5
 800c222:	4630      	mov	r0, r6
 800c224:	f000 f938 	bl	800c498 <__swsetup_r>
 800c228:	b170      	cbz	r0, 800c248 <_vfiprintf_r+0x5c>
 800c22a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c22c:	07dc      	lsls	r4, r3, #31
 800c22e:	d504      	bpl.n	800c23a <_vfiprintf_r+0x4e>
 800c230:	f04f 30ff 	mov.w	r0, #4294967295
 800c234:	b01d      	add	sp, #116	@ 0x74
 800c236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c23a:	89ab      	ldrh	r3, [r5, #12]
 800c23c:	0598      	lsls	r0, r3, #22
 800c23e:	d4f7      	bmi.n	800c230 <_vfiprintf_r+0x44>
 800c240:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c242:	f7fd fe15 	bl	8009e70 <__retarget_lock_release_recursive>
 800c246:	e7f3      	b.n	800c230 <_vfiprintf_r+0x44>
 800c248:	2300      	movs	r3, #0
 800c24a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c24c:	2320      	movs	r3, #32
 800c24e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c252:	2330      	movs	r3, #48	@ 0x30
 800c254:	f04f 0901 	mov.w	r9, #1
 800c258:	f8cd 800c 	str.w	r8, [sp, #12]
 800c25c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800c408 <_vfiprintf_r+0x21c>
 800c260:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c264:	4623      	mov	r3, r4
 800c266:	469a      	mov	sl, r3
 800c268:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c26c:	b10a      	cbz	r2, 800c272 <_vfiprintf_r+0x86>
 800c26e:	2a25      	cmp	r2, #37	@ 0x25
 800c270:	d1f9      	bne.n	800c266 <_vfiprintf_r+0x7a>
 800c272:	ebba 0b04 	subs.w	fp, sl, r4
 800c276:	d00b      	beq.n	800c290 <_vfiprintf_r+0xa4>
 800c278:	465b      	mov	r3, fp
 800c27a:	4622      	mov	r2, r4
 800c27c:	4629      	mov	r1, r5
 800c27e:	4630      	mov	r0, r6
 800c280:	f7ff ffa2 	bl	800c1c8 <__sfputs_r>
 800c284:	3001      	adds	r0, #1
 800c286:	f000 80a7 	beq.w	800c3d8 <_vfiprintf_r+0x1ec>
 800c28a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c28c:	445a      	add	r2, fp
 800c28e:	9209      	str	r2, [sp, #36]	@ 0x24
 800c290:	f89a 3000 	ldrb.w	r3, [sl]
 800c294:	2b00      	cmp	r3, #0
 800c296:	f000 809f 	beq.w	800c3d8 <_vfiprintf_r+0x1ec>
 800c29a:	2300      	movs	r3, #0
 800c29c:	f04f 32ff 	mov.w	r2, #4294967295
 800c2a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2a4:	f10a 0a01 	add.w	sl, sl, #1
 800c2a8:	9304      	str	r3, [sp, #16]
 800c2aa:	9307      	str	r3, [sp, #28]
 800c2ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c2b0:	931a      	str	r3, [sp, #104]	@ 0x68
 800c2b2:	4654      	mov	r4, sl
 800c2b4:	2205      	movs	r2, #5
 800c2b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2ba:	4853      	ldr	r0, [pc, #332]	@ (800c408 <_vfiprintf_r+0x21c>)
 800c2bc:	f7fd fdd9 	bl	8009e72 <memchr>
 800c2c0:	9a04      	ldr	r2, [sp, #16]
 800c2c2:	b9d8      	cbnz	r0, 800c2fc <_vfiprintf_r+0x110>
 800c2c4:	06d1      	lsls	r1, r2, #27
 800c2c6:	bf44      	itt	mi
 800c2c8:	2320      	movmi	r3, #32
 800c2ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c2ce:	0713      	lsls	r3, r2, #28
 800c2d0:	bf44      	itt	mi
 800c2d2:	232b      	movmi	r3, #43	@ 0x2b
 800c2d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c2d8:	f89a 3000 	ldrb.w	r3, [sl]
 800c2dc:	2b2a      	cmp	r3, #42	@ 0x2a
 800c2de:	d015      	beq.n	800c30c <_vfiprintf_r+0x120>
 800c2e0:	4654      	mov	r4, sl
 800c2e2:	2000      	movs	r0, #0
 800c2e4:	f04f 0c0a 	mov.w	ip, #10
 800c2e8:	9a07      	ldr	r2, [sp, #28]
 800c2ea:	4621      	mov	r1, r4
 800c2ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2f0:	3b30      	subs	r3, #48	@ 0x30
 800c2f2:	2b09      	cmp	r3, #9
 800c2f4:	d94b      	bls.n	800c38e <_vfiprintf_r+0x1a2>
 800c2f6:	b1b0      	cbz	r0, 800c326 <_vfiprintf_r+0x13a>
 800c2f8:	9207      	str	r2, [sp, #28]
 800c2fa:	e014      	b.n	800c326 <_vfiprintf_r+0x13a>
 800c2fc:	eba0 0308 	sub.w	r3, r0, r8
 800c300:	fa09 f303 	lsl.w	r3, r9, r3
 800c304:	4313      	orrs	r3, r2
 800c306:	46a2      	mov	sl, r4
 800c308:	9304      	str	r3, [sp, #16]
 800c30a:	e7d2      	b.n	800c2b2 <_vfiprintf_r+0xc6>
 800c30c:	9b03      	ldr	r3, [sp, #12]
 800c30e:	1d19      	adds	r1, r3, #4
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	9103      	str	r1, [sp, #12]
 800c314:	2b00      	cmp	r3, #0
 800c316:	bfbb      	ittet	lt
 800c318:	425b      	neglt	r3, r3
 800c31a:	f042 0202 	orrlt.w	r2, r2, #2
 800c31e:	9307      	strge	r3, [sp, #28]
 800c320:	9307      	strlt	r3, [sp, #28]
 800c322:	bfb8      	it	lt
 800c324:	9204      	strlt	r2, [sp, #16]
 800c326:	7823      	ldrb	r3, [r4, #0]
 800c328:	2b2e      	cmp	r3, #46	@ 0x2e
 800c32a:	d10a      	bne.n	800c342 <_vfiprintf_r+0x156>
 800c32c:	7863      	ldrb	r3, [r4, #1]
 800c32e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c330:	d132      	bne.n	800c398 <_vfiprintf_r+0x1ac>
 800c332:	9b03      	ldr	r3, [sp, #12]
 800c334:	3402      	adds	r4, #2
 800c336:	1d1a      	adds	r2, r3, #4
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	9203      	str	r2, [sp, #12]
 800c33c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c340:	9305      	str	r3, [sp, #20]
 800c342:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800c40c <_vfiprintf_r+0x220>
 800c346:	2203      	movs	r2, #3
 800c348:	4650      	mov	r0, sl
 800c34a:	7821      	ldrb	r1, [r4, #0]
 800c34c:	f7fd fd91 	bl	8009e72 <memchr>
 800c350:	b138      	cbz	r0, 800c362 <_vfiprintf_r+0x176>
 800c352:	2240      	movs	r2, #64	@ 0x40
 800c354:	9b04      	ldr	r3, [sp, #16]
 800c356:	eba0 000a 	sub.w	r0, r0, sl
 800c35a:	4082      	lsls	r2, r0
 800c35c:	4313      	orrs	r3, r2
 800c35e:	3401      	adds	r4, #1
 800c360:	9304      	str	r3, [sp, #16]
 800c362:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c366:	2206      	movs	r2, #6
 800c368:	4829      	ldr	r0, [pc, #164]	@ (800c410 <_vfiprintf_r+0x224>)
 800c36a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c36e:	f7fd fd80 	bl	8009e72 <memchr>
 800c372:	2800      	cmp	r0, #0
 800c374:	d03f      	beq.n	800c3f6 <_vfiprintf_r+0x20a>
 800c376:	4b27      	ldr	r3, [pc, #156]	@ (800c414 <_vfiprintf_r+0x228>)
 800c378:	bb1b      	cbnz	r3, 800c3c2 <_vfiprintf_r+0x1d6>
 800c37a:	9b03      	ldr	r3, [sp, #12]
 800c37c:	3307      	adds	r3, #7
 800c37e:	f023 0307 	bic.w	r3, r3, #7
 800c382:	3308      	adds	r3, #8
 800c384:	9303      	str	r3, [sp, #12]
 800c386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c388:	443b      	add	r3, r7
 800c38a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c38c:	e76a      	b.n	800c264 <_vfiprintf_r+0x78>
 800c38e:	460c      	mov	r4, r1
 800c390:	2001      	movs	r0, #1
 800c392:	fb0c 3202 	mla	r2, ip, r2, r3
 800c396:	e7a8      	b.n	800c2ea <_vfiprintf_r+0xfe>
 800c398:	2300      	movs	r3, #0
 800c39a:	f04f 0c0a 	mov.w	ip, #10
 800c39e:	4619      	mov	r1, r3
 800c3a0:	3401      	adds	r4, #1
 800c3a2:	9305      	str	r3, [sp, #20]
 800c3a4:	4620      	mov	r0, r4
 800c3a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3aa:	3a30      	subs	r2, #48	@ 0x30
 800c3ac:	2a09      	cmp	r2, #9
 800c3ae:	d903      	bls.n	800c3b8 <_vfiprintf_r+0x1cc>
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d0c6      	beq.n	800c342 <_vfiprintf_r+0x156>
 800c3b4:	9105      	str	r1, [sp, #20]
 800c3b6:	e7c4      	b.n	800c342 <_vfiprintf_r+0x156>
 800c3b8:	4604      	mov	r4, r0
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3c0:	e7f0      	b.n	800c3a4 <_vfiprintf_r+0x1b8>
 800c3c2:	ab03      	add	r3, sp, #12
 800c3c4:	9300      	str	r3, [sp, #0]
 800c3c6:	462a      	mov	r2, r5
 800c3c8:	4630      	mov	r0, r6
 800c3ca:	4b13      	ldr	r3, [pc, #76]	@ (800c418 <_vfiprintf_r+0x22c>)
 800c3cc:	a904      	add	r1, sp, #16
 800c3ce:	f7fc ff3f 	bl	8009250 <_printf_float>
 800c3d2:	4607      	mov	r7, r0
 800c3d4:	1c78      	adds	r0, r7, #1
 800c3d6:	d1d6      	bne.n	800c386 <_vfiprintf_r+0x19a>
 800c3d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c3da:	07d9      	lsls	r1, r3, #31
 800c3dc:	d405      	bmi.n	800c3ea <_vfiprintf_r+0x1fe>
 800c3de:	89ab      	ldrh	r3, [r5, #12]
 800c3e0:	059a      	lsls	r2, r3, #22
 800c3e2:	d402      	bmi.n	800c3ea <_vfiprintf_r+0x1fe>
 800c3e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c3e6:	f7fd fd43 	bl	8009e70 <__retarget_lock_release_recursive>
 800c3ea:	89ab      	ldrh	r3, [r5, #12]
 800c3ec:	065b      	lsls	r3, r3, #25
 800c3ee:	f53f af1f 	bmi.w	800c230 <_vfiprintf_r+0x44>
 800c3f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c3f4:	e71e      	b.n	800c234 <_vfiprintf_r+0x48>
 800c3f6:	ab03      	add	r3, sp, #12
 800c3f8:	9300      	str	r3, [sp, #0]
 800c3fa:	462a      	mov	r2, r5
 800c3fc:	4630      	mov	r0, r6
 800c3fe:	4b06      	ldr	r3, [pc, #24]	@ (800c418 <_vfiprintf_r+0x22c>)
 800c400:	a904      	add	r1, sp, #16
 800c402:	f7fd f9c3 	bl	800978c <_printf_i>
 800c406:	e7e4      	b.n	800c3d2 <_vfiprintf_r+0x1e6>
 800c408:	0800cc40 	.word	0x0800cc40
 800c40c:	0800cc46 	.word	0x0800cc46
 800c410:	0800cc4a 	.word	0x0800cc4a
 800c414:	08009251 	.word	0x08009251
 800c418:	0800c1c9 	.word	0x0800c1c9

0800c41c <__swbuf_r>:
 800c41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c41e:	460e      	mov	r6, r1
 800c420:	4614      	mov	r4, r2
 800c422:	4605      	mov	r5, r0
 800c424:	b118      	cbz	r0, 800c42e <__swbuf_r+0x12>
 800c426:	6a03      	ldr	r3, [r0, #32]
 800c428:	b90b      	cbnz	r3, 800c42e <__swbuf_r+0x12>
 800c42a:	f7fd fb5b 	bl	8009ae4 <__sinit>
 800c42e:	69a3      	ldr	r3, [r4, #24]
 800c430:	60a3      	str	r3, [r4, #8]
 800c432:	89a3      	ldrh	r3, [r4, #12]
 800c434:	071a      	lsls	r2, r3, #28
 800c436:	d501      	bpl.n	800c43c <__swbuf_r+0x20>
 800c438:	6923      	ldr	r3, [r4, #16]
 800c43a:	b943      	cbnz	r3, 800c44e <__swbuf_r+0x32>
 800c43c:	4621      	mov	r1, r4
 800c43e:	4628      	mov	r0, r5
 800c440:	f000 f82a 	bl	800c498 <__swsetup_r>
 800c444:	b118      	cbz	r0, 800c44e <__swbuf_r+0x32>
 800c446:	f04f 37ff 	mov.w	r7, #4294967295
 800c44a:	4638      	mov	r0, r7
 800c44c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c44e:	6823      	ldr	r3, [r4, #0]
 800c450:	6922      	ldr	r2, [r4, #16]
 800c452:	b2f6      	uxtb	r6, r6
 800c454:	1a98      	subs	r0, r3, r2
 800c456:	6963      	ldr	r3, [r4, #20]
 800c458:	4637      	mov	r7, r6
 800c45a:	4283      	cmp	r3, r0
 800c45c:	dc05      	bgt.n	800c46a <__swbuf_r+0x4e>
 800c45e:	4621      	mov	r1, r4
 800c460:	4628      	mov	r0, r5
 800c462:	f7ff fce1 	bl	800be28 <_fflush_r>
 800c466:	2800      	cmp	r0, #0
 800c468:	d1ed      	bne.n	800c446 <__swbuf_r+0x2a>
 800c46a:	68a3      	ldr	r3, [r4, #8]
 800c46c:	3b01      	subs	r3, #1
 800c46e:	60a3      	str	r3, [r4, #8]
 800c470:	6823      	ldr	r3, [r4, #0]
 800c472:	1c5a      	adds	r2, r3, #1
 800c474:	6022      	str	r2, [r4, #0]
 800c476:	701e      	strb	r6, [r3, #0]
 800c478:	6962      	ldr	r2, [r4, #20]
 800c47a:	1c43      	adds	r3, r0, #1
 800c47c:	429a      	cmp	r2, r3
 800c47e:	d004      	beq.n	800c48a <__swbuf_r+0x6e>
 800c480:	89a3      	ldrh	r3, [r4, #12]
 800c482:	07db      	lsls	r3, r3, #31
 800c484:	d5e1      	bpl.n	800c44a <__swbuf_r+0x2e>
 800c486:	2e0a      	cmp	r6, #10
 800c488:	d1df      	bne.n	800c44a <__swbuf_r+0x2e>
 800c48a:	4621      	mov	r1, r4
 800c48c:	4628      	mov	r0, r5
 800c48e:	f7ff fccb 	bl	800be28 <_fflush_r>
 800c492:	2800      	cmp	r0, #0
 800c494:	d0d9      	beq.n	800c44a <__swbuf_r+0x2e>
 800c496:	e7d6      	b.n	800c446 <__swbuf_r+0x2a>

0800c498 <__swsetup_r>:
 800c498:	b538      	push	{r3, r4, r5, lr}
 800c49a:	4b29      	ldr	r3, [pc, #164]	@ (800c540 <__swsetup_r+0xa8>)
 800c49c:	4605      	mov	r5, r0
 800c49e:	6818      	ldr	r0, [r3, #0]
 800c4a0:	460c      	mov	r4, r1
 800c4a2:	b118      	cbz	r0, 800c4ac <__swsetup_r+0x14>
 800c4a4:	6a03      	ldr	r3, [r0, #32]
 800c4a6:	b90b      	cbnz	r3, 800c4ac <__swsetup_r+0x14>
 800c4a8:	f7fd fb1c 	bl	8009ae4 <__sinit>
 800c4ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4b0:	0719      	lsls	r1, r3, #28
 800c4b2:	d422      	bmi.n	800c4fa <__swsetup_r+0x62>
 800c4b4:	06da      	lsls	r2, r3, #27
 800c4b6:	d407      	bmi.n	800c4c8 <__swsetup_r+0x30>
 800c4b8:	2209      	movs	r2, #9
 800c4ba:	602a      	str	r2, [r5, #0]
 800c4bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c4c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c4c4:	81a3      	strh	r3, [r4, #12]
 800c4c6:	e033      	b.n	800c530 <__swsetup_r+0x98>
 800c4c8:	0758      	lsls	r0, r3, #29
 800c4ca:	d512      	bpl.n	800c4f2 <__swsetup_r+0x5a>
 800c4cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c4ce:	b141      	cbz	r1, 800c4e2 <__swsetup_r+0x4a>
 800c4d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c4d4:	4299      	cmp	r1, r3
 800c4d6:	d002      	beq.n	800c4de <__swsetup_r+0x46>
 800c4d8:	4628      	mov	r0, r5
 800c4da:	f7fe fb39 	bl	800ab50 <_free_r>
 800c4de:	2300      	movs	r3, #0
 800c4e0:	6363      	str	r3, [r4, #52]	@ 0x34
 800c4e2:	89a3      	ldrh	r3, [r4, #12]
 800c4e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c4e8:	81a3      	strh	r3, [r4, #12]
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	6063      	str	r3, [r4, #4]
 800c4ee:	6923      	ldr	r3, [r4, #16]
 800c4f0:	6023      	str	r3, [r4, #0]
 800c4f2:	89a3      	ldrh	r3, [r4, #12]
 800c4f4:	f043 0308 	orr.w	r3, r3, #8
 800c4f8:	81a3      	strh	r3, [r4, #12]
 800c4fa:	6923      	ldr	r3, [r4, #16]
 800c4fc:	b94b      	cbnz	r3, 800c512 <__swsetup_r+0x7a>
 800c4fe:	89a3      	ldrh	r3, [r4, #12]
 800c500:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c504:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c508:	d003      	beq.n	800c512 <__swsetup_r+0x7a>
 800c50a:	4621      	mov	r1, r4
 800c50c:	4628      	mov	r0, r5
 800c50e:	f000 f882 	bl	800c616 <__smakebuf_r>
 800c512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c516:	f013 0201 	ands.w	r2, r3, #1
 800c51a:	d00a      	beq.n	800c532 <__swsetup_r+0x9a>
 800c51c:	2200      	movs	r2, #0
 800c51e:	60a2      	str	r2, [r4, #8]
 800c520:	6962      	ldr	r2, [r4, #20]
 800c522:	4252      	negs	r2, r2
 800c524:	61a2      	str	r2, [r4, #24]
 800c526:	6922      	ldr	r2, [r4, #16]
 800c528:	b942      	cbnz	r2, 800c53c <__swsetup_r+0xa4>
 800c52a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c52e:	d1c5      	bne.n	800c4bc <__swsetup_r+0x24>
 800c530:	bd38      	pop	{r3, r4, r5, pc}
 800c532:	0799      	lsls	r1, r3, #30
 800c534:	bf58      	it	pl
 800c536:	6962      	ldrpl	r2, [r4, #20]
 800c538:	60a2      	str	r2, [r4, #8]
 800c53a:	e7f4      	b.n	800c526 <__swsetup_r+0x8e>
 800c53c:	2000      	movs	r0, #0
 800c53e:	e7f7      	b.n	800c530 <__swsetup_r+0x98>
 800c540:	20000138 	.word	0x20000138

0800c544 <_raise_r>:
 800c544:	291f      	cmp	r1, #31
 800c546:	b538      	push	{r3, r4, r5, lr}
 800c548:	4605      	mov	r5, r0
 800c54a:	460c      	mov	r4, r1
 800c54c:	d904      	bls.n	800c558 <_raise_r+0x14>
 800c54e:	2316      	movs	r3, #22
 800c550:	6003      	str	r3, [r0, #0]
 800c552:	f04f 30ff 	mov.w	r0, #4294967295
 800c556:	bd38      	pop	{r3, r4, r5, pc}
 800c558:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c55a:	b112      	cbz	r2, 800c562 <_raise_r+0x1e>
 800c55c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c560:	b94b      	cbnz	r3, 800c576 <_raise_r+0x32>
 800c562:	4628      	mov	r0, r5
 800c564:	f000 f830 	bl	800c5c8 <_getpid_r>
 800c568:	4622      	mov	r2, r4
 800c56a:	4601      	mov	r1, r0
 800c56c:	4628      	mov	r0, r5
 800c56e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c572:	f000 b817 	b.w	800c5a4 <_kill_r>
 800c576:	2b01      	cmp	r3, #1
 800c578:	d00a      	beq.n	800c590 <_raise_r+0x4c>
 800c57a:	1c59      	adds	r1, r3, #1
 800c57c:	d103      	bne.n	800c586 <_raise_r+0x42>
 800c57e:	2316      	movs	r3, #22
 800c580:	6003      	str	r3, [r0, #0]
 800c582:	2001      	movs	r0, #1
 800c584:	e7e7      	b.n	800c556 <_raise_r+0x12>
 800c586:	2100      	movs	r1, #0
 800c588:	4620      	mov	r0, r4
 800c58a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c58e:	4798      	blx	r3
 800c590:	2000      	movs	r0, #0
 800c592:	e7e0      	b.n	800c556 <_raise_r+0x12>

0800c594 <raise>:
 800c594:	4b02      	ldr	r3, [pc, #8]	@ (800c5a0 <raise+0xc>)
 800c596:	4601      	mov	r1, r0
 800c598:	6818      	ldr	r0, [r3, #0]
 800c59a:	f7ff bfd3 	b.w	800c544 <_raise_r>
 800c59e:	bf00      	nop
 800c5a0:	20000138 	.word	0x20000138

0800c5a4 <_kill_r>:
 800c5a4:	b538      	push	{r3, r4, r5, lr}
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	4d06      	ldr	r5, [pc, #24]	@ (800c5c4 <_kill_r+0x20>)
 800c5aa:	4604      	mov	r4, r0
 800c5ac:	4608      	mov	r0, r1
 800c5ae:	4611      	mov	r1, r2
 800c5b0:	602b      	str	r3, [r5, #0]
 800c5b2:	f7f6 fc8c 	bl	8002ece <_kill>
 800c5b6:	1c43      	adds	r3, r0, #1
 800c5b8:	d102      	bne.n	800c5c0 <_kill_r+0x1c>
 800c5ba:	682b      	ldr	r3, [r5, #0]
 800c5bc:	b103      	cbz	r3, 800c5c0 <_kill_r+0x1c>
 800c5be:	6023      	str	r3, [r4, #0]
 800c5c0:	bd38      	pop	{r3, r4, r5, pc}
 800c5c2:	bf00      	nop
 800c5c4:	20004994 	.word	0x20004994

0800c5c8 <_getpid_r>:
 800c5c8:	f7f6 bc7a 	b.w	8002ec0 <_getpid>

0800c5cc <__swhatbuf_r>:
 800c5cc:	b570      	push	{r4, r5, r6, lr}
 800c5ce:	460c      	mov	r4, r1
 800c5d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5d4:	4615      	mov	r5, r2
 800c5d6:	2900      	cmp	r1, #0
 800c5d8:	461e      	mov	r6, r3
 800c5da:	b096      	sub	sp, #88	@ 0x58
 800c5dc:	da0c      	bge.n	800c5f8 <__swhatbuf_r+0x2c>
 800c5de:	89a3      	ldrh	r3, [r4, #12]
 800c5e0:	2100      	movs	r1, #0
 800c5e2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c5e6:	bf14      	ite	ne
 800c5e8:	2340      	movne	r3, #64	@ 0x40
 800c5ea:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c5ee:	2000      	movs	r0, #0
 800c5f0:	6031      	str	r1, [r6, #0]
 800c5f2:	602b      	str	r3, [r5, #0]
 800c5f4:	b016      	add	sp, #88	@ 0x58
 800c5f6:	bd70      	pop	{r4, r5, r6, pc}
 800c5f8:	466a      	mov	r2, sp
 800c5fa:	f000 f849 	bl	800c690 <_fstat_r>
 800c5fe:	2800      	cmp	r0, #0
 800c600:	dbed      	blt.n	800c5de <__swhatbuf_r+0x12>
 800c602:	9901      	ldr	r1, [sp, #4]
 800c604:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c608:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c60c:	4259      	negs	r1, r3
 800c60e:	4159      	adcs	r1, r3
 800c610:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c614:	e7eb      	b.n	800c5ee <__swhatbuf_r+0x22>

0800c616 <__smakebuf_r>:
 800c616:	898b      	ldrh	r3, [r1, #12]
 800c618:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c61a:	079d      	lsls	r5, r3, #30
 800c61c:	4606      	mov	r6, r0
 800c61e:	460c      	mov	r4, r1
 800c620:	d507      	bpl.n	800c632 <__smakebuf_r+0x1c>
 800c622:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c626:	6023      	str	r3, [r4, #0]
 800c628:	6123      	str	r3, [r4, #16]
 800c62a:	2301      	movs	r3, #1
 800c62c:	6163      	str	r3, [r4, #20]
 800c62e:	b003      	add	sp, #12
 800c630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c632:	466a      	mov	r2, sp
 800c634:	ab01      	add	r3, sp, #4
 800c636:	f7ff ffc9 	bl	800c5cc <__swhatbuf_r>
 800c63a:	9f00      	ldr	r7, [sp, #0]
 800c63c:	4605      	mov	r5, r0
 800c63e:	4639      	mov	r1, r7
 800c640:	4630      	mov	r0, r6
 800c642:	f7fe faf7 	bl	800ac34 <_malloc_r>
 800c646:	b948      	cbnz	r0, 800c65c <__smakebuf_r+0x46>
 800c648:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c64c:	059a      	lsls	r2, r3, #22
 800c64e:	d4ee      	bmi.n	800c62e <__smakebuf_r+0x18>
 800c650:	f023 0303 	bic.w	r3, r3, #3
 800c654:	f043 0302 	orr.w	r3, r3, #2
 800c658:	81a3      	strh	r3, [r4, #12]
 800c65a:	e7e2      	b.n	800c622 <__smakebuf_r+0xc>
 800c65c:	89a3      	ldrh	r3, [r4, #12]
 800c65e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c662:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c666:	81a3      	strh	r3, [r4, #12]
 800c668:	9b01      	ldr	r3, [sp, #4]
 800c66a:	6020      	str	r0, [r4, #0]
 800c66c:	b15b      	cbz	r3, 800c686 <__smakebuf_r+0x70>
 800c66e:	4630      	mov	r0, r6
 800c670:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c674:	f000 f81e 	bl	800c6b4 <_isatty_r>
 800c678:	b128      	cbz	r0, 800c686 <__smakebuf_r+0x70>
 800c67a:	89a3      	ldrh	r3, [r4, #12]
 800c67c:	f023 0303 	bic.w	r3, r3, #3
 800c680:	f043 0301 	orr.w	r3, r3, #1
 800c684:	81a3      	strh	r3, [r4, #12]
 800c686:	89a3      	ldrh	r3, [r4, #12]
 800c688:	431d      	orrs	r5, r3
 800c68a:	81a5      	strh	r5, [r4, #12]
 800c68c:	e7cf      	b.n	800c62e <__smakebuf_r+0x18>
	...

0800c690 <_fstat_r>:
 800c690:	b538      	push	{r3, r4, r5, lr}
 800c692:	2300      	movs	r3, #0
 800c694:	4d06      	ldr	r5, [pc, #24]	@ (800c6b0 <_fstat_r+0x20>)
 800c696:	4604      	mov	r4, r0
 800c698:	4608      	mov	r0, r1
 800c69a:	4611      	mov	r1, r2
 800c69c:	602b      	str	r3, [r5, #0]
 800c69e:	f7f6 fc75 	bl	8002f8c <_fstat>
 800c6a2:	1c43      	adds	r3, r0, #1
 800c6a4:	d102      	bne.n	800c6ac <_fstat_r+0x1c>
 800c6a6:	682b      	ldr	r3, [r5, #0]
 800c6a8:	b103      	cbz	r3, 800c6ac <_fstat_r+0x1c>
 800c6aa:	6023      	str	r3, [r4, #0]
 800c6ac:	bd38      	pop	{r3, r4, r5, pc}
 800c6ae:	bf00      	nop
 800c6b0:	20004994 	.word	0x20004994

0800c6b4 <_isatty_r>:
 800c6b4:	b538      	push	{r3, r4, r5, lr}
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	4d05      	ldr	r5, [pc, #20]	@ (800c6d0 <_isatty_r+0x1c>)
 800c6ba:	4604      	mov	r4, r0
 800c6bc:	4608      	mov	r0, r1
 800c6be:	602b      	str	r3, [r5, #0]
 800c6c0:	f7f6 fc73 	bl	8002faa <_isatty>
 800c6c4:	1c43      	adds	r3, r0, #1
 800c6c6:	d102      	bne.n	800c6ce <_isatty_r+0x1a>
 800c6c8:	682b      	ldr	r3, [r5, #0]
 800c6ca:	b103      	cbz	r3, 800c6ce <_isatty_r+0x1a>
 800c6cc:	6023      	str	r3, [r4, #0]
 800c6ce:	bd38      	pop	{r3, r4, r5, pc}
 800c6d0:	20004994 	.word	0x20004994

0800c6d4 <_init>:
 800c6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6d6:	bf00      	nop
 800c6d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6da:	bc08      	pop	{r3}
 800c6dc:	469e      	mov	lr, r3
 800c6de:	4770      	bx	lr

0800c6e0 <_fini>:
 800c6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6e2:	bf00      	nop
 800c6e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6e6:	bc08      	pop	{r3}
 800c6e8:	469e      	mov	lr, r3
 800c6ea:	4770      	bx	lr
