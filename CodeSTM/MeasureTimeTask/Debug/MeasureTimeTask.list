
MeasureTimeTask.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000831c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  08008430  08008430  00009430  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008840  08008840  0000a254  2**0
                  CONTENTS
  4 .ARM          00000008  08008840  08008840  00009840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008848  08008848  0000a254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008848  08008848  00009848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800884c  0800884c  0000984c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000254  20000000  08008850  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000254  08008aa4  0000a254  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000054c  08008aa4  0000a54c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a254  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c1e7  00000000  00000000  0000a27d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020a0  00000000  00000000  00016464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  00018508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000940  00000000  00000000  000190d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001856d  00000000  00000000  00019a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e42d  00000000  00000000  00031f85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087304  00000000  00000000  000403b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c76b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041e0  00000000  00000000  000c76fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000cb8dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000254 	.word	0x20000254
 800012c:	00000000 	.word	0x00000000
 8000130:	08008414 	.word	0x08008414

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000258 	.word	0x20000258
 800014c:	08008414 	.word	0x08008414

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <MPR121_Init>:
#include "MPR121.h"


uint8_t MPR121_Init(void) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
    
    writeRegister(MPR121_SOFTRESET, 0x63);
 8000b2e:	2163      	movs	r1, #99	@ 0x63
 8000b30:	2080      	movs	r0, #128	@ 0x80
 8000b32:	f000 f859 	bl	8000be8 <writeRegister>
    HAL_Delay(1);
 8000b36:	2001      	movs	r0, #1
 8000b38:	f001 fe98 	bl	800286c <HAL_Delay>
    writeRegister(MPR121_ECR, 0x0);
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	205e      	movs	r0, #94	@ 0x5e
 8000b40:	f000 f852 	bl	8000be8 <writeRegister>

  uint8_t c = readRegister8(MPR121_CONFIG2);
 8000b44:	205d      	movs	r0, #93	@ 0x5d
 8000b46:	f000 f86b 	bl	8000c20 <readRegister8>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]

  if (c != 0x24)
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	2b24      	cmp	r3, #36	@ 0x24
 8000b52:	d001      	beq.n	8000b58 <MPR121_Init+0x30>
    return c;
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	e043      	b.n	8000be0 <MPR121_Init+0xb8>

  setThresholds(MPR121_TOUCH_THRESHOLD_DEFAULT, MPR121_RELEASE_THRESHOLD_DEFAULT);
 8000b58:	2106      	movs	r1, #6
 8000b5a:	200c      	movs	r0, #12
 8000b5c:	f000 f898 	bl	8000c90 <setThresholds>
  writeRegister(MPR121_MHDR, 0x01);
 8000b60:	2101      	movs	r1, #1
 8000b62:	202b      	movs	r0, #43	@ 0x2b
 8000b64:	f000 f840 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_NHDR, 0x01);
 8000b68:	2101      	movs	r1, #1
 8000b6a:	202c      	movs	r0, #44	@ 0x2c
 8000b6c:	f000 f83c 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_NCLR, 0x0E);
 8000b70:	210e      	movs	r1, #14
 8000b72:	202d      	movs	r0, #45	@ 0x2d
 8000b74:	f000 f838 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_FDLR, 0x00);
 8000b78:	2100      	movs	r1, #0
 8000b7a:	202e      	movs	r0, #46	@ 0x2e
 8000b7c:	f000 f834 	bl	8000be8 <writeRegister>

  writeRegister(MPR121_MHDF, 0x01);
 8000b80:	2101      	movs	r1, #1
 8000b82:	202f      	movs	r0, #47	@ 0x2f
 8000b84:	f000 f830 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_NHDF, 0x05);
 8000b88:	2105      	movs	r1, #5
 8000b8a:	2030      	movs	r0, #48	@ 0x30
 8000b8c:	f000 f82c 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_NCLF, 0x01);
 8000b90:	2101      	movs	r1, #1
 8000b92:	2031      	movs	r0, #49	@ 0x31
 8000b94:	f000 f828 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_FDLF, 0x00);
 8000b98:	2100      	movs	r1, #0
 8000b9a:	2032      	movs	r0, #50	@ 0x32
 8000b9c:	f000 f824 	bl	8000be8 <writeRegister>

  writeRegister(MPR121_NHDT, 0x00);
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	2033      	movs	r0, #51	@ 0x33
 8000ba4:	f000 f820 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_NCLT, 0x00);
 8000ba8:	2100      	movs	r1, #0
 8000baa:	2034      	movs	r0, #52	@ 0x34
 8000bac:	f000 f81c 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_FDLT, 0x00);
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	2035      	movs	r0, #53	@ 0x35
 8000bb4:	f000 f818 	bl	8000be8 <writeRegister>

  writeRegister(MPR121_DEBOUNCE, 0);
 8000bb8:	2100      	movs	r1, #0
 8000bba:	205b      	movs	r0, #91	@ 0x5b
 8000bbc:	f000 f814 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_CONFIG1, 0x10); // default, 16uA charge current
 8000bc0:	2110      	movs	r1, #16
 8000bc2:	205c      	movs	r0, #92	@ 0x5c
 8000bc4:	f000 f810 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_CONFIG2, 0x20); // 0.5uS encoding, 1ms period
 8000bc8:	2120      	movs	r1, #32
 8000bca:	205d      	movs	r0, #93	@ 0x5d
 8000bcc:	f000 f80c 	bl	8000be8 <writeRegister>
    uint8_t ECR_SETTING =
 8000bd0:	238c      	movs	r3, #140	@ 0x8c
 8000bd2:	71bb      	strb	r3, [r7, #6]
      B10000000 + 12; // 5 bits for baseline tracking & proximity disabled + X
                      // amount of electrodes running (12)
  writeRegister(MPR121_ECR, ECR_SETTING); // start with above ECR setting
 8000bd4:	79bb      	ldrb	r3, [r7, #6]
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	205e      	movs	r0, #94	@ 0x5e
 8000bda:	f000 f805 	bl	8000be8 <writeRegister>

    return c; 
 8000bde:	79fb      	ldrb	r3, [r7, #7]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <writeRegister>:
    
//     uint16_t touchData = (touchStatus[1] << 8) | touchStatus[0];
//     return (touchData != 0) ? 1 : 0;
// }

void writeRegister(uint8_t reg, uint8_t cmd) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af04      	add	r7, sp, #16
 8000bee:	4603      	mov	r3, r0
 8000bf0:	460a      	mov	r2, r1
 8000bf2:	71fb      	strb	r3, [r7, #7]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	71bb      	strb	r3, [r7, #6]
	// uint8_t arr[2] = { reg, cmd };
	// HAL_I2C_Master_Transmit(&hi2c1, MPR121_I2C_ADDR, arr, 2, HAL_MAX_DELAY);
    HAL_I2C_Mem_Write(&hi2c1, MPR121_I2C_ADDR|0x01,reg,1,&cmd,1,HAL_MAX_DELAY);
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000c00:	9302      	str	r3, [sp, #8]
 8000c02:	2301      	movs	r3, #1
 8000c04:	9301      	str	r3, [sp, #4]
 8000c06:	1dbb      	adds	r3, r7, #6
 8000c08:	9300      	str	r3, [sp, #0]
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	21b5      	movs	r1, #181	@ 0xb5
 8000c0e:	4803      	ldr	r0, [pc, #12]	@ (8000c1c <writeRegister+0x34>)
 8000c10:	f002 fdda 	bl	80037c8 <HAL_I2C_Mem_Write>
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000290 	.word	0x20000290

08000c20 <readRegister8>:
/**
 * @brief Reads from a specific register.
 * @param reg Address of register to read from.
 * @return Byte read.
 */
uint8_t readRegister8(uint8_t reg) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b088      	sub	sp, #32
 8000c24:	af04      	add	r7, sp, #16
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
	// HAL_I2C_Master_Transmit(&hi2c1, MPR121_I2C_ADDR, &reg, 1, HAL_MAX_DELAY);
	uint8_t result;
	// HAL_I2C_Master_Receive(&hi2c1, MPR121_I2C_ADDR, &result, 1, HAL_MAX_DELAY);
    HAL_I2C_Mem_Read(&hi2c1,MPR121_I2C_ADDR,reg,1,&result,1,HAL_MAX_DELAY);
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	b29a      	uxth	r2, r3
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c32:	9302      	str	r3, [sp, #8]
 8000c34:	2301      	movs	r3, #1
 8000c36:	9301      	str	r3, [sp, #4]
 8000c38:	f107 030f 	add.w	r3, r7, #15
 8000c3c:	9300      	str	r3, [sp, #0]
 8000c3e:	2301      	movs	r3, #1
 8000c40:	21b4      	movs	r1, #180	@ 0xb4
 8000c42:	4804      	ldr	r0, [pc, #16]	@ (8000c54 <readRegister8+0x34>)
 8000c44:	f002 feba 	bl	80039bc <HAL_I2C_Mem_Read>
	return result;
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000290 	.word	0x20000290

08000c58 <readRegister16>:

uint16_t readRegister16(uint8_t reg) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b088      	sub	sp, #32
 8000c5c:	af04      	add	r7, sp, #16
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
	// HAL_I2C_Master_Transmit(&hi2c1, MPR121_I2C_ADDR, &reg, 1, HAL_MAX_DELAY);
	// uint8_t result[2];
	// HAL_I2C_Master_Receive(&hi2c1, MPR121_I2C_ADDR, (uint8_t*)&result, 2, HAL_MAX_DELAY);
	// return result[0]|(result[1]<<8);
	uint16_t result;
    HAL_I2C_Mem_Read(&hi2c1,MPR121_I2C_ADDR,reg,1,(uint8_t*)&result,2,HAL_MAX_DELAY);
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	b29a      	uxth	r2, r3
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6a:	9302      	str	r3, [sp, #8]
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	9301      	str	r3, [sp, #4]
 8000c70:	f107 030e 	add.w	r3, r7, #14
 8000c74:	9300      	str	r3, [sp, #0]
 8000c76:	2301      	movs	r3, #1
 8000c78:	21b4      	movs	r1, #180	@ 0xb4
 8000c7a:	4804      	ldr	r0, [pc, #16]	@ (8000c8c <readRegister16+0x34>)
 8000c7c:	f002 fe9e 	bl	80039bc <HAL_I2C_Mem_Read>
    return result;
 8000c80:	89fb      	ldrh	r3, [r7, #14]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000290 	.word	0x20000290

08000c90 <setThresholds>:

void setThresholds(uint8_t touch, uint8_t release) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	460a      	mov	r2, r1
 8000c9a:	71fb      	strb	r3, [r7, #7]
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	71bb      	strb	r3, [r7, #6]
  // set all thresholds (the same)
  for (uint8_t i = 0; i < 12; i++) {
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	73fb      	strb	r3, [r7, #15]
 8000ca4:	e016      	b.n	8000cd4 <setThresholds+0x44>
    writeRegister(MPR121_TOUCHTH_0 + 2 * i, touch);
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	3341      	adds	r3, #65	@ 0x41
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	79fa      	ldrb	r2, [r7, #7]
 8000cb2:	4611      	mov	r1, r2
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff ff97 	bl	8000be8 <writeRegister>
    writeRegister(MPR121_RELEASETH_0 + 2 * i, release);
 8000cba:	7bfb      	ldrb	r3, [r7, #15]
 8000cbc:	3321      	adds	r3, #33	@ 0x21
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	79ba      	ldrb	r2, [r7, #6]
 8000cc6:	4611      	mov	r1, r2
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ff8d 	bl	8000be8 <writeRegister>
  for (uint8_t i = 0; i < 12; i++) {
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	73fb      	strb	r3, [r7, #15]
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
 8000cd6:	2b0b      	cmp	r3, #11
 8000cd8:	d9e5      	bls.n	8000ca6 <setThresholds+0x16>
  }
}
 8000cda:	bf00      	nop
 8000cdc:	bf00      	nop
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <touched>:
  if (t > 12)
    return 0;
  return readRegister16(MPR121_FILTDATA_0L + t * 2);
}

uint16_t touched(void) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
  uint16_t t = readRegister16(MPR121_TOUCHSTATUS_L);
 8000cea:	2000      	movs	r0, #0
 8000cec:	f7ff ffb4 	bl	8000c58 <readRegister16>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	80fb      	strh	r3, [r7, #6]
  return t & 0x0FFF;
 8000cf4:	88fb      	ldrh	r3, [r7, #6]
 8000cf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cfa:	b29b      	uxth	r3, r3
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <BMP180_Init>:

/**
 * @brief Initializes the BMP180 temperature/pressure sensor.
 * @param hi2c User I2C handle pointer.
 */
void BMP180_Init(I2C_HandleTypeDef *hi2c) {
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	_bmp180_ui2c = hi2c;
 8000d0c:	4a03      	ldr	r2, [pc, #12]	@ (8000d1c <BMP180_Init+0x18>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6013      	str	r3, [r2, #0]
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr
 8000d1c:	20000270 	.word	0x20000270

08000d20 <BMP180_SetOversampling>:
/**
 * @param oss Enum, oversampling setting.
 * @note Available resolutions: BMP180_LOW, BMP180_STANDARD, BMP180_HIGH, BMP180_ULTRA.
 * @note Refer to section 3.3.1 of datasheet.
 */
void BMP180_SetOversampling(BMP180_OSS oss) {
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
	_bmp180_oss = oss;
 8000d2a:	4a04      	ldr	r2, [pc, #16]	@ (8000d3c <BMP180_SetOversampling+0x1c>)
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	7013      	strb	r3, [r2, #0]
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bc80      	pop	{r7}
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	2000028a 	.word	0x2000028a

08000d40 <BMP180_UpdateCalibrationData>:

/**
 * @brief Updates calibration data.
 * @note Must be called once before main loop.
 */
void BMP180_UpdateCalibrationData(void) {
 8000d40:	b598      	push	{r3, r4, r7, lr}
 8000d42:	af00      	add	r7, sp, #0
	_bmp180_eeprom.BMP180_AC1 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC1]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC1]);
 8000d44:	23aa      	movs	r3, #170	@ 0xaa
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 f8dc 	bl	8000f04 <BMP180_ReadReg>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	021b      	lsls	r3, r3, #8
 8000d50:	b21c      	sxth	r4, r3
 8000d52:	23ab      	movs	r3, #171	@ 0xab
 8000d54:	4618      	mov	r0, r3
 8000d56:	f000 f8d5 	bl	8000f04 <BMP180_ReadReg>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	b21b      	sxth	r3, r3
 8000d5e:	4323      	orrs	r3, r4
 8000d60:	b21a      	sxth	r2, r3
 8000d62:	4b58      	ldr	r3, [pc, #352]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000d64:	801a      	strh	r2, [r3, #0]
	_bmp180_eeprom.BMP180_AC2 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC2]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC2]);
 8000d66:	23ac      	movs	r3, #172	@ 0xac
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f000 f8cb 	bl	8000f04 <BMP180_ReadReg>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	021b      	lsls	r3, r3, #8
 8000d72:	b21c      	sxth	r4, r3
 8000d74:	23ad      	movs	r3, #173	@ 0xad
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 f8c4 	bl	8000f04 <BMP180_ReadReg>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	b21b      	sxth	r3, r3
 8000d80:	4323      	orrs	r3, r4
 8000d82:	b21a      	sxth	r2, r3
 8000d84:	4b4f      	ldr	r3, [pc, #316]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000d86:	805a      	strh	r2, [r3, #2]
	_bmp180_eeprom.BMP180_AC3 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC3]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC3]);
 8000d88:	23ae      	movs	r3, #174	@ 0xae
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 f8ba 	bl	8000f04 <BMP180_ReadReg>
 8000d90:	4603      	mov	r3, r0
 8000d92:	021b      	lsls	r3, r3, #8
 8000d94:	b21c      	sxth	r4, r3
 8000d96:	23af      	movs	r3, #175	@ 0xaf
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f000 f8b3 	bl	8000f04 <BMP180_ReadReg>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	b21b      	sxth	r3, r3
 8000da2:	4323      	orrs	r3, r4
 8000da4:	b21a      	sxth	r2, r3
 8000da6:	4b47      	ldr	r3, [pc, #284]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000da8:	809a      	strh	r2, [r3, #4]
	_bmp180_eeprom.BMP180_AC4 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC4]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC4]);
 8000daa:	23b0      	movs	r3, #176	@ 0xb0
 8000dac:	4618      	mov	r0, r3
 8000dae:	f000 f8a9 	bl	8000f04 <BMP180_ReadReg>
 8000db2:	4603      	mov	r3, r0
 8000db4:	021b      	lsls	r3, r3, #8
 8000db6:	b21c      	sxth	r4, r3
 8000db8:	23b1      	movs	r3, #177	@ 0xb1
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 f8a2 	bl	8000f04 <BMP180_ReadReg>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	b21b      	sxth	r3, r3
 8000dc4:	4323      	orrs	r3, r4
 8000dc6:	b21b      	sxth	r3, r3
 8000dc8:	b29a      	uxth	r2, r3
 8000dca:	4b3e      	ldr	r3, [pc, #248]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000dcc:	80da      	strh	r2, [r3, #6]
	_bmp180_eeprom.BMP180_AC5 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC5]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC5]);
 8000dce:	23b2      	movs	r3, #178	@ 0xb2
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f000 f897 	bl	8000f04 <BMP180_ReadReg>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	021b      	lsls	r3, r3, #8
 8000dda:	b21c      	sxth	r4, r3
 8000ddc:	23b3      	movs	r3, #179	@ 0xb3
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 f890 	bl	8000f04 <BMP180_ReadReg>
 8000de4:	4603      	mov	r3, r0
 8000de6:	b21b      	sxth	r3, r3
 8000de8:	4323      	orrs	r3, r4
 8000dea:	b21b      	sxth	r3, r3
 8000dec:	b29a      	uxth	r2, r3
 8000dee:	4b35      	ldr	r3, [pc, #212]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000df0:	811a      	strh	r2, [r3, #8]
	_bmp180_eeprom.BMP180_AC6 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC6]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC6]);
 8000df2:	23b4      	movs	r3, #180	@ 0xb4
 8000df4:	4618      	mov	r0, r3
 8000df6:	f000 f885 	bl	8000f04 <BMP180_ReadReg>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	021b      	lsls	r3, r3, #8
 8000dfe:	b21c      	sxth	r4, r3
 8000e00:	23b5      	movs	r3, #181	@ 0xb5
 8000e02:	4618      	mov	r0, r3
 8000e04:	f000 f87e 	bl	8000f04 <BMP180_ReadReg>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	b21b      	sxth	r3, r3
 8000e0c:	4323      	orrs	r3, r4
 8000e0e:	b21b      	sxth	r3, r3
 8000e10:	b29a      	uxth	r2, r3
 8000e12:	4b2c      	ldr	r3, [pc, #176]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000e14:	815a      	strh	r2, [r3, #10]
	_bmp180_eeprom.BMP180_B1 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B1]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_B1]);
 8000e16:	23b6      	movs	r3, #182	@ 0xb6
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 f873 	bl	8000f04 <BMP180_ReadReg>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	021b      	lsls	r3, r3, #8
 8000e22:	b21c      	sxth	r4, r3
 8000e24:	23b7      	movs	r3, #183	@ 0xb7
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 f86c 	bl	8000f04 <BMP180_ReadReg>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	b21b      	sxth	r3, r3
 8000e30:	4323      	orrs	r3, r4
 8000e32:	b21a      	sxth	r2, r3
 8000e34:	4b23      	ldr	r3, [pc, #140]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000e36:	819a      	strh	r2, [r3, #12]
	_bmp180_eeprom.BMP180_B2 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B2]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_B2]);
 8000e38:	23b8      	movs	r3, #184	@ 0xb8
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 f862 	bl	8000f04 <BMP180_ReadReg>
 8000e40:	4603      	mov	r3, r0
 8000e42:	021b      	lsls	r3, r3, #8
 8000e44:	b21c      	sxth	r4, r3
 8000e46:	23b9      	movs	r3, #185	@ 0xb9
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f000 f85b 	bl	8000f04 <BMP180_ReadReg>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	b21b      	sxth	r3, r3
 8000e52:	4323      	orrs	r3, r4
 8000e54:	b21a      	sxth	r2, r3
 8000e56:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000e58:	81da      	strh	r2, [r3, #14]
	_bmp180_eeprom.BMP180_MB = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MB]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MB]);
 8000e5a:	23ba      	movs	r3, #186	@ 0xba
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f000 f851 	bl	8000f04 <BMP180_ReadReg>
 8000e62:	4603      	mov	r3, r0
 8000e64:	021b      	lsls	r3, r3, #8
 8000e66:	b21c      	sxth	r4, r3
 8000e68:	23bb      	movs	r3, #187	@ 0xbb
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 f84a 	bl	8000f04 <BMP180_ReadReg>
 8000e70:	4603      	mov	r3, r0
 8000e72:	b21b      	sxth	r3, r3
 8000e74:	4323      	orrs	r3, r4
 8000e76:	b21a      	sxth	r2, r3
 8000e78:	4b12      	ldr	r3, [pc, #72]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000e7a:	821a      	strh	r2, [r3, #16]
	_bmp180_eeprom.BMP180_MC = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MC]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MC]);
 8000e7c:	23bc      	movs	r3, #188	@ 0xbc
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 f840 	bl	8000f04 <BMP180_ReadReg>
 8000e84:	4603      	mov	r3, r0
 8000e86:	021b      	lsls	r3, r3, #8
 8000e88:	b21c      	sxth	r4, r3
 8000e8a:	23bd      	movs	r3, #189	@ 0xbd
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f000 f839 	bl	8000f04 <BMP180_ReadReg>
 8000e92:	4603      	mov	r3, r0
 8000e94:	b21b      	sxth	r3, r3
 8000e96:	4323      	orrs	r3, r4
 8000e98:	b21a      	sxth	r2, r3
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000e9c:	825a      	strh	r2, [r3, #18]
	_bmp180_eeprom.BMP180_MD = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MD]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MD]);
 8000e9e:	23be      	movs	r3, #190	@ 0xbe
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f000 f82f 	bl	8000f04 <BMP180_ReadReg>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	021b      	lsls	r3, r3, #8
 8000eaa:	b21c      	sxth	r4, r3
 8000eac:	23bf      	movs	r3, #191	@ 0xbf
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 f828 	bl	8000f04 <BMP180_ReadReg>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	b21b      	sxth	r3, r3
 8000eb8:	4323      	orrs	r3, r4
 8000eba:	b21a      	sxth	r2, r3
 8000ebc:	4b01      	ldr	r3, [pc, #4]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000ebe:	829a      	strh	r2, [r3, #20]
}
 8000ec0:	bf00      	nop
 8000ec2:	bd98      	pop	{r3, r4, r7, pc}
 8000ec4:	20000274 	.word	0x20000274

08000ec8 <BMP180_WriteReg>:
/**
 * @brief Writes to a specific register.
 * @param reg Address of register to write to.
 * @param cmd Byte to write.
 */
void BMP180_WriteReg(uint8_t reg, uint8_t cmd) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af02      	add	r7, sp, #8
 8000ece:	4603      	mov	r3, r0
 8000ed0:	460a      	mov	r2, r1
 8000ed2:	71fb      	strb	r3, [r7, #7]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	71bb      	strb	r3, [r7, #6]
	uint8_t arr[2] = { reg, cmd };
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	733b      	strb	r3, [r7, #12]
 8000edc:	79bb      	ldrb	r3, [r7, #6]
 8000ede:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, arr, 2, BMP180_I2C_TIMEOUT);
 8000ee0:	4b07      	ldr	r3, [pc, #28]	@ (8000f00 <BMP180_WriteReg+0x38>)
 8000ee2:	6818      	ldr	r0, [r3, #0]
 8000ee4:	f107 020c 	add.w	r2, r7, #12
 8000ee8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	2302      	movs	r3, #2
 8000ef0:	21ee      	movs	r1, #238	@ 0xee
 8000ef2:	f002 f8ff 	bl	80030f4 <HAL_I2C_Master_Transmit>
}
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000270 	.word	0x20000270

08000f04 <BMP180_ReadReg>:
/**
 * @brief Reads from a specific register.
 * @param reg Address of register to read from.
 * @return Byte read.
 */
uint8_t BMP180_ReadReg(uint8_t reg) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af02      	add	r7, sp, #8
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 8000f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f44 <BMP180_ReadReg+0x40>)
 8000f10:	6818      	ldr	r0, [r3, #0]
 8000f12:	1dfa      	adds	r2, r7, #7
 8000f14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	21ee      	movs	r1, #238	@ 0xee
 8000f1e:	f002 f8e9 	bl	80030f4 <HAL_I2C_Master_Transmit>
	uint8_t result;
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 8000f22:	4b08      	ldr	r3, [pc, #32]	@ (8000f44 <BMP180_ReadReg+0x40>)
 8000f24:	6818      	ldr	r0, [r3, #0]
 8000f26:	f107 020f 	add.w	r2, r7, #15
 8000f2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	2301      	movs	r3, #1
 8000f32:	21ee      	movs	r1, #238	@ 0xee
 8000f34:	f002 f9dc 	bl	80032f0 <HAL_I2C_Master_Receive>
	return result;
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000270 	.word	0x20000270

08000f48 <BMP180_GetRawTemperature>:

/**
 * @brief Measures and calculates temperature.
 * @return Temperature in 0.1 (1/10) degrees Celsius.
 */
int32_t BMP180_GetRawTemperature(void) {
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_TEMP);
 8000f4e:	232e      	movs	r3, #46	@ 0x2e
 8000f50:	4619      	mov	r1, r3
 8000f52:	20f4      	movs	r0, #244	@ 0xf4
 8000f54:	f7ff ffb8 	bl	8000ec8 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_TEMP);
 8000f58:	2305      	movs	r3, #5
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f001 fc86 	bl	800286c <HAL_Delay>
	int32_t ut = (BMP180_ReadReg(BMP180_MSB_REG) << 8) | BMP180_ReadReg(BMP180_LSB_REG);
 8000f60:	20f6      	movs	r0, #246	@ 0xf6
 8000f62:	f7ff ffcf 	bl	8000f04 <BMP180_ReadReg>
 8000f66:	4603      	mov	r3, r0
 8000f68:	021c      	lsls	r4, r3, #8
 8000f6a:	20f7      	movs	r0, #247	@ 0xf7
 8000f6c:	f7ff ffca 	bl	8000f04 <BMP180_ReadReg>
 8000f70:	4603      	mov	r3, r0
 8000f72:	4323      	orrs	r3, r4
 8000f74:	60fb      	str	r3, [r7, #12]
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 8000f76:	4b15      	ldr	r3, [pc, #84]	@ (8000fcc <BMP180_GetRawTemperature+0x84>)
 8000f78:	895b      	ldrh	r3, [r3, #10]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	1a9b      	subs	r3, r3, r2
 8000f80:	4a12      	ldr	r2, [pc, #72]	@ (8000fcc <BMP180_GetRawTemperature+0x84>)
 8000f82:	8912      	ldrh	r2, [r2, #8]
 8000f84:	fb02 f303 	mul.w	r3, r2, r3
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	da02      	bge.n	8000f92 <BMP180_GetRawTemperature+0x4a>
 8000f8c:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8000f90:	337f      	adds	r3, #127	@ 0x7f
 8000f92:	13db      	asrs	r3, r3, #15
 8000f94:	60bb      	str	r3, [r7, #8]
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 8000f96:	4b0d      	ldr	r3, [pc, #52]	@ (8000fcc <BMP180_GetRawTemperature+0x84>)
 8000f98:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000f9c:	02da      	lsls	r2, r3, #11
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fcc <BMP180_GetRawTemperature+0x84>)
 8000fa0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	440b      	add	r3, r1
 8000faa:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fae:	607b      	str	r3, [r7, #4]
	int32_t b5 = x1 + x2;
 8000fb0:	68ba      	ldr	r2, [r7, #8]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	603b      	str	r3, [r7, #0]
	return (b5 + 8) / (1 << 4);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	3308      	adds	r3, #8
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	da00      	bge.n	8000fc2 <BMP180_GetRawTemperature+0x7a>
 8000fc0:	330f      	adds	r3, #15
 8000fc2:	111b      	asrs	r3, r3, #4
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd90      	pop	{r4, r7, pc}
 8000fcc:	20000274 	.word	0x20000274

08000fd0 <BMP180_GetTemperature>:

/**
 * @brief Measures and calculates temperature.
 * @return Temperature in degrees Celsius.
 */
float BMP180_GetTemperature(void) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
	int32_t temp = BMP180_GetRawTemperature();
 8000fd6:	f7ff ffb7 	bl	8000f48 <BMP180_GetRawTemperature>
 8000fda:	6078      	str	r0, [r7, #4]
	return temp / 10.0;
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff fa11 	bl	8000404 <__aeabi_i2d>
 8000fe2:	f04f 0200 	mov.w	r2, #0
 8000fe6:	4b07      	ldr	r3, [pc, #28]	@ (8001004 <BMP180_GetTemperature+0x34>)
 8000fe8:	f7ff fba0 	bl	800072c <__aeabi_ddiv>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	4610      	mov	r0, r2
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f7ff fd48 	bl	8000a88 <__aeabi_d2f>
 8000ff8:	4603      	mov	r3, r0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40240000 	.word	0x40240000

08001008 <BMP180_GetPressure>:

/**
 * @brief Measures and calculates pressure.
 * @return Pressure in Pascal(Pa).
 */
int32_t BMP180_GetPressure(void) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b08c      	sub	sp, #48	@ 0x30
 800100c:	af00      	add	r7, sp, #0
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_TEMP);
 800100e:	232e      	movs	r3, #46	@ 0x2e
 8001010:	4619      	mov	r1, r3
 8001012:	20f4      	movs	r0, #244	@ 0xf4
 8001014:	f7ff ff58 	bl	8000ec8 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_TEMP);
 8001018:	2305      	movs	r3, #5
 800101a:	4618      	mov	r0, r3
 800101c:	f001 fc26 	bl	800286c <HAL_Delay>
	int32_t ut = BMP180_GetUT();
 8001020:	f000 f902 	bl	8001228 <BMP180_GetUT>
 8001024:	62b8      	str	r0, [r7, #40]	@ 0x28
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_PRES[_bmp180_oss]);
 8001026:	4b7b      	ldr	r3, [pc, #492]	@ (8001214 <BMP180_GetPressure+0x20c>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	461a      	mov	r2, r3
 800102c:	4b7a      	ldr	r3, [pc, #488]	@ (8001218 <BMP180_GetPressure+0x210>)
 800102e:	5c9b      	ldrb	r3, [r3, r2]
 8001030:	4619      	mov	r1, r3
 8001032:	20f4      	movs	r0, #244	@ 0xf4
 8001034:	f7ff ff48 	bl	8000ec8 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_PRES[_bmp180_oss]);
 8001038:	4b76      	ldr	r3, [pc, #472]	@ (8001214 <BMP180_GetPressure+0x20c>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	4b77      	ldr	r3, [pc, #476]	@ (800121c <BMP180_GetPressure+0x214>)
 8001040:	5c9b      	ldrb	r3, [r3, r2]
 8001042:	4618      	mov	r0, r3
 8001044:	f001 fc12 	bl	800286c <HAL_Delay>
	int32_t up = BMP180_GetUP();
 8001048:	f000 f8fc 	bl	8001244 <BMP180_GetUP>
 800104c:	6278      	str	r0, [r7, #36]	@ 0x24
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 800104e:	4b74      	ldr	r3, [pc, #464]	@ (8001220 <BMP180_GetPressure+0x218>)
 8001050:	895b      	ldrh	r3, [r3, #10]
 8001052:	461a      	mov	r2, r3
 8001054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001056:	1a9b      	subs	r3, r3, r2
 8001058:	4a71      	ldr	r2, [pc, #452]	@ (8001220 <BMP180_GetPressure+0x218>)
 800105a:	8912      	ldrh	r2, [r2, #8]
 800105c:	fb02 f303 	mul.w	r3, r2, r3
 8001060:	2b00      	cmp	r3, #0
 8001062:	da02      	bge.n	800106a <BMP180_GetPressure+0x62>
 8001064:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8001068:	337f      	adds	r3, #127	@ 0x7f
 800106a:	13db      	asrs	r3, r3, #15
 800106c:	623b      	str	r3, [r7, #32]
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 800106e:	4b6c      	ldr	r3, [pc, #432]	@ (8001220 <BMP180_GetPressure+0x218>)
 8001070:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001074:	02da      	lsls	r2, r3, #11
 8001076:	4b6a      	ldr	r3, [pc, #424]	@ (8001220 <BMP180_GetPressure+0x218>)
 8001078:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800107c:	4619      	mov	r1, r3
 800107e:	6a3b      	ldr	r3, [r7, #32]
 8001080:	440b      	add	r3, r1
 8001082:	fb92 f3f3 	sdiv	r3, r2, r3
 8001086:	61fb      	str	r3, [r7, #28]
	int32_t b5 = x1 + x2;
 8001088:	6a3a      	ldr	r2, [r7, #32]
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	4413      	add	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
	int32_t b6 = b5 - 4000;
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 8001096:	617b      	str	r3, [r7, #20]
	x1 = (_bmp180_eeprom.BMP180_B2 * (b6 * b6 / (1 << 12))) / (1 << 11);
 8001098:	4b61      	ldr	r3, [pc, #388]	@ (8001220 <BMP180_GetPressure+0x218>)
 800109a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800109e:	461a      	mov	r2, r3
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fb03 f303 	mul.w	r3, r3, r3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	da01      	bge.n	80010ae <BMP180_GetPressure+0xa6>
 80010aa:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80010ae:	131b      	asrs	r3, r3, #12
 80010b0:	fb02 f303 	mul.w	r3, r2, r3
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	da01      	bge.n	80010bc <BMP180_GetPressure+0xb4>
 80010b8:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 80010bc:	12db      	asrs	r3, r3, #11
 80010be:	623b      	str	r3, [r7, #32]
	x2 = _bmp180_eeprom.BMP180_AC2 * b6 / (1 << 11);
 80010c0:	4b57      	ldr	r3, [pc, #348]	@ (8001220 <BMP180_GetPressure+0x218>)
 80010c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010c6:	461a      	mov	r2, r3
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	fb02 f303 	mul.w	r3, r2, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	da01      	bge.n	80010d6 <BMP180_GetPressure+0xce>
 80010d2:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 80010d6:	12db      	asrs	r3, r3, #11
 80010d8:	61fb      	str	r3, [r7, #28]
	int32_t x3 = x1 + x2;
 80010da:	6a3a      	ldr	r2, [r7, #32]
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	4413      	add	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
	int32_t b3 = (((_bmp180_eeprom.BMP180_AC1 * 4 + x3) << _bmp180_oss) + 2) / 4;
 80010e2:	4b4f      	ldr	r3, [pc, #316]	@ (8001220 <BMP180_GetPressure+0x218>)
 80010e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e8:	009a      	lsls	r2, r3, #2
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	4413      	add	r3, r2
 80010ee:	4a49      	ldr	r2, [pc, #292]	@ (8001214 <BMP180_GetPressure+0x20c>)
 80010f0:	7812      	ldrb	r2, [r2, #0]
 80010f2:	4093      	lsls	r3, r2
 80010f4:	3302      	adds	r3, #2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	da00      	bge.n	80010fc <BMP180_GetPressure+0xf4>
 80010fa:	3303      	adds	r3, #3
 80010fc:	109b      	asrs	r3, r3, #2
 80010fe:	60fb      	str	r3, [r7, #12]
	x1 = _bmp180_eeprom.BMP180_AC3 * b6 / (1 << 13);
 8001100:	4b47      	ldr	r3, [pc, #284]	@ (8001220 <BMP180_GetPressure+0x218>)
 8001102:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001106:	461a      	mov	r2, r3
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	fb02 f303 	mul.w	r3, r2, r3
 800110e:	2b00      	cmp	r3, #0
 8001110:	da02      	bge.n	8001118 <BMP180_GetPressure+0x110>
 8001112:	f503 53ff 	add.w	r3, r3, #8160	@ 0x1fe0
 8001116:	331f      	adds	r3, #31
 8001118:	135b      	asrs	r3, r3, #13
 800111a:	623b      	str	r3, [r7, #32]
	x2 = (_bmp180_eeprom.BMP180_B1 * (b6 * b6 / (1 << 12))) / (1 << 16);
 800111c:	4b40      	ldr	r3, [pc, #256]	@ (8001220 <BMP180_GetPressure+0x218>)
 800111e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001122:	461a      	mov	r2, r3
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	fb03 f303 	mul.w	r3, r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	da01      	bge.n	8001132 <BMP180_GetPressure+0x12a>
 800112e:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8001132:	131b      	asrs	r3, r3, #12
 8001134:	fb02 f303 	mul.w	r3, r2, r3
 8001138:	2b00      	cmp	r3, #0
 800113a:	da02      	bge.n	8001142 <BMP180_GetPressure+0x13a>
 800113c:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001140:	33ff      	adds	r3, #255	@ 0xff
 8001142:	141b      	asrs	r3, r3, #16
 8001144:	61fb      	str	r3, [r7, #28]
	x3 = ((x1 + x2) + 2) / 4;
 8001146:	6a3a      	ldr	r2, [r7, #32]
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	4413      	add	r3, r2
 800114c:	3302      	adds	r3, #2
 800114e:	2b00      	cmp	r3, #0
 8001150:	da00      	bge.n	8001154 <BMP180_GetPressure+0x14c>
 8001152:	3303      	adds	r3, #3
 8001154:	109b      	asrs	r3, r3, #2
 8001156:	613b      	str	r3, [r7, #16]
	uint32_t b4 = _bmp180_eeprom.BMP180_AC4 * (uint32_t) (x3 + 32768) / (1 << 15);
 8001158:	4b31      	ldr	r3, [pc, #196]	@ (8001220 <BMP180_GetPressure+0x218>)
 800115a:	88db      	ldrh	r3, [r3, #6]
 800115c:	461a      	mov	r2, r3
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001164:	fb02 f303 	mul.w	r3, r2, r3
 8001168:	0bdb      	lsrs	r3, r3, #15
 800116a:	60bb      	str	r3, [r7, #8]
	uint32_t b7 = ((uint32_t) up - b3) * (50000 >> _bmp180_oss);
 800116c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	4a28      	ldr	r2, [pc, #160]	@ (8001214 <BMP180_GetPressure+0x20c>)
 8001174:	7812      	ldrb	r2, [r2, #0]
 8001176:	4611      	mov	r1, r2
 8001178:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800117c:	410a      	asrs	r2, r1
 800117e:	fb02 f303 	mul.w	r3, r2, r3
 8001182:	607b      	str	r3, [r7, #4]
	int32_t p;
	if (b7 < 0x80000000)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	db06      	blt.n	8001198 <BMP180_GetPressure+0x190>
		p = (b7 * 2) / b4;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	005a      	lsls	r2, r3, #1
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	fbb2 f3f3 	udiv	r3, r2, r3
 8001194:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001196:	e005      	b.n	80011a4 <BMP180_GetPressure+0x19c>
	else
		p = (b7 / b4) * 2;
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	x1 = (p / (1 << 8)) * (p / (1 << 8));
 80011a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	da00      	bge.n	80011ac <BMP180_GetPressure+0x1a4>
 80011aa:	33ff      	adds	r3, #255	@ 0xff
 80011ac:	121b      	asrs	r3, r3, #8
 80011ae:	461a      	mov	r2, r3
 80011b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	da00      	bge.n	80011b8 <BMP180_GetPressure+0x1b0>
 80011b6:	33ff      	adds	r3, #255	@ 0xff
 80011b8:	121b      	asrs	r3, r3, #8
 80011ba:	fb02 f303 	mul.w	r3, r2, r3
 80011be:	623b      	str	r3, [r7, #32]
	x1 = (x1 * 3038) / (1 << 16);
 80011c0:	6a3b      	ldr	r3, [r7, #32]
 80011c2:	f640 32de 	movw	r2, #3038	@ 0xbde
 80011c6:	fb02 f303 	mul.w	r3, r2, r3
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	da02      	bge.n	80011d4 <BMP180_GetPressure+0x1cc>
 80011ce:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80011d2:	33ff      	adds	r3, #255	@ 0xff
 80011d4:	141b      	asrs	r3, r3, #16
 80011d6:	623b      	str	r3, [r7, #32]
	x2 = (-7357 * p) / (1 << 16);
 80011d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011da:	4a12      	ldr	r2, [pc, #72]	@ (8001224 <BMP180_GetPressure+0x21c>)
 80011dc:	fb02 f303 	mul.w	r3, r2, r3
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	da02      	bge.n	80011ea <BMP180_GetPressure+0x1e2>
 80011e4:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80011e8:	33ff      	adds	r3, #255	@ 0xff
 80011ea:	141b      	asrs	r3, r3, #16
 80011ec:	61fb      	str	r3, [r7, #28]
	p = p + (x1 + x2 + 3791) / (1 << 4);
 80011ee:	6a3a      	ldr	r2, [r7, #32]
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	4413      	add	r3, r2
 80011f4:	f603 63cf 	addw	r3, r3, #3791	@ 0xecf
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	da00      	bge.n	80011fe <BMP180_GetPressure+0x1f6>
 80011fc:	330f      	adds	r3, #15
 80011fe:	111b      	asrs	r3, r3, #4
 8001200:	461a      	mov	r2, r3
 8001202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001204:	4413      	add	r3, r2
 8001206:	62fb      	str	r3, [r7, #44]	@ 0x2c
	return p;
 8001208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800120a:	4618      	mov	r0, r3
 800120c:	3730      	adds	r7, #48	@ 0x30
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	2000028a 	.word	0x2000028a
 8001218:	0800849c 	.word	0x0800849c
 800121c:	080084a0 	.word	0x080084a0
 8001220:	20000274 	.word	0x20000274
 8001224:	ffffe343 	.word	0xffffe343

08001228 <BMP180_GetUT>:

int32_t BMP180_GetUT(void){
 8001228:	b598      	push	{r3, r4, r7, lr}
 800122a:	af00      	add	r7, sp, #0
	return (BMP180_ReadReg(BMP180_MSB_REG) << 8) | BMP180_ReadReg(BMP180_LSB_REG);
 800122c:	20f6      	movs	r0, #246	@ 0xf6
 800122e:	f7ff fe69 	bl	8000f04 <BMP180_ReadReg>
 8001232:	4603      	mov	r3, r0
 8001234:	021c      	lsls	r4, r3, #8
 8001236:	20f7      	movs	r0, #247	@ 0xf7
 8001238:	f7ff fe64 	bl	8000f04 <BMP180_ReadReg>
 800123c:	4603      	mov	r3, r0
 800123e:	4323      	orrs	r3, r4
}
 8001240:	4618      	mov	r0, r3
 8001242:	bd98      	pop	{r3, r4, r7, pc}

08001244 <BMP180_GetUP>:

int32_t BMP180_GetUP(void){
 8001244:	b598      	push	{r3, r4, r7, lr}
 8001246:	af00      	add	r7, sp, #0
	return ((BMP180_ReadReg(BMP180_MSB_REG) << 16) | (BMP180_ReadReg(BMP180_LSB_REG) << 8) | BMP180_ReadReg(BMP180_XLSB_REG)) >> (8 - _bmp180_oss);
 8001248:	20f6      	movs	r0, #246	@ 0xf6
 800124a:	f7ff fe5b 	bl	8000f04 <BMP180_ReadReg>
 800124e:	4603      	mov	r3, r0
 8001250:	041c      	lsls	r4, r3, #16
 8001252:	20f7      	movs	r0, #247	@ 0xf7
 8001254:	f7ff fe56 	bl	8000f04 <BMP180_ReadReg>
 8001258:	4603      	mov	r3, r0
 800125a:	021b      	lsls	r3, r3, #8
 800125c:	431c      	orrs	r4, r3
 800125e:	20f8      	movs	r0, #248	@ 0xf8
 8001260:	f7ff fe50 	bl	8000f04 <BMP180_ReadReg>
 8001264:	4603      	mov	r3, r0
 8001266:	ea44 0203 	orr.w	r2, r4, r3
 800126a:	4b04      	ldr	r3, [pc, #16]	@ (800127c <BMP180_GetUP+0x38>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	f1c3 0308 	rsb	r3, r3, #8
 8001272:	fa42 f303 	asr.w	r3, r2, r3
}
 8001276:	4618      	mov	r0, r3
 8001278:	bd98      	pop	{r3, r4, r7, pc}
 800127a:	bf00      	nop
 800127c:	2000028a 	.word	0x2000028a

08001280 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800128a:	4a38      	ldr	r2, [pc, #224]	@ (800136c <HD44780_Init+0xec>)
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8001290:	4b37      	ldr	r3, [pc, #220]	@ (8001370 <HD44780_Init+0xf0>)
 8001292:	2208      	movs	r2, #8
 8001294:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8001296:	4b37      	ldr	r3, [pc, #220]	@ (8001374 <HD44780_Init+0xf4>)
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 800129c:	4b33      	ldr	r3, [pc, #204]	@ (800136c <HD44780_Init+0xec>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d907      	bls.n	80012b4 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 80012a4:	4b33      	ldr	r3, [pc, #204]	@ (8001374 <HD44780_Init+0xf4>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	f043 0308 	orr.w	r3, r3, #8
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	4b31      	ldr	r3, [pc, #196]	@ (8001374 <HD44780_Init+0xf4>)
 80012b0:	701a      	strb	r2, [r3, #0]
 80012b2:	e006      	b.n	80012c2 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 80012b4:	4b2f      	ldr	r3, [pc, #188]	@ (8001374 <HD44780_Init+0xf4>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	f043 0304 	orr.w	r3, r3, #4
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	4b2d      	ldr	r3, [pc, #180]	@ (8001374 <HD44780_Init+0xf4>)
 80012c0:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 80012c2:	f000 f985 	bl	80015d0 <DelayInit>
  HAL_Delay(50);
 80012c6:	2032      	movs	r0, #50	@ 0x32
 80012c8:	f001 fad0 	bl	800286c <HAL_Delay>

  ExpanderWrite(dpBacklight);
 80012cc:	4b28      	ldr	r3, [pc, #160]	@ (8001370 <HD44780_Init+0xf0>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f000 f943 	bl	800155c <ExpanderWrite>
  HAL_Delay(1000);
 80012d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012da:	f001 fac7 	bl	800286c <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80012de:	2030      	movs	r0, #48	@ 0x30
 80012e0:	f000 f92b 	bl	800153a <Write4Bits>
  DelayUS(4500);
 80012e4:	f241 1094 	movw	r0, #4500	@ 0x1194
 80012e8:	f000 f99a 	bl	8001620 <DelayUS>

  Write4Bits(0x03 << 4);
 80012ec:	2030      	movs	r0, #48	@ 0x30
 80012ee:	f000 f924 	bl	800153a <Write4Bits>
  DelayUS(4500);
 80012f2:	f241 1094 	movw	r0, #4500	@ 0x1194
 80012f6:	f000 f993 	bl	8001620 <DelayUS>

  Write4Bits(0x03 << 4);
 80012fa:	2030      	movs	r0, #48	@ 0x30
 80012fc:	f000 f91d 	bl	800153a <Write4Bits>
  DelayUS(4500);
 8001300:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001304:	f000 f98c 	bl	8001620 <DelayUS>

  Write4Bits(0x02 << 4);
 8001308:	2020      	movs	r0, #32
 800130a:	f000 f916 	bl	800153a <Write4Bits>
  DelayUS(100);
 800130e:	2064      	movs	r0, #100	@ 0x64
 8001310:	f000 f986 	bl	8001620 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8001314:	4b17      	ldr	r3, [pc, #92]	@ (8001374 <HD44780_Init+0xf4>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	f043 0320 	orr.w	r3, r3, #32
 800131c:	b2db      	uxtb	r3, r3
 800131e:	4618      	mov	r0, r3
 8001320:	f000 f8ce 	bl	80014c0 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001324:	4b14      	ldr	r3, [pc, #80]	@ (8001378 <HD44780_Init+0xf8>)
 8001326:	2204      	movs	r2, #4
 8001328:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800132a:	f000 f875 	bl	8001418 <HD44780_Display>
  HD44780_Clear();
 800132e:	f000 f82b 	bl	8001388 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001332:	4b12      	ldr	r3, [pc, #72]	@ (800137c <HD44780_Init+0xfc>)
 8001334:	2202      	movs	r2, #2
 8001336:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8001338:	4b10      	ldr	r3, [pc, #64]	@ (800137c <HD44780_Init+0xfc>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	f043 0304 	orr.w	r3, r3, #4
 8001340:	b2db      	uxtb	r3, r3
 8001342:	4618      	mov	r0, r3
 8001344:	f000 f8bc 	bl	80014c0 <SendCommand>
  DelayUS(4500);
 8001348:	f241 1094 	movw	r0, #4500	@ 0x1194
 800134c:	f000 f968 	bl	8001620 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8001350:	490b      	ldr	r1, [pc, #44]	@ (8001380 <HD44780_Init+0x100>)
 8001352:	2000      	movs	r0, #0
 8001354:	f000 f876 	bl	8001444 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8001358:	490a      	ldr	r1, [pc, #40]	@ (8001384 <HD44780_Init+0x104>)
 800135a:	2001      	movs	r0, #1
 800135c:	f000 f872 	bl	8001444 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8001360:	f000 f81d 	bl	800139e <HD44780_Home>
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	2000028e 	.word	0x2000028e
 8001370:	2000028f 	.word	0x2000028f
 8001374:	2000028b 	.word	0x2000028b
 8001378:	2000028c 	.word	0x2000028c
 800137c:	2000028d 	.word	0x2000028d
 8001380:	20000000 	.word	0x20000000
 8001384:	20000008 	.word	0x20000008

08001388 <HD44780_Clear>:

void HD44780_Clear()
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 800138c:	2001      	movs	r0, #1
 800138e:	f000 f897 	bl	80014c0 <SendCommand>
  DelayUS(2000);
 8001392:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001396:	f000 f943 	bl	8001620 <DelayUS>
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}

0800139e <HD44780_Home>:

void HD44780_Home()
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80013a2:	2002      	movs	r0, #2
 80013a4:	f000 f88c 	bl	80014c0 <SendCommand>
  DelayUS(2000);
 80013a8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80013ac:	f000 f938 	bl	8001620 <DelayUS>
}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 80013b4:	b590      	push	{r4, r7, lr}
 80013b6:	b087      	sub	sp, #28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	460a      	mov	r2, r1
 80013be:	71fb      	strb	r3, [r7, #7]
 80013c0:	4613      	mov	r3, r2
 80013c2:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80013c4:	4b12      	ldr	r3, [pc, #72]	@ (8001410 <HD44780_SetCursor+0x5c>)
 80013c6:	f107 0408 	add.w	r4, r7, #8
 80013ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80013d0:	4b10      	ldr	r3, [pc, #64]	@ (8001414 <HD44780_SetCursor+0x60>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	79ba      	ldrb	r2, [r7, #6]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d303      	bcc.n	80013e2 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80013da:	4b0e      	ldr	r3, [pc, #56]	@ (8001414 <HD44780_SetCursor+0x60>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	3b01      	subs	r3, #1
 80013e0:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80013e2:	79bb      	ldrb	r3, [r7, #6]
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	3318      	adds	r3, #24
 80013e8:	443b      	add	r3, r7
 80013ea:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	4413      	add	r3, r2
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	b25b      	sxtb	r3, r3
 80013f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80013fc:	b25b      	sxtb	r3, r3
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	4618      	mov	r0, r3
 8001402:	f000 f85d 	bl	80014c0 <SendCommand>
}
 8001406:	bf00      	nop
 8001408:	371c      	adds	r7, #28
 800140a:	46bd      	mov	sp, r7
 800140c:	bd90      	pop	{r4, r7, pc}
 800140e:	bf00      	nop
 8001410:	08008430 	.word	0x08008430
 8001414:	2000028e 	.word	0x2000028e

08001418 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 800141c:	4b08      	ldr	r3, [pc, #32]	@ (8001440 <HD44780_Display+0x28>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	f043 0304 	orr.w	r3, r3, #4
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <HD44780_Display+0x28>)
 8001428:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800142a:	4b05      	ldr	r3, [pc, #20]	@ (8001440 <HD44780_Display+0x28>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	f043 0308 	orr.w	r3, r3, #8
 8001432:	b2db      	uxtb	r3, r3
 8001434:	4618      	mov	r0, r3
 8001436:	f000 f843 	bl	80014c0 <SendCommand>
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	2000028c 	.word	0x2000028c

08001444 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	6039      	str	r1, [r7, #0]
 800144e:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	b25b      	sxtb	r3, r3
 800145e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001462:	b25b      	sxtb	r3, r3
 8001464:	b2db      	uxtb	r3, r3
 8001466:	4618      	mov	r0, r3
 8001468:	f000 f82a 	bl	80014c0 <SendCommand>
  for (int i=0; i<8; i++)
 800146c:	2300      	movs	r3, #0
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	e009      	b.n	8001486 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	683a      	ldr	r2, [r7, #0]
 8001476:	4413      	add	r3, r2
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f000 f82e 	bl	80014dc <SendChar>
  for (int i=0; i<8; i++)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	3301      	adds	r3, #1
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2b07      	cmp	r3, #7
 800148a:	ddf2      	ble.n	8001472 <HD44780_CreateSpecialChar+0x2e>
  }
}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800149e:	e006      	b.n	80014ae <HD44780_PrintStr+0x18>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	1c5a      	adds	r2, r3, #1
 80014a4:	607a      	str	r2, [r7, #4]
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f000 f817 	bl	80014dc <SendChar>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1f4      	bne.n	80014a0 <HD44780_PrintStr+0xa>
}
 80014b6:	bf00      	nop
 80014b8:	bf00      	nop
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	2100      	movs	r1, #0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f000 f812 	bl	80014f8 <Send>
}
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <SendChar>:

static void SendChar(uint8_t ch)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	2101      	movs	r1, #1
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 f804 	bl	80014f8 <Send>
}
 80014f0:	bf00      	nop
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	460a      	mov	r2, r1
 8001502:	71fb      	strb	r3, [r7, #7]
 8001504:	4613      	mov	r3, r2
 8001506:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	f023 030f 	bic.w	r3, r3, #15
 800150e:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	011b      	lsls	r3, r3, #4
 8001514:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8001516:	7bfa      	ldrb	r2, [r7, #15]
 8001518:	79bb      	ldrb	r3, [r7, #6]
 800151a:	4313      	orrs	r3, r2
 800151c:	b2db      	uxtb	r3, r3
 800151e:	4618      	mov	r0, r3
 8001520:	f000 f80b 	bl	800153a <Write4Bits>
  Write4Bits((lownib)|mode);
 8001524:	7bba      	ldrb	r2, [r7, #14]
 8001526:	79bb      	ldrb	r3, [r7, #6]
 8001528:	4313      	orrs	r3, r2
 800152a:	b2db      	uxtb	r3, r3
 800152c:	4618      	mov	r0, r3
 800152e:	f000 f804 	bl	800153a <Write4Bits>
}
 8001532:	bf00      	nop
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
 8001540:	4603      	mov	r3, r0
 8001542:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	4618      	mov	r0, r3
 8001548:	f000 f808 	bl	800155c <ExpanderWrite>
  PulseEnable(value);
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	4618      	mov	r0, r3
 8001550:	f000 f820 	bl	8001594 <PulseEnable>
}
 8001554:	bf00      	nop
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af02      	add	r7, sp, #8
 8001562:	4603      	mov	r3, r0
 8001564:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8001566:	4b09      	ldr	r3, [pc, #36]	@ (800158c <ExpanderWrite+0x30>)
 8001568:	781a      	ldrb	r2, [r3, #0]
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	4313      	orrs	r3, r2
 800156e:	b2db      	uxtb	r3, r3
 8001570:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8001572:	f107 020f 	add.w	r2, r7, #15
 8001576:	230a      	movs	r3, #10
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	2301      	movs	r3, #1
 800157c:	214e      	movs	r1, #78	@ 0x4e
 800157e:	4804      	ldr	r0, [pc, #16]	@ (8001590 <ExpanderWrite+0x34>)
 8001580:	f001 fdb8 	bl	80030f4 <HAL_I2C_Master_Transmit>
}
 8001584:	bf00      	nop
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	2000028f 	.word	0x2000028f
 8001590:	20000290 	.word	0x20000290

08001594 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	f043 0304 	orr.w	r3, r3, #4
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff ffd8 	bl	800155c <ExpanderWrite>
  DelayUS(20);
 80015ac:	2014      	movs	r0, #20
 80015ae:	f000 f837 	bl	8001620 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	f023 0304 	bic.w	r3, r3, #4
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff ffce 	bl	800155c <ExpanderWrite>
  DelayUS(20);
 80015c0:	2014      	movs	r0, #20
 80015c2:	f000 f82d 	bl	8001620 <DelayUS>
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <DelayInit>:

static void DelayInit(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80015d4:	4b10      	ldr	r3, [pc, #64]	@ (8001618 <DelayInit+0x48>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	4a0f      	ldr	r2, [pc, #60]	@ (8001618 <DelayInit+0x48>)
 80015da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80015de:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80015e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001618 <DelayInit+0x48>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	4a0c      	ldr	r2, [pc, #48]	@ (8001618 <DelayInit+0x48>)
 80015e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80015ea:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80015ec:	4b0b      	ldr	r3, [pc, #44]	@ (800161c <DelayInit+0x4c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a0a      	ldr	r2, [pc, #40]	@ (800161c <DelayInit+0x4c>)
 80015f2:	f023 0301 	bic.w	r3, r3, #1
 80015f6:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80015f8:	4b08      	ldr	r3, [pc, #32]	@ (800161c <DelayInit+0x4c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a07      	ldr	r2, [pc, #28]	@ (800161c <DelayInit+0x4c>)
 80015fe:	f043 0301 	orr.w	r3, r3, #1
 8001602:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8001604:	4b05      	ldr	r3, [pc, #20]	@ (800161c <DelayInit+0x4c>)
 8001606:	2200      	movs	r2, #0
 8001608:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800160a:	bf00      	nop
  __ASM volatile ("NOP");
 800160c:	bf00      	nop
  __ASM volatile ("NOP");
 800160e:	bf00      	nop
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr
 8001618:	e000edf0 	.word	0xe000edf0
 800161c:	e0001000 	.word	0xe0001000

08001620 <DelayUS>:

static void DelayUS(uint32_t us) {
 8001620:	b480      	push	{r7}
 8001622:	b087      	sub	sp, #28
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8001628:	4b0d      	ldr	r3, [pc, #52]	@ (8001660 <DelayUS+0x40>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a0d      	ldr	r2, [pc, #52]	@ (8001664 <DelayUS+0x44>)
 800162e:	fba2 2303 	umull	r2, r3, r2, r3
 8001632:	0c9a      	lsrs	r2, r3, #18
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	fb02 f303 	mul.w	r3, r2, r3
 800163a:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 800163c:	4b0a      	ldr	r3, [pc, #40]	@ (8001668 <DelayUS+0x48>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8001642:	4b09      	ldr	r3, [pc, #36]	@ (8001668 <DelayUS+0x48>)
 8001644:	685a      	ldr	r2, [r3, #4]
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	429a      	cmp	r2, r3
 8001652:	d8f6      	bhi.n	8001642 <DelayUS+0x22>
}
 8001654:	bf00      	nop
 8001656:	bf00      	nop
 8001658:	371c      	adds	r7, #28
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr
 8001660:	20000080 	.word	0x20000080
 8001664:	431bde83 	.word	0x431bde83
 8001668:	e0001000 	.word	0xe0001000

0800166c <parse_data>:
    uint8_t Data[MAX_DATA_SIZE];  // Mảng dữ liệu (Data)
    uint16_t Crc;      // CRC
    uint16_t Stop;     // Stop (carriage return + newline)
    uint16_t Len;      // Chiều dài dữ liệu (Data length)
} DataStruct;
void parse_data(const char *input, DataStruct *data) {
 800166c:	b580      	push	{r7, lr}
 800166e:	b088      	sub	sp, #32
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
    // Xác nhận ký tự Start
    char temp[10] = {0};
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	f107 0310 	add.w	r3, r7, #16
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	809a      	strh	r2, [r3, #4]
//    data->Start = input[0];  // Dấu ':'

    memset(data->Data,0,MAX_DATA_SIZE);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	3303      	adds	r3, #3
 8001688:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800168c:	2100      	movs	r1, #0
 800168e:	4618      	mov	r0, r3
 8001690:	f004 fdf7 	bl	8006282 <memset>
    strncpy(temp, input, 2);
 8001694:	f107 030c 	add.w	r3, r7, #12
 8001698:	2202      	movs	r2, #2
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	4618      	mov	r0, r3
 800169e:	f004 fdf8 	bl	8006292 <strncpy>
    data->Start = (uint8_t)strtol(temp, NULL, 16);
 80016a2:	f107 030c 	add.w	r3, r7, #12
 80016a6:	2210      	movs	r2, #16
 80016a8:	2100      	movs	r1, #0
 80016aa:	4618      	mov	r0, r3
 80016ac:	f004 f844 	bl	8005738 <strtol>
 80016b0:	4603      	mov	r3, r0
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	701a      	strb	r2, [r3, #0]

    // Chuyển đổi Addr
    strncpy(temp, input + 2, 2);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	1c99      	adds	r1, r3, #2
 80016bc:	f107 030c 	add.w	r3, r7, #12
 80016c0:	2202      	movs	r2, #2
 80016c2:	4618      	mov	r0, r3
 80016c4:	f004 fde5 	bl	8006292 <strncpy>
    data->Addr = (uint8_t)strtol(temp, NULL, 16);
 80016c8:	f107 030c 	add.w	r3, r7, #12
 80016cc:	2210      	movs	r2, #16
 80016ce:	2100      	movs	r1, #0
 80016d0:	4618      	mov	r0, r3
 80016d2:	f004 f831 	bl	8005738 <strtol>
 80016d6:	4603      	mov	r3, r0
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	705a      	strb	r2, [r3, #1]

    // Chuyển đổi Code
    strncpy(temp, input + 4, 2);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	1d19      	adds	r1, r3, #4
 80016e2:	f107 030c 	add.w	r3, r7, #12
 80016e6:	2202      	movs	r2, #2
 80016e8:	4618      	mov	r0, r3
 80016ea:	f004 fdd2 	bl	8006292 <strncpy>
    data->Code = (uint8_t)strtol(temp, NULL, 16);
 80016ee:	f107 030c 	add.w	r3, r7, #12
 80016f2:	2210      	movs	r2, #16
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f004 f81e 	bl	8005738 <strtol>
 80016fc:	4603      	mov	r3, r0
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	709a      	strb	r2, [r3, #2]

    // Tách phần Data
    size_t dataIndex = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	61fb      	str	r3, [r7, #28]
    size_t inputIndex = 6; // Vị trí bắt đầu dữ liệu (sau Addr và Code)
 8001708:	2306      	movs	r3, #6
 800170a:	61bb      	str	r3, [r7, #24]
    while (input[inputIndex] != '\r' && input[inputIndex] != '\n' && input[inputIndex] != '\0') {
 800170c:	e01b      	b.n	8001746 <parse_data+0xda>
        strncpy(temp, input + inputIndex, 2);
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	18d1      	adds	r1, r2, r3
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	2202      	movs	r2, #2
 800171a:	4618      	mov	r0, r3
 800171c:	f004 fdb9 	bl	8006292 <strncpy>
        data->Data[dataIndex++] = (uint8_t)strtol(temp, NULL, 16);
 8001720:	f107 030c 	add.w	r3, r7, #12
 8001724:	2210      	movs	r2, #16
 8001726:	2100      	movs	r1, #0
 8001728:	4618      	mov	r0, r3
 800172a:	f004 f805 	bl	8005738 <strtol>
 800172e:	4601      	mov	r1, r0
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	1c5a      	adds	r2, r3, #1
 8001734:	61fa      	str	r2, [r7, #28]
 8001736:	b2c9      	uxtb	r1, r1
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	4413      	add	r3, r2
 800173c:	460a      	mov	r2, r1
 800173e:	70da      	strb	r2, [r3, #3]
        inputIndex += 2;
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	3302      	adds	r3, #2
 8001744:	61bb      	str	r3, [r7, #24]
    while (input[inputIndex] != '\r' && input[inputIndex] != '\n' && input[inputIndex] != '\0') {
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	4413      	add	r3, r2
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b0d      	cmp	r3, #13
 8001750:	d00b      	beq.n	800176a <parse_data+0xfe>
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	4413      	add	r3, r2
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b0a      	cmp	r3, #10
 800175c:	d005      	beq.n	800176a <parse_data+0xfe>
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	4413      	add	r3, r2
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1d1      	bne.n	800170e <parse_data+0xa2>
    }
    data->Len = dataIndex - 4; // Lưu chiều dài của Data
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	b29b      	uxth	r3, r3
 800176e:	3b04      	subs	r3, #4
 8001770:	b29a      	uxth	r2, r3
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108

    // Chuyển đổi CRC
    strncpy(temp, input + inputIndex - 4, 4);
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	3b04      	subs	r3, #4
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	18d1      	adds	r1, r2, r3
 8001780:	f107 030c 	add.w	r3, r7, #12
 8001784:	2204      	movs	r2, #4
 8001786:	4618      	mov	r0, r3
 8001788:	f004 fd83 	bl	8006292 <strncpy>
    temp[4] = '\0';
 800178c:	2300      	movs	r3, #0
 800178e:	743b      	strb	r3, [r7, #16]
    data->Crc = (uint16_t)strtol(temp, NULL, 16);
 8001790:	f107 030c 	add.w	r3, r7, #12
 8001794:	2210      	movs	r2, #16
 8001796:	2100      	movs	r1, #0
 8001798:	4618      	mov	r0, r3
 800179a:	f003 ffcd 	bl	8005738 <strtol>
 800179e:	4603      	mov	r3, r0
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104

    // Chuyển đổi Stop
    data->Stop = ((uint16_t)input[inputIndex] << 8) | input[inputIndex + 1];
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	4413      	add	r3, r2
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	021b      	lsls	r3, r3, #8
 80017b2:	b21a      	sxth	r2, r3
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	3301      	adds	r3, #1
 80017b8:	6879      	ldr	r1, [r7, #4]
 80017ba:	440b      	add	r3, r1
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	b21b      	sxth	r3, r3
 80017c0:	4313      	orrs	r3, r2
 80017c2:	b21b      	sxth	r3, r3
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
}
 80017cc:	bf00      	nop
 80017ce:	3720      	adds	r7, #32
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <calculate_crc>:

uint16_t calculate_crc(uint8_t *data, size_t length) {
 80017d4:	b480      	push	{r7}
 80017d6:	b087      	sub	sp, #28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
    uint16_t crc = 0xFFFF;  // Giá trị bắt đầu CRC-16 (0xFFFF)
 80017de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017e2:	82fb      	strh	r3, [r7, #22]

    for (size_t i = 0; i < length; i++) {
 80017e4:	2300      	movs	r3, #0
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	e022      	b.n	8001830 <calculate_crc+0x5c>
        crc ^= data[i];  // XOR byte hiện tại với CRC
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	4413      	add	r3, r2
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	461a      	mov	r2, r3
 80017f4:	8afb      	ldrh	r3, [r7, #22]
 80017f6:	4053      	eors	r3, r2
 80017f8:	82fb      	strh	r3, [r7, #22]
        for (uint8_t bit = 0; bit < 8; bit++) {  // Lặp qua từng bit
 80017fa:	2300      	movs	r3, #0
 80017fc:	73fb      	strb	r3, [r7, #15]
 80017fe:	e011      	b.n	8001824 <calculate_crc+0x50>
            if (crc & 0x0001) {  // Nếu bit thấp nhất là 1
 8001800:	8afb      	ldrh	r3, [r7, #22]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	d006      	beq.n	8001818 <calculate_crc+0x44>
                crc = (crc >> 1) ^ 0xA001;  // Dịch sang phải và XOR với 0xA001
 800180a:	8afb      	ldrh	r3, [r7, #22]
 800180c:	085b      	lsrs	r3, r3, #1
 800180e:	b29a      	uxth	r2, r3
 8001810:	4b14      	ldr	r3, [pc, #80]	@ (8001864 <calculate_crc+0x90>)
 8001812:	4053      	eors	r3, r2
 8001814:	82fb      	strh	r3, [r7, #22]
 8001816:	e002      	b.n	800181e <calculate_crc+0x4a>
            } else {
                crc >>= 1;  // Chỉ dịch CRC sang phải nếu bit thấp nhất là 0
 8001818:	8afb      	ldrh	r3, [r7, #22]
 800181a:	085b      	lsrs	r3, r3, #1
 800181c:	82fb      	strh	r3, [r7, #22]
        for (uint8_t bit = 0; bit < 8; bit++) {  // Lặp qua từng bit
 800181e:	7bfb      	ldrb	r3, [r7, #15]
 8001820:	3301      	adds	r3, #1
 8001822:	73fb      	strb	r3, [r7, #15]
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	2b07      	cmp	r3, #7
 8001828:	d9ea      	bls.n	8001800 <calculate_crc+0x2c>
    for (size_t i = 0; i < length; i++) {
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	3301      	adds	r3, #1
 800182e:	613b      	str	r3, [r7, #16]
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	d3d8      	bcc.n	80017ea <calculate_crc+0x16>
            }
        }
    }
    int16_t L = crc&0xFF;
 8001838:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800183c:	b2db      	uxtb	r3, r3
 800183e:	81bb      	strh	r3, [r7, #12]
    int16_t H = (crc>>8)&0xFF;
 8001840:	8afb      	ldrh	r3, [r7, #22]
 8001842:	0a1b      	lsrs	r3, r3, #8
 8001844:	b29b      	uxth	r3, r3
 8001846:	817b      	strh	r3, [r7, #10]
    return (L<<8)|H;  // Trả về CRC tính toán
 8001848:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800184c:	021b      	lsls	r3, r3, #8
 800184e:	b21a      	sxth	r2, r3
 8001850:	897b      	ldrh	r3, [r7, #10]
 8001852:	4313      	orrs	r3, r2
 8001854:	b21b      	sxth	r3, r3
 8001856:	b29b      	uxth	r3, r3
}
 8001858:	4618      	mov	r0, r3
 800185a:	371c      	adds	r7, #28
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	ffffa001 	.word	0xffffa001

08001868 <check_crc>:

uint16_t check_crc(DataStruct *data) {
 8001868:	b580      	push	{r7, lr}
 800186a:	b0c6      	sub	sp, #280	@ 0x118
 800186c:	af00      	add	r7, sp, #0
 800186e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001872:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001876:	6018      	str	r0, [r3, #0]
    // Tạo mảng chứa dữ liệu cần tính CRC
    uint8_t temp_data[MAX_DATA_SIZE + 3];  // Start, Addr, Code, Data (tối đa)

    // Sao chép các thành phần dữ liệu vào mảng tạm
    size_t index = 0;
 8001878:	2300      	movs	r3, #0
 800187a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    temp_data[index++] = data->Start;  // Start
 800187e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001882:	1c5a      	adds	r2, r3, #1
 8001884:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 8001888:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800188c:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8001890:	6812      	ldr	r2, [r2, #0]
 8001892:	7811      	ldrb	r1, [r2, #0]
 8001894:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8001898:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800189c:	54d1      	strb	r1, [r2, r3]
    temp_data[index++] = data->Addr;   // Addr
 800189e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80018a2:	1c5a      	adds	r2, r3, #1
 80018a4:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 80018a8:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80018ac:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 80018b0:	6812      	ldr	r2, [r2, #0]
 80018b2:	7851      	ldrb	r1, [r2, #1]
 80018b4:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80018b8:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80018bc:	54d1      	strb	r1, [r2, r3]
    temp_data[index++] = data->Code;   // Code
 80018be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80018c2:	1c5a      	adds	r2, r3, #1
 80018c4:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 80018c8:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80018cc:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 80018d0:	6812      	ldr	r2, [r2, #0]
 80018d2:	7891      	ldrb	r1, [r2, #2]
 80018d4:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80018d8:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80018dc:	54d1      	strb	r1, [r2, r3]

    // Sao chép dữ liệu vào mảng
    memcpy(&temp_data[index], data->Data, data->Len);
 80018de:	f107 020c 	add.w	r2, r7, #12
 80018e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80018e6:	18d0      	adds	r0, r2, r3
 80018e8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80018ec:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	1cd9      	adds	r1, r3, #3
 80018f4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80018f8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8001902:	461a      	mov	r2, r3
 8001904:	f004 fd5d 	bl	80063c2 <memcpy>

    // Tính toán CRC cho dữ liệu
    uint16_t calculated_crc = calculate_crc(temp_data, index + data->Len);
 8001908:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800190c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8001916:	461a      	mov	r2, r3
 8001918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800191c:	441a      	add	r2, r3
 800191e:	f107 030c 	add.w	r3, r7, #12
 8001922:	4611      	mov	r1, r2
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ff55 	bl	80017d4 <calculate_crc>
 800192a:	4603      	mov	r3, r0
 800192c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112

    // So sánh CRC tính toán với CRC đã cho
    if (calculated_crc == data->Crc) {
 8001930:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001934:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 800193e:	f8b7 2112 	ldrh.w	r2, [r7, #274]	@ 0x112
 8001942:	429a      	cmp	r2, r3
 8001944:	d102      	bne.n	800194c <check_crc+0xe4>
        return calculated_crc;  // CRC hợp lệ
 8001946:	f8b7 3112 	ldrh.w	r3, [r7, #274]	@ 0x112
 800194a:	e001      	b.n	8001950 <check_crc+0xe8>
    } else {
        return calculated_crc;  // CRC không hợp lệ
 800194c:	f8b7 3112 	ldrh.w	r3, [r7, #274]	@ 0x112
    }
}
 8001950:	4618      	mov	r0, r3
 8001952:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
	...

0800195c <data_struct_to_string>:
    output[len * 2] = '\0'; // Kết thúc chuỗi
    return len * 2;
}


void data_struct_to_string(DataStruct* data, char* output) {
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af02      	add	r7, sp, #8
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
    // Bắt đầu chuỗi với ký tự Start
    sprintf(output, "%02X%02X%02X", data->Start, data->Addr, data->Code);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	461a      	mov	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	785b      	ldrb	r3, [r3, #1]
 8001970:	4619      	mov	r1, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	789b      	ldrb	r3, [r3, #2]
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	460b      	mov	r3, r1
 800197a:	491f      	ldr	r1, [pc, #124]	@ (80019f8 <data_struct_to_string+0x9c>)
 800197c:	6838      	ldr	r0, [r7, #0]
 800197e:	f004 fc03 	bl	8006188 <siprintf>

    // Thêm Addr và Code vào chuỗi
//    sprintf(output + strlen(output), "");

    // Thêm Data vào chuỗi
    for (int i = 0; i < data->Len; i++) {
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	e011      	b.n	80019ac <data_struct_to_string+0x50>
        sprintf(output + strlen(output), "%02X", data->Data[i]);
 8001988:	6838      	ldr	r0, [r7, #0]
 800198a:	f7fe fbe1 	bl	8000150 <strlen>
 800198e:	4602      	mov	r2, r0
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	1898      	adds	r0, r3, r2
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	4413      	add	r3, r2
 800199a:	3303      	adds	r3, #3
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	461a      	mov	r2, r3
 80019a0:	4916      	ldr	r1, [pc, #88]	@ (80019fc <data_struct_to_string+0xa0>)
 80019a2:	f004 fbf1 	bl	8006188 <siprintf>
    for (int i = 0; i < data->Len; i++) {
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	3301      	adds	r3, #1
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 80019b2:	461a      	mov	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	4293      	cmp	r3, r2
 80019b8:	dbe6      	blt.n	8001988 <data_struct_to_string+0x2c>
    }

    // Thêm CRC vào chuỗi
    sprintf(output + strlen(output), "%04X", data->Crc);
 80019ba:	6838      	ldr	r0, [r7, #0]
 80019bc:	f7fe fbc8 	bl	8000150 <strlen>
 80019c0:	4602      	mov	r2, r0
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	1898      	adds	r0, r3, r2
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 80019cc:	461a      	mov	r2, r3
 80019ce:	490c      	ldr	r1, [pc, #48]	@ (8001a00 <data_struct_to_string+0xa4>)
 80019d0:	f004 fbda 	bl	8006188 <siprintf>

    // Thêm Stop (\r\n) vào chuỗi
    sprintf(output + strlen(output), "%04X",data->Stop);
 80019d4:	6838      	ldr	r0, [r7, #0]
 80019d6:	f7fe fbbb 	bl	8000150 <strlen>
 80019da:	4602      	mov	r2, r0
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	1898      	adds	r0, r3, r2
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 80019e6:	461a      	mov	r2, r3
 80019e8:	4905      	ldr	r1, [pc, #20]	@ (8001a00 <data_struct_to_string+0xa4>)
 80019ea:	f004 fbcd 	bl	8006188 <siprintf>
}
 80019ee:	bf00      	nop
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	08008448 	.word	0x08008448
 80019fc:	08008440 	.word	0x08008440
 8001a00:	08008458 	.word	0x08008458

08001a04 <convert_to_char>:
    }

    return position;
}

char convert_to_char(uint16_t num) {
 8001a04:	b480      	push	{r7}
 8001a06:	b087      	sub	sp, #28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	80fb      	strh	r3, [r7, #6]
    unsigned int count = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
    int position = -1;
 8001a12:	f04f 33ff 	mov.w	r3, #4294967295
 8001a16:	613b      	str	r3, [r7, #16]

    // Kiểm tra từng bit trong số 12 bit
    for (int i = 0; i < 12; i++) {
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	e010      	b.n	8001a40 <convert_to_char+0x3c>
        if (num & ArrConv[i]) { // Nếu bit này là 1
 8001a1e:	4a11      	ldr	r2, [pc, #68]	@ (8001a64 <convert_to_char+0x60>)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001a26:	88fb      	ldrh	r3, [r7, #6]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d004      	beq.n	8001a3a <convert_to_char+0x36>
            count++;
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	3301      	adds	r3, #1
 8001a34:	617b      	str	r3, [r7, #20]
            position = i;  // Lưu lại vị trí của bit
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < 12; i++) {
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2b0b      	cmp	r3, #11
 8001a44:	ddeb      	ble.n	8001a1e <convert_to_char+0x1a>
        }
    }

    // Nếu có nhiều hơn 1 bit bằng 1, trả về '\0'
    if (count != 1) {
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d001      	beq.n	8001a50 <convert_to_char+0x4c>
        return '\0';
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	e003      	b.n	8001a58 <convert_to_char+0x54>
    }

    // Nếu chỉ có 1 bit 1, trả về ký tự tương ứng
    return ArrChar[position];
 8001a50:	4a05      	ldr	r2, [pc, #20]	@ (8001a68 <convert_to_char+0x64>)
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	4413      	add	r3, r2
 8001a56:	781b      	ldrb	r3, [r3, #0]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	371c      	adds	r7, #28
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	20000010 	.word	0x20000010
 8001a68:	20000028 	.word	0x20000028

08001a6c <gen_data_send_rs485>:

char* gen_data_send_rs485(uint8_t code, char data[])
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b0c6      	sub	sp, #280	@ 0x118
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4602      	mov	r2, r0
 8001a74:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001a78:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001a7c:	6019      	str	r1, [r3, #0]
 8001a7e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001a82:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8001a86:	701a      	strb	r2, [r3, #0]
	DataStruct result;
	memset((void*)&result,0,sizeof(result));
 8001a88:	f107 030c 	add.w	r3, r7, #12
 8001a8c:	f44f 7285 	mov.w	r2, #266	@ 0x10a
 8001a90:	2100      	movs	r1, #0
 8001a92:	4618      	mov	r0, r3
 8001a94:	f004 fbf5 	bl	8006282 <memset>
	result.Start = 0x3A;
 8001a98:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001a9c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001aa0:	223a      	movs	r2, #58	@ 0x3a
 8001aa2:	701a      	strb	r2, [r3, #0]
	result.Addr = MY_ADDRESS;
 8001aa4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001aa8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001aac:	226f      	movs	r2, #111	@ 0x6f
 8001aae:	705a      	strb	r2, [r3, #1]
	result.Code = code;
 8001ab0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ab4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001ab8:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8001abc:	f2a2 1211 	subw	r2, r2, #273	@ 0x111
 8001ac0:	7812      	ldrb	r2, [r2, #0]
 8001ac2:	709a      	strb	r2, [r3, #2]
	result.Len = strlen(data);
 8001ac4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ac8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001acc:	6818      	ldr	r0, [r3, #0]
 8001ace:	f7fe fb3f 	bl	8000150 <strlen>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ada:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001ade:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
	memcpy((void*)result.Data, (void*)data, strlen(data)+1);
 8001ae2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ae6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001aea:	6818      	ldr	r0, [r3, #0]
 8001aec:	f7fe fb30 	bl	8000150 <strlen>
 8001af0:	4603      	mov	r3, r0
 8001af2:	1c59      	adds	r1, r3, #1
 8001af4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001af8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001afc:	f107 020c 	add.w	r2, r7, #12
 8001b00:	1cd0      	adds	r0, r2, #3
 8001b02:	460a      	mov	r2, r1
 8001b04:	6819      	ldr	r1, [r3, #0]
 8001b06:	f004 fc5c 	bl	80063c2 <memcpy>
	result.Crc = check_crc(&result);
 8001b0a:	f107 030c 	add.w	r3, r7, #12
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff feaa 	bl	8001868 <check_crc>
 8001b14:	4603      	mov	r3, r0
 8001b16:	461a      	mov	r2, r3
 8001b18:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b1c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b20:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
	result.Stop = 0x0D0A;
 8001b24:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b28:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b2c:	f640 520a 	movw	r2, #3338	@ 0xd0a
 8001b30:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
	data_struct_to_string(&result,data);
 8001b34:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b38:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001b3c:	f107 020c 	add.w	r2, r7, #12
 8001b40:	6819      	ldr	r1, [r3, #0]
 8001b42:	4610      	mov	r0, r2
 8001b44:	f7ff ff0a 	bl	800195c <data_struct_to_string>
	return data;
 8001b48:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b4c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001b50:	681b      	ldr	r3, [r3, #0]
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <TaskMPR121>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void TaskMPR121()
{
 8001b5c:	b590      	push	{r4, r7, lr}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
	  new_touch = touched();
 8001b62:	f7ff f8bf 	bl	8000ce4 <touched>
 8001b66:	4603      	mov	r3, r0
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4b56      	ldr	r3, [pc, #344]	@ (8001cc4 <TaskMPR121+0x168>)
 8001b6c:	801a      	strh	r2, [r3, #0]
	  if(new_touch != last_touch)
 8001b6e:	4b55      	ldr	r3, [pc, #340]	@ (8001cc4 <TaskMPR121+0x168>)
 8001b70:	881a      	ldrh	r2, [r3, #0]
 8001b72:	4b55      	ldr	r3, [pc, #340]	@ (8001cc8 <TaskMPR121+0x16c>)
 8001b74:	881b      	ldrh	r3, [r3, #0]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	f000 809b 	beq.w	8001cb2 <TaskMPR121+0x156>
	  {
		  if(new_touch == 0)
 8001b7c:	4b51      	ldr	r3, [pc, #324]	@ (8001cc4 <TaskMPR121+0x168>)
 8001b7e:	881b      	ldrh	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f040 8096 	bne.w	8001cb2 <TaskMPR121+0x156>
		  {
			  char C = convert_to_char(last_touch);
 8001b86:	4b50      	ldr	r3, [pc, #320]	@ (8001cc8 <TaskMPR121+0x16c>)
 8001b88:	881b      	ldrh	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff ff3a 	bl	8001a04 <convert_to_char>
 8001b90:	4603      	mov	r3, r0
 8001b92:	71fb      	strb	r3, [r7, #7]
			  if(C != '\0' && C != '*' && C != '#')
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d02c      	beq.n	8001bf4 <TaskMPR121+0x98>
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b9e:	d029      	beq.n	8001bf4 <TaskMPR121+0x98>
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	2b23      	cmp	r3, #35	@ 0x23
 8001ba4:	d026      	beq.n	8001bf4 <TaskMPR121+0x98>
			  {
				  if(len_key_board < 16)
 8001ba6:	4b49      	ldr	r3, [pc, #292]	@ (8001ccc <TaskMPR121+0x170>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	2b0f      	cmp	r3, #15
 8001bac:	d810      	bhi.n	8001bd0 <TaskMPR121+0x74>
				  {
					  key_board[len_key_board++] = C;
 8001bae:	4b47      	ldr	r3, [pc, #284]	@ (8001ccc <TaskMPR121+0x170>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	1c5a      	adds	r2, r3, #1
 8001bb4:	b2d1      	uxtb	r1, r2
 8001bb6:	4a45      	ldr	r2, [pc, #276]	@ (8001ccc <TaskMPR121+0x170>)
 8001bb8:	7011      	strb	r1, [r2, #0]
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4a44      	ldr	r2, [pc, #272]	@ (8001cd0 <TaskMPR121+0x174>)
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	5453      	strb	r3, [r2, r1]
					  key_board[len_key_board] = '\0';
 8001bc2:	4b42      	ldr	r3, [pc, #264]	@ (8001ccc <TaskMPR121+0x170>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	4b41      	ldr	r3, [pc, #260]	@ (8001cd0 <TaskMPR121+0x174>)
 8001bca:	2100      	movs	r1, #0
 8001bcc:	5499      	strb	r1, [r3, r2]
				  if(len_key_board < 16)
 8001bce:	e058      	b.n	8001c82 <TaskMPR121+0x126>
				  }
				  else
				  {
					  memmove(key_board,&key_board[1],sizeof(key_board) - 1);
 8001bd0:	2213      	movs	r2, #19
 8001bd2:	4940      	ldr	r1, [pc, #256]	@ (8001cd4 <TaskMPR121+0x178>)
 8001bd4:	483e      	ldr	r0, [pc, #248]	@ (8001cd0 <TaskMPR121+0x174>)
 8001bd6:	f004 fb3a 	bl	800624e <memmove>
					  key_board[len_key_board - 1] = C;
 8001bda:	4b3c      	ldr	r3, [pc, #240]	@ (8001ccc <TaskMPR121+0x170>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	493b      	ldr	r1, [pc, #236]	@ (8001cd0 <TaskMPR121+0x174>)
 8001be2:	79fa      	ldrb	r2, [r7, #7]
 8001be4:	54ca      	strb	r2, [r1, r3]
					  key_board[len_key_board] = '\0';
 8001be6:	4b39      	ldr	r3, [pc, #228]	@ (8001ccc <TaskMPR121+0x170>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	461a      	mov	r2, r3
 8001bec:	4b38      	ldr	r3, [pc, #224]	@ (8001cd0 <TaskMPR121+0x174>)
 8001bee:	2100      	movs	r1, #0
 8001bf0:	5499      	strb	r1, [r3, r2]
				  if(len_key_board < 16)
 8001bf2:	e046      	b.n	8001c82 <TaskMPR121+0x126>
				  }
			  }
			  else if(C == '#' && len_key_board > 0)
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	2b23      	cmp	r3, #35	@ 0x23
 8001bf8:	d124      	bne.n	8001c44 <TaskMPR121+0xe8>
 8001bfa:	4b34      	ldr	r3, [pc, #208]	@ (8001ccc <TaskMPR121+0x170>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d020      	beq.n	8001c44 <TaskMPR121+0xe8>
			  {
				  memset((void*)print_lcd_row2, 0, sizeof(print_lcd_row2));
 8001c02:	221e      	movs	r2, #30
 8001c04:	2100      	movs	r1, #0
 8001c06:	4834      	ldr	r0, [pc, #208]	@ (8001cd8 <TaskMPR121+0x17c>)
 8001c08:	f004 fb3b 	bl	8006282 <memset>
				  memcpy((void*)print_lcd_row2, (void*)indicate_1, sizeof(indicate_1));
 8001c0c:	4a32      	ldr	r2, [pc, #200]	@ (8001cd8 <TaskMPR121+0x17c>)
 8001c0e:	4b33      	ldr	r3, [pc, #204]	@ (8001cdc <TaskMPR121+0x180>)
 8001c10:	4614      	mov	r4, r2
 8001c12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c14:	c407      	stmia	r4!, {r0, r1, r2}
 8001c16:	8023      	strh	r3, [r4, #0]
				  memcpy((void*)send_to_rs485, (void*)key_board, strlen(key_board));
 8001c18:	482d      	ldr	r0, [pc, #180]	@ (8001cd0 <TaskMPR121+0x174>)
 8001c1a:	f7fe fa99 	bl	8000150 <strlen>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	461a      	mov	r2, r3
 8001c22:	492b      	ldr	r1, [pc, #172]	@ (8001cd0 <TaskMPR121+0x174>)
 8001c24:	482e      	ldr	r0, [pc, #184]	@ (8001ce0 <TaskMPR121+0x184>)
 8001c26:	f004 fbcc 	bl	80063c2 <memcpy>
				  gen_data_send_rs485(UPGRADE(CODE_KEY),send_to_rs485);
 8001c2a:	492d      	ldr	r1, [pc, #180]	@ (8001ce0 <TaskMPR121+0x184>)
 8001c2c:	2082      	movs	r0, #130	@ 0x82
 8001c2e:	f7ff ff1d 	bl	8001a6c <gen_data_send_rs485>
				  memset((void*)key_board, 0, sizeof(key_board));
 8001c32:	2214      	movs	r2, #20
 8001c34:	2100      	movs	r1, #0
 8001c36:	4826      	ldr	r0, [pc, #152]	@ (8001cd0 <TaskMPR121+0x174>)
 8001c38:	f004 fb23 	bl	8006282 <memset>
				  len_key_board = 0;
 8001c3c:	4b23      	ldr	r3, [pc, #140]	@ (8001ccc <TaskMPR121+0x170>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	701a      	strb	r2, [r3, #0]
 8001c42:	e01e      	b.n	8001c82 <TaskMPR121+0x126>
			  }
			  else if(C == '*' && len_key_board > 0)
 8001c44:	79fb      	ldrb	r3, [r7, #7]
 8001c46:	2b2a      	cmp	r3, #42	@ 0x2a
 8001c48:	d11b      	bne.n	8001c82 <TaskMPR121+0x126>
 8001c4a:	4b20      	ldr	r3, [pc, #128]	@ (8001ccc <TaskMPR121+0x170>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d017      	beq.n	8001c82 <TaskMPR121+0x126>
			  {
				  memset((void*)print_lcd_row2, 0, sizeof(print_lcd_row2));
 8001c52:	221e      	movs	r2, #30
 8001c54:	2100      	movs	r1, #0
 8001c56:	4820      	ldr	r0, [pc, #128]	@ (8001cd8 <TaskMPR121+0x17c>)
 8001c58:	f004 fb13 	bl	8006282 <memset>
				  key_board[--len_key_board] = '\0';
 8001c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001ccc <TaskMPR121+0x170>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	3b01      	subs	r3, #1
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	4b19      	ldr	r3, [pc, #100]	@ (8001ccc <TaskMPR121+0x170>)
 8001c66:	701a      	strb	r2, [r3, #0]
 8001c68:	4b18      	ldr	r3, [pc, #96]	@ (8001ccc <TaskMPR121+0x170>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4b18      	ldr	r3, [pc, #96]	@ (8001cd0 <TaskMPR121+0x174>)
 8001c70:	2100      	movs	r1, #0
 8001c72:	5499      	strb	r1, [r3, r2]
				  memcpy((void*)print_lcd_row2, (void*)key_board, len_key_board);
 8001c74:	4b15      	ldr	r3, [pc, #84]	@ (8001ccc <TaskMPR121+0x170>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	4915      	ldr	r1, [pc, #84]	@ (8001cd0 <TaskMPR121+0x174>)
 8001c7c:	4816      	ldr	r0, [pc, #88]	@ (8001cd8 <TaskMPR121+0x17c>)
 8001c7e:	f004 fba0 	bl	80063c2 <memcpy>
			  }
			  if(C != '\0' && len_key_board > 0 && C != '#')
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d014      	beq.n	8001cb2 <TaskMPR121+0x156>
 8001c88:	4b10      	ldr	r3, [pc, #64]	@ (8001ccc <TaskMPR121+0x170>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d010      	beq.n	8001cb2 <TaskMPR121+0x156>
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	2b23      	cmp	r3, #35	@ 0x23
 8001c94:	d00d      	beq.n	8001cb2 <TaskMPR121+0x156>
			  {
				  memset((void*)print_lcd_row2, 0, sizeof(print_lcd_row2));
 8001c96:	221e      	movs	r2, #30
 8001c98:	2100      	movs	r1, #0
 8001c9a:	480f      	ldr	r0, [pc, #60]	@ (8001cd8 <TaskMPR121+0x17c>)
 8001c9c:	f004 faf1 	bl	8006282 <memset>
				  memcpy((void*)print_lcd_row2, (void*)key_board, strlen(key_board));
 8001ca0:	480b      	ldr	r0, [pc, #44]	@ (8001cd0 <TaskMPR121+0x174>)
 8001ca2:	f7fe fa55 	bl	8000150 <strlen>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4909      	ldr	r1, [pc, #36]	@ (8001cd0 <TaskMPR121+0x174>)
 8001cac:	480a      	ldr	r0, [pc, #40]	@ (8001cd8 <TaskMPR121+0x17c>)
 8001cae:	f004 fb88 	bl	80063c2 <memcpy>
			  }
		  }
	  }
	  last_touch = new_touch;
 8001cb2:	4b04      	ldr	r3, [pc, #16]	@ (8001cc4 <TaskMPR121+0x168>)
 8001cb4:	881a      	ldrh	r2, [r3, #0]
 8001cb6:	4b04      	ldr	r3, [pc, #16]	@ (8001cc8 <TaskMPR121+0x16c>)
 8001cb8:	801a      	strh	r2, [r3, #0]
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd90      	pop	{r4, r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	200003f4 	.word	0x200003f4
 8001cc8:	200003f2 	.word	0x200003f2
 8001ccc:	200003f0 	.word	0x200003f0
 8001cd0:	200003d4 	.word	0x200003d4
 8001cd4:	200003d5 	.word	0x200003d5
 8001cd8:	2000034c 	.word	0x2000034c
 8001cdc:	20000034 	.word	0x20000034
 8001ce0:	2000036c 	.word	0x2000036c

08001ce4 <TaskTempBMP180>:

void TaskTempBMP180()
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
	temperature = BMP180_GetTemperature();
 8001ce8:	f7ff f972 	bl	8000fd0 <BMP180_GetTemperature>
 8001cec:	4603      	mov	r3, r0
 8001cee:	4a02      	ldr	r2, [pc, #8]	@ (8001cf8 <TaskTempBMP180+0x14>)
 8001cf0:	6013      	str	r3, [r2, #0]
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	200003e8 	.word	0x200003e8

08001cfc <TaskPressBMP180>:

void TaskPressBMP180()
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
	pressure = BMP180_GetPressure();
 8001d00:	f7ff f982 	bl	8001008 <BMP180_GetPressure>
 8001d04:	4603      	mov	r3, r0
 8001d06:	4a02      	ldr	r2, [pc, #8]	@ (8001d10 <TaskPressBMP180+0x14>)
 8001d08:	6013      	str	r3, [r2, #0]
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	200003ec 	.word	0x200003ec

08001d14 <TaskLCD>:

void TaskLCD()
{
 8001d14:	b590      	push	{r4, r7, lr}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af02      	add	r7, sp, #8
	if(strlen(print_lcd_row1) > 0)
 8001d1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001d94 <TaskLCD+0x80>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00c      	beq.n	8001d3c <TaskLCD+0x28>
	{
		  HD44780_SetCursor(0,0);
 8001d22:	2100      	movs	r1, #0
 8001d24:	2000      	movs	r0, #0
 8001d26:	f7ff fb45 	bl	80013b4 <HD44780_SetCursor>
		  HD44780_PrintStr(print_lcd_row1);
 8001d2a:	481a      	ldr	r0, [pc, #104]	@ (8001d94 <TaskLCD+0x80>)
 8001d2c:	f7ff fbb3 	bl	8001496 <HD44780_PrintStr>
		  memset((void*)print_lcd_row1, 0, sizeof(print_lcd_row1));
 8001d30:	221e      	movs	r2, #30
 8001d32:	2100      	movs	r1, #0
 8001d34:	4817      	ldr	r0, [pc, #92]	@ (8001d94 <TaskLCD+0x80>)
 8001d36:	f004 faa4 	bl	8006282 <memset>
 8001d3a:	e01b      	b.n	8001d74 <TaskLCD+0x60>
	}
	else
	{
		HD44780_Clear();
 8001d3c:	f7ff fb24 	bl	8001388 <HD44780_Clear>
		sprintf(print_lcd_row1, "%0.1f\t %dKPa %d", temperature, (int)pressure/1000, (int)count_touch);
 8001d40:	4b15      	ldr	r3, [pc, #84]	@ (8001d98 <TaskLCD+0x84>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe fb6f 	bl	8000428 <__aeabi_f2d>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	4913      	ldr	r1, [pc, #76]	@ (8001d9c <TaskLCD+0x88>)
 8001d50:	6809      	ldr	r1, [r1, #0]
 8001d52:	4813      	ldr	r0, [pc, #76]	@ (8001da0 <TaskLCD+0x8c>)
 8001d54:	fb80 4001 	smull	r4, r0, r0, r1
 8001d58:	1180      	asrs	r0, r0, #6
 8001d5a:	17c9      	asrs	r1, r1, #31
 8001d5c:	1a41      	subs	r1, r0, r1
 8001d5e:	4811      	ldr	r0, [pc, #68]	@ (8001da4 <TaskLCD+0x90>)
 8001d60:	8800      	ldrh	r0, [r0, #0]
 8001d62:	9001      	str	r0, [sp, #4]
 8001d64:	9100      	str	r1, [sp, #0]
 8001d66:	4910      	ldr	r1, [pc, #64]	@ (8001da8 <TaskLCD+0x94>)
 8001d68:	480a      	ldr	r0, [pc, #40]	@ (8001d94 <TaskLCD+0x80>)
 8001d6a:	f004 fa0d 	bl	8006188 <siprintf>
		HD44780_PrintStr(print_lcd_row1);
 8001d6e:	4809      	ldr	r0, [pc, #36]	@ (8001d94 <TaskLCD+0x80>)
 8001d70:	f7ff fb91 	bl	8001496 <HD44780_PrintStr>
	}
	if(strlen(print_lcd_row2) > 0)
 8001d74:	4b0d      	ldr	r3, [pc, #52]	@ (8001dac <TaskLCD+0x98>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d006      	beq.n	8001d8a <TaskLCD+0x76>
	{
		  HD44780_SetCursor(0,1);
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	2000      	movs	r0, #0
 8001d80:	f7ff fb18 	bl	80013b4 <HD44780_SetCursor>
		  HD44780_PrintStr(print_lcd_row2);
 8001d84:	4809      	ldr	r0, [pc, #36]	@ (8001dac <TaskLCD+0x98>)
 8001d86:	f7ff fb86 	bl	8001496 <HD44780_PrintStr>
	}
}
 8001d8a:	bf00      	nop
 8001d8c:	3704      	adds	r7, #4
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd90      	pop	{r4, r7, pc}
 8001d92:	bf00      	nop
 8001d94:	2000032c 	.word	0x2000032c
 8001d98:	200003e8 	.word	0x200003e8
 8001d9c:	200003ec 	.word	0x200003ec
 8001da0:	10624dd3 	.word	0x10624dd3
 8001da4:	200003f6 	.word	0x200003f6
 8001da8:	08008460 	.word	0x08008460
 8001dac:	2000034c 	.word	0x2000034c

08001db0 <TaskRX>:

void TaskRX()
{
 8001db0:	b5b0      	push	{r4, r5, r7, lr}
 8001db2:	b0c4      	sub	sp, #272	@ 0x110
 8001db4:	af00      	add	r7, sp, #0
	memset((void*)read_to_rs485,0,sizeof(read_to_rs485));
 8001db6:	2232      	movs	r2, #50	@ 0x32
 8001db8:	2100      	movs	r1, #0
 8001dba:	487d      	ldr	r0, [pc, #500]	@ (8001fb0 <TaskRX+0x200>)
 8001dbc:	f004 fa61 	bl	8006282 <memset>
	HAL_UART_Receive(&huart1, (uint8_t *)&read_to_rs485, sizeof (read_to_rs485) , 500);
 8001dc0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001dc4:	2232      	movs	r2, #50	@ 0x32
 8001dc6:	497a      	ldr	r1, [pc, #488]	@ (8001fb0 <TaskRX+0x200>)
 8001dc8:	487a      	ldr	r0, [pc, #488]	@ (8001fb4 <TaskRX+0x204>)
 8001dca:	f003 fa5a 	bl	8005282 <HAL_UART_Receive>
	  if(strlen(read_to_rs485) > 1)
 8001dce:	4878      	ldr	r0, [pc, #480]	@ (8001fb0 <TaskRX+0x200>)
 8001dd0:	f7fe f9be 	bl	8000150 <strlen>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	f240 80e5 	bls.w	8001fa6 <TaskRX+0x1f6>
	  {
		  DataStruct result;
		  parse_data(read_to_rs485,&result);
 8001ddc:	1d3b      	adds	r3, r7, #4
 8001dde:	4619      	mov	r1, r3
 8001de0:	4873      	ldr	r0, [pc, #460]	@ (8001fb0 <TaskRX+0x200>)
 8001de2:	f7ff fc43 	bl	800166c <parse_data>
		  if(result.Addr == MY_ADDRESS)
 8001de6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001dea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001dee:	785b      	ldrb	r3, [r3, #1]
 8001df0:	2b6f      	cmp	r3, #111	@ 0x6f
 8001df2:	f040 80d8 	bne.w	8001fa6 <TaskRX+0x1f6>
		  {
			  if(result.Code == 1)
 8001df6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001dfa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001dfe:	789b      	ldrb	r3, [r3, #2]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d170      	bne.n	8001ee6 <TaskRX+0x136>
			  {
				  if(result.Data[0] == '1')
 8001e04:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e08:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e0c:	78db      	ldrb	r3, [r3, #3]
 8001e0e:	2b31      	cmp	r3, #49	@ 0x31
 8001e10:	d121      	bne.n	8001e56 <TaskRX+0xa6>
				  {
					  memset((void*)send_to_rs485,0,sizeof(send_to_rs485));
 8001e12:	2232      	movs	r2, #50	@ 0x32
 8001e14:	2100      	movs	r1, #0
 8001e16:	4868      	ldr	r0, [pc, #416]	@ (8001fb8 <TaskRX+0x208>)
 8001e18:	f004 fa33 	bl	8006282 <memset>
					  sprintf(send_to_rs485, "%.1fC", temperature);
 8001e1c:	4b67      	ldr	r3, [pc, #412]	@ (8001fbc <TaskRX+0x20c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe fb01 	bl	8000428 <__aeabi_f2d>
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	4965      	ldr	r1, [pc, #404]	@ (8001fc0 <TaskRX+0x210>)
 8001e2c:	4862      	ldr	r0, [pc, #392]	@ (8001fb8 <TaskRX+0x208>)
 8001e2e:	f004 f9ab 	bl	8006188 <siprintf>
					  gen_data_send_rs485(RESPONSES(CODE_TEMP),send_to_rs485);
 8001e32:	4961      	ldr	r1, [pc, #388]	@ (8001fb8 <TaskRX+0x208>)
 8001e34:	2001      	movs	r0, #1
 8001e36:	f7ff fe19 	bl	8001a6c <gen_data_send_rs485>
					  memset((void*)print_lcd_row2, 0, sizeof(print_lcd_row2));
 8001e3a:	221e      	movs	r2, #30
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	4861      	ldr	r0, [pc, #388]	@ (8001fc4 <TaskRX+0x214>)
 8001e40:	f004 fa1f 	bl	8006282 <memset>
					  memcpy((void*)print_lcd_row2, (void*)indicate_T, sizeof(indicate_T));
 8001e44:	4a5f      	ldr	r2, [pc, #380]	@ (8001fc4 <TaskRX+0x214>)
 8001e46:	4b60      	ldr	r3, [pc, #384]	@ (8001fc8 <TaskRX+0x218>)
 8001e48:	4614      	mov	r4, r2
 8001e4a:	461d      	mov	r5, r3
 8001e4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e50:	682b      	ldr	r3, [r5, #0]
 8001e52:	7023      	strb	r3, [r4, #0]
				  sprintf(send_to_rs485, "Okee");
				  gen_data_send_rs485(RESPONSES(CODE_RESP),send_to_rs485);
			  }
		  }
	  }
}
 8001e54:	e0a7      	b.n	8001fa6 <TaskRX+0x1f6>
				  else if (result.Data[0] == '2')
 8001e56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e5a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e5e:	78db      	ldrb	r3, [r3, #3]
 8001e60:	2b32      	cmp	r3, #50	@ 0x32
 8001e62:	d11b      	bne.n	8001e9c <TaskRX+0xec>
					  memset((void*)send_to_rs485,0,sizeof(send_to_rs485));
 8001e64:	2232      	movs	r2, #50	@ 0x32
 8001e66:	2100      	movs	r1, #0
 8001e68:	4853      	ldr	r0, [pc, #332]	@ (8001fb8 <TaskRX+0x208>)
 8001e6a:	f004 fa0a 	bl	8006282 <memset>
					  sprintf(send_to_rs485, "%dPa", (int) pressure);
 8001e6e:	4b57      	ldr	r3, [pc, #348]	@ (8001fcc <TaskRX+0x21c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	461a      	mov	r2, r3
 8001e74:	4956      	ldr	r1, [pc, #344]	@ (8001fd0 <TaskRX+0x220>)
 8001e76:	4850      	ldr	r0, [pc, #320]	@ (8001fb8 <TaskRX+0x208>)
 8001e78:	f004 f986 	bl	8006188 <siprintf>
					  gen_data_send_rs485(RESPONSES(CODE_PRES),send_to_rs485);
 8001e7c:	494e      	ldr	r1, [pc, #312]	@ (8001fb8 <TaskRX+0x208>)
 8001e7e:	2002      	movs	r0, #2
 8001e80:	f7ff fdf4 	bl	8001a6c <gen_data_send_rs485>
					  memset((void*)print_lcd_row2, 0, sizeof(print_lcd_row2));
 8001e84:	221e      	movs	r2, #30
 8001e86:	2100      	movs	r1, #0
 8001e88:	484e      	ldr	r0, [pc, #312]	@ (8001fc4 <TaskRX+0x214>)
 8001e8a:	f004 f9fa 	bl	8006282 <memset>
					  memcpy((void*)print_lcd_row2, (void*)indicate_P, sizeof(indicate_P));
 8001e8e:	4a4d      	ldr	r2, [pc, #308]	@ (8001fc4 <TaskRX+0x214>)
 8001e90:	4b50      	ldr	r3, [pc, #320]	@ (8001fd4 <TaskRX+0x224>)
 8001e92:	4614      	mov	r4, r2
 8001e94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e96:	c407      	stmia	r4!, {r0, r1, r2}
 8001e98:	8023      	strh	r3, [r4, #0]
}
 8001e9a:	e084      	b.n	8001fa6 <TaskRX+0x1f6>
				  else if (result.Data[0] == '4')
 8001e9c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001ea0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001ea4:	78db      	ldrb	r3, [r3, #3]
 8001ea6:	2b34      	cmp	r3, #52	@ 0x34
 8001ea8:	d17d      	bne.n	8001fa6 <TaskRX+0x1f6>
					  memset((void*)send_to_rs485,0,sizeof(send_to_rs485));
 8001eaa:	2232      	movs	r2, #50	@ 0x32
 8001eac:	2100      	movs	r1, #0
 8001eae:	4842      	ldr	r0, [pc, #264]	@ (8001fb8 <TaskRX+0x208>)
 8001eb0:	f004 f9e7 	bl	8006282 <memset>
					  sprintf(send_to_rs485, "%dN", (int) count_touch);
 8001eb4:	4b48      	ldr	r3, [pc, #288]	@ (8001fd8 <TaskRX+0x228>)
 8001eb6:	881b      	ldrh	r3, [r3, #0]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4948      	ldr	r1, [pc, #288]	@ (8001fdc <TaskRX+0x22c>)
 8001ebc:	483e      	ldr	r0, [pc, #248]	@ (8001fb8 <TaskRX+0x208>)
 8001ebe:	f004 f963 	bl	8006188 <siprintf>
					  gen_data_send_rs485(RESPONSES(CODE_COUNT),send_to_rs485);
 8001ec2:	493d      	ldr	r1, [pc, #244]	@ (8001fb8 <TaskRX+0x208>)
 8001ec4:	2004      	movs	r0, #4
 8001ec6:	f7ff fdd1 	bl	8001a6c <gen_data_send_rs485>
					  memset((void*)print_lcd_row2, 0, sizeof(print_lcd_row2));
 8001eca:	221e      	movs	r2, #30
 8001ecc:	2100      	movs	r1, #0
 8001ece:	483d      	ldr	r0, [pc, #244]	@ (8001fc4 <TaskRX+0x214>)
 8001ed0:	f004 f9d7 	bl	8006282 <memset>
					  memcpy((void*)print_lcd_row2, (void*)indicate_C, sizeof(indicate_C));
 8001ed4:	4b3b      	ldr	r3, [pc, #236]	@ (8001fc4 <TaskRX+0x214>)
 8001ed6:	4a42      	ldr	r2, [pc, #264]	@ (8001fe0 <TaskRX+0x230>)
 8001ed8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001eda:	c303      	stmia	r3!, {r0, r1}
 8001edc:	801a      	strh	r2, [r3, #0]
 8001ede:	3302      	adds	r3, #2
 8001ee0:	0c12      	lsrs	r2, r2, #16
 8001ee2:	701a      	strb	r2, [r3, #0]
}
 8001ee4:	e05f      	b.n	8001fa6 <TaskRX+0x1f6>
			  else if(result.Code == 2)
 8001ee6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001eea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001eee:	789b      	ldrb	r3, [r3, #2]
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d12c      	bne.n	8001f4e <TaskRX+0x19e>
				  result.Data[result.Len] = '\0';
 8001ef4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001ef8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001efc:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8001f00:	461a      	mov	r2, r3
 8001f02:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f06:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001f0a:	4413      	add	r3, r2
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	70da      	strb	r2, [r3, #3]
				  memset((void*)print_lcd_row2, 0, sizeof(print_lcd_row2));
 8001f10:	221e      	movs	r2, #30
 8001f12:	2100      	movs	r1, #0
 8001f14:	482b      	ldr	r0, [pc, #172]	@ (8001fc4 <TaskRX+0x214>)
 8001f16:	f004 f9b4 	bl	8006282 <memset>
				  memcpy((void*)print_lcd_row2, (void*)(char*)result.Data, strlen((char*)result.Data));
 8001f1a:	1d3b      	adds	r3, r7, #4
 8001f1c:	3303      	adds	r3, #3
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7fe f916 	bl	8000150 <strlen>
 8001f24:	4602      	mov	r2, r0
 8001f26:	1d3b      	adds	r3, r7, #4
 8001f28:	3303      	adds	r3, #3
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4825      	ldr	r0, [pc, #148]	@ (8001fc4 <TaskRX+0x214>)
 8001f2e:	f004 fa48 	bl	80063c2 <memcpy>
				  memset((void*)send_to_rs485,0,sizeof(send_to_rs485));
 8001f32:	2232      	movs	r2, #50	@ 0x32
 8001f34:	2100      	movs	r1, #0
 8001f36:	4820      	ldr	r0, [pc, #128]	@ (8001fb8 <TaskRX+0x208>)
 8001f38:	f004 f9a3 	bl	8006282 <memset>
				  sprintf(send_to_rs485, "Okee");
 8001f3c:	4929      	ldr	r1, [pc, #164]	@ (8001fe4 <TaskRX+0x234>)
 8001f3e:	481e      	ldr	r0, [pc, #120]	@ (8001fb8 <TaskRX+0x208>)
 8001f40:	f004 f922 	bl	8006188 <siprintf>
				  gen_data_send_rs485(RESPONSES(CODE_RESP),send_to_rs485);
 8001f44:	491c      	ldr	r1, [pc, #112]	@ (8001fb8 <TaskRX+0x208>)
 8001f46:	2005      	movs	r0, #5
 8001f48:	f7ff fd90 	bl	8001a6c <gen_data_send_rs485>
}
 8001f4c:	e02b      	b.n	8001fa6 <TaskRX+0x1f6>
			  else if(result.Code == 3)
 8001f4e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f52:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001f56:	789b      	ldrb	r3, [r3, #2]
 8001f58:	2b03      	cmp	r3, #3
 8001f5a:	d124      	bne.n	8001fa6 <TaskRX+0x1f6>
				  result.Data[result.Len] = '\0';
 8001f5c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f60:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001f64:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8001f68:	461a      	mov	r2, r3
 8001f6a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f6e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001f72:	4413      	add	r3, r2
 8001f74:	2200      	movs	r2, #0
 8001f76:	70da      	strb	r2, [r3, #3]
				  memset((void*)print_lcd_row2, 0, sizeof(print_lcd_row2));
 8001f78:	221e      	movs	r2, #30
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	4811      	ldr	r0, [pc, #68]	@ (8001fc4 <TaskRX+0x214>)
 8001f7e:	f004 f980 	bl	8006282 <memset>
				  memcpy((void*)print_lcd_row2, (void*)indicate_M, sizeof(indicate_M));
 8001f82:	4b10      	ldr	r3, [pc, #64]	@ (8001fc4 <TaskRX+0x214>)
 8001f84:	4a18      	ldr	r2, [pc, #96]	@ (8001fe8 <TaskRX+0x238>)
 8001f86:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f88:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				  memset((void*)send_to_rs485,0,sizeof(send_to_rs485));
 8001f8c:	2232      	movs	r2, #50	@ 0x32
 8001f8e:	2100      	movs	r1, #0
 8001f90:	4809      	ldr	r0, [pc, #36]	@ (8001fb8 <TaskRX+0x208>)
 8001f92:	f004 f976 	bl	8006282 <memset>
				  sprintf(send_to_rs485, "Okee");
 8001f96:	4913      	ldr	r1, [pc, #76]	@ (8001fe4 <TaskRX+0x234>)
 8001f98:	4807      	ldr	r0, [pc, #28]	@ (8001fb8 <TaskRX+0x208>)
 8001f9a:	f004 f8f5 	bl	8006188 <siprintf>
				  gen_data_send_rs485(RESPONSES(CODE_RESP),send_to_rs485);
 8001f9e:	4906      	ldr	r1, [pc, #24]	@ (8001fb8 <TaskRX+0x208>)
 8001fa0:	2005      	movs	r0, #5
 8001fa2:	f7ff fd63 	bl	8001a6c <gen_data_send_rs485>
}
 8001fa6:	bf00      	nop
 8001fa8:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bdb0      	pop	{r4, r5, r7, pc}
 8001fb0:	200003a0 	.word	0x200003a0
 8001fb4:	200002e4 	.word	0x200002e4
 8001fb8:	2000036c 	.word	0x2000036c
 8001fbc:	200003e8 	.word	0x200003e8
 8001fc0:	08008470 	.word	0x08008470
 8001fc4:	2000034c 	.word	0x2000034c
 8001fc8:	20000044 	.word	0x20000044
 8001fcc:	200003ec 	.word	0x200003ec
 8001fd0:	08008478 	.word	0x08008478
 8001fd4:	20000058 	.word	0x20000058
 8001fd8:	200003f6 	.word	0x200003f6
 8001fdc:	08008480 	.word	0x08008480
 8001fe0:	20000068 	.word	0x20000068
 8001fe4:	08008484 	.word	0x08008484
 8001fe8:	20000074 	.word	0x20000074

08001fec <TaskTX>:

void TaskTX()
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
	if(strlen(send_to_rs485) > 0)
 8001ff0:	4b3a      	ldr	r3, [pc, #232]	@ (80020dc <TaskTX+0xf0>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d018      	beq.n	800202a <TaskTX+0x3e>
	{
		  if(HAL_UART_Transmit(&huart1, (uint8_t *)&send_to_rs485, strlen(send_to_rs485) , 1000) == HAL_OK)
 8001ff8:	4838      	ldr	r0, [pc, #224]	@ (80020dc <TaskTX+0xf0>)
 8001ffa:	f7fe f8a9 	bl	8000150 <strlen>
 8001ffe:	4603      	mov	r3, r0
 8002000:	b29a      	uxth	r2, r3
 8002002:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002006:	4935      	ldr	r1, [pc, #212]	@ (80020dc <TaskTX+0xf0>)
 8002008:	4835      	ldr	r0, [pc, #212]	@ (80020e0 <TaskTX+0xf4>)
 800200a:	f003 f8af 	bl	800516c <HAL_UART_Transmit>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d15b      	bne.n	80020cc <TaskTX+0xe0>
		  {
		  	  memset((void*)send_to_rs485, 0, sizeof(send_to_rs485));
 8002014:	2232      	movs	r2, #50	@ 0x32
 8002016:	2100      	movs	r1, #0
 8002018:	4830      	ldr	r0, [pc, #192]	@ (80020dc <TaskTX+0xf0>)
 800201a:	f004 f932 	bl	8006282 <memset>
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800201e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002022:	4830      	ldr	r0, [pc, #192]	@ (80020e4 <TaskTX+0xf8>)
 8002024:	f000 fef0 	bl	8002e08 <HAL_GPIO_TogglePin>
 8002028:	e050      	b.n	80020cc <TaskTX+0xe0>
		  }
	}
	else if(last_send == 1)
 800202a:	4b2f      	ldr	r3, [pc, #188]	@ (80020e8 <TaskTX+0xfc>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d126      	bne.n	8002080 <TaskTX+0x94>
	{
		  last_send = 1 - last_send;
 8002032:	4b2d      	ldr	r3, [pc, #180]	@ (80020e8 <TaskTX+0xfc>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	f1c3 0301 	rsb	r3, r3, #1
 800203a:	b2da      	uxtb	r2, r3
 800203c:	4b2a      	ldr	r3, [pc, #168]	@ (80020e8 <TaskTX+0xfc>)
 800203e:	701a      	strb	r2, [r3, #0]
		  memset((void*)send_to_rs485,0,sizeof(send_to_rs485));
 8002040:	2232      	movs	r2, #50	@ 0x32
 8002042:	2100      	movs	r1, #0
 8002044:	4825      	ldr	r0, [pc, #148]	@ (80020dc <TaskTX+0xf0>)
 8002046:	f004 f91c 	bl	8006282 <memset>
		  sprintf(send_to_rs485, "%.1fC", temperature);
 800204a:	4b28      	ldr	r3, [pc, #160]	@ (80020ec <TaskTX+0x100>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f7fe f9ea 	bl	8000428 <__aeabi_f2d>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	4925      	ldr	r1, [pc, #148]	@ (80020f0 <TaskTX+0x104>)
 800205a:	4820      	ldr	r0, [pc, #128]	@ (80020dc <TaskTX+0xf0>)
 800205c:	f004 f894 	bl	8006188 <siprintf>
		  gen_data_send_rs485(UPGRADE(CODE_TEMP),send_to_rs485);
 8002060:	491e      	ldr	r1, [pc, #120]	@ (80020dc <TaskTX+0xf0>)
 8002062:	2080      	movs	r0, #128	@ 0x80
 8002064:	f7ff fd02 	bl	8001a6c <gen_data_send_rs485>
		  HAL_UART_Transmit(&huart1, (uint8_t *)&send_to_rs485, strlen(send_to_rs485) , 1000);
 8002068:	481c      	ldr	r0, [pc, #112]	@ (80020dc <TaskTX+0xf0>)
 800206a:	f7fe f871 	bl	8000150 <strlen>
 800206e:	4603      	mov	r3, r0
 8002070:	b29a      	uxth	r2, r3
 8002072:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002076:	4919      	ldr	r1, [pc, #100]	@ (80020dc <TaskTX+0xf0>)
 8002078:	4819      	ldr	r0, [pc, #100]	@ (80020e0 <TaskTX+0xf4>)
 800207a:	f003 f877 	bl	800516c <HAL_UART_Transmit>
 800207e:	e025      	b.n	80020cc <TaskTX+0xe0>
	}
	else if(last_send == 0)
 8002080:	4b19      	ldr	r3, [pc, #100]	@ (80020e8 <TaskTX+0xfc>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d121      	bne.n	80020cc <TaskTX+0xe0>
	{
	      last_send = 1 - last_send;
 8002088:	4b17      	ldr	r3, [pc, #92]	@ (80020e8 <TaskTX+0xfc>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	f1c3 0301 	rsb	r3, r3, #1
 8002090:	b2da      	uxtb	r2, r3
 8002092:	4b15      	ldr	r3, [pc, #84]	@ (80020e8 <TaskTX+0xfc>)
 8002094:	701a      	strb	r2, [r3, #0]
		  memset((void*)send_to_rs485, 0, sizeof(send_to_rs485));
 8002096:	2232      	movs	r2, #50	@ 0x32
 8002098:	2100      	movs	r1, #0
 800209a:	4810      	ldr	r0, [pc, #64]	@ (80020dc <TaskTX+0xf0>)
 800209c:	f004 f8f1 	bl	8006282 <memset>
		  sprintf(send_to_rs485, "%dPa", (int) pressure);
 80020a0:	4b14      	ldr	r3, [pc, #80]	@ (80020f4 <TaskTX+0x108>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	4914      	ldr	r1, [pc, #80]	@ (80020f8 <TaskTX+0x10c>)
 80020a8:	480c      	ldr	r0, [pc, #48]	@ (80020dc <TaskTX+0xf0>)
 80020aa:	f004 f86d 	bl	8006188 <siprintf>
		  gen_data_send_rs485(UPGRADE(CODE_PRES),send_to_rs485);
 80020ae:	490b      	ldr	r1, [pc, #44]	@ (80020dc <TaskTX+0xf0>)
 80020b0:	2081      	movs	r0, #129	@ 0x81
 80020b2:	f7ff fcdb 	bl	8001a6c <gen_data_send_rs485>
		  HAL_UART_Transmit(&huart1, (uint8_t *)&send_to_rs485, strlen(send_to_rs485) , 1000);
 80020b6:	4809      	ldr	r0, [pc, #36]	@ (80020dc <TaskTX+0xf0>)
 80020b8:	f7fe f84a 	bl	8000150 <strlen>
 80020bc:	4603      	mov	r3, r0
 80020be:	b29a      	uxth	r2, r3
 80020c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020c4:	4905      	ldr	r1, [pc, #20]	@ (80020dc <TaskTX+0xf0>)
 80020c6:	4806      	ldr	r0, [pc, #24]	@ (80020e0 <TaskTX+0xf4>)
 80020c8:	f003 f850 	bl	800516c <HAL_UART_Transmit>
	}
	memset((void*)send_to_rs485, 0, sizeof(send_to_rs485));
 80020cc:	2232      	movs	r2, #50	@ 0x32
 80020ce:	2100      	movs	r1, #0
 80020d0:	4802      	ldr	r0, [pc, #8]	@ (80020dc <TaskTX+0xf0>)
 80020d2:	f004 f8d6 	bl	8006282 <memset>
}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	2000036c 	.word	0x2000036c
 80020e0:	200002e4 	.word	0x200002e4
 80020e4:	40011000 	.word	0x40011000
 80020e8:	200003f1 	.word	0x200003f1
 80020ec:	200003e8 	.word	0x200003e8
 80020f0:	08008470 	.word	0x08008470
 80020f4:	200003ec 	.word	0x200003ec
 80020f8:	08008478 	.word	0x08008478

080020fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002102:	f000 fb51 	bl	80027a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002106:	f000 f841 	bl	800218c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800210a:	f000 f8dd 	bl	80022c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800210e:	f000 f883 	bl	8002218 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002112:	f000 f8af 	bl	8002274 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init(2);
 8002116:	2002      	movs	r0, #2
 8002118:	f7ff f8b2 	bl	8001280 <HD44780_Init>
  MPR121_Init();
 800211c:	f7fe fd04 	bl	8000b28 <MPR121_Init>
  BMP180_Init(&hi2c1);
 8002120:	4816      	ldr	r0, [pc, #88]	@ (800217c <main+0x80>)
 8002122:	f7fe fdef 	bl	8000d04 <BMP180_Init>
  MPR121_Init();
 8002126:	f7fe fcff 	bl	8000b28 <MPR121_Init>
  BMP180_SetOversampling(BMP180_ULTRA);
 800212a:	2003      	movs	r0, #3
 800212c:	f7fe fdf8 	bl	8000d20 <BMP180_SetOversampling>
  BMP180_UpdateCalibrationData();
 8002130:	f7fe fe06 	bl	8000d40 <BMP180_UpdateCalibrationData>
  HD44780_SetCursor(0,0);
 8002134:	2100      	movs	r1, #0
 8002136:	2000      	movs	r0, #0
 8002138:	f7ff f93c 	bl	80013b4 <HD44780_SetCursor>
  HD44780_PrintStr("INIT LCD 1602");
 800213c:	4810      	ldr	r0, [pc, #64]	@ (8002180 <main+0x84>)
 800213e:	f7ff f9aa 	bl	8001496 <HD44780_PrintStr>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  TaskMPR121();
 8002142:	f7ff fd0b 	bl	8001b5c <TaskMPR121>
	  TaskTempBMP180();
 8002146:	f7ff fdcd 	bl	8001ce4 <TaskTempBMP180>
	  TaskPressBMP180();
 800214a:	f7ff fdd7 	bl	8001cfc <TaskPressBMP180>
	  TaskLCD();
 800214e:	f7ff fde1 	bl	8001d14 <TaskLCD>
	  unsigned long t1 = DWT->CYCCNT;
 8002152:	4b0c      	ldr	r3, [pc, #48]	@ (8002184 <main+0x88>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	60fb      	str	r3, [r7, #12]
	  TaskRX();
 8002158:	f7ff fe2a 	bl	8001db0 <TaskRX>
	  unsigned long t2 = DWT->CYCCNT;
 800215c:	4b09      	ldr	r3, [pc, #36]	@ (8002184 <main+0x88>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	60bb      	str	r3, [r7, #8]
	  TaskTX();
 8002162:	f7ff ff43 	bl	8001fec <TaskTX>
	  unsigned long diff = (t2 - t1)/72;
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	4a06      	ldr	r2, [pc, #24]	@ (8002188 <main+0x8c>)
 800216e:	fba2 2303 	umull	r2, r3, r2, r3
 8002172:	091b      	lsrs	r3, r3, #4
 8002174:	607b      	str	r3, [r7, #4]
  {
 8002176:	bf00      	nop
 8002178:	e7e3      	b.n	8002142 <main+0x46>
 800217a:	bf00      	nop
 800217c:	20000290 	.word	0x20000290
 8002180:	0800848c 	.word	0x0800848c
 8002184:	e0001000 	.word	0xe0001000
 8002188:	38e38e39 	.word	0x38e38e39

0800218c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b090      	sub	sp, #64	@ 0x40
 8002190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002192:	f107 0318 	add.w	r3, r7, #24
 8002196:	2228      	movs	r2, #40	@ 0x28
 8002198:	2100      	movs	r1, #0
 800219a:	4618      	mov	r0, r3
 800219c:	f004 f871 	bl	8006282 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021a0:	1d3b      	adds	r3, r7, #4
 80021a2:	2200      	movs	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	605a      	str	r2, [r3, #4]
 80021a8:	609a      	str	r2, [r3, #8]
 80021aa:	60da      	str	r2, [r3, #12]
 80021ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021ae:	2301      	movs	r3, #1
 80021b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80021b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80021b8:	2300      	movs	r3, #0
 80021ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021bc:	2301      	movs	r3, #1
 80021be:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021c0:	2302      	movs	r3, #2
 80021c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80021c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80021ca:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80021ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021d0:	f107 0318 	add.w	r3, r7, #24
 80021d4:	4618      	mov	r0, r3
 80021d6:	f002 fb69 	bl	80048ac <HAL_RCC_OscConfig>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80021e0:	f000 f900 	bl	80023e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021e4:	230f      	movs	r3, #15
 80021e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021e8:	2302      	movs	r3, #2
 80021ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021ec:	2300      	movs	r3, #0
 80021ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80021fa:	1d3b      	adds	r3, r7, #4
 80021fc:	2102      	movs	r1, #2
 80021fe:	4618      	mov	r0, r3
 8002200:	f002 fdd6 	bl	8004db0 <HAL_RCC_ClockConfig>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800220a:	f000 f8eb 	bl	80023e4 <Error_Handler>
  }
}
 800220e:	bf00      	nop
 8002210:	3740      	adds	r7, #64	@ 0x40
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
	...

08002218 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800221c:	4b12      	ldr	r3, [pc, #72]	@ (8002268 <MX_I2C1_Init+0x50>)
 800221e:	4a13      	ldr	r2, [pc, #76]	@ (800226c <MX_I2C1_Init+0x54>)
 8002220:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002222:	4b11      	ldr	r3, [pc, #68]	@ (8002268 <MX_I2C1_Init+0x50>)
 8002224:	4a12      	ldr	r2, [pc, #72]	@ (8002270 <MX_I2C1_Init+0x58>)
 8002226:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002228:	4b0f      	ldr	r3, [pc, #60]	@ (8002268 <MX_I2C1_Init+0x50>)
 800222a:	2200      	movs	r2, #0
 800222c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800222e:	4b0e      	ldr	r3, [pc, #56]	@ (8002268 <MX_I2C1_Init+0x50>)
 8002230:	2200      	movs	r2, #0
 8002232:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002234:	4b0c      	ldr	r3, [pc, #48]	@ (8002268 <MX_I2C1_Init+0x50>)
 8002236:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800223a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800223c:	4b0a      	ldr	r3, [pc, #40]	@ (8002268 <MX_I2C1_Init+0x50>)
 800223e:	2200      	movs	r2, #0
 8002240:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002242:	4b09      	ldr	r3, [pc, #36]	@ (8002268 <MX_I2C1_Init+0x50>)
 8002244:	2200      	movs	r2, #0
 8002246:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002248:	4b07      	ldr	r3, [pc, #28]	@ (8002268 <MX_I2C1_Init+0x50>)
 800224a:	2200      	movs	r2, #0
 800224c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800224e:	4b06      	ldr	r3, [pc, #24]	@ (8002268 <MX_I2C1_Init+0x50>)
 8002250:	2200      	movs	r2, #0
 8002252:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002254:	4804      	ldr	r0, [pc, #16]	@ (8002268 <MX_I2C1_Init+0x50>)
 8002256:	f000 fe09 	bl	8002e6c <HAL_I2C_Init>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002260:	f000 f8c0 	bl	80023e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002264:	bf00      	nop
 8002266:	bd80      	pop	{r7, pc}
 8002268:	20000290 	.word	0x20000290
 800226c:	40005400 	.word	0x40005400
 8002270:	000186a0 	.word	0x000186a0

08002274 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002278:	4b11      	ldr	r3, [pc, #68]	@ (80022c0 <MX_USART1_UART_Init+0x4c>)
 800227a:	4a12      	ldr	r2, [pc, #72]	@ (80022c4 <MX_USART1_UART_Init+0x50>)
 800227c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800227e:	4b10      	ldr	r3, [pc, #64]	@ (80022c0 <MX_USART1_UART_Init+0x4c>)
 8002280:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002284:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002286:	4b0e      	ldr	r3, [pc, #56]	@ (80022c0 <MX_USART1_UART_Init+0x4c>)
 8002288:	2200      	movs	r2, #0
 800228a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800228c:	4b0c      	ldr	r3, [pc, #48]	@ (80022c0 <MX_USART1_UART_Init+0x4c>)
 800228e:	2200      	movs	r2, #0
 8002290:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002292:	4b0b      	ldr	r3, [pc, #44]	@ (80022c0 <MX_USART1_UART_Init+0x4c>)
 8002294:	2200      	movs	r2, #0
 8002296:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002298:	4b09      	ldr	r3, [pc, #36]	@ (80022c0 <MX_USART1_UART_Init+0x4c>)
 800229a:	220c      	movs	r2, #12
 800229c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800229e:	4b08      	ldr	r3, [pc, #32]	@ (80022c0 <MX_USART1_UART_Init+0x4c>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022a4:	4b06      	ldr	r3, [pc, #24]	@ (80022c0 <MX_USART1_UART_Init+0x4c>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022aa:	4805      	ldr	r0, [pc, #20]	@ (80022c0 <MX_USART1_UART_Init+0x4c>)
 80022ac:	f002 ff0e 	bl	80050cc <HAL_UART_Init>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80022b6:	f000 f895 	bl	80023e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	200002e4 	.word	0x200002e4
 80022c4:	40013800 	.word	0x40013800

080022c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b088      	sub	sp, #32
 80022cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ce:	f107 0310 	add.w	r3, r7, #16
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	605a      	str	r2, [r3, #4]
 80022d8:	609a      	str	r2, [r3, #8]
 80022da:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022dc:	4b2e      	ldr	r3, [pc, #184]	@ (8002398 <MX_GPIO_Init+0xd0>)
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	4a2d      	ldr	r2, [pc, #180]	@ (8002398 <MX_GPIO_Init+0xd0>)
 80022e2:	f043 0310 	orr.w	r3, r3, #16
 80022e6:	6193      	str	r3, [r2, #24]
 80022e8:	4b2b      	ldr	r3, [pc, #172]	@ (8002398 <MX_GPIO_Init+0xd0>)
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	f003 0310 	and.w	r3, r3, #16
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022f4:	4b28      	ldr	r3, [pc, #160]	@ (8002398 <MX_GPIO_Init+0xd0>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	4a27      	ldr	r2, [pc, #156]	@ (8002398 <MX_GPIO_Init+0xd0>)
 80022fa:	f043 0320 	orr.w	r3, r3, #32
 80022fe:	6193      	str	r3, [r2, #24]
 8002300:	4b25      	ldr	r3, [pc, #148]	@ (8002398 <MX_GPIO_Init+0xd0>)
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	f003 0320 	and.w	r3, r3, #32
 8002308:	60bb      	str	r3, [r7, #8]
 800230a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800230c:	4b22      	ldr	r3, [pc, #136]	@ (8002398 <MX_GPIO_Init+0xd0>)
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	4a21      	ldr	r2, [pc, #132]	@ (8002398 <MX_GPIO_Init+0xd0>)
 8002312:	f043 0304 	orr.w	r3, r3, #4
 8002316:	6193      	str	r3, [r2, #24]
 8002318:	4b1f      	ldr	r3, [pc, #124]	@ (8002398 <MX_GPIO_Init+0xd0>)
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	607b      	str	r3, [r7, #4]
 8002322:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002324:	4b1c      	ldr	r3, [pc, #112]	@ (8002398 <MX_GPIO_Init+0xd0>)
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	4a1b      	ldr	r2, [pc, #108]	@ (8002398 <MX_GPIO_Init+0xd0>)
 800232a:	f043 0308 	orr.w	r3, r3, #8
 800232e:	6193      	str	r3, [r2, #24]
 8002330:	4b19      	ldr	r3, [pc, #100]	@ (8002398 <MX_GPIO_Init+0xd0>)
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	f003 0308 	and.w	r3, r3, #8
 8002338:	603b      	str	r3, [r7, #0]
 800233a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800233c:	2200      	movs	r2, #0
 800233e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002342:	4816      	ldr	r0, [pc, #88]	@ (800239c <MX_GPIO_Init+0xd4>)
 8002344:	f000 fd48 	bl	8002dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002348:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800234c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800234e:	2301      	movs	r3, #1
 8002350:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002352:	2300      	movs	r3, #0
 8002354:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002356:	2302      	movs	r3, #2
 8002358:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800235a:	f107 0310 	add.w	r3, r7, #16
 800235e:	4619      	mov	r1, r3
 8002360:	480e      	ldr	r0, [pc, #56]	@ (800239c <MX_GPIO_Init+0xd4>)
 8002362:	f000 fbb5 	bl	8002ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
 8002366:	2320      	movs	r3, #32
 8002368:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800236a:	4b0d      	ldr	r3, [pc, #52]	@ (80023a0 <MX_GPIO_Init+0xd8>)
 800236c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800236e:	2301      	movs	r3, #1
 8002370:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8002372:	f107 0310 	add.w	r3, r7, #16
 8002376:	4619      	mov	r1, r3
 8002378:	480a      	ldr	r0, [pc, #40]	@ (80023a4 <MX_GPIO_Init+0xdc>)
 800237a:	f000 fba9 	bl	8002ad0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800237e:	2200      	movs	r2, #0
 8002380:	2100      	movs	r1, #0
 8002382:	2017      	movs	r0, #23
 8002384:	f000 fb6d 	bl	8002a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002388:	2017      	movs	r0, #23
 800238a:	f000 fb86 	bl	8002a9a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800238e:	bf00      	nop
 8002390:	3720      	adds	r7, #32
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40021000 	.word	0x40021000
 800239c:	40011000 	.word	0x40011000
 80023a0:	10110000 	.word	0x10110000
 80023a4:	40010c00 	.word	0x40010c00

080023a8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == INT_Pin) {
 80023b2:	88fb      	ldrh	r3, [r7, #6]
 80023b4:	2b20      	cmp	r3, #32
 80023b6:	d10b      	bne.n	80023d0 <HAL_GPIO_EXTI_Callback+0x28>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80023b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80023bc:	4807      	ldr	r0, [pc, #28]	@ (80023dc <HAL_GPIO_EXTI_Callback+0x34>)
 80023be:	f000 fd23 	bl	8002e08 <HAL_GPIO_TogglePin>
		count_touch++;
 80023c2:	4b07      	ldr	r3, [pc, #28]	@ (80023e0 <HAL_GPIO_EXTI_Callback+0x38>)
 80023c4:	881b      	ldrh	r3, [r3, #0]
 80023c6:	3301      	adds	r3, #1
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	4b05      	ldr	r3, [pc, #20]	@ (80023e0 <HAL_GPIO_EXTI_Callback+0x38>)
 80023cc:	801a      	strh	r2, [r3, #0]
	} else {
		__NOP();
	}
}
 80023ce:	e000      	b.n	80023d2 <HAL_GPIO_EXTI_Callback+0x2a>
		__NOP();
 80023d0:	bf00      	nop
}
 80023d2:	bf00      	nop
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40011000 	.word	0x40011000
 80023e0:	200003f6 	.word	0x200003f6

080023e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023e8:	b672      	cpsid	i
}
 80023ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023ec:	bf00      	nop
 80023ee:	e7fd      	b.n	80023ec <Error_Handler+0x8>

080023f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80023f6:	4b15      	ldr	r3, [pc, #84]	@ (800244c <HAL_MspInit+0x5c>)
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	4a14      	ldr	r2, [pc, #80]	@ (800244c <HAL_MspInit+0x5c>)
 80023fc:	f043 0301 	orr.w	r3, r3, #1
 8002400:	6193      	str	r3, [r2, #24]
 8002402:	4b12      	ldr	r3, [pc, #72]	@ (800244c <HAL_MspInit+0x5c>)
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	60bb      	str	r3, [r7, #8]
 800240c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800240e:	4b0f      	ldr	r3, [pc, #60]	@ (800244c <HAL_MspInit+0x5c>)
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	4a0e      	ldr	r2, [pc, #56]	@ (800244c <HAL_MspInit+0x5c>)
 8002414:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002418:	61d3      	str	r3, [r2, #28]
 800241a:	4b0c      	ldr	r3, [pc, #48]	@ (800244c <HAL_MspInit+0x5c>)
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002422:	607b      	str	r3, [r7, #4]
 8002424:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002426:	4b0a      	ldr	r3, [pc, #40]	@ (8002450 <HAL_MspInit+0x60>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	60fb      	str	r3, [r7, #12]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	4a04      	ldr	r2, [pc, #16]	@ (8002450 <HAL_MspInit+0x60>)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002442:	bf00      	nop
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr
 800244c:	40021000 	.word	0x40021000
 8002450:	40010000 	.word	0x40010000

08002454 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b088      	sub	sp, #32
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800245c:	f107 0310 	add.w	r3, r7, #16
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	605a      	str	r2, [r3, #4]
 8002466:	609a      	str	r2, [r3, #8]
 8002468:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a15      	ldr	r2, [pc, #84]	@ (80024c4 <HAL_I2C_MspInit+0x70>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d123      	bne.n	80024bc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002474:	4b14      	ldr	r3, [pc, #80]	@ (80024c8 <HAL_I2C_MspInit+0x74>)
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	4a13      	ldr	r2, [pc, #76]	@ (80024c8 <HAL_I2C_MspInit+0x74>)
 800247a:	f043 0308 	orr.w	r3, r3, #8
 800247e:	6193      	str	r3, [r2, #24]
 8002480:	4b11      	ldr	r3, [pc, #68]	@ (80024c8 <HAL_I2C_MspInit+0x74>)
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	f003 0308 	and.w	r3, r3, #8
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800248c:	23c0      	movs	r3, #192	@ 0xc0
 800248e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002490:	2312      	movs	r3, #18
 8002492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002494:	2303      	movs	r3, #3
 8002496:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002498:	f107 0310 	add.w	r3, r7, #16
 800249c:	4619      	mov	r1, r3
 800249e:	480b      	ldr	r0, [pc, #44]	@ (80024cc <HAL_I2C_MspInit+0x78>)
 80024a0:	f000 fb16 	bl	8002ad0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024a4:	4b08      	ldr	r3, [pc, #32]	@ (80024c8 <HAL_I2C_MspInit+0x74>)
 80024a6:	69db      	ldr	r3, [r3, #28]
 80024a8:	4a07      	ldr	r2, [pc, #28]	@ (80024c8 <HAL_I2C_MspInit+0x74>)
 80024aa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80024ae:	61d3      	str	r3, [r2, #28]
 80024b0:	4b05      	ldr	r3, [pc, #20]	@ (80024c8 <HAL_I2C_MspInit+0x74>)
 80024b2:	69db      	ldr	r3, [r3, #28]
 80024b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024b8:	60bb      	str	r3, [r7, #8]
 80024ba:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80024bc:	bf00      	nop
 80024be:	3720      	adds	r7, #32
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40005400 	.word	0x40005400
 80024c8:	40021000 	.word	0x40021000
 80024cc:	40010c00 	.word	0x40010c00

080024d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b088      	sub	sp, #32
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d8:	f107 0310 	add.w	r3, r7, #16
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	605a      	str	r2, [r3, #4]
 80024e2:	609a      	str	r2, [r3, #8]
 80024e4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a1c      	ldr	r2, [pc, #112]	@ (800255c <HAL_UART_MspInit+0x8c>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d131      	bne.n	8002554 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002560 <HAL_UART_MspInit+0x90>)
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	4a1a      	ldr	r2, [pc, #104]	@ (8002560 <HAL_UART_MspInit+0x90>)
 80024f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024fa:	6193      	str	r3, [r2, #24]
 80024fc:	4b18      	ldr	r3, [pc, #96]	@ (8002560 <HAL_UART_MspInit+0x90>)
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002508:	4b15      	ldr	r3, [pc, #84]	@ (8002560 <HAL_UART_MspInit+0x90>)
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	4a14      	ldr	r2, [pc, #80]	@ (8002560 <HAL_UART_MspInit+0x90>)
 800250e:	f043 0304 	orr.w	r3, r3, #4
 8002512:	6193      	str	r3, [r2, #24]
 8002514:	4b12      	ldr	r3, [pc, #72]	@ (8002560 <HAL_UART_MspInit+0x90>)
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	60bb      	str	r3, [r7, #8]
 800251e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002520:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002524:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002526:	2302      	movs	r3, #2
 8002528:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800252a:	2303      	movs	r3, #3
 800252c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800252e:	f107 0310 	add.w	r3, r7, #16
 8002532:	4619      	mov	r1, r3
 8002534:	480b      	ldr	r0, [pc, #44]	@ (8002564 <HAL_UART_MspInit+0x94>)
 8002536:	f000 facb 	bl	8002ad0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800253a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800253e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002544:	2300      	movs	r3, #0
 8002546:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002548:	f107 0310 	add.w	r3, r7, #16
 800254c:	4619      	mov	r1, r3
 800254e:	4805      	ldr	r0, [pc, #20]	@ (8002564 <HAL_UART_MspInit+0x94>)
 8002550:	f000 fabe 	bl	8002ad0 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002554:	bf00      	nop
 8002556:	3720      	adds	r7, #32
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40013800 	.word	0x40013800
 8002560:	40021000 	.word	0x40021000
 8002564:	40010800 	.word	0x40010800

08002568 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800256c:	bf00      	nop
 800256e:	e7fd      	b.n	800256c <NMI_Handler+0x4>

08002570 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002574:	bf00      	nop
 8002576:	e7fd      	b.n	8002574 <HardFault_Handler+0x4>

08002578 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800257c:	bf00      	nop
 800257e:	e7fd      	b.n	800257c <MemManage_Handler+0x4>

08002580 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002584:	bf00      	nop
 8002586:	e7fd      	b.n	8002584 <BusFault_Handler+0x4>

08002588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800258c:	bf00      	nop
 800258e:	e7fd      	b.n	800258c <UsageFault_Handler+0x4>

08002590 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002594:	bf00      	nop
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr

0800259c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025a0:	bf00      	nop
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr

080025a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025ac:	bf00      	nop
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr

080025b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025b8:	f000 f93c 	bl	8002834 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025bc:	bf00      	nop
 80025be:	bd80      	pop	{r7, pc}

080025c0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_Pin);
 80025c4:	2020      	movs	r0, #32
 80025c6:	f000 fc39 	bl	8002e3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}

080025ce <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025ce:	b480      	push	{r7}
 80025d0:	af00      	add	r7, sp, #0
  return 1;
 80025d2:	2301      	movs	r3, #1
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr

080025dc <_kill>:

int _kill(int pid, int sig)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80025e6:	f003 feb1 	bl	800634c <__errno>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2216      	movs	r2, #22
 80025ee:	601a      	str	r2, [r3, #0]
  return -1;
 80025f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <_exit>:

void _exit (int status)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002604:	f04f 31ff 	mov.w	r1, #4294967295
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f7ff ffe7 	bl	80025dc <_kill>
  while (1) {}    /* Make sure we hang here */
 800260e:	bf00      	nop
 8002610:	e7fd      	b.n	800260e <_exit+0x12>

08002612 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b086      	sub	sp, #24
 8002616:	af00      	add	r7, sp, #0
 8002618:	60f8      	str	r0, [r7, #12]
 800261a:	60b9      	str	r1, [r7, #8]
 800261c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800261e:	2300      	movs	r3, #0
 8002620:	617b      	str	r3, [r7, #20]
 8002622:	e00a      	b.n	800263a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002624:	f3af 8000 	nop.w
 8002628:	4601      	mov	r1, r0
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	1c5a      	adds	r2, r3, #1
 800262e:	60ba      	str	r2, [r7, #8]
 8002630:	b2ca      	uxtb	r2, r1
 8002632:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	3301      	adds	r3, #1
 8002638:	617b      	str	r3, [r7, #20]
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	429a      	cmp	r2, r3
 8002640:	dbf0      	blt.n	8002624 <_read+0x12>
  }

  return len;
 8002642:	687b      	ldr	r3, [r7, #4]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]
 800265c:	e009      	b.n	8002672 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	1c5a      	adds	r2, r3, #1
 8002662:	60ba      	str	r2, [r7, #8]
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	3301      	adds	r3, #1
 8002670:	617b      	str	r3, [r7, #20]
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	429a      	cmp	r2, r3
 8002678:	dbf1      	blt.n	800265e <_write+0x12>
  }
  return len;
 800267a:	687b      	ldr	r3, [r7, #4]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <_close>:

int _close(int file)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800268c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002690:	4618      	mov	r0, r3
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	bc80      	pop	{r7}
 8002698:	4770      	bx	lr

0800269a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800269a:	b480      	push	{r7}
 800269c:	b083      	sub	sp, #12
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
 80026a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026aa:	605a      	str	r2, [r3, #4]
  return 0;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr

080026b8 <_isatty>:

int _isatty(int file)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026c0:	2301      	movs	r3, #1
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bc80      	pop	{r7}
 80026ca:	4770      	bx	lr

080026cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3714      	adds	r7, #20
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr

080026e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026ec:	4a14      	ldr	r2, [pc, #80]	@ (8002740 <_sbrk+0x5c>)
 80026ee:	4b15      	ldr	r3, [pc, #84]	@ (8002744 <_sbrk+0x60>)
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026f8:	4b13      	ldr	r3, [pc, #76]	@ (8002748 <_sbrk+0x64>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d102      	bne.n	8002706 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002700:	4b11      	ldr	r3, [pc, #68]	@ (8002748 <_sbrk+0x64>)
 8002702:	4a12      	ldr	r2, [pc, #72]	@ (800274c <_sbrk+0x68>)
 8002704:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002706:	4b10      	ldr	r3, [pc, #64]	@ (8002748 <_sbrk+0x64>)
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4413      	add	r3, r2
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	429a      	cmp	r2, r3
 8002712:	d207      	bcs.n	8002724 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002714:	f003 fe1a 	bl	800634c <__errno>
 8002718:	4603      	mov	r3, r0
 800271a:	220c      	movs	r2, #12
 800271c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800271e:	f04f 33ff 	mov.w	r3, #4294967295
 8002722:	e009      	b.n	8002738 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002724:	4b08      	ldr	r3, [pc, #32]	@ (8002748 <_sbrk+0x64>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800272a:	4b07      	ldr	r3, [pc, #28]	@ (8002748 <_sbrk+0x64>)
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4413      	add	r3, r2
 8002732:	4a05      	ldr	r2, [pc, #20]	@ (8002748 <_sbrk+0x64>)
 8002734:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002736:	68fb      	ldr	r3, [r7, #12]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	20005000 	.word	0x20005000
 8002744:	00000400 	.word	0x00000400
 8002748:	200003f8 	.word	0x200003f8
 800274c:	20000550 	.word	0x20000550

08002750 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002754:	bf00      	nop
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr

0800275c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800275c:	f7ff fff8 	bl	8002750 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002760:	480b      	ldr	r0, [pc, #44]	@ (8002790 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002762:	490c      	ldr	r1, [pc, #48]	@ (8002794 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002764:	4a0c      	ldr	r2, [pc, #48]	@ (8002798 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002768:	e002      	b.n	8002770 <LoopCopyDataInit>

0800276a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800276a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800276c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800276e:	3304      	adds	r3, #4

08002770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002774:	d3f9      	bcc.n	800276a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002776:	4a09      	ldr	r2, [pc, #36]	@ (800279c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002778:	4c09      	ldr	r4, [pc, #36]	@ (80027a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800277a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800277c:	e001      	b.n	8002782 <LoopFillZerobss>

0800277e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800277e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002780:	3204      	adds	r2, #4

08002782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002784:	d3fb      	bcc.n	800277e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002786:	f003 fde7 	bl	8006358 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800278a:	f7ff fcb7 	bl	80020fc <main>
  bx lr
 800278e:	4770      	bx	lr
  ldr r0, =_sdata
 8002790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002794:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 8002798:	08008850 	.word	0x08008850
  ldr r2, =_sbss
 800279c:	20000254 	.word	0x20000254
  ldr r4, =_ebss
 80027a0:	2000054c 	.word	0x2000054c

080027a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027a4:	e7fe      	b.n	80027a4 <ADC1_2_IRQHandler>
	...

080027a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027ac:	4b08      	ldr	r3, [pc, #32]	@ (80027d0 <HAL_Init+0x28>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a07      	ldr	r2, [pc, #28]	@ (80027d0 <HAL_Init+0x28>)
 80027b2:	f043 0310 	orr.w	r3, r3, #16
 80027b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027b8:	2003      	movs	r0, #3
 80027ba:	f000 f947 	bl	8002a4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027be:	200f      	movs	r0, #15
 80027c0:	f000 f808 	bl	80027d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027c4:	f7ff fe14 	bl	80023f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40022000 	.word	0x40022000

080027d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027dc:	4b12      	ldr	r3, [pc, #72]	@ (8002828 <HAL_InitTick+0x54>)
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	4b12      	ldr	r3, [pc, #72]	@ (800282c <HAL_InitTick+0x58>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	4619      	mov	r1, r3
 80027e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80027ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f2:	4618      	mov	r0, r3
 80027f4:	f000 f95f 	bl	8002ab6 <HAL_SYSTICK_Config>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e00e      	b.n	8002820 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b0f      	cmp	r3, #15
 8002806:	d80a      	bhi.n	800281e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002808:	2200      	movs	r2, #0
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	f04f 30ff 	mov.w	r0, #4294967295
 8002810:	f000 f927 	bl	8002a62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002814:	4a06      	ldr	r2, [pc, #24]	@ (8002830 <HAL_InitTick+0x5c>)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800281a:	2300      	movs	r3, #0
 800281c:	e000      	b.n	8002820 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
}
 8002820:	4618      	mov	r0, r3
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	20000080 	.word	0x20000080
 800282c:	20000088 	.word	0x20000088
 8002830:	20000084 	.word	0x20000084

08002834 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002838:	4b05      	ldr	r3, [pc, #20]	@ (8002850 <HAL_IncTick+0x1c>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	461a      	mov	r2, r3
 800283e:	4b05      	ldr	r3, [pc, #20]	@ (8002854 <HAL_IncTick+0x20>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4413      	add	r3, r2
 8002844:	4a03      	ldr	r2, [pc, #12]	@ (8002854 <HAL_IncTick+0x20>)
 8002846:	6013      	str	r3, [r2, #0]
}
 8002848:	bf00      	nop
 800284a:	46bd      	mov	sp, r7
 800284c:	bc80      	pop	{r7}
 800284e:	4770      	bx	lr
 8002850:	20000088 	.word	0x20000088
 8002854:	200003fc 	.word	0x200003fc

08002858 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  return uwTick;
 800285c:	4b02      	ldr	r3, [pc, #8]	@ (8002868 <HAL_GetTick+0x10>)
 800285e:	681b      	ldr	r3, [r3, #0]
}
 8002860:	4618      	mov	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr
 8002868:	200003fc 	.word	0x200003fc

0800286c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002874:	f7ff fff0 	bl	8002858 <HAL_GetTick>
 8002878:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002884:	d005      	beq.n	8002892 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002886:	4b0a      	ldr	r3, [pc, #40]	@ (80028b0 <HAL_Delay+0x44>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	461a      	mov	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	4413      	add	r3, r2
 8002890:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002892:	bf00      	nop
 8002894:	f7ff ffe0 	bl	8002858 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d8f7      	bhi.n	8002894 <HAL_Delay+0x28>
  {
  }
}
 80028a4:	bf00      	nop
 80028a6:	bf00      	nop
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	20000088 	.word	0x20000088

080028b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028c4:	4b0c      	ldr	r3, [pc, #48]	@ (80028f8 <__NVIC_SetPriorityGrouping+0x44>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028d0:	4013      	ands	r3, r2
 80028d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028e6:	4a04      	ldr	r2, [pc, #16]	@ (80028f8 <__NVIC_SetPriorityGrouping+0x44>)
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	60d3      	str	r3, [r2, #12]
}
 80028ec:	bf00      	nop
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bc80      	pop	{r7}
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	e000ed00 	.word	0xe000ed00

080028fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002900:	4b04      	ldr	r3, [pc, #16]	@ (8002914 <__NVIC_GetPriorityGrouping+0x18>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	0a1b      	lsrs	r3, r3, #8
 8002906:	f003 0307 	and.w	r3, r3, #7
}
 800290a:	4618      	mov	r0, r3
 800290c:	46bd      	mov	sp, r7
 800290e:	bc80      	pop	{r7}
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	e000ed00 	.word	0xe000ed00

08002918 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002926:	2b00      	cmp	r3, #0
 8002928:	db0b      	blt.n	8002942 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800292a:	79fb      	ldrb	r3, [r7, #7]
 800292c:	f003 021f 	and.w	r2, r3, #31
 8002930:	4906      	ldr	r1, [pc, #24]	@ (800294c <__NVIC_EnableIRQ+0x34>)
 8002932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002936:	095b      	lsrs	r3, r3, #5
 8002938:	2001      	movs	r0, #1
 800293a:	fa00 f202 	lsl.w	r2, r0, r2
 800293e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	bc80      	pop	{r7}
 800294a:	4770      	bx	lr
 800294c:	e000e100 	.word	0xe000e100

08002950 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	6039      	str	r1, [r7, #0]
 800295a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800295c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002960:	2b00      	cmp	r3, #0
 8002962:	db0a      	blt.n	800297a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	b2da      	uxtb	r2, r3
 8002968:	490c      	ldr	r1, [pc, #48]	@ (800299c <__NVIC_SetPriority+0x4c>)
 800296a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296e:	0112      	lsls	r2, r2, #4
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	440b      	add	r3, r1
 8002974:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002978:	e00a      	b.n	8002990 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	b2da      	uxtb	r2, r3
 800297e:	4908      	ldr	r1, [pc, #32]	@ (80029a0 <__NVIC_SetPriority+0x50>)
 8002980:	79fb      	ldrb	r3, [r7, #7]
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	3b04      	subs	r3, #4
 8002988:	0112      	lsls	r2, r2, #4
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	440b      	add	r3, r1
 800298e:	761a      	strb	r2, [r3, #24]
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	e000e100 	.word	0xe000e100
 80029a0:	e000ed00 	.word	0xe000ed00

080029a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b089      	sub	sp, #36	@ 0x24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	f1c3 0307 	rsb	r3, r3, #7
 80029be:	2b04      	cmp	r3, #4
 80029c0:	bf28      	it	cs
 80029c2:	2304      	movcs	r3, #4
 80029c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	3304      	adds	r3, #4
 80029ca:	2b06      	cmp	r3, #6
 80029cc:	d902      	bls.n	80029d4 <NVIC_EncodePriority+0x30>
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	3b03      	subs	r3, #3
 80029d2:	e000      	b.n	80029d6 <NVIC_EncodePriority+0x32>
 80029d4:	2300      	movs	r3, #0
 80029d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d8:	f04f 32ff 	mov.w	r2, #4294967295
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	43da      	mvns	r2, r3
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	401a      	ands	r2, r3
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029ec:	f04f 31ff 	mov.w	r1, #4294967295
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	fa01 f303 	lsl.w	r3, r1, r3
 80029f6:	43d9      	mvns	r1, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029fc:	4313      	orrs	r3, r2
         );
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3724      	adds	r7, #36	@ 0x24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr

08002a08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3b01      	subs	r3, #1
 8002a14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a18:	d301      	bcc.n	8002a1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e00f      	b.n	8002a3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a1e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a48 <SysTick_Config+0x40>)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3b01      	subs	r3, #1
 8002a24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a26:	210f      	movs	r1, #15
 8002a28:	f04f 30ff 	mov.w	r0, #4294967295
 8002a2c:	f7ff ff90 	bl	8002950 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a30:	4b05      	ldr	r3, [pc, #20]	@ (8002a48 <SysTick_Config+0x40>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a36:	4b04      	ldr	r3, [pc, #16]	@ (8002a48 <SysTick_Config+0x40>)
 8002a38:	2207      	movs	r2, #7
 8002a3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	e000e010 	.word	0xe000e010

08002a4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f7ff ff2d 	bl	80028b4 <__NVIC_SetPriorityGrouping>
}
 8002a5a:	bf00      	nop
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b086      	sub	sp, #24
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	4603      	mov	r3, r0
 8002a6a:	60b9      	str	r1, [r7, #8]
 8002a6c:	607a      	str	r2, [r7, #4]
 8002a6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a74:	f7ff ff42 	bl	80028fc <__NVIC_GetPriorityGrouping>
 8002a78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	68b9      	ldr	r1, [r7, #8]
 8002a7e:	6978      	ldr	r0, [r7, #20]
 8002a80:	f7ff ff90 	bl	80029a4 <NVIC_EncodePriority>
 8002a84:	4602      	mov	r2, r0
 8002a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a8a:	4611      	mov	r1, r2
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff ff5f 	bl	8002950 <__NVIC_SetPriority>
}
 8002a92:	bf00      	nop
 8002a94:	3718      	adds	r7, #24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b082      	sub	sp, #8
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff ff35 	bl	8002918 <__NVIC_EnableIRQ>
}
 8002aae:	bf00      	nop
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b082      	sub	sp, #8
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7ff ffa2 	bl	8002a08 <SysTick_Config>
 8002ac4:	4603      	mov	r3, r0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
	...

08002ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b08b      	sub	sp, #44	@ 0x2c
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ada:	2300      	movs	r3, #0
 8002adc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ae2:	e169      	b.n	8002db8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	69fa      	ldr	r2, [r7, #28]
 8002af4:	4013      	ands	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	f040 8158 	bne.w	8002db2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	4a9a      	ldr	r2, [pc, #616]	@ (8002d70 <HAL_GPIO_Init+0x2a0>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d05e      	beq.n	8002bca <HAL_GPIO_Init+0xfa>
 8002b0c:	4a98      	ldr	r2, [pc, #608]	@ (8002d70 <HAL_GPIO_Init+0x2a0>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d875      	bhi.n	8002bfe <HAL_GPIO_Init+0x12e>
 8002b12:	4a98      	ldr	r2, [pc, #608]	@ (8002d74 <HAL_GPIO_Init+0x2a4>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d058      	beq.n	8002bca <HAL_GPIO_Init+0xfa>
 8002b18:	4a96      	ldr	r2, [pc, #600]	@ (8002d74 <HAL_GPIO_Init+0x2a4>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d86f      	bhi.n	8002bfe <HAL_GPIO_Init+0x12e>
 8002b1e:	4a96      	ldr	r2, [pc, #600]	@ (8002d78 <HAL_GPIO_Init+0x2a8>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d052      	beq.n	8002bca <HAL_GPIO_Init+0xfa>
 8002b24:	4a94      	ldr	r2, [pc, #592]	@ (8002d78 <HAL_GPIO_Init+0x2a8>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d869      	bhi.n	8002bfe <HAL_GPIO_Init+0x12e>
 8002b2a:	4a94      	ldr	r2, [pc, #592]	@ (8002d7c <HAL_GPIO_Init+0x2ac>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d04c      	beq.n	8002bca <HAL_GPIO_Init+0xfa>
 8002b30:	4a92      	ldr	r2, [pc, #584]	@ (8002d7c <HAL_GPIO_Init+0x2ac>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d863      	bhi.n	8002bfe <HAL_GPIO_Init+0x12e>
 8002b36:	4a92      	ldr	r2, [pc, #584]	@ (8002d80 <HAL_GPIO_Init+0x2b0>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d046      	beq.n	8002bca <HAL_GPIO_Init+0xfa>
 8002b3c:	4a90      	ldr	r2, [pc, #576]	@ (8002d80 <HAL_GPIO_Init+0x2b0>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d85d      	bhi.n	8002bfe <HAL_GPIO_Init+0x12e>
 8002b42:	2b12      	cmp	r3, #18
 8002b44:	d82a      	bhi.n	8002b9c <HAL_GPIO_Init+0xcc>
 8002b46:	2b12      	cmp	r3, #18
 8002b48:	d859      	bhi.n	8002bfe <HAL_GPIO_Init+0x12e>
 8002b4a:	a201      	add	r2, pc, #4	@ (adr r2, 8002b50 <HAL_GPIO_Init+0x80>)
 8002b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b50:	08002bcb 	.word	0x08002bcb
 8002b54:	08002ba5 	.word	0x08002ba5
 8002b58:	08002bb7 	.word	0x08002bb7
 8002b5c:	08002bf9 	.word	0x08002bf9
 8002b60:	08002bff 	.word	0x08002bff
 8002b64:	08002bff 	.word	0x08002bff
 8002b68:	08002bff 	.word	0x08002bff
 8002b6c:	08002bff 	.word	0x08002bff
 8002b70:	08002bff 	.word	0x08002bff
 8002b74:	08002bff 	.word	0x08002bff
 8002b78:	08002bff 	.word	0x08002bff
 8002b7c:	08002bff 	.word	0x08002bff
 8002b80:	08002bff 	.word	0x08002bff
 8002b84:	08002bff 	.word	0x08002bff
 8002b88:	08002bff 	.word	0x08002bff
 8002b8c:	08002bff 	.word	0x08002bff
 8002b90:	08002bff 	.word	0x08002bff
 8002b94:	08002bad 	.word	0x08002bad
 8002b98:	08002bc1 	.word	0x08002bc1
 8002b9c:	4a79      	ldr	r2, [pc, #484]	@ (8002d84 <HAL_GPIO_Init+0x2b4>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d013      	beq.n	8002bca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002ba2:	e02c      	b.n	8002bfe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	623b      	str	r3, [r7, #32]
          break;
 8002baa:	e029      	b.n	8002c00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	3304      	adds	r3, #4
 8002bb2:	623b      	str	r3, [r7, #32]
          break;
 8002bb4:	e024      	b.n	8002c00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	3308      	adds	r3, #8
 8002bbc:	623b      	str	r3, [r7, #32]
          break;
 8002bbe:	e01f      	b.n	8002c00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	330c      	adds	r3, #12
 8002bc6:	623b      	str	r3, [r7, #32]
          break;
 8002bc8:	e01a      	b.n	8002c00 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d102      	bne.n	8002bd8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002bd2:	2304      	movs	r3, #4
 8002bd4:	623b      	str	r3, [r7, #32]
          break;
 8002bd6:	e013      	b.n	8002c00 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d105      	bne.n	8002bec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002be0:	2308      	movs	r3, #8
 8002be2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	69fa      	ldr	r2, [r7, #28]
 8002be8:	611a      	str	r2, [r3, #16]
          break;
 8002bea:	e009      	b.n	8002c00 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bec:	2308      	movs	r3, #8
 8002bee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	69fa      	ldr	r2, [r7, #28]
 8002bf4:	615a      	str	r2, [r3, #20]
          break;
 8002bf6:	e003      	b.n	8002c00 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	623b      	str	r3, [r7, #32]
          break;
 8002bfc:	e000      	b.n	8002c00 <HAL_GPIO_Init+0x130>
          break;
 8002bfe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	2bff      	cmp	r3, #255	@ 0xff
 8002c04:	d801      	bhi.n	8002c0a <HAL_GPIO_Init+0x13a>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	e001      	b.n	8002c0e <HAL_GPIO_Init+0x13e>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	2bff      	cmp	r3, #255	@ 0xff
 8002c14:	d802      	bhi.n	8002c1c <HAL_GPIO_Init+0x14c>
 8002c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	e002      	b.n	8002c22 <HAL_GPIO_Init+0x152>
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1e:	3b08      	subs	r3, #8
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	210f      	movs	r1, #15
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	401a      	ands	r2, r3
 8002c34:	6a39      	ldr	r1, [r7, #32]
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f000 80b1 	beq.w	8002db2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c50:	4b4d      	ldr	r3, [pc, #308]	@ (8002d88 <HAL_GPIO_Init+0x2b8>)
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	4a4c      	ldr	r2, [pc, #304]	@ (8002d88 <HAL_GPIO_Init+0x2b8>)
 8002c56:	f043 0301 	orr.w	r3, r3, #1
 8002c5a:	6193      	str	r3, [r2, #24]
 8002c5c:	4b4a      	ldr	r3, [pc, #296]	@ (8002d88 <HAL_GPIO_Init+0x2b8>)
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	60bb      	str	r3, [r7, #8]
 8002c66:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c68:	4a48      	ldr	r2, [pc, #288]	@ (8002d8c <HAL_GPIO_Init+0x2bc>)
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6c:	089b      	lsrs	r3, r3, #2
 8002c6e:	3302      	adds	r3, #2
 8002c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c74:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c78:	f003 0303 	and.w	r3, r3, #3
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	220f      	movs	r2, #15
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	43db      	mvns	r3, r3
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a40      	ldr	r2, [pc, #256]	@ (8002d90 <HAL_GPIO_Init+0x2c0>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d013      	beq.n	8002cbc <HAL_GPIO_Init+0x1ec>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a3f      	ldr	r2, [pc, #252]	@ (8002d94 <HAL_GPIO_Init+0x2c4>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d00d      	beq.n	8002cb8 <HAL_GPIO_Init+0x1e8>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a3e      	ldr	r2, [pc, #248]	@ (8002d98 <HAL_GPIO_Init+0x2c8>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d007      	beq.n	8002cb4 <HAL_GPIO_Init+0x1e4>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a3d      	ldr	r2, [pc, #244]	@ (8002d9c <HAL_GPIO_Init+0x2cc>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d101      	bne.n	8002cb0 <HAL_GPIO_Init+0x1e0>
 8002cac:	2303      	movs	r3, #3
 8002cae:	e006      	b.n	8002cbe <HAL_GPIO_Init+0x1ee>
 8002cb0:	2304      	movs	r3, #4
 8002cb2:	e004      	b.n	8002cbe <HAL_GPIO_Init+0x1ee>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	e002      	b.n	8002cbe <HAL_GPIO_Init+0x1ee>
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e000      	b.n	8002cbe <HAL_GPIO_Init+0x1ee>
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cc0:	f002 0203 	and.w	r2, r2, #3
 8002cc4:	0092      	lsls	r2, r2, #2
 8002cc6:	4093      	lsls	r3, r2
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002cce:	492f      	ldr	r1, [pc, #188]	@ (8002d8c <HAL_GPIO_Init+0x2bc>)
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd2:	089b      	lsrs	r3, r3, #2
 8002cd4:	3302      	adds	r3, #2
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d006      	beq.n	8002cf6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ce8:	4b2d      	ldr	r3, [pc, #180]	@ (8002da0 <HAL_GPIO_Init+0x2d0>)
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	492c      	ldr	r1, [pc, #176]	@ (8002da0 <HAL_GPIO_Init+0x2d0>)
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	608b      	str	r3, [r1, #8]
 8002cf4:	e006      	b.n	8002d04 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002cf6:	4b2a      	ldr	r3, [pc, #168]	@ (8002da0 <HAL_GPIO_Init+0x2d0>)
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	4928      	ldr	r1, [pc, #160]	@ (8002da0 <HAL_GPIO_Init+0x2d0>)
 8002d00:	4013      	ands	r3, r2
 8002d02:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d006      	beq.n	8002d1e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d10:	4b23      	ldr	r3, [pc, #140]	@ (8002da0 <HAL_GPIO_Init+0x2d0>)
 8002d12:	68da      	ldr	r2, [r3, #12]
 8002d14:	4922      	ldr	r1, [pc, #136]	@ (8002da0 <HAL_GPIO_Init+0x2d0>)
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	60cb      	str	r3, [r1, #12]
 8002d1c:	e006      	b.n	8002d2c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d1e:	4b20      	ldr	r3, [pc, #128]	@ (8002da0 <HAL_GPIO_Init+0x2d0>)
 8002d20:	68da      	ldr	r2, [r3, #12]
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	43db      	mvns	r3, r3
 8002d26:	491e      	ldr	r1, [pc, #120]	@ (8002da0 <HAL_GPIO_Init+0x2d0>)
 8002d28:	4013      	ands	r3, r2
 8002d2a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d006      	beq.n	8002d46 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d38:	4b19      	ldr	r3, [pc, #100]	@ (8002da0 <HAL_GPIO_Init+0x2d0>)
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	4918      	ldr	r1, [pc, #96]	@ (8002da0 <HAL_GPIO_Init+0x2d0>)
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	604b      	str	r3, [r1, #4]
 8002d44:	e006      	b.n	8002d54 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d46:	4b16      	ldr	r3, [pc, #88]	@ (8002da0 <HAL_GPIO_Init+0x2d0>)
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	4914      	ldr	r1, [pc, #80]	@ (8002da0 <HAL_GPIO_Init+0x2d0>)
 8002d50:	4013      	ands	r3, r2
 8002d52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d021      	beq.n	8002da4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d60:	4b0f      	ldr	r3, [pc, #60]	@ (8002da0 <HAL_GPIO_Init+0x2d0>)
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	490e      	ldr	r1, [pc, #56]	@ (8002da0 <HAL_GPIO_Init+0x2d0>)
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	600b      	str	r3, [r1, #0]
 8002d6c:	e021      	b.n	8002db2 <HAL_GPIO_Init+0x2e2>
 8002d6e:	bf00      	nop
 8002d70:	10320000 	.word	0x10320000
 8002d74:	10310000 	.word	0x10310000
 8002d78:	10220000 	.word	0x10220000
 8002d7c:	10210000 	.word	0x10210000
 8002d80:	10120000 	.word	0x10120000
 8002d84:	10110000 	.word	0x10110000
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	40010000 	.word	0x40010000
 8002d90:	40010800 	.word	0x40010800
 8002d94:	40010c00 	.word	0x40010c00
 8002d98:	40011000 	.word	0x40011000
 8002d9c:	40011400 	.word	0x40011400
 8002da0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002da4:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd4 <HAL_GPIO_Init+0x304>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	43db      	mvns	r3, r3
 8002dac:	4909      	ldr	r1, [pc, #36]	@ (8002dd4 <HAL_GPIO_Init+0x304>)
 8002dae:	4013      	ands	r3, r2
 8002db0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db4:	3301      	adds	r3, #1
 8002db6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f47f ae8e 	bne.w	8002ae4 <HAL_GPIO_Init+0x14>
  }
}
 8002dc8:	bf00      	nop
 8002dca:	bf00      	nop
 8002dcc:	372c      	adds	r7, #44	@ 0x2c
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr
 8002dd4:	40010400 	.word	0x40010400

08002dd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	460b      	mov	r3, r1
 8002de2:	807b      	strh	r3, [r7, #2]
 8002de4:	4613      	mov	r3, r2
 8002de6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002de8:	787b      	ldrb	r3, [r7, #1]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dee:	887a      	ldrh	r2, [r7, #2]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002df4:	e003      	b.n	8002dfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002df6:	887b      	ldrh	r3, [r7, #2]
 8002df8:	041a      	lsls	r2, r3, #16
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	611a      	str	r2, [r3, #16]
}
 8002dfe:	bf00      	nop
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr

08002e08 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	460b      	mov	r3, r1
 8002e12:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e1a:	887a      	ldrh	r2, [r7, #2]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	041a      	lsls	r2, r3, #16
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	43d9      	mvns	r1, r3
 8002e26:	887b      	ldrh	r3, [r7, #2]
 8002e28:	400b      	ands	r3, r1
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	611a      	str	r2, [r3, #16]
}
 8002e30:	bf00      	nop
 8002e32:	3714      	adds	r7, #20
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr
	...

08002e3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	4603      	mov	r3, r0
 8002e44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e46:	4b08      	ldr	r3, [pc, #32]	@ (8002e68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e48:	695a      	ldr	r2, [r3, #20]
 8002e4a:	88fb      	ldrh	r3, [r7, #6]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d006      	beq.n	8002e60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e52:	4a05      	ldr	r2, [pc, #20]	@ (8002e68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e54:	88fb      	ldrh	r3, [r7, #6]
 8002e56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e58:	88fb      	ldrh	r3, [r7, #6]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff faa4 	bl	80023a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e60:	bf00      	nop
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40010400 	.word	0x40010400

08002e6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e12b      	b.n	80030d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d106      	bne.n	8002e98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7ff fade 	bl	8002454 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2224      	movs	r2, #36	@ 0x24
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0201 	bic.w	r2, r2, #1
 8002eae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ebe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ece:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ed0:	f002 f8b6 	bl	8005040 <HAL_RCC_GetPCLK1Freq>
 8002ed4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	4a81      	ldr	r2, [pc, #516]	@ (80030e0 <HAL_I2C_Init+0x274>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d807      	bhi.n	8002ef0 <HAL_I2C_Init+0x84>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4a80      	ldr	r2, [pc, #512]	@ (80030e4 <HAL_I2C_Init+0x278>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	bf94      	ite	ls
 8002ee8:	2301      	movls	r3, #1
 8002eea:	2300      	movhi	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	e006      	b.n	8002efe <HAL_I2C_Init+0x92>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4a7d      	ldr	r2, [pc, #500]	@ (80030e8 <HAL_I2C_Init+0x27c>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	bf94      	ite	ls
 8002ef8:	2301      	movls	r3, #1
 8002efa:	2300      	movhi	r3, #0
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e0e7      	b.n	80030d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	4a78      	ldr	r2, [pc, #480]	@ (80030ec <HAL_I2C_Init+0x280>)
 8002f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0e:	0c9b      	lsrs	r3, r3, #18
 8002f10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68ba      	ldr	r2, [r7, #8]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	4a6a      	ldr	r2, [pc, #424]	@ (80030e0 <HAL_I2C_Init+0x274>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d802      	bhi.n	8002f40 <HAL_I2C_Init+0xd4>
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	e009      	b.n	8002f54 <HAL_I2C_Init+0xe8>
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002f46:	fb02 f303 	mul.w	r3, r2, r3
 8002f4a:	4a69      	ldr	r2, [pc, #420]	@ (80030f0 <HAL_I2C_Init+0x284>)
 8002f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f50:	099b      	lsrs	r3, r3, #6
 8002f52:	3301      	adds	r3, #1
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	6812      	ldr	r2, [r2, #0]
 8002f58:	430b      	orrs	r3, r1
 8002f5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002f66:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	495c      	ldr	r1, [pc, #368]	@ (80030e0 <HAL_I2C_Init+0x274>)
 8002f70:	428b      	cmp	r3, r1
 8002f72:	d819      	bhi.n	8002fa8 <HAL_I2C_Init+0x13c>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	1e59      	subs	r1, r3, #1
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f82:	1c59      	adds	r1, r3, #1
 8002f84:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002f88:	400b      	ands	r3, r1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00a      	beq.n	8002fa4 <HAL_I2C_Init+0x138>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	1e59      	subs	r1, r3, #1
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fa2:	e051      	b.n	8003048 <HAL_I2C_Init+0x1dc>
 8002fa4:	2304      	movs	r3, #4
 8002fa6:	e04f      	b.n	8003048 <HAL_I2C_Init+0x1dc>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d111      	bne.n	8002fd4 <HAL_I2C_Init+0x168>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	1e58      	subs	r0, r3, #1
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6859      	ldr	r1, [r3, #4]
 8002fb8:	460b      	mov	r3, r1
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	440b      	add	r3, r1
 8002fbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	bf0c      	ite	eq
 8002fcc:	2301      	moveq	r3, #1
 8002fce:	2300      	movne	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	e012      	b.n	8002ffa <HAL_I2C_Init+0x18e>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	1e58      	subs	r0, r3, #1
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6859      	ldr	r1, [r3, #4]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	0099      	lsls	r1, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fea:	3301      	adds	r3, #1
 8002fec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	bf0c      	ite	eq
 8002ff4:	2301      	moveq	r3, #1
 8002ff6:	2300      	movne	r3, #0
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_I2C_Init+0x196>
 8002ffe:	2301      	movs	r3, #1
 8003000:	e022      	b.n	8003048 <HAL_I2C_Init+0x1dc>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10e      	bne.n	8003028 <HAL_I2C_Init+0x1bc>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	1e58      	subs	r0, r3, #1
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6859      	ldr	r1, [r3, #4]
 8003012:	460b      	mov	r3, r1
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	440b      	add	r3, r1
 8003018:	fbb0 f3f3 	udiv	r3, r0, r3
 800301c:	3301      	adds	r3, #1
 800301e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003022:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003026:	e00f      	b.n	8003048 <HAL_I2C_Init+0x1dc>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	1e58      	subs	r0, r3, #1
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6859      	ldr	r1, [r3, #4]
 8003030:	460b      	mov	r3, r1
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	0099      	lsls	r1, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	fbb0 f3f3 	udiv	r3, r0, r3
 800303e:	3301      	adds	r3, #1
 8003040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003044:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	6809      	ldr	r1, [r1, #0]
 800304c:	4313      	orrs	r3, r2
 800304e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69da      	ldr	r2, [r3, #28]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	431a      	orrs	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	430a      	orrs	r2, r1
 800306a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003076:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6911      	ldr	r1, [r2, #16]
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	68d2      	ldr	r2, [r2, #12]
 8003082:	4311      	orrs	r1, r2
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	6812      	ldr	r2, [r2, #0]
 8003088:	430b      	orrs	r3, r1
 800308a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	695a      	ldr	r2, [r3, #20]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	431a      	orrs	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	430a      	orrs	r2, r1
 80030a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f042 0201 	orr.w	r2, r2, #1
 80030b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2220      	movs	r2, #32
 80030c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	000186a0 	.word	0x000186a0
 80030e4:	001e847f 	.word	0x001e847f
 80030e8:	003d08ff 	.word	0x003d08ff
 80030ec:	431bde83 	.word	0x431bde83
 80030f0:	10624dd3 	.word	0x10624dd3

080030f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b088      	sub	sp, #32
 80030f8:	af02      	add	r7, sp, #8
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	607a      	str	r2, [r7, #4]
 80030fe:	461a      	mov	r2, r3
 8003100:	460b      	mov	r3, r1
 8003102:	817b      	strh	r3, [r7, #10]
 8003104:	4613      	mov	r3, r2
 8003106:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003108:	f7ff fba6 	bl	8002858 <HAL_GetTick>
 800310c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b20      	cmp	r3, #32
 8003118:	f040 80e0 	bne.w	80032dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	2319      	movs	r3, #25
 8003122:	2201      	movs	r2, #1
 8003124:	4970      	ldr	r1, [pc, #448]	@ (80032e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f001 f98a 	bl	8004440 <I2C_WaitOnFlagUntilTimeout>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003132:	2302      	movs	r3, #2
 8003134:	e0d3      	b.n	80032de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800313c:	2b01      	cmp	r3, #1
 800313e:	d101      	bne.n	8003144 <HAL_I2C_Master_Transmit+0x50>
 8003140:	2302      	movs	r3, #2
 8003142:	e0cc      	b.n	80032de <HAL_I2C_Master_Transmit+0x1ea>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b01      	cmp	r3, #1
 8003158:	d007      	beq.n	800316a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f042 0201 	orr.w	r2, r2, #1
 8003168:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003178:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2221      	movs	r2, #33	@ 0x21
 800317e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2210      	movs	r2, #16
 8003186:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	893a      	ldrh	r2, [r7, #8]
 800319a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	4a50      	ldr	r2, [pc, #320]	@ (80032ec <HAL_I2C_Master_Transmit+0x1f8>)
 80031aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031ac:	8979      	ldrh	r1, [r7, #10]
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	6a3a      	ldr	r2, [r7, #32]
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f000 fe76 	bl	8003ea4 <I2C_MasterRequestWrite>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e08d      	b.n	80032de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031c2:	2300      	movs	r3, #0
 80031c4:	613b      	str	r3, [r7, #16]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	613b      	str	r3, [r7, #16]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	613b      	str	r3, [r7, #16]
 80031d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80031d8:	e066      	b.n	80032a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	6a39      	ldr	r1, [r7, #32]
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f001 fa48 	bl	8004674 <I2C_WaitOnTXEFlagUntilTimeout>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00d      	beq.n	8003206 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	d107      	bne.n	8003202 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003200:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e06b      	b.n	80032de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320a:	781a      	ldrb	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003216:	1c5a      	adds	r2, r3, #1
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003220:	b29b      	uxth	r3, r3
 8003222:	3b01      	subs	r3, #1
 8003224:	b29a      	uxth	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800322e:	3b01      	subs	r3, #1
 8003230:	b29a      	uxth	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b04      	cmp	r3, #4
 8003242:	d11b      	bne.n	800327c <HAL_I2C_Master_Transmit+0x188>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003248:	2b00      	cmp	r3, #0
 800324a:	d017      	beq.n	800327c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003250:	781a      	ldrb	r2, [r3, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325c:	1c5a      	adds	r2, r3, #1
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003266:	b29b      	uxth	r3, r3
 8003268:	3b01      	subs	r3, #1
 800326a:	b29a      	uxth	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003274:	3b01      	subs	r3, #1
 8003276:	b29a      	uxth	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	6a39      	ldr	r1, [r7, #32]
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f001 fa3f 	bl	8004704 <I2C_WaitOnBTFFlagUntilTimeout>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00d      	beq.n	80032a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003290:	2b04      	cmp	r3, #4
 8003292:	d107      	bne.n	80032a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e01a      	b.n	80032de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d194      	bne.n	80031da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2220      	movs	r2, #32
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80032d8:	2300      	movs	r3, #0
 80032da:	e000      	b.n	80032de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80032dc:	2302      	movs	r3, #2
  }
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3718      	adds	r7, #24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	00100002 	.word	0x00100002
 80032ec:	ffff0000 	.word	0xffff0000

080032f0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08c      	sub	sp, #48	@ 0x30
 80032f4:	af02      	add	r7, sp, #8
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	607a      	str	r2, [r7, #4]
 80032fa:	461a      	mov	r2, r3
 80032fc:	460b      	mov	r3, r1
 80032fe:	817b      	strh	r3, [r7, #10]
 8003300:	4613      	mov	r3, r2
 8003302:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003304:	2300      	movs	r3, #0
 8003306:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003308:	f7ff faa6 	bl	8002858 <HAL_GetTick>
 800330c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b20      	cmp	r3, #32
 8003318:	f040 824b 	bne.w	80037b2 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800331c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	2319      	movs	r3, #25
 8003322:	2201      	movs	r2, #1
 8003324:	497f      	ldr	r1, [pc, #508]	@ (8003524 <HAL_I2C_Master_Receive+0x234>)
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f001 f88a 	bl	8004440 <I2C_WaitOnFlagUntilTimeout>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003332:	2302      	movs	r3, #2
 8003334:	e23e      	b.n	80037b4 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800333c:	2b01      	cmp	r3, #1
 800333e:	d101      	bne.n	8003344 <HAL_I2C_Master_Receive+0x54>
 8003340:	2302      	movs	r3, #2
 8003342:	e237      	b.n	80037b4 <HAL_I2C_Master_Receive+0x4c4>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b01      	cmp	r3, #1
 8003358:	d007      	beq.n	800336a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f042 0201 	orr.w	r2, r2, #1
 8003368:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003378:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2222      	movs	r2, #34	@ 0x22
 800337e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2210      	movs	r2, #16
 8003386:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	893a      	ldrh	r2, [r7, #8]
 800339a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	4a5f      	ldr	r2, [pc, #380]	@ (8003528 <HAL_I2C_Master_Receive+0x238>)
 80033aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80033ac:	8979      	ldrh	r1, [r7, #10]
 80033ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f000 fdf8 	bl	8003fa8 <I2C_MasterRequestRead>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e1f8      	b.n	80037b4 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d113      	bne.n	80033f2 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ca:	2300      	movs	r3, #0
 80033cc:	61fb      	str	r3, [r7, #28]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	61fb      	str	r3, [r7, #28]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	61fb      	str	r3, [r7, #28]
 80033de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	e1cc      	b.n	800378c <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d11e      	bne.n	8003438 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003408:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800340a:	b672      	cpsid	i
}
 800340c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800340e:	2300      	movs	r3, #0
 8003410:	61bb      	str	r3, [r7, #24]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	61bb      	str	r3, [r7, #24]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	61bb      	str	r3, [r7, #24]
 8003422:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003432:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003434:	b662      	cpsie	i
}
 8003436:	e035      	b.n	80034a4 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800343c:	2b02      	cmp	r3, #2
 800343e:	d11e      	bne.n	800347e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800344e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003450:	b672      	cpsid	i
}
 8003452:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003454:	2300      	movs	r3, #0
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	617b      	str	r3, [r7, #20]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	617b      	str	r3, [r7, #20]
 8003468:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003478:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800347a:	b662      	cpsie	i
}
 800347c:	e012      	b.n	80034a4 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800348c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800348e:	2300      	movs	r3, #0
 8003490:	613b      	str	r3, [r7, #16]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	613b      	str	r3, [r7, #16]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	613b      	str	r3, [r7, #16]
 80034a2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80034a4:	e172      	b.n	800378c <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034aa:	2b03      	cmp	r3, #3
 80034ac:	f200 811f 	bhi.w	80036ee <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d123      	bne.n	8003500 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f001 f969 	bl	8004794 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d001      	beq.n	80034cc <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e173      	b.n	80037b4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	691a      	ldr	r2, [r3, #16]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d6:	b2d2      	uxtb	r2, r2
 80034d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034de:	1c5a      	adds	r2, r3, #1
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034e8:	3b01      	subs	r3, #1
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	3b01      	subs	r3, #1
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80034fe:	e145      	b.n	800378c <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003504:	2b02      	cmp	r3, #2
 8003506:	d152      	bne.n	80035ae <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800350e:	2200      	movs	r2, #0
 8003510:	4906      	ldr	r1, [pc, #24]	@ (800352c <HAL_I2C_Master_Receive+0x23c>)
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f000 ff94 	bl	8004440 <I2C_WaitOnFlagUntilTimeout>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d008      	beq.n	8003530 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e148      	b.n	80037b4 <HAL_I2C_Master_Receive+0x4c4>
 8003522:	bf00      	nop
 8003524:	00100002 	.word	0x00100002
 8003528:	ffff0000 	.word	0xffff0000
 800352c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003530:	b672      	cpsid	i
}
 8003532:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003542:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	691a      	ldr	r2, [r3, #16]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354e:	b2d2      	uxtb	r2, r2
 8003550:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003556:	1c5a      	adds	r2, r3, #1
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003560:	3b01      	subs	r3, #1
 8003562:	b29a      	uxth	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800356c:	b29b      	uxth	r3, r3
 800356e:	3b01      	subs	r3, #1
 8003570:	b29a      	uxth	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003576:	b662      	cpsie	i
}
 8003578:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	691a      	ldr	r2, [r3, #16]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003584:	b2d2      	uxtb	r2, r2
 8003586:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358c:	1c5a      	adds	r2, r3, #1
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003596:	3b01      	subs	r3, #1
 8003598:	b29a      	uxth	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	3b01      	subs	r3, #1
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80035ac:	e0ee      	b.n	800378c <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b4:	2200      	movs	r2, #0
 80035b6:	4981      	ldr	r1, [pc, #516]	@ (80037bc <HAL_I2C_Master_Receive+0x4cc>)
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f000 ff41 	bl	8004440 <I2C_WaitOnFlagUntilTimeout>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e0f5      	b.n	80037b4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80035d8:	b672      	cpsid	i
}
 80035da:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	691a      	ldr	r2, [r3, #16]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e6:	b2d2      	uxtb	r2, r2
 80035e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ee:	1c5a      	adds	r2, r3, #1
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035f8:	3b01      	subs	r3, #1
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003604:	b29b      	uxth	r3, r3
 8003606:	3b01      	subs	r3, #1
 8003608:	b29a      	uxth	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800360e:	4b6c      	ldr	r3, [pc, #432]	@ (80037c0 <HAL_I2C_Master_Receive+0x4d0>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	08db      	lsrs	r3, r3, #3
 8003614:	4a6b      	ldr	r2, [pc, #428]	@ (80037c4 <HAL_I2C_Master_Receive+0x4d4>)
 8003616:	fba2 2303 	umull	r2, r3, r2, r3
 800361a:	0a1a      	lsrs	r2, r3, #8
 800361c:	4613      	mov	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	4413      	add	r3, r2
 8003622:	00da      	lsls	r2, r3, #3
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003628:	6a3b      	ldr	r3, [r7, #32]
 800362a:	3b01      	subs	r3, #1
 800362c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800362e:	6a3b      	ldr	r3, [r7, #32]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d118      	bne.n	8003666 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2220      	movs	r2, #32
 800363e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364e:	f043 0220 	orr.w	r2, r3, #32
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003656:	b662      	cpsie	i
}
 8003658:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e0a6      	b.n	80037b4 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	2b04      	cmp	r3, #4
 8003672:	d1d9      	bne.n	8003628 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003682:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	691a      	ldr	r2, [r3, #16]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003696:	1c5a      	adds	r2, r3, #1
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036a0:	3b01      	subs	r3, #1
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	3b01      	subs	r3, #1
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80036b6:	b662      	cpsie	i
}
 80036b8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	691a      	ldr	r2, [r3, #16]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c4:	b2d2      	uxtb	r2, r2
 80036c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036cc:	1c5a      	adds	r2, r3, #1
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036d6:	3b01      	subs	r3, #1
 80036d8:	b29a      	uxth	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	3b01      	subs	r3, #1
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80036ec:	e04e      	b.n	800378c <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f001 f84e 	bl	8004794 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e058      	b.n	80037b4 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	691a      	ldr	r2, [r3, #16]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370c:	b2d2      	uxtb	r2, r2
 800370e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800371e:	3b01      	subs	r3, #1
 8003720:	b29a      	uxth	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800372a:	b29b      	uxth	r3, r3
 800372c:	3b01      	subs	r3, #1
 800372e:	b29a      	uxth	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	f003 0304 	and.w	r3, r3, #4
 800373e:	2b04      	cmp	r3, #4
 8003740:	d124      	bne.n	800378c <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003746:	2b03      	cmp	r3, #3
 8003748:	d107      	bne.n	800375a <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003758:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	691a      	ldr	r2, [r3, #16]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003764:	b2d2      	uxtb	r2, r2
 8003766:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376c:	1c5a      	adds	r2, r3, #1
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003776:	3b01      	subs	r3, #1
 8003778:	b29a      	uxth	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003782:	b29b      	uxth	r3, r3
 8003784:	3b01      	subs	r3, #1
 8003786:	b29a      	uxth	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003790:	2b00      	cmp	r3, #0
 8003792:	f47f ae88 	bne.w	80034a6 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2220      	movs	r2, #32
 800379a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80037ae:	2300      	movs	r3, #0
 80037b0:	e000      	b.n	80037b4 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80037b2:	2302      	movs	r3, #2
  }
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3728      	adds	r7, #40	@ 0x28
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	00010004 	.word	0x00010004
 80037c0:	20000080 	.word	0x20000080
 80037c4:	14f8b589 	.word	0x14f8b589

080037c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b088      	sub	sp, #32
 80037cc:	af02      	add	r7, sp, #8
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	4608      	mov	r0, r1
 80037d2:	4611      	mov	r1, r2
 80037d4:	461a      	mov	r2, r3
 80037d6:	4603      	mov	r3, r0
 80037d8:	817b      	strh	r3, [r7, #10]
 80037da:	460b      	mov	r3, r1
 80037dc:	813b      	strh	r3, [r7, #8]
 80037de:	4613      	mov	r3, r2
 80037e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037e2:	f7ff f839 	bl	8002858 <HAL_GetTick>
 80037e6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b20      	cmp	r3, #32
 80037f2:	f040 80d9 	bne.w	80039a8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	2319      	movs	r3, #25
 80037fc:	2201      	movs	r2, #1
 80037fe:	496d      	ldr	r1, [pc, #436]	@ (80039b4 <HAL_I2C_Mem_Write+0x1ec>)
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f000 fe1d 	bl	8004440 <I2C_WaitOnFlagUntilTimeout>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800380c:	2302      	movs	r3, #2
 800380e:	e0cc      	b.n	80039aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003816:	2b01      	cmp	r3, #1
 8003818:	d101      	bne.n	800381e <HAL_I2C_Mem_Write+0x56>
 800381a:	2302      	movs	r3, #2
 800381c:	e0c5      	b.n	80039aa <HAL_I2C_Mem_Write+0x1e2>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b01      	cmp	r3, #1
 8003832:	d007      	beq.n	8003844 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f042 0201 	orr.w	r2, r2, #1
 8003842:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003852:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2221      	movs	r2, #33	@ 0x21
 8003858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2240      	movs	r2, #64	@ 0x40
 8003860:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6a3a      	ldr	r2, [r7, #32]
 800386e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003874:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800387a:	b29a      	uxth	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4a4d      	ldr	r2, [pc, #308]	@ (80039b8 <HAL_I2C_Mem_Write+0x1f0>)
 8003884:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003886:	88f8      	ldrh	r0, [r7, #6]
 8003888:	893a      	ldrh	r2, [r7, #8]
 800388a:	8979      	ldrh	r1, [r7, #10]
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	9301      	str	r3, [sp, #4]
 8003890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003892:	9300      	str	r3, [sp, #0]
 8003894:	4603      	mov	r3, r0
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 fc54 	bl	8004144 <I2C_RequestMemoryWrite>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d052      	beq.n	8003948 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e081      	b.n	80039aa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f000 fee2 	bl	8004674 <I2C_WaitOnTXEFlagUntilTimeout>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00d      	beq.n	80038d2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	d107      	bne.n	80038ce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e06b      	b.n	80039aa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d6:	781a      	ldrb	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e2:	1c5a      	adds	r2, r3, #1
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ec:	3b01      	subs	r3, #1
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	3b01      	subs	r3, #1
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b04      	cmp	r3, #4
 800390e:	d11b      	bne.n	8003948 <HAL_I2C_Mem_Write+0x180>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003914:	2b00      	cmp	r3, #0
 8003916:	d017      	beq.n	8003948 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391c:	781a      	ldrb	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003928:	1c5a      	adds	r2, r3, #1
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003932:	3b01      	subs	r3, #1
 8003934:	b29a      	uxth	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800393e:	b29b      	uxth	r3, r3
 8003940:	3b01      	subs	r3, #1
 8003942:	b29a      	uxth	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1aa      	bne.n	80038a6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 fed5 	bl	8004704 <I2C_WaitOnBTFFlagUntilTimeout>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00d      	beq.n	800397c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003964:	2b04      	cmp	r3, #4
 8003966:	d107      	bne.n	8003978 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003976:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e016      	b.n	80039aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800398a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2220      	movs	r2, #32
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80039a4:	2300      	movs	r3, #0
 80039a6:	e000      	b.n	80039aa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80039a8:	2302      	movs	r3, #2
  }
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3718      	adds	r7, #24
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	00100002 	.word	0x00100002
 80039b8:	ffff0000 	.word	0xffff0000

080039bc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b08c      	sub	sp, #48	@ 0x30
 80039c0:	af02      	add	r7, sp, #8
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	4608      	mov	r0, r1
 80039c6:	4611      	mov	r1, r2
 80039c8:	461a      	mov	r2, r3
 80039ca:	4603      	mov	r3, r0
 80039cc:	817b      	strh	r3, [r7, #10]
 80039ce:	460b      	mov	r3, r1
 80039d0:	813b      	strh	r3, [r7, #8]
 80039d2:	4613      	mov	r3, r2
 80039d4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039da:	f7fe ff3d 	bl	8002858 <HAL_GetTick>
 80039de:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b20      	cmp	r3, #32
 80039ea:	f040 8250 	bne.w	8003e8e <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	2319      	movs	r3, #25
 80039f4:	2201      	movs	r2, #1
 80039f6:	4982      	ldr	r1, [pc, #520]	@ (8003c00 <HAL_I2C_Mem_Read+0x244>)
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f000 fd21 	bl	8004440 <I2C_WaitOnFlagUntilTimeout>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003a04:	2302      	movs	r3, #2
 8003a06:	e243      	b.n	8003e90 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d101      	bne.n	8003a16 <HAL_I2C_Mem_Read+0x5a>
 8003a12:	2302      	movs	r3, #2
 8003a14:	e23c      	b.n	8003e90 <HAL_I2C_Mem_Read+0x4d4>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d007      	beq.n	8003a3c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f042 0201 	orr.w	r2, r2, #1
 8003a3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2222      	movs	r2, #34	@ 0x22
 8003a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2240      	movs	r2, #64	@ 0x40
 8003a58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a66:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003a6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	4a62      	ldr	r2, [pc, #392]	@ (8003c04 <HAL_I2C_Mem_Read+0x248>)
 8003a7c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a7e:	88f8      	ldrh	r0, [r7, #6]
 8003a80:	893a      	ldrh	r2, [r7, #8]
 8003a82:	8979      	ldrh	r1, [r7, #10]
 8003a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a86:	9301      	str	r3, [sp, #4]
 8003a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f000 fbee 	bl	8004270 <I2C_RequestMemoryRead>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e1f8      	b.n	8003e90 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d113      	bne.n	8003ace <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	61fb      	str	r3, [r7, #28]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	61fb      	str	r3, [r7, #28]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	61fb      	str	r3, [r7, #28]
 8003aba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003aca:	601a      	str	r2, [r3, #0]
 8003acc:	e1cc      	b.n	8003e68 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d11e      	bne.n	8003b14 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ae4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ae6:	b672      	cpsid	i
}
 8003ae8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aea:	2300      	movs	r3, #0
 8003aec:	61bb      	str	r3, [r7, #24]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	61bb      	str	r3, [r7, #24]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	61bb      	str	r3, [r7, #24]
 8003afe:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b0e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003b10:	b662      	cpsie	i
}
 8003b12:	e035      	b.n	8003b80 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d11e      	bne.n	8003b5a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b2a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b2c:	b672      	cpsid	i
}
 8003b2e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b30:	2300      	movs	r3, #0
 8003b32:	617b      	str	r3, [r7, #20]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	617b      	str	r3, [r7, #20]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	617b      	str	r3, [r7, #20]
 8003b44:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b54:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003b56:	b662      	cpsie	i
}
 8003b58:	e012      	b.n	8003b80 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003b68:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	613b      	str	r3, [r7, #16]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	613b      	str	r3, [r7, #16]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	613b      	str	r3, [r7, #16]
 8003b7e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003b80:	e172      	b.n	8003e68 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b86:	2b03      	cmp	r3, #3
 8003b88:	f200 811f 	bhi.w	8003dca <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d123      	bne.n	8003bdc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b96:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 fdfb 	bl	8004794 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e173      	b.n	8003e90 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	691a      	ldr	r2, [r3, #16]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb2:	b2d2      	uxtb	r2, r2
 8003bb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bba:	1c5a      	adds	r2, r3, #1
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003bda:	e145      	b.n	8003e68 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d152      	bne.n	8003c8a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bea:	2200      	movs	r2, #0
 8003bec:	4906      	ldr	r1, [pc, #24]	@ (8003c08 <HAL_I2C_Mem_Read+0x24c>)
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f000 fc26 	bl	8004440 <I2C_WaitOnFlagUntilTimeout>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d008      	beq.n	8003c0c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e148      	b.n	8003e90 <HAL_I2C_Mem_Read+0x4d4>
 8003bfe:	bf00      	nop
 8003c00:	00100002 	.word	0x00100002
 8003c04:	ffff0000 	.word	0xffff0000
 8003c08:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003c0c:	b672      	cpsid	i
}
 8003c0e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	691a      	ldr	r2, [r3, #16]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2a:	b2d2      	uxtb	r2, r2
 8003c2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c32:	1c5a      	adds	r2, r3, #1
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003c52:	b662      	cpsie	i
}
 8003c54:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	691a      	ldr	r2, [r3, #16]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c60:	b2d2      	uxtb	r2, r2
 8003c62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c68:	1c5a      	adds	r2, r3, #1
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c72:	3b01      	subs	r3, #1
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c88:	e0ee      	b.n	8003e68 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c90:	2200      	movs	r2, #0
 8003c92:	4981      	ldr	r1, [pc, #516]	@ (8003e98 <HAL_I2C_Mem_Read+0x4dc>)
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f000 fbd3 	bl	8004440 <I2C_WaitOnFlagUntilTimeout>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d001      	beq.n	8003ca4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e0f5      	b.n	8003e90 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cb2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003cb4:	b672      	cpsid	i
}
 8003cb6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	691a      	ldr	r2, [r3, #16]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc2:	b2d2      	uxtb	r2, r2
 8003cc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cca:	1c5a      	adds	r2, r3, #1
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003cea:	4b6c      	ldr	r3, [pc, #432]	@ (8003e9c <HAL_I2C_Mem_Read+0x4e0>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	08db      	lsrs	r3, r3, #3
 8003cf0:	4a6b      	ldr	r2, [pc, #428]	@ (8003ea0 <HAL_I2C_Mem_Read+0x4e4>)
 8003cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf6:	0a1a      	lsrs	r2, r3, #8
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4413      	add	r3, r2
 8003cfe:	00da      	lsls	r2, r3, #3
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003d04:	6a3b      	ldr	r3, [r7, #32]
 8003d06:	3b01      	subs	r3, #1
 8003d08:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003d0a:	6a3b      	ldr	r3, [r7, #32]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d118      	bne.n	8003d42 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2220      	movs	r2, #32
 8003d1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2a:	f043 0220 	orr.w	r2, r3, #32
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003d32:	b662      	cpsie	i
}
 8003d34:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e0a6      	b.n	8003e90 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b04      	cmp	r3, #4
 8003d4e:	d1d9      	bne.n	8003d04 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	691a      	ldr	r2, [r3, #16]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6a:	b2d2      	uxtb	r2, r2
 8003d6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d72:	1c5a      	adds	r2, r3, #1
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003d92:	b662      	cpsie	i
}
 8003d94:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	691a      	ldr	r2, [r3, #16]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da0:	b2d2      	uxtb	r2, r2
 8003da2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da8:	1c5a      	adds	r2, r3, #1
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003db2:	3b01      	subs	r3, #1
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003dc8:	e04e      	b.n	8003e68 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dcc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f000 fce0 	bl	8004794 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e058      	b.n	8003e90 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	691a      	ldr	r2, [r3, #16]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de8:	b2d2      	uxtb	r2, r2
 8003dea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df0:	1c5a      	adds	r2, r3, #1
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	f003 0304 	and.w	r3, r3, #4
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	d124      	bne.n	8003e68 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e22:	2b03      	cmp	r3, #3
 8003e24:	d107      	bne.n	8003e36 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e34:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	691a      	ldr	r2, [r3, #16]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e40:	b2d2      	uxtb	r2, r2
 8003e42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e48:	1c5a      	adds	r2, r3, #1
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e52:	3b01      	subs	r3, #1
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	3b01      	subs	r3, #1
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f47f ae88 	bne.w	8003b82 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2220      	movs	r2, #32
 8003e76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	e000      	b.n	8003e90 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8003e8e:	2302      	movs	r3, #2
  }
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3728      	adds	r7, #40	@ 0x28
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	00010004 	.word	0x00010004
 8003e9c:	20000080 	.word	0x20000080
 8003ea0:	14f8b589 	.word	0x14f8b589

08003ea4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b088      	sub	sp, #32
 8003ea8:	af02      	add	r7, sp, #8
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	607a      	str	r2, [r7, #4]
 8003eae:	603b      	str	r3, [r7, #0]
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	2b08      	cmp	r3, #8
 8003ebe:	d006      	beq.n	8003ece <I2C_MasterRequestWrite+0x2a>
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d003      	beq.n	8003ece <I2C_MasterRequestWrite+0x2a>
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ecc:	d108      	bne.n	8003ee0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003edc:	601a      	str	r2, [r3, #0]
 8003ede:	e00b      	b.n	8003ef8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee4:	2b12      	cmp	r3, #18
 8003ee6:	d107      	bne.n	8003ef8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ef6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 fa9b 	bl	8004440 <I2C_WaitOnFlagUntilTimeout>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00d      	beq.n	8003f2c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f1e:	d103      	bne.n	8003f28 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f26:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e035      	b.n	8003f98 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f34:	d108      	bne.n	8003f48 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f36:	897b      	ldrh	r3, [r7, #10]
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f44:	611a      	str	r2, [r3, #16]
 8003f46:	e01b      	b.n	8003f80 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f48:	897b      	ldrh	r3, [r7, #10]
 8003f4a:	11db      	asrs	r3, r3, #7
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	f003 0306 	and.w	r3, r3, #6
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	f063 030f 	orn	r3, r3, #15
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	490e      	ldr	r1, [pc, #56]	@ (8003fa0 <I2C_MasterRequestWrite+0xfc>)
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f000 fae4 	bl	8004534 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e010      	b.n	8003f98 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f76:	897b      	ldrh	r3, [r7, #10]
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	4907      	ldr	r1, [pc, #28]	@ (8003fa4 <I2C_MasterRequestWrite+0x100>)
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f000 fad4 	bl	8004534 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e000      	b.n	8003f98 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3718      	adds	r7, #24
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	00010008 	.word	0x00010008
 8003fa4:	00010002 	.word	0x00010002

08003fa8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b088      	sub	sp, #32
 8003fac:	af02      	add	r7, sp, #8
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	607a      	str	r2, [r7, #4]
 8003fb2:	603b      	str	r3, [r7, #0]
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fbc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003fcc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	2b08      	cmp	r3, #8
 8003fd2:	d006      	beq.n	8003fe2 <I2C_MasterRequestRead+0x3a>
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d003      	beq.n	8003fe2 <I2C_MasterRequestRead+0x3a>
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003fe0:	d108      	bne.n	8003ff4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	e00b      	b.n	800400c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff8:	2b11      	cmp	r3, #17
 8003ffa:	d107      	bne.n	800400c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800400a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	9300      	str	r3, [sp, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f000 fa11 	bl	8004440 <I2C_WaitOnFlagUntilTimeout>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00d      	beq.n	8004040 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800402e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004032:	d103      	bne.n	800403c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800403a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e079      	b.n	8004134 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004048:	d108      	bne.n	800405c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800404a:	897b      	ldrh	r3, [r7, #10]
 800404c:	b2db      	uxtb	r3, r3
 800404e:	f043 0301 	orr.w	r3, r3, #1
 8004052:	b2da      	uxtb	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	611a      	str	r2, [r3, #16]
 800405a:	e05f      	b.n	800411c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800405c:	897b      	ldrh	r3, [r7, #10]
 800405e:	11db      	asrs	r3, r3, #7
 8004060:	b2db      	uxtb	r3, r3
 8004062:	f003 0306 	and.w	r3, r3, #6
 8004066:	b2db      	uxtb	r3, r3
 8004068:	f063 030f 	orn	r3, r3, #15
 800406c:	b2da      	uxtb	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	4930      	ldr	r1, [pc, #192]	@ (800413c <I2C_MasterRequestRead+0x194>)
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f000 fa5a 	bl	8004534 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e054      	b.n	8004134 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800408a:	897b      	ldrh	r3, [r7, #10]
 800408c:	b2da      	uxtb	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	4929      	ldr	r1, [pc, #164]	@ (8004140 <I2C_MasterRequestRead+0x198>)
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f000 fa4a 	bl	8004534 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e044      	b.n	8004134 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040aa:	2300      	movs	r3, #0
 80040ac:	613b      	str	r3, [r7, #16]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	613b      	str	r3, [r7, #16]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	613b      	str	r3, [r7, #16]
 80040be:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040ce:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	f000 f9af 	bl	8004440 <I2C_WaitOnFlagUntilTimeout>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00d      	beq.n	8004104 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040f6:	d103      	bne.n	8004100 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040fe:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e017      	b.n	8004134 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004104:	897b      	ldrh	r3, [r7, #10]
 8004106:	11db      	asrs	r3, r3, #7
 8004108:	b2db      	uxtb	r3, r3
 800410a:	f003 0306 	and.w	r3, r3, #6
 800410e:	b2db      	uxtb	r3, r3
 8004110:	f063 030e 	orn	r3, r3, #14
 8004114:	b2da      	uxtb	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	4907      	ldr	r1, [pc, #28]	@ (8004140 <I2C_MasterRequestRead+0x198>)
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f000 fa06 	bl	8004534 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e000      	b.n	8004134 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	3718      	adds	r7, #24
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	00010008 	.word	0x00010008
 8004140:	00010002 	.word	0x00010002

08004144 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b088      	sub	sp, #32
 8004148:	af02      	add	r7, sp, #8
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	4608      	mov	r0, r1
 800414e:	4611      	mov	r1, r2
 8004150:	461a      	mov	r2, r3
 8004152:	4603      	mov	r3, r0
 8004154:	817b      	strh	r3, [r7, #10]
 8004156:	460b      	mov	r3, r1
 8004158:	813b      	strh	r3, [r7, #8]
 800415a:	4613      	mov	r3, r2
 800415c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800416c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800416e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	2200      	movs	r2, #0
 8004176:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f000 f960 	bl	8004440 <I2C_WaitOnFlagUntilTimeout>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00d      	beq.n	80041a2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004190:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004194:	d103      	bne.n	800419e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800419c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e05f      	b.n	8004262 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041a2:	897b      	ldrh	r3, [r7, #10]
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	461a      	mov	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80041b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b4:	6a3a      	ldr	r2, [r7, #32]
 80041b6:	492d      	ldr	r1, [pc, #180]	@ (800426c <I2C_RequestMemoryWrite+0x128>)
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f000 f9bb 	bl	8004534 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e04c      	b.n	8004262 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041c8:	2300      	movs	r3, #0
 80041ca:	617b      	str	r3, [r7, #20]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	617b      	str	r3, [r7, #20]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	617b      	str	r3, [r7, #20]
 80041dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041e0:	6a39      	ldr	r1, [r7, #32]
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f000 fa46 	bl	8004674 <I2C_WaitOnTXEFlagUntilTimeout>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00d      	beq.n	800420a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f2:	2b04      	cmp	r3, #4
 80041f4:	d107      	bne.n	8004206 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004204:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e02b      	b.n	8004262 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800420a:	88fb      	ldrh	r3, [r7, #6]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d105      	bne.n	800421c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004210:	893b      	ldrh	r3, [r7, #8]
 8004212:	b2da      	uxtb	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	611a      	str	r2, [r3, #16]
 800421a:	e021      	b.n	8004260 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800421c:	893b      	ldrh	r3, [r7, #8]
 800421e:	0a1b      	lsrs	r3, r3, #8
 8004220:	b29b      	uxth	r3, r3
 8004222:	b2da      	uxtb	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800422a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800422c:	6a39      	ldr	r1, [r7, #32]
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 fa20 	bl	8004674 <I2C_WaitOnTXEFlagUntilTimeout>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00d      	beq.n	8004256 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423e:	2b04      	cmp	r3, #4
 8004240:	d107      	bne.n	8004252 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004250:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e005      	b.n	8004262 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004256:	893b      	ldrh	r3, [r7, #8]
 8004258:	b2da      	uxtb	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3718      	adds	r7, #24
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	00010002 	.word	0x00010002

08004270 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b088      	sub	sp, #32
 8004274:	af02      	add	r7, sp, #8
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	4608      	mov	r0, r1
 800427a:	4611      	mov	r1, r2
 800427c:	461a      	mov	r2, r3
 800427e:	4603      	mov	r3, r0
 8004280:	817b      	strh	r3, [r7, #10]
 8004282:	460b      	mov	r3, r1
 8004284:	813b      	strh	r3, [r7, #8]
 8004286:	4613      	mov	r3, r2
 8004288:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004298:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	6a3b      	ldr	r3, [r7, #32]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f000 f8c2 	bl	8004440 <I2C_WaitOnFlagUntilTimeout>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00d      	beq.n	80042de <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042d0:	d103      	bne.n	80042da <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e0aa      	b.n	8004434 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042de:	897b      	ldrh	r3, [r7, #10]
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	461a      	mov	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80042ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f0:	6a3a      	ldr	r2, [r7, #32]
 80042f2:	4952      	ldr	r1, [pc, #328]	@ (800443c <I2C_RequestMemoryRead+0x1cc>)
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	f000 f91d 	bl	8004534 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d001      	beq.n	8004304 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e097      	b.n	8004434 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004304:	2300      	movs	r3, #0
 8004306:	617b      	str	r3, [r7, #20]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	617b      	str	r3, [r7, #20]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	617b      	str	r3, [r7, #20]
 8004318:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800431a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800431c:	6a39      	ldr	r1, [r7, #32]
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f000 f9a8 	bl	8004674 <I2C_WaitOnTXEFlagUntilTimeout>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00d      	beq.n	8004346 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432e:	2b04      	cmp	r3, #4
 8004330:	d107      	bne.n	8004342 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004340:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e076      	b.n	8004434 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004346:	88fb      	ldrh	r3, [r7, #6]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d105      	bne.n	8004358 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800434c:	893b      	ldrh	r3, [r7, #8]
 800434e:	b2da      	uxtb	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	611a      	str	r2, [r3, #16]
 8004356:	e021      	b.n	800439c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004358:	893b      	ldrh	r3, [r7, #8]
 800435a:	0a1b      	lsrs	r3, r3, #8
 800435c:	b29b      	uxth	r3, r3
 800435e:	b2da      	uxtb	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004366:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004368:	6a39      	ldr	r1, [r7, #32]
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f000 f982 	bl	8004674 <I2C_WaitOnTXEFlagUntilTimeout>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00d      	beq.n	8004392 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437a:	2b04      	cmp	r3, #4
 800437c:	d107      	bne.n	800438e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800438c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e050      	b.n	8004434 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004392:	893b      	ldrh	r3, [r7, #8]
 8004394:	b2da      	uxtb	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800439c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800439e:	6a39      	ldr	r1, [r7, #32]
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f000 f967 	bl	8004674 <I2C_WaitOnTXEFlagUntilTimeout>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00d      	beq.n	80043c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b0:	2b04      	cmp	r3, #4
 80043b2:	d107      	bne.n	80043c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e035      	b.n	8004434 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043da:	9300      	str	r3, [sp, #0]
 80043dc:	6a3b      	ldr	r3, [r7, #32]
 80043de:	2200      	movs	r2, #0
 80043e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f000 f82b 	bl	8004440 <I2C_WaitOnFlagUntilTimeout>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00d      	beq.n	800440c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043fe:	d103      	bne.n	8004408 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004406:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e013      	b.n	8004434 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800440c:	897b      	ldrh	r3, [r7, #10]
 800440e:	b2db      	uxtb	r3, r3
 8004410:	f043 0301 	orr.w	r3, r3, #1
 8004414:	b2da      	uxtb	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800441c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441e:	6a3a      	ldr	r2, [r7, #32]
 8004420:	4906      	ldr	r1, [pc, #24]	@ (800443c <I2C_RequestMemoryRead+0x1cc>)
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f000 f886 	bl	8004534 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e000      	b.n	8004434 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3718      	adds	r7, #24
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	00010002 	.word	0x00010002

08004440 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	603b      	str	r3, [r7, #0]
 800444c:	4613      	mov	r3, r2
 800444e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004450:	e048      	b.n	80044e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004458:	d044      	beq.n	80044e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800445a:	f7fe f9fd 	bl	8002858 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	683a      	ldr	r2, [r7, #0]
 8004466:	429a      	cmp	r2, r3
 8004468:	d302      	bcc.n	8004470 <I2C_WaitOnFlagUntilTimeout+0x30>
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d139      	bne.n	80044e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	0c1b      	lsrs	r3, r3, #16
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b01      	cmp	r3, #1
 8004478:	d10d      	bne.n	8004496 <I2C_WaitOnFlagUntilTimeout+0x56>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	43da      	mvns	r2, r3
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	4013      	ands	r3, r2
 8004486:	b29b      	uxth	r3, r3
 8004488:	2b00      	cmp	r3, #0
 800448a:	bf0c      	ite	eq
 800448c:	2301      	moveq	r3, #1
 800448e:	2300      	movne	r3, #0
 8004490:	b2db      	uxtb	r3, r3
 8004492:	461a      	mov	r2, r3
 8004494:	e00c      	b.n	80044b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	43da      	mvns	r2, r3
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	4013      	ands	r3, r2
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	bf0c      	ite	eq
 80044a8:	2301      	moveq	r3, #1
 80044aa:	2300      	movne	r3, #0
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	461a      	mov	r2, r3
 80044b0:	79fb      	ldrb	r3, [r7, #7]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d116      	bne.n	80044e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2220      	movs	r2, #32
 80044c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d0:	f043 0220 	orr.w	r2, r3, #32
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e023      	b.n	800452c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	0c1b      	lsrs	r3, r3, #16
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d10d      	bne.n	800450a <I2C_WaitOnFlagUntilTimeout+0xca>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	43da      	mvns	r2, r3
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	4013      	ands	r3, r2
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	bf0c      	ite	eq
 8004500:	2301      	moveq	r3, #1
 8004502:	2300      	movne	r3, #0
 8004504:	b2db      	uxtb	r3, r3
 8004506:	461a      	mov	r2, r3
 8004508:	e00c      	b.n	8004524 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	43da      	mvns	r2, r3
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	4013      	ands	r3, r2
 8004516:	b29b      	uxth	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	bf0c      	ite	eq
 800451c:	2301      	moveq	r3, #1
 800451e:	2300      	movne	r3, #0
 8004520:	b2db      	uxtb	r3, r3
 8004522:	461a      	mov	r2, r3
 8004524:	79fb      	ldrb	r3, [r7, #7]
 8004526:	429a      	cmp	r2, r3
 8004528:	d093      	beq.n	8004452 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3710      	adds	r7, #16
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
 8004540:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004542:	e071      	b.n	8004628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800454e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004552:	d123      	bne.n	800459c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004562:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800456c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2220      	movs	r2, #32
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004588:	f043 0204 	orr.w	r2, r3, #4
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e067      	b.n	800466c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a2:	d041      	beq.n	8004628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045a4:	f7fe f958 	bl	8002858 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d302      	bcc.n	80045ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d136      	bne.n	8004628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	0c1b      	lsrs	r3, r3, #16
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d10c      	bne.n	80045de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	43da      	mvns	r2, r3
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	4013      	ands	r3, r2
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	bf14      	ite	ne
 80045d6:	2301      	movne	r3, #1
 80045d8:	2300      	moveq	r3, #0
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	e00b      	b.n	80045f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	43da      	mvns	r2, r3
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	4013      	ands	r3, r2
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	bf14      	ite	ne
 80045f0:	2301      	movne	r3, #1
 80045f2:	2300      	moveq	r3, #0
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d016      	beq.n	8004628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2220      	movs	r2, #32
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004614:	f043 0220 	orr.w	r2, r3, #32
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e021      	b.n	800466c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	0c1b      	lsrs	r3, r3, #16
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b01      	cmp	r3, #1
 8004630:	d10c      	bne.n	800464c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	43da      	mvns	r2, r3
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	4013      	ands	r3, r2
 800463e:	b29b      	uxth	r3, r3
 8004640:	2b00      	cmp	r3, #0
 8004642:	bf14      	ite	ne
 8004644:	2301      	movne	r3, #1
 8004646:	2300      	moveq	r3, #0
 8004648:	b2db      	uxtb	r3, r3
 800464a:	e00b      	b.n	8004664 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	43da      	mvns	r2, r3
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	4013      	ands	r3, r2
 8004658:	b29b      	uxth	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	bf14      	ite	ne
 800465e:	2301      	movne	r3, #1
 8004660:	2300      	moveq	r3, #0
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b00      	cmp	r3, #0
 8004666:	f47f af6d 	bne.w	8004544 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004680:	e034      	b.n	80046ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f000 f8e3 	bl	800484e <I2C_IsAcknowledgeFailed>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e034      	b.n	80046fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004698:	d028      	beq.n	80046ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800469a:	f7fe f8dd 	bl	8002858 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	68ba      	ldr	r2, [r7, #8]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d302      	bcc.n	80046b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d11d      	bne.n	80046ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ba:	2b80      	cmp	r3, #128	@ 0x80
 80046bc:	d016      	beq.n	80046ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2220      	movs	r2, #32
 80046c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d8:	f043 0220 	orr.w	r2, r3, #32
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e007      	b.n	80046fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046f6:	2b80      	cmp	r3, #128	@ 0x80
 80046f8:	d1c3      	bne.n	8004682 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004710:	e034      	b.n	800477c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f000 f89b 	bl	800484e <I2C_IsAcknowledgeFailed>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e034      	b.n	800478c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004728:	d028      	beq.n	800477c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800472a:	f7fe f895 	bl	8002858 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	429a      	cmp	r2, r3
 8004738:	d302      	bcc.n	8004740 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d11d      	bne.n	800477c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	f003 0304 	and.w	r3, r3, #4
 800474a:	2b04      	cmp	r3, #4
 800474c:	d016      	beq.n	800477c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2220      	movs	r2, #32
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004768:	f043 0220 	orr.w	r2, r3, #32
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e007      	b.n	800478c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	f003 0304 	and.w	r3, r3, #4
 8004786:	2b04      	cmp	r3, #4
 8004788:	d1c3      	bne.n	8004712 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047a0:	e049      	b.n	8004836 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	f003 0310 	and.w	r3, r3, #16
 80047ac:	2b10      	cmp	r3, #16
 80047ae:	d119      	bne.n	80047e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f06f 0210 	mvn.w	r2, #16
 80047b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2220      	movs	r2, #32
 80047c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e030      	b.n	8004846 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047e4:	f7fe f838 	bl	8002858 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d302      	bcc.n	80047fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d11d      	bne.n	8004836 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004804:	2b40      	cmp	r3, #64	@ 0x40
 8004806:	d016      	beq.n	8004836 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2220      	movs	r2, #32
 8004812:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004822:	f043 0220 	orr.w	r2, r3, #32
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e007      	b.n	8004846 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	695b      	ldr	r3, [r3, #20]
 800483c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004840:	2b40      	cmp	r3, #64	@ 0x40
 8004842:	d1ae      	bne.n	80047a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004860:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004864:	d11b      	bne.n	800489e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800486e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2220      	movs	r2, #32
 800487a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488a:	f043 0204 	orr.w	r2, r3, #4
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e000      	b.n	80048a0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bc80      	pop	{r7}
 80048a8:	4770      	bx	lr
	...

080048ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e272      	b.n	8004da4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f000 8087 	beq.w	80049da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80048cc:	4b92      	ldr	r3, [pc, #584]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f003 030c 	and.w	r3, r3, #12
 80048d4:	2b04      	cmp	r3, #4
 80048d6:	d00c      	beq.n	80048f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80048d8:	4b8f      	ldr	r3, [pc, #572]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f003 030c 	and.w	r3, r3, #12
 80048e0:	2b08      	cmp	r3, #8
 80048e2:	d112      	bne.n	800490a <HAL_RCC_OscConfig+0x5e>
 80048e4:	4b8c      	ldr	r3, [pc, #560]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048f0:	d10b      	bne.n	800490a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048f2:	4b89      	ldr	r3, [pc, #548]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d06c      	beq.n	80049d8 <HAL_RCC_OscConfig+0x12c>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d168      	bne.n	80049d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e24c      	b.n	8004da4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004912:	d106      	bne.n	8004922 <HAL_RCC_OscConfig+0x76>
 8004914:	4b80      	ldr	r3, [pc, #512]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a7f      	ldr	r2, [pc, #508]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 800491a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800491e:	6013      	str	r3, [r2, #0]
 8004920:	e02e      	b.n	8004980 <HAL_RCC_OscConfig+0xd4>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10c      	bne.n	8004944 <HAL_RCC_OscConfig+0x98>
 800492a:	4b7b      	ldr	r3, [pc, #492]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a7a      	ldr	r2, [pc, #488]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 8004930:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004934:	6013      	str	r3, [r2, #0]
 8004936:	4b78      	ldr	r3, [pc, #480]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a77      	ldr	r2, [pc, #476]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 800493c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004940:	6013      	str	r3, [r2, #0]
 8004942:	e01d      	b.n	8004980 <HAL_RCC_OscConfig+0xd4>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800494c:	d10c      	bne.n	8004968 <HAL_RCC_OscConfig+0xbc>
 800494e:	4b72      	ldr	r3, [pc, #456]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a71      	ldr	r2, [pc, #452]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 8004954:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004958:	6013      	str	r3, [r2, #0]
 800495a:	4b6f      	ldr	r3, [pc, #444]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a6e      	ldr	r2, [pc, #440]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 8004960:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004964:	6013      	str	r3, [r2, #0]
 8004966:	e00b      	b.n	8004980 <HAL_RCC_OscConfig+0xd4>
 8004968:	4b6b      	ldr	r3, [pc, #428]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a6a      	ldr	r2, [pc, #424]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 800496e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004972:	6013      	str	r3, [r2, #0]
 8004974:	4b68      	ldr	r3, [pc, #416]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a67      	ldr	r2, [pc, #412]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 800497a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800497e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d013      	beq.n	80049b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004988:	f7fd ff66 	bl	8002858 <HAL_GetTick>
 800498c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800498e:	e008      	b.n	80049a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004990:	f7fd ff62 	bl	8002858 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b64      	cmp	r3, #100	@ 0x64
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e200      	b.n	8004da4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049a2:	4b5d      	ldr	r3, [pc, #372]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0f0      	beq.n	8004990 <HAL_RCC_OscConfig+0xe4>
 80049ae:	e014      	b.n	80049da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b0:	f7fd ff52 	bl	8002858 <HAL_GetTick>
 80049b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049b6:	e008      	b.n	80049ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049b8:	f7fd ff4e 	bl	8002858 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	2b64      	cmp	r3, #100	@ 0x64
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e1ec      	b.n	8004da4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ca:	4b53      	ldr	r3, [pc, #332]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1f0      	bne.n	80049b8 <HAL_RCC_OscConfig+0x10c>
 80049d6:	e000      	b.n	80049da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d063      	beq.n	8004aae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049e6:	4b4c      	ldr	r3, [pc, #304]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f003 030c 	and.w	r3, r3, #12
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00b      	beq.n	8004a0a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80049f2:	4b49      	ldr	r3, [pc, #292]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f003 030c 	and.w	r3, r3, #12
 80049fa:	2b08      	cmp	r3, #8
 80049fc:	d11c      	bne.n	8004a38 <HAL_RCC_OscConfig+0x18c>
 80049fe:	4b46      	ldr	r3, [pc, #280]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d116      	bne.n	8004a38 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a0a:	4b43      	ldr	r3, [pc, #268]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d005      	beq.n	8004a22 <HAL_RCC_OscConfig+0x176>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d001      	beq.n	8004a22 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e1c0      	b.n	8004da4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a22:	4b3d      	ldr	r3, [pc, #244]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	00db      	lsls	r3, r3, #3
 8004a30:	4939      	ldr	r1, [pc, #228]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a36:	e03a      	b.n	8004aae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d020      	beq.n	8004a82 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a40:	4b36      	ldr	r3, [pc, #216]	@ (8004b1c <HAL_RCC_OscConfig+0x270>)
 8004a42:	2201      	movs	r2, #1
 8004a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a46:	f7fd ff07 	bl	8002858 <HAL_GetTick>
 8004a4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a4c:	e008      	b.n	8004a60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a4e:	f7fd ff03 	bl	8002858 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d901      	bls.n	8004a60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e1a1      	b.n	8004da4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a60:	4b2d      	ldr	r3, [pc, #180]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0302 	and.w	r3, r3, #2
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d0f0      	beq.n	8004a4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a6c:	4b2a      	ldr	r3, [pc, #168]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	00db      	lsls	r3, r3, #3
 8004a7a:	4927      	ldr	r1, [pc, #156]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	600b      	str	r3, [r1, #0]
 8004a80:	e015      	b.n	8004aae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a82:	4b26      	ldr	r3, [pc, #152]	@ (8004b1c <HAL_RCC_OscConfig+0x270>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a88:	f7fd fee6 	bl	8002858 <HAL_GetTick>
 8004a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a8e:	e008      	b.n	8004aa2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a90:	f7fd fee2 	bl	8002858 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e180      	b.n	8004da4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aa2:	4b1d      	ldr	r3, [pc, #116]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1f0      	bne.n	8004a90 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0308 	and.w	r3, r3, #8
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d03a      	beq.n	8004b30 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d019      	beq.n	8004af6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ac2:	4b17      	ldr	r3, [pc, #92]	@ (8004b20 <HAL_RCC_OscConfig+0x274>)
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ac8:	f7fd fec6 	bl	8002858 <HAL_GetTick>
 8004acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ad0:	f7fd fec2 	bl	8002858 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e160      	b.n	8004da4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d0f0      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004aee:	2001      	movs	r0, #1
 8004af0:	f000 face 	bl	8005090 <RCC_Delay>
 8004af4:	e01c      	b.n	8004b30 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004af6:	4b0a      	ldr	r3, [pc, #40]	@ (8004b20 <HAL_RCC_OscConfig+0x274>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004afc:	f7fd feac 	bl	8002858 <HAL_GetTick>
 8004b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b02:	e00f      	b.n	8004b24 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b04:	f7fd fea8 	bl	8002858 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d908      	bls.n	8004b24 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e146      	b.n	8004da4 <HAL_RCC_OscConfig+0x4f8>
 8004b16:	bf00      	nop
 8004b18:	40021000 	.word	0x40021000
 8004b1c:	42420000 	.word	0x42420000
 8004b20:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b24:	4b92      	ldr	r3, [pc, #584]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1e9      	bne.n	8004b04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0304 	and.w	r3, r3, #4
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 80a6 	beq.w	8004c8a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b42:	4b8b      	ldr	r3, [pc, #556]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004b44:	69db      	ldr	r3, [r3, #28]
 8004b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d10d      	bne.n	8004b6a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b4e:	4b88      	ldr	r3, [pc, #544]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004b50:	69db      	ldr	r3, [r3, #28]
 8004b52:	4a87      	ldr	r2, [pc, #540]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004b54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b58:	61d3      	str	r3, [r2, #28]
 8004b5a:	4b85      	ldr	r3, [pc, #532]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004b5c:	69db      	ldr	r3, [r3, #28]
 8004b5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b62:	60bb      	str	r3, [r7, #8]
 8004b64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b66:	2301      	movs	r3, #1
 8004b68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b6a:	4b82      	ldr	r3, [pc, #520]	@ (8004d74 <HAL_RCC_OscConfig+0x4c8>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d118      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b76:	4b7f      	ldr	r3, [pc, #508]	@ (8004d74 <HAL_RCC_OscConfig+0x4c8>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a7e      	ldr	r2, [pc, #504]	@ (8004d74 <HAL_RCC_OscConfig+0x4c8>)
 8004b7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b82:	f7fd fe69 	bl	8002858 <HAL_GetTick>
 8004b86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b88:	e008      	b.n	8004b9c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b8a:	f7fd fe65 	bl	8002858 <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	2b64      	cmp	r3, #100	@ 0x64
 8004b96:	d901      	bls.n	8004b9c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e103      	b.n	8004da4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b9c:	4b75      	ldr	r3, [pc, #468]	@ (8004d74 <HAL_RCC_OscConfig+0x4c8>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d0f0      	beq.n	8004b8a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d106      	bne.n	8004bbe <HAL_RCC_OscConfig+0x312>
 8004bb0:	4b6f      	ldr	r3, [pc, #444]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
 8004bb4:	4a6e      	ldr	r2, [pc, #440]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004bb6:	f043 0301 	orr.w	r3, r3, #1
 8004bba:	6213      	str	r3, [r2, #32]
 8004bbc:	e02d      	b.n	8004c1a <HAL_RCC_OscConfig+0x36e>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d10c      	bne.n	8004be0 <HAL_RCC_OscConfig+0x334>
 8004bc6:	4b6a      	ldr	r3, [pc, #424]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	4a69      	ldr	r2, [pc, #420]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004bcc:	f023 0301 	bic.w	r3, r3, #1
 8004bd0:	6213      	str	r3, [r2, #32]
 8004bd2:	4b67      	ldr	r3, [pc, #412]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	4a66      	ldr	r2, [pc, #408]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004bd8:	f023 0304 	bic.w	r3, r3, #4
 8004bdc:	6213      	str	r3, [r2, #32]
 8004bde:	e01c      	b.n	8004c1a <HAL_RCC_OscConfig+0x36e>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	2b05      	cmp	r3, #5
 8004be6:	d10c      	bne.n	8004c02 <HAL_RCC_OscConfig+0x356>
 8004be8:	4b61      	ldr	r3, [pc, #388]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004bea:	6a1b      	ldr	r3, [r3, #32]
 8004bec:	4a60      	ldr	r2, [pc, #384]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004bee:	f043 0304 	orr.w	r3, r3, #4
 8004bf2:	6213      	str	r3, [r2, #32]
 8004bf4:	4b5e      	ldr	r3, [pc, #376]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004bf6:	6a1b      	ldr	r3, [r3, #32]
 8004bf8:	4a5d      	ldr	r2, [pc, #372]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004bfa:	f043 0301 	orr.w	r3, r3, #1
 8004bfe:	6213      	str	r3, [r2, #32]
 8004c00:	e00b      	b.n	8004c1a <HAL_RCC_OscConfig+0x36e>
 8004c02:	4b5b      	ldr	r3, [pc, #364]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	4a5a      	ldr	r2, [pc, #360]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004c08:	f023 0301 	bic.w	r3, r3, #1
 8004c0c:	6213      	str	r3, [r2, #32]
 8004c0e:	4b58      	ldr	r3, [pc, #352]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	4a57      	ldr	r2, [pc, #348]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004c14:	f023 0304 	bic.w	r3, r3, #4
 8004c18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d015      	beq.n	8004c4e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c22:	f7fd fe19 	bl	8002858 <HAL_GetTick>
 8004c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c28:	e00a      	b.n	8004c40 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c2a:	f7fd fe15 	bl	8002858 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d901      	bls.n	8004c40 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e0b1      	b.n	8004da4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c40:	4b4b      	ldr	r3, [pc, #300]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	f003 0302 	and.w	r3, r3, #2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d0ee      	beq.n	8004c2a <HAL_RCC_OscConfig+0x37e>
 8004c4c:	e014      	b.n	8004c78 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c4e:	f7fd fe03 	bl	8002858 <HAL_GetTick>
 8004c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c54:	e00a      	b.n	8004c6c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c56:	f7fd fdff 	bl	8002858 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d901      	bls.n	8004c6c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e09b      	b.n	8004da4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c6c:	4b40      	ldr	r3, [pc, #256]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	f003 0302 	and.w	r3, r3, #2
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1ee      	bne.n	8004c56 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c78:	7dfb      	ldrb	r3, [r7, #23]
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d105      	bne.n	8004c8a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c7e:	4b3c      	ldr	r3, [pc, #240]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004c80:	69db      	ldr	r3, [r3, #28]
 8004c82:	4a3b      	ldr	r2, [pc, #236]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004c84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c88:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	69db      	ldr	r3, [r3, #28]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f000 8087 	beq.w	8004da2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c94:	4b36      	ldr	r3, [pc, #216]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f003 030c 	and.w	r3, r3, #12
 8004c9c:	2b08      	cmp	r3, #8
 8004c9e:	d061      	beq.n	8004d64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	69db      	ldr	r3, [r3, #28]
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d146      	bne.n	8004d36 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ca8:	4b33      	ldr	r3, [pc, #204]	@ (8004d78 <HAL_RCC_OscConfig+0x4cc>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cae:	f7fd fdd3 	bl	8002858 <HAL_GetTick>
 8004cb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cb4:	e008      	b.n	8004cc8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cb6:	f7fd fdcf 	bl	8002858 <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d901      	bls.n	8004cc8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e06d      	b.n	8004da4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cc8:	4b29      	ldr	r3, [pc, #164]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1f0      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a1b      	ldr	r3, [r3, #32]
 8004cd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cdc:	d108      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004cde:	4b24      	ldr	r3, [pc, #144]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	4921      	ldr	r1, [pc, #132]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cf0:	4b1f      	ldr	r3, [pc, #124]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a19      	ldr	r1, [r3, #32]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d00:	430b      	orrs	r3, r1
 8004d02:	491b      	ldr	r1, [pc, #108]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d08:	4b1b      	ldr	r3, [pc, #108]	@ (8004d78 <HAL_RCC_OscConfig+0x4cc>)
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d0e:	f7fd fda3 	bl	8002858 <HAL_GetTick>
 8004d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d14:	e008      	b.n	8004d28 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d16:	f7fd fd9f 	bl	8002858 <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d901      	bls.n	8004d28 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e03d      	b.n	8004da4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d28:	4b11      	ldr	r3, [pc, #68]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d0f0      	beq.n	8004d16 <HAL_RCC_OscConfig+0x46a>
 8004d34:	e035      	b.n	8004da2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d36:	4b10      	ldr	r3, [pc, #64]	@ (8004d78 <HAL_RCC_OscConfig+0x4cc>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d3c:	f7fd fd8c 	bl	8002858 <HAL_GetTick>
 8004d40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d42:	e008      	b.n	8004d56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d44:	f7fd fd88 	bl	8002858 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e026      	b.n	8004da4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d56:	4b06      	ldr	r3, [pc, #24]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1f0      	bne.n	8004d44 <HAL_RCC_OscConfig+0x498>
 8004d62:	e01e      	b.n	8004da2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	69db      	ldr	r3, [r3, #28]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d107      	bne.n	8004d7c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e019      	b.n	8004da4 <HAL_RCC_OscConfig+0x4f8>
 8004d70:	40021000 	.word	0x40021000
 8004d74:	40007000 	.word	0x40007000
 8004d78:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8004dac <HAL_RCC_OscConfig+0x500>)
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d106      	bne.n	8004d9e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d001      	beq.n	8004da2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e000      	b.n	8004da4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3718      	adds	r7, #24
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	40021000 	.word	0x40021000

08004db0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d101      	bne.n	8004dc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e0d0      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004dc4:	4b6a      	ldr	r3, [pc, #424]	@ (8004f70 <HAL_RCC_ClockConfig+0x1c0>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0307 	and.w	r3, r3, #7
 8004dcc:	683a      	ldr	r2, [r7, #0]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d910      	bls.n	8004df4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dd2:	4b67      	ldr	r3, [pc, #412]	@ (8004f70 <HAL_RCC_ClockConfig+0x1c0>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f023 0207 	bic.w	r2, r3, #7
 8004dda:	4965      	ldr	r1, [pc, #404]	@ (8004f70 <HAL_RCC_ClockConfig+0x1c0>)
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004de2:	4b63      	ldr	r3, [pc, #396]	@ (8004f70 <HAL_RCC_ClockConfig+0x1c0>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0307 	and.w	r3, r3, #7
 8004dea:	683a      	ldr	r2, [r7, #0]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d001      	beq.n	8004df4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e0b8      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0302 	and.w	r3, r3, #2
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d020      	beq.n	8004e42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0304 	and.w	r3, r3, #4
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d005      	beq.n	8004e18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e0c:	4b59      	ldr	r3, [pc, #356]	@ (8004f74 <HAL_RCC_ClockConfig+0x1c4>)
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	4a58      	ldr	r2, [pc, #352]	@ (8004f74 <HAL_RCC_ClockConfig+0x1c4>)
 8004e12:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004e16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0308 	and.w	r3, r3, #8
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d005      	beq.n	8004e30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e24:	4b53      	ldr	r3, [pc, #332]	@ (8004f74 <HAL_RCC_ClockConfig+0x1c4>)
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	4a52      	ldr	r2, [pc, #328]	@ (8004f74 <HAL_RCC_ClockConfig+0x1c4>)
 8004e2a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004e2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e30:	4b50      	ldr	r3, [pc, #320]	@ (8004f74 <HAL_RCC_ClockConfig+0x1c4>)
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	494d      	ldr	r1, [pc, #308]	@ (8004f74 <HAL_RCC_ClockConfig+0x1c4>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d040      	beq.n	8004ed0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d107      	bne.n	8004e66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e56:	4b47      	ldr	r3, [pc, #284]	@ (8004f74 <HAL_RCC_ClockConfig+0x1c4>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d115      	bne.n	8004e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e07f      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d107      	bne.n	8004e7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e6e:	4b41      	ldr	r3, [pc, #260]	@ (8004f74 <HAL_RCC_ClockConfig+0x1c4>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d109      	bne.n	8004e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e073      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e7e:	4b3d      	ldr	r3, [pc, #244]	@ (8004f74 <HAL_RCC_ClockConfig+0x1c4>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e06b      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e8e:	4b39      	ldr	r3, [pc, #228]	@ (8004f74 <HAL_RCC_ClockConfig+0x1c4>)
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f023 0203 	bic.w	r2, r3, #3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	4936      	ldr	r1, [pc, #216]	@ (8004f74 <HAL_RCC_ClockConfig+0x1c4>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ea0:	f7fd fcda 	bl	8002858 <HAL_GetTick>
 8004ea4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ea6:	e00a      	b.n	8004ebe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ea8:	f7fd fcd6 	bl	8002858 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e053      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ebe:	4b2d      	ldr	r3, [pc, #180]	@ (8004f74 <HAL_RCC_ClockConfig+0x1c4>)
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f003 020c 	and.w	r2, r3, #12
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d1eb      	bne.n	8004ea8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ed0:	4b27      	ldr	r3, [pc, #156]	@ (8004f70 <HAL_RCC_ClockConfig+0x1c0>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0307 	and.w	r3, r3, #7
 8004ed8:	683a      	ldr	r2, [r7, #0]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d210      	bcs.n	8004f00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ede:	4b24      	ldr	r3, [pc, #144]	@ (8004f70 <HAL_RCC_ClockConfig+0x1c0>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f023 0207 	bic.w	r2, r3, #7
 8004ee6:	4922      	ldr	r1, [pc, #136]	@ (8004f70 <HAL_RCC_ClockConfig+0x1c0>)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eee:	4b20      	ldr	r3, [pc, #128]	@ (8004f70 <HAL_RCC_ClockConfig+0x1c0>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0307 	and.w	r3, r3, #7
 8004ef6:	683a      	ldr	r2, [r7, #0]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d001      	beq.n	8004f00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e032      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0304 	and.w	r3, r3, #4
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d008      	beq.n	8004f1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f0c:	4b19      	ldr	r3, [pc, #100]	@ (8004f74 <HAL_RCC_ClockConfig+0x1c4>)
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	4916      	ldr	r1, [pc, #88]	@ (8004f74 <HAL_RCC_ClockConfig+0x1c4>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0308 	and.w	r3, r3, #8
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d009      	beq.n	8004f3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f2a:	4b12      	ldr	r3, [pc, #72]	@ (8004f74 <HAL_RCC_ClockConfig+0x1c4>)
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	00db      	lsls	r3, r3, #3
 8004f38:	490e      	ldr	r1, [pc, #56]	@ (8004f74 <HAL_RCC_ClockConfig+0x1c4>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f3e:	f000 f821 	bl	8004f84 <HAL_RCC_GetSysClockFreq>
 8004f42:	4602      	mov	r2, r0
 8004f44:	4b0b      	ldr	r3, [pc, #44]	@ (8004f74 <HAL_RCC_ClockConfig+0x1c4>)
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	091b      	lsrs	r3, r3, #4
 8004f4a:	f003 030f 	and.w	r3, r3, #15
 8004f4e:	490a      	ldr	r1, [pc, #40]	@ (8004f78 <HAL_RCC_ClockConfig+0x1c8>)
 8004f50:	5ccb      	ldrb	r3, [r1, r3]
 8004f52:	fa22 f303 	lsr.w	r3, r2, r3
 8004f56:	4a09      	ldr	r2, [pc, #36]	@ (8004f7c <HAL_RCC_ClockConfig+0x1cc>)
 8004f58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004f5a:	4b09      	ldr	r3, [pc, #36]	@ (8004f80 <HAL_RCC_ClockConfig+0x1d0>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7fd fc38 	bl	80027d4 <HAL_InitTick>

  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	40022000 	.word	0x40022000
 8004f74:	40021000 	.word	0x40021000
 8004f78:	080084a4 	.word	0x080084a4
 8004f7c:	20000080 	.word	0x20000080
 8004f80:	20000084 	.word	0x20000084

08004f84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b087      	sub	sp, #28
 8004f88:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	60fb      	str	r3, [r7, #12]
 8004f8e:	2300      	movs	r3, #0
 8004f90:	60bb      	str	r3, [r7, #8]
 8004f92:	2300      	movs	r3, #0
 8004f94:	617b      	str	r3, [r7, #20]
 8004f96:	2300      	movs	r3, #0
 8004f98:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8005018 <HAL_RCC_GetSysClockFreq+0x94>)
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f003 030c 	and.w	r3, r3, #12
 8004faa:	2b04      	cmp	r3, #4
 8004fac:	d002      	beq.n	8004fb4 <HAL_RCC_GetSysClockFreq+0x30>
 8004fae:	2b08      	cmp	r3, #8
 8004fb0:	d003      	beq.n	8004fba <HAL_RCC_GetSysClockFreq+0x36>
 8004fb2:	e027      	b.n	8005004 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004fb4:	4b19      	ldr	r3, [pc, #100]	@ (800501c <HAL_RCC_GetSysClockFreq+0x98>)
 8004fb6:	613b      	str	r3, [r7, #16]
      break;
 8004fb8:	e027      	b.n	800500a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	0c9b      	lsrs	r3, r3, #18
 8004fbe:	f003 030f 	and.w	r3, r3, #15
 8004fc2:	4a17      	ldr	r2, [pc, #92]	@ (8005020 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004fc4:	5cd3      	ldrb	r3, [r2, r3]
 8004fc6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d010      	beq.n	8004ff4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004fd2:	4b11      	ldr	r3, [pc, #68]	@ (8005018 <HAL_RCC_GetSysClockFreq+0x94>)
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	0c5b      	lsrs	r3, r3, #17
 8004fd8:	f003 0301 	and.w	r3, r3, #1
 8004fdc:	4a11      	ldr	r2, [pc, #68]	@ (8005024 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004fde:	5cd3      	ldrb	r3, [r2, r3]
 8004fe0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a0d      	ldr	r2, [pc, #52]	@ (800501c <HAL_RCC_GetSysClockFreq+0x98>)
 8004fe6:	fb03 f202 	mul.w	r2, r3, r2
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff0:	617b      	str	r3, [r7, #20]
 8004ff2:	e004      	b.n	8004ffe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a0c      	ldr	r2, [pc, #48]	@ (8005028 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004ff8:	fb02 f303 	mul.w	r3, r2, r3
 8004ffc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	613b      	str	r3, [r7, #16]
      break;
 8005002:	e002      	b.n	800500a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005004:	4b05      	ldr	r3, [pc, #20]	@ (800501c <HAL_RCC_GetSysClockFreq+0x98>)
 8005006:	613b      	str	r3, [r7, #16]
      break;
 8005008:	bf00      	nop
    }
  }
  return sysclockfreq;
 800500a:	693b      	ldr	r3, [r7, #16]
}
 800500c:	4618      	mov	r0, r3
 800500e:	371c      	adds	r7, #28
 8005010:	46bd      	mov	sp, r7
 8005012:	bc80      	pop	{r7}
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	40021000 	.word	0x40021000
 800501c:	007a1200 	.word	0x007a1200
 8005020:	080084bc 	.word	0x080084bc
 8005024:	080084cc 	.word	0x080084cc
 8005028:	003d0900 	.word	0x003d0900

0800502c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800502c:	b480      	push	{r7}
 800502e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005030:	4b02      	ldr	r3, [pc, #8]	@ (800503c <HAL_RCC_GetHCLKFreq+0x10>)
 8005032:	681b      	ldr	r3, [r3, #0]
}
 8005034:	4618      	mov	r0, r3
 8005036:	46bd      	mov	sp, r7
 8005038:	bc80      	pop	{r7}
 800503a:	4770      	bx	lr
 800503c:	20000080 	.word	0x20000080

08005040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005044:	f7ff fff2 	bl	800502c <HAL_RCC_GetHCLKFreq>
 8005048:	4602      	mov	r2, r0
 800504a:	4b05      	ldr	r3, [pc, #20]	@ (8005060 <HAL_RCC_GetPCLK1Freq+0x20>)
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	0a1b      	lsrs	r3, r3, #8
 8005050:	f003 0307 	and.w	r3, r3, #7
 8005054:	4903      	ldr	r1, [pc, #12]	@ (8005064 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005056:	5ccb      	ldrb	r3, [r1, r3]
 8005058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800505c:	4618      	mov	r0, r3
 800505e:	bd80      	pop	{r7, pc}
 8005060:	40021000 	.word	0x40021000
 8005064:	080084b4 	.word	0x080084b4

08005068 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800506c:	f7ff ffde 	bl	800502c <HAL_RCC_GetHCLKFreq>
 8005070:	4602      	mov	r2, r0
 8005072:	4b05      	ldr	r3, [pc, #20]	@ (8005088 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	0adb      	lsrs	r3, r3, #11
 8005078:	f003 0307 	and.w	r3, r3, #7
 800507c:	4903      	ldr	r1, [pc, #12]	@ (800508c <HAL_RCC_GetPCLK2Freq+0x24>)
 800507e:	5ccb      	ldrb	r3, [r1, r3]
 8005080:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005084:	4618      	mov	r0, r3
 8005086:	bd80      	pop	{r7, pc}
 8005088:	40021000 	.word	0x40021000
 800508c:	080084b4 	.word	0x080084b4

08005090 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005098:	4b0a      	ldr	r3, [pc, #40]	@ (80050c4 <RCC_Delay+0x34>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a0a      	ldr	r2, [pc, #40]	@ (80050c8 <RCC_Delay+0x38>)
 800509e:	fba2 2303 	umull	r2, r3, r2, r3
 80050a2:	0a5b      	lsrs	r3, r3, #9
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	fb02 f303 	mul.w	r3, r2, r3
 80050aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80050ac:	bf00      	nop
  }
  while (Delay --);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	1e5a      	subs	r2, r3, #1
 80050b2:	60fa      	str	r2, [r7, #12]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1f9      	bne.n	80050ac <RCC_Delay+0x1c>
}
 80050b8:	bf00      	nop
 80050ba:	bf00      	nop
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	bc80      	pop	{r7}
 80050c2:	4770      	bx	lr
 80050c4:	20000080 	.word	0x20000080
 80050c8:	10624dd3 	.word	0x10624dd3

080050cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e042      	b.n	8005164 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d106      	bne.n	80050f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7fd f9ec 	bl	80024d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2224      	movs	r2, #36	@ 0x24
 80050fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68da      	ldr	r2, [r3, #12]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800510e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 fa09 	bl	8005528 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	691a      	ldr	r2, [r3, #16]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005124:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	695a      	ldr	r2, [r3, #20]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005134:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68da      	ldr	r2, [r3, #12]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005144:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2220      	movs	r2, #32
 8005150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2220      	movs	r2, #32
 8005158:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3708      	adds	r7, #8
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b08a      	sub	sp, #40	@ 0x28
 8005170:	af02      	add	r7, sp, #8
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	603b      	str	r3, [r7, #0]
 8005178:	4613      	mov	r3, r2
 800517a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800517c:	2300      	movs	r3, #0
 800517e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b20      	cmp	r3, #32
 800518a:	d175      	bne.n	8005278 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d002      	beq.n	8005198 <HAL_UART_Transmit+0x2c>
 8005192:	88fb      	ldrh	r3, [r7, #6]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d101      	bne.n	800519c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e06e      	b.n	800527a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2221      	movs	r2, #33	@ 0x21
 80051a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051aa:	f7fd fb55 	bl	8002858 <HAL_GetTick>
 80051ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	88fa      	ldrh	r2, [r7, #6]
 80051b4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	88fa      	ldrh	r2, [r7, #6]
 80051ba:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051c4:	d108      	bne.n	80051d8 <HAL_UART_Transmit+0x6c>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d104      	bne.n	80051d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80051ce:	2300      	movs	r3, #0
 80051d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	61bb      	str	r3, [r7, #24]
 80051d6:	e003      	b.n	80051e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051dc:	2300      	movs	r3, #0
 80051de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80051e0:	e02e      	b.n	8005240 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	2200      	movs	r2, #0
 80051ea:	2180      	movs	r1, #128	@ 0x80
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	f000 f8df 	bl	80053b0 <UART_WaitOnFlagUntilTimeout>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d005      	beq.n	8005204 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2220      	movs	r2, #32
 80051fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e03a      	b.n	800527a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10b      	bne.n	8005222 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	881b      	ldrh	r3, [r3, #0]
 800520e:	461a      	mov	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005218:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	3302      	adds	r3, #2
 800521e:	61bb      	str	r3, [r7, #24]
 8005220:	e007      	b.n	8005232 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	781a      	ldrb	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	3301      	adds	r3, #1
 8005230:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005236:	b29b      	uxth	r3, r3
 8005238:	3b01      	subs	r3, #1
 800523a:	b29a      	uxth	r2, r3
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005244:	b29b      	uxth	r3, r3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1cb      	bne.n	80051e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	2200      	movs	r2, #0
 8005252:	2140      	movs	r1, #64	@ 0x40
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f000 f8ab 	bl	80053b0 <UART_WaitOnFlagUntilTimeout>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d005      	beq.n	800526c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2220      	movs	r2, #32
 8005264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e006      	b.n	800527a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2220      	movs	r2, #32
 8005270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005274:	2300      	movs	r3, #0
 8005276:	e000      	b.n	800527a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005278:	2302      	movs	r3, #2
  }
}
 800527a:	4618      	mov	r0, r3
 800527c:	3720      	adds	r7, #32
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b08a      	sub	sp, #40	@ 0x28
 8005286:	af02      	add	r7, sp, #8
 8005288:	60f8      	str	r0, [r7, #12]
 800528a:	60b9      	str	r1, [r7, #8]
 800528c:	603b      	str	r3, [r7, #0]
 800528e:	4613      	mov	r3, r2
 8005290:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005292:	2300      	movs	r3, #0
 8005294:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b20      	cmp	r3, #32
 80052a0:	f040 8081 	bne.w	80053a6 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d002      	beq.n	80052b0 <HAL_UART_Receive+0x2e>
 80052aa:	88fb      	ldrh	r3, [r7, #6]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d101      	bne.n	80052b4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e079      	b.n	80053a8 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2222      	movs	r2, #34	@ 0x22
 80052be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052c8:	f7fd fac6 	bl	8002858 <HAL_GetTick>
 80052cc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	88fa      	ldrh	r2, [r7, #6]
 80052d2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	88fa      	ldrh	r2, [r7, #6]
 80052d8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052e2:	d108      	bne.n	80052f6 <HAL_UART_Receive+0x74>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d104      	bne.n	80052f6 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80052ec:	2300      	movs	r3, #0
 80052ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	61bb      	str	r3, [r7, #24]
 80052f4:	e003      	b.n	80052fe <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052fa:	2300      	movs	r3, #0
 80052fc:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80052fe:	e047      	b.n	8005390 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	9300      	str	r3, [sp, #0]
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	2200      	movs	r2, #0
 8005308:	2120      	movs	r1, #32
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f000 f850 	bl	80053b0 <UART_WaitOnFlagUntilTimeout>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d005      	beq.n	8005322 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2220      	movs	r2, #32
 800531a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e042      	b.n	80053a8 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d10c      	bne.n	8005342 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	b29b      	uxth	r3, r3
 8005330:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005334:	b29a      	uxth	r2, r3
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	3302      	adds	r3, #2
 800533e:	61bb      	str	r3, [r7, #24]
 8005340:	e01f      	b.n	8005382 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800534a:	d007      	beq.n	800535c <HAL_UART_Receive+0xda>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10a      	bne.n	800536a <HAL_UART_Receive+0xe8>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d106      	bne.n	800536a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	b2da      	uxtb	r2, r3
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	701a      	strb	r2, [r3, #0]
 8005368:	e008      	b.n	800537c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	b2db      	uxtb	r3, r3
 8005372:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005376:	b2da      	uxtb	r2, r3
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	3301      	adds	r3, #1
 8005380:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005386:	b29b      	uxth	r3, r3
 8005388:	3b01      	subs	r3, #1
 800538a:	b29a      	uxth	r2, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005394:	b29b      	uxth	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1b2      	bne.n	8005300 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2220      	movs	r2, #32
 800539e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80053a2:	2300      	movs	r3, #0
 80053a4:	e000      	b.n	80053a8 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80053a6:	2302      	movs	r3, #2
  }
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3720      	adds	r7, #32
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b086      	sub	sp, #24
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	603b      	str	r3, [r7, #0]
 80053bc:	4613      	mov	r3, r2
 80053be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053c0:	e03b      	b.n	800543a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053c2:	6a3b      	ldr	r3, [r7, #32]
 80053c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c8:	d037      	beq.n	800543a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ca:	f7fd fa45 	bl	8002858 <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	6a3a      	ldr	r2, [r7, #32]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d302      	bcc.n	80053e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80053da:	6a3b      	ldr	r3, [r7, #32]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d101      	bne.n	80053e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e03a      	b.n	800545a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	f003 0304 	and.w	r3, r3, #4
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d023      	beq.n	800543a <UART_WaitOnFlagUntilTimeout+0x8a>
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	2b80      	cmp	r3, #128	@ 0x80
 80053f6:	d020      	beq.n	800543a <UART_WaitOnFlagUntilTimeout+0x8a>
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	2b40      	cmp	r3, #64	@ 0x40
 80053fc:	d01d      	beq.n	800543a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0308 	and.w	r3, r3, #8
 8005408:	2b08      	cmp	r3, #8
 800540a:	d116      	bne.n	800543a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800540c:	2300      	movs	r3, #0
 800540e:	617b      	str	r3, [r7, #20]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	617b      	str	r3, [r7, #20]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	617b      	str	r3, [r7, #20]
 8005420:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	f000 f81d 	bl	8005462 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2208      	movs	r2, #8
 800542c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e00f      	b.n	800545a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	4013      	ands	r3, r2
 8005444:	68ba      	ldr	r2, [r7, #8]
 8005446:	429a      	cmp	r2, r3
 8005448:	bf0c      	ite	eq
 800544a:	2301      	moveq	r3, #1
 800544c:	2300      	movne	r3, #0
 800544e:	b2db      	uxtb	r3, r3
 8005450:	461a      	mov	r2, r3
 8005452:	79fb      	ldrb	r3, [r7, #7]
 8005454:	429a      	cmp	r2, r3
 8005456:	d0b4      	beq.n	80053c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3718      	adds	r7, #24
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005462:	b480      	push	{r7}
 8005464:	b095      	sub	sp, #84	@ 0x54
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	330c      	adds	r3, #12
 8005470:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005474:	e853 3f00 	ldrex	r3, [r3]
 8005478:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800547a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800547c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005480:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	330c      	adds	r3, #12
 8005488:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800548a:	643a      	str	r2, [r7, #64]	@ 0x40
 800548c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005490:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005492:	e841 2300 	strex	r3, r2, [r1]
 8005496:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1e5      	bne.n	800546a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	3314      	adds	r3, #20
 80054a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a6:	6a3b      	ldr	r3, [r7, #32]
 80054a8:	e853 3f00 	ldrex	r3, [r3]
 80054ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	f023 0301 	bic.w	r3, r3, #1
 80054b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	3314      	adds	r3, #20
 80054bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054c6:	e841 2300 	strex	r3, r2, [r1]
 80054ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1e5      	bne.n	800549e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d119      	bne.n	800550e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	330c      	adds	r3, #12
 80054e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	e853 3f00 	ldrex	r3, [r3]
 80054e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	f023 0310 	bic.w	r3, r3, #16
 80054f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	330c      	adds	r3, #12
 80054f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054fa:	61ba      	str	r2, [r7, #24]
 80054fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fe:	6979      	ldr	r1, [r7, #20]
 8005500:	69ba      	ldr	r2, [r7, #24]
 8005502:	e841 2300 	strex	r3, r2, [r1]
 8005506:	613b      	str	r3, [r7, #16]
   return(result);
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1e5      	bne.n	80054da <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2220      	movs	r2, #32
 8005512:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800551c:	bf00      	nop
 800551e:	3754      	adds	r7, #84	@ 0x54
 8005520:	46bd      	mov	sp, r7
 8005522:	bc80      	pop	{r7}
 8005524:	4770      	bx	lr
	...

08005528 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68da      	ldr	r2, [r3, #12]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	430a      	orrs	r2, r1
 8005544:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	689a      	ldr	r2, [r3, #8]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	431a      	orrs	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	695b      	ldr	r3, [r3, #20]
 8005554:	4313      	orrs	r3, r2
 8005556:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005562:	f023 030c 	bic.w	r3, r3, #12
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	6812      	ldr	r2, [r2, #0]
 800556a:	68b9      	ldr	r1, [r7, #8]
 800556c:	430b      	orrs	r3, r1
 800556e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	699a      	ldr	r2, [r3, #24]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a2c      	ldr	r2, [pc, #176]	@ (800563c <UART_SetConfig+0x114>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d103      	bne.n	8005598 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005590:	f7ff fd6a 	bl	8005068 <HAL_RCC_GetPCLK2Freq>
 8005594:	60f8      	str	r0, [r7, #12]
 8005596:	e002      	b.n	800559e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005598:	f7ff fd52 	bl	8005040 <HAL_RCC_GetPCLK1Freq>
 800559c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	4613      	mov	r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	4413      	add	r3, r2
 80055a6:	009a      	lsls	r2, r3, #2
 80055a8:	441a      	add	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b4:	4a22      	ldr	r2, [pc, #136]	@ (8005640 <UART_SetConfig+0x118>)
 80055b6:	fba2 2303 	umull	r2, r3, r2, r3
 80055ba:	095b      	lsrs	r3, r3, #5
 80055bc:	0119      	lsls	r1, r3, #4
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	4613      	mov	r3, r2
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	4413      	add	r3, r2
 80055c6:	009a      	lsls	r2, r3, #2
 80055c8:	441a      	add	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80055d4:	4b1a      	ldr	r3, [pc, #104]	@ (8005640 <UART_SetConfig+0x118>)
 80055d6:	fba3 0302 	umull	r0, r3, r3, r2
 80055da:	095b      	lsrs	r3, r3, #5
 80055dc:	2064      	movs	r0, #100	@ 0x64
 80055de:	fb00 f303 	mul.w	r3, r0, r3
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	011b      	lsls	r3, r3, #4
 80055e6:	3332      	adds	r3, #50	@ 0x32
 80055e8:	4a15      	ldr	r2, [pc, #84]	@ (8005640 <UART_SetConfig+0x118>)
 80055ea:	fba2 2303 	umull	r2, r3, r2, r3
 80055ee:	095b      	lsrs	r3, r3, #5
 80055f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80055f4:	4419      	add	r1, r3
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	4613      	mov	r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	009a      	lsls	r2, r3, #2
 8005600:	441a      	add	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	fbb2 f2f3 	udiv	r2, r2, r3
 800560c:	4b0c      	ldr	r3, [pc, #48]	@ (8005640 <UART_SetConfig+0x118>)
 800560e:	fba3 0302 	umull	r0, r3, r3, r2
 8005612:	095b      	lsrs	r3, r3, #5
 8005614:	2064      	movs	r0, #100	@ 0x64
 8005616:	fb00 f303 	mul.w	r3, r0, r3
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	011b      	lsls	r3, r3, #4
 800561e:	3332      	adds	r3, #50	@ 0x32
 8005620:	4a07      	ldr	r2, [pc, #28]	@ (8005640 <UART_SetConfig+0x118>)
 8005622:	fba2 2303 	umull	r2, r3, r2, r3
 8005626:	095b      	lsrs	r3, r3, #5
 8005628:	f003 020f 	and.w	r2, r3, #15
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	440a      	add	r2, r1
 8005632:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005634:	bf00      	nop
 8005636:	3710      	adds	r7, #16
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	40013800 	.word	0x40013800
 8005640:	51eb851f 	.word	0x51eb851f

08005644 <_strtol_l.constprop.0>:
 8005644:	2b24      	cmp	r3, #36	@ 0x24
 8005646:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800564a:	4686      	mov	lr, r0
 800564c:	4690      	mov	r8, r2
 800564e:	d801      	bhi.n	8005654 <_strtol_l.constprop.0+0x10>
 8005650:	2b01      	cmp	r3, #1
 8005652:	d106      	bne.n	8005662 <_strtol_l.constprop.0+0x1e>
 8005654:	f000 fe7a 	bl	800634c <__errno>
 8005658:	2316      	movs	r3, #22
 800565a:	6003      	str	r3, [r0, #0]
 800565c:	2000      	movs	r0, #0
 800565e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005662:	460d      	mov	r5, r1
 8005664:	4833      	ldr	r0, [pc, #204]	@ (8005734 <_strtol_l.constprop.0+0xf0>)
 8005666:	462a      	mov	r2, r5
 8005668:	f815 4b01 	ldrb.w	r4, [r5], #1
 800566c:	5d06      	ldrb	r6, [r0, r4]
 800566e:	f016 0608 	ands.w	r6, r6, #8
 8005672:	d1f8      	bne.n	8005666 <_strtol_l.constprop.0+0x22>
 8005674:	2c2d      	cmp	r4, #45	@ 0x2d
 8005676:	d12d      	bne.n	80056d4 <_strtol_l.constprop.0+0x90>
 8005678:	2601      	movs	r6, #1
 800567a:	782c      	ldrb	r4, [r5, #0]
 800567c:	1c95      	adds	r5, r2, #2
 800567e:	f033 0210 	bics.w	r2, r3, #16
 8005682:	d109      	bne.n	8005698 <_strtol_l.constprop.0+0x54>
 8005684:	2c30      	cmp	r4, #48	@ 0x30
 8005686:	d12a      	bne.n	80056de <_strtol_l.constprop.0+0x9a>
 8005688:	782a      	ldrb	r2, [r5, #0]
 800568a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800568e:	2a58      	cmp	r2, #88	@ 0x58
 8005690:	d125      	bne.n	80056de <_strtol_l.constprop.0+0x9a>
 8005692:	2310      	movs	r3, #16
 8005694:	786c      	ldrb	r4, [r5, #1]
 8005696:	3502      	adds	r5, #2
 8005698:	2200      	movs	r2, #0
 800569a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800569e:	f10c 3cff 	add.w	ip, ip, #4294967295
 80056a2:	fbbc f9f3 	udiv	r9, ip, r3
 80056a6:	4610      	mov	r0, r2
 80056a8:	fb03 ca19 	mls	sl, r3, r9, ip
 80056ac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80056b0:	2f09      	cmp	r7, #9
 80056b2:	d81b      	bhi.n	80056ec <_strtol_l.constprop.0+0xa8>
 80056b4:	463c      	mov	r4, r7
 80056b6:	42a3      	cmp	r3, r4
 80056b8:	dd27      	ble.n	800570a <_strtol_l.constprop.0+0xc6>
 80056ba:	1c57      	adds	r7, r2, #1
 80056bc:	d007      	beq.n	80056ce <_strtol_l.constprop.0+0x8a>
 80056be:	4581      	cmp	r9, r0
 80056c0:	d320      	bcc.n	8005704 <_strtol_l.constprop.0+0xc0>
 80056c2:	d101      	bne.n	80056c8 <_strtol_l.constprop.0+0x84>
 80056c4:	45a2      	cmp	sl, r4
 80056c6:	db1d      	blt.n	8005704 <_strtol_l.constprop.0+0xc0>
 80056c8:	2201      	movs	r2, #1
 80056ca:	fb00 4003 	mla	r0, r0, r3, r4
 80056ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80056d2:	e7eb      	b.n	80056ac <_strtol_l.constprop.0+0x68>
 80056d4:	2c2b      	cmp	r4, #43	@ 0x2b
 80056d6:	bf04      	itt	eq
 80056d8:	782c      	ldrbeq	r4, [r5, #0]
 80056da:	1c95      	addeq	r5, r2, #2
 80056dc:	e7cf      	b.n	800567e <_strtol_l.constprop.0+0x3a>
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1da      	bne.n	8005698 <_strtol_l.constprop.0+0x54>
 80056e2:	2c30      	cmp	r4, #48	@ 0x30
 80056e4:	bf0c      	ite	eq
 80056e6:	2308      	moveq	r3, #8
 80056e8:	230a      	movne	r3, #10
 80056ea:	e7d5      	b.n	8005698 <_strtol_l.constprop.0+0x54>
 80056ec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80056f0:	2f19      	cmp	r7, #25
 80056f2:	d801      	bhi.n	80056f8 <_strtol_l.constprop.0+0xb4>
 80056f4:	3c37      	subs	r4, #55	@ 0x37
 80056f6:	e7de      	b.n	80056b6 <_strtol_l.constprop.0+0x72>
 80056f8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80056fc:	2f19      	cmp	r7, #25
 80056fe:	d804      	bhi.n	800570a <_strtol_l.constprop.0+0xc6>
 8005700:	3c57      	subs	r4, #87	@ 0x57
 8005702:	e7d8      	b.n	80056b6 <_strtol_l.constprop.0+0x72>
 8005704:	f04f 32ff 	mov.w	r2, #4294967295
 8005708:	e7e1      	b.n	80056ce <_strtol_l.constprop.0+0x8a>
 800570a:	1c53      	adds	r3, r2, #1
 800570c:	d108      	bne.n	8005720 <_strtol_l.constprop.0+0xdc>
 800570e:	2322      	movs	r3, #34	@ 0x22
 8005710:	4660      	mov	r0, ip
 8005712:	f8ce 3000 	str.w	r3, [lr]
 8005716:	f1b8 0f00 	cmp.w	r8, #0
 800571a:	d0a0      	beq.n	800565e <_strtol_l.constprop.0+0x1a>
 800571c:	1e69      	subs	r1, r5, #1
 800571e:	e006      	b.n	800572e <_strtol_l.constprop.0+0xea>
 8005720:	b106      	cbz	r6, 8005724 <_strtol_l.constprop.0+0xe0>
 8005722:	4240      	negs	r0, r0
 8005724:	f1b8 0f00 	cmp.w	r8, #0
 8005728:	d099      	beq.n	800565e <_strtol_l.constprop.0+0x1a>
 800572a:	2a00      	cmp	r2, #0
 800572c:	d1f6      	bne.n	800571c <_strtol_l.constprop.0+0xd8>
 800572e:	f8c8 1000 	str.w	r1, [r8]
 8005732:	e794      	b.n	800565e <_strtol_l.constprop.0+0x1a>
 8005734:	080084cf 	.word	0x080084cf

08005738 <strtol>:
 8005738:	4613      	mov	r3, r2
 800573a:	460a      	mov	r2, r1
 800573c:	4601      	mov	r1, r0
 800573e:	4802      	ldr	r0, [pc, #8]	@ (8005748 <strtol+0x10>)
 8005740:	6800      	ldr	r0, [r0, #0]
 8005742:	f7ff bf7f 	b.w	8005644 <_strtol_l.constprop.0>
 8005746:	bf00      	nop
 8005748:	20000098 	.word	0x20000098

0800574c <__cvt>:
 800574c:	2b00      	cmp	r3, #0
 800574e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005752:	461d      	mov	r5, r3
 8005754:	bfbb      	ittet	lt
 8005756:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800575a:	461d      	movlt	r5, r3
 800575c:	2300      	movge	r3, #0
 800575e:	232d      	movlt	r3, #45	@ 0x2d
 8005760:	b088      	sub	sp, #32
 8005762:	4614      	mov	r4, r2
 8005764:	bfb8      	it	lt
 8005766:	4614      	movlt	r4, r2
 8005768:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800576a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800576c:	7013      	strb	r3, [r2, #0]
 800576e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005770:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005774:	f023 0820 	bic.w	r8, r3, #32
 8005778:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800577c:	d005      	beq.n	800578a <__cvt+0x3e>
 800577e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005782:	d100      	bne.n	8005786 <__cvt+0x3a>
 8005784:	3601      	adds	r6, #1
 8005786:	2302      	movs	r3, #2
 8005788:	e000      	b.n	800578c <__cvt+0x40>
 800578a:	2303      	movs	r3, #3
 800578c:	aa07      	add	r2, sp, #28
 800578e:	9204      	str	r2, [sp, #16]
 8005790:	aa06      	add	r2, sp, #24
 8005792:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005796:	e9cd 3600 	strd	r3, r6, [sp]
 800579a:	4622      	mov	r2, r4
 800579c:	462b      	mov	r3, r5
 800579e:	f000 fea7 	bl	80064f0 <_dtoa_r>
 80057a2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80057a6:	4607      	mov	r7, r0
 80057a8:	d119      	bne.n	80057de <__cvt+0x92>
 80057aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80057ac:	07db      	lsls	r3, r3, #31
 80057ae:	d50e      	bpl.n	80057ce <__cvt+0x82>
 80057b0:	eb00 0906 	add.w	r9, r0, r6
 80057b4:	2200      	movs	r2, #0
 80057b6:	2300      	movs	r3, #0
 80057b8:	4620      	mov	r0, r4
 80057ba:	4629      	mov	r1, r5
 80057bc:	f7fb f8f4 	bl	80009a8 <__aeabi_dcmpeq>
 80057c0:	b108      	cbz	r0, 80057c6 <__cvt+0x7a>
 80057c2:	f8cd 901c 	str.w	r9, [sp, #28]
 80057c6:	2230      	movs	r2, #48	@ 0x30
 80057c8:	9b07      	ldr	r3, [sp, #28]
 80057ca:	454b      	cmp	r3, r9
 80057cc:	d31e      	bcc.n	800580c <__cvt+0xc0>
 80057ce:	4638      	mov	r0, r7
 80057d0:	9b07      	ldr	r3, [sp, #28]
 80057d2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80057d4:	1bdb      	subs	r3, r3, r7
 80057d6:	6013      	str	r3, [r2, #0]
 80057d8:	b008      	add	sp, #32
 80057da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057de:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80057e2:	eb00 0906 	add.w	r9, r0, r6
 80057e6:	d1e5      	bne.n	80057b4 <__cvt+0x68>
 80057e8:	7803      	ldrb	r3, [r0, #0]
 80057ea:	2b30      	cmp	r3, #48	@ 0x30
 80057ec:	d10a      	bne.n	8005804 <__cvt+0xb8>
 80057ee:	2200      	movs	r2, #0
 80057f0:	2300      	movs	r3, #0
 80057f2:	4620      	mov	r0, r4
 80057f4:	4629      	mov	r1, r5
 80057f6:	f7fb f8d7 	bl	80009a8 <__aeabi_dcmpeq>
 80057fa:	b918      	cbnz	r0, 8005804 <__cvt+0xb8>
 80057fc:	f1c6 0601 	rsb	r6, r6, #1
 8005800:	f8ca 6000 	str.w	r6, [sl]
 8005804:	f8da 3000 	ldr.w	r3, [sl]
 8005808:	4499      	add	r9, r3
 800580a:	e7d3      	b.n	80057b4 <__cvt+0x68>
 800580c:	1c59      	adds	r1, r3, #1
 800580e:	9107      	str	r1, [sp, #28]
 8005810:	701a      	strb	r2, [r3, #0]
 8005812:	e7d9      	b.n	80057c8 <__cvt+0x7c>

08005814 <__exponent>:
 8005814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005816:	2900      	cmp	r1, #0
 8005818:	bfb6      	itet	lt
 800581a:	232d      	movlt	r3, #45	@ 0x2d
 800581c:	232b      	movge	r3, #43	@ 0x2b
 800581e:	4249      	neglt	r1, r1
 8005820:	2909      	cmp	r1, #9
 8005822:	7002      	strb	r2, [r0, #0]
 8005824:	7043      	strb	r3, [r0, #1]
 8005826:	dd29      	ble.n	800587c <__exponent+0x68>
 8005828:	f10d 0307 	add.w	r3, sp, #7
 800582c:	461d      	mov	r5, r3
 800582e:	270a      	movs	r7, #10
 8005830:	fbb1 f6f7 	udiv	r6, r1, r7
 8005834:	461a      	mov	r2, r3
 8005836:	fb07 1416 	mls	r4, r7, r6, r1
 800583a:	3430      	adds	r4, #48	@ 0x30
 800583c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005840:	460c      	mov	r4, r1
 8005842:	2c63      	cmp	r4, #99	@ 0x63
 8005844:	4631      	mov	r1, r6
 8005846:	f103 33ff 	add.w	r3, r3, #4294967295
 800584a:	dcf1      	bgt.n	8005830 <__exponent+0x1c>
 800584c:	3130      	adds	r1, #48	@ 0x30
 800584e:	1e94      	subs	r4, r2, #2
 8005850:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005854:	4623      	mov	r3, r4
 8005856:	1c41      	adds	r1, r0, #1
 8005858:	42ab      	cmp	r3, r5
 800585a:	d30a      	bcc.n	8005872 <__exponent+0x5e>
 800585c:	f10d 0309 	add.w	r3, sp, #9
 8005860:	1a9b      	subs	r3, r3, r2
 8005862:	42ac      	cmp	r4, r5
 8005864:	bf88      	it	hi
 8005866:	2300      	movhi	r3, #0
 8005868:	3302      	adds	r3, #2
 800586a:	4403      	add	r3, r0
 800586c:	1a18      	subs	r0, r3, r0
 800586e:	b003      	add	sp, #12
 8005870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005872:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005876:	f801 6f01 	strb.w	r6, [r1, #1]!
 800587a:	e7ed      	b.n	8005858 <__exponent+0x44>
 800587c:	2330      	movs	r3, #48	@ 0x30
 800587e:	3130      	adds	r1, #48	@ 0x30
 8005880:	7083      	strb	r3, [r0, #2]
 8005882:	70c1      	strb	r1, [r0, #3]
 8005884:	1d03      	adds	r3, r0, #4
 8005886:	e7f1      	b.n	800586c <__exponent+0x58>

08005888 <_printf_float>:
 8005888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800588c:	b091      	sub	sp, #68	@ 0x44
 800588e:	460c      	mov	r4, r1
 8005890:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005894:	4616      	mov	r6, r2
 8005896:	461f      	mov	r7, r3
 8005898:	4605      	mov	r5, r0
 800589a:	f000 fd0d 	bl	80062b8 <_localeconv_r>
 800589e:	6803      	ldr	r3, [r0, #0]
 80058a0:	4618      	mov	r0, r3
 80058a2:	9308      	str	r3, [sp, #32]
 80058a4:	f7fa fc54 	bl	8000150 <strlen>
 80058a8:	2300      	movs	r3, #0
 80058aa:	930e      	str	r3, [sp, #56]	@ 0x38
 80058ac:	f8d8 3000 	ldr.w	r3, [r8]
 80058b0:	9009      	str	r0, [sp, #36]	@ 0x24
 80058b2:	3307      	adds	r3, #7
 80058b4:	f023 0307 	bic.w	r3, r3, #7
 80058b8:	f103 0208 	add.w	r2, r3, #8
 80058bc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80058c0:	f8d4 b000 	ldr.w	fp, [r4]
 80058c4:	f8c8 2000 	str.w	r2, [r8]
 80058c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80058cc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80058d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058d2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80058d6:	f04f 32ff 	mov.w	r2, #4294967295
 80058da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80058de:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80058e2:	4b9c      	ldr	r3, [pc, #624]	@ (8005b54 <_printf_float+0x2cc>)
 80058e4:	f7fb f892 	bl	8000a0c <__aeabi_dcmpun>
 80058e8:	bb70      	cbnz	r0, 8005948 <_printf_float+0xc0>
 80058ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80058ee:	f04f 32ff 	mov.w	r2, #4294967295
 80058f2:	4b98      	ldr	r3, [pc, #608]	@ (8005b54 <_printf_float+0x2cc>)
 80058f4:	f7fb f86c 	bl	80009d0 <__aeabi_dcmple>
 80058f8:	bb30      	cbnz	r0, 8005948 <_printf_float+0xc0>
 80058fa:	2200      	movs	r2, #0
 80058fc:	2300      	movs	r3, #0
 80058fe:	4640      	mov	r0, r8
 8005900:	4649      	mov	r1, r9
 8005902:	f7fb f85b 	bl	80009bc <__aeabi_dcmplt>
 8005906:	b110      	cbz	r0, 800590e <_printf_float+0x86>
 8005908:	232d      	movs	r3, #45	@ 0x2d
 800590a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800590e:	4a92      	ldr	r2, [pc, #584]	@ (8005b58 <_printf_float+0x2d0>)
 8005910:	4b92      	ldr	r3, [pc, #584]	@ (8005b5c <_printf_float+0x2d4>)
 8005912:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005916:	bf94      	ite	ls
 8005918:	4690      	movls	r8, r2
 800591a:	4698      	movhi	r8, r3
 800591c:	2303      	movs	r3, #3
 800591e:	f04f 0900 	mov.w	r9, #0
 8005922:	6123      	str	r3, [r4, #16]
 8005924:	f02b 0304 	bic.w	r3, fp, #4
 8005928:	6023      	str	r3, [r4, #0]
 800592a:	4633      	mov	r3, r6
 800592c:	4621      	mov	r1, r4
 800592e:	4628      	mov	r0, r5
 8005930:	9700      	str	r7, [sp, #0]
 8005932:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005934:	f000 f9d4 	bl	8005ce0 <_printf_common>
 8005938:	3001      	adds	r0, #1
 800593a:	f040 8090 	bne.w	8005a5e <_printf_float+0x1d6>
 800593e:	f04f 30ff 	mov.w	r0, #4294967295
 8005942:	b011      	add	sp, #68	@ 0x44
 8005944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005948:	4642      	mov	r2, r8
 800594a:	464b      	mov	r3, r9
 800594c:	4640      	mov	r0, r8
 800594e:	4649      	mov	r1, r9
 8005950:	f7fb f85c 	bl	8000a0c <__aeabi_dcmpun>
 8005954:	b148      	cbz	r0, 800596a <_printf_float+0xe2>
 8005956:	464b      	mov	r3, r9
 8005958:	2b00      	cmp	r3, #0
 800595a:	bfb8      	it	lt
 800595c:	232d      	movlt	r3, #45	@ 0x2d
 800595e:	4a80      	ldr	r2, [pc, #512]	@ (8005b60 <_printf_float+0x2d8>)
 8005960:	bfb8      	it	lt
 8005962:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005966:	4b7f      	ldr	r3, [pc, #508]	@ (8005b64 <_printf_float+0x2dc>)
 8005968:	e7d3      	b.n	8005912 <_printf_float+0x8a>
 800596a:	6863      	ldr	r3, [r4, #4]
 800596c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005970:	1c5a      	adds	r2, r3, #1
 8005972:	d13f      	bne.n	80059f4 <_printf_float+0x16c>
 8005974:	2306      	movs	r3, #6
 8005976:	6063      	str	r3, [r4, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800597e:	6023      	str	r3, [r4, #0]
 8005980:	9206      	str	r2, [sp, #24]
 8005982:	aa0e      	add	r2, sp, #56	@ 0x38
 8005984:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005988:	aa0d      	add	r2, sp, #52	@ 0x34
 800598a:	9203      	str	r2, [sp, #12]
 800598c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005990:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005994:	6863      	ldr	r3, [r4, #4]
 8005996:	4642      	mov	r2, r8
 8005998:	9300      	str	r3, [sp, #0]
 800599a:	4628      	mov	r0, r5
 800599c:	464b      	mov	r3, r9
 800599e:	910a      	str	r1, [sp, #40]	@ 0x28
 80059a0:	f7ff fed4 	bl	800574c <__cvt>
 80059a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80059a6:	4680      	mov	r8, r0
 80059a8:	2947      	cmp	r1, #71	@ 0x47
 80059aa:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80059ac:	d128      	bne.n	8005a00 <_printf_float+0x178>
 80059ae:	1cc8      	adds	r0, r1, #3
 80059b0:	db02      	blt.n	80059b8 <_printf_float+0x130>
 80059b2:	6863      	ldr	r3, [r4, #4]
 80059b4:	4299      	cmp	r1, r3
 80059b6:	dd40      	ble.n	8005a3a <_printf_float+0x1b2>
 80059b8:	f1aa 0a02 	sub.w	sl, sl, #2
 80059bc:	fa5f fa8a 	uxtb.w	sl, sl
 80059c0:	4652      	mov	r2, sl
 80059c2:	3901      	subs	r1, #1
 80059c4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80059c8:	910d      	str	r1, [sp, #52]	@ 0x34
 80059ca:	f7ff ff23 	bl	8005814 <__exponent>
 80059ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80059d0:	4681      	mov	r9, r0
 80059d2:	1813      	adds	r3, r2, r0
 80059d4:	2a01      	cmp	r2, #1
 80059d6:	6123      	str	r3, [r4, #16]
 80059d8:	dc02      	bgt.n	80059e0 <_printf_float+0x158>
 80059da:	6822      	ldr	r2, [r4, #0]
 80059dc:	07d2      	lsls	r2, r2, #31
 80059de:	d501      	bpl.n	80059e4 <_printf_float+0x15c>
 80059e0:	3301      	adds	r3, #1
 80059e2:	6123      	str	r3, [r4, #16]
 80059e4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d09e      	beq.n	800592a <_printf_float+0xa2>
 80059ec:	232d      	movs	r3, #45	@ 0x2d
 80059ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059f2:	e79a      	b.n	800592a <_printf_float+0xa2>
 80059f4:	2947      	cmp	r1, #71	@ 0x47
 80059f6:	d1bf      	bne.n	8005978 <_printf_float+0xf0>
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1bd      	bne.n	8005978 <_printf_float+0xf0>
 80059fc:	2301      	movs	r3, #1
 80059fe:	e7ba      	b.n	8005976 <_printf_float+0xee>
 8005a00:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005a04:	d9dc      	bls.n	80059c0 <_printf_float+0x138>
 8005a06:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005a0a:	d118      	bne.n	8005a3e <_printf_float+0x1b6>
 8005a0c:	2900      	cmp	r1, #0
 8005a0e:	6863      	ldr	r3, [r4, #4]
 8005a10:	dd0b      	ble.n	8005a2a <_printf_float+0x1a2>
 8005a12:	6121      	str	r1, [r4, #16]
 8005a14:	b913      	cbnz	r3, 8005a1c <_printf_float+0x194>
 8005a16:	6822      	ldr	r2, [r4, #0]
 8005a18:	07d0      	lsls	r0, r2, #31
 8005a1a:	d502      	bpl.n	8005a22 <_printf_float+0x19a>
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	440b      	add	r3, r1
 8005a20:	6123      	str	r3, [r4, #16]
 8005a22:	f04f 0900 	mov.w	r9, #0
 8005a26:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005a28:	e7dc      	b.n	80059e4 <_printf_float+0x15c>
 8005a2a:	b913      	cbnz	r3, 8005a32 <_printf_float+0x1aa>
 8005a2c:	6822      	ldr	r2, [r4, #0]
 8005a2e:	07d2      	lsls	r2, r2, #31
 8005a30:	d501      	bpl.n	8005a36 <_printf_float+0x1ae>
 8005a32:	3302      	adds	r3, #2
 8005a34:	e7f4      	b.n	8005a20 <_printf_float+0x198>
 8005a36:	2301      	movs	r3, #1
 8005a38:	e7f2      	b.n	8005a20 <_printf_float+0x198>
 8005a3a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005a3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a40:	4299      	cmp	r1, r3
 8005a42:	db05      	blt.n	8005a50 <_printf_float+0x1c8>
 8005a44:	6823      	ldr	r3, [r4, #0]
 8005a46:	6121      	str	r1, [r4, #16]
 8005a48:	07d8      	lsls	r0, r3, #31
 8005a4a:	d5ea      	bpl.n	8005a22 <_printf_float+0x19a>
 8005a4c:	1c4b      	adds	r3, r1, #1
 8005a4e:	e7e7      	b.n	8005a20 <_printf_float+0x198>
 8005a50:	2900      	cmp	r1, #0
 8005a52:	bfcc      	ite	gt
 8005a54:	2201      	movgt	r2, #1
 8005a56:	f1c1 0202 	rsble	r2, r1, #2
 8005a5a:	4413      	add	r3, r2
 8005a5c:	e7e0      	b.n	8005a20 <_printf_float+0x198>
 8005a5e:	6823      	ldr	r3, [r4, #0]
 8005a60:	055a      	lsls	r2, r3, #21
 8005a62:	d407      	bmi.n	8005a74 <_printf_float+0x1ec>
 8005a64:	6923      	ldr	r3, [r4, #16]
 8005a66:	4642      	mov	r2, r8
 8005a68:	4631      	mov	r1, r6
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	47b8      	blx	r7
 8005a6e:	3001      	adds	r0, #1
 8005a70:	d12b      	bne.n	8005aca <_printf_float+0x242>
 8005a72:	e764      	b.n	800593e <_printf_float+0xb6>
 8005a74:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005a78:	f240 80dc 	bls.w	8005c34 <_printf_float+0x3ac>
 8005a7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005a80:	2200      	movs	r2, #0
 8005a82:	2300      	movs	r3, #0
 8005a84:	f7fa ff90 	bl	80009a8 <__aeabi_dcmpeq>
 8005a88:	2800      	cmp	r0, #0
 8005a8a:	d033      	beq.n	8005af4 <_printf_float+0x26c>
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	4631      	mov	r1, r6
 8005a90:	4628      	mov	r0, r5
 8005a92:	4a35      	ldr	r2, [pc, #212]	@ (8005b68 <_printf_float+0x2e0>)
 8005a94:	47b8      	blx	r7
 8005a96:	3001      	adds	r0, #1
 8005a98:	f43f af51 	beq.w	800593e <_printf_float+0xb6>
 8005a9c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005aa0:	4543      	cmp	r3, r8
 8005aa2:	db02      	blt.n	8005aaa <_printf_float+0x222>
 8005aa4:	6823      	ldr	r3, [r4, #0]
 8005aa6:	07d8      	lsls	r0, r3, #31
 8005aa8:	d50f      	bpl.n	8005aca <_printf_float+0x242>
 8005aaa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005aae:	4631      	mov	r1, r6
 8005ab0:	4628      	mov	r0, r5
 8005ab2:	47b8      	blx	r7
 8005ab4:	3001      	adds	r0, #1
 8005ab6:	f43f af42 	beq.w	800593e <_printf_float+0xb6>
 8005aba:	f04f 0900 	mov.w	r9, #0
 8005abe:	f108 38ff 	add.w	r8, r8, #4294967295
 8005ac2:	f104 0a1a 	add.w	sl, r4, #26
 8005ac6:	45c8      	cmp	r8, r9
 8005ac8:	dc09      	bgt.n	8005ade <_printf_float+0x256>
 8005aca:	6823      	ldr	r3, [r4, #0]
 8005acc:	079b      	lsls	r3, r3, #30
 8005ace:	f100 8102 	bmi.w	8005cd6 <_printf_float+0x44e>
 8005ad2:	68e0      	ldr	r0, [r4, #12]
 8005ad4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005ad6:	4298      	cmp	r0, r3
 8005ad8:	bfb8      	it	lt
 8005ada:	4618      	movlt	r0, r3
 8005adc:	e731      	b.n	8005942 <_printf_float+0xba>
 8005ade:	2301      	movs	r3, #1
 8005ae0:	4652      	mov	r2, sl
 8005ae2:	4631      	mov	r1, r6
 8005ae4:	4628      	mov	r0, r5
 8005ae6:	47b8      	blx	r7
 8005ae8:	3001      	adds	r0, #1
 8005aea:	f43f af28 	beq.w	800593e <_printf_float+0xb6>
 8005aee:	f109 0901 	add.w	r9, r9, #1
 8005af2:	e7e8      	b.n	8005ac6 <_printf_float+0x23e>
 8005af4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	dc38      	bgt.n	8005b6c <_printf_float+0x2e4>
 8005afa:	2301      	movs	r3, #1
 8005afc:	4631      	mov	r1, r6
 8005afe:	4628      	mov	r0, r5
 8005b00:	4a19      	ldr	r2, [pc, #100]	@ (8005b68 <_printf_float+0x2e0>)
 8005b02:	47b8      	blx	r7
 8005b04:	3001      	adds	r0, #1
 8005b06:	f43f af1a 	beq.w	800593e <_printf_float+0xb6>
 8005b0a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005b0e:	ea59 0303 	orrs.w	r3, r9, r3
 8005b12:	d102      	bne.n	8005b1a <_printf_float+0x292>
 8005b14:	6823      	ldr	r3, [r4, #0]
 8005b16:	07d9      	lsls	r1, r3, #31
 8005b18:	d5d7      	bpl.n	8005aca <_printf_float+0x242>
 8005b1a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005b1e:	4631      	mov	r1, r6
 8005b20:	4628      	mov	r0, r5
 8005b22:	47b8      	blx	r7
 8005b24:	3001      	adds	r0, #1
 8005b26:	f43f af0a 	beq.w	800593e <_printf_float+0xb6>
 8005b2a:	f04f 0a00 	mov.w	sl, #0
 8005b2e:	f104 0b1a 	add.w	fp, r4, #26
 8005b32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b34:	425b      	negs	r3, r3
 8005b36:	4553      	cmp	r3, sl
 8005b38:	dc01      	bgt.n	8005b3e <_printf_float+0x2b6>
 8005b3a:	464b      	mov	r3, r9
 8005b3c:	e793      	b.n	8005a66 <_printf_float+0x1de>
 8005b3e:	2301      	movs	r3, #1
 8005b40:	465a      	mov	r2, fp
 8005b42:	4631      	mov	r1, r6
 8005b44:	4628      	mov	r0, r5
 8005b46:	47b8      	blx	r7
 8005b48:	3001      	adds	r0, #1
 8005b4a:	f43f aef8 	beq.w	800593e <_printf_float+0xb6>
 8005b4e:	f10a 0a01 	add.w	sl, sl, #1
 8005b52:	e7ee      	b.n	8005b32 <_printf_float+0x2aa>
 8005b54:	7fefffff 	.word	0x7fefffff
 8005b58:	080085cf 	.word	0x080085cf
 8005b5c:	080085d3 	.word	0x080085d3
 8005b60:	080085d7 	.word	0x080085d7
 8005b64:	080085db 	.word	0x080085db
 8005b68:	080085df 	.word	0x080085df
 8005b6c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005b6e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005b72:	4553      	cmp	r3, sl
 8005b74:	bfa8      	it	ge
 8005b76:	4653      	movge	r3, sl
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	4699      	mov	r9, r3
 8005b7c:	dc36      	bgt.n	8005bec <_printf_float+0x364>
 8005b7e:	f04f 0b00 	mov.w	fp, #0
 8005b82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b86:	f104 021a 	add.w	r2, r4, #26
 8005b8a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005b8c:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b8e:	eba3 0309 	sub.w	r3, r3, r9
 8005b92:	455b      	cmp	r3, fp
 8005b94:	dc31      	bgt.n	8005bfa <_printf_float+0x372>
 8005b96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b98:	459a      	cmp	sl, r3
 8005b9a:	dc3a      	bgt.n	8005c12 <_printf_float+0x38a>
 8005b9c:	6823      	ldr	r3, [r4, #0]
 8005b9e:	07da      	lsls	r2, r3, #31
 8005ba0:	d437      	bmi.n	8005c12 <_printf_float+0x38a>
 8005ba2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ba4:	ebaa 0903 	sub.w	r9, sl, r3
 8005ba8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005baa:	ebaa 0303 	sub.w	r3, sl, r3
 8005bae:	4599      	cmp	r9, r3
 8005bb0:	bfa8      	it	ge
 8005bb2:	4699      	movge	r9, r3
 8005bb4:	f1b9 0f00 	cmp.w	r9, #0
 8005bb8:	dc33      	bgt.n	8005c22 <_printf_float+0x39a>
 8005bba:	f04f 0800 	mov.w	r8, #0
 8005bbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bc2:	f104 0b1a 	add.w	fp, r4, #26
 8005bc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005bc8:	ebaa 0303 	sub.w	r3, sl, r3
 8005bcc:	eba3 0309 	sub.w	r3, r3, r9
 8005bd0:	4543      	cmp	r3, r8
 8005bd2:	f77f af7a 	ble.w	8005aca <_printf_float+0x242>
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	465a      	mov	r2, fp
 8005bda:	4631      	mov	r1, r6
 8005bdc:	4628      	mov	r0, r5
 8005bde:	47b8      	blx	r7
 8005be0:	3001      	adds	r0, #1
 8005be2:	f43f aeac 	beq.w	800593e <_printf_float+0xb6>
 8005be6:	f108 0801 	add.w	r8, r8, #1
 8005bea:	e7ec      	b.n	8005bc6 <_printf_float+0x33e>
 8005bec:	4642      	mov	r2, r8
 8005bee:	4631      	mov	r1, r6
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	47b8      	blx	r7
 8005bf4:	3001      	adds	r0, #1
 8005bf6:	d1c2      	bne.n	8005b7e <_printf_float+0x2f6>
 8005bf8:	e6a1      	b.n	800593e <_printf_float+0xb6>
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	4631      	mov	r1, r6
 8005bfe:	4628      	mov	r0, r5
 8005c00:	920a      	str	r2, [sp, #40]	@ 0x28
 8005c02:	47b8      	blx	r7
 8005c04:	3001      	adds	r0, #1
 8005c06:	f43f ae9a 	beq.w	800593e <_printf_float+0xb6>
 8005c0a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005c0c:	f10b 0b01 	add.w	fp, fp, #1
 8005c10:	e7bb      	b.n	8005b8a <_printf_float+0x302>
 8005c12:	4631      	mov	r1, r6
 8005c14:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005c18:	4628      	mov	r0, r5
 8005c1a:	47b8      	blx	r7
 8005c1c:	3001      	adds	r0, #1
 8005c1e:	d1c0      	bne.n	8005ba2 <_printf_float+0x31a>
 8005c20:	e68d      	b.n	800593e <_printf_float+0xb6>
 8005c22:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005c24:	464b      	mov	r3, r9
 8005c26:	4631      	mov	r1, r6
 8005c28:	4628      	mov	r0, r5
 8005c2a:	4442      	add	r2, r8
 8005c2c:	47b8      	blx	r7
 8005c2e:	3001      	adds	r0, #1
 8005c30:	d1c3      	bne.n	8005bba <_printf_float+0x332>
 8005c32:	e684      	b.n	800593e <_printf_float+0xb6>
 8005c34:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005c38:	f1ba 0f01 	cmp.w	sl, #1
 8005c3c:	dc01      	bgt.n	8005c42 <_printf_float+0x3ba>
 8005c3e:	07db      	lsls	r3, r3, #31
 8005c40:	d536      	bpl.n	8005cb0 <_printf_float+0x428>
 8005c42:	2301      	movs	r3, #1
 8005c44:	4642      	mov	r2, r8
 8005c46:	4631      	mov	r1, r6
 8005c48:	4628      	mov	r0, r5
 8005c4a:	47b8      	blx	r7
 8005c4c:	3001      	adds	r0, #1
 8005c4e:	f43f ae76 	beq.w	800593e <_printf_float+0xb6>
 8005c52:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005c56:	4631      	mov	r1, r6
 8005c58:	4628      	mov	r0, r5
 8005c5a:	47b8      	blx	r7
 8005c5c:	3001      	adds	r0, #1
 8005c5e:	f43f ae6e 	beq.w	800593e <_printf_float+0xb6>
 8005c62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005c66:	2200      	movs	r2, #0
 8005c68:	2300      	movs	r3, #0
 8005c6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c6e:	f7fa fe9b 	bl	80009a8 <__aeabi_dcmpeq>
 8005c72:	b9c0      	cbnz	r0, 8005ca6 <_printf_float+0x41e>
 8005c74:	4653      	mov	r3, sl
 8005c76:	f108 0201 	add.w	r2, r8, #1
 8005c7a:	4631      	mov	r1, r6
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	47b8      	blx	r7
 8005c80:	3001      	adds	r0, #1
 8005c82:	d10c      	bne.n	8005c9e <_printf_float+0x416>
 8005c84:	e65b      	b.n	800593e <_printf_float+0xb6>
 8005c86:	2301      	movs	r3, #1
 8005c88:	465a      	mov	r2, fp
 8005c8a:	4631      	mov	r1, r6
 8005c8c:	4628      	mov	r0, r5
 8005c8e:	47b8      	blx	r7
 8005c90:	3001      	adds	r0, #1
 8005c92:	f43f ae54 	beq.w	800593e <_printf_float+0xb6>
 8005c96:	f108 0801 	add.w	r8, r8, #1
 8005c9a:	45d0      	cmp	r8, sl
 8005c9c:	dbf3      	blt.n	8005c86 <_printf_float+0x3fe>
 8005c9e:	464b      	mov	r3, r9
 8005ca0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005ca4:	e6e0      	b.n	8005a68 <_printf_float+0x1e0>
 8005ca6:	f04f 0800 	mov.w	r8, #0
 8005caa:	f104 0b1a 	add.w	fp, r4, #26
 8005cae:	e7f4      	b.n	8005c9a <_printf_float+0x412>
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	4642      	mov	r2, r8
 8005cb4:	e7e1      	b.n	8005c7a <_printf_float+0x3f2>
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	464a      	mov	r2, r9
 8005cba:	4631      	mov	r1, r6
 8005cbc:	4628      	mov	r0, r5
 8005cbe:	47b8      	blx	r7
 8005cc0:	3001      	adds	r0, #1
 8005cc2:	f43f ae3c 	beq.w	800593e <_printf_float+0xb6>
 8005cc6:	f108 0801 	add.w	r8, r8, #1
 8005cca:	68e3      	ldr	r3, [r4, #12]
 8005ccc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005cce:	1a5b      	subs	r3, r3, r1
 8005cd0:	4543      	cmp	r3, r8
 8005cd2:	dcf0      	bgt.n	8005cb6 <_printf_float+0x42e>
 8005cd4:	e6fd      	b.n	8005ad2 <_printf_float+0x24a>
 8005cd6:	f04f 0800 	mov.w	r8, #0
 8005cda:	f104 0919 	add.w	r9, r4, #25
 8005cde:	e7f4      	b.n	8005cca <_printf_float+0x442>

08005ce0 <_printf_common>:
 8005ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ce4:	4616      	mov	r6, r2
 8005ce6:	4698      	mov	r8, r3
 8005ce8:	688a      	ldr	r2, [r1, #8]
 8005cea:	690b      	ldr	r3, [r1, #16]
 8005cec:	4607      	mov	r7, r0
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	bfb8      	it	lt
 8005cf2:	4613      	movlt	r3, r2
 8005cf4:	6033      	str	r3, [r6, #0]
 8005cf6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005cfa:	460c      	mov	r4, r1
 8005cfc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d00:	b10a      	cbz	r2, 8005d06 <_printf_common+0x26>
 8005d02:	3301      	adds	r3, #1
 8005d04:	6033      	str	r3, [r6, #0]
 8005d06:	6823      	ldr	r3, [r4, #0]
 8005d08:	0699      	lsls	r1, r3, #26
 8005d0a:	bf42      	ittt	mi
 8005d0c:	6833      	ldrmi	r3, [r6, #0]
 8005d0e:	3302      	addmi	r3, #2
 8005d10:	6033      	strmi	r3, [r6, #0]
 8005d12:	6825      	ldr	r5, [r4, #0]
 8005d14:	f015 0506 	ands.w	r5, r5, #6
 8005d18:	d106      	bne.n	8005d28 <_printf_common+0x48>
 8005d1a:	f104 0a19 	add.w	sl, r4, #25
 8005d1e:	68e3      	ldr	r3, [r4, #12]
 8005d20:	6832      	ldr	r2, [r6, #0]
 8005d22:	1a9b      	subs	r3, r3, r2
 8005d24:	42ab      	cmp	r3, r5
 8005d26:	dc2b      	bgt.n	8005d80 <_printf_common+0xa0>
 8005d28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005d2c:	6822      	ldr	r2, [r4, #0]
 8005d2e:	3b00      	subs	r3, #0
 8005d30:	bf18      	it	ne
 8005d32:	2301      	movne	r3, #1
 8005d34:	0692      	lsls	r2, r2, #26
 8005d36:	d430      	bmi.n	8005d9a <_printf_common+0xba>
 8005d38:	4641      	mov	r1, r8
 8005d3a:	4638      	mov	r0, r7
 8005d3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005d40:	47c8      	blx	r9
 8005d42:	3001      	adds	r0, #1
 8005d44:	d023      	beq.n	8005d8e <_printf_common+0xae>
 8005d46:	6823      	ldr	r3, [r4, #0]
 8005d48:	6922      	ldr	r2, [r4, #16]
 8005d4a:	f003 0306 	and.w	r3, r3, #6
 8005d4e:	2b04      	cmp	r3, #4
 8005d50:	bf14      	ite	ne
 8005d52:	2500      	movne	r5, #0
 8005d54:	6833      	ldreq	r3, [r6, #0]
 8005d56:	f04f 0600 	mov.w	r6, #0
 8005d5a:	bf08      	it	eq
 8005d5c:	68e5      	ldreq	r5, [r4, #12]
 8005d5e:	f104 041a 	add.w	r4, r4, #26
 8005d62:	bf08      	it	eq
 8005d64:	1aed      	subeq	r5, r5, r3
 8005d66:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005d6a:	bf08      	it	eq
 8005d6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d70:	4293      	cmp	r3, r2
 8005d72:	bfc4      	itt	gt
 8005d74:	1a9b      	subgt	r3, r3, r2
 8005d76:	18ed      	addgt	r5, r5, r3
 8005d78:	42b5      	cmp	r5, r6
 8005d7a:	d11a      	bne.n	8005db2 <_printf_common+0xd2>
 8005d7c:	2000      	movs	r0, #0
 8005d7e:	e008      	b.n	8005d92 <_printf_common+0xb2>
 8005d80:	2301      	movs	r3, #1
 8005d82:	4652      	mov	r2, sl
 8005d84:	4641      	mov	r1, r8
 8005d86:	4638      	mov	r0, r7
 8005d88:	47c8      	blx	r9
 8005d8a:	3001      	adds	r0, #1
 8005d8c:	d103      	bne.n	8005d96 <_printf_common+0xb6>
 8005d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d96:	3501      	adds	r5, #1
 8005d98:	e7c1      	b.n	8005d1e <_printf_common+0x3e>
 8005d9a:	2030      	movs	r0, #48	@ 0x30
 8005d9c:	18e1      	adds	r1, r4, r3
 8005d9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005da2:	1c5a      	adds	r2, r3, #1
 8005da4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005da8:	4422      	add	r2, r4
 8005daa:	3302      	adds	r3, #2
 8005dac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005db0:	e7c2      	b.n	8005d38 <_printf_common+0x58>
 8005db2:	2301      	movs	r3, #1
 8005db4:	4622      	mov	r2, r4
 8005db6:	4641      	mov	r1, r8
 8005db8:	4638      	mov	r0, r7
 8005dba:	47c8      	blx	r9
 8005dbc:	3001      	adds	r0, #1
 8005dbe:	d0e6      	beq.n	8005d8e <_printf_common+0xae>
 8005dc0:	3601      	adds	r6, #1
 8005dc2:	e7d9      	b.n	8005d78 <_printf_common+0x98>

08005dc4 <_printf_i>:
 8005dc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005dc8:	7e0f      	ldrb	r7, [r1, #24]
 8005dca:	4691      	mov	r9, r2
 8005dcc:	2f78      	cmp	r7, #120	@ 0x78
 8005dce:	4680      	mov	r8, r0
 8005dd0:	460c      	mov	r4, r1
 8005dd2:	469a      	mov	sl, r3
 8005dd4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005dd6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005dda:	d807      	bhi.n	8005dec <_printf_i+0x28>
 8005ddc:	2f62      	cmp	r7, #98	@ 0x62
 8005dde:	d80a      	bhi.n	8005df6 <_printf_i+0x32>
 8005de0:	2f00      	cmp	r7, #0
 8005de2:	f000 80d3 	beq.w	8005f8c <_printf_i+0x1c8>
 8005de6:	2f58      	cmp	r7, #88	@ 0x58
 8005de8:	f000 80ba 	beq.w	8005f60 <_printf_i+0x19c>
 8005dec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005df0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005df4:	e03a      	b.n	8005e6c <_printf_i+0xa8>
 8005df6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005dfa:	2b15      	cmp	r3, #21
 8005dfc:	d8f6      	bhi.n	8005dec <_printf_i+0x28>
 8005dfe:	a101      	add	r1, pc, #4	@ (adr r1, 8005e04 <_printf_i+0x40>)
 8005e00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e04:	08005e5d 	.word	0x08005e5d
 8005e08:	08005e71 	.word	0x08005e71
 8005e0c:	08005ded 	.word	0x08005ded
 8005e10:	08005ded 	.word	0x08005ded
 8005e14:	08005ded 	.word	0x08005ded
 8005e18:	08005ded 	.word	0x08005ded
 8005e1c:	08005e71 	.word	0x08005e71
 8005e20:	08005ded 	.word	0x08005ded
 8005e24:	08005ded 	.word	0x08005ded
 8005e28:	08005ded 	.word	0x08005ded
 8005e2c:	08005ded 	.word	0x08005ded
 8005e30:	08005f73 	.word	0x08005f73
 8005e34:	08005e9b 	.word	0x08005e9b
 8005e38:	08005f2d 	.word	0x08005f2d
 8005e3c:	08005ded 	.word	0x08005ded
 8005e40:	08005ded 	.word	0x08005ded
 8005e44:	08005f95 	.word	0x08005f95
 8005e48:	08005ded 	.word	0x08005ded
 8005e4c:	08005e9b 	.word	0x08005e9b
 8005e50:	08005ded 	.word	0x08005ded
 8005e54:	08005ded 	.word	0x08005ded
 8005e58:	08005f35 	.word	0x08005f35
 8005e5c:	6833      	ldr	r3, [r6, #0]
 8005e5e:	1d1a      	adds	r2, r3, #4
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	6032      	str	r2, [r6, #0]
 8005e64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e09e      	b.n	8005fae <_printf_i+0x1ea>
 8005e70:	6833      	ldr	r3, [r6, #0]
 8005e72:	6820      	ldr	r0, [r4, #0]
 8005e74:	1d19      	adds	r1, r3, #4
 8005e76:	6031      	str	r1, [r6, #0]
 8005e78:	0606      	lsls	r6, r0, #24
 8005e7a:	d501      	bpl.n	8005e80 <_printf_i+0xbc>
 8005e7c:	681d      	ldr	r5, [r3, #0]
 8005e7e:	e003      	b.n	8005e88 <_printf_i+0xc4>
 8005e80:	0645      	lsls	r5, r0, #25
 8005e82:	d5fb      	bpl.n	8005e7c <_printf_i+0xb8>
 8005e84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e88:	2d00      	cmp	r5, #0
 8005e8a:	da03      	bge.n	8005e94 <_printf_i+0xd0>
 8005e8c:	232d      	movs	r3, #45	@ 0x2d
 8005e8e:	426d      	negs	r5, r5
 8005e90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e94:	230a      	movs	r3, #10
 8005e96:	4859      	ldr	r0, [pc, #356]	@ (8005ffc <_printf_i+0x238>)
 8005e98:	e011      	b.n	8005ebe <_printf_i+0xfa>
 8005e9a:	6821      	ldr	r1, [r4, #0]
 8005e9c:	6833      	ldr	r3, [r6, #0]
 8005e9e:	0608      	lsls	r0, r1, #24
 8005ea0:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ea4:	d402      	bmi.n	8005eac <_printf_i+0xe8>
 8005ea6:	0649      	lsls	r1, r1, #25
 8005ea8:	bf48      	it	mi
 8005eaa:	b2ad      	uxthmi	r5, r5
 8005eac:	2f6f      	cmp	r7, #111	@ 0x6f
 8005eae:	6033      	str	r3, [r6, #0]
 8005eb0:	bf14      	ite	ne
 8005eb2:	230a      	movne	r3, #10
 8005eb4:	2308      	moveq	r3, #8
 8005eb6:	4851      	ldr	r0, [pc, #324]	@ (8005ffc <_printf_i+0x238>)
 8005eb8:	2100      	movs	r1, #0
 8005eba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005ebe:	6866      	ldr	r6, [r4, #4]
 8005ec0:	2e00      	cmp	r6, #0
 8005ec2:	bfa8      	it	ge
 8005ec4:	6821      	ldrge	r1, [r4, #0]
 8005ec6:	60a6      	str	r6, [r4, #8]
 8005ec8:	bfa4      	itt	ge
 8005eca:	f021 0104 	bicge.w	r1, r1, #4
 8005ece:	6021      	strge	r1, [r4, #0]
 8005ed0:	b90d      	cbnz	r5, 8005ed6 <_printf_i+0x112>
 8005ed2:	2e00      	cmp	r6, #0
 8005ed4:	d04b      	beq.n	8005f6e <_printf_i+0x1aa>
 8005ed6:	4616      	mov	r6, r2
 8005ed8:	fbb5 f1f3 	udiv	r1, r5, r3
 8005edc:	fb03 5711 	mls	r7, r3, r1, r5
 8005ee0:	5dc7      	ldrb	r7, [r0, r7]
 8005ee2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ee6:	462f      	mov	r7, r5
 8005ee8:	42bb      	cmp	r3, r7
 8005eea:	460d      	mov	r5, r1
 8005eec:	d9f4      	bls.n	8005ed8 <_printf_i+0x114>
 8005eee:	2b08      	cmp	r3, #8
 8005ef0:	d10b      	bne.n	8005f0a <_printf_i+0x146>
 8005ef2:	6823      	ldr	r3, [r4, #0]
 8005ef4:	07df      	lsls	r7, r3, #31
 8005ef6:	d508      	bpl.n	8005f0a <_printf_i+0x146>
 8005ef8:	6923      	ldr	r3, [r4, #16]
 8005efa:	6861      	ldr	r1, [r4, #4]
 8005efc:	4299      	cmp	r1, r3
 8005efe:	bfde      	ittt	le
 8005f00:	2330      	movle	r3, #48	@ 0x30
 8005f02:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f06:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f0a:	1b92      	subs	r2, r2, r6
 8005f0c:	6122      	str	r2, [r4, #16]
 8005f0e:	464b      	mov	r3, r9
 8005f10:	4621      	mov	r1, r4
 8005f12:	4640      	mov	r0, r8
 8005f14:	f8cd a000 	str.w	sl, [sp]
 8005f18:	aa03      	add	r2, sp, #12
 8005f1a:	f7ff fee1 	bl	8005ce0 <_printf_common>
 8005f1e:	3001      	adds	r0, #1
 8005f20:	d14a      	bne.n	8005fb8 <_printf_i+0x1f4>
 8005f22:	f04f 30ff 	mov.w	r0, #4294967295
 8005f26:	b004      	add	sp, #16
 8005f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f2c:	6823      	ldr	r3, [r4, #0]
 8005f2e:	f043 0320 	orr.w	r3, r3, #32
 8005f32:	6023      	str	r3, [r4, #0]
 8005f34:	2778      	movs	r7, #120	@ 0x78
 8005f36:	4832      	ldr	r0, [pc, #200]	@ (8006000 <_printf_i+0x23c>)
 8005f38:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005f3c:	6823      	ldr	r3, [r4, #0]
 8005f3e:	6831      	ldr	r1, [r6, #0]
 8005f40:	061f      	lsls	r7, r3, #24
 8005f42:	f851 5b04 	ldr.w	r5, [r1], #4
 8005f46:	d402      	bmi.n	8005f4e <_printf_i+0x18a>
 8005f48:	065f      	lsls	r7, r3, #25
 8005f4a:	bf48      	it	mi
 8005f4c:	b2ad      	uxthmi	r5, r5
 8005f4e:	6031      	str	r1, [r6, #0]
 8005f50:	07d9      	lsls	r1, r3, #31
 8005f52:	bf44      	itt	mi
 8005f54:	f043 0320 	orrmi.w	r3, r3, #32
 8005f58:	6023      	strmi	r3, [r4, #0]
 8005f5a:	b11d      	cbz	r5, 8005f64 <_printf_i+0x1a0>
 8005f5c:	2310      	movs	r3, #16
 8005f5e:	e7ab      	b.n	8005eb8 <_printf_i+0xf4>
 8005f60:	4826      	ldr	r0, [pc, #152]	@ (8005ffc <_printf_i+0x238>)
 8005f62:	e7e9      	b.n	8005f38 <_printf_i+0x174>
 8005f64:	6823      	ldr	r3, [r4, #0]
 8005f66:	f023 0320 	bic.w	r3, r3, #32
 8005f6a:	6023      	str	r3, [r4, #0]
 8005f6c:	e7f6      	b.n	8005f5c <_printf_i+0x198>
 8005f6e:	4616      	mov	r6, r2
 8005f70:	e7bd      	b.n	8005eee <_printf_i+0x12a>
 8005f72:	6833      	ldr	r3, [r6, #0]
 8005f74:	6825      	ldr	r5, [r4, #0]
 8005f76:	1d18      	adds	r0, r3, #4
 8005f78:	6961      	ldr	r1, [r4, #20]
 8005f7a:	6030      	str	r0, [r6, #0]
 8005f7c:	062e      	lsls	r6, r5, #24
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	d501      	bpl.n	8005f86 <_printf_i+0x1c2>
 8005f82:	6019      	str	r1, [r3, #0]
 8005f84:	e002      	b.n	8005f8c <_printf_i+0x1c8>
 8005f86:	0668      	lsls	r0, r5, #25
 8005f88:	d5fb      	bpl.n	8005f82 <_printf_i+0x1be>
 8005f8a:	8019      	strh	r1, [r3, #0]
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	4616      	mov	r6, r2
 8005f90:	6123      	str	r3, [r4, #16]
 8005f92:	e7bc      	b.n	8005f0e <_printf_i+0x14a>
 8005f94:	6833      	ldr	r3, [r6, #0]
 8005f96:	2100      	movs	r1, #0
 8005f98:	1d1a      	adds	r2, r3, #4
 8005f9a:	6032      	str	r2, [r6, #0]
 8005f9c:	681e      	ldr	r6, [r3, #0]
 8005f9e:	6862      	ldr	r2, [r4, #4]
 8005fa0:	4630      	mov	r0, r6
 8005fa2:	f000 fa00 	bl	80063a6 <memchr>
 8005fa6:	b108      	cbz	r0, 8005fac <_printf_i+0x1e8>
 8005fa8:	1b80      	subs	r0, r0, r6
 8005faa:	6060      	str	r0, [r4, #4]
 8005fac:	6863      	ldr	r3, [r4, #4]
 8005fae:	6123      	str	r3, [r4, #16]
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fb6:	e7aa      	b.n	8005f0e <_printf_i+0x14a>
 8005fb8:	4632      	mov	r2, r6
 8005fba:	4649      	mov	r1, r9
 8005fbc:	4640      	mov	r0, r8
 8005fbe:	6923      	ldr	r3, [r4, #16]
 8005fc0:	47d0      	blx	sl
 8005fc2:	3001      	adds	r0, #1
 8005fc4:	d0ad      	beq.n	8005f22 <_printf_i+0x15e>
 8005fc6:	6823      	ldr	r3, [r4, #0]
 8005fc8:	079b      	lsls	r3, r3, #30
 8005fca:	d413      	bmi.n	8005ff4 <_printf_i+0x230>
 8005fcc:	68e0      	ldr	r0, [r4, #12]
 8005fce:	9b03      	ldr	r3, [sp, #12]
 8005fd0:	4298      	cmp	r0, r3
 8005fd2:	bfb8      	it	lt
 8005fd4:	4618      	movlt	r0, r3
 8005fd6:	e7a6      	b.n	8005f26 <_printf_i+0x162>
 8005fd8:	2301      	movs	r3, #1
 8005fda:	4632      	mov	r2, r6
 8005fdc:	4649      	mov	r1, r9
 8005fde:	4640      	mov	r0, r8
 8005fe0:	47d0      	blx	sl
 8005fe2:	3001      	adds	r0, #1
 8005fe4:	d09d      	beq.n	8005f22 <_printf_i+0x15e>
 8005fe6:	3501      	adds	r5, #1
 8005fe8:	68e3      	ldr	r3, [r4, #12]
 8005fea:	9903      	ldr	r1, [sp, #12]
 8005fec:	1a5b      	subs	r3, r3, r1
 8005fee:	42ab      	cmp	r3, r5
 8005ff0:	dcf2      	bgt.n	8005fd8 <_printf_i+0x214>
 8005ff2:	e7eb      	b.n	8005fcc <_printf_i+0x208>
 8005ff4:	2500      	movs	r5, #0
 8005ff6:	f104 0619 	add.w	r6, r4, #25
 8005ffa:	e7f5      	b.n	8005fe8 <_printf_i+0x224>
 8005ffc:	080085e1 	.word	0x080085e1
 8006000:	080085f2 	.word	0x080085f2

08006004 <std>:
 8006004:	2300      	movs	r3, #0
 8006006:	b510      	push	{r4, lr}
 8006008:	4604      	mov	r4, r0
 800600a:	e9c0 3300 	strd	r3, r3, [r0]
 800600e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006012:	6083      	str	r3, [r0, #8]
 8006014:	8181      	strh	r1, [r0, #12]
 8006016:	6643      	str	r3, [r0, #100]	@ 0x64
 8006018:	81c2      	strh	r2, [r0, #14]
 800601a:	6183      	str	r3, [r0, #24]
 800601c:	4619      	mov	r1, r3
 800601e:	2208      	movs	r2, #8
 8006020:	305c      	adds	r0, #92	@ 0x5c
 8006022:	f000 f92e 	bl	8006282 <memset>
 8006026:	4b0d      	ldr	r3, [pc, #52]	@ (800605c <std+0x58>)
 8006028:	6224      	str	r4, [r4, #32]
 800602a:	6263      	str	r3, [r4, #36]	@ 0x24
 800602c:	4b0c      	ldr	r3, [pc, #48]	@ (8006060 <std+0x5c>)
 800602e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006030:	4b0c      	ldr	r3, [pc, #48]	@ (8006064 <std+0x60>)
 8006032:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006034:	4b0c      	ldr	r3, [pc, #48]	@ (8006068 <std+0x64>)
 8006036:	6323      	str	r3, [r4, #48]	@ 0x30
 8006038:	4b0c      	ldr	r3, [pc, #48]	@ (800606c <std+0x68>)
 800603a:	429c      	cmp	r4, r3
 800603c:	d006      	beq.n	800604c <std+0x48>
 800603e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006042:	4294      	cmp	r4, r2
 8006044:	d002      	beq.n	800604c <std+0x48>
 8006046:	33d0      	adds	r3, #208	@ 0xd0
 8006048:	429c      	cmp	r4, r3
 800604a:	d105      	bne.n	8006058 <std+0x54>
 800604c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006054:	f000 b9a4 	b.w	80063a0 <__retarget_lock_init_recursive>
 8006058:	bd10      	pop	{r4, pc}
 800605a:	bf00      	nop
 800605c:	080061c9 	.word	0x080061c9
 8006060:	080061eb 	.word	0x080061eb
 8006064:	08006223 	.word	0x08006223
 8006068:	08006247 	.word	0x08006247
 800606c:	20000400 	.word	0x20000400

08006070 <stdio_exit_handler>:
 8006070:	4a02      	ldr	r2, [pc, #8]	@ (800607c <stdio_exit_handler+0xc>)
 8006072:	4903      	ldr	r1, [pc, #12]	@ (8006080 <stdio_exit_handler+0x10>)
 8006074:	4803      	ldr	r0, [pc, #12]	@ (8006084 <stdio_exit_handler+0x14>)
 8006076:	f000 b869 	b.w	800614c <_fwalk_sglue>
 800607a:	bf00      	nop
 800607c:	2000008c 	.word	0x2000008c
 8006080:	08007d2d 	.word	0x08007d2d
 8006084:	2000009c 	.word	0x2000009c

08006088 <cleanup_stdio>:
 8006088:	6841      	ldr	r1, [r0, #4]
 800608a:	4b0c      	ldr	r3, [pc, #48]	@ (80060bc <cleanup_stdio+0x34>)
 800608c:	b510      	push	{r4, lr}
 800608e:	4299      	cmp	r1, r3
 8006090:	4604      	mov	r4, r0
 8006092:	d001      	beq.n	8006098 <cleanup_stdio+0x10>
 8006094:	f001 fe4a 	bl	8007d2c <_fflush_r>
 8006098:	68a1      	ldr	r1, [r4, #8]
 800609a:	4b09      	ldr	r3, [pc, #36]	@ (80060c0 <cleanup_stdio+0x38>)
 800609c:	4299      	cmp	r1, r3
 800609e:	d002      	beq.n	80060a6 <cleanup_stdio+0x1e>
 80060a0:	4620      	mov	r0, r4
 80060a2:	f001 fe43 	bl	8007d2c <_fflush_r>
 80060a6:	68e1      	ldr	r1, [r4, #12]
 80060a8:	4b06      	ldr	r3, [pc, #24]	@ (80060c4 <cleanup_stdio+0x3c>)
 80060aa:	4299      	cmp	r1, r3
 80060ac:	d004      	beq.n	80060b8 <cleanup_stdio+0x30>
 80060ae:	4620      	mov	r0, r4
 80060b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060b4:	f001 be3a 	b.w	8007d2c <_fflush_r>
 80060b8:	bd10      	pop	{r4, pc}
 80060ba:	bf00      	nop
 80060bc:	20000400 	.word	0x20000400
 80060c0:	20000468 	.word	0x20000468
 80060c4:	200004d0 	.word	0x200004d0

080060c8 <global_stdio_init.part.0>:
 80060c8:	b510      	push	{r4, lr}
 80060ca:	4b0b      	ldr	r3, [pc, #44]	@ (80060f8 <global_stdio_init.part.0+0x30>)
 80060cc:	4c0b      	ldr	r4, [pc, #44]	@ (80060fc <global_stdio_init.part.0+0x34>)
 80060ce:	4a0c      	ldr	r2, [pc, #48]	@ (8006100 <global_stdio_init.part.0+0x38>)
 80060d0:	4620      	mov	r0, r4
 80060d2:	601a      	str	r2, [r3, #0]
 80060d4:	2104      	movs	r1, #4
 80060d6:	2200      	movs	r2, #0
 80060d8:	f7ff ff94 	bl	8006004 <std>
 80060dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80060e0:	2201      	movs	r2, #1
 80060e2:	2109      	movs	r1, #9
 80060e4:	f7ff ff8e 	bl	8006004 <std>
 80060e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80060ec:	2202      	movs	r2, #2
 80060ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060f2:	2112      	movs	r1, #18
 80060f4:	f7ff bf86 	b.w	8006004 <std>
 80060f8:	20000538 	.word	0x20000538
 80060fc:	20000400 	.word	0x20000400
 8006100:	08006071 	.word	0x08006071

08006104 <__sfp_lock_acquire>:
 8006104:	4801      	ldr	r0, [pc, #4]	@ (800610c <__sfp_lock_acquire+0x8>)
 8006106:	f000 b94c 	b.w	80063a2 <__retarget_lock_acquire_recursive>
 800610a:	bf00      	nop
 800610c:	20000541 	.word	0x20000541

08006110 <__sfp_lock_release>:
 8006110:	4801      	ldr	r0, [pc, #4]	@ (8006118 <__sfp_lock_release+0x8>)
 8006112:	f000 b947 	b.w	80063a4 <__retarget_lock_release_recursive>
 8006116:	bf00      	nop
 8006118:	20000541 	.word	0x20000541

0800611c <__sinit>:
 800611c:	b510      	push	{r4, lr}
 800611e:	4604      	mov	r4, r0
 8006120:	f7ff fff0 	bl	8006104 <__sfp_lock_acquire>
 8006124:	6a23      	ldr	r3, [r4, #32]
 8006126:	b11b      	cbz	r3, 8006130 <__sinit+0x14>
 8006128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800612c:	f7ff bff0 	b.w	8006110 <__sfp_lock_release>
 8006130:	4b04      	ldr	r3, [pc, #16]	@ (8006144 <__sinit+0x28>)
 8006132:	6223      	str	r3, [r4, #32]
 8006134:	4b04      	ldr	r3, [pc, #16]	@ (8006148 <__sinit+0x2c>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d1f5      	bne.n	8006128 <__sinit+0xc>
 800613c:	f7ff ffc4 	bl	80060c8 <global_stdio_init.part.0>
 8006140:	e7f2      	b.n	8006128 <__sinit+0xc>
 8006142:	bf00      	nop
 8006144:	08006089 	.word	0x08006089
 8006148:	20000538 	.word	0x20000538

0800614c <_fwalk_sglue>:
 800614c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006150:	4607      	mov	r7, r0
 8006152:	4688      	mov	r8, r1
 8006154:	4614      	mov	r4, r2
 8006156:	2600      	movs	r6, #0
 8006158:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800615c:	f1b9 0901 	subs.w	r9, r9, #1
 8006160:	d505      	bpl.n	800616e <_fwalk_sglue+0x22>
 8006162:	6824      	ldr	r4, [r4, #0]
 8006164:	2c00      	cmp	r4, #0
 8006166:	d1f7      	bne.n	8006158 <_fwalk_sglue+0xc>
 8006168:	4630      	mov	r0, r6
 800616a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800616e:	89ab      	ldrh	r3, [r5, #12]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d907      	bls.n	8006184 <_fwalk_sglue+0x38>
 8006174:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006178:	3301      	adds	r3, #1
 800617a:	d003      	beq.n	8006184 <_fwalk_sglue+0x38>
 800617c:	4629      	mov	r1, r5
 800617e:	4638      	mov	r0, r7
 8006180:	47c0      	blx	r8
 8006182:	4306      	orrs	r6, r0
 8006184:	3568      	adds	r5, #104	@ 0x68
 8006186:	e7e9      	b.n	800615c <_fwalk_sglue+0x10>

08006188 <siprintf>:
 8006188:	b40e      	push	{r1, r2, r3}
 800618a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800618e:	b500      	push	{lr}
 8006190:	b09c      	sub	sp, #112	@ 0x70
 8006192:	ab1d      	add	r3, sp, #116	@ 0x74
 8006194:	9002      	str	r0, [sp, #8]
 8006196:	9006      	str	r0, [sp, #24]
 8006198:	9107      	str	r1, [sp, #28]
 800619a:	9104      	str	r1, [sp, #16]
 800619c:	4808      	ldr	r0, [pc, #32]	@ (80061c0 <siprintf+0x38>)
 800619e:	4909      	ldr	r1, [pc, #36]	@ (80061c4 <siprintf+0x3c>)
 80061a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80061a4:	9105      	str	r1, [sp, #20]
 80061a6:	6800      	ldr	r0, [r0, #0]
 80061a8:	a902      	add	r1, sp, #8
 80061aa:	9301      	str	r3, [sp, #4]
 80061ac:	f001 fc42 	bl	8007a34 <_svfiprintf_r>
 80061b0:	2200      	movs	r2, #0
 80061b2:	9b02      	ldr	r3, [sp, #8]
 80061b4:	701a      	strb	r2, [r3, #0]
 80061b6:	b01c      	add	sp, #112	@ 0x70
 80061b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80061bc:	b003      	add	sp, #12
 80061be:	4770      	bx	lr
 80061c0:	20000098 	.word	0x20000098
 80061c4:	ffff0208 	.word	0xffff0208

080061c8 <__sread>:
 80061c8:	b510      	push	{r4, lr}
 80061ca:	460c      	mov	r4, r1
 80061cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061d0:	f000 f898 	bl	8006304 <_read_r>
 80061d4:	2800      	cmp	r0, #0
 80061d6:	bfab      	itete	ge
 80061d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80061da:	89a3      	ldrhlt	r3, [r4, #12]
 80061dc:	181b      	addge	r3, r3, r0
 80061de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80061e2:	bfac      	ite	ge
 80061e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80061e6:	81a3      	strhlt	r3, [r4, #12]
 80061e8:	bd10      	pop	{r4, pc}

080061ea <__swrite>:
 80061ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061ee:	461f      	mov	r7, r3
 80061f0:	898b      	ldrh	r3, [r1, #12]
 80061f2:	4605      	mov	r5, r0
 80061f4:	05db      	lsls	r3, r3, #23
 80061f6:	460c      	mov	r4, r1
 80061f8:	4616      	mov	r6, r2
 80061fa:	d505      	bpl.n	8006208 <__swrite+0x1e>
 80061fc:	2302      	movs	r3, #2
 80061fe:	2200      	movs	r2, #0
 8006200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006204:	f000 f86c 	bl	80062e0 <_lseek_r>
 8006208:	89a3      	ldrh	r3, [r4, #12]
 800620a:	4632      	mov	r2, r6
 800620c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006210:	81a3      	strh	r3, [r4, #12]
 8006212:	4628      	mov	r0, r5
 8006214:	463b      	mov	r3, r7
 8006216:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800621a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800621e:	f000 b883 	b.w	8006328 <_write_r>

08006222 <__sseek>:
 8006222:	b510      	push	{r4, lr}
 8006224:	460c      	mov	r4, r1
 8006226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800622a:	f000 f859 	bl	80062e0 <_lseek_r>
 800622e:	1c43      	adds	r3, r0, #1
 8006230:	89a3      	ldrh	r3, [r4, #12]
 8006232:	bf15      	itete	ne
 8006234:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006236:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800623a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800623e:	81a3      	strheq	r3, [r4, #12]
 8006240:	bf18      	it	ne
 8006242:	81a3      	strhne	r3, [r4, #12]
 8006244:	bd10      	pop	{r4, pc}

08006246 <__sclose>:
 8006246:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800624a:	f000 b839 	b.w	80062c0 <_close_r>

0800624e <memmove>:
 800624e:	4288      	cmp	r0, r1
 8006250:	b510      	push	{r4, lr}
 8006252:	eb01 0402 	add.w	r4, r1, r2
 8006256:	d902      	bls.n	800625e <memmove+0x10>
 8006258:	4284      	cmp	r4, r0
 800625a:	4623      	mov	r3, r4
 800625c:	d807      	bhi.n	800626e <memmove+0x20>
 800625e:	1e43      	subs	r3, r0, #1
 8006260:	42a1      	cmp	r1, r4
 8006262:	d008      	beq.n	8006276 <memmove+0x28>
 8006264:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006268:	f803 2f01 	strb.w	r2, [r3, #1]!
 800626c:	e7f8      	b.n	8006260 <memmove+0x12>
 800626e:	4601      	mov	r1, r0
 8006270:	4402      	add	r2, r0
 8006272:	428a      	cmp	r2, r1
 8006274:	d100      	bne.n	8006278 <memmove+0x2a>
 8006276:	bd10      	pop	{r4, pc}
 8006278:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800627c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006280:	e7f7      	b.n	8006272 <memmove+0x24>

08006282 <memset>:
 8006282:	4603      	mov	r3, r0
 8006284:	4402      	add	r2, r0
 8006286:	4293      	cmp	r3, r2
 8006288:	d100      	bne.n	800628c <memset+0xa>
 800628a:	4770      	bx	lr
 800628c:	f803 1b01 	strb.w	r1, [r3], #1
 8006290:	e7f9      	b.n	8006286 <memset+0x4>

08006292 <strncpy>:
 8006292:	4603      	mov	r3, r0
 8006294:	b510      	push	{r4, lr}
 8006296:	3901      	subs	r1, #1
 8006298:	b132      	cbz	r2, 80062a8 <strncpy+0x16>
 800629a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800629e:	3a01      	subs	r2, #1
 80062a0:	f803 4b01 	strb.w	r4, [r3], #1
 80062a4:	2c00      	cmp	r4, #0
 80062a6:	d1f7      	bne.n	8006298 <strncpy+0x6>
 80062a8:	2100      	movs	r1, #0
 80062aa:	441a      	add	r2, r3
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d100      	bne.n	80062b2 <strncpy+0x20>
 80062b0:	bd10      	pop	{r4, pc}
 80062b2:	f803 1b01 	strb.w	r1, [r3], #1
 80062b6:	e7f9      	b.n	80062ac <strncpy+0x1a>

080062b8 <_localeconv_r>:
 80062b8:	4800      	ldr	r0, [pc, #0]	@ (80062bc <_localeconv_r+0x4>)
 80062ba:	4770      	bx	lr
 80062bc:	200001d8 	.word	0x200001d8

080062c0 <_close_r>:
 80062c0:	b538      	push	{r3, r4, r5, lr}
 80062c2:	2300      	movs	r3, #0
 80062c4:	4d05      	ldr	r5, [pc, #20]	@ (80062dc <_close_r+0x1c>)
 80062c6:	4604      	mov	r4, r0
 80062c8:	4608      	mov	r0, r1
 80062ca:	602b      	str	r3, [r5, #0]
 80062cc:	f7fc f9da 	bl	8002684 <_close>
 80062d0:	1c43      	adds	r3, r0, #1
 80062d2:	d102      	bne.n	80062da <_close_r+0x1a>
 80062d4:	682b      	ldr	r3, [r5, #0]
 80062d6:	b103      	cbz	r3, 80062da <_close_r+0x1a>
 80062d8:	6023      	str	r3, [r4, #0]
 80062da:	bd38      	pop	{r3, r4, r5, pc}
 80062dc:	2000053c 	.word	0x2000053c

080062e0 <_lseek_r>:
 80062e0:	b538      	push	{r3, r4, r5, lr}
 80062e2:	4604      	mov	r4, r0
 80062e4:	4608      	mov	r0, r1
 80062e6:	4611      	mov	r1, r2
 80062e8:	2200      	movs	r2, #0
 80062ea:	4d05      	ldr	r5, [pc, #20]	@ (8006300 <_lseek_r+0x20>)
 80062ec:	602a      	str	r2, [r5, #0]
 80062ee:	461a      	mov	r2, r3
 80062f0:	f7fc f9ec 	bl	80026cc <_lseek>
 80062f4:	1c43      	adds	r3, r0, #1
 80062f6:	d102      	bne.n	80062fe <_lseek_r+0x1e>
 80062f8:	682b      	ldr	r3, [r5, #0]
 80062fa:	b103      	cbz	r3, 80062fe <_lseek_r+0x1e>
 80062fc:	6023      	str	r3, [r4, #0]
 80062fe:	bd38      	pop	{r3, r4, r5, pc}
 8006300:	2000053c 	.word	0x2000053c

08006304 <_read_r>:
 8006304:	b538      	push	{r3, r4, r5, lr}
 8006306:	4604      	mov	r4, r0
 8006308:	4608      	mov	r0, r1
 800630a:	4611      	mov	r1, r2
 800630c:	2200      	movs	r2, #0
 800630e:	4d05      	ldr	r5, [pc, #20]	@ (8006324 <_read_r+0x20>)
 8006310:	602a      	str	r2, [r5, #0]
 8006312:	461a      	mov	r2, r3
 8006314:	f7fc f97d 	bl	8002612 <_read>
 8006318:	1c43      	adds	r3, r0, #1
 800631a:	d102      	bne.n	8006322 <_read_r+0x1e>
 800631c:	682b      	ldr	r3, [r5, #0]
 800631e:	b103      	cbz	r3, 8006322 <_read_r+0x1e>
 8006320:	6023      	str	r3, [r4, #0]
 8006322:	bd38      	pop	{r3, r4, r5, pc}
 8006324:	2000053c 	.word	0x2000053c

08006328 <_write_r>:
 8006328:	b538      	push	{r3, r4, r5, lr}
 800632a:	4604      	mov	r4, r0
 800632c:	4608      	mov	r0, r1
 800632e:	4611      	mov	r1, r2
 8006330:	2200      	movs	r2, #0
 8006332:	4d05      	ldr	r5, [pc, #20]	@ (8006348 <_write_r+0x20>)
 8006334:	602a      	str	r2, [r5, #0]
 8006336:	461a      	mov	r2, r3
 8006338:	f7fc f988 	bl	800264c <_write>
 800633c:	1c43      	adds	r3, r0, #1
 800633e:	d102      	bne.n	8006346 <_write_r+0x1e>
 8006340:	682b      	ldr	r3, [r5, #0]
 8006342:	b103      	cbz	r3, 8006346 <_write_r+0x1e>
 8006344:	6023      	str	r3, [r4, #0]
 8006346:	bd38      	pop	{r3, r4, r5, pc}
 8006348:	2000053c 	.word	0x2000053c

0800634c <__errno>:
 800634c:	4b01      	ldr	r3, [pc, #4]	@ (8006354 <__errno+0x8>)
 800634e:	6818      	ldr	r0, [r3, #0]
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	20000098 	.word	0x20000098

08006358 <__libc_init_array>:
 8006358:	b570      	push	{r4, r5, r6, lr}
 800635a:	2600      	movs	r6, #0
 800635c:	4d0c      	ldr	r5, [pc, #48]	@ (8006390 <__libc_init_array+0x38>)
 800635e:	4c0d      	ldr	r4, [pc, #52]	@ (8006394 <__libc_init_array+0x3c>)
 8006360:	1b64      	subs	r4, r4, r5
 8006362:	10a4      	asrs	r4, r4, #2
 8006364:	42a6      	cmp	r6, r4
 8006366:	d109      	bne.n	800637c <__libc_init_array+0x24>
 8006368:	f002 f854 	bl	8008414 <_init>
 800636c:	2600      	movs	r6, #0
 800636e:	4d0a      	ldr	r5, [pc, #40]	@ (8006398 <__libc_init_array+0x40>)
 8006370:	4c0a      	ldr	r4, [pc, #40]	@ (800639c <__libc_init_array+0x44>)
 8006372:	1b64      	subs	r4, r4, r5
 8006374:	10a4      	asrs	r4, r4, #2
 8006376:	42a6      	cmp	r6, r4
 8006378:	d105      	bne.n	8006386 <__libc_init_array+0x2e>
 800637a:	bd70      	pop	{r4, r5, r6, pc}
 800637c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006380:	4798      	blx	r3
 8006382:	3601      	adds	r6, #1
 8006384:	e7ee      	b.n	8006364 <__libc_init_array+0xc>
 8006386:	f855 3b04 	ldr.w	r3, [r5], #4
 800638a:	4798      	blx	r3
 800638c:	3601      	adds	r6, #1
 800638e:	e7f2      	b.n	8006376 <__libc_init_array+0x1e>
 8006390:	08008848 	.word	0x08008848
 8006394:	08008848 	.word	0x08008848
 8006398:	08008848 	.word	0x08008848
 800639c:	0800884c 	.word	0x0800884c

080063a0 <__retarget_lock_init_recursive>:
 80063a0:	4770      	bx	lr

080063a2 <__retarget_lock_acquire_recursive>:
 80063a2:	4770      	bx	lr

080063a4 <__retarget_lock_release_recursive>:
 80063a4:	4770      	bx	lr

080063a6 <memchr>:
 80063a6:	4603      	mov	r3, r0
 80063a8:	b510      	push	{r4, lr}
 80063aa:	b2c9      	uxtb	r1, r1
 80063ac:	4402      	add	r2, r0
 80063ae:	4293      	cmp	r3, r2
 80063b0:	4618      	mov	r0, r3
 80063b2:	d101      	bne.n	80063b8 <memchr+0x12>
 80063b4:	2000      	movs	r0, #0
 80063b6:	e003      	b.n	80063c0 <memchr+0x1a>
 80063b8:	7804      	ldrb	r4, [r0, #0]
 80063ba:	3301      	adds	r3, #1
 80063bc:	428c      	cmp	r4, r1
 80063be:	d1f6      	bne.n	80063ae <memchr+0x8>
 80063c0:	bd10      	pop	{r4, pc}

080063c2 <memcpy>:
 80063c2:	440a      	add	r2, r1
 80063c4:	4291      	cmp	r1, r2
 80063c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80063ca:	d100      	bne.n	80063ce <memcpy+0xc>
 80063cc:	4770      	bx	lr
 80063ce:	b510      	push	{r4, lr}
 80063d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063d4:	4291      	cmp	r1, r2
 80063d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063da:	d1f9      	bne.n	80063d0 <memcpy+0xe>
 80063dc:	bd10      	pop	{r4, pc}

080063de <quorem>:
 80063de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063e2:	6903      	ldr	r3, [r0, #16]
 80063e4:	690c      	ldr	r4, [r1, #16]
 80063e6:	4607      	mov	r7, r0
 80063e8:	42a3      	cmp	r3, r4
 80063ea:	db7e      	blt.n	80064ea <quorem+0x10c>
 80063ec:	3c01      	subs	r4, #1
 80063ee:	00a3      	lsls	r3, r4, #2
 80063f0:	f100 0514 	add.w	r5, r0, #20
 80063f4:	f101 0814 	add.w	r8, r1, #20
 80063f8:	9300      	str	r3, [sp, #0]
 80063fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063fe:	9301      	str	r3, [sp, #4]
 8006400:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006404:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006408:	3301      	adds	r3, #1
 800640a:	429a      	cmp	r2, r3
 800640c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006410:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006414:	d32e      	bcc.n	8006474 <quorem+0x96>
 8006416:	f04f 0a00 	mov.w	sl, #0
 800641a:	46c4      	mov	ip, r8
 800641c:	46ae      	mov	lr, r5
 800641e:	46d3      	mov	fp, sl
 8006420:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006424:	b298      	uxth	r0, r3
 8006426:	fb06 a000 	mla	r0, r6, r0, sl
 800642a:	0c1b      	lsrs	r3, r3, #16
 800642c:	0c02      	lsrs	r2, r0, #16
 800642e:	fb06 2303 	mla	r3, r6, r3, r2
 8006432:	f8de 2000 	ldr.w	r2, [lr]
 8006436:	b280      	uxth	r0, r0
 8006438:	b292      	uxth	r2, r2
 800643a:	1a12      	subs	r2, r2, r0
 800643c:	445a      	add	r2, fp
 800643e:	f8de 0000 	ldr.w	r0, [lr]
 8006442:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006446:	b29b      	uxth	r3, r3
 8006448:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800644c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006450:	b292      	uxth	r2, r2
 8006452:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006456:	45e1      	cmp	r9, ip
 8006458:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800645c:	f84e 2b04 	str.w	r2, [lr], #4
 8006460:	d2de      	bcs.n	8006420 <quorem+0x42>
 8006462:	9b00      	ldr	r3, [sp, #0]
 8006464:	58eb      	ldr	r3, [r5, r3]
 8006466:	b92b      	cbnz	r3, 8006474 <quorem+0x96>
 8006468:	9b01      	ldr	r3, [sp, #4]
 800646a:	3b04      	subs	r3, #4
 800646c:	429d      	cmp	r5, r3
 800646e:	461a      	mov	r2, r3
 8006470:	d32f      	bcc.n	80064d2 <quorem+0xf4>
 8006472:	613c      	str	r4, [r7, #16]
 8006474:	4638      	mov	r0, r7
 8006476:	f001 f979 	bl	800776c <__mcmp>
 800647a:	2800      	cmp	r0, #0
 800647c:	db25      	blt.n	80064ca <quorem+0xec>
 800647e:	4629      	mov	r1, r5
 8006480:	2000      	movs	r0, #0
 8006482:	f858 2b04 	ldr.w	r2, [r8], #4
 8006486:	f8d1 c000 	ldr.w	ip, [r1]
 800648a:	fa1f fe82 	uxth.w	lr, r2
 800648e:	fa1f f38c 	uxth.w	r3, ip
 8006492:	eba3 030e 	sub.w	r3, r3, lr
 8006496:	4403      	add	r3, r0
 8006498:	0c12      	lsrs	r2, r2, #16
 800649a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800649e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064a8:	45c1      	cmp	r9, r8
 80064aa:	ea4f 4022 	mov.w	r0, r2, asr #16
 80064ae:	f841 3b04 	str.w	r3, [r1], #4
 80064b2:	d2e6      	bcs.n	8006482 <quorem+0xa4>
 80064b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064bc:	b922      	cbnz	r2, 80064c8 <quorem+0xea>
 80064be:	3b04      	subs	r3, #4
 80064c0:	429d      	cmp	r5, r3
 80064c2:	461a      	mov	r2, r3
 80064c4:	d30b      	bcc.n	80064de <quorem+0x100>
 80064c6:	613c      	str	r4, [r7, #16]
 80064c8:	3601      	adds	r6, #1
 80064ca:	4630      	mov	r0, r6
 80064cc:	b003      	add	sp, #12
 80064ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064d2:	6812      	ldr	r2, [r2, #0]
 80064d4:	3b04      	subs	r3, #4
 80064d6:	2a00      	cmp	r2, #0
 80064d8:	d1cb      	bne.n	8006472 <quorem+0x94>
 80064da:	3c01      	subs	r4, #1
 80064dc:	e7c6      	b.n	800646c <quorem+0x8e>
 80064de:	6812      	ldr	r2, [r2, #0]
 80064e0:	3b04      	subs	r3, #4
 80064e2:	2a00      	cmp	r2, #0
 80064e4:	d1ef      	bne.n	80064c6 <quorem+0xe8>
 80064e6:	3c01      	subs	r4, #1
 80064e8:	e7ea      	b.n	80064c0 <quorem+0xe2>
 80064ea:	2000      	movs	r0, #0
 80064ec:	e7ee      	b.n	80064cc <quorem+0xee>
	...

080064f0 <_dtoa_r>:
 80064f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064f4:	4614      	mov	r4, r2
 80064f6:	461d      	mov	r5, r3
 80064f8:	69c7      	ldr	r7, [r0, #28]
 80064fa:	b097      	sub	sp, #92	@ 0x5c
 80064fc:	4683      	mov	fp, r0
 80064fe:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006502:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006504:	b97f      	cbnz	r7, 8006526 <_dtoa_r+0x36>
 8006506:	2010      	movs	r0, #16
 8006508:	f000 fe02 	bl	8007110 <malloc>
 800650c:	4602      	mov	r2, r0
 800650e:	f8cb 001c 	str.w	r0, [fp, #28]
 8006512:	b920      	cbnz	r0, 800651e <_dtoa_r+0x2e>
 8006514:	21ef      	movs	r1, #239	@ 0xef
 8006516:	4ba8      	ldr	r3, [pc, #672]	@ (80067b8 <_dtoa_r+0x2c8>)
 8006518:	48a8      	ldr	r0, [pc, #672]	@ (80067bc <_dtoa_r+0x2cc>)
 800651a:	f001 fc3f 	bl	8007d9c <__assert_func>
 800651e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006522:	6007      	str	r7, [r0, #0]
 8006524:	60c7      	str	r7, [r0, #12]
 8006526:	f8db 301c 	ldr.w	r3, [fp, #28]
 800652a:	6819      	ldr	r1, [r3, #0]
 800652c:	b159      	cbz	r1, 8006546 <_dtoa_r+0x56>
 800652e:	685a      	ldr	r2, [r3, #4]
 8006530:	2301      	movs	r3, #1
 8006532:	4093      	lsls	r3, r2
 8006534:	604a      	str	r2, [r1, #4]
 8006536:	608b      	str	r3, [r1, #8]
 8006538:	4658      	mov	r0, fp
 800653a:	f000 fedf 	bl	80072fc <_Bfree>
 800653e:	2200      	movs	r2, #0
 8006540:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006544:	601a      	str	r2, [r3, #0]
 8006546:	1e2b      	subs	r3, r5, #0
 8006548:	bfaf      	iteee	ge
 800654a:	2300      	movge	r3, #0
 800654c:	2201      	movlt	r2, #1
 800654e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006552:	9303      	strlt	r3, [sp, #12]
 8006554:	bfa8      	it	ge
 8006556:	6033      	strge	r3, [r6, #0]
 8006558:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800655c:	4b98      	ldr	r3, [pc, #608]	@ (80067c0 <_dtoa_r+0x2d0>)
 800655e:	bfb8      	it	lt
 8006560:	6032      	strlt	r2, [r6, #0]
 8006562:	ea33 0308 	bics.w	r3, r3, r8
 8006566:	d112      	bne.n	800658e <_dtoa_r+0x9e>
 8006568:	f242 730f 	movw	r3, #9999	@ 0x270f
 800656c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800656e:	6013      	str	r3, [r2, #0]
 8006570:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006574:	4323      	orrs	r3, r4
 8006576:	f000 8550 	beq.w	800701a <_dtoa_r+0xb2a>
 800657a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800657c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80067c4 <_dtoa_r+0x2d4>
 8006580:	2b00      	cmp	r3, #0
 8006582:	f000 8552 	beq.w	800702a <_dtoa_r+0xb3a>
 8006586:	f10a 0303 	add.w	r3, sl, #3
 800658a:	f000 bd4c 	b.w	8007026 <_dtoa_r+0xb36>
 800658e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006592:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006596:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800659a:	2200      	movs	r2, #0
 800659c:	2300      	movs	r3, #0
 800659e:	f7fa fa03 	bl	80009a8 <__aeabi_dcmpeq>
 80065a2:	4607      	mov	r7, r0
 80065a4:	b158      	cbz	r0, 80065be <_dtoa_r+0xce>
 80065a6:	2301      	movs	r3, #1
 80065a8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80065aa:	6013      	str	r3, [r2, #0]
 80065ac:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80065ae:	b113      	cbz	r3, 80065b6 <_dtoa_r+0xc6>
 80065b0:	4b85      	ldr	r3, [pc, #532]	@ (80067c8 <_dtoa_r+0x2d8>)
 80065b2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80065b4:	6013      	str	r3, [r2, #0]
 80065b6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80067cc <_dtoa_r+0x2dc>
 80065ba:	f000 bd36 	b.w	800702a <_dtoa_r+0xb3a>
 80065be:	ab14      	add	r3, sp, #80	@ 0x50
 80065c0:	9301      	str	r3, [sp, #4]
 80065c2:	ab15      	add	r3, sp, #84	@ 0x54
 80065c4:	9300      	str	r3, [sp, #0]
 80065c6:	4658      	mov	r0, fp
 80065c8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80065cc:	f001 f97e 	bl	80078cc <__d2b>
 80065d0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80065d4:	4681      	mov	r9, r0
 80065d6:	2e00      	cmp	r6, #0
 80065d8:	d077      	beq.n	80066ca <_dtoa_r+0x1da>
 80065da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80065de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80065e0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80065e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065e8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80065ec:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80065f0:	9712      	str	r7, [sp, #72]	@ 0x48
 80065f2:	4619      	mov	r1, r3
 80065f4:	2200      	movs	r2, #0
 80065f6:	4b76      	ldr	r3, [pc, #472]	@ (80067d0 <_dtoa_r+0x2e0>)
 80065f8:	f7f9 fdb6 	bl	8000168 <__aeabi_dsub>
 80065fc:	a368      	add	r3, pc, #416	@ (adr r3, 80067a0 <_dtoa_r+0x2b0>)
 80065fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006602:	f7f9 ff69 	bl	80004d8 <__aeabi_dmul>
 8006606:	a368      	add	r3, pc, #416	@ (adr r3, 80067a8 <_dtoa_r+0x2b8>)
 8006608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660c:	f7f9 fdae 	bl	800016c <__adddf3>
 8006610:	4604      	mov	r4, r0
 8006612:	4630      	mov	r0, r6
 8006614:	460d      	mov	r5, r1
 8006616:	f7f9 fef5 	bl	8000404 <__aeabi_i2d>
 800661a:	a365      	add	r3, pc, #404	@ (adr r3, 80067b0 <_dtoa_r+0x2c0>)
 800661c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006620:	f7f9 ff5a 	bl	80004d8 <__aeabi_dmul>
 8006624:	4602      	mov	r2, r0
 8006626:	460b      	mov	r3, r1
 8006628:	4620      	mov	r0, r4
 800662a:	4629      	mov	r1, r5
 800662c:	f7f9 fd9e 	bl	800016c <__adddf3>
 8006630:	4604      	mov	r4, r0
 8006632:	460d      	mov	r5, r1
 8006634:	f7fa fa00 	bl	8000a38 <__aeabi_d2iz>
 8006638:	2200      	movs	r2, #0
 800663a:	4607      	mov	r7, r0
 800663c:	2300      	movs	r3, #0
 800663e:	4620      	mov	r0, r4
 8006640:	4629      	mov	r1, r5
 8006642:	f7fa f9bb 	bl	80009bc <__aeabi_dcmplt>
 8006646:	b140      	cbz	r0, 800665a <_dtoa_r+0x16a>
 8006648:	4638      	mov	r0, r7
 800664a:	f7f9 fedb 	bl	8000404 <__aeabi_i2d>
 800664e:	4622      	mov	r2, r4
 8006650:	462b      	mov	r3, r5
 8006652:	f7fa f9a9 	bl	80009a8 <__aeabi_dcmpeq>
 8006656:	b900      	cbnz	r0, 800665a <_dtoa_r+0x16a>
 8006658:	3f01      	subs	r7, #1
 800665a:	2f16      	cmp	r7, #22
 800665c:	d853      	bhi.n	8006706 <_dtoa_r+0x216>
 800665e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006662:	4b5c      	ldr	r3, [pc, #368]	@ (80067d4 <_dtoa_r+0x2e4>)
 8006664:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666c:	f7fa f9a6 	bl	80009bc <__aeabi_dcmplt>
 8006670:	2800      	cmp	r0, #0
 8006672:	d04a      	beq.n	800670a <_dtoa_r+0x21a>
 8006674:	2300      	movs	r3, #0
 8006676:	3f01      	subs	r7, #1
 8006678:	930f      	str	r3, [sp, #60]	@ 0x3c
 800667a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800667c:	1b9b      	subs	r3, r3, r6
 800667e:	1e5a      	subs	r2, r3, #1
 8006680:	bf46      	itte	mi
 8006682:	f1c3 0801 	rsbmi	r8, r3, #1
 8006686:	2300      	movmi	r3, #0
 8006688:	f04f 0800 	movpl.w	r8, #0
 800668c:	9209      	str	r2, [sp, #36]	@ 0x24
 800668e:	bf48      	it	mi
 8006690:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006692:	2f00      	cmp	r7, #0
 8006694:	db3b      	blt.n	800670e <_dtoa_r+0x21e>
 8006696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006698:	970e      	str	r7, [sp, #56]	@ 0x38
 800669a:	443b      	add	r3, r7
 800669c:	9309      	str	r3, [sp, #36]	@ 0x24
 800669e:	2300      	movs	r3, #0
 80066a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80066a2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80066a4:	2b09      	cmp	r3, #9
 80066a6:	d866      	bhi.n	8006776 <_dtoa_r+0x286>
 80066a8:	2b05      	cmp	r3, #5
 80066aa:	bfc4      	itt	gt
 80066ac:	3b04      	subgt	r3, #4
 80066ae:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80066b0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80066b2:	bfc8      	it	gt
 80066b4:	2400      	movgt	r4, #0
 80066b6:	f1a3 0302 	sub.w	r3, r3, #2
 80066ba:	bfd8      	it	le
 80066bc:	2401      	movle	r4, #1
 80066be:	2b03      	cmp	r3, #3
 80066c0:	d864      	bhi.n	800678c <_dtoa_r+0x29c>
 80066c2:	e8df f003 	tbb	[pc, r3]
 80066c6:	382b      	.short	0x382b
 80066c8:	5636      	.short	0x5636
 80066ca:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80066ce:	441e      	add	r6, r3
 80066d0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80066d4:	2b20      	cmp	r3, #32
 80066d6:	bfc1      	itttt	gt
 80066d8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80066dc:	fa08 f803 	lslgt.w	r8, r8, r3
 80066e0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80066e4:	fa24 f303 	lsrgt.w	r3, r4, r3
 80066e8:	bfd6      	itet	le
 80066ea:	f1c3 0320 	rsble	r3, r3, #32
 80066ee:	ea48 0003 	orrgt.w	r0, r8, r3
 80066f2:	fa04 f003 	lslle.w	r0, r4, r3
 80066f6:	f7f9 fe75 	bl	80003e4 <__aeabi_ui2d>
 80066fa:	2201      	movs	r2, #1
 80066fc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006700:	3e01      	subs	r6, #1
 8006702:	9212      	str	r2, [sp, #72]	@ 0x48
 8006704:	e775      	b.n	80065f2 <_dtoa_r+0x102>
 8006706:	2301      	movs	r3, #1
 8006708:	e7b6      	b.n	8006678 <_dtoa_r+0x188>
 800670a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800670c:	e7b5      	b.n	800667a <_dtoa_r+0x18a>
 800670e:	427b      	negs	r3, r7
 8006710:	930a      	str	r3, [sp, #40]	@ 0x28
 8006712:	2300      	movs	r3, #0
 8006714:	eba8 0807 	sub.w	r8, r8, r7
 8006718:	930e      	str	r3, [sp, #56]	@ 0x38
 800671a:	e7c2      	b.n	80066a2 <_dtoa_r+0x1b2>
 800671c:	2300      	movs	r3, #0
 800671e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006720:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006722:	2b00      	cmp	r3, #0
 8006724:	dc35      	bgt.n	8006792 <_dtoa_r+0x2a2>
 8006726:	2301      	movs	r3, #1
 8006728:	461a      	mov	r2, r3
 800672a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800672e:	9221      	str	r2, [sp, #132]	@ 0x84
 8006730:	e00b      	b.n	800674a <_dtoa_r+0x25a>
 8006732:	2301      	movs	r3, #1
 8006734:	e7f3      	b.n	800671e <_dtoa_r+0x22e>
 8006736:	2300      	movs	r3, #0
 8006738:	930b      	str	r3, [sp, #44]	@ 0x2c
 800673a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800673c:	18fb      	adds	r3, r7, r3
 800673e:	9308      	str	r3, [sp, #32]
 8006740:	3301      	adds	r3, #1
 8006742:	2b01      	cmp	r3, #1
 8006744:	9307      	str	r3, [sp, #28]
 8006746:	bfb8      	it	lt
 8006748:	2301      	movlt	r3, #1
 800674a:	2100      	movs	r1, #0
 800674c:	2204      	movs	r2, #4
 800674e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006752:	f102 0514 	add.w	r5, r2, #20
 8006756:	429d      	cmp	r5, r3
 8006758:	d91f      	bls.n	800679a <_dtoa_r+0x2aa>
 800675a:	6041      	str	r1, [r0, #4]
 800675c:	4658      	mov	r0, fp
 800675e:	f000 fd8d 	bl	800727c <_Balloc>
 8006762:	4682      	mov	sl, r0
 8006764:	2800      	cmp	r0, #0
 8006766:	d139      	bne.n	80067dc <_dtoa_r+0x2ec>
 8006768:	4602      	mov	r2, r0
 800676a:	f240 11af 	movw	r1, #431	@ 0x1af
 800676e:	4b1a      	ldr	r3, [pc, #104]	@ (80067d8 <_dtoa_r+0x2e8>)
 8006770:	e6d2      	b.n	8006518 <_dtoa_r+0x28>
 8006772:	2301      	movs	r3, #1
 8006774:	e7e0      	b.n	8006738 <_dtoa_r+0x248>
 8006776:	2401      	movs	r4, #1
 8006778:	2300      	movs	r3, #0
 800677a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800677c:	9320      	str	r3, [sp, #128]	@ 0x80
 800677e:	f04f 33ff 	mov.w	r3, #4294967295
 8006782:	2200      	movs	r2, #0
 8006784:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006788:	2312      	movs	r3, #18
 800678a:	e7d0      	b.n	800672e <_dtoa_r+0x23e>
 800678c:	2301      	movs	r3, #1
 800678e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006790:	e7f5      	b.n	800677e <_dtoa_r+0x28e>
 8006792:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006794:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006798:	e7d7      	b.n	800674a <_dtoa_r+0x25a>
 800679a:	3101      	adds	r1, #1
 800679c:	0052      	lsls	r2, r2, #1
 800679e:	e7d8      	b.n	8006752 <_dtoa_r+0x262>
 80067a0:	636f4361 	.word	0x636f4361
 80067a4:	3fd287a7 	.word	0x3fd287a7
 80067a8:	8b60c8b3 	.word	0x8b60c8b3
 80067ac:	3fc68a28 	.word	0x3fc68a28
 80067b0:	509f79fb 	.word	0x509f79fb
 80067b4:	3fd34413 	.word	0x3fd34413
 80067b8:	08008610 	.word	0x08008610
 80067bc:	08008627 	.word	0x08008627
 80067c0:	7ff00000 	.word	0x7ff00000
 80067c4:	0800860c 	.word	0x0800860c
 80067c8:	080085e0 	.word	0x080085e0
 80067cc:	080085df 	.word	0x080085df
 80067d0:	3ff80000 	.word	0x3ff80000
 80067d4:	08008720 	.word	0x08008720
 80067d8:	0800867f 	.word	0x0800867f
 80067dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80067e0:	6018      	str	r0, [r3, #0]
 80067e2:	9b07      	ldr	r3, [sp, #28]
 80067e4:	2b0e      	cmp	r3, #14
 80067e6:	f200 80a4 	bhi.w	8006932 <_dtoa_r+0x442>
 80067ea:	2c00      	cmp	r4, #0
 80067ec:	f000 80a1 	beq.w	8006932 <_dtoa_r+0x442>
 80067f0:	2f00      	cmp	r7, #0
 80067f2:	dd33      	ble.n	800685c <_dtoa_r+0x36c>
 80067f4:	4b86      	ldr	r3, [pc, #536]	@ (8006a10 <_dtoa_r+0x520>)
 80067f6:	f007 020f 	and.w	r2, r7, #15
 80067fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067fe:	05f8      	lsls	r0, r7, #23
 8006800:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006804:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006808:	ea4f 1427 	mov.w	r4, r7, asr #4
 800680c:	d516      	bpl.n	800683c <_dtoa_r+0x34c>
 800680e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006812:	4b80      	ldr	r3, [pc, #512]	@ (8006a14 <_dtoa_r+0x524>)
 8006814:	2603      	movs	r6, #3
 8006816:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800681a:	f7f9 ff87 	bl	800072c <__aeabi_ddiv>
 800681e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006822:	f004 040f 	and.w	r4, r4, #15
 8006826:	4d7b      	ldr	r5, [pc, #492]	@ (8006a14 <_dtoa_r+0x524>)
 8006828:	b954      	cbnz	r4, 8006840 <_dtoa_r+0x350>
 800682a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800682e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006832:	f7f9 ff7b 	bl	800072c <__aeabi_ddiv>
 8006836:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800683a:	e028      	b.n	800688e <_dtoa_r+0x39e>
 800683c:	2602      	movs	r6, #2
 800683e:	e7f2      	b.n	8006826 <_dtoa_r+0x336>
 8006840:	07e1      	lsls	r1, r4, #31
 8006842:	d508      	bpl.n	8006856 <_dtoa_r+0x366>
 8006844:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006848:	e9d5 2300 	ldrd	r2, r3, [r5]
 800684c:	f7f9 fe44 	bl	80004d8 <__aeabi_dmul>
 8006850:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006854:	3601      	adds	r6, #1
 8006856:	1064      	asrs	r4, r4, #1
 8006858:	3508      	adds	r5, #8
 800685a:	e7e5      	b.n	8006828 <_dtoa_r+0x338>
 800685c:	f000 80d2 	beq.w	8006a04 <_dtoa_r+0x514>
 8006860:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006864:	427c      	negs	r4, r7
 8006866:	4b6a      	ldr	r3, [pc, #424]	@ (8006a10 <_dtoa_r+0x520>)
 8006868:	f004 020f 	and.w	r2, r4, #15
 800686c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006874:	f7f9 fe30 	bl	80004d8 <__aeabi_dmul>
 8006878:	2602      	movs	r6, #2
 800687a:	2300      	movs	r3, #0
 800687c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006880:	4d64      	ldr	r5, [pc, #400]	@ (8006a14 <_dtoa_r+0x524>)
 8006882:	1124      	asrs	r4, r4, #4
 8006884:	2c00      	cmp	r4, #0
 8006886:	f040 80b2 	bne.w	80069ee <_dtoa_r+0x4fe>
 800688a:	2b00      	cmp	r3, #0
 800688c:	d1d3      	bne.n	8006836 <_dtoa_r+0x346>
 800688e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006892:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006894:	2b00      	cmp	r3, #0
 8006896:	f000 80b7 	beq.w	8006a08 <_dtoa_r+0x518>
 800689a:	2200      	movs	r2, #0
 800689c:	4620      	mov	r0, r4
 800689e:	4629      	mov	r1, r5
 80068a0:	4b5d      	ldr	r3, [pc, #372]	@ (8006a18 <_dtoa_r+0x528>)
 80068a2:	f7fa f88b 	bl	80009bc <__aeabi_dcmplt>
 80068a6:	2800      	cmp	r0, #0
 80068a8:	f000 80ae 	beq.w	8006a08 <_dtoa_r+0x518>
 80068ac:	9b07      	ldr	r3, [sp, #28]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	f000 80aa 	beq.w	8006a08 <_dtoa_r+0x518>
 80068b4:	9b08      	ldr	r3, [sp, #32]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	dd37      	ble.n	800692a <_dtoa_r+0x43a>
 80068ba:	1e7b      	subs	r3, r7, #1
 80068bc:	4620      	mov	r0, r4
 80068be:	9304      	str	r3, [sp, #16]
 80068c0:	2200      	movs	r2, #0
 80068c2:	4629      	mov	r1, r5
 80068c4:	4b55      	ldr	r3, [pc, #340]	@ (8006a1c <_dtoa_r+0x52c>)
 80068c6:	f7f9 fe07 	bl	80004d8 <__aeabi_dmul>
 80068ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068ce:	9c08      	ldr	r4, [sp, #32]
 80068d0:	3601      	adds	r6, #1
 80068d2:	4630      	mov	r0, r6
 80068d4:	f7f9 fd96 	bl	8000404 <__aeabi_i2d>
 80068d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80068dc:	f7f9 fdfc 	bl	80004d8 <__aeabi_dmul>
 80068e0:	2200      	movs	r2, #0
 80068e2:	4b4f      	ldr	r3, [pc, #316]	@ (8006a20 <_dtoa_r+0x530>)
 80068e4:	f7f9 fc42 	bl	800016c <__adddf3>
 80068e8:	4605      	mov	r5, r0
 80068ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80068ee:	2c00      	cmp	r4, #0
 80068f0:	f040 809a 	bne.w	8006a28 <_dtoa_r+0x538>
 80068f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068f8:	2200      	movs	r2, #0
 80068fa:	4b4a      	ldr	r3, [pc, #296]	@ (8006a24 <_dtoa_r+0x534>)
 80068fc:	f7f9 fc34 	bl	8000168 <__aeabi_dsub>
 8006900:	4602      	mov	r2, r0
 8006902:	460b      	mov	r3, r1
 8006904:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006908:	462a      	mov	r2, r5
 800690a:	4633      	mov	r3, r6
 800690c:	f7fa f874 	bl	80009f8 <__aeabi_dcmpgt>
 8006910:	2800      	cmp	r0, #0
 8006912:	f040 828e 	bne.w	8006e32 <_dtoa_r+0x942>
 8006916:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800691a:	462a      	mov	r2, r5
 800691c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006920:	f7fa f84c 	bl	80009bc <__aeabi_dcmplt>
 8006924:	2800      	cmp	r0, #0
 8006926:	f040 8127 	bne.w	8006b78 <_dtoa_r+0x688>
 800692a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800692e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006932:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006934:	2b00      	cmp	r3, #0
 8006936:	f2c0 8163 	blt.w	8006c00 <_dtoa_r+0x710>
 800693a:	2f0e      	cmp	r7, #14
 800693c:	f300 8160 	bgt.w	8006c00 <_dtoa_r+0x710>
 8006940:	4b33      	ldr	r3, [pc, #204]	@ (8006a10 <_dtoa_r+0x520>)
 8006942:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006946:	e9d3 3400 	ldrd	r3, r4, [r3]
 800694a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800694e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006950:	2b00      	cmp	r3, #0
 8006952:	da03      	bge.n	800695c <_dtoa_r+0x46c>
 8006954:	9b07      	ldr	r3, [sp, #28]
 8006956:	2b00      	cmp	r3, #0
 8006958:	f340 8100 	ble.w	8006b5c <_dtoa_r+0x66c>
 800695c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006960:	4656      	mov	r6, sl
 8006962:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006966:	4620      	mov	r0, r4
 8006968:	4629      	mov	r1, r5
 800696a:	f7f9 fedf 	bl	800072c <__aeabi_ddiv>
 800696e:	f7fa f863 	bl	8000a38 <__aeabi_d2iz>
 8006972:	4680      	mov	r8, r0
 8006974:	f7f9 fd46 	bl	8000404 <__aeabi_i2d>
 8006978:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800697c:	f7f9 fdac 	bl	80004d8 <__aeabi_dmul>
 8006980:	4602      	mov	r2, r0
 8006982:	460b      	mov	r3, r1
 8006984:	4620      	mov	r0, r4
 8006986:	4629      	mov	r1, r5
 8006988:	f7f9 fbee 	bl	8000168 <__aeabi_dsub>
 800698c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006990:	9d07      	ldr	r5, [sp, #28]
 8006992:	f806 4b01 	strb.w	r4, [r6], #1
 8006996:	eba6 040a 	sub.w	r4, r6, sl
 800699a:	42a5      	cmp	r5, r4
 800699c:	4602      	mov	r2, r0
 800699e:	460b      	mov	r3, r1
 80069a0:	f040 8116 	bne.w	8006bd0 <_dtoa_r+0x6e0>
 80069a4:	f7f9 fbe2 	bl	800016c <__adddf3>
 80069a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069ac:	4604      	mov	r4, r0
 80069ae:	460d      	mov	r5, r1
 80069b0:	f7fa f822 	bl	80009f8 <__aeabi_dcmpgt>
 80069b4:	2800      	cmp	r0, #0
 80069b6:	f040 80f8 	bne.w	8006baa <_dtoa_r+0x6ba>
 80069ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069be:	4620      	mov	r0, r4
 80069c0:	4629      	mov	r1, r5
 80069c2:	f7f9 fff1 	bl	80009a8 <__aeabi_dcmpeq>
 80069c6:	b118      	cbz	r0, 80069d0 <_dtoa_r+0x4e0>
 80069c8:	f018 0f01 	tst.w	r8, #1
 80069cc:	f040 80ed 	bne.w	8006baa <_dtoa_r+0x6ba>
 80069d0:	4649      	mov	r1, r9
 80069d2:	4658      	mov	r0, fp
 80069d4:	f000 fc92 	bl	80072fc <_Bfree>
 80069d8:	2300      	movs	r3, #0
 80069da:	7033      	strb	r3, [r6, #0]
 80069dc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80069de:	3701      	adds	r7, #1
 80069e0:	601f      	str	r7, [r3, #0]
 80069e2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f000 8320 	beq.w	800702a <_dtoa_r+0xb3a>
 80069ea:	601e      	str	r6, [r3, #0]
 80069ec:	e31d      	b.n	800702a <_dtoa_r+0xb3a>
 80069ee:	07e2      	lsls	r2, r4, #31
 80069f0:	d505      	bpl.n	80069fe <_dtoa_r+0x50e>
 80069f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80069f6:	f7f9 fd6f 	bl	80004d8 <__aeabi_dmul>
 80069fa:	2301      	movs	r3, #1
 80069fc:	3601      	adds	r6, #1
 80069fe:	1064      	asrs	r4, r4, #1
 8006a00:	3508      	adds	r5, #8
 8006a02:	e73f      	b.n	8006884 <_dtoa_r+0x394>
 8006a04:	2602      	movs	r6, #2
 8006a06:	e742      	b.n	800688e <_dtoa_r+0x39e>
 8006a08:	9c07      	ldr	r4, [sp, #28]
 8006a0a:	9704      	str	r7, [sp, #16]
 8006a0c:	e761      	b.n	80068d2 <_dtoa_r+0x3e2>
 8006a0e:	bf00      	nop
 8006a10:	08008720 	.word	0x08008720
 8006a14:	080086f8 	.word	0x080086f8
 8006a18:	3ff00000 	.word	0x3ff00000
 8006a1c:	40240000 	.word	0x40240000
 8006a20:	401c0000 	.word	0x401c0000
 8006a24:	40140000 	.word	0x40140000
 8006a28:	4b70      	ldr	r3, [pc, #448]	@ (8006bec <_dtoa_r+0x6fc>)
 8006a2a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006a2c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a30:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a34:	4454      	add	r4, sl
 8006a36:	2900      	cmp	r1, #0
 8006a38:	d045      	beq.n	8006ac6 <_dtoa_r+0x5d6>
 8006a3a:	2000      	movs	r0, #0
 8006a3c:	496c      	ldr	r1, [pc, #432]	@ (8006bf0 <_dtoa_r+0x700>)
 8006a3e:	f7f9 fe75 	bl	800072c <__aeabi_ddiv>
 8006a42:	4633      	mov	r3, r6
 8006a44:	462a      	mov	r2, r5
 8006a46:	f7f9 fb8f 	bl	8000168 <__aeabi_dsub>
 8006a4a:	4656      	mov	r6, sl
 8006a4c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006a50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a54:	f7f9 fff0 	bl	8000a38 <__aeabi_d2iz>
 8006a58:	4605      	mov	r5, r0
 8006a5a:	f7f9 fcd3 	bl	8000404 <__aeabi_i2d>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	460b      	mov	r3, r1
 8006a62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a66:	f7f9 fb7f 	bl	8000168 <__aeabi_dsub>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	3530      	adds	r5, #48	@ 0x30
 8006a70:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a74:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006a78:	f806 5b01 	strb.w	r5, [r6], #1
 8006a7c:	f7f9 ff9e 	bl	80009bc <__aeabi_dcmplt>
 8006a80:	2800      	cmp	r0, #0
 8006a82:	d163      	bne.n	8006b4c <_dtoa_r+0x65c>
 8006a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a88:	2000      	movs	r0, #0
 8006a8a:	495a      	ldr	r1, [pc, #360]	@ (8006bf4 <_dtoa_r+0x704>)
 8006a8c:	f7f9 fb6c 	bl	8000168 <__aeabi_dsub>
 8006a90:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006a94:	f7f9 ff92 	bl	80009bc <__aeabi_dcmplt>
 8006a98:	2800      	cmp	r0, #0
 8006a9a:	f040 8087 	bne.w	8006bac <_dtoa_r+0x6bc>
 8006a9e:	42a6      	cmp	r6, r4
 8006aa0:	f43f af43 	beq.w	800692a <_dtoa_r+0x43a>
 8006aa4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	4b53      	ldr	r3, [pc, #332]	@ (8006bf8 <_dtoa_r+0x708>)
 8006aac:	f7f9 fd14 	bl	80004d8 <__aeabi_dmul>
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006ab6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006aba:	4b4f      	ldr	r3, [pc, #316]	@ (8006bf8 <_dtoa_r+0x708>)
 8006abc:	f7f9 fd0c 	bl	80004d8 <__aeabi_dmul>
 8006ac0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ac4:	e7c4      	b.n	8006a50 <_dtoa_r+0x560>
 8006ac6:	4631      	mov	r1, r6
 8006ac8:	4628      	mov	r0, r5
 8006aca:	f7f9 fd05 	bl	80004d8 <__aeabi_dmul>
 8006ace:	4656      	mov	r6, sl
 8006ad0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006ad4:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006ad6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ada:	f7f9 ffad 	bl	8000a38 <__aeabi_d2iz>
 8006ade:	4605      	mov	r5, r0
 8006ae0:	f7f9 fc90 	bl	8000404 <__aeabi_i2d>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006aec:	f7f9 fb3c 	bl	8000168 <__aeabi_dsub>
 8006af0:	4602      	mov	r2, r0
 8006af2:	460b      	mov	r3, r1
 8006af4:	3530      	adds	r5, #48	@ 0x30
 8006af6:	f806 5b01 	strb.w	r5, [r6], #1
 8006afa:	42a6      	cmp	r6, r4
 8006afc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006b00:	f04f 0200 	mov.w	r2, #0
 8006b04:	d124      	bne.n	8006b50 <_dtoa_r+0x660>
 8006b06:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006b0a:	4b39      	ldr	r3, [pc, #228]	@ (8006bf0 <_dtoa_r+0x700>)
 8006b0c:	f7f9 fb2e 	bl	800016c <__adddf3>
 8006b10:	4602      	mov	r2, r0
 8006b12:	460b      	mov	r3, r1
 8006b14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b18:	f7f9 ff6e 	bl	80009f8 <__aeabi_dcmpgt>
 8006b1c:	2800      	cmp	r0, #0
 8006b1e:	d145      	bne.n	8006bac <_dtoa_r+0x6bc>
 8006b20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006b24:	2000      	movs	r0, #0
 8006b26:	4932      	ldr	r1, [pc, #200]	@ (8006bf0 <_dtoa_r+0x700>)
 8006b28:	f7f9 fb1e 	bl	8000168 <__aeabi_dsub>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	460b      	mov	r3, r1
 8006b30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b34:	f7f9 ff42 	bl	80009bc <__aeabi_dcmplt>
 8006b38:	2800      	cmp	r0, #0
 8006b3a:	f43f aef6 	beq.w	800692a <_dtoa_r+0x43a>
 8006b3e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006b40:	1e73      	subs	r3, r6, #1
 8006b42:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006b44:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006b48:	2b30      	cmp	r3, #48	@ 0x30
 8006b4a:	d0f8      	beq.n	8006b3e <_dtoa_r+0x64e>
 8006b4c:	9f04      	ldr	r7, [sp, #16]
 8006b4e:	e73f      	b.n	80069d0 <_dtoa_r+0x4e0>
 8006b50:	4b29      	ldr	r3, [pc, #164]	@ (8006bf8 <_dtoa_r+0x708>)
 8006b52:	f7f9 fcc1 	bl	80004d8 <__aeabi_dmul>
 8006b56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b5a:	e7bc      	b.n	8006ad6 <_dtoa_r+0x5e6>
 8006b5c:	d10c      	bne.n	8006b78 <_dtoa_r+0x688>
 8006b5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b62:	2200      	movs	r2, #0
 8006b64:	4b25      	ldr	r3, [pc, #148]	@ (8006bfc <_dtoa_r+0x70c>)
 8006b66:	f7f9 fcb7 	bl	80004d8 <__aeabi_dmul>
 8006b6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b6e:	f7f9 ff39 	bl	80009e4 <__aeabi_dcmpge>
 8006b72:	2800      	cmp	r0, #0
 8006b74:	f000 815b 	beq.w	8006e2e <_dtoa_r+0x93e>
 8006b78:	2400      	movs	r4, #0
 8006b7a:	4625      	mov	r5, r4
 8006b7c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006b7e:	4656      	mov	r6, sl
 8006b80:	43db      	mvns	r3, r3
 8006b82:	9304      	str	r3, [sp, #16]
 8006b84:	2700      	movs	r7, #0
 8006b86:	4621      	mov	r1, r4
 8006b88:	4658      	mov	r0, fp
 8006b8a:	f000 fbb7 	bl	80072fc <_Bfree>
 8006b8e:	2d00      	cmp	r5, #0
 8006b90:	d0dc      	beq.n	8006b4c <_dtoa_r+0x65c>
 8006b92:	b12f      	cbz	r7, 8006ba0 <_dtoa_r+0x6b0>
 8006b94:	42af      	cmp	r7, r5
 8006b96:	d003      	beq.n	8006ba0 <_dtoa_r+0x6b0>
 8006b98:	4639      	mov	r1, r7
 8006b9a:	4658      	mov	r0, fp
 8006b9c:	f000 fbae 	bl	80072fc <_Bfree>
 8006ba0:	4629      	mov	r1, r5
 8006ba2:	4658      	mov	r0, fp
 8006ba4:	f000 fbaa 	bl	80072fc <_Bfree>
 8006ba8:	e7d0      	b.n	8006b4c <_dtoa_r+0x65c>
 8006baa:	9704      	str	r7, [sp, #16]
 8006bac:	4633      	mov	r3, r6
 8006bae:	461e      	mov	r6, r3
 8006bb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bb4:	2a39      	cmp	r2, #57	@ 0x39
 8006bb6:	d107      	bne.n	8006bc8 <_dtoa_r+0x6d8>
 8006bb8:	459a      	cmp	sl, r3
 8006bba:	d1f8      	bne.n	8006bae <_dtoa_r+0x6be>
 8006bbc:	9a04      	ldr	r2, [sp, #16]
 8006bbe:	3201      	adds	r2, #1
 8006bc0:	9204      	str	r2, [sp, #16]
 8006bc2:	2230      	movs	r2, #48	@ 0x30
 8006bc4:	f88a 2000 	strb.w	r2, [sl]
 8006bc8:	781a      	ldrb	r2, [r3, #0]
 8006bca:	3201      	adds	r2, #1
 8006bcc:	701a      	strb	r2, [r3, #0]
 8006bce:	e7bd      	b.n	8006b4c <_dtoa_r+0x65c>
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	4b09      	ldr	r3, [pc, #36]	@ (8006bf8 <_dtoa_r+0x708>)
 8006bd4:	f7f9 fc80 	bl	80004d8 <__aeabi_dmul>
 8006bd8:	2200      	movs	r2, #0
 8006bda:	2300      	movs	r3, #0
 8006bdc:	4604      	mov	r4, r0
 8006bde:	460d      	mov	r5, r1
 8006be0:	f7f9 fee2 	bl	80009a8 <__aeabi_dcmpeq>
 8006be4:	2800      	cmp	r0, #0
 8006be6:	f43f aebc 	beq.w	8006962 <_dtoa_r+0x472>
 8006bea:	e6f1      	b.n	80069d0 <_dtoa_r+0x4e0>
 8006bec:	08008720 	.word	0x08008720
 8006bf0:	3fe00000 	.word	0x3fe00000
 8006bf4:	3ff00000 	.word	0x3ff00000
 8006bf8:	40240000 	.word	0x40240000
 8006bfc:	40140000 	.word	0x40140000
 8006c00:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006c02:	2a00      	cmp	r2, #0
 8006c04:	f000 80db 	beq.w	8006dbe <_dtoa_r+0x8ce>
 8006c08:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006c0a:	2a01      	cmp	r2, #1
 8006c0c:	f300 80bf 	bgt.w	8006d8e <_dtoa_r+0x89e>
 8006c10:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006c12:	2a00      	cmp	r2, #0
 8006c14:	f000 80b7 	beq.w	8006d86 <_dtoa_r+0x896>
 8006c18:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006c1c:	4646      	mov	r6, r8
 8006c1e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006c20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c22:	2101      	movs	r1, #1
 8006c24:	441a      	add	r2, r3
 8006c26:	4658      	mov	r0, fp
 8006c28:	4498      	add	r8, r3
 8006c2a:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c2c:	f000 fc1a 	bl	8007464 <__i2b>
 8006c30:	4605      	mov	r5, r0
 8006c32:	b15e      	cbz	r6, 8006c4c <_dtoa_r+0x75c>
 8006c34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	dd08      	ble.n	8006c4c <_dtoa_r+0x75c>
 8006c3a:	42b3      	cmp	r3, r6
 8006c3c:	bfa8      	it	ge
 8006c3e:	4633      	movge	r3, r6
 8006c40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c42:	eba8 0803 	sub.w	r8, r8, r3
 8006c46:	1af6      	subs	r6, r6, r3
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c4e:	b1f3      	cbz	r3, 8006c8e <_dtoa_r+0x79e>
 8006c50:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	f000 80b7 	beq.w	8006dc6 <_dtoa_r+0x8d6>
 8006c58:	b18c      	cbz	r4, 8006c7e <_dtoa_r+0x78e>
 8006c5a:	4629      	mov	r1, r5
 8006c5c:	4622      	mov	r2, r4
 8006c5e:	4658      	mov	r0, fp
 8006c60:	f000 fcbe 	bl	80075e0 <__pow5mult>
 8006c64:	464a      	mov	r2, r9
 8006c66:	4601      	mov	r1, r0
 8006c68:	4605      	mov	r5, r0
 8006c6a:	4658      	mov	r0, fp
 8006c6c:	f000 fc10 	bl	8007490 <__multiply>
 8006c70:	4649      	mov	r1, r9
 8006c72:	9004      	str	r0, [sp, #16]
 8006c74:	4658      	mov	r0, fp
 8006c76:	f000 fb41 	bl	80072fc <_Bfree>
 8006c7a:	9b04      	ldr	r3, [sp, #16]
 8006c7c:	4699      	mov	r9, r3
 8006c7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c80:	1b1a      	subs	r2, r3, r4
 8006c82:	d004      	beq.n	8006c8e <_dtoa_r+0x79e>
 8006c84:	4649      	mov	r1, r9
 8006c86:	4658      	mov	r0, fp
 8006c88:	f000 fcaa 	bl	80075e0 <__pow5mult>
 8006c8c:	4681      	mov	r9, r0
 8006c8e:	2101      	movs	r1, #1
 8006c90:	4658      	mov	r0, fp
 8006c92:	f000 fbe7 	bl	8007464 <__i2b>
 8006c96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c98:	4604      	mov	r4, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	f000 81c9 	beq.w	8007032 <_dtoa_r+0xb42>
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	4601      	mov	r1, r0
 8006ca4:	4658      	mov	r0, fp
 8006ca6:	f000 fc9b 	bl	80075e0 <__pow5mult>
 8006caa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006cac:	4604      	mov	r4, r0
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	f300 808f 	bgt.w	8006dd2 <_dtoa_r+0x8e2>
 8006cb4:	9b02      	ldr	r3, [sp, #8]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	f040 8087 	bne.w	8006dca <_dtoa_r+0x8da>
 8006cbc:	9b03      	ldr	r3, [sp, #12]
 8006cbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f040 8083 	bne.w	8006dce <_dtoa_r+0x8de>
 8006cc8:	9b03      	ldr	r3, [sp, #12]
 8006cca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006cce:	0d1b      	lsrs	r3, r3, #20
 8006cd0:	051b      	lsls	r3, r3, #20
 8006cd2:	b12b      	cbz	r3, 8006ce0 <_dtoa_r+0x7f0>
 8006cd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cd6:	f108 0801 	add.w	r8, r8, #1
 8006cda:	3301      	adds	r3, #1
 8006cdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cde:	2301      	movs	r3, #1
 8006ce0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ce2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f000 81aa 	beq.w	800703e <_dtoa_r+0xb4e>
 8006cea:	6923      	ldr	r3, [r4, #16]
 8006cec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006cf0:	6918      	ldr	r0, [r3, #16]
 8006cf2:	f000 fb6b 	bl	80073cc <__hi0bits>
 8006cf6:	f1c0 0020 	rsb	r0, r0, #32
 8006cfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cfc:	4418      	add	r0, r3
 8006cfe:	f010 001f 	ands.w	r0, r0, #31
 8006d02:	d071      	beq.n	8006de8 <_dtoa_r+0x8f8>
 8006d04:	f1c0 0320 	rsb	r3, r0, #32
 8006d08:	2b04      	cmp	r3, #4
 8006d0a:	dd65      	ble.n	8006dd8 <_dtoa_r+0x8e8>
 8006d0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d0e:	f1c0 001c 	rsb	r0, r0, #28
 8006d12:	4403      	add	r3, r0
 8006d14:	4480      	add	r8, r0
 8006d16:	4406      	add	r6, r0
 8006d18:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d1a:	f1b8 0f00 	cmp.w	r8, #0
 8006d1e:	dd05      	ble.n	8006d2c <_dtoa_r+0x83c>
 8006d20:	4649      	mov	r1, r9
 8006d22:	4642      	mov	r2, r8
 8006d24:	4658      	mov	r0, fp
 8006d26:	f000 fcb5 	bl	8007694 <__lshift>
 8006d2a:	4681      	mov	r9, r0
 8006d2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	dd05      	ble.n	8006d3e <_dtoa_r+0x84e>
 8006d32:	4621      	mov	r1, r4
 8006d34:	461a      	mov	r2, r3
 8006d36:	4658      	mov	r0, fp
 8006d38:	f000 fcac 	bl	8007694 <__lshift>
 8006d3c:	4604      	mov	r4, r0
 8006d3e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d053      	beq.n	8006dec <_dtoa_r+0x8fc>
 8006d44:	4621      	mov	r1, r4
 8006d46:	4648      	mov	r0, r9
 8006d48:	f000 fd10 	bl	800776c <__mcmp>
 8006d4c:	2800      	cmp	r0, #0
 8006d4e:	da4d      	bge.n	8006dec <_dtoa_r+0x8fc>
 8006d50:	1e7b      	subs	r3, r7, #1
 8006d52:	4649      	mov	r1, r9
 8006d54:	9304      	str	r3, [sp, #16]
 8006d56:	220a      	movs	r2, #10
 8006d58:	2300      	movs	r3, #0
 8006d5a:	4658      	mov	r0, fp
 8006d5c:	f000 faf0 	bl	8007340 <__multadd>
 8006d60:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d62:	4681      	mov	r9, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	f000 816c 	beq.w	8007042 <_dtoa_r+0xb52>
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	4629      	mov	r1, r5
 8006d6e:	220a      	movs	r2, #10
 8006d70:	4658      	mov	r0, fp
 8006d72:	f000 fae5 	bl	8007340 <__multadd>
 8006d76:	9b08      	ldr	r3, [sp, #32]
 8006d78:	4605      	mov	r5, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	dc61      	bgt.n	8006e42 <_dtoa_r+0x952>
 8006d7e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	dc3b      	bgt.n	8006dfc <_dtoa_r+0x90c>
 8006d84:	e05d      	b.n	8006e42 <_dtoa_r+0x952>
 8006d86:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006d88:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006d8c:	e746      	b.n	8006c1c <_dtoa_r+0x72c>
 8006d8e:	9b07      	ldr	r3, [sp, #28]
 8006d90:	1e5c      	subs	r4, r3, #1
 8006d92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d94:	42a3      	cmp	r3, r4
 8006d96:	bfbf      	itttt	lt
 8006d98:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006d9a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8006d9c:	1ae3      	sublt	r3, r4, r3
 8006d9e:	18d2      	addlt	r2, r2, r3
 8006da0:	bfa8      	it	ge
 8006da2:	1b1c      	subge	r4, r3, r4
 8006da4:	9b07      	ldr	r3, [sp, #28]
 8006da6:	bfbe      	ittt	lt
 8006da8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006daa:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8006dac:	2400      	movlt	r4, #0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	bfb5      	itete	lt
 8006db2:	eba8 0603 	sublt.w	r6, r8, r3
 8006db6:	4646      	movge	r6, r8
 8006db8:	2300      	movlt	r3, #0
 8006dba:	9b07      	ldrge	r3, [sp, #28]
 8006dbc:	e730      	b.n	8006c20 <_dtoa_r+0x730>
 8006dbe:	4646      	mov	r6, r8
 8006dc0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006dc2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006dc4:	e735      	b.n	8006c32 <_dtoa_r+0x742>
 8006dc6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006dc8:	e75c      	b.n	8006c84 <_dtoa_r+0x794>
 8006dca:	2300      	movs	r3, #0
 8006dcc:	e788      	b.n	8006ce0 <_dtoa_r+0x7f0>
 8006dce:	9b02      	ldr	r3, [sp, #8]
 8006dd0:	e786      	b.n	8006ce0 <_dtoa_r+0x7f0>
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	930a      	str	r3, [sp, #40]	@ 0x28
 8006dd6:	e788      	b.n	8006cea <_dtoa_r+0x7fa>
 8006dd8:	d09f      	beq.n	8006d1a <_dtoa_r+0x82a>
 8006dda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ddc:	331c      	adds	r3, #28
 8006dde:	441a      	add	r2, r3
 8006de0:	4498      	add	r8, r3
 8006de2:	441e      	add	r6, r3
 8006de4:	9209      	str	r2, [sp, #36]	@ 0x24
 8006de6:	e798      	b.n	8006d1a <_dtoa_r+0x82a>
 8006de8:	4603      	mov	r3, r0
 8006dea:	e7f6      	b.n	8006dda <_dtoa_r+0x8ea>
 8006dec:	9b07      	ldr	r3, [sp, #28]
 8006dee:	9704      	str	r7, [sp, #16]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	dc20      	bgt.n	8006e36 <_dtoa_r+0x946>
 8006df4:	9308      	str	r3, [sp, #32]
 8006df6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	dd1e      	ble.n	8006e3a <_dtoa_r+0x94a>
 8006dfc:	9b08      	ldr	r3, [sp, #32]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	f47f aebc 	bne.w	8006b7c <_dtoa_r+0x68c>
 8006e04:	4621      	mov	r1, r4
 8006e06:	2205      	movs	r2, #5
 8006e08:	4658      	mov	r0, fp
 8006e0a:	f000 fa99 	bl	8007340 <__multadd>
 8006e0e:	4601      	mov	r1, r0
 8006e10:	4604      	mov	r4, r0
 8006e12:	4648      	mov	r0, r9
 8006e14:	f000 fcaa 	bl	800776c <__mcmp>
 8006e18:	2800      	cmp	r0, #0
 8006e1a:	f77f aeaf 	ble.w	8006b7c <_dtoa_r+0x68c>
 8006e1e:	2331      	movs	r3, #49	@ 0x31
 8006e20:	4656      	mov	r6, sl
 8006e22:	f806 3b01 	strb.w	r3, [r6], #1
 8006e26:	9b04      	ldr	r3, [sp, #16]
 8006e28:	3301      	adds	r3, #1
 8006e2a:	9304      	str	r3, [sp, #16]
 8006e2c:	e6aa      	b.n	8006b84 <_dtoa_r+0x694>
 8006e2e:	9c07      	ldr	r4, [sp, #28]
 8006e30:	9704      	str	r7, [sp, #16]
 8006e32:	4625      	mov	r5, r4
 8006e34:	e7f3      	b.n	8006e1e <_dtoa_r+0x92e>
 8006e36:	9b07      	ldr	r3, [sp, #28]
 8006e38:	9308      	str	r3, [sp, #32]
 8006e3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f000 8104 	beq.w	800704a <_dtoa_r+0xb5a>
 8006e42:	2e00      	cmp	r6, #0
 8006e44:	dd05      	ble.n	8006e52 <_dtoa_r+0x962>
 8006e46:	4629      	mov	r1, r5
 8006e48:	4632      	mov	r2, r6
 8006e4a:	4658      	mov	r0, fp
 8006e4c:	f000 fc22 	bl	8007694 <__lshift>
 8006e50:	4605      	mov	r5, r0
 8006e52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d05a      	beq.n	8006f0e <_dtoa_r+0xa1e>
 8006e58:	4658      	mov	r0, fp
 8006e5a:	6869      	ldr	r1, [r5, #4]
 8006e5c:	f000 fa0e 	bl	800727c <_Balloc>
 8006e60:	4606      	mov	r6, r0
 8006e62:	b928      	cbnz	r0, 8006e70 <_dtoa_r+0x980>
 8006e64:	4602      	mov	r2, r0
 8006e66:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006e6a:	4b83      	ldr	r3, [pc, #524]	@ (8007078 <_dtoa_r+0xb88>)
 8006e6c:	f7ff bb54 	b.w	8006518 <_dtoa_r+0x28>
 8006e70:	692a      	ldr	r2, [r5, #16]
 8006e72:	f105 010c 	add.w	r1, r5, #12
 8006e76:	3202      	adds	r2, #2
 8006e78:	0092      	lsls	r2, r2, #2
 8006e7a:	300c      	adds	r0, #12
 8006e7c:	f7ff faa1 	bl	80063c2 <memcpy>
 8006e80:	2201      	movs	r2, #1
 8006e82:	4631      	mov	r1, r6
 8006e84:	4658      	mov	r0, fp
 8006e86:	f000 fc05 	bl	8007694 <__lshift>
 8006e8a:	462f      	mov	r7, r5
 8006e8c:	4605      	mov	r5, r0
 8006e8e:	f10a 0301 	add.w	r3, sl, #1
 8006e92:	9307      	str	r3, [sp, #28]
 8006e94:	9b08      	ldr	r3, [sp, #32]
 8006e96:	4453      	add	r3, sl
 8006e98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e9a:	9b02      	ldr	r3, [sp, #8]
 8006e9c:	f003 0301 	and.w	r3, r3, #1
 8006ea0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ea2:	9b07      	ldr	r3, [sp, #28]
 8006ea4:	4621      	mov	r1, r4
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	4648      	mov	r0, r9
 8006eaa:	9302      	str	r3, [sp, #8]
 8006eac:	f7ff fa97 	bl	80063de <quorem>
 8006eb0:	4639      	mov	r1, r7
 8006eb2:	9008      	str	r0, [sp, #32]
 8006eb4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006eb8:	4648      	mov	r0, r9
 8006eba:	f000 fc57 	bl	800776c <__mcmp>
 8006ebe:	462a      	mov	r2, r5
 8006ec0:	9009      	str	r0, [sp, #36]	@ 0x24
 8006ec2:	4621      	mov	r1, r4
 8006ec4:	4658      	mov	r0, fp
 8006ec6:	f000 fc6d 	bl	80077a4 <__mdiff>
 8006eca:	68c2      	ldr	r2, [r0, #12]
 8006ecc:	4606      	mov	r6, r0
 8006ece:	bb02      	cbnz	r2, 8006f12 <_dtoa_r+0xa22>
 8006ed0:	4601      	mov	r1, r0
 8006ed2:	4648      	mov	r0, r9
 8006ed4:	f000 fc4a 	bl	800776c <__mcmp>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	4631      	mov	r1, r6
 8006edc:	4658      	mov	r0, fp
 8006ede:	920c      	str	r2, [sp, #48]	@ 0x30
 8006ee0:	f000 fa0c 	bl	80072fc <_Bfree>
 8006ee4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006ee6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006ee8:	9e07      	ldr	r6, [sp, #28]
 8006eea:	ea43 0102 	orr.w	r1, r3, r2
 8006eee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ef0:	4319      	orrs	r1, r3
 8006ef2:	d110      	bne.n	8006f16 <_dtoa_r+0xa26>
 8006ef4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006ef8:	d029      	beq.n	8006f4e <_dtoa_r+0xa5e>
 8006efa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	dd02      	ble.n	8006f06 <_dtoa_r+0xa16>
 8006f00:	9b08      	ldr	r3, [sp, #32]
 8006f02:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006f06:	9b02      	ldr	r3, [sp, #8]
 8006f08:	f883 8000 	strb.w	r8, [r3]
 8006f0c:	e63b      	b.n	8006b86 <_dtoa_r+0x696>
 8006f0e:	4628      	mov	r0, r5
 8006f10:	e7bb      	b.n	8006e8a <_dtoa_r+0x99a>
 8006f12:	2201      	movs	r2, #1
 8006f14:	e7e1      	b.n	8006eda <_dtoa_r+0x9ea>
 8006f16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	db04      	blt.n	8006f26 <_dtoa_r+0xa36>
 8006f1c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006f1e:	430b      	orrs	r3, r1
 8006f20:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006f22:	430b      	orrs	r3, r1
 8006f24:	d120      	bne.n	8006f68 <_dtoa_r+0xa78>
 8006f26:	2a00      	cmp	r2, #0
 8006f28:	dded      	ble.n	8006f06 <_dtoa_r+0xa16>
 8006f2a:	4649      	mov	r1, r9
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	4658      	mov	r0, fp
 8006f30:	f000 fbb0 	bl	8007694 <__lshift>
 8006f34:	4621      	mov	r1, r4
 8006f36:	4681      	mov	r9, r0
 8006f38:	f000 fc18 	bl	800776c <__mcmp>
 8006f3c:	2800      	cmp	r0, #0
 8006f3e:	dc03      	bgt.n	8006f48 <_dtoa_r+0xa58>
 8006f40:	d1e1      	bne.n	8006f06 <_dtoa_r+0xa16>
 8006f42:	f018 0f01 	tst.w	r8, #1
 8006f46:	d0de      	beq.n	8006f06 <_dtoa_r+0xa16>
 8006f48:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006f4c:	d1d8      	bne.n	8006f00 <_dtoa_r+0xa10>
 8006f4e:	2339      	movs	r3, #57	@ 0x39
 8006f50:	9a02      	ldr	r2, [sp, #8]
 8006f52:	7013      	strb	r3, [r2, #0]
 8006f54:	4633      	mov	r3, r6
 8006f56:	461e      	mov	r6, r3
 8006f58:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	2a39      	cmp	r2, #57	@ 0x39
 8006f60:	d052      	beq.n	8007008 <_dtoa_r+0xb18>
 8006f62:	3201      	adds	r2, #1
 8006f64:	701a      	strb	r2, [r3, #0]
 8006f66:	e60e      	b.n	8006b86 <_dtoa_r+0x696>
 8006f68:	2a00      	cmp	r2, #0
 8006f6a:	dd07      	ble.n	8006f7c <_dtoa_r+0xa8c>
 8006f6c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006f70:	d0ed      	beq.n	8006f4e <_dtoa_r+0xa5e>
 8006f72:	9a02      	ldr	r2, [sp, #8]
 8006f74:	f108 0301 	add.w	r3, r8, #1
 8006f78:	7013      	strb	r3, [r2, #0]
 8006f7a:	e604      	b.n	8006b86 <_dtoa_r+0x696>
 8006f7c:	9b07      	ldr	r3, [sp, #28]
 8006f7e:	9a07      	ldr	r2, [sp, #28]
 8006f80:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006f84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d028      	beq.n	8006fdc <_dtoa_r+0xaec>
 8006f8a:	4649      	mov	r1, r9
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	220a      	movs	r2, #10
 8006f90:	4658      	mov	r0, fp
 8006f92:	f000 f9d5 	bl	8007340 <__multadd>
 8006f96:	42af      	cmp	r7, r5
 8006f98:	4681      	mov	r9, r0
 8006f9a:	f04f 0300 	mov.w	r3, #0
 8006f9e:	f04f 020a 	mov.w	r2, #10
 8006fa2:	4639      	mov	r1, r7
 8006fa4:	4658      	mov	r0, fp
 8006fa6:	d107      	bne.n	8006fb8 <_dtoa_r+0xac8>
 8006fa8:	f000 f9ca 	bl	8007340 <__multadd>
 8006fac:	4607      	mov	r7, r0
 8006fae:	4605      	mov	r5, r0
 8006fb0:	9b07      	ldr	r3, [sp, #28]
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	9307      	str	r3, [sp, #28]
 8006fb6:	e774      	b.n	8006ea2 <_dtoa_r+0x9b2>
 8006fb8:	f000 f9c2 	bl	8007340 <__multadd>
 8006fbc:	4629      	mov	r1, r5
 8006fbe:	4607      	mov	r7, r0
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	220a      	movs	r2, #10
 8006fc4:	4658      	mov	r0, fp
 8006fc6:	f000 f9bb 	bl	8007340 <__multadd>
 8006fca:	4605      	mov	r5, r0
 8006fcc:	e7f0      	b.n	8006fb0 <_dtoa_r+0xac0>
 8006fce:	9b08      	ldr	r3, [sp, #32]
 8006fd0:	2700      	movs	r7, #0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	bfcc      	ite	gt
 8006fd6:	461e      	movgt	r6, r3
 8006fd8:	2601      	movle	r6, #1
 8006fda:	4456      	add	r6, sl
 8006fdc:	4649      	mov	r1, r9
 8006fde:	2201      	movs	r2, #1
 8006fe0:	4658      	mov	r0, fp
 8006fe2:	f000 fb57 	bl	8007694 <__lshift>
 8006fe6:	4621      	mov	r1, r4
 8006fe8:	4681      	mov	r9, r0
 8006fea:	f000 fbbf 	bl	800776c <__mcmp>
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	dcb0      	bgt.n	8006f54 <_dtoa_r+0xa64>
 8006ff2:	d102      	bne.n	8006ffa <_dtoa_r+0xb0a>
 8006ff4:	f018 0f01 	tst.w	r8, #1
 8006ff8:	d1ac      	bne.n	8006f54 <_dtoa_r+0xa64>
 8006ffa:	4633      	mov	r3, r6
 8006ffc:	461e      	mov	r6, r3
 8006ffe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007002:	2a30      	cmp	r2, #48	@ 0x30
 8007004:	d0fa      	beq.n	8006ffc <_dtoa_r+0xb0c>
 8007006:	e5be      	b.n	8006b86 <_dtoa_r+0x696>
 8007008:	459a      	cmp	sl, r3
 800700a:	d1a4      	bne.n	8006f56 <_dtoa_r+0xa66>
 800700c:	9b04      	ldr	r3, [sp, #16]
 800700e:	3301      	adds	r3, #1
 8007010:	9304      	str	r3, [sp, #16]
 8007012:	2331      	movs	r3, #49	@ 0x31
 8007014:	f88a 3000 	strb.w	r3, [sl]
 8007018:	e5b5      	b.n	8006b86 <_dtoa_r+0x696>
 800701a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800701c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800707c <_dtoa_r+0xb8c>
 8007020:	b11b      	cbz	r3, 800702a <_dtoa_r+0xb3a>
 8007022:	f10a 0308 	add.w	r3, sl, #8
 8007026:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007028:	6013      	str	r3, [r2, #0]
 800702a:	4650      	mov	r0, sl
 800702c:	b017      	add	sp, #92	@ 0x5c
 800702e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007032:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007034:	2b01      	cmp	r3, #1
 8007036:	f77f ae3d 	ble.w	8006cb4 <_dtoa_r+0x7c4>
 800703a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800703c:	930a      	str	r3, [sp, #40]	@ 0x28
 800703e:	2001      	movs	r0, #1
 8007040:	e65b      	b.n	8006cfa <_dtoa_r+0x80a>
 8007042:	9b08      	ldr	r3, [sp, #32]
 8007044:	2b00      	cmp	r3, #0
 8007046:	f77f aed6 	ble.w	8006df6 <_dtoa_r+0x906>
 800704a:	4656      	mov	r6, sl
 800704c:	4621      	mov	r1, r4
 800704e:	4648      	mov	r0, r9
 8007050:	f7ff f9c5 	bl	80063de <quorem>
 8007054:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007058:	9b08      	ldr	r3, [sp, #32]
 800705a:	f806 8b01 	strb.w	r8, [r6], #1
 800705e:	eba6 020a 	sub.w	r2, r6, sl
 8007062:	4293      	cmp	r3, r2
 8007064:	ddb3      	ble.n	8006fce <_dtoa_r+0xade>
 8007066:	4649      	mov	r1, r9
 8007068:	2300      	movs	r3, #0
 800706a:	220a      	movs	r2, #10
 800706c:	4658      	mov	r0, fp
 800706e:	f000 f967 	bl	8007340 <__multadd>
 8007072:	4681      	mov	r9, r0
 8007074:	e7ea      	b.n	800704c <_dtoa_r+0xb5c>
 8007076:	bf00      	nop
 8007078:	0800867f 	.word	0x0800867f
 800707c:	08008603 	.word	0x08008603

08007080 <_free_r>:
 8007080:	b538      	push	{r3, r4, r5, lr}
 8007082:	4605      	mov	r5, r0
 8007084:	2900      	cmp	r1, #0
 8007086:	d040      	beq.n	800710a <_free_r+0x8a>
 8007088:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800708c:	1f0c      	subs	r4, r1, #4
 800708e:	2b00      	cmp	r3, #0
 8007090:	bfb8      	it	lt
 8007092:	18e4      	addlt	r4, r4, r3
 8007094:	f000 f8e6 	bl	8007264 <__malloc_lock>
 8007098:	4a1c      	ldr	r2, [pc, #112]	@ (800710c <_free_r+0x8c>)
 800709a:	6813      	ldr	r3, [r2, #0]
 800709c:	b933      	cbnz	r3, 80070ac <_free_r+0x2c>
 800709e:	6063      	str	r3, [r4, #4]
 80070a0:	6014      	str	r4, [r2, #0]
 80070a2:	4628      	mov	r0, r5
 80070a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070a8:	f000 b8e2 	b.w	8007270 <__malloc_unlock>
 80070ac:	42a3      	cmp	r3, r4
 80070ae:	d908      	bls.n	80070c2 <_free_r+0x42>
 80070b0:	6820      	ldr	r0, [r4, #0]
 80070b2:	1821      	adds	r1, r4, r0
 80070b4:	428b      	cmp	r3, r1
 80070b6:	bf01      	itttt	eq
 80070b8:	6819      	ldreq	r1, [r3, #0]
 80070ba:	685b      	ldreq	r3, [r3, #4]
 80070bc:	1809      	addeq	r1, r1, r0
 80070be:	6021      	streq	r1, [r4, #0]
 80070c0:	e7ed      	b.n	800709e <_free_r+0x1e>
 80070c2:	461a      	mov	r2, r3
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	b10b      	cbz	r3, 80070cc <_free_r+0x4c>
 80070c8:	42a3      	cmp	r3, r4
 80070ca:	d9fa      	bls.n	80070c2 <_free_r+0x42>
 80070cc:	6811      	ldr	r1, [r2, #0]
 80070ce:	1850      	adds	r0, r2, r1
 80070d0:	42a0      	cmp	r0, r4
 80070d2:	d10b      	bne.n	80070ec <_free_r+0x6c>
 80070d4:	6820      	ldr	r0, [r4, #0]
 80070d6:	4401      	add	r1, r0
 80070d8:	1850      	adds	r0, r2, r1
 80070da:	4283      	cmp	r3, r0
 80070dc:	6011      	str	r1, [r2, #0]
 80070de:	d1e0      	bne.n	80070a2 <_free_r+0x22>
 80070e0:	6818      	ldr	r0, [r3, #0]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	4408      	add	r0, r1
 80070e6:	6010      	str	r0, [r2, #0]
 80070e8:	6053      	str	r3, [r2, #4]
 80070ea:	e7da      	b.n	80070a2 <_free_r+0x22>
 80070ec:	d902      	bls.n	80070f4 <_free_r+0x74>
 80070ee:	230c      	movs	r3, #12
 80070f0:	602b      	str	r3, [r5, #0]
 80070f2:	e7d6      	b.n	80070a2 <_free_r+0x22>
 80070f4:	6820      	ldr	r0, [r4, #0]
 80070f6:	1821      	adds	r1, r4, r0
 80070f8:	428b      	cmp	r3, r1
 80070fa:	bf01      	itttt	eq
 80070fc:	6819      	ldreq	r1, [r3, #0]
 80070fe:	685b      	ldreq	r3, [r3, #4]
 8007100:	1809      	addeq	r1, r1, r0
 8007102:	6021      	streq	r1, [r4, #0]
 8007104:	6063      	str	r3, [r4, #4]
 8007106:	6054      	str	r4, [r2, #4]
 8007108:	e7cb      	b.n	80070a2 <_free_r+0x22>
 800710a:	bd38      	pop	{r3, r4, r5, pc}
 800710c:	20000548 	.word	0x20000548

08007110 <malloc>:
 8007110:	4b02      	ldr	r3, [pc, #8]	@ (800711c <malloc+0xc>)
 8007112:	4601      	mov	r1, r0
 8007114:	6818      	ldr	r0, [r3, #0]
 8007116:	f000 b825 	b.w	8007164 <_malloc_r>
 800711a:	bf00      	nop
 800711c:	20000098 	.word	0x20000098

08007120 <sbrk_aligned>:
 8007120:	b570      	push	{r4, r5, r6, lr}
 8007122:	4e0f      	ldr	r6, [pc, #60]	@ (8007160 <sbrk_aligned+0x40>)
 8007124:	460c      	mov	r4, r1
 8007126:	6831      	ldr	r1, [r6, #0]
 8007128:	4605      	mov	r5, r0
 800712a:	b911      	cbnz	r1, 8007132 <sbrk_aligned+0x12>
 800712c:	f000 fe26 	bl	8007d7c <_sbrk_r>
 8007130:	6030      	str	r0, [r6, #0]
 8007132:	4621      	mov	r1, r4
 8007134:	4628      	mov	r0, r5
 8007136:	f000 fe21 	bl	8007d7c <_sbrk_r>
 800713a:	1c43      	adds	r3, r0, #1
 800713c:	d103      	bne.n	8007146 <sbrk_aligned+0x26>
 800713e:	f04f 34ff 	mov.w	r4, #4294967295
 8007142:	4620      	mov	r0, r4
 8007144:	bd70      	pop	{r4, r5, r6, pc}
 8007146:	1cc4      	adds	r4, r0, #3
 8007148:	f024 0403 	bic.w	r4, r4, #3
 800714c:	42a0      	cmp	r0, r4
 800714e:	d0f8      	beq.n	8007142 <sbrk_aligned+0x22>
 8007150:	1a21      	subs	r1, r4, r0
 8007152:	4628      	mov	r0, r5
 8007154:	f000 fe12 	bl	8007d7c <_sbrk_r>
 8007158:	3001      	adds	r0, #1
 800715a:	d1f2      	bne.n	8007142 <sbrk_aligned+0x22>
 800715c:	e7ef      	b.n	800713e <sbrk_aligned+0x1e>
 800715e:	bf00      	nop
 8007160:	20000544 	.word	0x20000544

08007164 <_malloc_r>:
 8007164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007168:	1ccd      	adds	r5, r1, #3
 800716a:	f025 0503 	bic.w	r5, r5, #3
 800716e:	3508      	adds	r5, #8
 8007170:	2d0c      	cmp	r5, #12
 8007172:	bf38      	it	cc
 8007174:	250c      	movcc	r5, #12
 8007176:	2d00      	cmp	r5, #0
 8007178:	4606      	mov	r6, r0
 800717a:	db01      	blt.n	8007180 <_malloc_r+0x1c>
 800717c:	42a9      	cmp	r1, r5
 800717e:	d904      	bls.n	800718a <_malloc_r+0x26>
 8007180:	230c      	movs	r3, #12
 8007182:	6033      	str	r3, [r6, #0]
 8007184:	2000      	movs	r0, #0
 8007186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800718a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007260 <_malloc_r+0xfc>
 800718e:	f000 f869 	bl	8007264 <__malloc_lock>
 8007192:	f8d8 3000 	ldr.w	r3, [r8]
 8007196:	461c      	mov	r4, r3
 8007198:	bb44      	cbnz	r4, 80071ec <_malloc_r+0x88>
 800719a:	4629      	mov	r1, r5
 800719c:	4630      	mov	r0, r6
 800719e:	f7ff ffbf 	bl	8007120 <sbrk_aligned>
 80071a2:	1c43      	adds	r3, r0, #1
 80071a4:	4604      	mov	r4, r0
 80071a6:	d158      	bne.n	800725a <_malloc_r+0xf6>
 80071a8:	f8d8 4000 	ldr.w	r4, [r8]
 80071ac:	4627      	mov	r7, r4
 80071ae:	2f00      	cmp	r7, #0
 80071b0:	d143      	bne.n	800723a <_malloc_r+0xd6>
 80071b2:	2c00      	cmp	r4, #0
 80071b4:	d04b      	beq.n	800724e <_malloc_r+0xea>
 80071b6:	6823      	ldr	r3, [r4, #0]
 80071b8:	4639      	mov	r1, r7
 80071ba:	4630      	mov	r0, r6
 80071bc:	eb04 0903 	add.w	r9, r4, r3
 80071c0:	f000 fddc 	bl	8007d7c <_sbrk_r>
 80071c4:	4581      	cmp	r9, r0
 80071c6:	d142      	bne.n	800724e <_malloc_r+0xea>
 80071c8:	6821      	ldr	r1, [r4, #0]
 80071ca:	4630      	mov	r0, r6
 80071cc:	1a6d      	subs	r5, r5, r1
 80071ce:	4629      	mov	r1, r5
 80071d0:	f7ff ffa6 	bl	8007120 <sbrk_aligned>
 80071d4:	3001      	adds	r0, #1
 80071d6:	d03a      	beq.n	800724e <_malloc_r+0xea>
 80071d8:	6823      	ldr	r3, [r4, #0]
 80071da:	442b      	add	r3, r5
 80071dc:	6023      	str	r3, [r4, #0]
 80071de:	f8d8 3000 	ldr.w	r3, [r8]
 80071e2:	685a      	ldr	r2, [r3, #4]
 80071e4:	bb62      	cbnz	r2, 8007240 <_malloc_r+0xdc>
 80071e6:	f8c8 7000 	str.w	r7, [r8]
 80071ea:	e00f      	b.n	800720c <_malloc_r+0xa8>
 80071ec:	6822      	ldr	r2, [r4, #0]
 80071ee:	1b52      	subs	r2, r2, r5
 80071f0:	d420      	bmi.n	8007234 <_malloc_r+0xd0>
 80071f2:	2a0b      	cmp	r2, #11
 80071f4:	d917      	bls.n	8007226 <_malloc_r+0xc2>
 80071f6:	1961      	adds	r1, r4, r5
 80071f8:	42a3      	cmp	r3, r4
 80071fa:	6025      	str	r5, [r4, #0]
 80071fc:	bf18      	it	ne
 80071fe:	6059      	strne	r1, [r3, #4]
 8007200:	6863      	ldr	r3, [r4, #4]
 8007202:	bf08      	it	eq
 8007204:	f8c8 1000 	streq.w	r1, [r8]
 8007208:	5162      	str	r2, [r4, r5]
 800720a:	604b      	str	r3, [r1, #4]
 800720c:	4630      	mov	r0, r6
 800720e:	f000 f82f 	bl	8007270 <__malloc_unlock>
 8007212:	f104 000b 	add.w	r0, r4, #11
 8007216:	1d23      	adds	r3, r4, #4
 8007218:	f020 0007 	bic.w	r0, r0, #7
 800721c:	1ac2      	subs	r2, r0, r3
 800721e:	bf1c      	itt	ne
 8007220:	1a1b      	subne	r3, r3, r0
 8007222:	50a3      	strne	r3, [r4, r2]
 8007224:	e7af      	b.n	8007186 <_malloc_r+0x22>
 8007226:	6862      	ldr	r2, [r4, #4]
 8007228:	42a3      	cmp	r3, r4
 800722a:	bf0c      	ite	eq
 800722c:	f8c8 2000 	streq.w	r2, [r8]
 8007230:	605a      	strne	r2, [r3, #4]
 8007232:	e7eb      	b.n	800720c <_malloc_r+0xa8>
 8007234:	4623      	mov	r3, r4
 8007236:	6864      	ldr	r4, [r4, #4]
 8007238:	e7ae      	b.n	8007198 <_malloc_r+0x34>
 800723a:	463c      	mov	r4, r7
 800723c:	687f      	ldr	r7, [r7, #4]
 800723e:	e7b6      	b.n	80071ae <_malloc_r+0x4a>
 8007240:	461a      	mov	r2, r3
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	42a3      	cmp	r3, r4
 8007246:	d1fb      	bne.n	8007240 <_malloc_r+0xdc>
 8007248:	2300      	movs	r3, #0
 800724a:	6053      	str	r3, [r2, #4]
 800724c:	e7de      	b.n	800720c <_malloc_r+0xa8>
 800724e:	230c      	movs	r3, #12
 8007250:	4630      	mov	r0, r6
 8007252:	6033      	str	r3, [r6, #0]
 8007254:	f000 f80c 	bl	8007270 <__malloc_unlock>
 8007258:	e794      	b.n	8007184 <_malloc_r+0x20>
 800725a:	6005      	str	r5, [r0, #0]
 800725c:	e7d6      	b.n	800720c <_malloc_r+0xa8>
 800725e:	bf00      	nop
 8007260:	20000548 	.word	0x20000548

08007264 <__malloc_lock>:
 8007264:	4801      	ldr	r0, [pc, #4]	@ (800726c <__malloc_lock+0x8>)
 8007266:	f7ff b89c 	b.w	80063a2 <__retarget_lock_acquire_recursive>
 800726a:	bf00      	nop
 800726c:	20000540 	.word	0x20000540

08007270 <__malloc_unlock>:
 8007270:	4801      	ldr	r0, [pc, #4]	@ (8007278 <__malloc_unlock+0x8>)
 8007272:	f7ff b897 	b.w	80063a4 <__retarget_lock_release_recursive>
 8007276:	bf00      	nop
 8007278:	20000540 	.word	0x20000540

0800727c <_Balloc>:
 800727c:	b570      	push	{r4, r5, r6, lr}
 800727e:	69c6      	ldr	r6, [r0, #28]
 8007280:	4604      	mov	r4, r0
 8007282:	460d      	mov	r5, r1
 8007284:	b976      	cbnz	r6, 80072a4 <_Balloc+0x28>
 8007286:	2010      	movs	r0, #16
 8007288:	f7ff ff42 	bl	8007110 <malloc>
 800728c:	4602      	mov	r2, r0
 800728e:	61e0      	str	r0, [r4, #28]
 8007290:	b920      	cbnz	r0, 800729c <_Balloc+0x20>
 8007292:	216b      	movs	r1, #107	@ 0x6b
 8007294:	4b17      	ldr	r3, [pc, #92]	@ (80072f4 <_Balloc+0x78>)
 8007296:	4818      	ldr	r0, [pc, #96]	@ (80072f8 <_Balloc+0x7c>)
 8007298:	f000 fd80 	bl	8007d9c <__assert_func>
 800729c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072a0:	6006      	str	r6, [r0, #0]
 80072a2:	60c6      	str	r6, [r0, #12]
 80072a4:	69e6      	ldr	r6, [r4, #28]
 80072a6:	68f3      	ldr	r3, [r6, #12]
 80072a8:	b183      	cbz	r3, 80072cc <_Balloc+0x50>
 80072aa:	69e3      	ldr	r3, [r4, #28]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80072b2:	b9b8      	cbnz	r0, 80072e4 <_Balloc+0x68>
 80072b4:	2101      	movs	r1, #1
 80072b6:	fa01 f605 	lsl.w	r6, r1, r5
 80072ba:	1d72      	adds	r2, r6, #5
 80072bc:	4620      	mov	r0, r4
 80072be:	0092      	lsls	r2, r2, #2
 80072c0:	f000 fd8a 	bl	8007dd8 <_calloc_r>
 80072c4:	b160      	cbz	r0, 80072e0 <_Balloc+0x64>
 80072c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80072ca:	e00e      	b.n	80072ea <_Balloc+0x6e>
 80072cc:	2221      	movs	r2, #33	@ 0x21
 80072ce:	2104      	movs	r1, #4
 80072d0:	4620      	mov	r0, r4
 80072d2:	f000 fd81 	bl	8007dd8 <_calloc_r>
 80072d6:	69e3      	ldr	r3, [r4, #28]
 80072d8:	60f0      	str	r0, [r6, #12]
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d1e4      	bne.n	80072aa <_Balloc+0x2e>
 80072e0:	2000      	movs	r0, #0
 80072e2:	bd70      	pop	{r4, r5, r6, pc}
 80072e4:	6802      	ldr	r2, [r0, #0]
 80072e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80072ea:	2300      	movs	r3, #0
 80072ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80072f0:	e7f7      	b.n	80072e2 <_Balloc+0x66>
 80072f2:	bf00      	nop
 80072f4:	08008610 	.word	0x08008610
 80072f8:	08008690 	.word	0x08008690

080072fc <_Bfree>:
 80072fc:	b570      	push	{r4, r5, r6, lr}
 80072fe:	69c6      	ldr	r6, [r0, #28]
 8007300:	4605      	mov	r5, r0
 8007302:	460c      	mov	r4, r1
 8007304:	b976      	cbnz	r6, 8007324 <_Bfree+0x28>
 8007306:	2010      	movs	r0, #16
 8007308:	f7ff ff02 	bl	8007110 <malloc>
 800730c:	4602      	mov	r2, r0
 800730e:	61e8      	str	r0, [r5, #28]
 8007310:	b920      	cbnz	r0, 800731c <_Bfree+0x20>
 8007312:	218f      	movs	r1, #143	@ 0x8f
 8007314:	4b08      	ldr	r3, [pc, #32]	@ (8007338 <_Bfree+0x3c>)
 8007316:	4809      	ldr	r0, [pc, #36]	@ (800733c <_Bfree+0x40>)
 8007318:	f000 fd40 	bl	8007d9c <__assert_func>
 800731c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007320:	6006      	str	r6, [r0, #0]
 8007322:	60c6      	str	r6, [r0, #12]
 8007324:	b13c      	cbz	r4, 8007336 <_Bfree+0x3a>
 8007326:	69eb      	ldr	r3, [r5, #28]
 8007328:	6862      	ldr	r2, [r4, #4]
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007330:	6021      	str	r1, [r4, #0]
 8007332:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007336:	bd70      	pop	{r4, r5, r6, pc}
 8007338:	08008610 	.word	0x08008610
 800733c:	08008690 	.word	0x08008690

08007340 <__multadd>:
 8007340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007344:	4607      	mov	r7, r0
 8007346:	460c      	mov	r4, r1
 8007348:	461e      	mov	r6, r3
 800734a:	2000      	movs	r0, #0
 800734c:	690d      	ldr	r5, [r1, #16]
 800734e:	f101 0c14 	add.w	ip, r1, #20
 8007352:	f8dc 3000 	ldr.w	r3, [ip]
 8007356:	3001      	adds	r0, #1
 8007358:	b299      	uxth	r1, r3
 800735a:	fb02 6101 	mla	r1, r2, r1, r6
 800735e:	0c1e      	lsrs	r6, r3, #16
 8007360:	0c0b      	lsrs	r3, r1, #16
 8007362:	fb02 3306 	mla	r3, r2, r6, r3
 8007366:	b289      	uxth	r1, r1
 8007368:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800736c:	4285      	cmp	r5, r0
 800736e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007372:	f84c 1b04 	str.w	r1, [ip], #4
 8007376:	dcec      	bgt.n	8007352 <__multadd+0x12>
 8007378:	b30e      	cbz	r6, 80073be <__multadd+0x7e>
 800737a:	68a3      	ldr	r3, [r4, #8]
 800737c:	42ab      	cmp	r3, r5
 800737e:	dc19      	bgt.n	80073b4 <__multadd+0x74>
 8007380:	6861      	ldr	r1, [r4, #4]
 8007382:	4638      	mov	r0, r7
 8007384:	3101      	adds	r1, #1
 8007386:	f7ff ff79 	bl	800727c <_Balloc>
 800738a:	4680      	mov	r8, r0
 800738c:	b928      	cbnz	r0, 800739a <__multadd+0x5a>
 800738e:	4602      	mov	r2, r0
 8007390:	21ba      	movs	r1, #186	@ 0xba
 8007392:	4b0c      	ldr	r3, [pc, #48]	@ (80073c4 <__multadd+0x84>)
 8007394:	480c      	ldr	r0, [pc, #48]	@ (80073c8 <__multadd+0x88>)
 8007396:	f000 fd01 	bl	8007d9c <__assert_func>
 800739a:	6922      	ldr	r2, [r4, #16]
 800739c:	f104 010c 	add.w	r1, r4, #12
 80073a0:	3202      	adds	r2, #2
 80073a2:	0092      	lsls	r2, r2, #2
 80073a4:	300c      	adds	r0, #12
 80073a6:	f7ff f80c 	bl	80063c2 <memcpy>
 80073aa:	4621      	mov	r1, r4
 80073ac:	4638      	mov	r0, r7
 80073ae:	f7ff ffa5 	bl	80072fc <_Bfree>
 80073b2:	4644      	mov	r4, r8
 80073b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80073b8:	3501      	adds	r5, #1
 80073ba:	615e      	str	r6, [r3, #20]
 80073bc:	6125      	str	r5, [r4, #16]
 80073be:	4620      	mov	r0, r4
 80073c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073c4:	0800867f 	.word	0x0800867f
 80073c8:	08008690 	.word	0x08008690

080073cc <__hi0bits>:
 80073cc:	4603      	mov	r3, r0
 80073ce:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80073d2:	bf3a      	itte	cc
 80073d4:	0403      	lslcc	r3, r0, #16
 80073d6:	2010      	movcc	r0, #16
 80073d8:	2000      	movcs	r0, #0
 80073da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80073de:	bf3c      	itt	cc
 80073e0:	021b      	lslcc	r3, r3, #8
 80073e2:	3008      	addcc	r0, #8
 80073e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073e8:	bf3c      	itt	cc
 80073ea:	011b      	lslcc	r3, r3, #4
 80073ec:	3004      	addcc	r0, #4
 80073ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073f2:	bf3c      	itt	cc
 80073f4:	009b      	lslcc	r3, r3, #2
 80073f6:	3002      	addcc	r0, #2
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	db05      	blt.n	8007408 <__hi0bits+0x3c>
 80073fc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007400:	f100 0001 	add.w	r0, r0, #1
 8007404:	bf08      	it	eq
 8007406:	2020      	moveq	r0, #32
 8007408:	4770      	bx	lr

0800740a <__lo0bits>:
 800740a:	6803      	ldr	r3, [r0, #0]
 800740c:	4602      	mov	r2, r0
 800740e:	f013 0007 	ands.w	r0, r3, #7
 8007412:	d00b      	beq.n	800742c <__lo0bits+0x22>
 8007414:	07d9      	lsls	r1, r3, #31
 8007416:	d421      	bmi.n	800745c <__lo0bits+0x52>
 8007418:	0798      	lsls	r0, r3, #30
 800741a:	bf49      	itett	mi
 800741c:	085b      	lsrmi	r3, r3, #1
 800741e:	089b      	lsrpl	r3, r3, #2
 8007420:	2001      	movmi	r0, #1
 8007422:	6013      	strmi	r3, [r2, #0]
 8007424:	bf5c      	itt	pl
 8007426:	2002      	movpl	r0, #2
 8007428:	6013      	strpl	r3, [r2, #0]
 800742a:	4770      	bx	lr
 800742c:	b299      	uxth	r1, r3
 800742e:	b909      	cbnz	r1, 8007434 <__lo0bits+0x2a>
 8007430:	2010      	movs	r0, #16
 8007432:	0c1b      	lsrs	r3, r3, #16
 8007434:	b2d9      	uxtb	r1, r3
 8007436:	b909      	cbnz	r1, 800743c <__lo0bits+0x32>
 8007438:	3008      	adds	r0, #8
 800743a:	0a1b      	lsrs	r3, r3, #8
 800743c:	0719      	lsls	r1, r3, #28
 800743e:	bf04      	itt	eq
 8007440:	091b      	lsreq	r3, r3, #4
 8007442:	3004      	addeq	r0, #4
 8007444:	0799      	lsls	r1, r3, #30
 8007446:	bf04      	itt	eq
 8007448:	089b      	lsreq	r3, r3, #2
 800744a:	3002      	addeq	r0, #2
 800744c:	07d9      	lsls	r1, r3, #31
 800744e:	d403      	bmi.n	8007458 <__lo0bits+0x4e>
 8007450:	085b      	lsrs	r3, r3, #1
 8007452:	f100 0001 	add.w	r0, r0, #1
 8007456:	d003      	beq.n	8007460 <__lo0bits+0x56>
 8007458:	6013      	str	r3, [r2, #0]
 800745a:	4770      	bx	lr
 800745c:	2000      	movs	r0, #0
 800745e:	4770      	bx	lr
 8007460:	2020      	movs	r0, #32
 8007462:	4770      	bx	lr

08007464 <__i2b>:
 8007464:	b510      	push	{r4, lr}
 8007466:	460c      	mov	r4, r1
 8007468:	2101      	movs	r1, #1
 800746a:	f7ff ff07 	bl	800727c <_Balloc>
 800746e:	4602      	mov	r2, r0
 8007470:	b928      	cbnz	r0, 800747e <__i2b+0x1a>
 8007472:	f240 1145 	movw	r1, #325	@ 0x145
 8007476:	4b04      	ldr	r3, [pc, #16]	@ (8007488 <__i2b+0x24>)
 8007478:	4804      	ldr	r0, [pc, #16]	@ (800748c <__i2b+0x28>)
 800747a:	f000 fc8f 	bl	8007d9c <__assert_func>
 800747e:	2301      	movs	r3, #1
 8007480:	6144      	str	r4, [r0, #20]
 8007482:	6103      	str	r3, [r0, #16]
 8007484:	bd10      	pop	{r4, pc}
 8007486:	bf00      	nop
 8007488:	0800867f 	.word	0x0800867f
 800748c:	08008690 	.word	0x08008690

08007490 <__multiply>:
 8007490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007494:	4614      	mov	r4, r2
 8007496:	690a      	ldr	r2, [r1, #16]
 8007498:	6923      	ldr	r3, [r4, #16]
 800749a:	460f      	mov	r7, r1
 800749c:	429a      	cmp	r2, r3
 800749e:	bfa2      	ittt	ge
 80074a0:	4623      	movge	r3, r4
 80074a2:	460c      	movge	r4, r1
 80074a4:	461f      	movge	r7, r3
 80074a6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80074aa:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80074ae:	68a3      	ldr	r3, [r4, #8]
 80074b0:	6861      	ldr	r1, [r4, #4]
 80074b2:	eb0a 0609 	add.w	r6, sl, r9
 80074b6:	42b3      	cmp	r3, r6
 80074b8:	b085      	sub	sp, #20
 80074ba:	bfb8      	it	lt
 80074bc:	3101      	addlt	r1, #1
 80074be:	f7ff fedd 	bl	800727c <_Balloc>
 80074c2:	b930      	cbnz	r0, 80074d2 <__multiply+0x42>
 80074c4:	4602      	mov	r2, r0
 80074c6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80074ca:	4b43      	ldr	r3, [pc, #268]	@ (80075d8 <__multiply+0x148>)
 80074cc:	4843      	ldr	r0, [pc, #268]	@ (80075dc <__multiply+0x14c>)
 80074ce:	f000 fc65 	bl	8007d9c <__assert_func>
 80074d2:	f100 0514 	add.w	r5, r0, #20
 80074d6:	462b      	mov	r3, r5
 80074d8:	2200      	movs	r2, #0
 80074da:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80074de:	4543      	cmp	r3, r8
 80074e0:	d321      	bcc.n	8007526 <__multiply+0x96>
 80074e2:	f107 0114 	add.w	r1, r7, #20
 80074e6:	f104 0214 	add.w	r2, r4, #20
 80074ea:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80074ee:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80074f2:	9302      	str	r3, [sp, #8]
 80074f4:	1b13      	subs	r3, r2, r4
 80074f6:	3b15      	subs	r3, #21
 80074f8:	f023 0303 	bic.w	r3, r3, #3
 80074fc:	3304      	adds	r3, #4
 80074fe:	f104 0715 	add.w	r7, r4, #21
 8007502:	42ba      	cmp	r2, r7
 8007504:	bf38      	it	cc
 8007506:	2304      	movcc	r3, #4
 8007508:	9301      	str	r3, [sp, #4]
 800750a:	9b02      	ldr	r3, [sp, #8]
 800750c:	9103      	str	r1, [sp, #12]
 800750e:	428b      	cmp	r3, r1
 8007510:	d80c      	bhi.n	800752c <__multiply+0x9c>
 8007512:	2e00      	cmp	r6, #0
 8007514:	dd03      	ble.n	800751e <__multiply+0x8e>
 8007516:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800751a:	2b00      	cmp	r3, #0
 800751c:	d05a      	beq.n	80075d4 <__multiply+0x144>
 800751e:	6106      	str	r6, [r0, #16]
 8007520:	b005      	add	sp, #20
 8007522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007526:	f843 2b04 	str.w	r2, [r3], #4
 800752a:	e7d8      	b.n	80074de <__multiply+0x4e>
 800752c:	f8b1 a000 	ldrh.w	sl, [r1]
 8007530:	f1ba 0f00 	cmp.w	sl, #0
 8007534:	d023      	beq.n	800757e <__multiply+0xee>
 8007536:	46a9      	mov	r9, r5
 8007538:	f04f 0c00 	mov.w	ip, #0
 800753c:	f104 0e14 	add.w	lr, r4, #20
 8007540:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007544:	f8d9 3000 	ldr.w	r3, [r9]
 8007548:	fa1f fb87 	uxth.w	fp, r7
 800754c:	b29b      	uxth	r3, r3
 800754e:	fb0a 330b 	mla	r3, sl, fp, r3
 8007552:	4463      	add	r3, ip
 8007554:	f8d9 c000 	ldr.w	ip, [r9]
 8007558:	0c3f      	lsrs	r7, r7, #16
 800755a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800755e:	fb0a c707 	mla	r7, sl, r7, ip
 8007562:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007566:	b29b      	uxth	r3, r3
 8007568:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800756c:	4572      	cmp	r2, lr
 800756e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007572:	f849 3b04 	str.w	r3, [r9], #4
 8007576:	d8e3      	bhi.n	8007540 <__multiply+0xb0>
 8007578:	9b01      	ldr	r3, [sp, #4]
 800757a:	f845 c003 	str.w	ip, [r5, r3]
 800757e:	9b03      	ldr	r3, [sp, #12]
 8007580:	3104      	adds	r1, #4
 8007582:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007586:	f1b9 0f00 	cmp.w	r9, #0
 800758a:	d021      	beq.n	80075d0 <__multiply+0x140>
 800758c:	46ae      	mov	lr, r5
 800758e:	f04f 0a00 	mov.w	sl, #0
 8007592:	682b      	ldr	r3, [r5, #0]
 8007594:	f104 0c14 	add.w	ip, r4, #20
 8007598:	f8bc b000 	ldrh.w	fp, [ip]
 800759c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	fb09 770b 	mla	r7, r9, fp, r7
 80075a6:	4457      	add	r7, sl
 80075a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80075ac:	f84e 3b04 	str.w	r3, [lr], #4
 80075b0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80075b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80075b8:	f8be 3000 	ldrh.w	r3, [lr]
 80075bc:	4562      	cmp	r2, ip
 80075be:	fb09 330a 	mla	r3, r9, sl, r3
 80075c2:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80075c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80075ca:	d8e5      	bhi.n	8007598 <__multiply+0x108>
 80075cc:	9f01      	ldr	r7, [sp, #4]
 80075ce:	51eb      	str	r3, [r5, r7]
 80075d0:	3504      	adds	r5, #4
 80075d2:	e79a      	b.n	800750a <__multiply+0x7a>
 80075d4:	3e01      	subs	r6, #1
 80075d6:	e79c      	b.n	8007512 <__multiply+0x82>
 80075d8:	0800867f 	.word	0x0800867f
 80075dc:	08008690 	.word	0x08008690

080075e0 <__pow5mult>:
 80075e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075e4:	4615      	mov	r5, r2
 80075e6:	f012 0203 	ands.w	r2, r2, #3
 80075ea:	4607      	mov	r7, r0
 80075ec:	460e      	mov	r6, r1
 80075ee:	d007      	beq.n	8007600 <__pow5mult+0x20>
 80075f0:	4c25      	ldr	r4, [pc, #148]	@ (8007688 <__pow5mult+0xa8>)
 80075f2:	3a01      	subs	r2, #1
 80075f4:	2300      	movs	r3, #0
 80075f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80075fa:	f7ff fea1 	bl	8007340 <__multadd>
 80075fe:	4606      	mov	r6, r0
 8007600:	10ad      	asrs	r5, r5, #2
 8007602:	d03d      	beq.n	8007680 <__pow5mult+0xa0>
 8007604:	69fc      	ldr	r4, [r7, #28]
 8007606:	b97c      	cbnz	r4, 8007628 <__pow5mult+0x48>
 8007608:	2010      	movs	r0, #16
 800760a:	f7ff fd81 	bl	8007110 <malloc>
 800760e:	4602      	mov	r2, r0
 8007610:	61f8      	str	r0, [r7, #28]
 8007612:	b928      	cbnz	r0, 8007620 <__pow5mult+0x40>
 8007614:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007618:	4b1c      	ldr	r3, [pc, #112]	@ (800768c <__pow5mult+0xac>)
 800761a:	481d      	ldr	r0, [pc, #116]	@ (8007690 <__pow5mult+0xb0>)
 800761c:	f000 fbbe 	bl	8007d9c <__assert_func>
 8007620:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007624:	6004      	str	r4, [r0, #0]
 8007626:	60c4      	str	r4, [r0, #12]
 8007628:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800762c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007630:	b94c      	cbnz	r4, 8007646 <__pow5mult+0x66>
 8007632:	f240 2171 	movw	r1, #625	@ 0x271
 8007636:	4638      	mov	r0, r7
 8007638:	f7ff ff14 	bl	8007464 <__i2b>
 800763c:	2300      	movs	r3, #0
 800763e:	4604      	mov	r4, r0
 8007640:	f8c8 0008 	str.w	r0, [r8, #8]
 8007644:	6003      	str	r3, [r0, #0]
 8007646:	f04f 0900 	mov.w	r9, #0
 800764a:	07eb      	lsls	r3, r5, #31
 800764c:	d50a      	bpl.n	8007664 <__pow5mult+0x84>
 800764e:	4631      	mov	r1, r6
 8007650:	4622      	mov	r2, r4
 8007652:	4638      	mov	r0, r7
 8007654:	f7ff ff1c 	bl	8007490 <__multiply>
 8007658:	4680      	mov	r8, r0
 800765a:	4631      	mov	r1, r6
 800765c:	4638      	mov	r0, r7
 800765e:	f7ff fe4d 	bl	80072fc <_Bfree>
 8007662:	4646      	mov	r6, r8
 8007664:	106d      	asrs	r5, r5, #1
 8007666:	d00b      	beq.n	8007680 <__pow5mult+0xa0>
 8007668:	6820      	ldr	r0, [r4, #0]
 800766a:	b938      	cbnz	r0, 800767c <__pow5mult+0x9c>
 800766c:	4622      	mov	r2, r4
 800766e:	4621      	mov	r1, r4
 8007670:	4638      	mov	r0, r7
 8007672:	f7ff ff0d 	bl	8007490 <__multiply>
 8007676:	6020      	str	r0, [r4, #0]
 8007678:	f8c0 9000 	str.w	r9, [r0]
 800767c:	4604      	mov	r4, r0
 800767e:	e7e4      	b.n	800764a <__pow5mult+0x6a>
 8007680:	4630      	mov	r0, r6
 8007682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007686:	bf00      	nop
 8007688:	080086ec 	.word	0x080086ec
 800768c:	08008610 	.word	0x08008610
 8007690:	08008690 	.word	0x08008690

08007694 <__lshift>:
 8007694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007698:	460c      	mov	r4, r1
 800769a:	4607      	mov	r7, r0
 800769c:	4691      	mov	r9, r2
 800769e:	6923      	ldr	r3, [r4, #16]
 80076a0:	6849      	ldr	r1, [r1, #4]
 80076a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80076a6:	68a3      	ldr	r3, [r4, #8]
 80076a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80076ac:	f108 0601 	add.w	r6, r8, #1
 80076b0:	42b3      	cmp	r3, r6
 80076b2:	db0b      	blt.n	80076cc <__lshift+0x38>
 80076b4:	4638      	mov	r0, r7
 80076b6:	f7ff fde1 	bl	800727c <_Balloc>
 80076ba:	4605      	mov	r5, r0
 80076bc:	b948      	cbnz	r0, 80076d2 <__lshift+0x3e>
 80076be:	4602      	mov	r2, r0
 80076c0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80076c4:	4b27      	ldr	r3, [pc, #156]	@ (8007764 <__lshift+0xd0>)
 80076c6:	4828      	ldr	r0, [pc, #160]	@ (8007768 <__lshift+0xd4>)
 80076c8:	f000 fb68 	bl	8007d9c <__assert_func>
 80076cc:	3101      	adds	r1, #1
 80076ce:	005b      	lsls	r3, r3, #1
 80076d0:	e7ee      	b.n	80076b0 <__lshift+0x1c>
 80076d2:	2300      	movs	r3, #0
 80076d4:	f100 0114 	add.w	r1, r0, #20
 80076d8:	f100 0210 	add.w	r2, r0, #16
 80076dc:	4618      	mov	r0, r3
 80076de:	4553      	cmp	r3, sl
 80076e0:	db33      	blt.n	800774a <__lshift+0xb6>
 80076e2:	6920      	ldr	r0, [r4, #16]
 80076e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80076e8:	f104 0314 	add.w	r3, r4, #20
 80076ec:	f019 091f 	ands.w	r9, r9, #31
 80076f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80076f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80076f8:	d02b      	beq.n	8007752 <__lshift+0xbe>
 80076fa:	468a      	mov	sl, r1
 80076fc:	2200      	movs	r2, #0
 80076fe:	f1c9 0e20 	rsb	lr, r9, #32
 8007702:	6818      	ldr	r0, [r3, #0]
 8007704:	fa00 f009 	lsl.w	r0, r0, r9
 8007708:	4310      	orrs	r0, r2
 800770a:	f84a 0b04 	str.w	r0, [sl], #4
 800770e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007712:	459c      	cmp	ip, r3
 8007714:	fa22 f20e 	lsr.w	r2, r2, lr
 8007718:	d8f3      	bhi.n	8007702 <__lshift+0x6e>
 800771a:	ebac 0304 	sub.w	r3, ip, r4
 800771e:	3b15      	subs	r3, #21
 8007720:	f023 0303 	bic.w	r3, r3, #3
 8007724:	3304      	adds	r3, #4
 8007726:	f104 0015 	add.w	r0, r4, #21
 800772a:	4584      	cmp	ip, r0
 800772c:	bf38      	it	cc
 800772e:	2304      	movcc	r3, #4
 8007730:	50ca      	str	r2, [r1, r3]
 8007732:	b10a      	cbz	r2, 8007738 <__lshift+0xa4>
 8007734:	f108 0602 	add.w	r6, r8, #2
 8007738:	3e01      	subs	r6, #1
 800773a:	4638      	mov	r0, r7
 800773c:	4621      	mov	r1, r4
 800773e:	612e      	str	r6, [r5, #16]
 8007740:	f7ff fddc 	bl	80072fc <_Bfree>
 8007744:	4628      	mov	r0, r5
 8007746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800774a:	f842 0f04 	str.w	r0, [r2, #4]!
 800774e:	3301      	adds	r3, #1
 8007750:	e7c5      	b.n	80076de <__lshift+0x4a>
 8007752:	3904      	subs	r1, #4
 8007754:	f853 2b04 	ldr.w	r2, [r3], #4
 8007758:	459c      	cmp	ip, r3
 800775a:	f841 2f04 	str.w	r2, [r1, #4]!
 800775e:	d8f9      	bhi.n	8007754 <__lshift+0xc0>
 8007760:	e7ea      	b.n	8007738 <__lshift+0xa4>
 8007762:	bf00      	nop
 8007764:	0800867f 	.word	0x0800867f
 8007768:	08008690 	.word	0x08008690

0800776c <__mcmp>:
 800776c:	4603      	mov	r3, r0
 800776e:	690a      	ldr	r2, [r1, #16]
 8007770:	6900      	ldr	r0, [r0, #16]
 8007772:	b530      	push	{r4, r5, lr}
 8007774:	1a80      	subs	r0, r0, r2
 8007776:	d10e      	bne.n	8007796 <__mcmp+0x2a>
 8007778:	3314      	adds	r3, #20
 800777a:	3114      	adds	r1, #20
 800777c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007780:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007784:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007788:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800778c:	4295      	cmp	r5, r2
 800778e:	d003      	beq.n	8007798 <__mcmp+0x2c>
 8007790:	d205      	bcs.n	800779e <__mcmp+0x32>
 8007792:	f04f 30ff 	mov.w	r0, #4294967295
 8007796:	bd30      	pop	{r4, r5, pc}
 8007798:	42a3      	cmp	r3, r4
 800779a:	d3f3      	bcc.n	8007784 <__mcmp+0x18>
 800779c:	e7fb      	b.n	8007796 <__mcmp+0x2a>
 800779e:	2001      	movs	r0, #1
 80077a0:	e7f9      	b.n	8007796 <__mcmp+0x2a>
	...

080077a4 <__mdiff>:
 80077a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077a8:	4689      	mov	r9, r1
 80077aa:	4606      	mov	r6, r0
 80077ac:	4611      	mov	r1, r2
 80077ae:	4648      	mov	r0, r9
 80077b0:	4614      	mov	r4, r2
 80077b2:	f7ff ffdb 	bl	800776c <__mcmp>
 80077b6:	1e05      	subs	r5, r0, #0
 80077b8:	d112      	bne.n	80077e0 <__mdiff+0x3c>
 80077ba:	4629      	mov	r1, r5
 80077bc:	4630      	mov	r0, r6
 80077be:	f7ff fd5d 	bl	800727c <_Balloc>
 80077c2:	4602      	mov	r2, r0
 80077c4:	b928      	cbnz	r0, 80077d2 <__mdiff+0x2e>
 80077c6:	f240 2137 	movw	r1, #567	@ 0x237
 80077ca:	4b3e      	ldr	r3, [pc, #248]	@ (80078c4 <__mdiff+0x120>)
 80077cc:	483e      	ldr	r0, [pc, #248]	@ (80078c8 <__mdiff+0x124>)
 80077ce:	f000 fae5 	bl	8007d9c <__assert_func>
 80077d2:	2301      	movs	r3, #1
 80077d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80077d8:	4610      	mov	r0, r2
 80077da:	b003      	add	sp, #12
 80077dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077e0:	bfbc      	itt	lt
 80077e2:	464b      	movlt	r3, r9
 80077e4:	46a1      	movlt	r9, r4
 80077e6:	4630      	mov	r0, r6
 80077e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80077ec:	bfba      	itte	lt
 80077ee:	461c      	movlt	r4, r3
 80077f0:	2501      	movlt	r5, #1
 80077f2:	2500      	movge	r5, #0
 80077f4:	f7ff fd42 	bl	800727c <_Balloc>
 80077f8:	4602      	mov	r2, r0
 80077fa:	b918      	cbnz	r0, 8007804 <__mdiff+0x60>
 80077fc:	f240 2145 	movw	r1, #581	@ 0x245
 8007800:	4b30      	ldr	r3, [pc, #192]	@ (80078c4 <__mdiff+0x120>)
 8007802:	e7e3      	b.n	80077cc <__mdiff+0x28>
 8007804:	f100 0b14 	add.w	fp, r0, #20
 8007808:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800780c:	f109 0310 	add.w	r3, r9, #16
 8007810:	60c5      	str	r5, [r0, #12]
 8007812:	f04f 0c00 	mov.w	ip, #0
 8007816:	f109 0514 	add.w	r5, r9, #20
 800781a:	46d9      	mov	r9, fp
 800781c:	6926      	ldr	r6, [r4, #16]
 800781e:	f104 0e14 	add.w	lr, r4, #20
 8007822:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007826:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800782a:	9301      	str	r3, [sp, #4]
 800782c:	9b01      	ldr	r3, [sp, #4]
 800782e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007832:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007836:	b281      	uxth	r1, r0
 8007838:	9301      	str	r3, [sp, #4]
 800783a:	fa1f f38a 	uxth.w	r3, sl
 800783e:	1a5b      	subs	r3, r3, r1
 8007840:	0c00      	lsrs	r0, r0, #16
 8007842:	4463      	add	r3, ip
 8007844:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007848:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800784c:	b29b      	uxth	r3, r3
 800784e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007852:	4576      	cmp	r6, lr
 8007854:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007858:	f849 3b04 	str.w	r3, [r9], #4
 800785c:	d8e6      	bhi.n	800782c <__mdiff+0x88>
 800785e:	1b33      	subs	r3, r6, r4
 8007860:	3b15      	subs	r3, #21
 8007862:	f023 0303 	bic.w	r3, r3, #3
 8007866:	3415      	adds	r4, #21
 8007868:	3304      	adds	r3, #4
 800786a:	42a6      	cmp	r6, r4
 800786c:	bf38      	it	cc
 800786e:	2304      	movcc	r3, #4
 8007870:	441d      	add	r5, r3
 8007872:	445b      	add	r3, fp
 8007874:	461e      	mov	r6, r3
 8007876:	462c      	mov	r4, r5
 8007878:	4544      	cmp	r4, r8
 800787a:	d30e      	bcc.n	800789a <__mdiff+0xf6>
 800787c:	f108 0103 	add.w	r1, r8, #3
 8007880:	1b49      	subs	r1, r1, r5
 8007882:	f021 0103 	bic.w	r1, r1, #3
 8007886:	3d03      	subs	r5, #3
 8007888:	45a8      	cmp	r8, r5
 800788a:	bf38      	it	cc
 800788c:	2100      	movcc	r1, #0
 800788e:	440b      	add	r3, r1
 8007890:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007894:	b199      	cbz	r1, 80078be <__mdiff+0x11a>
 8007896:	6117      	str	r7, [r2, #16]
 8007898:	e79e      	b.n	80077d8 <__mdiff+0x34>
 800789a:	46e6      	mov	lr, ip
 800789c:	f854 1b04 	ldr.w	r1, [r4], #4
 80078a0:	fa1f fc81 	uxth.w	ip, r1
 80078a4:	44f4      	add	ip, lr
 80078a6:	0c08      	lsrs	r0, r1, #16
 80078a8:	4471      	add	r1, lr
 80078aa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80078ae:	b289      	uxth	r1, r1
 80078b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80078b4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80078b8:	f846 1b04 	str.w	r1, [r6], #4
 80078bc:	e7dc      	b.n	8007878 <__mdiff+0xd4>
 80078be:	3f01      	subs	r7, #1
 80078c0:	e7e6      	b.n	8007890 <__mdiff+0xec>
 80078c2:	bf00      	nop
 80078c4:	0800867f 	.word	0x0800867f
 80078c8:	08008690 	.word	0x08008690

080078cc <__d2b>:
 80078cc:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80078d0:	2101      	movs	r1, #1
 80078d2:	4690      	mov	r8, r2
 80078d4:	4699      	mov	r9, r3
 80078d6:	9e08      	ldr	r6, [sp, #32]
 80078d8:	f7ff fcd0 	bl	800727c <_Balloc>
 80078dc:	4604      	mov	r4, r0
 80078de:	b930      	cbnz	r0, 80078ee <__d2b+0x22>
 80078e0:	4602      	mov	r2, r0
 80078e2:	f240 310f 	movw	r1, #783	@ 0x30f
 80078e6:	4b23      	ldr	r3, [pc, #140]	@ (8007974 <__d2b+0xa8>)
 80078e8:	4823      	ldr	r0, [pc, #140]	@ (8007978 <__d2b+0xac>)
 80078ea:	f000 fa57 	bl	8007d9c <__assert_func>
 80078ee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80078f2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80078f6:	b10d      	cbz	r5, 80078fc <__d2b+0x30>
 80078f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80078fc:	9301      	str	r3, [sp, #4]
 80078fe:	f1b8 0300 	subs.w	r3, r8, #0
 8007902:	d024      	beq.n	800794e <__d2b+0x82>
 8007904:	4668      	mov	r0, sp
 8007906:	9300      	str	r3, [sp, #0]
 8007908:	f7ff fd7f 	bl	800740a <__lo0bits>
 800790c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007910:	b1d8      	cbz	r0, 800794a <__d2b+0x7e>
 8007912:	f1c0 0320 	rsb	r3, r0, #32
 8007916:	fa02 f303 	lsl.w	r3, r2, r3
 800791a:	430b      	orrs	r3, r1
 800791c:	40c2      	lsrs	r2, r0
 800791e:	6163      	str	r3, [r4, #20]
 8007920:	9201      	str	r2, [sp, #4]
 8007922:	9b01      	ldr	r3, [sp, #4]
 8007924:	2b00      	cmp	r3, #0
 8007926:	bf0c      	ite	eq
 8007928:	2201      	moveq	r2, #1
 800792a:	2202      	movne	r2, #2
 800792c:	61a3      	str	r3, [r4, #24]
 800792e:	6122      	str	r2, [r4, #16]
 8007930:	b1ad      	cbz	r5, 800795e <__d2b+0x92>
 8007932:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007936:	4405      	add	r5, r0
 8007938:	6035      	str	r5, [r6, #0]
 800793a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800793e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007940:	6018      	str	r0, [r3, #0]
 8007942:	4620      	mov	r0, r4
 8007944:	b002      	add	sp, #8
 8007946:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800794a:	6161      	str	r1, [r4, #20]
 800794c:	e7e9      	b.n	8007922 <__d2b+0x56>
 800794e:	a801      	add	r0, sp, #4
 8007950:	f7ff fd5b 	bl	800740a <__lo0bits>
 8007954:	9b01      	ldr	r3, [sp, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	6163      	str	r3, [r4, #20]
 800795a:	3020      	adds	r0, #32
 800795c:	e7e7      	b.n	800792e <__d2b+0x62>
 800795e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007962:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007966:	6030      	str	r0, [r6, #0]
 8007968:	6918      	ldr	r0, [r3, #16]
 800796a:	f7ff fd2f 	bl	80073cc <__hi0bits>
 800796e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007972:	e7e4      	b.n	800793e <__d2b+0x72>
 8007974:	0800867f 	.word	0x0800867f
 8007978:	08008690 	.word	0x08008690

0800797c <__ssputs_r>:
 800797c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007980:	461f      	mov	r7, r3
 8007982:	688e      	ldr	r6, [r1, #8]
 8007984:	4682      	mov	sl, r0
 8007986:	42be      	cmp	r6, r7
 8007988:	460c      	mov	r4, r1
 800798a:	4690      	mov	r8, r2
 800798c:	680b      	ldr	r3, [r1, #0]
 800798e:	d82d      	bhi.n	80079ec <__ssputs_r+0x70>
 8007990:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007994:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007998:	d026      	beq.n	80079e8 <__ssputs_r+0x6c>
 800799a:	6965      	ldr	r5, [r4, #20]
 800799c:	6909      	ldr	r1, [r1, #16]
 800799e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80079a2:	eba3 0901 	sub.w	r9, r3, r1
 80079a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80079aa:	1c7b      	adds	r3, r7, #1
 80079ac:	444b      	add	r3, r9
 80079ae:	106d      	asrs	r5, r5, #1
 80079b0:	429d      	cmp	r5, r3
 80079b2:	bf38      	it	cc
 80079b4:	461d      	movcc	r5, r3
 80079b6:	0553      	lsls	r3, r2, #21
 80079b8:	d527      	bpl.n	8007a0a <__ssputs_r+0x8e>
 80079ba:	4629      	mov	r1, r5
 80079bc:	f7ff fbd2 	bl	8007164 <_malloc_r>
 80079c0:	4606      	mov	r6, r0
 80079c2:	b360      	cbz	r0, 8007a1e <__ssputs_r+0xa2>
 80079c4:	464a      	mov	r2, r9
 80079c6:	6921      	ldr	r1, [r4, #16]
 80079c8:	f7fe fcfb 	bl	80063c2 <memcpy>
 80079cc:	89a3      	ldrh	r3, [r4, #12]
 80079ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80079d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079d6:	81a3      	strh	r3, [r4, #12]
 80079d8:	6126      	str	r6, [r4, #16]
 80079da:	444e      	add	r6, r9
 80079dc:	6026      	str	r6, [r4, #0]
 80079de:	463e      	mov	r6, r7
 80079e0:	6165      	str	r5, [r4, #20]
 80079e2:	eba5 0509 	sub.w	r5, r5, r9
 80079e6:	60a5      	str	r5, [r4, #8]
 80079e8:	42be      	cmp	r6, r7
 80079ea:	d900      	bls.n	80079ee <__ssputs_r+0x72>
 80079ec:	463e      	mov	r6, r7
 80079ee:	4632      	mov	r2, r6
 80079f0:	4641      	mov	r1, r8
 80079f2:	6820      	ldr	r0, [r4, #0]
 80079f4:	f7fe fc2b 	bl	800624e <memmove>
 80079f8:	2000      	movs	r0, #0
 80079fa:	68a3      	ldr	r3, [r4, #8]
 80079fc:	1b9b      	subs	r3, r3, r6
 80079fe:	60a3      	str	r3, [r4, #8]
 8007a00:	6823      	ldr	r3, [r4, #0]
 8007a02:	4433      	add	r3, r6
 8007a04:	6023      	str	r3, [r4, #0]
 8007a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a0a:	462a      	mov	r2, r5
 8007a0c:	f000 fa0a 	bl	8007e24 <_realloc_r>
 8007a10:	4606      	mov	r6, r0
 8007a12:	2800      	cmp	r0, #0
 8007a14:	d1e0      	bne.n	80079d8 <__ssputs_r+0x5c>
 8007a16:	4650      	mov	r0, sl
 8007a18:	6921      	ldr	r1, [r4, #16]
 8007a1a:	f7ff fb31 	bl	8007080 <_free_r>
 8007a1e:	230c      	movs	r3, #12
 8007a20:	f8ca 3000 	str.w	r3, [sl]
 8007a24:	89a3      	ldrh	r3, [r4, #12]
 8007a26:	f04f 30ff 	mov.w	r0, #4294967295
 8007a2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a2e:	81a3      	strh	r3, [r4, #12]
 8007a30:	e7e9      	b.n	8007a06 <__ssputs_r+0x8a>
	...

08007a34 <_svfiprintf_r>:
 8007a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a38:	4698      	mov	r8, r3
 8007a3a:	898b      	ldrh	r3, [r1, #12]
 8007a3c:	4607      	mov	r7, r0
 8007a3e:	061b      	lsls	r3, r3, #24
 8007a40:	460d      	mov	r5, r1
 8007a42:	4614      	mov	r4, r2
 8007a44:	b09d      	sub	sp, #116	@ 0x74
 8007a46:	d510      	bpl.n	8007a6a <_svfiprintf_r+0x36>
 8007a48:	690b      	ldr	r3, [r1, #16]
 8007a4a:	b973      	cbnz	r3, 8007a6a <_svfiprintf_r+0x36>
 8007a4c:	2140      	movs	r1, #64	@ 0x40
 8007a4e:	f7ff fb89 	bl	8007164 <_malloc_r>
 8007a52:	6028      	str	r0, [r5, #0]
 8007a54:	6128      	str	r0, [r5, #16]
 8007a56:	b930      	cbnz	r0, 8007a66 <_svfiprintf_r+0x32>
 8007a58:	230c      	movs	r3, #12
 8007a5a:	603b      	str	r3, [r7, #0]
 8007a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a60:	b01d      	add	sp, #116	@ 0x74
 8007a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a66:	2340      	movs	r3, #64	@ 0x40
 8007a68:	616b      	str	r3, [r5, #20]
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a6e:	2320      	movs	r3, #32
 8007a70:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007a74:	2330      	movs	r3, #48	@ 0x30
 8007a76:	f04f 0901 	mov.w	r9, #1
 8007a7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a7e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007c18 <_svfiprintf_r+0x1e4>
 8007a82:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007a86:	4623      	mov	r3, r4
 8007a88:	469a      	mov	sl, r3
 8007a8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a8e:	b10a      	cbz	r2, 8007a94 <_svfiprintf_r+0x60>
 8007a90:	2a25      	cmp	r2, #37	@ 0x25
 8007a92:	d1f9      	bne.n	8007a88 <_svfiprintf_r+0x54>
 8007a94:	ebba 0b04 	subs.w	fp, sl, r4
 8007a98:	d00b      	beq.n	8007ab2 <_svfiprintf_r+0x7e>
 8007a9a:	465b      	mov	r3, fp
 8007a9c:	4622      	mov	r2, r4
 8007a9e:	4629      	mov	r1, r5
 8007aa0:	4638      	mov	r0, r7
 8007aa2:	f7ff ff6b 	bl	800797c <__ssputs_r>
 8007aa6:	3001      	adds	r0, #1
 8007aa8:	f000 80a7 	beq.w	8007bfa <_svfiprintf_r+0x1c6>
 8007aac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007aae:	445a      	add	r2, fp
 8007ab0:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ab2:	f89a 3000 	ldrb.w	r3, [sl]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	f000 809f 	beq.w	8007bfa <_svfiprintf_r+0x1c6>
 8007abc:	2300      	movs	r3, #0
 8007abe:	f04f 32ff 	mov.w	r2, #4294967295
 8007ac2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ac6:	f10a 0a01 	add.w	sl, sl, #1
 8007aca:	9304      	str	r3, [sp, #16]
 8007acc:	9307      	str	r3, [sp, #28]
 8007ace:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ad2:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ad4:	4654      	mov	r4, sl
 8007ad6:	2205      	movs	r2, #5
 8007ad8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007adc:	484e      	ldr	r0, [pc, #312]	@ (8007c18 <_svfiprintf_r+0x1e4>)
 8007ade:	f7fe fc62 	bl	80063a6 <memchr>
 8007ae2:	9a04      	ldr	r2, [sp, #16]
 8007ae4:	b9d8      	cbnz	r0, 8007b1e <_svfiprintf_r+0xea>
 8007ae6:	06d0      	lsls	r0, r2, #27
 8007ae8:	bf44      	itt	mi
 8007aea:	2320      	movmi	r3, #32
 8007aec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007af0:	0711      	lsls	r1, r2, #28
 8007af2:	bf44      	itt	mi
 8007af4:	232b      	movmi	r3, #43	@ 0x2b
 8007af6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007afa:	f89a 3000 	ldrb.w	r3, [sl]
 8007afe:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b00:	d015      	beq.n	8007b2e <_svfiprintf_r+0xfa>
 8007b02:	4654      	mov	r4, sl
 8007b04:	2000      	movs	r0, #0
 8007b06:	f04f 0c0a 	mov.w	ip, #10
 8007b0a:	9a07      	ldr	r2, [sp, #28]
 8007b0c:	4621      	mov	r1, r4
 8007b0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b12:	3b30      	subs	r3, #48	@ 0x30
 8007b14:	2b09      	cmp	r3, #9
 8007b16:	d94b      	bls.n	8007bb0 <_svfiprintf_r+0x17c>
 8007b18:	b1b0      	cbz	r0, 8007b48 <_svfiprintf_r+0x114>
 8007b1a:	9207      	str	r2, [sp, #28]
 8007b1c:	e014      	b.n	8007b48 <_svfiprintf_r+0x114>
 8007b1e:	eba0 0308 	sub.w	r3, r0, r8
 8007b22:	fa09 f303 	lsl.w	r3, r9, r3
 8007b26:	4313      	orrs	r3, r2
 8007b28:	46a2      	mov	sl, r4
 8007b2a:	9304      	str	r3, [sp, #16]
 8007b2c:	e7d2      	b.n	8007ad4 <_svfiprintf_r+0xa0>
 8007b2e:	9b03      	ldr	r3, [sp, #12]
 8007b30:	1d19      	adds	r1, r3, #4
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	9103      	str	r1, [sp, #12]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	bfbb      	ittet	lt
 8007b3a:	425b      	neglt	r3, r3
 8007b3c:	f042 0202 	orrlt.w	r2, r2, #2
 8007b40:	9307      	strge	r3, [sp, #28]
 8007b42:	9307      	strlt	r3, [sp, #28]
 8007b44:	bfb8      	it	lt
 8007b46:	9204      	strlt	r2, [sp, #16]
 8007b48:	7823      	ldrb	r3, [r4, #0]
 8007b4a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b4c:	d10a      	bne.n	8007b64 <_svfiprintf_r+0x130>
 8007b4e:	7863      	ldrb	r3, [r4, #1]
 8007b50:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b52:	d132      	bne.n	8007bba <_svfiprintf_r+0x186>
 8007b54:	9b03      	ldr	r3, [sp, #12]
 8007b56:	3402      	adds	r4, #2
 8007b58:	1d1a      	adds	r2, r3, #4
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	9203      	str	r2, [sp, #12]
 8007b5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007b62:	9305      	str	r3, [sp, #20]
 8007b64:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007c1c <_svfiprintf_r+0x1e8>
 8007b68:	2203      	movs	r2, #3
 8007b6a:	4650      	mov	r0, sl
 8007b6c:	7821      	ldrb	r1, [r4, #0]
 8007b6e:	f7fe fc1a 	bl	80063a6 <memchr>
 8007b72:	b138      	cbz	r0, 8007b84 <_svfiprintf_r+0x150>
 8007b74:	2240      	movs	r2, #64	@ 0x40
 8007b76:	9b04      	ldr	r3, [sp, #16]
 8007b78:	eba0 000a 	sub.w	r0, r0, sl
 8007b7c:	4082      	lsls	r2, r0
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	3401      	adds	r4, #1
 8007b82:	9304      	str	r3, [sp, #16]
 8007b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b88:	2206      	movs	r2, #6
 8007b8a:	4825      	ldr	r0, [pc, #148]	@ (8007c20 <_svfiprintf_r+0x1ec>)
 8007b8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007b90:	f7fe fc09 	bl	80063a6 <memchr>
 8007b94:	2800      	cmp	r0, #0
 8007b96:	d036      	beq.n	8007c06 <_svfiprintf_r+0x1d2>
 8007b98:	4b22      	ldr	r3, [pc, #136]	@ (8007c24 <_svfiprintf_r+0x1f0>)
 8007b9a:	bb1b      	cbnz	r3, 8007be4 <_svfiprintf_r+0x1b0>
 8007b9c:	9b03      	ldr	r3, [sp, #12]
 8007b9e:	3307      	adds	r3, #7
 8007ba0:	f023 0307 	bic.w	r3, r3, #7
 8007ba4:	3308      	adds	r3, #8
 8007ba6:	9303      	str	r3, [sp, #12]
 8007ba8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007baa:	4433      	add	r3, r6
 8007bac:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bae:	e76a      	b.n	8007a86 <_svfiprintf_r+0x52>
 8007bb0:	460c      	mov	r4, r1
 8007bb2:	2001      	movs	r0, #1
 8007bb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bb8:	e7a8      	b.n	8007b0c <_svfiprintf_r+0xd8>
 8007bba:	2300      	movs	r3, #0
 8007bbc:	f04f 0c0a 	mov.w	ip, #10
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	3401      	adds	r4, #1
 8007bc4:	9305      	str	r3, [sp, #20]
 8007bc6:	4620      	mov	r0, r4
 8007bc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bcc:	3a30      	subs	r2, #48	@ 0x30
 8007bce:	2a09      	cmp	r2, #9
 8007bd0:	d903      	bls.n	8007bda <_svfiprintf_r+0x1a6>
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d0c6      	beq.n	8007b64 <_svfiprintf_r+0x130>
 8007bd6:	9105      	str	r1, [sp, #20]
 8007bd8:	e7c4      	b.n	8007b64 <_svfiprintf_r+0x130>
 8007bda:	4604      	mov	r4, r0
 8007bdc:	2301      	movs	r3, #1
 8007bde:	fb0c 2101 	mla	r1, ip, r1, r2
 8007be2:	e7f0      	b.n	8007bc6 <_svfiprintf_r+0x192>
 8007be4:	ab03      	add	r3, sp, #12
 8007be6:	9300      	str	r3, [sp, #0]
 8007be8:	462a      	mov	r2, r5
 8007bea:	4638      	mov	r0, r7
 8007bec:	4b0e      	ldr	r3, [pc, #56]	@ (8007c28 <_svfiprintf_r+0x1f4>)
 8007bee:	a904      	add	r1, sp, #16
 8007bf0:	f7fd fe4a 	bl	8005888 <_printf_float>
 8007bf4:	1c42      	adds	r2, r0, #1
 8007bf6:	4606      	mov	r6, r0
 8007bf8:	d1d6      	bne.n	8007ba8 <_svfiprintf_r+0x174>
 8007bfa:	89ab      	ldrh	r3, [r5, #12]
 8007bfc:	065b      	lsls	r3, r3, #25
 8007bfe:	f53f af2d 	bmi.w	8007a5c <_svfiprintf_r+0x28>
 8007c02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c04:	e72c      	b.n	8007a60 <_svfiprintf_r+0x2c>
 8007c06:	ab03      	add	r3, sp, #12
 8007c08:	9300      	str	r3, [sp, #0]
 8007c0a:	462a      	mov	r2, r5
 8007c0c:	4638      	mov	r0, r7
 8007c0e:	4b06      	ldr	r3, [pc, #24]	@ (8007c28 <_svfiprintf_r+0x1f4>)
 8007c10:	a904      	add	r1, sp, #16
 8007c12:	f7fe f8d7 	bl	8005dc4 <_printf_i>
 8007c16:	e7ed      	b.n	8007bf4 <_svfiprintf_r+0x1c0>
 8007c18:	080087e8 	.word	0x080087e8
 8007c1c:	080087ee 	.word	0x080087ee
 8007c20:	080087f2 	.word	0x080087f2
 8007c24:	08005889 	.word	0x08005889
 8007c28:	0800797d 	.word	0x0800797d

08007c2c <__sflush_r>:
 8007c2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c32:	0716      	lsls	r6, r2, #28
 8007c34:	4605      	mov	r5, r0
 8007c36:	460c      	mov	r4, r1
 8007c38:	d454      	bmi.n	8007ce4 <__sflush_r+0xb8>
 8007c3a:	684b      	ldr	r3, [r1, #4]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	dc02      	bgt.n	8007c46 <__sflush_r+0x1a>
 8007c40:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	dd48      	ble.n	8007cd8 <__sflush_r+0xac>
 8007c46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007c48:	2e00      	cmp	r6, #0
 8007c4a:	d045      	beq.n	8007cd8 <__sflush_r+0xac>
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007c52:	682f      	ldr	r7, [r5, #0]
 8007c54:	6a21      	ldr	r1, [r4, #32]
 8007c56:	602b      	str	r3, [r5, #0]
 8007c58:	d030      	beq.n	8007cbc <__sflush_r+0x90>
 8007c5a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007c5c:	89a3      	ldrh	r3, [r4, #12]
 8007c5e:	0759      	lsls	r1, r3, #29
 8007c60:	d505      	bpl.n	8007c6e <__sflush_r+0x42>
 8007c62:	6863      	ldr	r3, [r4, #4]
 8007c64:	1ad2      	subs	r2, r2, r3
 8007c66:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007c68:	b10b      	cbz	r3, 8007c6e <__sflush_r+0x42>
 8007c6a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007c6c:	1ad2      	subs	r2, r2, r3
 8007c6e:	2300      	movs	r3, #0
 8007c70:	4628      	mov	r0, r5
 8007c72:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007c74:	6a21      	ldr	r1, [r4, #32]
 8007c76:	47b0      	blx	r6
 8007c78:	1c43      	adds	r3, r0, #1
 8007c7a:	89a3      	ldrh	r3, [r4, #12]
 8007c7c:	d106      	bne.n	8007c8c <__sflush_r+0x60>
 8007c7e:	6829      	ldr	r1, [r5, #0]
 8007c80:	291d      	cmp	r1, #29
 8007c82:	d82b      	bhi.n	8007cdc <__sflush_r+0xb0>
 8007c84:	4a28      	ldr	r2, [pc, #160]	@ (8007d28 <__sflush_r+0xfc>)
 8007c86:	410a      	asrs	r2, r1
 8007c88:	07d6      	lsls	r6, r2, #31
 8007c8a:	d427      	bmi.n	8007cdc <__sflush_r+0xb0>
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	6062      	str	r2, [r4, #4]
 8007c90:	6922      	ldr	r2, [r4, #16]
 8007c92:	04d9      	lsls	r1, r3, #19
 8007c94:	6022      	str	r2, [r4, #0]
 8007c96:	d504      	bpl.n	8007ca2 <__sflush_r+0x76>
 8007c98:	1c42      	adds	r2, r0, #1
 8007c9a:	d101      	bne.n	8007ca0 <__sflush_r+0x74>
 8007c9c:	682b      	ldr	r3, [r5, #0]
 8007c9e:	b903      	cbnz	r3, 8007ca2 <__sflush_r+0x76>
 8007ca0:	6560      	str	r0, [r4, #84]	@ 0x54
 8007ca2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ca4:	602f      	str	r7, [r5, #0]
 8007ca6:	b1b9      	cbz	r1, 8007cd8 <__sflush_r+0xac>
 8007ca8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007cac:	4299      	cmp	r1, r3
 8007cae:	d002      	beq.n	8007cb6 <__sflush_r+0x8a>
 8007cb0:	4628      	mov	r0, r5
 8007cb2:	f7ff f9e5 	bl	8007080 <_free_r>
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	6363      	str	r3, [r4, #52]	@ 0x34
 8007cba:	e00d      	b.n	8007cd8 <__sflush_r+0xac>
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	4628      	mov	r0, r5
 8007cc0:	47b0      	blx	r6
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	1c50      	adds	r0, r2, #1
 8007cc6:	d1c9      	bne.n	8007c5c <__sflush_r+0x30>
 8007cc8:	682b      	ldr	r3, [r5, #0]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d0c6      	beq.n	8007c5c <__sflush_r+0x30>
 8007cce:	2b1d      	cmp	r3, #29
 8007cd0:	d001      	beq.n	8007cd6 <__sflush_r+0xaa>
 8007cd2:	2b16      	cmp	r3, #22
 8007cd4:	d11d      	bne.n	8007d12 <__sflush_r+0xe6>
 8007cd6:	602f      	str	r7, [r5, #0]
 8007cd8:	2000      	movs	r0, #0
 8007cda:	e021      	b.n	8007d20 <__sflush_r+0xf4>
 8007cdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ce0:	b21b      	sxth	r3, r3
 8007ce2:	e01a      	b.n	8007d1a <__sflush_r+0xee>
 8007ce4:	690f      	ldr	r7, [r1, #16]
 8007ce6:	2f00      	cmp	r7, #0
 8007ce8:	d0f6      	beq.n	8007cd8 <__sflush_r+0xac>
 8007cea:	0793      	lsls	r3, r2, #30
 8007cec:	bf18      	it	ne
 8007cee:	2300      	movne	r3, #0
 8007cf0:	680e      	ldr	r6, [r1, #0]
 8007cf2:	bf08      	it	eq
 8007cf4:	694b      	ldreq	r3, [r1, #20]
 8007cf6:	1bf6      	subs	r6, r6, r7
 8007cf8:	600f      	str	r7, [r1, #0]
 8007cfa:	608b      	str	r3, [r1, #8]
 8007cfc:	2e00      	cmp	r6, #0
 8007cfe:	ddeb      	ble.n	8007cd8 <__sflush_r+0xac>
 8007d00:	4633      	mov	r3, r6
 8007d02:	463a      	mov	r2, r7
 8007d04:	4628      	mov	r0, r5
 8007d06:	6a21      	ldr	r1, [r4, #32]
 8007d08:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007d0c:	47e0      	blx	ip
 8007d0e:	2800      	cmp	r0, #0
 8007d10:	dc07      	bgt.n	8007d22 <__sflush_r+0xf6>
 8007d12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d1e:	81a3      	strh	r3, [r4, #12]
 8007d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d22:	4407      	add	r7, r0
 8007d24:	1a36      	subs	r6, r6, r0
 8007d26:	e7e9      	b.n	8007cfc <__sflush_r+0xd0>
 8007d28:	dfbffffe 	.word	0xdfbffffe

08007d2c <_fflush_r>:
 8007d2c:	b538      	push	{r3, r4, r5, lr}
 8007d2e:	690b      	ldr	r3, [r1, #16]
 8007d30:	4605      	mov	r5, r0
 8007d32:	460c      	mov	r4, r1
 8007d34:	b913      	cbnz	r3, 8007d3c <_fflush_r+0x10>
 8007d36:	2500      	movs	r5, #0
 8007d38:	4628      	mov	r0, r5
 8007d3a:	bd38      	pop	{r3, r4, r5, pc}
 8007d3c:	b118      	cbz	r0, 8007d46 <_fflush_r+0x1a>
 8007d3e:	6a03      	ldr	r3, [r0, #32]
 8007d40:	b90b      	cbnz	r3, 8007d46 <_fflush_r+0x1a>
 8007d42:	f7fe f9eb 	bl	800611c <__sinit>
 8007d46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d0f3      	beq.n	8007d36 <_fflush_r+0xa>
 8007d4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007d50:	07d0      	lsls	r0, r2, #31
 8007d52:	d404      	bmi.n	8007d5e <_fflush_r+0x32>
 8007d54:	0599      	lsls	r1, r3, #22
 8007d56:	d402      	bmi.n	8007d5e <_fflush_r+0x32>
 8007d58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d5a:	f7fe fb22 	bl	80063a2 <__retarget_lock_acquire_recursive>
 8007d5e:	4628      	mov	r0, r5
 8007d60:	4621      	mov	r1, r4
 8007d62:	f7ff ff63 	bl	8007c2c <__sflush_r>
 8007d66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d68:	4605      	mov	r5, r0
 8007d6a:	07da      	lsls	r2, r3, #31
 8007d6c:	d4e4      	bmi.n	8007d38 <_fflush_r+0xc>
 8007d6e:	89a3      	ldrh	r3, [r4, #12]
 8007d70:	059b      	lsls	r3, r3, #22
 8007d72:	d4e1      	bmi.n	8007d38 <_fflush_r+0xc>
 8007d74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d76:	f7fe fb15 	bl	80063a4 <__retarget_lock_release_recursive>
 8007d7a:	e7dd      	b.n	8007d38 <_fflush_r+0xc>

08007d7c <_sbrk_r>:
 8007d7c:	b538      	push	{r3, r4, r5, lr}
 8007d7e:	2300      	movs	r3, #0
 8007d80:	4d05      	ldr	r5, [pc, #20]	@ (8007d98 <_sbrk_r+0x1c>)
 8007d82:	4604      	mov	r4, r0
 8007d84:	4608      	mov	r0, r1
 8007d86:	602b      	str	r3, [r5, #0]
 8007d88:	f7fa fcac 	bl	80026e4 <_sbrk>
 8007d8c:	1c43      	adds	r3, r0, #1
 8007d8e:	d102      	bne.n	8007d96 <_sbrk_r+0x1a>
 8007d90:	682b      	ldr	r3, [r5, #0]
 8007d92:	b103      	cbz	r3, 8007d96 <_sbrk_r+0x1a>
 8007d94:	6023      	str	r3, [r4, #0]
 8007d96:	bd38      	pop	{r3, r4, r5, pc}
 8007d98:	2000053c 	.word	0x2000053c

08007d9c <__assert_func>:
 8007d9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d9e:	4614      	mov	r4, r2
 8007da0:	461a      	mov	r2, r3
 8007da2:	4b09      	ldr	r3, [pc, #36]	@ (8007dc8 <__assert_func+0x2c>)
 8007da4:	4605      	mov	r5, r0
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	68d8      	ldr	r0, [r3, #12]
 8007daa:	b954      	cbnz	r4, 8007dc2 <__assert_func+0x26>
 8007dac:	4b07      	ldr	r3, [pc, #28]	@ (8007dcc <__assert_func+0x30>)
 8007dae:	461c      	mov	r4, r3
 8007db0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007db4:	9100      	str	r1, [sp, #0]
 8007db6:	462b      	mov	r3, r5
 8007db8:	4905      	ldr	r1, [pc, #20]	@ (8007dd0 <__assert_func+0x34>)
 8007dba:	f000 f86f 	bl	8007e9c <fiprintf>
 8007dbe:	f000 f87f 	bl	8007ec0 <abort>
 8007dc2:	4b04      	ldr	r3, [pc, #16]	@ (8007dd4 <__assert_func+0x38>)
 8007dc4:	e7f4      	b.n	8007db0 <__assert_func+0x14>
 8007dc6:	bf00      	nop
 8007dc8:	20000098 	.word	0x20000098
 8007dcc:	0800883e 	.word	0x0800883e
 8007dd0:	08008810 	.word	0x08008810
 8007dd4:	08008803 	.word	0x08008803

08007dd8 <_calloc_r>:
 8007dd8:	b570      	push	{r4, r5, r6, lr}
 8007dda:	fba1 5402 	umull	r5, r4, r1, r2
 8007dde:	b93c      	cbnz	r4, 8007df0 <_calloc_r+0x18>
 8007de0:	4629      	mov	r1, r5
 8007de2:	f7ff f9bf 	bl	8007164 <_malloc_r>
 8007de6:	4606      	mov	r6, r0
 8007de8:	b928      	cbnz	r0, 8007df6 <_calloc_r+0x1e>
 8007dea:	2600      	movs	r6, #0
 8007dec:	4630      	mov	r0, r6
 8007dee:	bd70      	pop	{r4, r5, r6, pc}
 8007df0:	220c      	movs	r2, #12
 8007df2:	6002      	str	r2, [r0, #0]
 8007df4:	e7f9      	b.n	8007dea <_calloc_r+0x12>
 8007df6:	462a      	mov	r2, r5
 8007df8:	4621      	mov	r1, r4
 8007dfa:	f7fe fa42 	bl	8006282 <memset>
 8007dfe:	e7f5      	b.n	8007dec <_calloc_r+0x14>

08007e00 <__ascii_mbtowc>:
 8007e00:	b082      	sub	sp, #8
 8007e02:	b901      	cbnz	r1, 8007e06 <__ascii_mbtowc+0x6>
 8007e04:	a901      	add	r1, sp, #4
 8007e06:	b142      	cbz	r2, 8007e1a <__ascii_mbtowc+0x1a>
 8007e08:	b14b      	cbz	r3, 8007e1e <__ascii_mbtowc+0x1e>
 8007e0a:	7813      	ldrb	r3, [r2, #0]
 8007e0c:	600b      	str	r3, [r1, #0]
 8007e0e:	7812      	ldrb	r2, [r2, #0]
 8007e10:	1e10      	subs	r0, r2, #0
 8007e12:	bf18      	it	ne
 8007e14:	2001      	movne	r0, #1
 8007e16:	b002      	add	sp, #8
 8007e18:	4770      	bx	lr
 8007e1a:	4610      	mov	r0, r2
 8007e1c:	e7fb      	b.n	8007e16 <__ascii_mbtowc+0x16>
 8007e1e:	f06f 0001 	mvn.w	r0, #1
 8007e22:	e7f8      	b.n	8007e16 <__ascii_mbtowc+0x16>

08007e24 <_realloc_r>:
 8007e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e28:	4680      	mov	r8, r0
 8007e2a:	4615      	mov	r5, r2
 8007e2c:	460c      	mov	r4, r1
 8007e2e:	b921      	cbnz	r1, 8007e3a <_realloc_r+0x16>
 8007e30:	4611      	mov	r1, r2
 8007e32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e36:	f7ff b995 	b.w	8007164 <_malloc_r>
 8007e3a:	b92a      	cbnz	r2, 8007e48 <_realloc_r+0x24>
 8007e3c:	f7ff f920 	bl	8007080 <_free_r>
 8007e40:	2400      	movs	r4, #0
 8007e42:	4620      	mov	r0, r4
 8007e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e48:	f000 f841 	bl	8007ece <_malloc_usable_size_r>
 8007e4c:	4285      	cmp	r5, r0
 8007e4e:	4606      	mov	r6, r0
 8007e50:	d802      	bhi.n	8007e58 <_realloc_r+0x34>
 8007e52:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007e56:	d8f4      	bhi.n	8007e42 <_realloc_r+0x1e>
 8007e58:	4629      	mov	r1, r5
 8007e5a:	4640      	mov	r0, r8
 8007e5c:	f7ff f982 	bl	8007164 <_malloc_r>
 8007e60:	4607      	mov	r7, r0
 8007e62:	2800      	cmp	r0, #0
 8007e64:	d0ec      	beq.n	8007e40 <_realloc_r+0x1c>
 8007e66:	42b5      	cmp	r5, r6
 8007e68:	462a      	mov	r2, r5
 8007e6a:	4621      	mov	r1, r4
 8007e6c:	bf28      	it	cs
 8007e6e:	4632      	movcs	r2, r6
 8007e70:	f7fe faa7 	bl	80063c2 <memcpy>
 8007e74:	4621      	mov	r1, r4
 8007e76:	4640      	mov	r0, r8
 8007e78:	f7ff f902 	bl	8007080 <_free_r>
 8007e7c:	463c      	mov	r4, r7
 8007e7e:	e7e0      	b.n	8007e42 <_realloc_r+0x1e>

08007e80 <__ascii_wctomb>:
 8007e80:	4603      	mov	r3, r0
 8007e82:	4608      	mov	r0, r1
 8007e84:	b141      	cbz	r1, 8007e98 <__ascii_wctomb+0x18>
 8007e86:	2aff      	cmp	r2, #255	@ 0xff
 8007e88:	d904      	bls.n	8007e94 <__ascii_wctomb+0x14>
 8007e8a:	228a      	movs	r2, #138	@ 0x8a
 8007e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e90:	601a      	str	r2, [r3, #0]
 8007e92:	4770      	bx	lr
 8007e94:	2001      	movs	r0, #1
 8007e96:	700a      	strb	r2, [r1, #0]
 8007e98:	4770      	bx	lr
	...

08007e9c <fiprintf>:
 8007e9c:	b40e      	push	{r1, r2, r3}
 8007e9e:	b503      	push	{r0, r1, lr}
 8007ea0:	4601      	mov	r1, r0
 8007ea2:	ab03      	add	r3, sp, #12
 8007ea4:	4805      	ldr	r0, [pc, #20]	@ (8007ebc <fiprintf+0x20>)
 8007ea6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007eaa:	6800      	ldr	r0, [r0, #0]
 8007eac:	9301      	str	r3, [sp, #4]
 8007eae:	f000 f83d 	bl	8007f2c <_vfiprintf_r>
 8007eb2:	b002      	add	sp, #8
 8007eb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007eb8:	b003      	add	sp, #12
 8007eba:	4770      	bx	lr
 8007ebc:	20000098 	.word	0x20000098

08007ec0 <abort>:
 8007ec0:	2006      	movs	r0, #6
 8007ec2:	b508      	push	{r3, lr}
 8007ec4:	f000 fa06 	bl	80082d4 <raise>
 8007ec8:	2001      	movs	r0, #1
 8007eca:	f7fa fb97 	bl	80025fc <_exit>

08007ece <_malloc_usable_size_r>:
 8007ece:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ed2:	1f18      	subs	r0, r3, #4
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	bfbc      	itt	lt
 8007ed8:	580b      	ldrlt	r3, [r1, r0]
 8007eda:	18c0      	addlt	r0, r0, r3
 8007edc:	4770      	bx	lr

08007ede <__sfputc_r>:
 8007ede:	6893      	ldr	r3, [r2, #8]
 8007ee0:	b410      	push	{r4}
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	6093      	str	r3, [r2, #8]
 8007ee8:	da07      	bge.n	8007efa <__sfputc_r+0x1c>
 8007eea:	6994      	ldr	r4, [r2, #24]
 8007eec:	42a3      	cmp	r3, r4
 8007eee:	db01      	blt.n	8007ef4 <__sfputc_r+0x16>
 8007ef0:	290a      	cmp	r1, #10
 8007ef2:	d102      	bne.n	8007efa <__sfputc_r+0x1c>
 8007ef4:	bc10      	pop	{r4}
 8007ef6:	f000 b931 	b.w	800815c <__swbuf_r>
 8007efa:	6813      	ldr	r3, [r2, #0]
 8007efc:	1c58      	adds	r0, r3, #1
 8007efe:	6010      	str	r0, [r2, #0]
 8007f00:	7019      	strb	r1, [r3, #0]
 8007f02:	4608      	mov	r0, r1
 8007f04:	bc10      	pop	{r4}
 8007f06:	4770      	bx	lr

08007f08 <__sfputs_r>:
 8007f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f0a:	4606      	mov	r6, r0
 8007f0c:	460f      	mov	r7, r1
 8007f0e:	4614      	mov	r4, r2
 8007f10:	18d5      	adds	r5, r2, r3
 8007f12:	42ac      	cmp	r4, r5
 8007f14:	d101      	bne.n	8007f1a <__sfputs_r+0x12>
 8007f16:	2000      	movs	r0, #0
 8007f18:	e007      	b.n	8007f2a <__sfputs_r+0x22>
 8007f1a:	463a      	mov	r2, r7
 8007f1c:	4630      	mov	r0, r6
 8007f1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f22:	f7ff ffdc 	bl	8007ede <__sfputc_r>
 8007f26:	1c43      	adds	r3, r0, #1
 8007f28:	d1f3      	bne.n	8007f12 <__sfputs_r+0xa>
 8007f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007f2c <_vfiprintf_r>:
 8007f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f30:	460d      	mov	r5, r1
 8007f32:	4614      	mov	r4, r2
 8007f34:	4698      	mov	r8, r3
 8007f36:	4606      	mov	r6, r0
 8007f38:	b09d      	sub	sp, #116	@ 0x74
 8007f3a:	b118      	cbz	r0, 8007f44 <_vfiprintf_r+0x18>
 8007f3c:	6a03      	ldr	r3, [r0, #32]
 8007f3e:	b90b      	cbnz	r3, 8007f44 <_vfiprintf_r+0x18>
 8007f40:	f7fe f8ec 	bl	800611c <__sinit>
 8007f44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f46:	07d9      	lsls	r1, r3, #31
 8007f48:	d405      	bmi.n	8007f56 <_vfiprintf_r+0x2a>
 8007f4a:	89ab      	ldrh	r3, [r5, #12]
 8007f4c:	059a      	lsls	r2, r3, #22
 8007f4e:	d402      	bmi.n	8007f56 <_vfiprintf_r+0x2a>
 8007f50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f52:	f7fe fa26 	bl	80063a2 <__retarget_lock_acquire_recursive>
 8007f56:	89ab      	ldrh	r3, [r5, #12]
 8007f58:	071b      	lsls	r3, r3, #28
 8007f5a:	d501      	bpl.n	8007f60 <_vfiprintf_r+0x34>
 8007f5c:	692b      	ldr	r3, [r5, #16]
 8007f5e:	b99b      	cbnz	r3, 8007f88 <_vfiprintf_r+0x5c>
 8007f60:	4629      	mov	r1, r5
 8007f62:	4630      	mov	r0, r6
 8007f64:	f000 f938 	bl	80081d8 <__swsetup_r>
 8007f68:	b170      	cbz	r0, 8007f88 <_vfiprintf_r+0x5c>
 8007f6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f6c:	07dc      	lsls	r4, r3, #31
 8007f6e:	d504      	bpl.n	8007f7a <_vfiprintf_r+0x4e>
 8007f70:	f04f 30ff 	mov.w	r0, #4294967295
 8007f74:	b01d      	add	sp, #116	@ 0x74
 8007f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f7a:	89ab      	ldrh	r3, [r5, #12]
 8007f7c:	0598      	lsls	r0, r3, #22
 8007f7e:	d4f7      	bmi.n	8007f70 <_vfiprintf_r+0x44>
 8007f80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f82:	f7fe fa0f 	bl	80063a4 <__retarget_lock_release_recursive>
 8007f86:	e7f3      	b.n	8007f70 <_vfiprintf_r+0x44>
 8007f88:	2300      	movs	r3, #0
 8007f8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f8c:	2320      	movs	r3, #32
 8007f8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007f92:	2330      	movs	r3, #48	@ 0x30
 8007f94:	f04f 0901 	mov.w	r9, #1
 8007f98:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f9c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008148 <_vfiprintf_r+0x21c>
 8007fa0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007fa4:	4623      	mov	r3, r4
 8007fa6:	469a      	mov	sl, r3
 8007fa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fac:	b10a      	cbz	r2, 8007fb2 <_vfiprintf_r+0x86>
 8007fae:	2a25      	cmp	r2, #37	@ 0x25
 8007fb0:	d1f9      	bne.n	8007fa6 <_vfiprintf_r+0x7a>
 8007fb2:	ebba 0b04 	subs.w	fp, sl, r4
 8007fb6:	d00b      	beq.n	8007fd0 <_vfiprintf_r+0xa4>
 8007fb8:	465b      	mov	r3, fp
 8007fba:	4622      	mov	r2, r4
 8007fbc:	4629      	mov	r1, r5
 8007fbe:	4630      	mov	r0, r6
 8007fc0:	f7ff ffa2 	bl	8007f08 <__sfputs_r>
 8007fc4:	3001      	adds	r0, #1
 8007fc6:	f000 80a7 	beq.w	8008118 <_vfiprintf_r+0x1ec>
 8007fca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007fcc:	445a      	add	r2, fp
 8007fce:	9209      	str	r2, [sp, #36]	@ 0x24
 8007fd0:	f89a 3000 	ldrb.w	r3, [sl]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	f000 809f 	beq.w	8008118 <_vfiprintf_r+0x1ec>
 8007fda:	2300      	movs	r3, #0
 8007fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8007fe0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fe4:	f10a 0a01 	add.w	sl, sl, #1
 8007fe8:	9304      	str	r3, [sp, #16]
 8007fea:	9307      	str	r3, [sp, #28]
 8007fec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ff0:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ff2:	4654      	mov	r4, sl
 8007ff4:	2205      	movs	r2, #5
 8007ff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ffa:	4853      	ldr	r0, [pc, #332]	@ (8008148 <_vfiprintf_r+0x21c>)
 8007ffc:	f7fe f9d3 	bl	80063a6 <memchr>
 8008000:	9a04      	ldr	r2, [sp, #16]
 8008002:	b9d8      	cbnz	r0, 800803c <_vfiprintf_r+0x110>
 8008004:	06d1      	lsls	r1, r2, #27
 8008006:	bf44      	itt	mi
 8008008:	2320      	movmi	r3, #32
 800800a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800800e:	0713      	lsls	r3, r2, #28
 8008010:	bf44      	itt	mi
 8008012:	232b      	movmi	r3, #43	@ 0x2b
 8008014:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008018:	f89a 3000 	ldrb.w	r3, [sl]
 800801c:	2b2a      	cmp	r3, #42	@ 0x2a
 800801e:	d015      	beq.n	800804c <_vfiprintf_r+0x120>
 8008020:	4654      	mov	r4, sl
 8008022:	2000      	movs	r0, #0
 8008024:	f04f 0c0a 	mov.w	ip, #10
 8008028:	9a07      	ldr	r2, [sp, #28]
 800802a:	4621      	mov	r1, r4
 800802c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008030:	3b30      	subs	r3, #48	@ 0x30
 8008032:	2b09      	cmp	r3, #9
 8008034:	d94b      	bls.n	80080ce <_vfiprintf_r+0x1a2>
 8008036:	b1b0      	cbz	r0, 8008066 <_vfiprintf_r+0x13a>
 8008038:	9207      	str	r2, [sp, #28]
 800803a:	e014      	b.n	8008066 <_vfiprintf_r+0x13a>
 800803c:	eba0 0308 	sub.w	r3, r0, r8
 8008040:	fa09 f303 	lsl.w	r3, r9, r3
 8008044:	4313      	orrs	r3, r2
 8008046:	46a2      	mov	sl, r4
 8008048:	9304      	str	r3, [sp, #16]
 800804a:	e7d2      	b.n	8007ff2 <_vfiprintf_r+0xc6>
 800804c:	9b03      	ldr	r3, [sp, #12]
 800804e:	1d19      	adds	r1, r3, #4
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	9103      	str	r1, [sp, #12]
 8008054:	2b00      	cmp	r3, #0
 8008056:	bfbb      	ittet	lt
 8008058:	425b      	neglt	r3, r3
 800805a:	f042 0202 	orrlt.w	r2, r2, #2
 800805e:	9307      	strge	r3, [sp, #28]
 8008060:	9307      	strlt	r3, [sp, #28]
 8008062:	bfb8      	it	lt
 8008064:	9204      	strlt	r2, [sp, #16]
 8008066:	7823      	ldrb	r3, [r4, #0]
 8008068:	2b2e      	cmp	r3, #46	@ 0x2e
 800806a:	d10a      	bne.n	8008082 <_vfiprintf_r+0x156>
 800806c:	7863      	ldrb	r3, [r4, #1]
 800806e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008070:	d132      	bne.n	80080d8 <_vfiprintf_r+0x1ac>
 8008072:	9b03      	ldr	r3, [sp, #12]
 8008074:	3402      	adds	r4, #2
 8008076:	1d1a      	adds	r2, r3, #4
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	9203      	str	r2, [sp, #12]
 800807c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008080:	9305      	str	r3, [sp, #20]
 8008082:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800814c <_vfiprintf_r+0x220>
 8008086:	2203      	movs	r2, #3
 8008088:	4650      	mov	r0, sl
 800808a:	7821      	ldrb	r1, [r4, #0]
 800808c:	f7fe f98b 	bl	80063a6 <memchr>
 8008090:	b138      	cbz	r0, 80080a2 <_vfiprintf_r+0x176>
 8008092:	2240      	movs	r2, #64	@ 0x40
 8008094:	9b04      	ldr	r3, [sp, #16]
 8008096:	eba0 000a 	sub.w	r0, r0, sl
 800809a:	4082      	lsls	r2, r0
 800809c:	4313      	orrs	r3, r2
 800809e:	3401      	adds	r4, #1
 80080a0:	9304      	str	r3, [sp, #16]
 80080a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080a6:	2206      	movs	r2, #6
 80080a8:	4829      	ldr	r0, [pc, #164]	@ (8008150 <_vfiprintf_r+0x224>)
 80080aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80080ae:	f7fe f97a 	bl	80063a6 <memchr>
 80080b2:	2800      	cmp	r0, #0
 80080b4:	d03f      	beq.n	8008136 <_vfiprintf_r+0x20a>
 80080b6:	4b27      	ldr	r3, [pc, #156]	@ (8008154 <_vfiprintf_r+0x228>)
 80080b8:	bb1b      	cbnz	r3, 8008102 <_vfiprintf_r+0x1d6>
 80080ba:	9b03      	ldr	r3, [sp, #12]
 80080bc:	3307      	adds	r3, #7
 80080be:	f023 0307 	bic.w	r3, r3, #7
 80080c2:	3308      	adds	r3, #8
 80080c4:	9303      	str	r3, [sp, #12]
 80080c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080c8:	443b      	add	r3, r7
 80080ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80080cc:	e76a      	b.n	8007fa4 <_vfiprintf_r+0x78>
 80080ce:	460c      	mov	r4, r1
 80080d0:	2001      	movs	r0, #1
 80080d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80080d6:	e7a8      	b.n	800802a <_vfiprintf_r+0xfe>
 80080d8:	2300      	movs	r3, #0
 80080da:	f04f 0c0a 	mov.w	ip, #10
 80080de:	4619      	mov	r1, r3
 80080e0:	3401      	adds	r4, #1
 80080e2:	9305      	str	r3, [sp, #20]
 80080e4:	4620      	mov	r0, r4
 80080e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080ea:	3a30      	subs	r2, #48	@ 0x30
 80080ec:	2a09      	cmp	r2, #9
 80080ee:	d903      	bls.n	80080f8 <_vfiprintf_r+0x1cc>
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d0c6      	beq.n	8008082 <_vfiprintf_r+0x156>
 80080f4:	9105      	str	r1, [sp, #20]
 80080f6:	e7c4      	b.n	8008082 <_vfiprintf_r+0x156>
 80080f8:	4604      	mov	r4, r0
 80080fa:	2301      	movs	r3, #1
 80080fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008100:	e7f0      	b.n	80080e4 <_vfiprintf_r+0x1b8>
 8008102:	ab03      	add	r3, sp, #12
 8008104:	9300      	str	r3, [sp, #0]
 8008106:	462a      	mov	r2, r5
 8008108:	4630      	mov	r0, r6
 800810a:	4b13      	ldr	r3, [pc, #76]	@ (8008158 <_vfiprintf_r+0x22c>)
 800810c:	a904      	add	r1, sp, #16
 800810e:	f7fd fbbb 	bl	8005888 <_printf_float>
 8008112:	4607      	mov	r7, r0
 8008114:	1c78      	adds	r0, r7, #1
 8008116:	d1d6      	bne.n	80080c6 <_vfiprintf_r+0x19a>
 8008118:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800811a:	07d9      	lsls	r1, r3, #31
 800811c:	d405      	bmi.n	800812a <_vfiprintf_r+0x1fe>
 800811e:	89ab      	ldrh	r3, [r5, #12]
 8008120:	059a      	lsls	r2, r3, #22
 8008122:	d402      	bmi.n	800812a <_vfiprintf_r+0x1fe>
 8008124:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008126:	f7fe f93d 	bl	80063a4 <__retarget_lock_release_recursive>
 800812a:	89ab      	ldrh	r3, [r5, #12]
 800812c:	065b      	lsls	r3, r3, #25
 800812e:	f53f af1f 	bmi.w	8007f70 <_vfiprintf_r+0x44>
 8008132:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008134:	e71e      	b.n	8007f74 <_vfiprintf_r+0x48>
 8008136:	ab03      	add	r3, sp, #12
 8008138:	9300      	str	r3, [sp, #0]
 800813a:	462a      	mov	r2, r5
 800813c:	4630      	mov	r0, r6
 800813e:	4b06      	ldr	r3, [pc, #24]	@ (8008158 <_vfiprintf_r+0x22c>)
 8008140:	a904      	add	r1, sp, #16
 8008142:	f7fd fe3f 	bl	8005dc4 <_printf_i>
 8008146:	e7e4      	b.n	8008112 <_vfiprintf_r+0x1e6>
 8008148:	080087e8 	.word	0x080087e8
 800814c:	080087ee 	.word	0x080087ee
 8008150:	080087f2 	.word	0x080087f2
 8008154:	08005889 	.word	0x08005889
 8008158:	08007f09 	.word	0x08007f09

0800815c <__swbuf_r>:
 800815c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800815e:	460e      	mov	r6, r1
 8008160:	4614      	mov	r4, r2
 8008162:	4605      	mov	r5, r0
 8008164:	b118      	cbz	r0, 800816e <__swbuf_r+0x12>
 8008166:	6a03      	ldr	r3, [r0, #32]
 8008168:	b90b      	cbnz	r3, 800816e <__swbuf_r+0x12>
 800816a:	f7fd ffd7 	bl	800611c <__sinit>
 800816e:	69a3      	ldr	r3, [r4, #24]
 8008170:	60a3      	str	r3, [r4, #8]
 8008172:	89a3      	ldrh	r3, [r4, #12]
 8008174:	071a      	lsls	r2, r3, #28
 8008176:	d501      	bpl.n	800817c <__swbuf_r+0x20>
 8008178:	6923      	ldr	r3, [r4, #16]
 800817a:	b943      	cbnz	r3, 800818e <__swbuf_r+0x32>
 800817c:	4621      	mov	r1, r4
 800817e:	4628      	mov	r0, r5
 8008180:	f000 f82a 	bl	80081d8 <__swsetup_r>
 8008184:	b118      	cbz	r0, 800818e <__swbuf_r+0x32>
 8008186:	f04f 37ff 	mov.w	r7, #4294967295
 800818a:	4638      	mov	r0, r7
 800818c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800818e:	6823      	ldr	r3, [r4, #0]
 8008190:	6922      	ldr	r2, [r4, #16]
 8008192:	b2f6      	uxtb	r6, r6
 8008194:	1a98      	subs	r0, r3, r2
 8008196:	6963      	ldr	r3, [r4, #20]
 8008198:	4637      	mov	r7, r6
 800819a:	4283      	cmp	r3, r0
 800819c:	dc05      	bgt.n	80081aa <__swbuf_r+0x4e>
 800819e:	4621      	mov	r1, r4
 80081a0:	4628      	mov	r0, r5
 80081a2:	f7ff fdc3 	bl	8007d2c <_fflush_r>
 80081a6:	2800      	cmp	r0, #0
 80081a8:	d1ed      	bne.n	8008186 <__swbuf_r+0x2a>
 80081aa:	68a3      	ldr	r3, [r4, #8]
 80081ac:	3b01      	subs	r3, #1
 80081ae:	60a3      	str	r3, [r4, #8]
 80081b0:	6823      	ldr	r3, [r4, #0]
 80081b2:	1c5a      	adds	r2, r3, #1
 80081b4:	6022      	str	r2, [r4, #0]
 80081b6:	701e      	strb	r6, [r3, #0]
 80081b8:	6962      	ldr	r2, [r4, #20]
 80081ba:	1c43      	adds	r3, r0, #1
 80081bc:	429a      	cmp	r2, r3
 80081be:	d004      	beq.n	80081ca <__swbuf_r+0x6e>
 80081c0:	89a3      	ldrh	r3, [r4, #12]
 80081c2:	07db      	lsls	r3, r3, #31
 80081c4:	d5e1      	bpl.n	800818a <__swbuf_r+0x2e>
 80081c6:	2e0a      	cmp	r6, #10
 80081c8:	d1df      	bne.n	800818a <__swbuf_r+0x2e>
 80081ca:	4621      	mov	r1, r4
 80081cc:	4628      	mov	r0, r5
 80081ce:	f7ff fdad 	bl	8007d2c <_fflush_r>
 80081d2:	2800      	cmp	r0, #0
 80081d4:	d0d9      	beq.n	800818a <__swbuf_r+0x2e>
 80081d6:	e7d6      	b.n	8008186 <__swbuf_r+0x2a>

080081d8 <__swsetup_r>:
 80081d8:	b538      	push	{r3, r4, r5, lr}
 80081da:	4b29      	ldr	r3, [pc, #164]	@ (8008280 <__swsetup_r+0xa8>)
 80081dc:	4605      	mov	r5, r0
 80081de:	6818      	ldr	r0, [r3, #0]
 80081e0:	460c      	mov	r4, r1
 80081e2:	b118      	cbz	r0, 80081ec <__swsetup_r+0x14>
 80081e4:	6a03      	ldr	r3, [r0, #32]
 80081e6:	b90b      	cbnz	r3, 80081ec <__swsetup_r+0x14>
 80081e8:	f7fd ff98 	bl	800611c <__sinit>
 80081ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081f0:	0719      	lsls	r1, r3, #28
 80081f2:	d422      	bmi.n	800823a <__swsetup_r+0x62>
 80081f4:	06da      	lsls	r2, r3, #27
 80081f6:	d407      	bmi.n	8008208 <__swsetup_r+0x30>
 80081f8:	2209      	movs	r2, #9
 80081fa:	602a      	str	r2, [r5, #0]
 80081fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008200:	f04f 30ff 	mov.w	r0, #4294967295
 8008204:	81a3      	strh	r3, [r4, #12]
 8008206:	e033      	b.n	8008270 <__swsetup_r+0x98>
 8008208:	0758      	lsls	r0, r3, #29
 800820a:	d512      	bpl.n	8008232 <__swsetup_r+0x5a>
 800820c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800820e:	b141      	cbz	r1, 8008222 <__swsetup_r+0x4a>
 8008210:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008214:	4299      	cmp	r1, r3
 8008216:	d002      	beq.n	800821e <__swsetup_r+0x46>
 8008218:	4628      	mov	r0, r5
 800821a:	f7fe ff31 	bl	8007080 <_free_r>
 800821e:	2300      	movs	r3, #0
 8008220:	6363      	str	r3, [r4, #52]	@ 0x34
 8008222:	89a3      	ldrh	r3, [r4, #12]
 8008224:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008228:	81a3      	strh	r3, [r4, #12]
 800822a:	2300      	movs	r3, #0
 800822c:	6063      	str	r3, [r4, #4]
 800822e:	6923      	ldr	r3, [r4, #16]
 8008230:	6023      	str	r3, [r4, #0]
 8008232:	89a3      	ldrh	r3, [r4, #12]
 8008234:	f043 0308 	orr.w	r3, r3, #8
 8008238:	81a3      	strh	r3, [r4, #12]
 800823a:	6923      	ldr	r3, [r4, #16]
 800823c:	b94b      	cbnz	r3, 8008252 <__swsetup_r+0x7a>
 800823e:	89a3      	ldrh	r3, [r4, #12]
 8008240:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008244:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008248:	d003      	beq.n	8008252 <__swsetup_r+0x7a>
 800824a:	4621      	mov	r1, r4
 800824c:	4628      	mov	r0, r5
 800824e:	f000 f882 	bl	8008356 <__smakebuf_r>
 8008252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008256:	f013 0201 	ands.w	r2, r3, #1
 800825a:	d00a      	beq.n	8008272 <__swsetup_r+0x9a>
 800825c:	2200      	movs	r2, #0
 800825e:	60a2      	str	r2, [r4, #8]
 8008260:	6962      	ldr	r2, [r4, #20]
 8008262:	4252      	negs	r2, r2
 8008264:	61a2      	str	r2, [r4, #24]
 8008266:	6922      	ldr	r2, [r4, #16]
 8008268:	b942      	cbnz	r2, 800827c <__swsetup_r+0xa4>
 800826a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800826e:	d1c5      	bne.n	80081fc <__swsetup_r+0x24>
 8008270:	bd38      	pop	{r3, r4, r5, pc}
 8008272:	0799      	lsls	r1, r3, #30
 8008274:	bf58      	it	pl
 8008276:	6962      	ldrpl	r2, [r4, #20]
 8008278:	60a2      	str	r2, [r4, #8]
 800827a:	e7f4      	b.n	8008266 <__swsetup_r+0x8e>
 800827c:	2000      	movs	r0, #0
 800827e:	e7f7      	b.n	8008270 <__swsetup_r+0x98>
 8008280:	20000098 	.word	0x20000098

08008284 <_raise_r>:
 8008284:	291f      	cmp	r1, #31
 8008286:	b538      	push	{r3, r4, r5, lr}
 8008288:	4605      	mov	r5, r0
 800828a:	460c      	mov	r4, r1
 800828c:	d904      	bls.n	8008298 <_raise_r+0x14>
 800828e:	2316      	movs	r3, #22
 8008290:	6003      	str	r3, [r0, #0]
 8008292:	f04f 30ff 	mov.w	r0, #4294967295
 8008296:	bd38      	pop	{r3, r4, r5, pc}
 8008298:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800829a:	b112      	cbz	r2, 80082a2 <_raise_r+0x1e>
 800829c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80082a0:	b94b      	cbnz	r3, 80082b6 <_raise_r+0x32>
 80082a2:	4628      	mov	r0, r5
 80082a4:	f000 f830 	bl	8008308 <_getpid_r>
 80082a8:	4622      	mov	r2, r4
 80082aa:	4601      	mov	r1, r0
 80082ac:	4628      	mov	r0, r5
 80082ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082b2:	f000 b817 	b.w	80082e4 <_kill_r>
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d00a      	beq.n	80082d0 <_raise_r+0x4c>
 80082ba:	1c59      	adds	r1, r3, #1
 80082bc:	d103      	bne.n	80082c6 <_raise_r+0x42>
 80082be:	2316      	movs	r3, #22
 80082c0:	6003      	str	r3, [r0, #0]
 80082c2:	2001      	movs	r0, #1
 80082c4:	e7e7      	b.n	8008296 <_raise_r+0x12>
 80082c6:	2100      	movs	r1, #0
 80082c8:	4620      	mov	r0, r4
 80082ca:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80082ce:	4798      	blx	r3
 80082d0:	2000      	movs	r0, #0
 80082d2:	e7e0      	b.n	8008296 <_raise_r+0x12>

080082d4 <raise>:
 80082d4:	4b02      	ldr	r3, [pc, #8]	@ (80082e0 <raise+0xc>)
 80082d6:	4601      	mov	r1, r0
 80082d8:	6818      	ldr	r0, [r3, #0]
 80082da:	f7ff bfd3 	b.w	8008284 <_raise_r>
 80082de:	bf00      	nop
 80082e0:	20000098 	.word	0x20000098

080082e4 <_kill_r>:
 80082e4:	b538      	push	{r3, r4, r5, lr}
 80082e6:	2300      	movs	r3, #0
 80082e8:	4d06      	ldr	r5, [pc, #24]	@ (8008304 <_kill_r+0x20>)
 80082ea:	4604      	mov	r4, r0
 80082ec:	4608      	mov	r0, r1
 80082ee:	4611      	mov	r1, r2
 80082f0:	602b      	str	r3, [r5, #0]
 80082f2:	f7fa f973 	bl	80025dc <_kill>
 80082f6:	1c43      	adds	r3, r0, #1
 80082f8:	d102      	bne.n	8008300 <_kill_r+0x1c>
 80082fa:	682b      	ldr	r3, [r5, #0]
 80082fc:	b103      	cbz	r3, 8008300 <_kill_r+0x1c>
 80082fe:	6023      	str	r3, [r4, #0]
 8008300:	bd38      	pop	{r3, r4, r5, pc}
 8008302:	bf00      	nop
 8008304:	2000053c 	.word	0x2000053c

08008308 <_getpid_r>:
 8008308:	f7fa b961 	b.w	80025ce <_getpid>

0800830c <__swhatbuf_r>:
 800830c:	b570      	push	{r4, r5, r6, lr}
 800830e:	460c      	mov	r4, r1
 8008310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008314:	4615      	mov	r5, r2
 8008316:	2900      	cmp	r1, #0
 8008318:	461e      	mov	r6, r3
 800831a:	b096      	sub	sp, #88	@ 0x58
 800831c:	da0c      	bge.n	8008338 <__swhatbuf_r+0x2c>
 800831e:	89a3      	ldrh	r3, [r4, #12]
 8008320:	2100      	movs	r1, #0
 8008322:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008326:	bf14      	ite	ne
 8008328:	2340      	movne	r3, #64	@ 0x40
 800832a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800832e:	2000      	movs	r0, #0
 8008330:	6031      	str	r1, [r6, #0]
 8008332:	602b      	str	r3, [r5, #0]
 8008334:	b016      	add	sp, #88	@ 0x58
 8008336:	bd70      	pop	{r4, r5, r6, pc}
 8008338:	466a      	mov	r2, sp
 800833a:	f000 f849 	bl	80083d0 <_fstat_r>
 800833e:	2800      	cmp	r0, #0
 8008340:	dbed      	blt.n	800831e <__swhatbuf_r+0x12>
 8008342:	9901      	ldr	r1, [sp, #4]
 8008344:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008348:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800834c:	4259      	negs	r1, r3
 800834e:	4159      	adcs	r1, r3
 8008350:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008354:	e7eb      	b.n	800832e <__swhatbuf_r+0x22>

08008356 <__smakebuf_r>:
 8008356:	898b      	ldrh	r3, [r1, #12]
 8008358:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800835a:	079d      	lsls	r5, r3, #30
 800835c:	4606      	mov	r6, r0
 800835e:	460c      	mov	r4, r1
 8008360:	d507      	bpl.n	8008372 <__smakebuf_r+0x1c>
 8008362:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008366:	6023      	str	r3, [r4, #0]
 8008368:	6123      	str	r3, [r4, #16]
 800836a:	2301      	movs	r3, #1
 800836c:	6163      	str	r3, [r4, #20]
 800836e:	b003      	add	sp, #12
 8008370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008372:	466a      	mov	r2, sp
 8008374:	ab01      	add	r3, sp, #4
 8008376:	f7ff ffc9 	bl	800830c <__swhatbuf_r>
 800837a:	9f00      	ldr	r7, [sp, #0]
 800837c:	4605      	mov	r5, r0
 800837e:	4639      	mov	r1, r7
 8008380:	4630      	mov	r0, r6
 8008382:	f7fe feef 	bl	8007164 <_malloc_r>
 8008386:	b948      	cbnz	r0, 800839c <__smakebuf_r+0x46>
 8008388:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800838c:	059a      	lsls	r2, r3, #22
 800838e:	d4ee      	bmi.n	800836e <__smakebuf_r+0x18>
 8008390:	f023 0303 	bic.w	r3, r3, #3
 8008394:	f043 0302 	orr.w	r3, r3, #2
 8008398:	81a3      	strh	r3, [r4, #12]
 800839a:	e7e2      	b.n	8008362 <__smakebuf_r+0xc>
 800839c:	89a3      	ldrh	r3, [r4, #12]
 800839e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80083a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083a6:	81a3      	strh	r3, [r4, #12]
 80083a8:	9b01      	ldr	r3, [sp, #4]
 80083aa:	6020      	str	r0, [r4, #0]
 80083ac:	b15b      	cbz	r3, 80083c6 <__smakebuf_r+0x70>
 80083ae:	4630      	mov	r0, r6
 80083b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083b4:	f000 f81e 	bl	80083f4 <_isatty_r>
 80083b8:	b128      	cbz	r0, 80083c6 <__smakebuf_r+0x70>
 80083ba:	89a3      	ldrh	r3, [r4, #12]
 80083bc:	f023 0303 	bic.w	r3, r3, #3
 80083c0:	f043 0301 	orr.w	r3, r3, #1
 80083c4:	81a3      	strh	r3, [r4, #12]
 80083c6:	89a3      	ldrh	r3, [r4, #12]
 80083c8:	431d      	orrs	r5, r3
 80083ca:	81a5      	strh	r5, [r4, #12]
 80083cc:	e7cf      	b.n	800836e <__smakebuf_r+0x18>
	...

080083d0 <_fstat_r>:
 80083d0:	b538      	push	{r3, r4, r5, lr}
 80083d2:	2300      	movs	r3, #0
 80083d4:	4d06      	ldr	r5, [pc, #24]	@ (80083f0 <_fstat_r+0x20>)
 80083d6:	4604      	mov	r4, r0
 80083d8:	4608      	mov	r0, r1
 80083da:	4611      	mov	r1, r2
 80083dc:	602b      	str	r3, [r5, #0]
 80083de:	f7fa f95c 	bl	800269a <_fstat>
 80083e2:	1c43      	adds	r3, r0, #1
 80083e4:	d102      	bne.n	80083ec <_fstat_r+0x1c>
 80083e6:	682b      	ldr	r3, [r5, #0]
 80083e8:	b103      	cbz	r3, 80083ec <_fstat_r+0x1c>
 80083ea:	6023      	str	r3, [r4, #0]
 80083ec:	bd38      	pop	{r3, r4, r5, pc}
 80083ee:	bf00      	nop
 80083f0:	2000053c 	.word	0x2000053c

080083f4 <_isatty_r>:
 80083f4:	b538      	push	{r3, r4, r5, lr}
 80083f6:	2300      	movs	r3, #0
 80083f8:	4d05      	ldr	r5, [pc, #20]	@ (8008410 <_isatty_r+0x1c>)
 80083fa:	4604      	mov	r4, r0
 80083fc:	4608      	mov	r0, r1
 80083fe:	602b      	str	r3, [r5, #0]
 8008400:	f7fa f95a 	bl	80026b8 <_isatty>
 8008404:	1c43      	adds	r3, r0, #1
 8008406:	d102      	bne.n	800840e <_isatty_r+0x1a>
 8008408:	682b      	ldr	r3, [r5, #0]
 800840a:	b103      	cbz	r3, 800840e <_isatty_r+0x1a>
 800840c:	6023      	str	r3, [r4, #0]
 800840e:	bd38      	pop	{r3, r4, r5, pc}
 8008410:	2000053c 	.word	0x2000053c

08008414 <_init>:
 8008414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008416:	bf00      	nop
 8008418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800841a:	bc08      	pop	{r3}
 800841c:	469e      	mov	lr, r3
 800841e:	4770      	bx	lr

08008420 <_fini>:
 8008420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008422:	bf00      	nop
 8008424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008426:	bc08      	pop	{r3}
 8008428:	469e      	mov	lr, r3
 800842a:	4770      	bx	lr
