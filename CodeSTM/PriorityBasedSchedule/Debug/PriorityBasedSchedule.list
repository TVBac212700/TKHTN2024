
PriorityBasedSchedule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000838c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  080084a0  080084a0  000094a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088c0  080088c0  0000a260  2**0
                  CONTENTS
  4 .ARM          00000008  080088c0  080088c0  000098c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088c8  080088c8  0000a260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088c8  080088c8  000098c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080088cc  080088cc  000098cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000260  20000000  080088d0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000260  08008b30  0000a260  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000558  08008b30  0000a558  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a260  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c02c  00000000  00000000  0000a289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000208e  00000000  00000000  000162b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  00018348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000932  00000000  00000000  00018f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001856d  00000000  00000000  0001984a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e374  00000000  00000000  00031db7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008730c  00000000  00000000  0004012b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c7437  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041dc  00000000  00000000  000c747c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000cb658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000260 	.word	0x20000260
 800012c:	00000000 	.word	0x00000000
 8000130:	08008484 	.word	0x08008484

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000264 	.word	0x20000264
 800014c:	08008484 	.word	0x08008484

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <MPR121_Init>:
#include "MPR121.h"


uint8_t MPR121_Init(void) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
    
    writeRegister(MPR121_SOFTRESET, 0x63);
 8000b2e:	2163      	movs	r1, #99	@ 0x63
 8000b30:	2080      	movs	r0, #128	@ 0x80
 8000b32:	f000 f859 	bl	8000be8 <writeRegister>
    HAL_Delay(1);
 8000b36:	2001      	movs	r0, #1
 8000b38:	f001 fece 	bl	80028d8 <HAL_Delay>
    writeRegister(MPR121_ECR, 0x0);
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	205e      	movs	r0, #94	@ 0x5e
 8000b40:	f000 f852 	bl	8000be8 <writeRegister>

  uint8_t c = readRegister8(MPR121_CONFIG2);
 8000b44:	205d      	movs	r0, #93	@ 0x5d
 8000b46:	f000 f86b 	bl	8000c20 <readRegister8>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]

  if (c != 0x24)
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	2b24      	cmp	r3, #36	@ 0x24
 8000b52:	d001      	beq.n	8000b58 <MPR121_Init+0x30>
    return c;
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	e043      	b.n	8000be0 <MPR121_Init+0xb8>

  setThresholds(MPR121_TOUCH_THRESHOLD_DEFAULT, MPR121_RELEASE_THRESHOLD_DEFAULT);
 8000b58:	2106      	movs	r1, #6
 8000b5a:	200c      	movs	r0, #12
 8000b5c:	f000 f898 	bl	8000c90 <setThresholds>
  writeRegister(MPR121_MHDR, 0x01);
 8000b60:	2101      	movs	r1, #1
 8000b62:	202b      	movs	r0, #43	@ 0x2b
 8000b64:	f000 f840 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_NHDR, 0x01);
 8000b68:	2101      	movs	r1, #1
 8000b6a:	202c      	movs	r0, #44	@ 0x2c
 8000b6c:	f000 f83c 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_NCLR, 0x0E);
 8000b70:	210e      	movs	r1, #14
 8000b72:	202d      	movs	r0, #45	@ 0x2d
 8000b74:	f000 f838 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_FDLR, 0x00);
 8000b78:	2100      	movs	r1, #0
 8000b7a:	202e      	movs	r0, #46	@ 0x2e
 8000b7c:	f000 f834 	bl	8000be8 <writeRegister>

  writeRegister(MPR121_MHDF, 0x01);
 8000b80:	2101      	movs	r1, #1
 8000b82:	202f      	movs	r0, #47	@ 0x2f
 8000b84:	f000 f830 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_NHDF, 0x05);
 8000b88:	2105      	movs	r1, #5
 8000b8a:	2030      	movs	r0, #48	@ 0x30
 8000b8c:	f000 f82c 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_NCLF, 0x01);
 8000b90:	2101      	movs	r1, #1
 8000b92:	2031      	movs	r0, #49	@ 0x31
 8000b94:	f000 f828 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_FDLF, 0x00);
 8000b98:	2100      	movs	r1, #0
 8000b9a:	2032      	movs	r0, #50	@ 0x32
 8000b9c:	f000 f824 	bl	8000be8 <writeRegister>

  writeRegister(MPR121_NHDT, 0x00);
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	2033      	movs	r0, #51	@ 0x33
 8000ba4:	f000 f820 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_NCLT, 0x00);
 8000ba8:	2100      	movs	r1, #0
 8000baa:	2034      	movs	r0, #52	@ 0x34
 8000bac:	f000 f81c 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_FDLT, 0x00);
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	2035      	movs	r0, #53	@ 0x35
 8000bb4:	f000 f818 	bl	8000be8 <writeRegister>

  writeRegister(MPR121_DEBOUNCE, 0);
 8000bb8:	2100      	movs	r1, #0
 8000bba:	205b      	movs	r0, #91	@ 0x5b
 8000bbc:	f000 f814 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_CONFIG1, 0x10); // default, 16uA charge current
 8000bc0:	2110      	movs	r1, #16
 8000bc2:	205c      	movs	r0, #92	@ 0x5c
 8000bc4:	f000 f810 	bl	8000be8 <writeRegister>
  writeRegister(MPR121_CONFIG2, 0x20); // 0.5uS encoding, 1ms period
 8000bc8:	2120      	movs	r1, #32
 8000bca:	205d      	movs	r0, #93	@ 0x5d
 8000bcc:	f000 f80c 	bl	8000be8 <writeRegister>
    uint8_t ECR_SETTING =
 8000bd0:	238c      	movs	r3, #140	@ 0x8c
 8000bd2:	71bb      	strb	r3, [r7, #6]
      B10000000 + 12; // 5 bits for baseline tracking & proximity disabled + X
                      // amount of electrodes running (12)
  writeRegister(MPR121_ECR, ECR_SETTING); // start with above ECR setting
 8000bd4:	79bb      	ldrb	r3, [r7, #6]
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	205e      	movs	r0, #94	@ 0x5e
 8000bda:	f000 f805 	bl	8000be8 <writeRegister>

    return c; 
 8000bde:	79fb      	ldrb	r3, [r7, #7]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <writeRegister>:
    
//     uint16_t touchData = (touchStatus[1] << 8) | touchStatus[0];
//     return (touchData != 0) ? 1 : 0;
// }

void writeRegister(uint8_t reg, uint8_t cmd) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af04      	add	r7, sp, #16
 8000bee:	4603      	mov	r3, r0
 8000bf0:	460a      	mov	r2, r1
 8000bf2:	71fb      	strb	r3, [r7, #7]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	71bb      	strb	r3, [r7, #6]
	// uint8_t arr[2] = { reg, cmd };
	// HAL_I2C_Master_Transmit(&hi2c1, MPR121_I2C_ADDR, arr, 2, HAL_MAX_DELAY);
    HAL_I2C_Mem_Write(&hi2c1, MPR121_I2C_ADDR|0x01,reg,1,&cmd,1,HAL_MAX_DELAY);
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000c00:	9302      	str	r3, [sp, #8]
 8000c02:	2301      	movs	r3, #1
 8000c04:	9301      	str	r3, [sp, #4]
 8000c06:	1dbb      	adds	r3, r7, #6
 8000c08:	9300      	str	r3, [sp, #0]
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	21b5      	movs	r1, #181	@ 0xb5
 8000c0e:	4803      	ldr	r0, [pc, #12]	@ (8000c1c <writeRegister+0x34>)
 8000c10:	f002 fe10 	bl	8003834 <HAL_I2C_Mem_Write>
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	2000029c 	.word	0x2000029c

08000c20 <readRegister8>:
/**
 * @brief Reads from a specific register.
 * @param reg Address of register to read from.
 * @return Byte read.
 */
uint8_t readRegister8(uint8_t reg) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b088      	sub	sp, #32
 8000c24:	af04      	add	r7, sp, #16
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
	// HAL_I2C_Master_Transmit(&hi2c1, MPR121_I2C_ADDR, &reg, 1, HAL_MAX_DELAY);
	uint8_t result;
	// HAL_I2C_Master_Receive(&hi2c1, MPR121_I2C_ADDR, &result, 1, HAL_MAX_DELAY);
    HAL_I2C_Mem_Read(&hi2c1,MPR121_I2C_ADDR,reg,1,&result,1,HAL_MAX_DELAY);
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	b29a      	uxth	r2, r3
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c32:	9302      	str	r3, [sp, #8]
 8000c34:	2301      	movs	r3, #1
 8000c36:	9301      	str	r3, [sp, #4]
 8000c38:	f107 030f 	add.w	r3, r7, #15
 8000c3c:	9300      	str	r3, [sp, #0]
 8000c3e:	2301      	movs	r3, #1
 8000c40:	21b4      	movs	r1, #180	@ 0xb4
 8000c42:	4804      	ldr	r0, [pc, #16]	@ (8000c54 <readRegister8+0x34>)
 8000c44:	f002 fef0 	bl	8003a28 <HAL_I2C_Mem_Read>
	return result;
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	2000029c 	.word	0x2000029c

08000c58 <readRegister16>:

uint16_t readRegister16(uint8_t reg) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b088      	sub	sp, #32
 8000c5c:	af04      	add	r7, sp, #16
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
	// HAL_I2C_Master_Transmit(&hi2c1, MPR121_I2C_ADDR, &reg, 1, HAL_MAX_DELAY);
	// uint8_t result[2];
	// HAL_I2C_Master_Receive(&hi2c1, MPR121_I2C_ADDR, (uint8_t*)&result, 2, HAL_MAX_DELAY);
	// return result[0]|(result[1]<<8);
	uint16_t result;
    HAL_I2C_Mem_Read(&hi2c1,MPR121_I2C_ADDR,reg,1,(uint8_t*)&result,2,HAL_MAX_DELAY);
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	b29a      	uxth	r2, r3
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6a:	9302      	str	r3, [sp, #8]
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	9301      	str	r3, [sp, #4]
 8000c70:	f107 030e 	add.w	r3, r7, #14
 8000c74:	9300      	str	r3, [sp, #0]
 8000c76:	2301      	movs	r3, #1
 8000c78:	21b4      	movs	r1, #180	@ 0xb4
 8000c7a:	4804      	ldr	r0, [pc, #16]	@ (8000c8c <readRegister16+0x34>)
 8000c7c:	f002 fed4 	bl	8003a28 <HAL_I2C_Mem_Read>
    return result;
 8000c80:	89fb      	ldrh	r3, [r7, #14]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	2000029c 	.word	0x2000029c

08000c90 <setThresholds>:

void setThresholds(uint8_t touch, uint8_t release) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	460a      	mov	r2, r1
 8000c9a:	71fb      	strb	r3, [r7, #7]
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	71bb      	strb	r3, [r7, #6]
  // set all thresholds (the same)
  for (uint8_t i = 0; i < 12; i++) {
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	73fb      	strb	r3, [r7, #15]
 8000ca4:	e016      	b.n	8000cd4 <setThresholds+0x44>
    writeRegister(MPR121_TOUCHTH_0 + 2 * i, touch);
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	3341      	adds	r3, #65	@ 0x41
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	79fa      	ldrb	r2, [r7, #7]
 8000cb2:	4611      	mov	r1, r2
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff ff97 	bl	8000be8 <writeRegister>
    writeRegister(MPR121_RELEASETH_0 + 2 * i, release);
 8000cba:	7bfb      	ldrb	r3, [r7, #15]
 8000cbc:	3321      	adds	r3, #33	@ 0x21
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	79ba      	ldrb	r2, [r7, #6]
 8000cc6:	4611      	mov	r1, r2
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ff8d 	bl	8000be8 <writeRegister>
  for (uint8_t i = 0; i < 12; i++) {
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	73fb      	strb	r3, [r7, #15]
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
 8000cd6:	2b0b      	cmp	r3, #11
 8000cd8:	d9e5      	bls.n	8000ca6 <setThresholds+0x16>
  }
}
 8000cda:	bf00      	nop
 8000cdc:	bf00      	nop
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <touched>:
  if (t > 12)
    return 0;
  return readRegister16(MPR121_FILTDATA_0L + t * 2);
}

uint16_t touched(void) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
  uint16_t t = readRegister16(MPR121_TOUCHSTATUS_L);
 8000cea:	2000      	movs	r0, #0
 8000cec:	f7ff ffb4 	bl	8000c58 <readRegister16>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	80fb      	strh	r3, [r7, #6]
  return t & 0x0FFF;
 8000cf4:	88fb      	ldrh	r3, [r7, #6]
 8000cf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cfa:	b29b      	uxth	r3, r3
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <BMP180_Init>:

/**
 * @brief Initializes the BMP180 temperature/pressure sensor.
 * @param hi2c User I2C handle pointer.
 */
void BMP180_Init(I2C_HandleTypeDef *hi2c) {
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	_bmp180_ui2c = hi2c;
 8000d0c:	4a03      	ldr	r2, [pc, #12]	@ (8000d1c <BMP180_Init+0x18>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6013      	str	r3, [r2, #0]
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr
 8000d1c:	2000027c 	.word	0x2000027c

08000d20 <BMP180_SetOversampling>:
/**
 * @param oss Enum, oversampling setting.
 * @note Available resolutions: BMP180_LOW, BMP180_STANDARD, BMP180_HIGH, BMP180_ULTRA.
 * @note Refer to section 3.3.1 of datasheet.
 */
void BMP180_SetOversampling(BMP180_OSS oss) {
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
	_bmp180_oss = oss;
 8000d2a:	4a04      	ldr	r2, [pc, #16]	@ (8000d3c <BMP180_SetOversampling+0x1c>)
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	7013      	strb	r3, [r2, #0]
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bc80      	pop	{r7}
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	20000296 	.word	0x20000296

08000d40 <BMP180_UpdateCalibrationData>:

/**
 * @brief Updates calibration data.
 * @note Must be called once before main loop.
 */
void BMP180_UpdateCalibrationData(void) {
 8000d40:	b598      	push	{r3, r4, r7, lr}
 8000d42:	af00      	add	r7, sp, #0
	_bmp180_eeprom.BMP180_AC1 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC1]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC1]);
 8000d44:	23aa      	movs	r3, #170	@ 0xaa
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 f8dc 	bl	8000f04 <BMP180_ReadReg>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	021b      	lsls	r3, r3, #8
 8000d50:	b21c      	sxth	r4, r3
 8000d52:	23ab      	movs	r3, #171	@ 0xab
 8000d54:	4618      	mov	r0, r3
 8000d56:	f000 f8d5 	bl	8000f04 <BMP180_ReadReg>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	b21b      	sxth	r3, r3
 8000d5e:	4323      	orrs	r3, r4
 8000d60:	b21a      	sxth	r2, r3
 8000d62:	4b58      	ldr	r3, [pc, #352]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000d64:	801a      	strh	r2, [r3, #0]
	_bmp180_eeprom.BMP180_AC2 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC2]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC2]);
 8000d66:	23ac      	movs	r3, #172	@ 0xac
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f000 f8cb 	bl	8000f04 <BMP180_ReadReg>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	021b      	lsls	r3, r3, #8
 8000d72:	b21c      	sxth	r4, r3
 8000d74:	23ad      	movs	r3, #173	@ 0xad
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 f8c4 	bl	8000f04 <BMP180_ReadReg>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	b21b      	sxth	r3, r3
 8000d80:	4323      	orrs	r3, r4
 8000d82:	b21a      	sxth	r2, r3
 8000d84:	4b4f      	ldr	r3, [pc, #316]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000d86:	805a      	strh	r2, [r3, #2]
	_bmp180_eeprom.BMP180_AC3 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC3]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC3]);
 8000d88:	23ae      	movs	r3, #174	@ 0xae
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 f8ba 	bl	8000f04 <BMP180_ReadReg>
 8000d90:	4603      	mov	r3, r0
 8000d92:	021b      	lsls	r3, r3, #8
 8000d94:	b21c      	sxth	r4, r3
 8000d96:	23af      	movs	r3, #175	@ 0xaf
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f000 f8b3 	bl	8000f04 <BMP180_ReadReg>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	b21b      	sxth	r3, r3
 8000da2:	4323      	orrs	r3, r4
 8000da4:	b21a      	sxth	r2, r3
 8000da6:	4b47      	ldr	r3, [pc, #284]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000da8:	809a      	strh	r2, [r3, #4]
	_bmp180_eeprom.BMP180_AC4 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC4]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC4]);
 8000daa:	23b0      	movs	r3, #176	@ 0xb0
 8000dac:	4618      	mov	r0, r3
 8000dae:	f000 f8a9 	bl	8000f04 <BMP180_ReadReg>
 8000db2:	4603      	mov	r3, r0
 8000db4:	021b      	lsls	r3, r3, #8
 8000db6:	b21c      	sxth	r4, r3
 8000db8:	23b1      	movs	r3, #177	@ 0xb1
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 f8a2 	bl	8000f04 <BMP180_ReadReg>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	b21b      	sxth	r3, r3
 8000dc4:	4323      	orrs	r3, r4
 8000dc6:	b21b      	sxth	r3, r3
 8000dc8:	b29a      	uxth	r2, r3
 8000dca:	4b3e      	ldr	r3, [pc, #248]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000dcc:	80da      	strh	r2, [r3, #6]
	_bmp180_eeprom.BMP180_AC5 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC5]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC5]);
 8000dce:	23b2      	movs	r3, #178	@ 0xb2
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f000 f897 	bl	8000f04 <BMP180_ReadReg>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	021b      	lsls	r3, r3, #8
 8000dda:	b21c      	sxth	r4, r3
 8000ddc:	23b3      	movs	r3, #179	@ 0xb3
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 f890 	bl	8000f04 <BMP180_ReadReg>
 8000de4:	4603      	mov	r3, r0
 8000de6:	b21b      	sxth	r3, r3
 8000de8:	4323      	orrs	r3, r4
 8000dea:	b21b      	sxth	r3, r3
 8000dec:	b29a      	uxth	r2, r3
 8000dee:	4b35      	ldr	r3, [pc, #212]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000df0:	811a      	strh	r2, [r3, #8]
	_bmp180_eeprom.BMP180_AC6 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC6]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC6]);
 8000df2:	23b4      	movs	r3, #180	@ 0xb4
 8000df4:	4618      	mov	r0, r3
 8000df6:	f000 f885 	bl	8000f04 <BMP180_ReadReg>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	021b      	lsls	r3, r3, #8
 8000dfe:	b21c      	sxth	r4, r3
 8000e00:	23b5      	movs	r3, #181	@ 0xb5
 8000e02:	4618      	mov	r0, r3
 8000e04:	f000 f87e 	bl	8000f04 <BMP180_ReadReg>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	b21b      	sxth	r3, r3
 8000e0c:	4323      	orrs	r3, r4
 8000e0e:	b21b      	sxth	r3, r3
 8000e10:	b29a      	uxth	r2, r3
 8000e12:	4b2c      	ldr	r3, [pc, #176]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000e14:	815a      	strh	r2, [r3, #10]
	_bmp180_eeprom.BMP180_B1 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B1]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_B1]);
 8000e16:	23b6      	movs	r3, #182	@ 0xb6
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 f873 	bl	8000f04 <BMP180_ReadReg>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	021b      	lsls	r3, r3, #8
 8000e22:	b21c      	sxth	r4, r3
 8000e24:	23b7      	movs	r3, #183	@ 0xb7
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 f86c 	bl	8000f04 <BMP180_ReadReg>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	b21b      	sxth	r3, r3
 8000e30:	4323      	orrs	r3, r4
 8000e32:	b21a      	sxth	r2, r3
 8000e34:	4b23      	ldr	r3, [pc, #140]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000e36:	819a      	strh	r2, [r3, #12]
	_bmp180_eeprom.BMP180_B2 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B2]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_B2]);
 8000e38:	23b8      	movs	r3, #184	@ 0xb8
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 f862 	bl	8000f04 <BMP180_ReadReg>
 8000e40:	4603      	mov	r3, r0
 8000e42:	021b      	lsls	r3, r3, #8
 8000e44:	b21c      	sxth	r4, r3
 8000e46:	23b9      	movs	r3, #185	@ 0xb9
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f000 f85b 	bl	8000f04 <BMP180_ReadReg>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	b21b      	sxth	r3, r3
 8000e52:	4323      	orrs	r3, r4
 8000e54:	b21a      	sxth	r2, r3
 8000e56:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000e58:	81da      	strh	r2, [r3, #14]
	_bmp180_eeprom.BMP180_MB = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MB]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MB]);
 8000e5a:	23ba      	movs	r3, #186	@ 0xba
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f000 f851 	bl	8000f04 <BMP180_ReadReg>
 8000e62:	4603      	mov	r3, r0
 8000e64:	021b      	lsls	r3, r3, #8
 8000e66:	b21c      	sxth	r4, r3
 8000e68:	23bb      	movs	r3, #187	@ 0xbb
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 f84a 	bl	8000f04 <BMP180_ReadReg>
 8000e70:	4603      	mov	r3, r0
 8000e72:	b21b      	sxth	r3, r3
 8000e74:	4323      	orrs	r3, r4
 8000e76:	b21a      	sxth	r2, r3
 8000e78:	4b12      	ldr	r3, [pc, #72]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000e7a:	821a      	strh	r2, [r3, #16]
	_bmp180_eeprom.BMP180_MC = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MC]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MC]);
 8000e7c:	23bc      	movs	r3, #188	@ 0xbc
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 f840 	bl	8000f04 <BMP180_ReadReg>
 8000e84:	4603      	mov	r3, r0
 8000e86:	021b      	lsls	r3, r3, #8
 8000e88:	b21c      	sxth	r4, r3
 8000e8a:	23bd      	movs	r3, #189	@ 0xbd
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f000 f839 	bl	8000f04 <BMP180_ReadReg>
 8000e92:	4603      	mov	r3, r0
 8000e94:	b21b      	sxth	r3, r3
 8000e96:	4323      	orrs	r3, r4
 8000e98:	b21a      	sxth	r2, r3
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000e9c:	825a      	strh	r2, [r3, #18]
	_bmp180_eeprom.BMP180_MD = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MD]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MD]);
 8000e9e:	23be      	movs	r3, #190	@ 0xbe
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f000 f82f 	bl	8000f04 <BMP180_ReadReg>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	021b      	lsls	r3, r3, #8
 8000eaa:	b21c      	sxth	r4, r3
 8000eac:	23bf      	movs	r3, #191	@ 0xbf
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 f828 	bl	8000f04 <BMP180_ReadReg>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	b21b      	sxth	r3, r3
 8000eb8:	4323      	orrs	r3, r4
 8000eba:	b21a      	sxth	r2, r3
 8000ebc:	4b01      	ldr	r3, [pc, #4]	@ (8000ec4 <BMP180_UpdateCalibrationData+0x184>)
 8000ebe:	829a      	strh	r2, [r3, #20]
}
 8000ec0:	bf00      	nop
 8000ec2:	bd98      	pop	{r3, r4, r7, pc}
 8000ec4:	20000280 	.word	0x20000280

08000ec8 <BMP180_WriteReg>:
/**
 * @brief Writes to a specific register.
 * @param reg Address of register to write to.
 * @param cmd Byte to write.
 */
void BMP180_WriteReg(uint8_t reg, uint8_t cmd) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af02      	add	r7, sp, #8
 8000ece:	4603      	mov	r3, r0
 8000ed0:	460a      	mov	r2, r1
 8000ed2:	71fb      	strb	r3, [r7, #7]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	71bb      	strb	r3, [r7, #6]
	uint8_t arr[2] = { reg, cmd };
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	733b      	strb	r3, [r7, #12]
 8000edc:	79bb      	ldrb	r3, [r7, #6]
 8000ede:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, arr, 2, BMP180_I2C_TIMEOUT);
 8000ee0:	4b07      	ldr	r3, [pc, #28]	@ (8000f00 <BMP180_WriteReg+0x38>)
 8000ee2:	6818      	ldr	r0, [r3, #0]
 8000ee4:	f107 020c 	add.w	r2, r7, #12
 8000ee8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	2302      	movs	r3, #2
 8000ef0:	21ee      	movs	r1, #238	@ 0xee
 8000ef2:	f002 f935 	bl	8003160 <HAL_I2C_Master_Transmit>
}
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	2000027c 	.word	0x2000027c

08000f04 <BMP180_ReadReg>:
/**
 * @brief Reads from a specific register.
 * @param reg Address of register to read from.
 * @return Byte read.
 */
uint8_t BMP180_ReadReg(uint8_t reg) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af02      	add	r7, sp, #8
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 8000f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f44 <BMP180_ReadReg+0x40>)
 8000f10:	6818      	ldr	r0, [r3, #0]
 8000f12:	1dfa      	adds	r2, r7, #7
 8000f14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	21ee      	movs	r1, #238	@ 0xee
 8000f1e:	f002 f91f 	bl	8003160 <HAL_I2C_Master_Transmit>
	uint8_t result;
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 8000f22:	4b08      	ldr	r3, [pc, #32]	@ (8000f44 <BMP180_ReadReg+0x40>)
 8000f24:	6818      	ldr	r0, [r3, #0]
 8000f26:	f107 020f 	add.w	r2, r7, #15
 8000f2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	2301      	movs	r3, #1
 8000f32:	21ee      	movs	r1, #238	@ 0xee
 8000f34:	f002 fa12 	bl	800335c <HAL_I2C_Master_Receive>
	return result;
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	2000027c 	.word	0x2000027c

08000f48 <BMP180_GetRawTemperature>:

/**
 * @brief Measures and calculates temperature.
 * @return Temperature in 0.1 (1/10) degrees Celsius.
 */
int32_t BMP180_GetRawTemperature(void) {
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_TEMP);
 8000f4e:	232e      	movs	r3, #46	@ 0x2e
 8000f50:	4619      	mov	r1, r3
 8000f52:	20f4      	movs	r0, #244	@ 0xf4
 8000f54:	f7ff ffb8 	bl	8000ec8 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_TEMP);
 8000f58:	2305      	movs	r3, #5
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f001 fcbc 	bl	80028d8 <HAL_Delay>
	int32_t ut = (BMP180_ReadReg(BMP180_MSB_REG) << 8) | BMP180_ReadReg(BMP180_LSB_REG);
 8000f60:	20f6      	movs	r0, #246	@ 0xf6
 8000f62:	f7ff ffcf 	bl	8000f04 <BMP180_ReadReg>
 8000f66:	4603      	mov	r3, r0
 8000f68:	021c      	lsls	r4, r3, #8
 8000f6a:	20f7      	movs	r0, #247	@ 0xf7
 8000f6c:	f7ff ffca 	bl	8000f04 <BMP180_ReadReg>
 8000f70:	4603      	mov	r3, r0
 8000f72:	4323      	orrs	r3, r4
 8000f74:	60fb      	str	r3, [r7, #12]
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 8000f76:	4b15      	ldr	r3, [pc, #84]	@ (8000fcc <BMP180_GetRawTemperature+0x84>)
 8000f78:	895b      	ldrh	r3, [r3, #10]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	1a9b      	subs	r3, r3, r2
 8000f80:	4a12      	ldr	r2, [pc, #72]	@ (8000fcc <BMP180_GetRawTemperature+0x84>)
 8000f82:	8912      	ldrh	r2, [r2, #8]
 8000f84:	fb02 f303 	mul.w	r3, r2, r3
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	da02      	bge.n	8000f92 <BMP180_GetRawTemperature+0x4a>
 8000f8c:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8000f90:	337f      	adds	r3, #127	@ 0x7f
 8000f92:	13db      	asrs	r3, r3, #15
 8000f94:	60bb      	str	r3, [r7, #8]
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 8000f96:	4b0d      	ldr	r3, [pc, #52]	@ (8000fcc <BMP180_GetRawTemperature+0x84>)
 8000f98:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000f9c:	02da      	lsls	r2, r3, #11
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fcc <BMP180_GetRawTemperature+0x84>)
 8000fa0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	440b      	add	r3, r1
 8000faa:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fae:	607b      	str	r3, [r7, #4]
	int32_t b5 = x1 + x2;
 8000fb0:	68ba      	ldr	r2, [r7, #8]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	603b      	str	r3, [r7, #0]
	return (b5 + 8) / (1 << 4);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	3308      	adds	r3, #8
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	da00      	bge.n	8000fc2 <BMP180_GetRawTemperature+0x7a>
 8000fc0:	330f      	adds	r3, #15
 8000fc2:	111b      	asrs	r3, r3, #4
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd90      	pop	{r4, r7, pc}
 8000fcc:	20000280 	.word	0x20000280

08000fd0 <BMP180_GetTemperature>:

/**
 * @brief Measures and calculates temperature.
 * @return Temperature in degrees Celsius.
 */
float BMP180_GetTemperature(void) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
	int32_t temp = BMP180_GetRawTemperature();
 8000fd6:	f7ff ffb7 	bl	8000f48 <BMP180_GetRawTemperature>
 8000fda:	6078      	str	r0, [r7, #4]
	return temp / 10.0;
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff fa11 	bl	8000404 <__aeabi_i2d>
 8000fe2:	f04f 0200 	mov.w	r2, #0
 8000fe6:	4b07      	ldr	r3, [pc, #28]	@ (8001004 <BMP180_GetTemperature+0x34>)
 8000fe8:	f7ff fba0 	bl	800072c <__aeabi_ddiv>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	4610      	mov	r0, r2
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f7ff fd48 	bl	8000a88 <__aeabi_d2f>
 8000ff8:	4603      	mov	r3, r0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40240000 	.word	0x40240000

08001008 <BMP180_GetPressure>:

/**
 * @brief Measures and calculates pressure.
 * @return Pressure in Pascal(Pa).
 */
int32_t BMP180_GetPressure(void) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b08c      	sub	sp, #48	@ 0x30
 800100c:	af00      	add	r7, sp, #0
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_TEMP);
 800100e:	232e      	movs	r3, #46	@ 0x2e
 8001010:	4619      	mov	r1, r3
 8001012:	20f4      	movs	r0, #244	@ 0xf4
 8001014:	f7ff ff58 	bl	8000ec8 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_TEMP);
 8001018:	2305      	movs	r3, #5
 800101a:	4618      	mov	r0, r3
 800101c:	f001 fc5c 	bl	80028d8 <HAL_Delay>
	int32_t ut = BMP180_GetUT();
 8001020:	f000 f902 	bl	8001228 <BMP180_GetUT>
 8001024:	62b8      	str	r0, [r7, #40]	@ 0x28
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_PRES[_bmp180_oss]);
 8001026:	4b7b      	ldr	r3, [pc, #492]	@ (8001214 <BMP180_GetPressure+0x20c>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	461a      	mov	r2, r3
 800102c:	4b7a      	ldr	r3, [pc, #488]	@ (8001218 <BMP180_GetPressure+0x210>)
 800102e:	5c9b      	ldrb	r3, [r3, r2]
 8001030:	4619      	mov	r1, r3
 8001032:	20f4      	movs	r0, #244	@ 0xf4
 8001034:	f7ff ff48 	bl	8000ec8 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_PRES[_bmp180_oss]);
 8001038:	4b76      	ldr	r3, [pc, #472]	@ (8001214 <BMP180_GetPressure+0x20c>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	4b77      	ldr	r3, [pc, #476]	@ (800121c <BMP180_GetPressure+0x214>)
 8001040:	5c9b      	ldrb	r3, [r3, r2]
 8001042:	4618      	mov	r0, r3
 8001044:	f001 fc48 	bl	80028d8 <HAL_Delay>
	int32_t up = BMP180_GetUP();
 8001048:	f000 f8fc 	bl	8001244 <BMP180_GetUP>
 800104c:	6278      	str	r0, [r7, #36]	@ 0x24
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 800104e:	4b74      	ldr	r3, [pc, #464]	@ (8001220 <BMP180_GetPressure+0x218>)
 8001050:	895b      	ldrh	r3, [r3, #10]
 8001052:	461a      	mov	r2, r3
 8001054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001056:	1a9b      	subs	r3, r3, r2
 8001058:	4a71      	ldr	r2, [pc, #452]	@ (8001220 <BMP180_GetPressure+0x218>)
 800105a:	8912      	ldrh	r2, [r2, #8]
 800105c:	fb02 f303 	mul.w	r3, r2, r3
 8001060:	2b00      	cmp	r3, #0
 8001062:	da02      	bge.n	800106a <BMP180_GetPressure+0x62>
 8001064:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8001068:	337f      	adds	r3, #127	@ 0x7f
 800106a:	13db      	asrs	r3, r3, #15
 800106c:	623b      	str	r3, [r7, #32]
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 800106e:	4b6c      	ldr	r3, [pc, #432]	@ (8001220 <BMP180_GetPressure+0x218>)
 8001070:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001074:	02da      	lsls	r2, r3, #11
 8001076:	4b6a      	ldr	r3, [pc, #424]	@ (8001220 <BMP180_GetPressure+0x218>)
 8001078:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800107c:	4619      	mov	r1, r3
 800107e:	6a3b      	ldr	r3, [r7, #32]
 8001080:	440b      	add	r3, r1
 8001082:	fb92 f3f3 	sdiv	r3, r2, r3
 8001086:	61fb      	str	r3, [r7, #28]
	int32_t b5 = x1 + x2;
 8001088:	6a3a      	ldr	r2, [r7, #32]
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	4413      	add	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
	int32_t b6 = b5 - 4000;
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 8001096:	617b      	str	r3, [r7, #20]
	x1 = (_bmp180_eeprom.BMP180_B2 * (b6 * b6 / (1 << 12))) / (1 << 11);
 8001098:	4b61      	ldr	r3, [pc, #388]	@ (8001220 <BMP180_GetPressure+0x218>)
 800109a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800109e:	461a      	mov	r2, r3
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fb03 f303 	mul.w	r3, r3, r3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	da01      	bge.n	80010ae <BMP180_GetPressure+0xa6>
 80010aa:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80010ae:	131b      	asrs	r3, r3, #12
 80010b0:	fb02 f303 	mul.w	r3, r2, r3
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	da01      	bge.n	80010bc <BMP180_GetPressure+0xb4>
 80010b8:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 80010bc:	12db      	asrs	r3, r3, #11
 80010be:	623b      	str	r3, [r7, #32]
	x2 = _bmp180_eeprom.BMP180_AC2 * b6 / (1 << 11);
 80010c0:	4b57      	ldr	r3, [pc, #348]	@ (8001220 <BMP180_GetPressure+0x218>)
 80010c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010c6:	461a      	mov	r2, r3
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	fb02 f303 	mul.w	r3, r2, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	da01      	bge.n	80010d6 <BMP180_GetPressure+0xce>
 80010d2:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 80010d6:	12db      	asrs	r3, r3, #11
 80010d8:	61fb      	str	r3, [r7, #28]
	int32_t x3 = x1 + x2;
 80010da:	6a3a      	ldr	r2, [r7, #32]
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	4413      	add	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
	int32_t b3 = (((_bmp180_eeprom.BMP180_AC1 * 4 + x3) << _bmp180_oss) + 2) / 4;
 80010e2:	4b4f      	ldr	r3, [pc, #316]	@ (8001220 <BMP180_GetPressure+0x218>)
 80010e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e8:	009a      	lsls	r2, r3, #2
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	4413      	add	r3, r2
 80010ee:	4a49      	ldr	r2, [pc, #292]	@ (8001214 <BMP180_GetPressure+0x20c>)
 80010f0:	7812      	ldrb	r2, [r2, #0]
 80010f2:	4093      	lsls	r3, r2
 80010f4:	3302      	adds	r3, #2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	da00      	bge.n	80010fc <BMP180_GetPressure+0xf4>
 80010fa:	3303      	adds	r3, #3
 80010fc:	109b      	asrs	r3, r3, #2
 80010fe:	60fb      	str	r3, [r7, #12]
	x1 = _bmp180_eeprom.BMP180_AC3 * b6 / (1 << 13);
 8001100:	4b47      	ldr	r3, [pc, #284]	@ (8001220 <BMP180_GetPressure+0x218>)
 8001102:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001106:	461a      	mov	r2, r3
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	fb02 f303 	mul.w	r3, r2, r3
 800110e:	2b00      	cmp	r3, #0
 8001110:	da02      	bge.n	8001118 <BMP180_GetPressure+0x110>
 8001112:	f503 53ff 	add.w	r3, r3, #8160	@ 0x1fe0
 8001116:	331f      	adds	r3, #31
 8001118:	135b      	asrs	r3, r3, #13
 800111a:	623b      	str	r3, [r7, #32]
	x2 = (_bmp180_eeprom.BMP180_B1 * (b6 * b6 / (1 << 12))) / (1 << 16);
 800111c:	4b40      	ldr	r3, [pc, #256]	@ (8001220 <BMP180_GetPressure+0x218>)
 800111e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001122:	461a      	mov	r2, r3
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	fb03 f303 	mul.w	r3, r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	da01      	bge.n	8001132 <BMP180_GetPressure+0x12a>
 800112e:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8001132:	131b      	asrs	r3, r3, #12
 8001134:	fb02 f303 	mul.w	r3, r2, r3
 8001138:	2b00      	cmp	r3, #0
 800113a:	da02      	bge.n	8001142 <BMP180_GetPressure+0x13a>
 800113c:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001140:	33ff      	adds	r3, #255	@ 0xff
 8001142:	141b      	asrs	r3, r3, #16
 8001144:	61fb      	str	r3, [r7, #28]
	x3 = ((x1 + x2) + 2) / 4;
 8001146:	6a3a      	ldr	r2, [r7, #32]
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	4413      	add	r3, r2
 800114c:	3302      	adds	r3, #2
 800114e:	2b00      	cmp	r3, #0
 8001150:	da00      	bge.n	8001154 <BMP180_GetPressure+0x14c>
 8001152:	3303      	adds	r3, #3
 8001154:	109b      	asrs	r3, r3, #2
 8001156:	613b      	str	r3, [r7, #16]
	uint32_t b4 = _bmp180_eeprom.BMP180_AC4 * (uint32_t) (x3 + 32768) / (1 << 15);
 8001158:	4b31      	ldr	r3, [pc, #196]	@ (8001220 <BMP180_GetPressure+0x218>)
 800115a:	88db      	ldrh	r3, [r3, #6]
 800115c:	461a      	mov	r2, r3
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001164:	fb02 f303 	mul.w	r3, r2, r3
 8001168:	0bdb      	lsrs	r3, r3, #15
 800116a:	60bb      	str	r3, [r7, #8]
	uint32_t b7 = ((uint32_t) up - b3) * (50000 >> _bmp180_oss);
 800116c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	4a28      	ldr	r2, [pc, #160]	@ (8001214 <BMP180_GetPressure+0x20c>)
 8001174:	7812      	ldrb	r2, [r2, #0]
 8001176:	4611      	mov	r1, r2
 8001178:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800117c:	410a      	asrs	r2, r1
 800117e:	fb02 f303 	mul.w	r3, r2, r3
 8001182:	607b      	str	r3, [r7, #4]
	int32_t p;
	if (b7 < 0x80000000)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	db06      	blt.n	8001198 <BMP180_GetPressure+0x190>
		p = (b7 * 2) / b4;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	005a      	lsls	r2, r3, #1
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	fbb2 f3f3 	udiv	r3, r2, r3
 8001194:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001196:	e005      	b.n	80011a4 <BMP180_GetPressure+0x19c>
	else
		p = (b7 / b4) * 2;
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	x1 = (p / (1 << 8)) * (p / (1 << 8));
 80011a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	da00      	bge.n	80011ac <BMP180_GetPressure+0x1a4>
 80011aa:	33ff      	adds	r3, #255	@ 0xff
 80011ac:	121b      	asrs	r3, r3, #8
 80011ae:	461a      	mov	r2, r3
 80011b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	da00      	bge.n	80011b8 <BMP180_GetPressure+0x1b0>
 80011b6:	33ff      	adds	r3, #255	@ 0xff
 80011b8:	121b      	asrs	r3, r3, #8
 80011ba:	fb02 f303 	mul.w	r3, r2, r3
 80011be:	623b      	str	r3, [r7, #32]
	x1 = (x1 * 3038) / (1 << 16);
 80011c0:	6a3b      	ldr	r3, [r7, #32]
 80011c2:	f640 32de 	movw	r2, #3038	@ 0xbde
 80011c6:	fb02 f303 	mul.w	r3, r2, r3
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	da02      	bge.n	80011d4 <BMP180_GetPressure+0x1cc>
 80011ce:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80011d2:	33ff      	adds	r3, #255	@ 0xff
 80011d4:	141b      	asrs	r3, r3, #16
 80011d6:	623b      	str	r3, [r7, #32]
	x2 = (-7357 * p) / (1 << 16);
 80011d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011da:	4a12      	ldr	r2, [pc, #72]	@ (8001224 <BMP180_GetPressure+0x21c>)
 80011dc:	fb02 f303 	mul.w	r3, r2, r3
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	da02      	bge.n	80011ea <BMP180_GetPressure+0x1e2>
 80011e4:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80011e8:	33ff      	adds	r3, #255	@ 0xff
 80011ea:	141b      	asrs	r3, r3, #16
 80011ec:	61fb      	str	r3, [r7, #28]
	p = p + (x1 + x2 + 3791) / (1 << 4);
 80011ee:	6a3a      	ldr	r2, [r7, #32]
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	4413      	add	r3, r2
 80011f4:	f603 63cf 	addw	r3, r3, #3791	@ 0xecf
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	da00      	bge.n	80011fe <BMP180_GetPressure+0x1f6>
 80011fc:	330f      	adds	r3, #15
 80011fe:	111b      	asrs	r3, r3, #4
 8001200:	461a      	mov	r2, r3
 8001202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001204:	4413      	add	r3, r2
 8001206:	62fb      	str	r3, [r7, #44]	@ 0x2c
	return p;
 8001208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800120a:	4618      	mov	r0, r3
 800120c:	3730      	adds	r7, #48	@ 0x30
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000296 	.word	0x20000296
 8001218:	08008518 	.word	0x08008518
 800121c:	0800851c 	.word	0x0800851c
 8001220:	20000280 	.word	0x20000280
 8001224:	ffffe343 	.word	0xffffe343

08001228 <BMP180_GetUT>:

int32_t BMP180_GetUT(void){
 8001228:	b598      	push	{r3, r4, r7, lr}
 800122a:	af00      	add	r7, sp, #0
	return (BMP180_ReadReg(BMP180_MSB_REG) << 8) | BMP180_ReadReg(BMP180_LSB_REG);
 800122c:	20f6      	movs	r0, #246	@ 0xf6
 800122e:	f7ff fe69 	bl	8000f04 <BMP180_ReadReg>
 8001232:	4603      	mov	r3, r0
 8001234:	021c      	lsls	r4, r3, #8
 8001236:	20f7      	movs	r0, #247	@ 0xf7
 8001238:	f7ff fe64 	bl	8000f04 <BMP180_ReadReg>
 800123c:	4603      	mov	r3, r0
 800123e:	4323      	orrs	r3, r4
}
 8001240:	4618      	mov	r0, r3
 8001242:	bd98      	pop	{r3, r4, r7, pc}

08001244 <BMP180_GetUP>:

int32_t BMP180_GetUP(void){
 8001244:	b598      	push	{r3, r4, r7, lr}
 8001246:	af00      	add	r7, sp, #0
	return ((BMP180_ReadReg(BMP180_MSB_REG) << 16) | (BMP180_ReadReg(BMP180_LSB_REG) << 8) | BMP180_ReadReg(BMP180_XLSB_REG)) >> (8 - _bmp180_oss);
 8001248:	20f6      	movs	r0, #246	@ 0xf6
 800124a:	f7ff fe5b 	bl	8000f04 <BMP180_ReadReg>
 800124e:	4603      	mov	r3, r0
 8001250:	041c      	lsls	r4, r3, #16
 8001252:	20f7      	movs	r0, #247	@ 0xf7
 8001254:	f7ff fe56 	bl	8000f04 <BMP180_ReadReg>
 8001258:	4603      	mov	r3, r0
 800125a:	021b      	lsls	r3, r3, #8
 800125c:	431c      	orrs	r4, r3
 800125e:	20f8      	movs	r0, #248	@ 0xf8
 8001260:	f7ff fe50 	bl	8000f04 <BMP180_ReadReg>
 8001264:	4603      	mov	r3, r0
 8001266:	ea44 0203 	orr.w	r2, r4, r3
 800126a:	4b04      	ldr	r3, [pc, #16]	@ (800127c <BMP180_GetUP+0x38>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	f1c3 0308 	rsb	r3, r3, #8
 8001272:	fa42 f303 	asr.w	r3, r2, r3
}
 8001276:	4618      	mov	r0, r3
 8001278:	bd98      	pop	{r3, r4, r7, pc}
 800127a:	bf00      	nop
 800127c:	20000296 	.word	0x20000296

08001280 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800128a:	4a38      	ldr	r2, [pc, #224]	@ (800136c <HD44780_Init+0xec>)
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8001290:	4b37      	ldr	r3, [pc, #220]	@ (8001370 <HD44780_Init+0xf0>)
 8001292:	2208      	movs	r2, #8
 8001294:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8001296:	4b37      	ldr	r3, [pc, #220]	@ (8001374 <HD44780_Init+0xf4>)
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 800129c:	4b33      	ldr	r3, [pc, #204]	@ (800136c <HD44780_Init+0xec>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d907      	bls.n	80012b4 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 80012a4:	4b33      	ldr	r3, [pc, #204]	@ (8001374 <HD44780_Init+0xf4>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	f043 0308 	orr.w	r3, r3, #8
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	4b31      	ldr	r3, [pc, #196]	@ (8001374 <HD44780_Init+0xf4>)
 80012b0:	701a      	strb	r2, [r3, #0]
 80012b2:	e006      	b.n	80012c2 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 80012b4:	4b2f      	ldr	r3, [pc, #188]	@ (8001374 <HD44780_Init+0xf4>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	f043 0304 	orr.w	r3, r3, #4
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	4b2d      	ldr	r3, [pc, #180]	@ (8001374 <HD44780_Init+0xf4>)
 80012c0:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 80012c2:	f000 f985 	bl	80015d0 <DelayInit>
  HAL_Delay(50);
 80012c6:	2032      	movs	r0, #50	@ 0x32
 80012c8:	f001 fb06 	bl	80028d8 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 80012cc:	4b28      	ldr	r3, [pc, #160]	@ (8001370 <HD44780_Init+0xf0>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f000 f943 	bl	800155c <ExpanderWrite>
  HAL_Delay(1000);
 80012d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012da:	f001 fafd 	bl	80028d8 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80012de:	2030      	movs	r0, #48	@ 0x30
 80012e0:	f000 f92b 	bl	800153a <Write4Bits>
  DelayUS(4500);
 80012e4:	f241 1094 	movw	r0, #4500	@ 0x1194
 80012e8:	f000 f99a 	bl	8001620 <DelayUS>

  Write4Bits(0x03 << 4);
 80012ec:	2030      	movs	r0, #48	@ 0x30
 80012ee:	f000 f924 	bl	800153a <Write4Bits>
  DelayUS(4500);
 80012f2:	f241 1094 	movw	r0, #4500	@ 0x1194
 80012f6:	f000 f993 	bl	8001620 <DelayUS>

  Write4Bits(0x03 << 4);
 80012fa:	2030      	movs	r0, #48	@ 0x30
 80012fc:	f000 f91d 	bl	800153a <Write4Bits>
  DelayUS(4500);
 8001300:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001304:	f000 f98c 	bl	8001620 <DelayUS>

  Write4Bits(0x02 << 4);
 8001308:	2020      	movs	r0, #32
 800130a:	f000 f916 	bl	800153a <Write4Bits>
  DelayUS(100);
 800130e:	2064      	movs	r0, #100	@ 0x64
 8001310:	f000 f986 	bl	8001620 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8001314:	4b17      	ldr	r3, [pc, #92]	@ (8001374 <HD44780_Init+0xf4>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	f043 0320 	orr.w	r3, r3, #32
 800131c:	b2db      	uxtb	r3, r3
 800131e:	4618      	mov	r0, r3
 8001320:	f000 f8ce 	bl	80014c0 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001324:	4b14      	ldr	r3, [pc, #80]	@ (8001378 <HD44780_Init+0xf8>)
 8001326:	2204      	movs	r2, #4
 8001328:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800132a:	f000 f875 	bl	8001418 <HD44780_Display>
  HD44780_Clear();
 800132e:	f000 f82b 	bl	8001388 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001332:	4b12      	ldr	r3, [pc, #72]	@ (800137c <HD44780_Init+0xfc>)
 8001334:	2202      	movs	r2, #2
 8001336:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8001338:	4b10      	ldr	r3, [pc, #64]	@ (800137c <HD44780_Init+0xfc>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	f043 0304 	orr.w	r3, r3, #4
 8001340:	b2db      	uxtb	r3, r3
 8001342:	4618      	mov	r0, r3
 8001344:	f000 f8bc 	bl	80014c0 <SendCommand>
  DelayUS(4500);
 8001348:	f241 1094 	movw	r0, #4500	@ 0x1194
 800134c:	f000 f968 	bl	8001620 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8001350:	490b      	ldr	r1, [pc, #44]	@ (8001380 <HD44780_Init+0x100>)
 8001352:	2000      	movs	r0, #0
 8001354:	f000 f876 	bl	8001444 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8001358:	490a      	ldr	r1, [pc, #40]	@ (8001384 <HD44780_Init+0x104>)
 800135a:	2001      	movs	r0, #1
 800135c:	f000 f872 	bl	8001444 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8001360:	f000 f81d 	bl	800139e <HD44780_Home>
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	2000029a 	.word	0x2000029a
 8001370:	2000029b 	.word	0x2000029b
 8001374:	20000297 	.word	0x20000297
 8001378:	20000298 	.word	0x20000298
 800137c:	20000299 	.word	0x20000299
 8001380:	20000000 	.word	0x20000000
 8001384:	20000008 	.word	0x20000008

08001388 <HD44780_Clear>:

void HD44780_Clear()
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 800138c:	2001      	movs	r0, #1
 800138e:	f000 f897 	bl	80014c0 <SendCommand>
  DelayUS(2000);
 8001392:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001396:	f000 f943 	bl	8001620 <DelayUS>
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}

0800139e <HD44780_Home>:

void HD44780_Home()
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80013a2:	2002      	movs	r0, #2
 80013a4:	f000 f88c 	bl	80014c0 <SendCommand>
  DelayUS(2000);
 80013a8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80013ac:	f000 f938 	bl	8001620 <DelayUS>
}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 80013b4:	b590      	push	{r4, r7, lr}
 80013b6:	b087      	sub	sp, #28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	460a      	mov	r2, r1
 80013be:	71fb      	strb	r3, [r7, #7]
 80013c0:	4613      	mov	r3, r2
 80013c2:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80013c4:	4b12      	ldr	r3, [pc, #72]	@ (8001410 <HD44780_SetCursor+0x5c>)
 80013c6:	f107 0408 	add.w	r4, r7, #8
 80013ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80013d0:	4b10      	ldr	r3, [pc, #64]	@ (8001414 <HD44780_SetCursor+0x60>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	79ba      	ldrb	r2, [r7, #6]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d303      	bcc.n	80013e2 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80013da:	4b0e      	ldr	r3, [pc, #56]	@ (8001414 <HD44780_SetCursor+0x60>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	3b01      	subs	r3, #1
 80013e0:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80013e2:	79bb      	ldrb	r3, [r7, #6]
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	3318      	adds	r3, #24
 80013e8:	443b      	add	r3, r7
 80013ea:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	4413      	add	r3, r2
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	b25b      	sxtb	r3, r3
 80013f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80013fc:	b25b      	sxtb	r3, r3
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	4618      	mov	r0, r3
 8001402:	f000 f85d 	bl	80014c0 <SendCommand>
}
 8001406:	bf00      	nop
 8001408:	371c      	adds	r7, #28
 800140a:	46bd      	mov	sp, r7
 800140c:	bd90      	pop	{r4, r7, pc}
 800140e:	bf00      	nop
 8001410:	080084a0 	.word	0x080084a0
 8001414:	2000029a 	.word	0x2000029a

08001418 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 800141c:	4b08      	ldr	r3, [pc, #32]	@ (8001440 <HD44780_Display+0x28>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	f043 0304 	orr.w	r3, r3, #4
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <HD44780_Display+0x28>)
 8001428:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800142a:	4b05      	ldr	r3, [pc, #20]	@ (8001440 <HD44780_Display+0x28>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	f043 0308 	orr.w	r3, r3, #8
 8001432:	b2db      	uxtb	r3, r3
 8001434:	4618      	mov	r0, r3
 8001436:	f000 f843 	bl	80014c0 <SendCommand>
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000298 	.word	0x20000298

08001444 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	6039      	str	r1, [r7, #0]
 800144e:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	b25b      	sxtb	r3, r3
 800145e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001462:	b25b      	sxtb	r3, r3
 8001464:	b2db      	uxtb	r3, r3
 8001466:	4618      	mov	r0, r3
 8001468:	f000 f82a 	bl	80014c0 <SendCommand>
  for (int i=0; i<8; i++)
 800146c:	2300      	movs	r3, #0
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	e009      	b.n	8001486 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	683a      	ldr	r2, [r7, #0]
 8001476:	4413      	add	r3, r2
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f000 f82e 	bl	80014dc <SendChar>
  for (int i=0; i<8; i++)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	3301      	adds	r3, #1
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2b07      	cmp	r3, #7
 800148a:	ddf2      	ble.n	8001472 <HD44780_CreateSpecialChar+0x2e>
  }
}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800149e:	e006      	b.n	80014ae <HD44780_PrintStr+0x18>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	1c5a      	adds	r2, r3, #1
 80014a4:	607a      	str	r2, [r7, #4]
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f000 f817 	bl	80014dc <SendChar>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1f4      	bne.n	80014a0 <HD44780_PrintStr+0xa>
}
 80014b6:	bf00      	nop
 80014b8:	bf00      	nop
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	2100      	movs	r1, #0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f000 f812 	bl	80014f8 <Send>
}
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <SendChar>:

static void SendChar(uint8_t ch)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	2101      	movs	r1, #1
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 f804 	bl	80014f8 <Send>
}
 80014f0:	bf00      	nop
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	460a      	mov	r2, r1
 8001502:	71fb      	strb	r3, [r7, #7]
 8001504:	4613      	mov	r3, r2
 8001506:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	f023 030f 	bic.w	r3, r3, #15
 800150e:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	011b      	lsls	r3, r3, #4
 8001514:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8001516:	7bfa      	ldrb	r2, [r7, #15]
 8001518:	79bb      	ldrb	r3, [r7, #6]
 800151a:	4313      	orrs	r3, r2
 800151c:	b2db      	uxtb	r3, r3
 800151e:	4618      	mov	r0, r3
 8001520:	f000 f80b 	bl	800153a <Write4Bits>
  Write4Bits((lownib)|mode);
 8001524:	7bba      	ldrb	r2, [r7, #14]
 8001526:	79bb      	ldrb	r3, [r7, #6]
 8001528:	4313      	orrs	r3, r2
 800152a:	b2db      	uxtb	r3, r3
 800152c:	4618      	mov	r0, r3
 800152e:	f000 f804 	bl	800153a <Write4Bits>
}
 8001532:	bf00      	nop
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
 8001540:	4603      	mov	r3, r0
 8001542:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	4618      	mov	r0, r3
 8001548:	f000 f808 	bl	800155c <ExpanderWrite>
  PulseEnable(value);
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	4618      	mov	r0, r3
 8001550:	f000 f820 	bl	8001594 <PulseEnable>
}
 8001554:	bf00      	nop
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af02      	add	r7, sp, #8
 8001562:	4603      	mov	r3, r0
 8001564:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8001566:	4b09      	ldr	r3, [pc, #36]	@ (800158c <ExpanderWrite+0x30>)
 8001568:	781a      	ldrb	r2, [r3, #0]
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	4313      	orrs	r3, r2
 800156e:	b2db      	uxtb	r3, r3
 8001570:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8001572:	f107 020f 	add.w	r2, r7, #15
 8001576:	230a      	movs	r3, #10
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	2301      	movs	r3, #1
 800157c:	214e      	movs	r1, #78	@ 0x4e
 800157e:	4804      	ldr	r0, [pc, #16]	@ (8001590 <ExpanderWrite+0x34>)
 8001580:	f001 fdee 	bl	8003160 <HAL_I2C_Master_Transmit>
}
 8001584:	bf00      	nop
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	2000029b 	.word	0x2000029b
 8001590:	2000029c 	.word	0x2000029c

08001594 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	f043 0304 	orr.w	r3, r3, #4
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff ffd8 	bl	800155c <ExpanderWrite>
  DelayUS(20);
 80015ac:	2014      	movs	r0, #20
 80015ae:	f000 f837 	bl	8001620 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	f023 0304 	bic.w	r3, r3, #4
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff ffce 	bl	800155c <ExpanderWrite>
  DelayUS(20);
 80015c0:	2014      	movs	r0, #20
 80015c2:	f000 f82d 	bl	8001620 <DelayUS>
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <DelayInit>:

static void DelayInit(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80015d4:	4b10      	ldr	r3, [pc, #64]	@ (8001618 <DelayInit+0x48>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	4a0f      	ldr	r2, [pc, #60]	@ (8001618 <DelayInit+0x48>)
 80015da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80015de:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80015e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001618 <DelayInit+0x48>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	4a0c      	ldr	r2, [pc, #48]	@ (8001618 <DelayInit+0x48>)
 80015e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80015ea:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80015ec:	4b0b      	ldr	r3, [pc, #44]	@ (800161c <DelayInit+0x4c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a0a      	ldr	r2, [pc, #40]	@ (800161c <DelayInit+0x4c>)
 80015f2:	f023 0301 	bic.w	r3, r3, #1
 80015f6:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80015f8:	4b08      	ldr	r3, [pc, #32]	@ (800161c <DelayInit+0x4c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a07      	ldr	r2, [pc, #28]	@ (800161c <DelayInit+0x4c>)
 80015fe:	f043 0301 	orr.w	r3, r3, #1
 8001602:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8001604:	4b05      	ldr	r3, [pc, #20]	@ (800161c <DelayInit+0x4c>)
 8001606:	2200      	movs	r2, #0
 8001608:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800160a:	bf00      	nop
  __ASM volatile ("NOP");
 800160c:	bf00      	nop
  __ASM volatile ("NOP");
 800160e:	bf00      	nop
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr
 8001618:	e000edf0 	.word	0xe000edf0
 800161c:	e0001000 	.word	0xe0001000

08001620 <DelayUS>:

static void DelayUS(uint32_t us) {
 8001620:	b480      	push	{r7}
 8001622:	b087      	sub	sp, #28
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8001628:	4b0d      	ldr	r3, [pc, #52]	@ (8001660 <DelayUS+0x40>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a0d      	ldr	r2, [pc, #52]	@ (8001664 <DelayUS+0x44>)
 800162e:	fba2 2303 	umull	r2, r3, r2, r3
 8001632:	0c9a      	lsrs	r2, r3, #18
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	fb02 f303 	mul.w	r3, r2, r3
 800163a:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 800163c:	4b0a      	ldr	r3, [pc, #40]	@ (8001668 <DelayUS+0x48>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8001642:	4b09      	ldr	r3, [pc, #36]	@ (8001668 <DelayUS+0x48>)
 8001644:	685a      	ldr	r2, [r3, #4]
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	429a      	cmp	r2, r3
 8001652:	d8f6      	bhi.n	8001642 <DelayUS+0x22>
}
 8001654:	bf00      	nop
 8001656:	bf00      	nop
 8001658:	371c      	adds	r7, #28
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr
 8001660:	2000008c 	.word	0x2000008c
 8001664:	431bde83 	.word	0x431bde83
 8001668:	e0001000 	.word	0xe0001000

0800166c <parse_data>:
    uint8_t Data[MAX_DATA_SIZE];  // Mảng dữ liệu (Data)
    uint16_t Crc;      // CRC
    uint16_t Stop;     // Stop (carriage return + newline)
    uint16_t Len;      // Chiều dài dữ liệu (Data length)
} DataStruct;
void parse_data(const char *input, DataStruct *data) {
 800166c:	b580      	push	{r7, lr}
 800166e:	b088      	sub	sp, #32
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
    // Xác nhận ký tự Start
    char temp[10] = {0};
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	f107 0310 	add.w	r3, r7, #16
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	809a      	strh	r2, [r3, #4]
//    data->Start = input[0];  // Dấu ':'

    memset(data->Data,0,MAX_DATA_SIZE);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	3303      	adds	r3, #3
 8001688:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800168c:	2100      	movs	r1, #0
 800168e:	4618      	mov	r0, r3
 8001690:	f004 fe2d 	bl	80062ee <memset>
    strncpy(temp, input, 2);
 8001694:	f107 030c 	add.w	r3, r7, #12
 8001698:	2202      	movs	r2, #2
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	4618      	mov	r0, r3
 800169e:	f004 fe2e 	bl	80062fe <strncpy>
    data->Start = (uint8_t)strtol(temp, NULL, 16);
 80016a2:	f107 030c 	add.w	r3, r7, #12
 80016a6:	2210      	movs	r2, #16
 80016a8:	2100      	movs	r1, #0
 80016aa:	4618      	mov	r0, r3
 80016ac:	f004 f87a 	bl	80057a4 <strtol>
 80016b0:	4603      	mov	r3, r0
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	701a      	strb	r2, [r3, #0]

    // Chuyển đổi Addr
    strncpy(temp, input + 2, 2);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	1c99      	adds	r1, r3, #2
 80016bc:	f107 030c 	add.w	r3, r7, #12
 80016c0:	2202      	movs	r2, #2
 80016c2:	4618      	mov	r0, r3
 80016c4:	f004 fe1b 	bl	80062fe <strncpy>
    data->Addr = (uint8_t)strtol(temp, NULL, 16);
 80016c8:	f107 030c 	add.w	r3, r7, #12
 80016cc:	2210      	movs	r2, #16
 80016ce:	2100      	movs	r1, #0
 80016d0:	4618      	mov	r0, r3
 80016d2:	f004 f867 	bl	80057a4 <strtol>
 80016d6:	4603      	mov	r3, r0
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	705a      	strb	r2, [r3, #1]

    // Chuyển đổi Code
    strncpy(temp, input + 4, 2);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	1d19      	adds	r1, r3, #4
 80016e2:	f107 030c 	add.w	r3, r7, #12
 80016e6:	2202      	movs	r2, #2
 80016e8:	4618      	mov	r0, r3
 80016ea:	f004 fe08 	bl	80062fe <strncpy>
    data->Code = (uint8_t)strtol(temp, NULL, 16);
 80016ee:	f107 030c 	add.w	r3, r7, #12
 80016f2:	2210      	movs	r2, #16
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f004 f854 	bl	80057a4 <strtol>
 80016fc:	4603      	mov	r3, r0
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	709a      	strb	r2, [r3, #2]

    // Tách phần Data
    size_t dataIndex = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	61fb      	str	r3, [r7, #28]
    size_t inputIndex = 6; // Vị trí bắt đầu dữ liệu (sau Addr và Code)
 8001708:	2306      	movs	r3, #6
 800170a:	61bb      	str	r3, [r7, #24]
    while (input[inputIndex] != '\r' && input[inputIndex] != '\n' && input[inputIndex] != '\0') {
 800170c:	e01b      	b.n	8001746 <parse_data+0xda>
        strncpy(temp, input + inputIndex, 2);
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	18d1      	adds	r1, r2, r3
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	2202      	movs	r2, #2
 800171a:	4618      	mov	r0, r3
 800171c:	f004 fdef 	bl	80062fe <strncpy>
        data->Data[dataIndex++] = (uint8_t)strtol(temp, NULL, 16);
 8001720:	f107 030c 	add.w	r3, r7, #12
 8001724:	2210      	movs	r2, #16
 8001726:	2100      	movs	r1, #0
 8001728:	4618      	mov	r0, r3
 800172a:	f004 f83b 	bl	80057a4 <strtol>
 800172e:	4601      	mov	r1, r0
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	1c5a      	adds	r2, r3, #1
 8001734:	61fa      	str	r2, [r7, #28]
 8001736:	b2c9      	uxtb	r1, r1
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	4413      	add	r3, r2
 800173c:	460a      	mov	r2, r1
 800173e:	70da      	strb	r2, [r3, #3]
        inputIndex += 2;
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	3302      	adds	r3, #2
 8001744:	61bb      	str	r3, [r7, #24]
    while (input[inputIndex] != '\r' && input[inputIndex] != '\n' && input[inputIndex] != '\0') {
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	4413      	add	r3, r2
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b0d      	cmp	r3, #13
 8001750:	d00b      	beq.n	800176a <parse_data+0xfe>
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	4413      	add	r3, r2
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b0a      	cmp	r3, #10
 800175c:	d005      	beq.n	800176a <parse_data+0xfe>
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	4413      	add	r3, r2
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1d1      	bne.n	800170e <parse_data+0xa2>
    }
    data->Len = dataIndex - 4; // Lưu chiều dài của Data
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	b29b      	uxth	r3, r3
 800176e:	3b04      	subs	r3, #4
 8001770:	b29a      	uxth	r2, r3
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108

    // Chuyển đổi CRC
    strncpy(temp, input + inputIndex - 8, 4);
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	3b08      	subs	r3, #8
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	18d1      	adds	r1, r2, r3
 8001780:	f107 030c 	add.w	r3, r7, #12
 8001784:	2204      	movs	r2, #4
 8001786:	4618      	mov	r0, r3
 8001788:	f004 fdb9 	bl	80062fe <strncpy>
    temp[4] = '\0';
 800178c:	2300      	movs	r3, #0
 800178e:	743b      	strb	r3, [r7, #16]
    data->Crc = (uint16_t)strtol(temp, NULL, 16);
 8001790:	f107 030c 	add.w	r3, r7, #12
 8001794:	2210      	movs	r2, #16
 8001796:	2100      	movs	r1, #0
 8001798:	4618      	mov	r0, r3
 800179a:	f004 f803 	bl	80057a4 <strtol>
 800179e:	4603      	mov	r3, r0
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104

    // Chuyển đổi Stop
    data->Stop = ((uint16_t)input[inputIndex] << 8) | input[inputIndex + 1];
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	4413      	add	r3, r2
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	021b      	lsls	r3, r3, #8
 80017b2:	b21a      	sxth	r2, r3
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	3301      	adds	r3, #1
 80017b8:	6879      	ldr	r1, [r7, #4]
 80017ba:	440b      	add	r3, r1
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	b21b      	sxth	r3, r3
 80017c0:	4313      	orrs	r3, r2
 80017c2:	b21b      	sxth	r3, r3
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
}
 80017cc:	bf00      	nop
 80017ce:	3720      	adds	r7, #32
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <calculate_crc>:

uint16_t calculate_crc(uint8_t *data, size_t length) {
 80017d4:	b480      	push	{r7}
 80017d6:	b087      	sub	sp, #28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
    uint16_t crc = 0xFFFF;  // Giá trị bắt đầu CRC-16 (0xFFFF)
 80017de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017e2:	82fb      	strh	r3, [r7, #22]

    for (size_t i = 0; i < length; i++) {
 80017e4:	2300      	movs	r3, #0
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	e022      	b.n	8001830 <calculate_crc+0x5c>
        crc ^= data[i];  // XOR byte hiện tại với CRC
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	4413      	add	r3, r2
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	461a      	mov	r2, r3
 80017f4:	8afb      	ldrh	r3, [r7, #22]
 80017f6:	4053      	eors	r3, r2
 80017f8:	82fb      	strh	r3, [r7, #22]
        for (uint8_t bit = 0; bit < 8; bit++) {  // Lặp qua từng bit
 80017fa:	2300      	movs	r3, #0
 80017fc:	73fb      	strb	r3, [r7, #15]
 80017fe:	e011      	b.n	8001824 <calculate_crc+0x50>
            if (crc & 0x0001) {  // Nếu bit thấp nhất là 1
 8001800:	8afb      	ldrh	r3, [r7, #22]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	d006      	beq.n	8001818 <calculate_crc+0x44>
                crc = (crc >> 1) ^ 0xA001;  // Dịch sang phải và XOR với 0xA001
 800180a:	8afb      	ldrh	r3, [r7, #22]
 800180c:	085b      	lsrs	r3, r3, #1
 800180e:	b29a      	uxth	r2, r3
 8001810:	4b14      	ldr	r3, [pc, #80]	@ (8001864 <calculate_crc+0x90>)
 8001812:	4053      	eors	r3, r2
 8001814:	82fb      	strh	r3, [r7, #22]
 8001816:	e002      	b.n	800181e <calculate_crc+0x4a>
            } else {
                crc >>= 1;  // Chỉ dịch CRC sang phải nếu bit thấp nhất là 0
 8001818:	8afb      	ldrh	r3, [r7, #22]
 800181a:	085b      	lsrs	r3, r3, #1
 800181c:	82fb      	strh	r3, [r7, #22]
        for (uint8_t bit = 0; bit < 8; bit++) {  // Lặp qua từng bit
 800181e:	7bfb      	ldrb	r3, [r7, #15]
 8001820:	3301      	adds	r3, #1
 8001822:	73fb      	strb	r3, [r7, #15]
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	2b07      	cmp	r3, #7
 8001828:	d9ea      	bls.n	8001800 <calculate_crc+0x2c>
    for (size_t i = 0; i < length; i++) {
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	3301      	adds	r3, #1
 800182e:	613b      	str	r3, [r7, #16]
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	d3d8      	bcc.n	80017ea <calculate_crc+0x16>
            }
        }
    }
    int16_t L = crc&0xFF;
 8001838:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800183c:	b2db      	uxtb	r3, r3
 800183e:	81bb      	strh	r3, [r7, #12]
    int16_t H = (crc>>8)&0xFF;
 8001840:	8afb      	ldrh	r3, [r7, #22]
 8001842:	0a1b      	lsrs	r3, r3, #8
 8001844:	b29b      	uxth	r3, r3
 8001846:	817b      	strh	r3, [r7, #10]
    return (L<<8)|H;  // Trả về CRC tính toán
 8001848:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800184c:	021b      	lsls	r3, r3, #8
 800184e:	b21a      	sxth	r2, r3
 8001850:	897b      	ldrh	r3, [r7, #10]
 8001852:	4313      	orrs	r3, r2
 8001854:	b21b      	sxth	r3, r3
 8001856:	b29b      	uxth	r3, r3
}
 8001858:	4618      	mov	r0, r3
 800185a:	371c      	adds	r7, #28
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	ffffa001 	.word	0xffffa001

08001868 <check_crc>:

uint16_t check_crc(DataStruct *data) {
 8001868:	b580      	push	{r7, lr}
 800186a:	b0c6      	sub	sp, #280	@ 0x118
 800186c:	af00      	add	r7, sp, #0
 800186e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001872:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001876:	6018      	str	r0, [r3, #0]
    // Tạo mảng chứa dữ liệu cần tính CRC
    uint8_t temp_data[MAX_DATA_SIZE + 3];  // Start, Addr, Code, Data (tối đa)

    // Sao chép các thành phần dữ liệu vào mảng tạm
    size_t index = 0;
 8001878:	2300      	movs	r3, #0
 800187a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    temp_data[index++] = data->Start;  // Start
 800187e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001882:	1c5a      	adds	r2, r3, #1
 8001884:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 8001888:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800188c:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8001890:	6812      	ldr	r2, [r2, #0]
 8001892:	7811      	ldrb	r1, [r2, #0]
 8001894:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8001898:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800189c:	54d1      	strb	r1, [r2, r3]
    temp_data[index++] = data->Addr;   // Addr
 800189e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80018a2:	1c5a      	adds	r2, r3, #1
 80018a4:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 80018a8:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80018ac:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 80018b0:	6812      	ldr	r2, [r2, #0]
 80018b2:	7851      	ldrb	r1, [r2, #1]
 80018b4:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80018b8:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80018bc:	54d1      	strb	r1, [r2, r3]
    temp_data[index++] = data->Code;   // Code
 80018be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80018c2:	1c5a      	adds	r2, r3, #1
 80018c4:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 80018c8:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80018cc:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 80018d0:	6812      	ldr	r2, [r2, #0]
 80018d2:	7891      	ldrb	r1, [r2, #2]
 80018d4:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80018d8:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80018dc:	54d1      	strb	r1, [r2, r3]

    // Sao chép dữ liệu vào mảng
    memcpy(&temp_data[index], data->Data, data->Len);
 80018de:	f107 020c 	add.w	r2, r7, #12
 80018e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80018e6:	18d0      	adds	r0, r2, r3
 80018e8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80018ec:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	1cd9      	adds	r1, r3, #3
 80018f4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80018f8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8001902:	461a      	mov	r2, r3
 8001904:	f004 fd93 	bl	800642e <memcpy>

    // Tính toán CRC cho dữ liệu
    uint16_t calculated_crc = calculate_crc(temp_data, index + data->Len);
 8001908:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800190c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8001916:	461a      	mov	r2, r3
 8001918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800191c:	441a      	add	r2, r3
 800191e:	f107 030c 	add.w	r3, r7, #12
 8001922:	4611      	mov	r1, r2
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ff55 	bl	80017d4 <calculate_crc>
 800192a:	4603      	mov	r3, r0
 800192c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112

    // So sánh CRC tính toán với CRC đã cho
    if (calculated_crc == data->Crc) {
 8001930:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001934:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 800193e:	f8b7 2112 	ldrh.w	r2, [r7, #274]	@ 0x112
 8001942:	429a      	cmp	r2, r3
 8001944:	d102      	bne.n	800194c <check_crc+0xe4>
        return calculated_crc;  // CRC hợp lệ
 8001946:	f8b7 3112 	ldrh.w	r3, [r7, #274]	@ 0x112
 800194a:	e001      	b.n	8001950 <check_crc+0xe8>
    } else {
        return calculated_crc;  // CRC không hợp lệ
 800194c:	f8b7 3112 	ldrh.w	r3, [r7, #274]	@ 0x112
    }
}
 8001950:	4618      	mov	r0, r3
 8001952:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
	...

0800195c <data_struct_to_string>:
    output[len * 2] = '\0'; // Kết thúc chuỗi
    return len * 2;
}


void data_struct_to_string(DataStruct* data, char* output) {
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af02      	add	r7, sp, #8
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
    // Bắt đầu chuỗi với ký tự Start
    sprintf(output, "%02X%02X%02X", data->Start, data->Addr, data->Code);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	461a      	mov	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	785b      	ldrb	r3, [r3, #1]
 8001970:	4619      	mov	r1, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	789b      	ldrb	r3, [r3, #2]
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	460b      	mov	r3, r1
 800197a:	491f      	ldr	r1, [pc, #124]	@ (80019f8 <data_struct_to_string+0x9c>)
 800197c:	6838      	ldr	r0, [r7, #0]
 800197e:	f004 fc39 	bl	80061f4 <siprintf>

    // Thêm Addr và Code vào chuỗi
//    sprintf(output + strlen(output), "");

    // Thêm Data vào chuỗi
    for (int i = 0; i < data->Len; i++) {
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	e011      	b.n	80019ac <data_struct_to_string+0x50>
        sprintf(output + strlen(output), "%02X", data->Data[i]);
 8001988:	6838      	ldr	r0, [r7, #0]
 800198a:	f7fe fbe1 	bl	8000150 <strlen>
 800198e:	4602      	mov	r2, r0
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	1898      	adds	r0, r3, r2
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	4413      	add	r3, r2
 800199a:	3303      	adds	r3, #3
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	461a      	mov	r2, r3
 80019a0:	4916      	ldr	r1, [pc, #88]	@ (80019fc <data_struct_to_string+0xa0>)
 80019a2:	f004 fc27 	bl	80061f4 <siprintf>
    for (int i = 0; i < data->Len; i++) {
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	3301      	adds	r3, #1
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 80019b2:	461a      	mov	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	4293      	cmp	r3, r2
 80019b8:	dbe6      	blt.n	8001988 <data_struct_to_string+0x2c>
    }

    // Thêm CRC vào chuỗi
    sprintf(output + strlen(output), "%04X", data->Crc);
 80019ba:	6838      	ldr	r0, [r7, #0]
 80019bc:	f7fe fbc8 	bl	8000150 <strlen>
 80019c0:	4602      	mov	r2, r0
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	1898      	adds	r0, r3, r2
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 80019cc:	461a      	mov	r2, r3
 80019ce:	490c      	ldr	r1, [pc, #48]	@ (8001a00 <data_struct_to_string+0xa4>)
 80019d0:	f004 fc10 	bl	80061f4 <siprintf>

    // Thêm Stop (\r\n) vào chuỗi
    sprintf(output + strlen(output), "%04X",data->Stop);
 80019d4:	6838      	ldr	r0, [r7, #0]
 80019d6:	f7fe fbbb 	bl	8000150 <strlen>
 80019da:	4602      	mov	r2, r0
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	1898      	adds	r0, r3, r2
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 80019e6:	461a      	mov	r2, r3
 80019e8:	4905      	ldr	r1, [pc, #20]	@ (8001a00 <data_struct_to_string+0xa4>)
 80019ea:	f004 fc03 	bl	80061f4 <siprintf>
}
 80019ee:	bf00      	nop
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	080084b8 	.word	0x080084b8
 80019fc:	080084b0 	.word	0x080084b0
 8001a00:	080084c8 	.word	0x080084c8

08001a04 <convert_to_char>:
    }

    return position;
}

char convert_to_char(uint16_t num) {
 8001a04:	b480      	push	{r7}
 8001a06:	b087      	sub	sp, #28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	80fb      	strh	r3, [r7, #6]
    unsigned int count = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
    int position = -1;
 8001a12:	f04f 33ff 	mov.w	r3, #4294967295
 8001a16:	613b      	str	r3, [r7, #16]

    // Kiểm tra từng bit trong số 12 bit
    for (int i = 0; i < 12; i++) {
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	e010      	b.n	8001a40 <convert_to_char+0x3c>
        if (num & ArrConv[i]) { // Nếu bit này là 1
 8001a1e:	4a11      	ldr	r2, [pc, #68]	@ (8001a64 <convert_to_char+0x60>)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001a26:	88fb      	ldrh	r3, [r7, #6]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d004      	beq.n	8001a3a <convert_to_char+0x36>
            count++;
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	3301      	adds	r3, #1
 8001a34:	617b      	str	r3, [r7, #20]
            position = i;  // Lưu lại vị trí của bit
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < 12; i++) {
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2b0b      	cmp	r3, #11
 8001a44:	ddeb      	ble.n	8001a1e <convert_to_char+0x1a>
        }
    }

    // Nếu có nhiều hơn 1 bit bằng 1, trả về '\0'
    if (count != 1) {
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d001      	beq.n	8001a50 <convert_to_char+0x4c>
        return '\0';
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	e003      	b.n	8001a58 <convert_to_char+0x54>
    }

    // Nếu chỉ có 1 bit 1, trả về ký tự tương ứng
    return ArrChar[position];
 8001a50:	4a05      	ldr	r2, [pc, #20]	@ (8001a68 <convert_to_char+0x64>)
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	4413      	add	r3, r2
 8001a56:	781b      	ldrb	r3, [r3, #0]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	371c      	adds	r7, #28
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	20000010 	.word	0x20000010
 8001a68:	20000028 	.word	0x20000028

08001a6c <gen_data_send_rs485>:

char* gen_data_send_rs485(uint8_t code, char data[])
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b0c6      	sub	sp, #280	@ 0x118
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4602      	mov	r2, r0
 8001a74:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001a78:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001a7c:	6019      	str	r1, [r3, #0]
 8001a7e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001a82:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8001a86:	701a      	strb	r2, [r3, #0]
	DataStruct result;
	memset((void*)&result,0,sizeof(result));
 8001a88:	f107 030c 	add.w	r3, r7, #12
 8001a8c:	f44f 7285 	mov.w	r2, #266	@ 0x10a
 8001a90:	2100      	movs	r1, #0
 8001a92:	4618      	mov	r0, r3
 8001a94:	f004 fc2b 	bl	80062ee <memset>
	result.Start = 0x3A;
 8001a98:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001a9c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001aa0:	223a      	movs	r2, #58	@ 0x3a
 8001aa2:	701a      	strb	r2, [r3, #0]
	result.Addr = MY_ADDRESS;
 8001aa4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001aa8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001aac:	226f      	movs	r2, #111	@ 0x6f
 8001aae:	705a      	strb	r2, [r3, #1]
	result.Code = code;
 8001ab0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ab4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001ab8:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8001abc:	f2a2 1211 	subw	r2, r2, #273	@ 0x111
 8001ac0:	7812      	ldrb	r2, [r2, #0]
 8001ac2:	709a      	strb	r2, [r3, #2]
	result.Len = strlen(data);
 8001ac4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ac8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001acc:	6818      	ldr	r0, [r3, #0]
 8001ace:	f7fe fb3f 	bl	8000150 <strlen>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ada:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001ade:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
	memcpy((void*)result.Data, (void*)data, strlen(data)+1);
 8001ae2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ae6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001aea:	6818      	ldr	r0, [r3, #0]
 8001aec:	f7fe fb30 	bl	8000150 <strlen>
 8001af0:	4603      	mov	r3, r0
 8001af2:	1c59      	adds	r1, r3, #1
 8001af4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001af8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001afc:	f107 020c 	add.w	r2, r7, #12
 8001b00:	1cd0      	adds	r0, r2, #3
 8001b02:	460a      	mov	r2, r1
 8001b04:	6819      	ldr	r1, [r3, #0]
 8001b06:	f004 fc92 	bl	800642e <memcpy>
	result.Crc = check_crc(&result);
 8001b0a:	f107 030c 	add.w	r3, r7, #12
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff feaa 	bl	8001868 <check_crc>
 8001b14:	4603      	mov	r3, r0
 8001b16:	461a      	mov	r2, r3
 8001b18:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b1c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b20:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
	result.Stop = 0x0D0A;
 8001b24:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b28:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b2c:	f640 520a 	movw	r2, #3338	@ 0xd0a
 8001b30:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
	data_struct_to_string(&result,data);
 8001b34:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b38:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001b3c:	f107 020c 	add.w	r2, r7, #12
 8001b40:	6819      	ldr	r1, [r3, #0]
 8001b42:	4610      	mov	r0, r2
 8001b44:	f7ff ff0a 	bl	800195c <data_struct_to_string>
	return data;
 8001b48:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b4c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001b50:	681b      	ldr	r3, [r3, #0]
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <TaskMPR121>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void TaskMPR121()
{
 8001b5c:	b590      	push	{r4, r7, lr}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
	  new_touch = touched();
 8001b62:	f7ff f8bf 	bl	8000ce4 <touched>
 8001b66:	4603      	mov	r3, r0
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4b56      	ldr	r3, [pc, #344]	@ (8001cc4 <TaskMPR121+0x168>)
 8001b6c:	801a      	strh	r2, [r3, #0]
	  if(new_touch != last_touch)
 8001b6e:	4b55      	ldr	r3, [pc, #340]	@ (8001cc4 <TaskMPR121+0x168>)
 8001b70:	881a      	ldrh	r2, [r3, #0]
 8001b72:	4b55      	ldr	r3, [pc, #340]	@ (8001cc8 <TaskMPR121+0x16c>)
 8001b74:	881b      	ldrh	r3, [r3, #0]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	f000 809b 	beq.w	8001cb2 <TaskMPR121+0x156>
	  {
		  if(new_touch == 0)
 8001b7c:	4b51      	ldr	r3, [pc, #324]	@ (8001cc4 <TaskMPR121+0x168>)
 8001b7e:	881b      	ldrh	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f040 8096 	bne.w	8001cb2 <TaskMPR121+0x156>
		  {
			  char C = convert_to_char(last_touch);
 8001b86:	4b50      	ldr	r3, [pc, #320]	@ (8001cc8 <TaskMPR121+0x16c>)
 8001b88:	881b      	ldrh	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff ff3a 	bl	8001a04 <convert_to_char>
 8001b90:	4603      	mov	r3, r0
 8001b92:	71fb      	strb	r3, [r7, #7]
			  if(C != '\0' && C != '*' && C != '#')
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d02c      	beq.n	8001bf4 <TaskMPR121+0x98>
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b9e:	d029      	beq.n	8001bf4 <TaskMPR121+0x98>
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	2b23      	cmp	r3, #35	@ 0x23
 8001ba4:	d026      	beq.n	8001bf4 <TaskMPR121+0x98>
			  {
				  if(len_key_board < 16)
 8001ba6:	4b49      	ldr	r3, [pc, #292]	@ (8001ccc <TaskMPR121+0x170>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	2b0f      	cmp	r3, #15
 8001bac:	d810      	bhi.n	8001bd0 <TaskMPR121+0x74>
				  {
					  key_board[len_key_board++] = C;
 8001bae:	4b47      	ldr	r3, [pc, #284]	@ (8001ccc <TaskMPR121+0x170>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	1c5a      	adds	r2, r3, #1
 8001bb4:	b2d1      	uxtb	r1, r2
 8001bb6:	4a45      	ldr	r2, [pc, #276]	@ (8001ccc <TaskMPR121+0x170>)
 8001bb8:	7011      	strb	r1, [r2, #0]
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4a44      	ldr	r2, [pc, #272]	@ (8001cd0 <TaskMPR121+0x174>)
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	5453      	strb	r3, [r2, r1]
					  key_board[len_key_board] = '\0';
 8001bc2:	4b42      	ldr	r3, [pc, #264]	@ (8001ccc <TaskMPR121+0x170>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	4b41      	ldr	r3, [pc, #260]	@ (8001cd0 <TaskMPR121+0x174>)
 8001bca:	2100      	movs	r1, #0
 8001bcc:	5499      	strb	r1, [r3, r2]
				  if(len_key_board < 16)
 8001bce:	e058      	b.n	8001c82 <TaskMPR121+0x126>
				  }
				  else
				  {
					  memmove(key_board,&key_board[1],sizeof(key_board) - 1);
 8001bd0:	2213      	movs	r2, #19
 8001bd2:	4940      	ldr	r1, [pc, #256]	@ (8001cd4 <TaskMPR121+0x178>)
 8001bd4:	483e      	ldr	r0, [pc, #248]	@ (8001cd0 <TaskMPR121+0x174>)
 8001bd6:	f004 fb70 	bl	80062ba <memmove>
					  key_board[len_key_board - 1] = C;
 8001bda:	4b3c      	ldr	r3, [pc, #240]	@ (8001ccc <TaskMPR121+0x170>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	493b      	ldr	r1, [pc, #236]	@ (8001cd0 <TaskMPR121+0x174>)
 8001be2:	79fa      	ldrb	r2, [r7, #7]
 8001be4:	54ca      	strb	r2, [r1, r3]
					  key_board[len_key_board] = '\0';
 8001be6:	4b39      	ldr	r3, [pc, #228]	@ (8001ccc <TaskMPR121+0x170>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	461a      	mov	r2, r3
 8001bec:	4b38      	ldr	r3, [pc, #224]	@ (8001cd0 <TaskMPR121+0x174>)
 8001bee:	2100      	movs	r1, #0
 8001bf0:	5499      	strb	r1, [r3, r2]
				  if(len_key_board < 16)
 8001bf2:	e046      	b.n	8001c82 <TaskMPR121+0x126>
				  }
			  }
			  else if(C == '#' && len_key_board > 0)
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	2b23      	cmp	r3, #35	@ 0x23
 8001bf8:	d124      	bne.n	8001c44 <TaskMPR121+0xe8>
 8001bfa:	4b34      	ldr	r3, [pc, #208]	@ (8001ccc <TaskMPR121+0x170>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d020      	beq.n	8001c44 <TaskMPR121+0xe8>
			  {
				  memset((void*)print_lcd_row2, 0, sizeof(print_lcd_row2));
 8001c02:	221e      	movs	r2, #30
 8001c04:	2100      	movs	r1, #0
 8001c06:	4834      	ldr	r0, [pc, #208]	@ (8001cd8 <TaskMPR121+0x17c>)
 8001c08:	f004 fb71 	bl	80062ee <memset>
				  memcpy((void*)print_lcd_row2, (void*)indicate_1, sizeof(indicate_1));
 8001c0c:	4a32      	ldr	r2, [pc, #200]	@ (8001cd8 <TaskMPR121+0x17c>)
 8001c0e:	4b33      	ldr	r3, [pc, #204]	@ (8001cdc <TaskMPR121+0x180>)
 8001c10:	4614      	mov	r4, r2
 8001c12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c14:	c407      	stmia	r4!, {r0, r1, r2}
 8001c16:	8023      	strh	r3, [r4, #0]
				  memcpy((void*)send_to_rs485, (void*)key_board, strlen(key_board));
 8001c18:	482d      	ldr	r0, [pc, #180]	@ (8001cd0 <TaskMPR121+0x174>)
 8001c1a:	f7fe fa99 	bl	8000150 <strlen>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	461a      	mov	r2, r3
 8001c22:	492b      	ldr	r1, [pc, #172]	@ (8001cd0 <TaskMPR121+0x174>)
 8001c24:	482e      	ldr	r0, [pc, #184]	@ (8001ce0 <TaskMPR121+0x184>)
 8001c26:	f004 fc02 	bl	800642e <memcpy>
				  gen_data_send_rs485(UPGRADE(CODE_KEY),send_to_rs485);
 8001c2a:	492d      	ldr	r1, [pc, #180]	@ (8001ce0 <TaskMPR121+0x184>)
 8001c2c:	2082      	movs	r0, #130	@ 0x82
 8001c2e:	f7ff ff1d 	bl	8001a6c <gen_data_send_rs485>
				  memset((void*)key_board, 0, sizeof(key_board));
 8001c32:	2214      	movs	r2, #20
 8001c34:	2100      	movs	r1, #0
 8001c36:	4826      	ldr	r0, [pc, #152]	@ (8001cd0 <TaskMPR121+0x174>)
 8001c38:	f004 fb59 	bl	80062ee <memset>
				  len_key_board = 0;
 8001c3c:	4b23      	ldr	r3, [pc, #140]	@ (8001ccc <TaskMPR121+0x170>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	701a      	strb	r2, [r3, #0]
 8001c42:	e01e      	b.n	8001c82 <TaskMPR121+0x126>
			  }
			  else if(C == '*' && len_key_board > 0)
 8001c44:	79fb      	ldrb	r3, [r7, #7]
 8001c46:	2b2a      	cmp	r3, #42	@ 0x2a
 8001c48:	d11b      	bne.n	8001c82 <TaskMPR121+0x126>
 8001c4a:	4b20      	ldr	r3, [pc, #128]	@ (8001ccc <TaskMPR121+0x170>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d017      	beq.n	8001c82 <TaskMPR121+0x126>
			  {
				  memset((void*)print_lcd_row2, 0, sizeof(print_lcd_row2));
 8001c52:	221e      	movs	r2, #30
 8001c54:	2100      	movs	r1, #0
 8001c56:	4820      	ldr	r0, [pc, #128]	@ (8001cd8 <TaskMPR121+0x17c>)
 8001c58:	f004 fb49 	bl	80062ee <memset>
				  key_board[--len_key_board] = '\0';
 8001c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001ccc <TaskMPR121+0x170>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	3b01      	subs	r3, #1
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	4b19      	ldr	r3, [pc, #100]	@ (8001ccc <TaskMPR121+0x170>)
 8001c66:	701a      	strb	r2, [r3, #0]
 8001c68:	4b18      	ldr	r3, [pc, #96]	@ (8001ccc <TaskMPR121+0x170>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4b18      	ldr	r3, [pc, #96]	@ (8001cd0 <TaskMPR121+0x174>)
 8001c70:	2100      	movs	r1, #0
 8001c72:	5499      	strb	r1, [r3, r2]
				  memcpy((void*)print_lcd_row2, (void*)key_board, len_key_board);
 8001c74:	4b15      	ldr	r3, [pc, #84]	@ (8001ccc <TaskMPR121+0x170>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	4915      	ldr	r1, [pc, #84]	@ (8001cd0 <TaskMPR121+0x174>)
 8001c7c:	4816      	ldr	r0, [pc, #88]	@ (8001cd8 <TaskMPR121+0x17c>)
 8001c7e:	f004 fbd6 	bl	800642e <memcpy>
			  }
			  if(C != '\0' && len_key_board > 0 && C != '#')
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d014      	beq.n	8001cb2 <TaskMPR121+0x156>
 8001c88:	4b10      	ldr	r3, [pc, #64]	@ (8001ccc <TaskMPR121+0x170>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d010      	beq.n	8001cb2 <TaskMPR121+0x156>
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	2b23      	cmp	r3, #35	@ 0x23
 8001c94:	d00d      	beq.n	8001cb2 <TaskMPR121+0x156>
			  {
				  memset((void*)print_lcd_row2, 0, sizeof(print_lcd_row2));
 8001c96:	221e      	movs	r2, #30
 8001c98:	2100      	movs	r1, #0
 8001c9a:	480f      	ldr	r0, [pc, #60]	@ (8001cd8 <TaskMPR121+0x17c>)
 8001c9c:	f004 fb27 	bl	80062ee <memset>
				  memcpy((void*)print_lcd_row2, (void*)key_board, strlen(key_board));
 8001ca0:	480b      	ldr	r0, [pc, #44]	@ (8001cd0 <TaskMPR121+0x174>)
 8001ca2:	f7fe fa55 	bl	8000150 <strlen>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4909      	ldr	r1, [pc, #36]	@ (8001cd0 <TaskMPR121+0x174>)
 8001cac:	480a      	ldr	r0, [pc, #40]	@ (8001cd8 <TaskMPR121+0x17c>)
 8001cae:	f004 fbbe 	bl	800642e <memcpy>
			  }
		  }
	  }
	  last_touch = new_touch;
 8001cb2:	4b04      	ldr	r3, [pc, #16]	@ (8001cc4 <TaskMPR121+0x168>)
 8001cb4:	881a      	ldrh	r2, [r3, #0]
 8001cb6:	4b04      	ldr	r3, [pc, #16]	@ (8001cc8 <TaskMPR121+0x16c>)
 8001cb8:	801a      	strh	r2, [r3, #0]
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd90      	pop	{r4, r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000400 	.word	0x20000400
 8001cc8:	200003fe 	.word	0x200003fe
 8001ccc:	200003fc 	.word	0x200003fc
 8001cd0:	200003e0 	.word	0x200003e0
 8001cd4:	200003e1 	.word	0x200003e1
 8001cd8:	20000358 	.word	0x20000358
 8001cdc:	20000034 	.word	0x20000034
 8001ce0:	20000378 	.word	0x20000378

08001ce4 <TaskTempBMP180>:

void TaskTempBMP180()
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
	temperature = BMP180_GetTemperature();
 8001ce8:	f7ff f972 	bl	8000fd0 <BMP180_GetTemperature>
 8001cec:	4603      	mov	r3, r0
 8001cee:	4a02      	ldr	r2, [pc, #8]	@ (8001cf8 <TaskTempBMP180+0x14>)
 8001cf0:	6013      	str	r3, [r2, #0]
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	200003f4 	.word	0x200003f4

08001cfc <TaskPressBMP180>:

void TaskPressBMP180()
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
	pressure = BMP180_GetPressure();
 8001d00:	f7ff f982 	bl	8001008 <BMP180_GetPressure>
 8001d04:	4603      	mov	r3, r0
 8001d06:	4a02      	ldr	r2, [pc, #8]	@ (8001d10 <TaskPressBMP180+0x14>)
 8001d08:	6013      	str	r3, [r2, #0]
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	200003f8 	.word	0x200003f8

08001d14 <TaskLCD>:

void TaskLCD()
{
 8001d14:	b590      	push	{r4, r7, lr}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af02      	add	r7, sp, #8
	if(strlen(print_lcd_row1) > 0)
 8001d1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001d94 <TaskLCD+0x80>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00c      	beq.n	8001d3c <TaskLCD+0x28>
	{
		  HD44780_SetCursor(0,0);
 8001d22:	2100      	movs	r1, #0
 8001d24:	2000      	movs	r0, #0
 8001d26:	f7ff fb45 	bl	80013b4 <HD44780_SetCursor>
		  HD44780_PrintStr(print_lcd_row1);
 8001d2a:	481a      	ldr	r0, [pc, #104]	@ (8001d94 <TaskLCD+0x80>)
 8001d2c:	f7ff fbb3 	bl	8001496 <HD44780_PrintStr>
		  memset((void*)print_lcd_row1, 0, sizeof(print_lcd_row1));
 8001d30:	221e      	movs	r2, #30
 8001d32:	2100      	movs	r1, #0
 8001d34:	4817      	ldr	r0, [pc, #92]	@ (8001d94 <TaskLCD+0x80>)
 8001d36:	f004 fada 	bl	80062ee <memset>
 8001d3a:	e01b      	b.n	8001d74 <TaskLCD+0x60>
	}
	else
	{
		HD44780_Clear();
 8001d3c:	f7ff fb24 	bl	8001388 <HD44780_Clear>
		sprintf(print_lcd_row1, "%0.1f\t %dKPa %d", temperature, (int)pressure/1000, (int)count_touch);
 8001d40:	4b15      	ldr	r3, [pc, #84]	@ (8001d98 <TaskLCD+0x84>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe fb6f 	bl	8000428 <__aeabi_f2d>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	4913      	ldr	r1, [pc, #76]	@ (8001d9c <TaskLCD+0x88>)
 8001d50:	6809      	ldr	r1, [r1, #0]
 8001d52:	4813      	ldr	r0, [pc, #76]	@ (8001da0 <TaskLCD+0x8c>)
 8001d54:	fb80 4001 	smull	r4, r0, r0, r1
 8001d58:	1180      	asrs	r0, r0, #6
 8001d5a:	17c9      	asrs	r1, r1, #31
 8001d5c:	1a41      	subs	r1, r0, r1
 8001d5e:	4811      	ldr	r0, [pc, #68]	@ (8001da4 <TaskLCD+0x90>)
 8001d60:	8800      	ldrh	r0, [r0, #0]
 8001d62:	9001      	str	r0, [sp, #4]
 8001d64:	9100      	str	r1, [sp, #0]
 8001d66:	4910      	ldr	r1, [pc, #64]	@ (8001da8 <TaskLCD+0x94>)
 8001d68:	480a      	ldr	r0, [pc, #40]	@ (8001d94 <TaskLCD+0x80>)
 8001d6a:	f004 fa43 	bl	80061f4 <siprintf>
		HD44780_PrintStr(print_lcd_row1);
 8001d6e:	4809      	ldr	r0, [pc, #36]	@ (8001d94 <TaskLCD+0x80>)
 8001d70:	f7ff fb91 	bl	8001496 <HD44780_PrintStr>
	}
	if(strlen(print_lcd_row2) > 0)
 8001d74:	4b0d      	ldr	r3, [pc, #52]	@ (8001dac <TaskLCD+0x98>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d006      	beq.n	8001d8a <TaskLCD+0x76>
	{
		  HD44780_SetCursor(0,1);
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	2000      	movs	r0, #0
 8001d80:	f7ff fb18 	bl	80013b4 <HD44780_SetCursor>
		  HD44780_PrintStr(print_lcd_row2);
 8001d84:	4809      	ldr	r0, [pc, #36]	@ (8001dac <TaskLCD+0x98>)
 8001d86:	f7ff fb86 	bl	8001496 <HD44780_PrintStr>
	}
}
 8001d8a:	bf00      	nop
 8001d8c:	3704      	adds	r7, #4
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd90      	pop	{r4, r7, pc}
 8001d92:	bf00      	nop
 8001d94:	20000338 	.word	0x20000338
 8001d98:	200003f4 	.word	0x200003f4
 8001d9c:	200003f8 	.word	0x200003f8
 8001da0:	10624dd3 	.word	0x10624dd3
 8001da4:	20000402 	.word	0x20000402
 8001da8:	080084d0 	.word	0x080084d0
 8001dac:	20000358 	.word	0x20000358

08001db0 <TaskRX>:

void TaskRX()
{
 8001db0:	b5b0      	push	{r4, r5, r7, lr}
 8001db2:	b0c4      	sub	sp, #272	@ 0x110
 8001db4:	af00      	add	r7, sp, #0
	memset((void*)read_to_rs485,0,sizeof(read_to_rs485));
 8001db6:	2232      	movs	r2, #50	@ 0x32
 8001db8:	2100      	movs	r1, #0
 8001dba:	48a0      	ldr	r0, [pc, #640]	@ (800203c <TaskRX+0x28c>)
 8001dbc:	f004 fa97 	bl	80062ee <memset>
	HAL_UART_Receive(&huart1, (uint8_t *)&read_to_rs485, sizeof (read_to_rs485) , 1000);
 8001dc0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dc4:	2232      	movs	r2, #50	@ 0x32
 8001dc6:	499d      	ldr	r1, [pc, #628]	@ (800203c <TaskRX+0x28c>)
 8001dc8:	489d      	ldr	r0, [pc, #628]	@ (8002040 <TaskRX+0x290>)
 8001dca:	f003 fa90 	bl	80052ee <HAL_UART_Receive>
	  if(strlen(read_to_rs485) > 1)
 8001dce:	489b      	ldr	r0, [pc, #620]	@ (800203c <TaskRX+0x28c>)
 8001dd0:	f7fe f9be 	bl	8000150 <strlen>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	f240 812b 	bls.w	8002032 <TaskRX+0x282>
	  {
		  DataStruct result;
		  parse_data(read_to_rs485,&result);
 8001ddc:	1d3b      	adds	r3, r7, #4
 8001dde:	4619      	mov	r1, r3
 8001de0:	4896      	ldr	r0, [pc, #600]	@ (800203c <TaskRX+0x28c>)
 8001de2:	f7ff fc43 	bl	800166c <parse_data>
		  if(result.Addr == MY_ADDRESS && check_crc(&result) == result.Crc)
 8001de6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001dea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001dee:	785b      	ldrb	r3, [r3, #1]
 8001df0:	2b6f      	cmp	r3, #111	@ 0x6f
 8001df2:	f040 80e9 	bne.w	8001fc8 <TaskRX+0x218>
 8001df6:	1d3b      	adds	r3, r7, #4
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff fd35 	bl	8001868 <check_crc>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	461a      	mov	r2, r3
 8001e02:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e06:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e0a:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	f040 80da 	bne.w	8001fc8 <TaskRX+0x218>
		  {
			  if(result.Code == 1)
 8001e14:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e18:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e1c:	789b      	ldrb	r3, [r3, #2]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d171      	bne.n	8001f06 <TaskRX+0x156>
			  {
				  if(result.Data[0] == '1')
 8001e22:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e26:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e2a:	78db      	ldrb	r3, [r3, #3]
 8001e2c:	2b31      	cmp	r3, #49	@ 0x31
 8001e2e:	d121      	bne.n	8001e74 <TaskRX+0xc4>
				  {
					  memset((void*)send_to_rs485,0,sizeof(send_to_rs485));
 8001e30:	2232      	movs	r2, #50	@ 0x32
 8001e32:	2100      	movs	r1, #0
 8001e34:	4883      	ldr	r0, [pc, #524]	@ (8002044 <TaskRX+0x294>)
 8001e36:	f004 fa5a 	bl	80062ee <memset>
					  sprintf(send_to_rs485, "%.1fC", temperature);
 8001e3a:	4b83      	ldr	r3, [pc, #524]	@ (8002048 <TaskRX+0x298>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7fe faf2 	bl	8000428 <__aeabi_f2d>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	4980      	ldr	r1, [pc, #512]	@ (800204c <TaskRX+0x29c>)
 8001e4a:	487e      	ldr	r0, [pc, #504]	@ (8002044 <TaskRX+0x294>)
 8001e4c:	f004 f9d2 	bl	80061f4 <siprintf>
					  gen_data_send_rs485(RESPONSES(CODE_TEMP),send_to_rs485);
 8001e50:	497c      	ldr	r1, [pc, #496]	@ (8002044 <TaskRX+0x294>)
 8001e52:	2001      	movs	r0, #1
 8001e54:	f7ff fe0a 	bl	8001a6c <gen_data_send_rs485>
					  memset((void*)print_lcd_row2, 0, sizeof(print_lcd_row2));
 8001e58:	221e      	movs	r2, #30
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	487c      	ldr	r0, [pc, #496]	@ (8002050 <TaskRX+0x2a0>)
 8001e5e:	f004 fa46 	bl	80062ee <memset>
					  memcpy((void*)print_lcd_row2, (void*)indicate_T, sizeof(indicate_T));
 8001e62:	4a7b      	ldr	r2, [pc, #492]	@ (8002050 <TaskRX+0x2a0>)
 8001e64:	4b7b      	ldr	r3, [pc, #492]	@ (8002054 <TaskRX+0x2a4>)
 8001e66:	4614      	mov	r4, r2
 8001e68:	461d      	mov	r5, r3
 8001e6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e6e:	682b      	ldr	r3, [r5, #0]
 8001e70:	7023      	strb	r3, [r4, #0]
			  if(result.Code == 1)
 8001e72:	e0dd      	b.n	8002030 <TaskRX+0x280>

				  }
				  else if (result.Data[0] == '2')
 8001e74:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e78:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e7c:	78db      	ldrb	r3, [r3, #3]
 8001e7e:	2b32      	cmp	r3, #50	@ 0x32
 8001e80:	d11b      	bne.n	8001eba <TaskRX+0x10a>
				  {
					  memset((void*)send_to_rs485,0,sizeof(send_to_rs485));
 8001e82:	2232      	movs	r2, #50	@ 0x32
 8001e84:	2100      	movs	r1, #0
 8001e86:	486f      	ldr	r0, [pc, #444]	@ (8002044 <TaskRX+0x294>)
 8001e88:	f004 fa31 	bl	80062ee <memset>
					  sprintf(send_to_rs485, "%dPa", (int) pressure);
 8001e8c:	4b72      	ldr	r3, [pc, #456]	@ (8002058 <TaskRX+0x2a8>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	461a      	mov	r2, r3
 8001e92:	4972      	ldr	r1, [pc, #456]	@ (800205c <TaskRX+0x2ac>)
 8001e94:	486b      	ldr	r0, [pc, #428]	@ (8002044 <TaskRX+0x294>)
 8001e96:	f004 f9ad 	bl	80061f4 <siprintf>
					  gen_data_send_rs485(RESPONSES(CODE_PRES),send_to_rs485);
 8001e9a:	496a      	ldr	r1, [pc, #424]	@ (8002044 <TaskRX+0x294>)
 8001e9c:	2002      	movs	r0, #2
 8001e9e:	f7ff fde5 	bl	8001a6c <gen_data_send_rs485>
					  memset((void*)print_lcd_row2, 0, sizeof(print_lcd_row2));
 8001ea2:	221e      	movs	r2, #30
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	486a      	ldr	r0, [pc, #424]	@ (8002050 <TaskRX+0x2a0>)
 8001ea8:	f004 fa21 	bl	80062ee <memset>
					  memcpy((void*)print_lcd_row2, (void*)indicate_P, sizeof(indicate_P));
 8001eac:	4a68      	ldr	r2, [pc, #416]	@ (8002050 <TaskRX+0x2a0>)
 8001eae:	4b6c      	ldr	r3, [pc, #432]	@ (8002060 <TaskRX+0x2b0>)
 8001eb0:	4614      	mov	r4, r2
 8001eb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001eb4:	c407      	stmia	r4!, {r0, r1, r2}
 8001eb6:	8023      	strh	r3, [r4, #0]
			  if(result.Code == 1)
 8001eb8:	e0ba      	b.n	8002030 <TaskRX+0x280>

				  }
				  else if (result.Data[0] == '4')
 8001eba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001ebe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001ec2:	78db      	ldrb	r3, [r3, #3]
 8001ec4:	2b34      	cmp	r3, #52	@ 0x34
 8001ec6:	f040 80b3 	bne.w	8002030 <TaskRX+0x280>
				  {
					  memset((void*)send_to_rs485,0,sizeof(send_to_rs485));
 8001eca:	2232      	movs	r2, #50	@ 0x32
 8001ecc:	2100      	movs	r1, #0
 8001ece:	485d      	ldr	r0, [pc, #372]	@ (8002044 <TaskRX+0x294>)
 8001ed0:	f004 fa0d 	bl	80062ee <memset>
					  sprintf(send_to_rs485, "%dN", (int) count_touch);
 8001ed4:	4b63      	ldr	r3, [pc, #396]	@ (8002064 <TaskRX+0x2b4>)
 8001ed6:	881b      	ldrh	r3, [r3, #0]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4963      	ldr	r1, [pc, #396]	@ (8002068 <TaskRX+0x2b8>)
 8001edc:	4859      	ldr	r0, [pc, #356]	@ (8002044 <TaskRX+0x294>)
 8001ede:	f004 f989 	bl	80061f4 <siprintf>
					  gen_data_send_rs485(RESPONSES(CODE_COUNT),send_to_rs485);
 8001ee2:	4958      	ldr	r1, [pc, #352]	@ (8002044 <TaskRX+0x294>)
 8001ee4:	2004      	movs	r0, #4
 8001ee6:	f7ff fdc1 	bl	8001a6c <gen_data_send_rs485>
					  memset((void*)print_lcd_row2, 0, sizeof(print_lcd_row2));
 8001eea:	221e      	movs	r2, #30
 8001eec:	2100      	movs	r1, #0
 8001eee:	4858      	ldr	r0, [pc, #352]	@ (8002050 <TaskRX+0x2a0>)
 8001ef0:	f004 f9fd 	bl	80062ee <memset>
					  memcpy((void*)print_lcd_row2, (void*)indicate_C, sizeof(indicate_C));
 8001ef4:	4b56      	ldr	r3, [pc, #344]	@ (8002050 <TaskRX+0x2a0>)
 8001ef6:	4a5d      	ldr	r2, [pc, #372]	@ (800206c <TaskRX+0x2bc>)
 8001ef8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001efa:	c303      	stmia	r3!, {r0, r1}
 8001efc:	801a      	strh	r2, [r3, #0]
 8001efe:	3302      	adds	r3, #2
 8001f00:	0c12      	lsrs	r2, r2, #16
 8001f02:	701a      	strb	r2, [r3, #0]
			  if(result.Code == 1)
 8001f04:	e094      	b.n	8002030 <TaskRX+0x280>
				  }
			  }
			  else if(result.Code == 2)
 8001f06:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f0a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001f0e:	789b      	ldrb	r3, [r3, #2]
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d12c      	bne.n	8001f6e <TaskRX+0x1be>
			  {
				  result.Data[result.Len] = '\0';
 8001f14:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f18:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001f1c:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8001f20:	461a      	mov	r2, r3
 8001f22:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f26:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001f2a:	4413      	add	r3, r2
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	70da      	strb	r2, [r3, #3]
				  memset((void*)print_lcd_row2, 0, sizeof(print_lcd_row2));
 8001f30:	221e      	movs	r2, #30
 8001f32:	2100      	movs	r1, #0
 8001f34:	4846      	ldr	r0, [pc, #280]	@ (8002050 <TaskRX+0x2a0>)
 8001f36:	f004 f9da 	bl	80062ee <memset>
				  memcpy((void*)print_lcd_row2, (void*)(char*)result.Data, strlen((char*)result.Data));
 8001f3a:	1d3b      	adds	r3, r7, #4
 8001f3c:	3303      	adds	r3, #3
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7fe f906 	bl	8000150 <strlen>
 8001f44:	4602      	mov	r2, r0
 8001f46:	1d3b      	adds	r3, r7, #4
 8001f48:	3303      	adds	r3, #3
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4840      	ldr	r0, [pc, #256]	@ (8002050 <TaskRX+0x2a0>)
 8001f4e:	f004 fa6e 	bl	800642e <memcpy>
				  memset((void*)send_to_rs485,0,sizeof(send_to_rs485));
 8001f52:	2232      	movs	r2, #50	@ 0x32
 8001f54:	2100      	movs	r1, #0
 8001f56:	483b      	ldr	r0, [pc, #236]	@ (8002044 <TaskRX+0x294>)
 8001f58:	f004 f9c9 	bl	80062ee <memset>
				  sprintf(send_to_rs485, "Okee");
 8001f5c:	4944      	ldr	r1, [pc, #272]	@ (8002070 <TaskRX+0x2c0>)
 8001f5e:	4839      	ldr	r0, [pc, #228]	@ (8002044 <TaskRX+0x294>)
 8001f60:	f004 f948 	bl	80061f4 <siprintf>
				  gen_data_send_rs485(RESPONSES(CODE_RESP),send_to_rs485);
 8001f64:	4937      	ldr	r1, [pc, #220]	@ (8002044 <TaskRX+0x294>)
 8001f66:	2005      	movs	r0, #5
 8001f68:	f7ff fd80 	bl	8001a6c <gen_data_send_rs485>
			  if(result.Code == 1)
 8001f6c:	e060      	b.n	8002030 <TaskRX+0x280>
			  }
			  else if(result.Code == 3)
 8001f6e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f72:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001f76:	789b      	ldrb	r3, [r3, #2]
 8001f78:	2b03      	cmp	r3, #3
 8001f7a:	d159      	bne.n	8002030 <TaskRX+0x280>
			  {
				  result.Data[result.Len] = '\0';
 8001f7c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f80:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001f84:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8001f88:	461a      	mov	r2, r3
 8001f8a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f8e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001f92:	4413      	add	r3, r2
 8001f94:	2200      	movs	r2, #0
 8001f96:	70da      	strb	r2, [r3, #3]
				  memset((void*)print_lcd_row2, 0, sizeof(print_lcd_row2));
 8001f98:	221e      	movs	r2, #30
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	482c      	ldr	r0, [pc, #176]	@ (8002050 <TaskRX+0x2a0>)
 8001f9e:	f004 f9a6 	bl	80062ee <memset>
				  memcpy((void*)print_lcd_row2, (void*)indicate_M, sizeof(indicate_M));
 8001fa2:	4b2b      	ldr	r3, [pc, #172]	@ (8002050 <TaskRX+0x2a0>)
 8001fa4:	4a33      	ldr	r2, [pc, #204]	@ (8002074 <TaskRX+0x2c4>)
 8001fa6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fa8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				  memset((void*)send_to_rs485,0,sizeof(send_to_rs485));
 8001fac:	2232      	movs	r2, #50	@ 0x32
 8001fae:	2100      	movs	r1, #0
 8001fb0:	4824      	ldr	r0, [pc, #144]	@ (8002044 <TaskRX+0x294>)
 8001fb2:	f004 f99c 	bl	80062ee <memset>
				  sprintf(send_to_rs485, "Okee");
 8001fb6:	492e      	ldr	r1, [pc, #184]	@ (8002070 <TaskRX+0x2c0>)
 8001fb8:	4822      	ldr	r0, [pc, #136]	@ (8002044 <TaskRX+0x294>)
 8001fba:	f004 f91b 	bl	80061f4 <siprintf>
				  gen_data_send_rs485(RESPONSES(CODE_RESP),send_to_rs485);
 8001fbe:	4921      	ldr	r1, [pc, #132]	@ (8002044 <TaskRX+0x294>)
 8001fc0:	2005      	movs	r0, #5
 8001fc2:	f7ff fd53 	bl	8001a6c <gen_data_send_rs485>
			  if(result.Code == 1)
 8001fc6:	e033      	b.n	8002030 <TaskRX+0x280>
			  }
		  }
		  else if(check_crc(&result) != result.Crc)
 8001fc8:	1d3b      	adds	r3, r7, #4
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff fc4c 	bl	8001868 <check_crc>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001fd8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001fdc:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d026      	beq.n	8002032 <TaskRX+0x282>
		  {
			  result.Data[result.Len] = '\0';
 8001fe4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001fe8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001fec:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001ff6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001ffa:	4413      	add	r3, r2
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	70da      	strb	r2, [r3, #3]
			  memset((void*)print_lcd_row2, 0, sizeof(print_lcd_row2));
 8002000:	221e      	movs	r2, #30
 8002002:	2100      	movs	r1, #0
 8002004:	4812      	ldr	r0, [pc, #72]	@ (8002050 <TaskRX+0x2a0>)
 8002006:	f004 f972 	bl	80062ee <memset>
			  memcpy((void*)print_lcd_row2, (void*)indicate_E, sizeof(indicate_E));
 800200a:	4b11      	ldr	r3, [pc, #68]	@ (8002050 <TaskRX+0x2a0>)
 800200c:	4a1a      	ldr	r2, [pc, #104]	@ (8002078 <TaskRX+0x2c8>)
 800200e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002010:	c303      	stmia	r3!, {r0, r1}
 8002012:	801a      	strh	r2, [r3, #0]
			  memset((void*)send_to_rs485,0,sizeof(send_to_rs485));
 8002014:	2232      	movs	r2, #50	@ 0x32
 8002016:	2100      	movs	r1, #0
 8002018:	480a      	ldr	r0, [pc, #40]	@ (8002044 <TaskRX+0x294>)
 800201a:	f004 f968 	bl	80062ee <memset>
			  sprintf(send_to_rs485, "Error Crc");
 800201e:	4917      	ldr	r1, [pc, #92]	@ (800207c <TaskRX+0x2cc>)
 8002020:	4808      	ldr	r0, [pc, #32]	@ (8002044 <TaskRX+0x294>)
 8002022:	f004 f8e7 	bl	80061f4 <siprintf>
			  gen_data_send_rs485(RESPONSES(CODE_RESP),send_to_rs485);
 8002026:	4907      	ldr	r1, [pc, #28]	@ (8002044 <TaskRX+0x294>)
 8002028:	2005      	movs	r0, #5
 800202a:	f7ff fd1f 	bl	8001a6c <gen_data_send_rs485>
		  }
	  }
}
 800202e:	e000      	b.n	8002032 <TaskRX+0x282>
			  if(result.Code == 1)
 8002030:	bf00      	nop
}
 8002032:	bf00      	nop
 8002034:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8002038:	46bd      	mov	sp, r7
 800203a:	bdb0      	pop	{r4, r5, r7, pc}
 800203c:	200003ac 	.word	0x200003ac
 8002040:	200002f0 	.word	0x200002f0
 8002044:	20000378 	.word	0x20000378
 8002048:	200003f4 	.word	0x200003f4
 800204c:	080084e0 	.word	0x080084e0
 8002050:	20000358 	.word	0x20000358
 8002054:	20000044 	.word	0x20000044
 8002058:	200003f8 	.word	0x200003f8
 800205c:	080084e8 	.word	0x080084e8
 8002060:	20000058 	.word	0x20000058
 8002064:	20000402 	.word	0x20000402
 8002068:	080084f0 	.word	0x080084f0
 800206c:	20000068 	.word	0x20000068
 8002070:	080084f4 	.word	0x080084f4
 8002074:	20000074 	.word	0x20000074
 8002078:	20000080 	.word	0x20000080
 800207c:	080084fc 	.word	0x080084fc

08002080 <TaskTX>:

void TaskTX()
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
	if(strlen(send_to_rs485) > 0)
 8002084:	4b3a      	ldr	r3, [pc, #232]	@ (8002170 <TaskTX+0xf0>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d018      	beq.n	80020be <TaskTX+0x3e>
	{
		  if(HAL_UART_Transmit(&huart1, (uint8_t *)&send_to_rs485, strlen(send_to_rs485) , 1000) == HAL_OK)
 800208c:	4838      	ldr	r0, [pc, #224]	@ (8002170 <TaskTX+0xf0>)
 800208e:	f7fe f85f 	bl	8000150 <strlen>
 8002092:	4603      	mov	r3, r0
 8002094:	b29a      	uxth	r2, r3
 8002096:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800209a:	4935      	ldr	r1, [pc, #212]	@ (8002170 <TaskTX+0xf0>)
 800209c:	4835      	ldr	r0, [pc, #212]	@ (8002174 <TaskTX+0xf4>)
 800209e:	f003 f89b 	bl	80051d8 <HAL_UART_Transmit>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d15b      	bne.n	8002160 <TaskTX+0xe0>
		  {
		  	  memset((void*)send_to_rs485, 0, sizeof(send_to_rs485));
 80020a8:	2232      	movs	r2, #50	@ 0x32
 80020aa:	2100      	movs	r1, #0
 80020ac:	4830      	ldr	r0, [pc, #192]	@ (8002170 <TaskTX+0xf0>)
 80020ae:	f004 f91e 	bl	80062ee <memset>
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80020b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80020b6:	4830      	ldr	r0, [pc, #192]	@ (8002178 <TaskTX+0xf8>)
 80020b8:	f000 fedc 	bl	8002e74 <HAL_GPIO_TogglePin>
 80020bc:	e050      	b.n	8002160 <TaskTX+0xe0>
		  }
	}
	else if(last_send == 1)
 80020be:	4b2f      	ldr	r3, [pc, #188]	@ (800217c <TaskTX+0xfc>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d126      	bne.n	8002114 <TaskTX+0x94>
	{
		  last_send = 1 - last_send;
 80020c6:	4b2d      	ldr	r3, [pc, #180]	@ (800217c <TaskTX+0xfc>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	f1c3 0301 	rsb	r3, r3, #1
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	4b2a      	ldr	r3, [pc, #168]	@ (800217c <TaskTX+0xfc>)
 80020d2:	701a      	strb	r2, [r3, #0]
		  memset((void*)send_to_rs485,0,sizeof(send_to_rs485));
 80020d4:	2232      	movs	r2, #50	@ 0x32
 80020d6:	2100      	movs	r1, #0
 80020d8:	4825      	ldr	r0, [pc, #148]	@ (8002170 <TaskTX+0xf0>)
 80020da:	f004 f908 	bl	80062ee <memset>
		  sprintf(send_to_rs485, "%.1fC", temperature);
 80020de:	4b28      	ldr	r3, [pc, #160]	@ (8002180 <TaskTX+0x100>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7fe f9a0 	bl	8000428 <__aeabi_f2d>
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	4925      	ldr	r1, [pc, #148]	@ (8002184 <TaskTX+0x104>)
 80020ee:	4820      	ldr	r0, [pc, #128]	@ (8002170 <TaskTX+0xf0>)
 80020f0:	f004 f880 	bl	80061f4 <siprintf>
		  gen_data_send_rs485(UPGRADE(CODE_TEMP),send_to_rs485);
 80020f4:	491e      	ldr	r1, [pc, #120]	@ (8002170 <TaskTX+0xf0>)
 80020f6:	2080      	movs	r0, #128	@ 0x80
 80020f8:	f7ff fcb8 	bl	8001a6c <gen_data_send_rs485>
		  HAL_UART_Transmit(&huart1, (uint8_t *)&send_to_rs485, strlen(send_to_rs485) , 1000);
 80020fc:	481c      	ldr	r0, [pc, #112]	@ (8002170 <TaskTX+0xf0>)
 80020fe:	f7fe f827 	bl	8000150 <strlen>
 8002102:	4603      	mov	r3, r0
 8002104:	b29a      	uxth	r2, r3
 8002106:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800210a:	4919      	ldr	r1, [pc, #100]	@ (8002170 <TaskTX+0xf0>)
 800210c:	4819      	ldr	r0, [pc, #100]	@ (8002174 <TaskTX+0xf4>)
 800210e:	f003 f863 	bl	80051d8 <HAL_UART_Transmit>
 8002112:	e025      	b.n	8002160 <TaskTX+0xe0>
	}
	else if(last_send == 0)
 8002114:	4b19      	ldr	r3, [pc, #100]	@ (800217c <TaskTX+0xfc>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d121      	bne.n	8002160 <TaskTX+0xe0>
	{
	      last_send = 1 - last_send;
 800211c:	4b17      	ldr	r3, [pc, #92]	@ (800217c <TaskTX+0xfc>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	f1c3 0301 	rsb	r3, r3, #1
 8002124:	b2da      	uxtb	r2, r3
 8002126:	4b15      	ldr	r3, [pc, #84]	@ (800217c <TaskTX+0xfc>)
 8002128:	701a      	strb	r2, [r3, #0]
		  memset((void*)send_to_rs485, 0, sizeof(send_to_rs485));
 800212a:	2232      	movs	r2, #50	@ 0x32
 800212c:	2100      	movs	r1, #0
 800212e:	4810      	ldr	r0, [pc, #64]	@ (8002170 <TaskTX+0xf0>)
 8002130:	f004 f8dd 	bl	80062ee <memset>
		  sprintf(send_to_rs485, "%dPa", (int) pressure);
 8002134:	4b14      	ldr	r3, [pc, #80]	@ (8002188 <TaskTX+0x108>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	461a      	mov	r2, r3
 800213a:	4914      	ldr	r1, [pc, #80]	@ (800218c <TaskTX+0x10c>)
 800213c:	480c      	ldr	r0, [pc, #48]	@ (8002170 <TaskTX+0xf0>)
 800213e:	f004 f859 	bl	80061f4 <siprintf>
		  gen_data_send_rs485(UPGRADE(CODE_PRES),send_to_rs485);
 8002142:	490b      	ldr	r1, [pc, #44]	@ (8002170 <TaskTX+0xf0>)
 8002144:	2081      	movs	r0, #129	@ 0x81
 8002146:	f7ff fc91 	bl	8001a6c <gen_data_send_rs485>
		  HAL_UART_Transmit(&huart1, (uint8_t *)&send_to_rs485, strlen(send_to_rs485) , 1000);
 800214a:	4809      	ldr	r0, [pc, #36]	@ (8002170 <TaskTX+0xf0>)
 800214c:	f7fe f800 	bl	8000150 <strlen>
 8002150:	4603      	mov	r3, r0
 8002152:	b29a      	uxth	r2, r3
 8002154:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002158:	4905      	ldr	r1, [pc, #20]	@ (8002170 <TaskTX+0xf0>)
 800215a:	4806      	ldr	r0, [pc, #24]	@ (8002174 <TaskTX+0xf4>)
 800215c:	f003 f83c 	bl	80051d8 <HAL_UART_Transmit>
	}
	memset((void*)send_to_rs485, 0, sizeof(send_to_rs485));
 8002160:	2232      	movs	r2, #50	@ 0x32
 8002162:	2100      	movs	r1, #0
 8002164:	4802      	ldr	r0, [pc, #8]	@ (8002170 <TaskTX+0xf0>)
 8002166:	f004 f8c2 	bl	80062ee <memset>
}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	20000378 	.word	0x20000378
 8002174:	200002f0 	.word	0x200002f0
 8002178:	40011000 	.word	0x40011000
 800217c:	200003fd 	.word	0x200003fd
 8002180:	200003f4 	.word	0x200003f4
 8002184:	080084e0 	.word	0x080084e0
 8002188:	200003f8 	.word	0x200003f8
 800218c:	080084e8 	.word	0x080084e8

08002190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002194:	f000 fb3e 	bl	8002814 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002198:	f000 f82e 	bl	80021f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800219c:	f000 f8ca 	bl	8002334 <MX_GPIO_Init>
  MX_I2C1_Init();
 80021a0:	f000 f870 	bl	8002284 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80021a4:	f000 f89c 	bl	80022e0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init(2);
 80021a8:	2002      	movs	r0, #2
 80021aa:	f7ff f869 	bl	8001280 <HD44780_Init>
  MPR121_Init();
 80021ae:	f7fe fcbb 	bl	8000b28 <MPR121_Init>
  BMP180_Init(&hi2c1);
 80021b2:	480f      	ldr	r0, [pc, #60]	@ (80021f0 <main+0x60>)
 80021b4:	f7fe fda6 	bl	8000d04 <BMP180_Init>
  MPR121_Init();
 80021b8:	f7fe fcb6 	bl	8000b28 <MPR121_Init>
  BMP180_SetOversampling(BMP180_ULTRA);
 80021bc:	2003      	movs	r0, #3
 80021be:	f7fe fdaf 	bl	8000d20 <BMP180_SetOversampling>
  BMP180_UpdateCalibrationData();
 80021c2:	f7fe fdbd 	bl	8000d40 <BMP180_UpdateCalibrationData>
  HD44780_SetCursor(0,0);
 80021c6:	2100      	movs	r1, #0
 80021c8:	2000      	movs	r0, #0
 80021ca:	f7ff f8f3 	bl	80013b4 <HD44780_SetCursor>
  HD44780_PrintStr("INIT LCD 1602");
 80021ce:	4809      	ldr	r0, [pc, #36]	@ (80021f4 <main+0x64>)
 80021d0:	f7ff f961 	bl	8001496 <HD44780_PrintStr>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  TaskMPR121();
 80021d4:	f7ff fcc2 	bl	8001b5c <TaskMPR121>
	  TaskTempBMP180();
 80021d8:	f7ff fd84 	bl	8001ce4 <TaskTempBMP180>
	  TaskPressBMP180();
 80021dc:	f7ff fd8e 	bl	8001cfc <TaskPressBMP180>
	  TaskLCD();
 80021e0:	f7ff fd98 	bl	8001d14 <TaskLCD>
	  TaskRX();
 80021e4:	f7ff fde4 	bl	8001db0 <TaskRX>
	  TaskTX();
 80021e8:	f7ff ff4a 	bl	8002080 <TaskTX>
	  TaskMPR121();
 80021ec:	bf00      	nop
 80021ee:	e7f1      	b.n	80021d4 <main+0x44>
 80021f0:	2000029c 	.word	0x2000029c
 80021f4:	08008508 	.word	0x08008508

080021f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b090      	sub	sp, #64	@ 0x40
 80021fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021fe:	f107 0318 	add.w	r3, r7, #24
 8002202:	2228      	movs	r2, #40	@ 0x28
 8002204:	2100      	movs	r1, #0
 8002206:	4618      	mov	r0, r3
 8002208:	f004 f871 	bl	80062ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800220c:	1d3b      	adds	r3, r7, #4
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	605a      	str	r2, [r3, #4]
 8002214:	609a      	str	r2, [r3, #8]
 8002216:	60da      	str	r2, [r3, #12]
 8002218:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800221a:	2301      	movs	r3, #1
 800221c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800221e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002222:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002224:	2300      	movs	r3, #0
 8002226:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002228:	2301      	movs	r3, #1
 800222a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800222c:	2302      	movs	r3, #2
 800222e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002230:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002234:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002236:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800223a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800223c:	f107 0318 	add.w	r3, r7, #24
 8002240:	4618      	mov	r0, r3
 8002242:	f002 fb69 	bl	8004918 <HAL_RCC_OscConfig>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800224c:	f000 f900 	bl	8002450 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002250:	230f      	movs	r3, #15
 8002252:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002254:	2302      	movs	r3, #2
 8002256:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002258:	2300      	movs	r3, #0
 800225a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800225c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002260:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002266:	1d3b      	adds	r3, r7, #4
 8002268:	2102      	movs	r1, #2
 800226a:	4618      	mov	r0, r3
 800226c:	f002 fdd6 	bl	8004e1c <HAL_RCC_ClockConfig>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002276:	f000 f8eb 	bl	8002450 <Error_Handler>
  }
}
 800227a:	bf00      	nop
 800227c:	3740      	adds	r7, #64	@ 0x40
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
	...

08002284 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002288:	4b12      	ldr	r3, [pc, #72]	@ (80022d4 <MX_I2C1_Init+0x50>)
 800228a:	4a13      	ldr	r2, [pc, #76]	@ (80022d8 <MX_I2C1_Init+0x54>)
 800228c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800228e:	4b11      	ldr	r3, [pc, #68]	@ (80022d4 <MX_I2C1_Init+0x50>)
 8002290:	4a12      	ldr	r2, [pc, #72]	@ (80022dc <MX_I2C1_Init+0x58>)
 8002292:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002294:	4b0f      	ldr	r3, [pc, #60]	@ (80022d4 <MX_I2C1_Init+0x50>)
 8002296:	2200      	movs	r2, #0
 8002298:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800229a:	4b0e      	ldr	r3, [pc, #56]	@ (80022d4 <MX_I2C1_Init+0x50>)
 800229c:	2200      	movs	r2, #0
 800229e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022a0:	4b0c      	ldr	r3, [pc, #48]	@ (80022d4 <MX_I2C1_Init+0x50>)
 80022a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80022a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022a8:	4b0a      	ldr	r3, [pc, #40]	@ (80022d4 <MX_I2C1_Init+0x50>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80022ae:	4b09      	ldr	r3, [pc, #36]	@ (80022d4 <MX_I2C1_Init+0x50>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022b4:	4b07      	ldr	r3, [pc, #28]	@ (80022d4 <MX_I2C1_Init+0x50>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022ba:	4b06      	ldr	r3, [pc, #24]	@ (80022d4 <MX_I2C1_Init+0x50>)
 80022bc:	2200      	movs	r2, #0
 80022be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022c0:	4804      	ldr	r0, [pc, #16]	@ (80022d4 <MX_I2C1_Init+0x50>)
 80022c2:	f000 fe09 	bl	8002ed8 <HAL_I2C_Init>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80022cc:	f000 f8c0 	bl	8002450 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80022d0:	bf00      	nop
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	2000029c 	.word	0x2000029c
 80022d8:	40005400 	.word	0x40005400
 80022dc:	000186a0 	.word	0x000186a0

080022e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022e4:	4b11      	ldr	r3, [pc, #68]	@ (800232c <MX_USART1_UART_Init+0x4c>)
 80022e6:	4a12      	ldr	r2, [pc, #72]	@ (8002330 <MX_USART1_UART_Init+0x50>)
 80022e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80022ea:	4b10      	ldr	r3, [pc, #64]	@ (800232c <MX_USART1_UART_Init+0x4c>)
 80022ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022f2:	4b0e      	ldr	r3, [pc, #56]	@ (800232c <MX_USART1_UART_Init+0x4c>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022f8:	4b0c      	ldr	r3, [pc, #48]	@ (800232c <MX_USART1_UART_Init+0x4c>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022fe:	4b0b      	ldr	r3, [pc, #44]	@ (800232c <MX_USART1_UART_Init+0x4c>)
 8002300:	2200      	movs	r2, #0
 8002302:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002304:	4b09      	ldr	r3, [pc, #36]	@ (800232c <MX_USART1_UART_Init+0x4c>)
 8002306:	220c      	movs	r2, #12
 8002308:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800230a:	4b08      	ldr	r3, [pc, #32]	@ (800232c <MX_USART1_UART_Init+0x4c>)
 800230c:	2200      	movs	r2, #0
 800230e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002310:	4b06      	ldr	r3, [pc, #24]	@ (800232c <MX_USART1_UART_Init+0x4c>)
 8002312:	2200      	movs	r2, #0
 8002314:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002316:	4805      	ldr	r0, [pc, #20]	@ (800232c <MX_USART1_UART_Init+0x4c>)
 8002318:	f002 ff0e 	bl	8005138 <HAL_UART_Init>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002322:	f000 f895 	bl	8002450 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	200002f0 	.word	0x200002f0
 8002330:	40013800 	.word	0x40013800

08002334 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b088      	sub	sp, #32
 8002338:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233a:	f107 0310 	add.w	r3, r7, #16
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	605a      	str	r2, [r3, #4]
 8002344:	609a      	str	r2, [r3, #8]
 8002346:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002348:	4b2e      	ldr	r3, [pc, #184]	@ (8002404 <MX_GPIO_Init+0xd0>)
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	4a2d      	ldr	r2, [pc, #180]	@ (8002404 <MX_GPIO_Init+0xd0>)
 800234e:	f043 0310 	orr.w	r3, r3, #16
 8002352:	6193      	str	r3, [r2, #24]
 8002354:	4b2b      	ldr	r3, [pc, #172]	@ (8002404 <MX_GPIO_Init+0xd0>)
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	f003 0310 	and.w	r3, r3, #16
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002360:	4b28      	ldr	r3, [pc, #160]	@ (8002404 <MX_GPIO_Init+0xd0>)
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	4a27      	ldr	r2, [pc, #156]	@ (8002404 <MX_GPIO_Init+0xd0>)
 8002366:	f043 0320 	orr.w	r3, r3, #32
 800236a:	6193      	str	r3, [r2, #24]
 800236c:	4b25      	ldr	r3, [pc, #148]	@ (8002404 <MX_GPIO_Init+0xd0>)
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	f003 0320 	and.w	r3, r3, #32
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002378:	4b22      	ldr	r3, [pc, #136]	@ (8002404 <MX_GPIO_Init+0xd0>)
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	4a21      	ldr	r2, [pc, #132]	@ (8002404 <MX_GPIO_Init+0xd0>)
 800237e:	f043 0304 	orr.w	r3, r3, #4
 8002382:	6193      	str	r3, [r2, #24]
 8002384:	4b1f      	ldr	r3, [pc, #124]	@ (8002404 <MX_GPIO_Init+0xd0>)
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	607b      	str	r3, [r7, #4]
 800238e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002390:	4b1c      	ldr	r3, [pc, #112]	@ (8002404 <MX_GPIO_Init+0xd0>)
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	4a1b      	ldr	r2, [pc, #108]	@ (8002404 <MX_GPIO_Init+0xd0>)
 8002396:	f043 0308 	orr.w	r3, r3, #8
 800239a:	6193      	str	r3, [r2, #24]
 800239c:	4b19      	ldr	r3, [pc, #100]	@ (8002404 <MX_GPIO_Init+0xd0>)
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	f003 0308 	and.w	r3, r3, #8
 80023a4:	603b      	str	r3, [r7, #0]
 80023a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80023a8:	2200      	movs	r2, #0
 80023aa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80023ae:	4816      	ldr	r0, [pc, #88]	@ (8002408 <MX_GPIO_Init+0xd4>)
 80023b0:	f000 fd48 	bl	8002e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80023b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ba:	2301      	movs	r3, #1
 80023bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023be:	2300      	movs	r3, #0
 80023c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c2:	2302      	movs	r3, #2
 80023c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023c6:	f107 0310 	add.w	r3, r7, #16
 80023ca:	4619      	mov	r1, r3
 80023cc:	480e      	ldr	r0, [pc, #56]	@ (8002408 <MX_GPIO_Init+0xd4>)
 80023ce:	f000 fbb5 	bl	8002b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
 80023d2:	2320      	movs	r3, #32
 80023d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023d6:	4b0d      	ldr	r3, [pc, #52]	@ (800240c <MX_GPIO_Init+0xd8>)
 80023d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023da:	2301      	movs	r3, #1
 80023dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 80023de:	f107 0310 	add.w	r3, r7, #16
 80023e2:	4619      	mov	r1, r3
 80023e4:	480a      	ldr	r0, [pc, #40]	@ (8002410 <MX_GPIO_Init+0xdc>)
 80023e6:	f000 fba9 	bl	8002b3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80023ea:	2200      	movs	r2, #0
 80023ec:	2100      	movs	r1, #0
 80023ee:	2017      	movs	r0, #23
 80023f0:	f000 fb6d 	bl	8002ace <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80023f4:	2017      	movs	r0, #23
 80023f6:	f000 fb86 	bl	8002b06 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80023fa:	bf00      	nop
 80023fc:	3720      	adds	r7, #32
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40021000 	.word	0x40021000
 8002408:	40011000 	.word	0x40011000
 800240c:	10110000 	.word	0x10110000
 8002410:	40010c00 	.word	0x40010c00

08002414 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == INT_Pin) {
 800241e:	88fb      	ldrh	r3, [r7, #6]
 8002420:	2b20      	cmp	r3, #32
 8002422:	d10b      	bne.n	800243c <HAL_GPIO_EXTI_Callback+0x28>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002424:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002428:	4807      	ldr	r0, [pc, #28]	@ (8002448 <HAL_GPIO_EXTI_Callback+0x34>)
 800242a:	f000 fd23 	bl	8002e74 <HAL_GPIO_TogglePin>
		count_touch++;
 800242e:	4b07      	ldr	r3, [pc, #28]	@ (800244c <HAL_GPIO_EXTI_Callback+0x38>)
 8002430:	881b      	ldrh	r3, [r3, #0]
 8002432:	3301      	adds	r3, #1
 8002434:	b29a      	uxth	r2, r3
 8002436:	4b05      	ldr	r3, [pc, #20]	@ (800244c <HAL_GPIO_EXTI_Callback+0x38>)
 8002438:	801a      	strh	r2, [r3, #0]
	} else {
		__NOP();
	}
}
 800243a:	e000      	b.n	800243e <HAL_GPIO_EXTI_Callback+0x2a>
		__NOP();
 800243c:	bf00      	nop
}
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40011000 	.word	0x40011000
 800244c:	20000402 	.word	0x20000402

08002450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002454:	b672      	cpsid	i
}
 8002456:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002458:	bf00      	nop
 800245a:	e7fd      	b.n	8002458 <Error_Handler+0x8>

0800245c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002462:	4b15      	ldr	r3, [pc, #84]	@ (80024b8 <HAL_MspInit+0x5c>)
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	4a14      	ldr	r2, [pc, #80]	@ (80024b8 <HAL_MspInit+0x5c>)
 8002468:	f043 0301 	orr.w	r3, r3, #1
 800246c:	6193      	str	r3, [r2, #24]
 800246e:	4b12      	ldr	r3, [pc, #72]	@ (80024b8 <HAL_MspInit+0x5c>)
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	60bb      	str	r3, [r7, #8]
 8002478:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800247a:	4b0f      	ldr	r3, [pc, #60]	@ (80024b8 <HAL_MspInit+0x5c>)
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	4a0e      	ldr	r2, [pc, #56]	@ (80024b8 <HAL_MspInit+0x5c>)
 8002480:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002484:	61d3      	str	r3, [r2, #28]
 8002486:	4b0c      	ldr	r3, [pc, #48]	@ (80024b8 <HAL_MspInit+0x5c>)
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800248e:	607b      	str	r3, [r7, #4]
 8002490:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002492:	4b0a      	ldr	r3, [pc, #40]	@ (80024bc <HAL_MspInit+0x60>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	4a04      	ldr	r2, [pc, #16]	@ (80024bc <HAL_MspInit+0x60>)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ae:	bf00      	nop
 80024b0:	3714      	adds	r7, #20
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr
 80024b8:	40021000 	.word	0x40021000
 80024bc:	40010000 	.word	0x40010000

080024c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b088      	sub	sp, #32
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c8:	f107 0310 	add.w	r3, r7, #16
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a15      	ldr	r2, [pc, #84]	@ (8002530 <HAL_I2C_MspInit+0x70>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d123      	bne.n	8002528 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024e0:	4b14      	ldr	r3, [pc, #80]	@ (8002534 <HAL_I2C_MspInit+0x74>)
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	4a13      	ldr	r2, [pc, #76]	@ (8002534 <HAL_I2C_MspInit+0x74>)
 80024e6:	f043 0308 	orr.w	r3, r3, #8
 80024ea:	6193      	str	r3, [r2, #24]
 80024ec:	4b11      	ldr	r3, [pc, #68]	@ (8002534 <HAL_I2C_MspInit+0x74>)
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	f003 0308 	and.w	r3, r3, #8
 80024f4:	60fb      	str	r3, [r7, #12]
 80024f6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024f8:	23c0      	movs	r3, #192	@ 0xc0
 80024fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024fc:	2312      	movs	r3, #18
 80024fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002500:	2303      	movs	r3, #3
 8002502:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002504:	f107 0310 	add.w	r3, r7, #16
 8002508:	4619      	mov	r1, r3
 800250a:	480b      	ldr	r0, [pc, #44]	@ (8002538 <HAL_I2C_MspInit+0x78>)
 800250c:	f000 fb16 	bl	8002b3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002510:	4b08      	ldr	r3, [pc, #32]	@ (8002534 <HAL_I2C_MspInit+0x74>)
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	4a07      	ldr	r2, [pc, #28]	@ (8002534 <HAL_I2C_MspInit+0x74>)
 8002516:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800251a:	61d3      	str	r3, [r2, #28]
 800251c:	4b05      	ldr	r3, [pc, #20]	@ (8002534 <HAL_I2C_MspInit+0x74>)
 800251e:	69db      	ldr	r3, [r3, #28]
 8002520:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002524:	60bb      	str	r3, [r7, #8]
 8002526:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002528:	bf00      	nop
 800252a:	3720      	adds	r7, #32
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40005400 	.word	0x40005400
 8002534:	40021000 	.word	0x40021000
 8002538:	40010c00 	.word	0x40010c00

0800253c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b088      	sub	sp, #32
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002544:	f107 0310 	add.w	r3, r7, #16
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a1c      	ldr	r2, [pc, #112]	@ (80025c8 <HAL_UART_MspInit+0x8c>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d131      	bne.n	80025c0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800255c:	4b1b      	ldr	r3, [pc, #108]	@ (80025cc <HAL_UART_MspInit+0x90>)
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	4a1a      	ldr	r2, [pc, #104]	@ (80025cc <HAL_UART_MspInit+0x90>)
 8002562:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002566:	6193      	str	r3, [r2, #24]
 8002568:	4b18      	ldr	r3, [pc, #96]	@ (80025cc <HAL_UART_MspInit+0x90>)
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002574:	4b15      	ldr	r3, [pc, #84]	@ (80025cc <HAL_UART_MspInit+0x90>)
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	4a14      	ldr	r2, [pc, #80]	@ (80025cc <HAL_UART_MspInit+0x90>)
 800257a:	f043 0304 	orr.w	r3, r3, #4
 800257e:	6193      	str	r3, [r2, #24]
 8002580:	4b12      	ldr	r3, [pc, #72]	@ (80025cc <HAL_UART_MspInit+0x90>)
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	f003 0304 	and.w	r3, r3, #4
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800258c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002590:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002592:	2302      	movs	r3, #2
 8002594:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002596:	2303      	movs	r3, #3
 8002598:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800259a:	f107 0310 	add.w	r3, r7, #16
 800259e:	4619      	mov	r1, r3
 80025a0:	480b      	ldr	r0, [pc, #44]	@ (80025d0 <HAL_UART_MspInit+0x94>)
 80025a2:	f000 facb 	bl	8002b3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80025a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b4:	f107 0310 	add.w	r3, r7, #16
 80025b8:	4619      	mov	r1, r3
 80025ba:	4805      	ldr	r0, [pc, #20]	@ (80025d0 <HAL_UART_MspInit+0x94>)
 80025bc:	f000 fabe 	bl	8002b3c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80025c0:	bf00      	nop
 80025c2:	3720      	adds	r7, #32
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40013800 	.word	0x40013800
 80025cc:	40021000 	.word	0x40021000
 80025d0:	40010800 	.word	0x40010800

080025d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025d8:	bf00      	nop
 80025da:	e7fd      	b.n	80025d8 <NMI_Handler+0x4>

080025dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025e0:	bf00      	nop
 80025e2:	e7fd      	b.n	80025e0 <HardFault_Handler+0x4>

080025e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025e8:	bf00      	nop
 80025ea:	e7fd      	b.n	80025e8 <MemManage_Handler+0x4>

080025ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025f0:	bf00      	nop
 80025f2:	e7fd      	b.n	80025f0 <BusFault_Handler+0x4>

080025f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025f8:	bf00      	nop
 80025fa:	e7fd      	b.n	80025f8 <UsageFault_Handler+0x4>

080025fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr

08002608 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr

08002614 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002618:	bf00      	nop
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr

08002620 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002624:	f000 f93c 	bl	80028a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002628:	bf00      	nop
 800262a:	bd80      	pop	{r7, pc}

0800262c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_Pin);
 8002630:	2020      	movs	r0, #32
 8002632:	f000 fc39 	bl	8002ea8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}

0800263a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800263a:	b480      	push	{r7}
 800263c:	af00      	add	r7, sp, #0
  return 1;
 800263e:	2301      	movs	r3, #1
}
 8002640:	4618      	mov	r0, r3
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr

08002648 <_kill>:

int _kill(int pid, int sig)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002652:	f003 feb1 	bl	80063b8 <__errno>
 8002656:	4603      	mov	r3, r0
 8002658:	2216      	movs	r2, #22
 800265a:	601a      	str	r2, [r3, #0]
  return -1;
 800265c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002660:	4618      	mov	r0, r3
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <_exit>:

void _exit (int status)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002670:	f04f 31ff 	mov.w	r1, #4294967295
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f7ff ffe7 	bl	8002648 <_kill>
  while (1) {}    /* Make sure we hang here */
 800267a:	bf00      	nop
 800267c:	e7fd      	b.n	800267a <_exit+0x12>

0800267e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b086      	sub	sp, #24
 8002682:	af00      	add	r7, sp, #0
 8002684:	60f8      	str	r0, [r7, #12]
 8002686:	60b9      	str	r1, [r7, #8]
 8002688:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800268a:	2300      	movs	r3, #0
 800268c:	617b      	str	r3, [r7, #20]
 800268e:	e00a      	b.n	80026a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002690:	f3af 8000 	nop.w
 8002694:	4601      	mov	r1, r0
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	1c5a      	adds	r2, r3, #1
 800269a:	60ba      	str	r2, [r7, #8]
 800269c:	b2ca      	uxtb	r2, r1
 800269e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	3301      	adds	r3, #1
 80026a4:	617b      	str	r3, [r7, #20]
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	dbf0      	blt.n	8002690 <_read+0x12>
  }

  return len;
 80026ae:	687b      	ldr	r3, [r7, #4]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026c4:	2300      	movs	r3, #0
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	e009      	b.n	80026de <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	1c5a      	adds	r2, r3, #1
 80026ce:	60ba      	str	r2, [r7, #8]
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	3301      	adds	r3, #1
 80026dc:	617b      	str	r3, [r7, #20]
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	dbf1      	blt.n	80026ca <_write+0x12>
  }
  return len;
 80026e6:	687b      	ldr	r3, [r7, #4]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <_close>:

int _close(int file)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	bc80      	pop	{r7}
 8002704:	4770      	bx	lr

08002706 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
 800270e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002716:	605a      	str	r2, [r3, #4]
  return 0;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	bc80      	pop	{r7}
 8002722:	4770      	bx	lr

08002724 <_isatty>:

int _isatty(int file)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800272c:	2301      	movs	r3, #1
}
 800272e:	4618      	mov	r0, r3
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr

08002738 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3714      	adds	r7, #20
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr

08002750 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002758:	4a14      	ldr	r2, [pc, #80]	@ (80027ac <_sbrk+0x5c>)
 800275a:	4b15      	ldr	r3, [pc, #84]	@ (80027b0 <_sbrk+0x60>)
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002764:	4b13      	ldr	r3, [pc, #76]	@ (80027b4 <_sbrk+0x64>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d102      	bne.n	8002772 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800276c:	4b11      	ldr	r3, [pc, #68]	@ (80027b4 <_sbrk+0x64>)
 800276e:	4a12      	ldr	r2, [pc, #72]	@ (80027b8 <_sbrk+0x68>)
 8002770:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002772:	4b10      	ldr	r3, [pc, #64]	@ (80027b4 <_sbrk+0x64>)
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4413      	add	r3, r2
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	429a      	cmp	r2, r3
 800277e:	d207      	bcs.n	8002790 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002780:	f003 fe1a 	bl	80063b8 <__errno>
 8002784:	4603      	mov	r3, r0
 8002786:	220c      	movs	r2, #12
 8002788:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800278a:	f04f 33ff 	mov.w	r3, #4294967295
 800278e:	e009      	b.n	80027a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002790:	4b08      	ldr	r3, [pc, #32]	@ (80027b4 <_sbrk+0x64>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002796:	4b07      	ldr	r3, [pc, #28]	@ (80027b4 <_sbrk+0x64>)
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4413      	add	r3, r2
 800279e:	4a05      	ldr	r2, [pc, #20]	@ (80027b4 <_sbrk+0x64>)
 80027a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027a2:	68fb      	ldr	r3, [r7, #12]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3718      	adds	r7, #24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	20005000 	.word	0x20005000
 80027b0:	00000400 	.word	0x00000400
 80027b4:	20000404 	.word	0x20000404
 80027b8:	20000558 	.word	0x20000558

080027bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027c0:	bf00      	nop
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr

080027c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027c8:	f7ff fff8 	bl	80027bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027cc:	480b      	ldr	r0, [pc, #44]	@ (80027fc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80027ce:	490c      	ldr	r1, [pc, #48]	@ (8002800 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80027d0:	4a0c      	ldr	r2, [pc, #48]	@ (8002804 <LoopFillZerobss+0x16>)
  movs r3, #0
 80027d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027d4:	e002      	b.n	80027dc <LoopCopyDataInit>

080027d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027da:	3304      	adds	r3, #4

080027dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027e0:	d3f9      	bcc.n	80027d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027e2:	4a09      	ldr	r2, [pc, #36]	@ (8002808 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80027e4:	4c09      	ldr	r4, [pc, #36]	@ (800280c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027e8:	e001      	b.n	80027ee <LoopFillZerobss>

080027ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027ec:	3204      	adds	r2, #4

080027ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027f0:	d3fb      	bcc.n	80027ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027f2:	f003 fde7 	bl	80063c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027f6:	f7ff fccb 	bl	8002190 <main>
  bx lr
 80027fa:	4770      	bx	lr
  ldr r0, =_sdata
 80027fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002800:	20000260 	.word	0x20000260
  ldr r2, =_sidata
 8002804:	080088d0 	.word	0x080088d0
  ldr r2, =_sbss
 8002808:	20000260 	.word	0x20000260
  ldr r4, =_ebss
 800280c:	20000558 	.word	0x20000558

08002810 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002810:	e7fe      	b.n	8002810 <ADC1_2_IRQHandler>
	...

08002814 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002818:	4b08      	ldr	r3, [pc, #32]	@ (800283c <HAL_Init+0x28>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a07      	ldr	r2, [pc, #28]	@ (800283c <HAL_Init+0x28>)
 800281e:	f043 0310 	orr.w	r3, r3, #16
 8002822:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002824:	2003      	movs	r0, #3
 8002826:	f000 f947 	bl	8002ab8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800282a:	200f      	movs	r0, #15
 800282c:	f000 f808 	bl	8002840 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002830:	f7ff fe14 	bl	800245c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40022000 	.word	0x40022000

08002840 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002848:	4b12      	ldr	r3, [pc, #72]	@ (8002894 <HAL_InitTick+0x54>)
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	4b12      	ldr	r3, [pc, #72]	@ (8002898 <HAL_InitTick+0x58>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	4619      	mov	r1, r3
 8002852:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002856:	fbb3 f3f1 	udiv	r3, r3, r1
 800285a:	fbb2 f3f3 	udiv	r3, r2, r3
 800285e:	4618      	mov	r0, r3
 8002860:	f000 f95f 	bl	8002b22 <HAL_SYSTICK_Config>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e00e      	b.n	800288c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b0f      	cmp	r3, #15
 8002872:	d80a      	bhi.n	800288a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002874:	2200      	movs	r2, #0
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	f04f 30ff 	mov.w	r0, #4294967295
 800287c:	f000 f927 	bl	8002ace <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002880:	4a06      	ldr	r2, [pc, #24]	@ (800289c <HAL_InitTick+0x5c>)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002886:	2300      	movs	r3, #0
 8002888:	e000      	b.n	800288c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
}
 800288c:	4618      	mov	r0, r3
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	2000008c 	.word	0x2000008c
 8002898:	20000094 	.word	0x20000094
 800289c:	20000090 	.word	0x20000090

080028a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028a4:	4b05      	ldr	r3, [pc, #20]	@ (80028bc <HAL_IncTick+0x1c>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	461a      	mov	r2, r3
 80028aa:	4b05      	ldr	r3, [pc, #20]	@ (80028c0 <HAL_IncTick+0x20>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4413      	add	r3, r2
 80028b0:	4a03      	ldr	r2, [pc, #12]	@ (80028c0 <HAL_IncTick+0x20>)
 80028b2:	6013      	str	r3, [r2, #0]
}
 80028b4:	bf00      	nop
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr
 80028bc:	20000094 	.word	0x20000094
 80028c0:	20000408 	.word	0x20000408

080028c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  return uwTick;
 80028c8:	4b02      	ldr	r3, [pc, #8]	@ (80028d4 <HAL_GetTick+0x10>)
 80028ca:	681b      	ldr	r3, [r3, #0]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr
 80028d4:	20000408 	.word	0x20000408

080028d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028e0:	f7ff fff0 	bl	80028c4 <HAL_GetTick>
 80028e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f0:	d005      	beq.n	80028fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028f2:	4b0a      	ldr	r3, [pc, #40]	@ (800291c <HAL_Delay+0x44>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	461a      	mov	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4413      	add	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028fe:	bf00      	nop
 8002900:	f7ff ffe0 	bl	80028c4 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	429a      	cmp	r2, r3
 800290e:	d8f7      	bhi.n	8002900 <HAL_Delay+0x28>
  {
  }
}
 8002910:	bf00      	nop
 8002912:	bf00      	nop
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	20000094 	.word	0x20000094

08002920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002930:	4b0c      	ldr	r3, [pc, #48]	@ (8002964 <__NVIC_SetPriorityGrouping+0x44>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002936:	68ba      	ldr	r2, [r7, #8]
 8002938:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800293c:	4013      	ands	r3, r2
 800293e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002948:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800294c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002952:	4a04      	ldr	r2, [pc, #16]	@ (8002964 <__NVIC_SetPriorityGrouping+0x44>)
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	60d3      	str	r3, [r2, #12]
}
 8002958:	bf00      	nop
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	bc80      	pop	{r7}
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	e000ed00 	.word	0xe000ed00

08002968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800296c:	4b04      	ldr	r3, [pc, #16]	@ (8002980 <__NVIC_GetPriorityGrouping+0x18>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	0a1b      	lsrs	r3, r3, #8
 8002972:	f003 0307 	and.w	r3, r3, #7
}
 8002976:	4618      	mov	r0, r3
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800298e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002992:	2b00      	cmp	r3, #0
 8002994:	db0b      	blt.n	80029ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	f003 021f 	and.w	r2, r3, #31
 800299c:	4906      	ldr	r1, [pc, #24]	@ (80029b8 <__NVIC_EnableIRQ+0x34>)
 800299e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a2:	095b      	lsrs	r3, r3, #5
 80029a4:	2001      	movs	r0, #1
 80029a6:	fa00 f202 	lsl.w	r2, r0, r2
 80029aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr
 80029b8:	e000e100 	.word	0xe000e100

080029bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	6039      	str	r1, [r7, #0]
 80029c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	db0a      	blt.n	80029e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	490c      	ldr	r1, [pc, #48]	@ (8002a08 <__NVIC_SetPriority+0x4c>)
 80029d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029da:	0112      	lsls	r2, r2, #4
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	440b      	add	r3, r1
 80029e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029e4:	e00a      	b.n	80029fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	4908      	ldr	r1, [pc, #32]	@ (8002a0c <__NVIC_SetPriority+0x50>)
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	3b04      	subs	r3, #4
 80029f4:	0112      	lsls	r2, r2, #4
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	440b      	add	r3, r1
 80029fa:	761a      	strb	r2, [r3, #24]
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc80      	pop	{r7}
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	e000e100 	.word	0xe000e100
 8002a0c:	e000ed00 	.word	0xe000ed00

08002a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b089      	sub	sp, #36	@ 0x24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f1c3 0307 	rsb	r3, r3, #7
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	bf28      	it	cs
 8002a2e:	2304      	movcs	r3, #4
 8002a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3304      	adds	r3, #4
 8002a36:	2b06      	cmp	r3, #6
 8002a38:	d902      	bls.n	8002a40 <NVIC_EncodePriority+0x30>
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	3b03      	subs	r3, #3
 8002a3e:	e000      	b.n	8002a42 <NVIC_EncodePriority+0x32>
 8002a40:	2300      	movs	r3, #0
 8002a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a44:	f04f 32ff 	mov.w	r2, #4294967295
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	43da      	mvns	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	401a      	ands	r2, r3
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a58:	f04f 31ff 	mov.w	r1, #4294967295
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a62:	43d9      	mvns	r1, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a68:	4313      	orrs	r3, r2
         );
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3724      	adds	r7, #36	@ 0x24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr

08002a74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a84:	d301      	bcc.n	8002a8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a86:	2301      	movs	r3, #1
 8002a88:	e00f      	b.n	8002aaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8002ab4 <SysTick_Config+0x40>)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a92:	210f      	movs	r1, #15
 8002a94:	f04f 30ff 	mov.w	r0, #4294967295
 8002a98:	f7ff ff90 	bl	80029bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a9c:	4b05      	ldr	r3, [pc, #20]	@ (8002ab4 <SysTick_Config+0x40>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aa2:	4b04      	ldr	r3, [pc, #16]	@ (8002ab4 <SysTick_Config+0x40>)
 8002aa4:	2207      	movs	r2, #7
 8002aa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	e000e010 	.word	0xe000e010

08002ab8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f7ff ff2d 	bl	8002920 <__NVIC_SetPriorityGrouping>
}
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b086      	sub	sp, #24
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	60b9      	str	r1, [r7, #8]
 8002ad8:	607a      	str	r2, [r7, #4]
 8002ada:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ae0:	f7ff ff42 	bl	8002968 <__NVIC_GetPriorityGrouping>
 8002ae4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	68b9      	ldr	r1, [r7, #8]
 8002aea:	6978      	ldr	r0, [r7, #20]
 8002aec:	f7ff ff90 	bl	8002a10 <NVIC_EncodePriority>
 8002af0:	4602      	mov	r2, r0
 8002af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002af6:	4611      	mov	r1, r2
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff ff5f 	bl	80029bc <__NVIC_SetPriority>
}
 8002afe:	bf00      	nop
 8002b00:	3718      	adds	r7, #24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b082      	sub	sp, #8
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff ff35 	bl	8002984 <__NVIC_EnableIRQ>
}
 8002b1a:	bf00      	nop
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b082      	sub	sp, #8
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7ff ffa2 	bl	8002a74 <SysTick_Config>
 8002b30:	4603      	mov	r3, r0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
	...

08002b3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b08b      	sub	sp, #44	@ 0x2c
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b46:	2300      	movs	r3, #0
 8002b48:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b4e:	e169      	b.n	8002e24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b50:	2201      	movs	r2, #1
 8002b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	69fa      	ldr	r2, [r7, #28]
 8002b60:	4013      	ands	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	f040 8158 	bne.w	8002e1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	4a9a      	ldr	r2, [pc, #616]	@ (8002ddc <HAL_GPIO_Init+0x2a0>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d05e      	beq.n	8002c36 <HAL_GPIO_Init+0xfa>
 8002b78:	4a98      	ldr	r2, [pc, #608]	@ (8002ddc <HAL_GPIO_Init+0x2a0>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d875      	bhi.n	8002c6a <HAL_GPIO_Init+0x12e>
 8002b7e:	4a98      	ldr	r2, [pc, #608]	@ (8002de0 <HAL_GPIO_Init+0x2a4>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d058      	beq.n	8002c36 <HAL_GPIO_Init+0xfa>
 8002b84:	4a96      	ldr	r2, [pc, #600]	@ (8002de0 <HAL_GPIO_Init+0x2a4>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d86f      	bhi.n	8002c6a <HAL_GPIO_Init+0x12e>
 8002b8a:	4a96      	ldr	r2, [pc, #600]	@ (8002de4 <HAL_GPIO_Init+0x2a8>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d052      	beq.n	8002c36 <HAL_GPIO_Init+0xfa>
 8002b90:	4a94      	ldr	r2, [pc, #592]	@ (8002de4 <HAL_GPIO_Init+0x2a8>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d869      	bhi.n	8002c6a <HAL_GPIO_Init+0x12e>
 8002b96:	4a94      	ldr	r2, [pc, #592]	@ (8002de8 <HAL_GPIO_Init+0x2ac>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d04c      	beq.n	8002c36 <HAL_GPIO_Init+0xfa>
 8002b9c:	4a92      	ldr	r2, [pc, #584]	@ (8002de8 <HAL_GPIO_Init+0x2ac>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d863      	bhi.n	8002c6a <HAL_GPIO_Init+0x12e>
 8002ba2:	4a92      	ldr	r2, [pc, #584]	@ (8002dec <HAL_GPIO_Init+0x2b0>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d046      	beq.n	8002c36 <HAL_GPIO_Init+0xfa>
 8002ba8:	4a90      	ldr	r2, [pc, #576]	@ (8002dec <HAL_GPIO_Init+0x2b0>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d85d      	bhi.n	8002c6a <HAL_GPIO_Init+0x12e>
 8002bae:	2b12      	cmp	r3, #18
 8002bb0:	d82a      	bhi.n	8002c08 <HAL_GPIO_Init+0xcc>
 8002bb2:	2b12      	cmp	r3, #18
 8002bb4:	d859      	bhi.n	8002c6a <HAL_GPIO_Init+0x12e>
 8002bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8002bbc <HAL_GPIO_Init+0x80>)
 8002bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bbc:	08002c37 	.word	0x08002c37
 8002bc0:	08002c11 	.word	0x08002c11
 8002bc4:	08002c23 	.word	0x08002c23
 8002bc8:	08002c65 	.word	0x08002c65
 8002bcc:	08002c6b 	.word	0x08002c6b
 8002bd0:	08002c6b 	.word	0x08002c6b
 8002bd4:	08002c6b 	.word	0x08002c6b
 8002bd8:	08002c6b 	.word	0x08002c6b
 8002bdc:	08002c6b 	.word	0x08002c6b
 8002be0:	08002c6b 	.word	0x08002c6b
 8002be4:	08002c6b 	.word	0x08002c6b
 8002be8:	08002c6b 	.word	0x08002c6b
 8002bec:	08002c6b 	.word	0x08002c6b
 8002bf0:	08002c6b 	.word	0x08002c6b
 8002bf4:	08002c6b 	.word	0x08002c6b
 8002bf8:	08002c6b 	.word	0x08002c6b
 8002bfc:	08002c6b 	.word	0x08002c6b
 8002c00:	08002c19 	.word	0x08002c19
 8002c04:	08002c2d 	.word	0x08002c2d
 8002c08:	4a79      	ldr	r2, [pc, #484]	@ (8002df0 <HAL_GPIO_Init+0x2b4>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d013      	beq.n	8002c36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c0e:	e02c      	b.n	8002c6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	623b      	str	r3, [r7, #32]
          break;
 8002c16:	e029      	b.n	8002c6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	623b      	str	r3, [r7, #32]
          break;
 8002c20:	e024      	b.n	8002c6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	3308      	adds	r3, #8
 8002c28:	623b      	str	r3, [r7, #32]
          break;
 8002c2a:	e01f      	b.n	8002c6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	330c      	adds	r3, #12
 8002c32:	623b      	str	r3, [r7, #32]
          break;
 8002c34:	e01a      	b.n	8002c6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d102      	bne.n	8002c44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c3e:	2304      	movs	r3, #4
 8002c40:	623b      	str	r3, [r7, #32]
          break;
 8002c42:	e013      	b.n	8002c6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d105      	bne.n	8002c58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c4c:	2308      	movs	r3, #8
 8002c4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	69fa      	ldr	r2, [r7, #28]
 8002c54:	611a      	str	r2, [r3, #16]
          break;
 8002c56:	e009      	b.n	8002c6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c58:	2308      	movs	r3, #8
 8002c5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	69fa      	ldr	r2, [r7, #28]
 8002c60:	615a      	str	r2, [r3, #20]
          break;
 8002c62:	e003      	b.n	8002c6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c64:	2300      	movs	r3, #0
 8002c66:	623b      	str	r3, [r7, #32]
          break;
 8002c68:	e000      	b.n	8002c6c <HAL_GPIO_Init+0x130>
          break;
 8002c6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	2bff      	cmp	r3, #255	@ 0xff
 8002c70:	d801      	bhi.n	8002c76 <HAL_GPIO_Init+0x13a>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	e001      	b.n	8002c7a <HAL_GPIO_Init+0x13e>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	3304      	adds	r3, #4
 8002c7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	2bff      	cmp	r3, #255	@ 0xff
 8002c80:	d802      	bhi.n	8002c88 <HAL_GPIO_Init+0x14c>
 8002c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	e002      	b.n	8002c8e <HAL_GPIO_Init+0x152>
 8002c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8a:	3b08      	subs	r3, #8
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	210f      	movs	r1, #15
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	401a      	ands	r2, r3
 8002ca0:	6a39      	ldr	r1, [r7, #32]
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f000 80b1 	beq.w	8002e1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002cbc:	4b4d      	ldr	r3, [pc, #308]	@ (8002df4 <HAL_GPIO_Init+0x2b8>)
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	4a4c      	ldr	r2, [pc, #304]	@ (8002df4 <HAL_GPIO_Init+0x2b8>)
 8002cc2:	f043 0301 	orr.w	r3, r3, #1
 8002cc6:	6193      	str	r3, [r2, #24]
 8002cc8:	4b4a      	ldr	r3, [pc, #296]	@ (8002df4 <HAL_GPIO_Init+0x2b8>)
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	60bb      	str	r3, [r7, #8]
 8002cd2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002cd4:	4a48      	ldr	r2, [pc, #288]	@ (8002df8 <HAL_GPIO_Init+0x2bc>)
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd8:	089b      	lsrs	r3, r3, #2
 8002cda:	3302      	adds	r3, #2
 8002cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ce0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce4:	f003 0303 	and.w	r3, r3, #3
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	220f      	movs	r2, #15
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a40      	ldr	r2, [pc, #256]	@ (8002dfc <HAL_GPIO_Init+0x2c0>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d013      	beq.n	8002d28 <HAL_GPIO_Init+0x1ec>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a3f      	ldr	r2, [pc, #252]	@ (8002e00 <HAL_GPIO_Init+0x2c4>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d00d      	beq.n	8002d24 <HAL_GPIO_Init+0x1e8>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a3e      	ldr	r2, [pc, #248]	@ (8002e04 <HAL_GPIO_Init+0x2c8>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d007      	beq.n	8002d20 <HAL_GPIO_Init+0x1e4>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a3d      	ldr	r2, [pc, #244]	@ (8002e08 <HAL_GPIO_Init+0x2cc>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d101      	bne.n	8002d1c <HAL_GPIO_Init+0x1e0>
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e006      	b.n	8002d2a <HAL_GPIO_Init+0x1ee>
 8002d1c:	2304      	movs	r3, #4
 8002d1e:	e004      	b.n	8002d2a <HAL_GPIO_Init+0x1ee>
 8002d20:	2302      	movs	r3, #2
 8002d22:	e002      	b.n	8002d2a <HAL_GPIO_Init+0x1ee>
 8002d24:	2301      	movs	r3, #1
 8002d26:	e000      	b.n	8002d2a <HAL_GPIO_Init+0x1ee>
 8002d28:	2300      	movs	r3, #0
 8002d2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d2c:	f002 0203 	and.w	r2, r2, #3
 8002d30:	0092      	lsls	r2, r2, #2
 8002d32:	4093      	lsls	r3, r2
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d3a:	492f      	ldr	r1, [pc, #188]	@ (8002df8 <HAL_GPIO_Init+0x2bc>)
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3e:	089b      	lsrs	r3, r3, #2
 8002d40:	3302      	adds	r3, #2
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d006      	beq.n	8002d62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d54:	4b2d      	ldr	r3, [pc, #180]	@ (8002e0c <HAL_GPIO_Init+0x2d0>)
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	492c      	ldr	r1, [pc, #176]	@ (8002e0c <HAL_GPIO_Init+0x2d0>)
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	608b      	str	r3, [r1, #8]
 8002d60:	e006      	b.n	8002d70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d62:	4b2a      	ldr	r3, [pc, #168]	@ (8002e0c <HAL_GPIO_Init+0x2d0>)
 8002d64:	689a      	ldr	r2, [r3, #8]
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	4928      	ldr	r1, [pc, #160]	@ (8002e0c <HAL_GPIO_Init+0x2d0>)
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d006      	beq.n	8002d8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d7c:	4b23      	ldr	r3, [pc, #140]	@ (8002e0c <HAL_GPIO_Init+0x2d0>)
 8002d7e:	68da      	ldr	r2, [r3, #12]
 8002d80:	4922      	ldr	r1, [pc, #136]	@ (8002e0c <HAL_GPIO_Init+0x2d0>)
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	60cb      	str	r3, [r1, #12]
 8002d88:	e006      	b.n	8002d98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d8a:	4b20      	ldr	r3, [pc, #128]	@ (8002e0c <HAL_GPIO_Init+0x2d0>)
 8002d8c:	68da      	ldr	r2, [r3, #12]
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	43db      	mvns	r3, r3
 8002d92:	491e      	ldr	r1, [pc, #120]	@ (8002e0c <HAL_GPIO_Init+0x2d0>)
 8002d94:	4013      	ands	r3, r2
 8002d96:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d006      	beq.n	8002db2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002da4:	4b19      	ldr	r3, [pc, #100]	@ (8002e0c <HAL_GPIO_Init+0x2d0>)
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	4918      	ldr	r1, [pc, #96]	@ (8002e0c <HAL_GPIO_Init+0x2d0>)
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	604b      	str	r3, [r1, #4]
 8002db0:	e006      	b.n	8002dc0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002db2:	4b16      	ldr	r3, [pc, #88]	@ (8002e0c <HAL_GPIO_Init+0x2d0>)
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	43db      	mvns	r3, r3
 8002dba:	4914      	ldr	r1, [pc, #80]	@ (8002e0c <HAL_GPIO_Init+0x2d0>)
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d021      	beq.n	8002e10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8002e0c <HAL_GPIO_Init+0x2d0>)
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	490e      	ldr	r1, [pc, #56]	@ (8002e0c <HAL_GPIO_Init+0x2d0>)
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	600b      	str	r3, [r1, #0]
 8002dd8:	e021      	b.n	8002e1e <HAL_GPIO_Init+0x2e2>
 8002dda:	bf00      	nop
 8002ddc:	10320000 	.word	0x10320000
 8002de0:	10310000 	.word	0x10310000
 8002de4:	10220000 	.word	0x10220000
 8002de8:	10210000 	.word	0x10210000
 8002dec:	10120000 	.word	0x10120000
 8002df0:	10110000 	.word	0x10110000
 8002df4:	40021000 	.word	0x40021000
 8002df8:	40010000 	.word	0x40010000
 8002dfc:	40010800 	.word	0x40010800
 8002e00:	40010c00 	.word	0x40010c00
 8002e04:	40011000 	.word	0x40011000
 8002e08:	40011400 	.word	0x40011400
 8002e0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e10:	4b0b      	ldr	r3, [pc, #44]	@ (8002e40 <HAL_GPIO_Init+0x304>)
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	43db      	mvns	r3, r3
 8002e18:	4909      	ldr	r1, [pc, #36]	@ (8002e40 <HAL_GPIO_Init+0x304>)
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e20:	3301      	adds	r3, #1
 8002e22:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f47f ae8e 	bne.w	8002b50 <HAL_GPIO_Init+0x14>
  }
}
 8002e34:	bf00      	nop
 8002e36:	bf00      	nop
 8002e38:	372c      	adds	r7, #44	@ 0x2c
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bc80      	pop	{r7}
 8002e3e:	4770      	bx	lr
 8002e40:	40010400 	.word	0x40010400

08002e44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	807b      	strh	r3, [r7, #2]
 8002e50:	4613      	mov	r3, r2
 8002e52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e54:	787b      	ldrb	r3, [r7, #1]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e5a:	887a      	ldrh	r2, [r7, #2]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e60:	e003      	b.n	8002e6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e62:	887b      	ldrh	r3, [r7, #2]
 8002e64:	041a      	lsls	r2, r3, #16
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	611a      	str	r2, [r3, #16]
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bc80      	pop	{r7}
 8002e72:	4770      	bx	lr

08002e74 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e86:	887a      	ldrh	r2, [r7, #2]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	041a      	lsls	r2, r3, #16
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	43d9      	mvns	r1, r3
 8002e92:	887b      	ldrh	r3, [r7, #2]
 8002e94:	400b      	ands	r3, r1
 8002e96:	431a      	orrs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	611a      	str	r2, [r3, #16]
}
 8002e9c:	bf00      	nop
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bc80      	pop	{r7}
 8002ea4:	4770      	bx	lr
	...

08002ea8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002eb2:	4b08      	ldr	r3, [pc, #32]	@ (8002ed4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002eb4:	695a      	ldr	r2, [r3, #20]
 8002eb6:	88fb      	ldrh	r3, [r7, #6]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d006      	beq.n	8002ecc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ebe:	4a05      	ldr	r2, [pc, #20]	@ (8002ed4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ec0:	88fb      	ldrh	r3, [r7, #6]
 8002ec2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ec4:	88fb      	ldrh	r3, [r7, #6]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff faa4 	bl	8002414 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ecc:	bf00      	nop
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40010400 	.word	0x40010400

08002ed8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e12b      	b.n	8003142 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d106      	bne.n	8002f04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7ff fade 	bl	80024c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2224      	movs	r2, #36	@ 0x24
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0201 	bic.w	r2, r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f3c:	f002 f8b6 	bl	80050ac <HAL_RCC_GetPCLK1Freq>
 8002f40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	4a81      	ldr	r2, [pc, #516]	@ (800314c <HAL_I2C_Init+0x274>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d807      	bhi.n	8002f5c <HAL_I2C_Init+0x84>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	4a80      	ldr	r2, [pc, #512]	@ (8003150 <HAL_I2C_Init+0x278>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	bf94      	ite	ls
 8002f54:	2301      	movls	r3, #1
 8002f56:	2300      	movhi	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	e006      	b.n	8002f6a <HAL_I2C_Init+0x92>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	4a7d      	ldr	r2, [pc, #500]	@ (8003154 <HAL_I2C_Init+0x27c>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	bf94      	ite	ls
 8002f64:	2301      	movls	r3, #1
 8002f66:	2300      	movhi	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e0e7      	b.n	8003142 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	4a78      	ldr	r2, [pc, #480]	@ (8003158 <HAL_I2C_Init+0x280>)
 8002f76:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7a:	0c9b      	lsrs	r3, r3, #18
 8002f7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	4a6a      	ldr	r2, [pc, #424]	@ (800314c <HAL_I2C_Init+0x274>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d802      	bhi.n	8002fac <HAL_I2C_Init+0xd4>
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	e009      	b.n	8002fc0 <HAL_I2C_Init+0xe8>
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002fb2:	fb02 f303 	mul.w	r3, r2, r3
 8002fb6:	4a69      	ldr	r2, [pc, #420]	@ (800315c <HAL_I2C_Init+0x284>)
 8002fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbc:	099b      	lsrs	r3, r3, #6
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	6812      	ldr	r2, [r2, #0]
 8002fc4:	430b      	orrs	r3, r1
 8002fc6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002fd2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	495c      	ldr	r1, [pc, #368]	@ (800314c <HAL_I2C_Init+0x274>)
 8002fdc:	428b      	cmp	r3, r1
 8002fde:	d819      	bhi.n	8003014 <HAL_I2C_Init+0x13c>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	1e59      	subs	r1, r3, #1
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fee:	1c59      	adds	r1, r3, #1
 8002ff0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002ff4:	400b      	ands	r3, r1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00a      	beq.n	8003010 <HAL_I2C_Init+0x138>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	1e59      	subs	r1, r3, #1
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	fbb1 f3f3 	udiv	r3, r1, r3
 8003008:	3301      	adds	r3, #1
 800300a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800300e:	e051      	b.n	80030b4 <HAL_I2C_Init+0x1dc>
 8003010:	2304      	movs	r3, #4
 8003012:	e04f      	b.n	80030b4 <HAL_I2C_Init+0x1dc>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d111      	bne.n	8003040 <HAL_I2C_Init+0x168>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	1e58      	subs	r0, r3, #1
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6859      	ldr	r1, [r3, #4]
 8003024:	460b      	mov	r3, r1
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	440b      	add	r3, r1
 800302a:	fbb0 f3f3 	udiv	r3, r0, r3
 800302e:	3301      	adds	r3, #1
 8003030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003034:	2b00      	cmp	r3, #0
 8003036:	bf0c      	ite	eq
 8003038:	2301      	moveq	r3, #1
 800303a:	2300      	movne	r3, #0
 800303c:	b2db      	uxtb	r3, r3
 800303e:	e012      	b.n	8003066 <HAL_I2C_Init+0x18e>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	1e58      	subs	r0, r3, #1
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6859      	ldr	r1, [r3, #4]
 8003048:	460b      	mov	r3, r1
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	440b      	add	r3, r1
 800304e:	0099      	lsls	r1, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	fbb0 f3f3 	udiv	r3, r0, r3
 8003056:	3301      	adds	r3, #1
 8003058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800305c:	2b00      	cmp	r3, #0
 800305e:	bf0c      	ite	eq
 8003060:	2301      	moveq	r3, #1
 8003062:	2300      	movne	r3, #0
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <HAL_I2C_Init+0x196>
 800306a:	2301      	movs	r3, #1
 800306c:	e022      	b.n	80030b4 <HAL_I2C_Init+0x1dc>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10e      	bne.n	8003094 <HAL_I2C_Init+0x1bc>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	1e58      	subs	r0, r3, #1
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6859      	ldr	r1, [r3, #4]
 800307e:	460b      	mov	r3, r1
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	440b      	add	r3, r1
 8003084:	fbb0 f3f3 	udiv	r3, r0, r3
 8003088:	3301      	adds	r3, #1
 800308a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800308e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003092:	e00f      	b.n	80030b4 <HAL_I2C_Init+0x1dc>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	1e58      	subs	r0, r3, #1
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6859      	ldr	r1, [r3, #4]
 800309c:	460b      	mov	r3, r1
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	440b      	add	r3, r1
 80030a2:	0099      	lsls	r1, r3, #2
 80030a4:	440b      	add	r3, r1
 80030a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030aa:	3301      	adds	r3, #1
 80030ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	6809      	ldr	r1, [r1, #0]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69da      	ldr	r2, [r3, #28]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80030e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6911      	ldr	r1, [r2, #16]
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	68d2      	ldr	r2, [r2, #12]
 80030ee:	4311      	orrs	r1, r2
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	6812      	ldr	r2, [r2, #0]
 80030f4:	430b      	orrs	r3, r1
 80030f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	695a      	ldr	r2, [r3, #20]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	430a      	orrs	r2, r1
 8003112:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f042 0201 	orr.w	r2, r2, #1
 8003122:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2220      	movs	r2, #32
 800312e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	000186a0 	.word	0x000186a0
 8003150:	001e847f 	.word	0x001e847f
 8003154:	003d08ff 	.word	0x003d08ff
 8003158:	431bde83 	.word	0x431bde83
 800315c:	10624dd3 	.word	0x10624dd3

08003160 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b088      	sub	sp, #32
 8003164:	af02      	add	r7, sp, #8
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	607a      	str	r2, [r7, #4]
 800316a:	461a      	mov	r2, r3
 800316c:	460b      	mov	r3, r1
 800316e:	817b      	strh	r3, [r7, #10]
 8003170:	4613      	mov	r3, r2
 8003172:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003174:	f7ff fba6 	bl	80028c4 <HAL_GetTick>
 8003178:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b20      	cmp	r3, #32
 8003184:	f040 80e0 	bne.w	8003348 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	2319      	movs	r3, #25
 800318e:	2201      	movs	r2, #1
 8003190:	4970      	ldr	r1, [pc, #448]	@ (8003354 <HAL_I2C_Master_Transmit+0x1f4>)
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f001 f98a 	bl	80044ac <I2C_WaitOnFlagUntilTimeout>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800319e:	2302      	movs	r3, #2
 80031a0:	e0d3      	b.n	800334a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d101      	bne.n	80031b0 <HAL_I2C_Master_Transmit+0x50>
 80031ac:	2302      	movs	r3, #2
 80031ae:	e0cc      	b.n	800334a <HAL_I2C_Master_Transmit+0x1ea>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d007      	beq.n	80031d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f042 0201 	orr.w	r2, r2, #1
 80031d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2221      	movs	r2, #33	@ 0x21
 80031ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2210      	movs	r2, #16
 80031f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	893a      	ldrh	r2, [r7, #8]
 8003206:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800320c:	b29a      	uxth	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	4a50      	ldr	r2, [pc, #320]	@ (8003358 <HAL_I2C_Master_Transmit+0x1f8>)
 8003216:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003218:	8979      	ldrh	r1, [r7, #10]
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	6a3a      	ldr	r2, [r7, #32]
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 fe76 	bl	8003f10 <I2C_MasterRequestWrite>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e08d      	b.n	800334a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800322e:	2300      	movs	r3, #0
 8003230:	613b      	str	r3, [r7, #16]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	613b      	str	r3, [r7, #16]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	613b      	str	r3, [r7, #16]
 8003242:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003244:	e066      	b.n	8003314 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	6a39      	ldr	r1, [r7, #32]
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f001 fa48 	bl	80046e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00d      	beq.n	8003272 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325a:	2b04      	cmp	r3, #4
 800325c:	d107      	bne.n	800326e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800326c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e06b      	b.n	800334a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003276:	781a      	ldrb	r2, [r3, #0]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003282:	1c5a      	adds	r2, r3, #1
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800328c:	b29b      	uxth	r3, r3
 800328e:	3b01      	subs	r3, #1
 8003290:	b29a      	uxth	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800329a:	3b01      	subs	r3, #1
 800329c:	b29a      	uxth	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b04      	cmp	r3, #4
 80032ae:	d11b      	bne.n	80032e8 <HAL_I2C_Master_Transmit+0x188>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d017      	beq.n	80032e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032bc:	781a      	ldrb	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c8:	1c5a      	adds	r2, r3, #1
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	3b01      	subs	r3, #1
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	6a39      	ldr	r1, [r7, #32]
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f001 fa3f 	bl	8004770 <I2C_WaitOnBTFFlagUntilTimeout>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00d      	beq.n	8003314 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fc:	2b04      	cmp	r3, #4
 80032fe:	d107      	bne.n	8003310 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800330e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e01a      	b.n	800334a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003318:	2b00      	cmp	r3, #0
 800331a:	d194      	bne.n	8003246 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800332a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2220      	movs	r2, #32
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003344:	2300      	movs	r3, #0
 8003346:	e000      	b.n	800334a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003348:	2302      	movs	r3, #2
  }
}
 800334a:	4618      	mov	r0, r3
 800334c:	3718      	adds	r7, #24
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	00100002 	.word	0x00100002
 8003358:	ffff0000 	.word	0xffff0000

0800335c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b08c      	sub	sp, #48	@ 0x30
 8003360:	af02      	add	r7, sp, #8
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	607a      	str	r2, [r7, #4]
 8003366:	461a      	mov	r2, r3
 8003368:	460b      	mov	r3, r1
 800336a:	817b      	strh	r3, [r7, #10]
 800336c:	4613      	mov	r3, r2
 800336e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003370:	2300      	movs	r3, #0
 8003372:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003374:	f7ff faa6 	bl	80028c4 <HAL_GetTick>
 8003378:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b20      	cmp	r3, #32
 8003384:	f040 824b 	bne.w	800381e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	2319      	movs	r3, #25
 800338e:	2201      	movs	r2, #1
 8003390:	497f      	ldr	r1, [pc, #508]	@ (8003590 <HAL_I2C_Master_Receive+0x234>)
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f001 f88a 	bl	80044ac <I2C_WaitOnFlagUntilTimeout>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800339e:	2302      	movs	r3, #2
 80033a0:	e23e      	b.n	8003820 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d101      	bne.n	80033b0 <HAL_I2C_Master_Receive+0x54>
 80033ac:	2302      	movs	r3, #2
 80033ae:	e237      	b.n	8003820 <HAL_I2C_Master_Receive+0x4c4>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d007      	beq.n	80033d6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f042 0201 	orr.w	r2, r2, #1
 80033d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2222      	movs	r2, #34	@ 0x22
 80033ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2210      	movs	r2, #16
 80033f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	893a      	ldrh	r2, [r7, #8]
 8003406:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800340c:	b29a      	uxth	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	4a5f      	ldr	r2, [pc, #380]	@ (8003594 <HAL_I2C_Master_Receive+0x238>)
 8003416:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003418:	8979      	ldrh	r1, [r7, #10]
 800341a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f000 fdf8 	bl	8004014 <I2C_MasterRequestRead>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e1f8      	b.n	8003820 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003432:	2b00      	cmp	r3, #0
 8003434:	d113      	bne.n	800345e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003436:	2300      	movs	r3, #0
 8003438:	61fb      	str	r3, [r7, #28]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	61fb      	str	r3, [r7, #28]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	61fb      	str	r3, [r7, #28]
 800344a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	e1cc      	b.n	80037f8 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003462:	2b01      	cmp	r3, #1
 8003464:	d11e      	bne.n	80034a4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003474:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003476:	b672      	cpsid	i
}
 8003478:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800347a:	2300      	movs	r3, #0
 800347c:	61bb      	str	r3, [r7, #24]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	61bb      	str	r3, [r7, #24]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	61bb      	str	r3, [r7, #24]
 800348e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800349e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80034a0:	b662      	cpsie	i
}
 80034a2:	e035      	b.n	8003510 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d11e      	bne.n	80034ea <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80034bc:	b672      	cpsid	i
}
 80034be:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034c0:	2300      	movs	r3, #0
 80034c2:	617b      	str	r3, [r7, #20]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	617b      	str	r3, [r7, #20]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	617b      	str	r3, [r7, #20]
 80034d4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80034e6:	b662      	cpsie	i
}
 80034e8:	e012      	b.n	8003510 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80034f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034fa:	2300      	movs	r3, #0
 80034fc:	613b      	str	r3, [r7, #16]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	695b      	ldr	r3, [r3, #20]
 8003504:	613b      	str	r3, [r7, #16]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	613b      	str	r3, [r7, #16]
 800350e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003510:	e172      	b.n	80037f8 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003516:	2b03      	cmp	r3, #3
 8003518:	f200 811f 	bhi.w	800375a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003520:	2b01      	cmp	r3, #1
 8003522:	d123      	bne.n	800356c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003524:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003526:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f001 f969 	bl	8004800 <I2C_WaitOnRXNEFlagUntilTimeout>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e173      	b.n	8003820 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	691a      	ldr	r2, [r3, #16]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003542:	b2d2      	uxtb	r2, r2
 8003544:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354a:	1c5a      	adds	r2, r3, #1
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003554:	3b01      	subs	r3, #1
 8003556:	b29a      	uxth	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003560:	b29b      	uxth	r3, r3
 8003562:	3b01      	subs	r3, #1
 8003564:	b29a      	uxth	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800356a:	e145      	b.n	80037f8 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003570:	2b02      	cmp	r3, #2
 8003572:	d152      	bne.n	800361a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003576:	9300      	str	r3, [sp, #0]
 8003578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800357a:	2200      	movs	r2, #0
 800357c:	4906      	ldr	r1, [pc, #24]	@ (8003598 <HAL_I2C_Master_Receive+0x23c>)
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f000 ff94 	bl	80044ac <I2C_WaitOnFlagUntilTimeout>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d008      	beq.n	800359c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e148      	b.n	8003820 <HAL_I2C_Master_Receive+0x4c4>
 800358e:	bf00      	nop
 8003590:	00100002 	.word	0x00100002
 8003594:	ffff0000 	.word	0xffff0000
 8003598:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800359c:	b672      	cpsid	i
}
 800359e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	691a      	ldr	r2, [r3, #16]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ba:	b2d2      	uxtb	r2, r2
 80035bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c2:	1c5a      	adds	r2, r3, #1
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035cc:	3b01      	subs	r3, #1
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035d8:	b29b      	uxth	r3, r3
 80035da:	3b01      	subs	r3, #1
 80035dc:	b29a      	uxth	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80035e2:	b662      	cpsie	i
}
 80035e4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	691a      	ldr	r2, [r3, #16]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f0:	b2d2      	uxtb	r2, r2
 80035f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f8:	1c5a      	adds	r2, r3, #1
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003602:	3b01      	subs	r3, #1
 8003604:	b29a      	uxth	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800360e:	b29b      	uxth	r3, r3
 8003610:	3b01      	subs	r3, #1
 8003612:	b29a      	uxth	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003618:	e0ee      	b.n	80037f8 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800361a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361c:	9300      	str	r3, [sp, #0]
 800361e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003620:	2200      	movs	r2, #0
 8003622:	4981      	ldr	r1, [pc, #516]	@ (8003828 <HAL_I2C_Master_Receive+0x4cc>)
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f000 ff41 	bl	80044ac <I2C_WaitOnFlagUntilTimeout>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d001      	beq.n	8003634 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e0f5      	b.n	8003820 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003642:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003644:	b672      	cpsid	i
}
 8003646:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	691a      	ldr	r2, [r3, #16]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003652:	b2d2      	uxtb	r2, r2
 8003654:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365a:	1c5a      	adds	r2, r3, #1
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003664:	3b01      	subs	r3, #1
 8003666:	b29a      	uxth	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003670:	b29b      	uxth	r3, r3
 8003672:	3b01      	subs	r3, #1
 8003674:	b29a      	uxth	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800367a:	4b6c      	ldr	r3, [pc, #432]	@ (800382c <HAL_I2C_Master_Receive+0x4d0>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	08db      	lsrs	r3, r3, #3
 8003680:	4a6b      	ldr	r2, [pc, #428]	@ (8003830 <HAL_I2C_Master_Receive+0x4d4>)
 8003682:	fba2 2303 	umull	r2, r3, r2, r3
 8003686:	0a1a      	lsrs	r2, r3, #8
 8003688:	4613      	mov	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4413      	add	r3, r2
 800368e:	00da      	lsls	r2, r3, #3
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003694:	6a3b      	ldr	r3, [r7, #32]
 8003696:	3b01      	subs	r3, #1
 8003698:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800369a:	6a3b      	ldr	r3, [r7, #32]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d118      	bne.n	80036d2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2220      	movs	r2, #32
 80036aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ba:	f043 0220 	orr.w	r2, r3, #32
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80036c2:	b662      	cpsie	i
}
 80036c4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e0a6      	b.n	8003820 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	695b      	ldr	r3, [r3, #20]
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b04      	cmp	r3, #4
 80036de:	d1d9      	bne.n	8003694 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	691a      	ldr	r2, [r3, #16]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fa:	b2d2      	uxtb	r2, r2
 80036fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003702:	1c5a      	adds	r2, r3, #1
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800370c:	3b01      	subs	r3, #1
 800370e:	b29a      	uxth	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003718:	b29b      	uxth	r3, r3
 800371a:	3b01      	subs	r3, #1
 800371c:	b29a      	uxth	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003722:	b662      	cpsie	i
}
 8003724:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	691a      	ldr	r2, [r3, #16]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003730:	b2d2      	uxtb	r2, r2
 8003732:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003738:	1c5a      	adds	r2, r3, #1
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003742:	3b01      	subs	r3, #1
 8003744:	b29a      	uxth	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800374e:	b29b      	uxth	r3, r3
 8003750:	3b01      	subs	r3, #1
 8003752:	b29a      	uxth	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003758:	e04e      	b.n	80037f8 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800375a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800375c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f001 f84e 	bl	8004800 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e058      	b.n	8003820 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	691a      	ldr	r2, [r3, #16]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003778:	b2d2      	uxtb	r2, r2
 800377a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003780:	1c5a      	adds	r2, r3, #1
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800378a:	3b01      	subs	r3, #1
 800378c:	b29a      	uxth	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003796:	b29b      	uxth	r3, r3
 8003798:	3b01      	subs	r3, #1
 800379a:	b29a      	uxth	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	f003 0304 	and.w	r3, r3, #4
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	d124      	bne.n	80037f8 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037b2:	2b03      	cmp	r3, #3
 80037b4:	d107      	bne.n	80037c6 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037c4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	691a      	ldr	r2, [r3, #16]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d0:	b2d2      	uxtb	r2, r2
 80037d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d8:	1c5a      	adds	r2, r3, #1
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037e2:	3b01      	subs	r3, #1
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	3b01      	subs	r3, #1
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f47f ae88 	bne.w	8003512 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2220      	movs	r2, #32
 8003806:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800381a:	2300      	movs	r3, #0
 800381c:	e000      	b.n	8003820 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800381e:	2302      	movs	r3, #2
  }
}
 8003820:	4618      	mov	r0, r3
 8003822:	3728      	adds	r7, #40	@ 0x28
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	00010004 	.word	0x00010004
 800382c:	2000008c 	.word	0x2000008c
 8003830:	14f8b589 	.word	0x14f8b589

08003834 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b088      	sub	sp, #32
 8003838:	af02      	add	r7, sp, #8
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	4608      	mov	r0, r1
 800383e:	4611      	mov	r1, r2
 8003840:	461a      	mov	r2, r3
 8003842:	4603      	mov	r3, r0
 8003844:	817b      	strh	r3, [r7, #10]
 8003846:	460b      	mov	r3, r1
 8003848:	813b      	strh	r3, [r7, #8]
 800384a:	4613      	mov	r3, r2
 800384c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800384e:	f7ff f839 	bl	80028c4 <HAL_GetTick>
 8003852:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b20      	cmp	r3, #32
 800385e:	f040 80d9 	bne.w	8003a14 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	9300      	str	r3, [sp, #0]
 8003866:	2319      	movs	r3, #25
 8003868:	2201      	movs	r2, #1
 800386a:	496d      	ldr	r1, [pc, #436]	@ (8003a20 <HAL_I2C_Mem_Write+0x1ec>)
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f000 fe1d 	bl	80044ac <I2C_WaitOnFlagUntilTimeout>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d001      	beq.n	800387c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003878:	2302      	movs	r3, #2
 800387a:	e0cc      	b.n	8003a16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003882:	2b01      	cmp	r3, #1
 8003884:	d101      	bne.n	800388a <HAL_I2C_Mem_Write+0x56>
 8003886:	2302      	movs	r3, #2
 8003888:	e0c5      	b.n	8003a16 <HAL_I2C_Mem_Write+0x1e2>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	2b01      	cmp	r3, #1
 800389e:	d007      	beq.n	80038b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0201 	orr.w	r2, r2, #1
 80038ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2221      	movs	r2, #33	@ 0x21
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2240      	movs	r2, #64	@ 0x40
 80038cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6a3a      	ldr	r2, [r7, #32]
 80038da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80038e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	4a4d      	ldr	r2, [pc, #308]	@ (8003a24 <HAL_I2C_Mem_Write+0x1f0>)
 80038f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038f2:	88f8      	ldrh	r0, [r7, #6]
 80038f4:	893a      	ldrh	r2, [r7, #8]
 80038f6:	8979      	ldrh	r1, [r7, #10]
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	9301      	str	r3, [sp, #4]
 80038fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	4603      	mov	r3, r0
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f000 fc54 	bl	80041b0 <I2C_RequestMemoryWrite>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d052      	beq.n	80039b4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e081      	b.n	8003a16 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 fee2 	bl	80046e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00d      	beq.n	800393e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003926:	2b04      	cmp	r3, #4
 8003928:	d107      	bne.n	800393a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003938:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e06b      	b.n	8003a16 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003942:	781a      	ldrb	r2, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800394e:	1c5a      	adds	r2, r3, #1
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003958:	3b01      	subs	r3, #1
 800395a:	b29a      	uxth	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003964:	b29b      	uxth	r3, r3
 8003966:	3b01      	subs	r3, #1
 8003968:	b29a      	uxth	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	f003 0304 	and.w	r3, r3, #4
 8003978:	2b04      	cmp	r3, #4
 800397a:	d11b      	bne.n	80039b4 <HAL_I2C_Mem_Write+0x180>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003980:	2b00      	cmp	r3, #0
 8003982:	d017      	beq.n	80039b4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003988:	781a      	ldrb	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800399e:	3b01      	subs	r3, #1
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	3b01      	subs	r3, #1
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1aa      	bne.n	8003912 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f000 fed5 	bl	8004770 <I2C_WaitOnBTFFlagUntilTimeout>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00d      	beq.n	80039e8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d0:	2b04      	cmp	r3, #4
 80039d2:	d107      	bne.n	80039e4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039e2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e016      	b.n	8003a16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2220      	movs	r2, #32
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003a10:	2300      	movs	r3, #0
 8003a12:	e000      	b.n	8003a16 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003a14:	2302      	movs	r3, #2
  }
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3718      	adds	r7, #24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	00100002 	.word	0x00100002
 8003a24:	ffff0000 	.word	0xffff0000

08003a28 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b08c      	sub	sp, #48	@ 0x30
 8003a2c:	af02      	add	r7, sp, #8
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	4608      	mov	r0, r1
 8003a32:	4611      	mov	r1, r2
 8003a34:	461a      	mov	r2, r3
 8003a36:	4603      	mov	r3, r0
 8003a38:	817b      	strh	r3, [r7, #10]
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	813b      	strh	r3, [r7, #8]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003a42:	2300      	movs	r3, #0
 8003a44:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a46:	f7fe ff3d 	bl	80028c4 <HAL_GetTick>
 8003a4a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b20      	cmp	r3, #32
 8003a56:	f040 8250 	bne.w	8003efa <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	2319      	movs	r3, #25
 8003a60:	2201      	movs	r2, #1
 8003a62:	4982      	ldr	r1, [pc, #520]	@ (8003c6c <HAL_I2C_Mem_Read+0x244>)
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f000 fd21 	bl	80044ac <I2C_WaitOnFlagUntilTimeout>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003a70:	2302      	movs	r3, #2
 8003a72:	e243      	b.n	8003efc <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d101      	bne.n	8003a82 <HAL_I2C_Mem_Read+0x5a>
 8003a7e:	2302      	movs	r3, #2
 8003a80:	e23c      	b.n	8003efc <HAL_I2C_Mem_Read+0x4d4>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d007      	beq.n	8003aa8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f042 0201 	orr.w	r2, r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ab6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2222      	movs	r2, #34	@ 0x22
 8003abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2240      	movs	r2, #64	@ 0x40
 8003ac4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ad2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003ad8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	4a62      	ldr	r2, [pc, #392]	@ (8003c70 <HAL_I2C_Mem_Read+0x248>)
 8003ae8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003aea:	88f8      	ldrh	r0, [r7, #6]
 8003aec:	893a      	ldrh	r2, [r7, #8]
 8003aee:	8979      	ldrh	r1, [r7, #10]
 8003af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af2:	9301      	str	r3, [sp, #4]
 8003af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	4603      	mov	r3, r0
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f000 fbee 	bl	80042dc <I2C_RequestMemoryRead>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e1f8      	b.n	8003efc <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d113      	bne.n	8003b3a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b12:	2300      	movs	r3, #0
 8003b14:	61fb      	str	r3, [r7, #28]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	61fb      	str	r3, [r7, #28]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	61fb      	str	r3, [r7, #28]
 8003b26:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	e1cc      	b.n	8003ed4 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d11e      	bne.n	8003b80 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b50:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b52:	b672      	cpsid	i
}
 8003b54:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b56:	2300      	movs	r3, #0
 8003b58:	61bb      	str	r3, [r7, #24]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	61bb      	str	r3, [r7, #24]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	61bb      	str	r3, [r7, #24]
 8003b6a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b7a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003b7c:	b662      	cpsie	i
}
 8003b7e:	e035      	b.n	8003bec <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d11e      	bne.n	8003bc6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b96:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b98:	b672      	cpsid	i
}
 8003b9a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	617b      	str	r3, [r7, #20]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	617b      	str	r3, [r7, #20]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	617b      	str	r3, [r7, #20]
 8003bb0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bc0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003bc2:	b662      	cpsie	i
}
 8003bc4:	e012      	b.n	8003bec <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003bd4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	613b      	str	r3, [r7, #16]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	613b      	str	r3, [r7, #16]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	613b      	str	r3, [r7, #16]
 8003bea:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003bec:	e172      	b.n	8003ed4 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bf2:	2b03      	cmp	r3, #3
 8003bf4:	f200 811f 	bhi.w	8003e36 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d123      	bne.n	8003c48 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c02:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f000 fdfb 	bl	8004800 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e173      	b.n	8003efc <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	691a      	ldr	r2, [r3, #16]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1e:	b2d2      	uxtb	r2, r2
 8003c20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c26:	1c5a      	adds	r2, r3, #1
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c30:	3b01      	subs	r3, #1
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c46:	e145      	b.n	8003ed4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d152      	bne.n	8003cf6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c56:	2200      	movs	r2, #0
 8003c58:	4906      	ldr	r1, [pc, #24]	@ (8003c74 <HAL_I2C_Mem_Read+0x24c>)
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 fc26 	bl	80044ac <I2C_WaitOnFlagUntilTimeout>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d008      	beq.n	8003c78 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e148      	b.n	8003efc <HAL_I2C_Mem_Read+0x4d4>
 8003c6a:	bf00      	nop
 8003c6c:	00100002 	.word	0x00100002
 8003c70:	ffff0000 	.word	0xffff0000
 8003c74:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003c78:	b672      	cpsid	i
}
 8003c7a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	691a      	ldr	r2, [r3, #16]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c96:	b2d2      	uxtb	r2, r2
 8003c98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9e:	1c5a      	adds	r2, r3, #1
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003cbe:	b662      	cpsie	i
}
 8003cc0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	691a      	ldr	r2, [r3, #16]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ccc:	b2d2      	uxtb	r2, r2
 8003cce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd4:	1c5a      	adds	r2, r3, #1
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	3b01      	subs	r3, #1
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003cf4:	e0ee      	b.n	8003ed4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf8:	9300      	str	r3, [sp, #0]
 8003cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	4981      	ldr	r1, [pc, #516]	@ (8003f04 <HAL_I2C_Mem_Read+0x4dc>)
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f000 fbd3 	bl	80044ac <I2C_WaitOnFlagUntilTimeout>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e0f5      	b.n	8003efc <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d1e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d20:	b672      	cpsid	i
}
 8003d22:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	691a      	ldr	r2, [r3, #16]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d36:	1c5a      	adds	r2, r3, #1
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d40:	3b01      	subs	r3, #1
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003d56:	4b6c      	ldr	r3, [pc, #432]	@ (8003f08 <HAL_I2C_Mem_Read+0x4e0>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	08db      	lsrs	r3, r3, #3
 8003d5c:	4a6b      	ldr	r2, [pc, #428]	@ (8003f0c <HAL_I2C_Mem_Read+0x4e4>)
 8003d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d62:	0a1a      	lsrs	r2, r3, #8
 8003d64:	4613      	mov	r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	4413      	add	r3, r2
 8003d6a:	00da      	lsls	r2, r3, #3
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003d70:	6a3b      	ldr	r3, [r7, #32]
 8003d72:	3b01      	subs	r3, #1
 8003d74:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003d76:	6a3b      	ldr	r3, [r7, #32]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d118      	bne.n	8003dae <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2220      	movs	r2, #32
 8003d86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d96:	f043 0220 	orr.w	r2, r3, #32
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003d9e:	b662      	cpsie	i
}
 8003da0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e0a6      	b.n	8003efc <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b04      	cmp	r3, #4
 8003dba:	d1d9      	bne.n	8003d70 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	691a      	ldr	r2, [r3, #16]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd6:	b2d2      	uxtb	r2, r2
 8003dd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dde:	1c5a      	adds	r2, r3, #1
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003de8:	3b01      	subs	r3, #1
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	3b01      	subs	r3, #1
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003dfe:	b662      	cpsie	i
}
 8003e00:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	691a      	ldr	r2, [r3, #16]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0c:	b2d2      	uxtb	r2, r2
 8003e0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e14:	1c5a      	adds	r2, r3, #1
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e34:	e04e      	b.n	8003ed4 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e38:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f000 fce0 	bl	8004800 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e058      	b.n	8003efc <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	691a      	ldr	r2, [r3, #16]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e54:	b2d2      	uxtb	r2, r2
 8003e56:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5c:	1c5a      	adds	r2, r3, #1
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e66:	3b01      	subs	r3, #1
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	3b01      	subs	r3, #1
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	f003 0304 	and.w	r3, r3, #4
 8003e86:	2b04      	cmp	r3, #4
 8003e88:	d124      	bne.n	8003ed4 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e8e:	2b03      	cmp	r3, #3
 8003e90:	d107      	bne.n	8003ea2 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ea0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	691a      	ldr	r2, [r3, #16]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eac:	b2d2      	uxtb	r2, r2
 8003eae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb4:	1c5a      	adds	r2, r3, #1
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f47f ae88 	bne.w	8003bee <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	e000      	b.n	8003efc <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8003efa:	2302      	movs	r3, #2
  }
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3728      	adds	r7, #40	@ 0x28
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	00010004 	.word	0x00010004
 8003f08:	2000008c 	.word	0x2000008c
 8003f0c:	14f8b589 	.word	0x14f8b589

08003f10 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b088      	sub	sp, #32
 8003f14:	af02      	add	r7, sp, #8
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	607a      	str	r2, [r7, #4]
 8003f1a:	603b      	str	r3, [r7, #0]
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f24:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	2b08      	cmp	r3, #8
 8003f2a:	d006      	beq.n	8003f3a <I2C_MasterRequestWrite+0x2a>
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d003      	beq.n	8003f3a <I2C_MasterRequestWrite+0x2a>
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f38:	d108      	bne.n	8003f4c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f48:	601a      	str	r2, [r3, #0]
 8003f4a:	e00b      	b.n	8003f64 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f50:	2b12      	cmp	r3, #18
 8003f52:	d107      	bne.n	8003f64 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f62:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	9300      	str	r3, [sp, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f000 fa9b 	bl	80044ac <I2C_WaitOnFlagUntilTimeout>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00d      	beq.n	8003f98 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f8a:	d103      	bne.n	8003f94 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f92:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e035      	b.n	8004004 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fa0:	d108      	bne.n	8003fb4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003fa2:	897b      	ldrh	r3, [r7, #10]
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003fb0:	611a      	str	r2, [r3, #16]
 8003fb2:	e01b      	b.n	8003fec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003fb4:	897b      	ldrh	r3, [r7, #10]
 8003fb6:	11db      	asrs	r3, r3, #7
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	f003 0306 	and.w	r3, r3, #6
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	f063 030f 	orn	r3, r3, #15
 8003fc4:	b2da      	uxtb	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	490e      	ldr	r1, [pc, #56]	@ (800400c <I2C_MasterRequestWrite+0xfc>)
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f000 fae4 	bl	80045a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e010      	b.n	8004004 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003fe2:	897b      	ldrh	r3, [r7, #10]
 8003fe4:	b2da      	uxtb	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	4907      	ldr	r1, [pc, #28]	@ (8004010 <I2C_MasterRequestWrite+0x100>)
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f000 fad4 	bl	80045a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e000      	b.n	8004004 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3718      	adds	r7, #24
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	00010008 	.word	0x00010008
 8004010:	00010002 	.word	0x00010002

08004014 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b088      	sub	sp, #32
 8004018:	af02      	add	r7, sp, #8
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	607a      	str	r2, [r7, #4]
 800401e:	603b      	str	r3, [r7, #0]
 8004020:	460b      	mov	r3, r1
 8004022:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004028:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004038:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	2b08      	cmp	r3, #8
 800403e:	d006      	beq.n	800404e <I2C_MasterRequestRead+0x3a>
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d003      	beq.n	800404e <I2C_MasterRequestRead+0x3a>
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800404c:	d108      	bne.n	8004060 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	e00b      	b.n	8004078 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004064:	2b11      	cmp	r3, #17
 8004066:	d107      	bne.n	8004078 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004076:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	9300      	str	r3, [sp, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f000 fa11 	bl	80044ac <I2C_WaitOnFlagUntilTimeout>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00d      	beq.n	80040ac <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800409a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800409e:	d103      	bne.n	80040a8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e079      	b.n	80041a0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040b4:	d108      	bne.n	80040c8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80040b6:	897b      	ldrh	r3, [r7, #10]
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	f043 0301 	orr.w	r3, r3, #1
 80040be:	b2da      	uxtb	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	611a      	str	r2, [r3, #16]
 80040c6:	e05f      	b.n	8004188 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80040c8:	897b      	ldrh	r3, [r7, #10]
 80040ca:	11db      	asrs	r3, r3, #7
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	f003 0306 	and.w	r3, r3, #6
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	f063 030f 	orn	r3, r3, #15
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	4930      	ldr	r1, [pc, #192]	@ (80041a8 <I2C_MasterRequestRead+0x194>)
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 fa5a 	bl	80045a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e054      	b.n	80041a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040f6:	897b      	ldrh	r3, [r7, #10]
 80040f8:	b2da      	uxtb	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	4929      	ldr	r1, [pc, #164]	@ (80041ac <I2C_MasterRequestRead+0x198>)
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 fa4a 	bl	80045a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e044      	b.n	80041a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004116:	2300      	movs	r3, #0
 8004118:	613b      	str	r3, [r7, #16]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	613b      	str	r3, [r7, #16]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	613b      	str	r3, [r7, #16]
 800412a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800413a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	9300      	str	r3, [sp, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f000 f9af 	bl	80044ac <I2C_WaitOnFlagUntilTimeout>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00d      	beq.n	8004170 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800415e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004162:	d103      	bne.n	800416c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800416a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e017      	b.n	80041a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004170:	897b      	ldrh	r3, [r7, #10]
 8004172:	11db      	asrs	r3, r3, #7
 8004174:	b2db      	uxtb	r3, r3
 8004176:	f003 0306 	and.w	r3, r3, #6
 800417a:	b2db      	uxtb	r3, r3
 800417c:	f063 030e 	orn	r3, r3, #14
 8004180:	b2da      	uxtb	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	4907      	ldr	r1, [pc, #28]	@ (80041ac <I2C_MasterRequestRead+0x198>)
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f000 fa06 	bl	80045a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e000      	b.n	80041a0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3718      	adds	r7, #24
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	00010008 	.word	0x00010008
 80041ac:	00010002 	.word	0x00010002

080041b0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b088      	sub	sp, #32
 80041b4:	af02      	add	r7, sp, #8
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	4608      	mov	r0, r1
 80041ba:	4611      	mov	r1, r2
 80041bc:	461a      	mov	r2, r3
 80041be:	4603      	mov	r3, r0
 80041c0:	817b      	strh	r3, [r7, #10]
 80041c2:	460b      	mov	r3, r1
 80041c4:	813b      	strh	r3, [r7, #8]
 80041c6:	4613      	mov	r3, r2
 80041c8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	6a3b      	ldr	r3, [r7, #32]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 f960 	bl	80044ac <I2C_WaitOnFlagUntilTimeout>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00d      	beq.n	800420e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004200:	d103      	bne.n	800420a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004208:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e05f      	b.n	80042ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800420e:	897b      	ldrh	r3, [r7, #10]
 8004210:	b2db      	uxtb	r3, r3
 8004212:	461a      	mov	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800421c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800421e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004220:	6a3a      	ldr	r2, [r7, #32]
 8004222:	492d      	ldr	r1, [pc, #180]	@ (80042d8 <I2C_RequestMemoryWrite+0x128>)
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f000 f9bb 	bl	80045a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e04c      	b.n	80042ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004234:	2300      	movs	r3, #0
 8004236:	617b      	str	r3, [r7, #20]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	617b      	str	r3, [r7, #20]
 8004248:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800424a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800424c:	6a39      	ldr	r1, [r7, #32]
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f000 fa46 	bl	80046e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00d      	beq.n	8004276 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425e:	2b04      	cmp	r3, #4
 8004260:	d107      	bne.n	8004272 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004270:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e02b      	b.n	80042ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004276:	88fb      	ldrh	r3, [r7, #6]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d105      	bne.n	8004288 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800427c:	893b      	ldrh	r3, [r7, #8]
 800427e:	b2da      	uxtb	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	611a      	str	r2, [r3, #16]
 8004286:	e021      	b.n	80042cc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004288:	893b      	ldrh	r3, [r7, #8]
 800428a:	0a1b      	lsrs	r3, r3, #8
 800428c:	b29b      	uxth	r3, r3
 800428e:	b2da      	uxtb	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004296:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004298:	6a39      	ldr	r1, [r7, #32]
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f000 fa20 	bl	80046e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00d      	beq.n	80042c2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042aa:	2b04      	cmp	r3, #4
 80042ac:	d107      	bne.n	80042be <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e005      	b.n	80042ce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042c2:	893b      	ldrh	r3, [r7, #8]
 80042c4:	b2da      	uxtb	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3718      	adds	r7, #24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	00010002 	.word	0x00010002

080042dc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b088      	sub	sp, #32
 80042e0:	af02      	add	r7, sp, #8
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	4608      	mov	r0, r1
 80042e6:	4611      	mov	r1, r2
 80042e8:	461a      	mov	r2, r3
 80042ea:	4603      	mov	r3, r0
 80042ec:	817b      	strh	r3, [r7, #10]
 80042ee:	460b      	mov	r3, r1
 80042f0:	813b      	strh	r3, [r7, #8]
 80042f2:	4613      	mov	r3, r2
 80042f4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004304:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004314:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	6a3b      	ldr	r3, [r7, #32]
 800431c:	2200      	movs	r2, #0
 800431e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f000 f8c2 	bl	80044ac <I2C_WaitOnFlagUntilTimeout>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00d      	beq.n	800434a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004338:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800433c:	d103      	bne.n	8004346 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004344:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e0aa      	b.n	80044a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800434a:	897b      	ldrh	r3, [r7, #10]
 800434c:	b2db      	uxtb	r3, r3
 800434e:	461a      	mov	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004358:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800435a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435c:	6a3a      	ldr	r2, [r7, #32]
 800435e:	4952      	ldr	r1, [pc, #328]	@ (80044a8 <I2C_RequestMemoryRead+0x1cc>)
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f000 f91d 	bl	80045a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e097      	b.n	80044a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004370:	2300      	movs	r3, #0
 8004372:	617b      	str	r3, [r7, #20]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	617b      	str	r3, [r7, #20]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	617b      	str	r3, [r7, #20]
 8004384:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004388:	6a39      	ldr	r1, [r7, #32]
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f000 f9a8 	bl	80046e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00d      	beq.n	80043b2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800439a:	2b04      	cmp	r3, #4
 800439c:	d107      	bne.n	80043ae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e076      	b.n	80044a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043b2:	88fb      	ldrh	r3, [r7, #6]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d105      	bne.n	80043c4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043b8:	893b      	ldrh	r3, [r7, #8]
 80043ba:	b2da      	uxtb	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	611a      	str	r2, [r3, #16]
 80043c2:	e021      	b.n	8004408 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80043c4:	893b      	ldrh	r3, [r7, #8]
 80043c6:	0a1b      	lsrs	r3, r3, #8
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043d4:	6a39      	ldr	r1, [r7, #32]
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f000 f982 	bl	80046e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00d      	beq.n	80043fe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e6:	2b04      	cmp	r3, #4
 80043e8:	d107      	bne.n	80043fa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e050      	b.n	80044a0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043fe:	893b      	ldrh	r3, [r7, #8]
 8004400:	b2da      	uxtb	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004408:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800440a:	6a39      	ldr	r1, [r7, #32]
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f000 f967 	bl	80046e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00d      	beq.n	8004434 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441c:	2b04      	cmp	r3, #4
 800441e:	d107      	bne.n	8004430 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800442e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e035      	b.n	80044a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004442:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004446:	9300      	str	r3, [sp, #0]
 8004448:	6a3b      	ldr	r3, [r7, #32]
 800444a:	2200      	movs	r2, #0
 800444c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f000 f82b 	bl	80044ac <I2C_WaitOnFlagUntilTimeout>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00d      	beq.n	8004478 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004466:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800446a:	d103      	bne.n	8004474 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004472:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e013      	b.n	80044a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004478:	897b      	ldrh	r3, [r7, #10]
 800447a:	b2db      	uxtb	r3, r3
 800447c:	f043 0301 	orr.w	r3, r3, #1
 8004480:	b2da      	uxtb	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448a:	6a3a      	ldr	r2, [r7, #32]
 800448c:	4906      	ldr	r1, [pc, #24]	@ (80044a8 <I2C_RequestMemoryRead+0x1cc>)
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f000 f886 	bl	80045a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e000      	b.n	80044a0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3718      	adds	r7, #24
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	00010002 	.word	0x00010002

080044ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	603b      	str	r3, [r7, #0]
 80044b8:	4613      	mov	r3, r2
 80044ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044bc:	e048      	b.n	8004550 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c4:	d044      	beq.n	8004550 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044c6:	f7fe f9fd 	bl	80028c4 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d302      	bcc.n	80044dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d139      	bne.n	8004550 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	0c1b      	lsrs	r3, r3, #16
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d10d      	bne.n	8004502 <I2C_WaitOnFlagUntilTimeout+0x56>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	43da      	mvns	r2, r3
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	4013      	ands	r3, r2
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	bf0c      	ite	eq
 80044f8:	2301      	moveq	r3, #1
 80044fa:	2300      	movne	r3, #0
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	461a      	mov	r2, r3
 8004500:	e00c      	b.n	800451c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	43da      	mvns	r2, r3
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	4013      	ands	r3, r2
 800450e:	b29b      	uxth	r3, r3
 8004510:	2b00      	cmp	r3, #0
 8004512:	bf0c      	ite	eq
 8004514:	2301      	moveq	r3, #1
 8004516:	2300      	movne	r3, #0
 8004518:	b2db      	uxtb	r3, r3
 800451a:	461a      	mov	r2, r3
 800451c:	79fb      	ldrb	r3, [r7, #7]
 800451e:	429a      	cmp	r2, r3
 8004520:	d116      	bne.n	8004550 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2220      	movs	r2, #32
 800452c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453c:	f043 0220 	orr.w	r2, r3, #32
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e023      	b.n	8004598 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	0c1b      	lsrs	r3, r3, #16
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b01      	cmp	r3, #1
 8004558:	d10d      	bne.n	8004576 <I2C_WaitOnFlagUntilTimeout+0xca>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	43da      	mvns	r2, r3
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	4013      	ands	r3, r2
 8004566:	b29b      	uxth	r3, r3
 8004568:	2b00      	cmp	r3, #0
 800456a:	bf0c      	ite	eq
 800456c:	2301      	moveq	r3, #1
 800456e:	2300      	movne	r3, #0
 8004570:	b2db      	uxtb	r3, r3
 8004572:	461a      	mov	r2, r3
 8004574:	e00c      	b.n	8004590 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	43da      	mvns	r2, r3
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	4013      	ands	r3, r2
 8004582:	b29b      	uxth	r3, r3
 8004584:	2b00      	cmp	r3, #0
 8004586:	bf0c      	ite	eq
 8004588:	2301      	moveq	r3, #1
 800458a:	2300      	movne	r3, #0
 800458c:	b2db      	uxtb	r3, r3
 800458e:	461a      	mov	r2, r3
 8004590:	79fb      	ldrb	r3, [r7, #7]
 8004592:	429a      	cmp	r2, r3
 8004594:	d093      	beq.n	80044be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3710      	adds	r7, #16
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
 80045ac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045ae:	e071      	b.n	8004694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045be:	d123      	bne.n	8004608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045ce:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80045d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2220      	movs	r2, #32
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f4:	f043 0204 	orr.w	r2, r3, #4
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e067      	b.n	80046d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800460e:	d041      	beq.n	8004694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004610:	f7fe f958 	bl	80028c4 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	429a      	cmp	r2, r3
 800461e:	d302      	bcc.n	8004626 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d136      	bne.n	8004694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	0c1b      	lsrs	r3, r3, #16
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b01      	cmp	r3, #1
 800462e:	d10c      	bne.n	800464a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	43da      	mvns	r2, r3
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	4013      	ands	r3, r2
 800463c:	b29b      	uxth	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	bf14      	ite	ne
 8004642:	2301      	movne	r3, #1
 8004644:	2300      	moveq	r3, #0
 8004646:	b2db      	uxtb	r3, r3
 8004648:	e00b      	b.n	8004662 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	43da      	mvns	r2, r3
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	4013      	ands	r3, r2
 8004656:	b29b      	uxth	r3, r3
 8004658:	2b00      	cmp	r3, #0
 800465a:	bf14      	ite	ne
 800465c:	2301      	movne	r3, #1
 800465e:	2300      	moveq	r3, #0
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d016      	beq.n	8004694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2220      	movs	r2, #32
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004680:	f043 0220 	orr.w	r2, r3, #32
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e021      	b.n	80046d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	0c1b      	lsrs	r3, r3, #16
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b01      	cmp	r3, #1
 800469c:	d10c      	bne.n	80046b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	43da      	mvns	r2, r3
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	4013      	ands	r3, r2
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	bf14      	ite	ne
 80046b0:	2301      	movne	r3, #1
 80046b2:	2300      	moveq	r3, #0
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	e00b      	b.n	80046d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	43da      	mvns	r2, r3
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	4013      	ands	r3, r2
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	bf14      	ite	ne
 80046ca:	2301      	movne	r3, #1
 80046cc:	2300      	moveq	r3, #0
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f47f af6d 	bne.w	80045b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046ec:	e034      	b.n	8004758 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f000 f8e3 	bl	80048ba <I2C_IsAcknowledgeFailed>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e034      	b.n	8004768 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004704:	d028      	beq.n	8004758 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004706:	f7fe f8dd 	bl	80028c4 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	429a      	cmp	r2, r3
 8004714:	d302      	bcc.n	800471c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d11d      	bne.n	8004758 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004726:	2b80      	cmp	r3, #128	@ 0x80
 8004728:	d016      	beq.n	8004758 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2220      	movs	r2, #32
 8004734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004744:	f043 0220 	orr.w	r2, r3, #32
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e007      	b.n	8004768 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004762:	2b80      	cmp	r3, #128	@ 0x80
 8004764:	d1c3      	bne.n	80046ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3710      	adds	r7, #16
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800477c:	e034      	b.n	80047e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	f000 f89b 	bl	80048ba <I2C_IsAcknowledgeFailed>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e034      	b.n	80047f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004794:	d028      	beq.n	80047e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004796:	f7fe f895 	bl	80028c4 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	68ba      	ldr	r2, [r7, #8]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d302      	bcc.n	80047ac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d11d      	bne.n	80047e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	f003 0304 	and.w	r3, r3, #4
 80047b6:	2b04      	cmp	r3, #4
 80047b8:	d016      	beq.n	80047e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2220      	movs	r2, #32
 80047c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d4:	f043 0220 	orr.w	r2, r3, #32
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e007      	b.n	80047f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	f003 0304 	and.w	r3, r3, #4
 80047f2:	2b04      	cmp	r3, #4
 80047f4:	d1c3      	bne.n	800477e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800480c:	e049      	b.n	80048a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	f003 0310 	and.w	r3, r3, #16
 8004818:	2b10      	cmp	r3, #16
 800481a:	d119      	bne.n	8004850 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f06f 0210 	mvn.w	r2, #16
 8004824:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2220      	movs	r2, #32
 8004830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e030      	b.n	80048b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004850:	f7fe f838 	bl	80028c4 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	429a      	cmp	r2, r3
 800485e:	d302      	bcc.n	8004866 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d11d      	bne.n	80048a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004870:	2b40      	cmp	r3, #64	@ 0x40
 8004872:	d016      	beq.n	80048a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2220      	movs	r2, #32
 800487e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488e:	f043 0220 	orr.w	r2, r3, #32
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e007      	b.n	80048b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048ac:	2b40      	cmp	r3, #64	@ 0x40
 80048ae:	d1ae      	bne.n	800480e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b083      	sub	sp, #12
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	695b      	ldr	r3, [r3, #20]
 80048c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048d0:	d11b      	bne.n	800490a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80048da:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2220      	movs	r2, #32
 80048e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f6:	f043 0204 	orr.w	r2, r3, #4
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e000      	b.n	800490c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	bc80      	pop	{r7}
 8004914:	4770      	bx	lr
	...

08004918 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e272      	b.n	8004e10 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 8087 	beq.w	8004a46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004938:	4b92      	ldr	r3, [pc, #584]	@ (8004b84 <HAL_RCC_OscConfig+0x26c>)
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f003 030c 	and.w	r3, r3, #12
 8004940:	2b04      	cmp	r3, #4
 8004942:	d00c      	beq.n	800495e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004944:	4b8f      	ldr	r3, [pc, #572]	@ (8004b84 <HAL_RCC_OscConfig+0x26c>)
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f003 030c 	and.w	r3, r3, #12
 800494c:	2b08      	cmp	r3, #8
 800494e:	d112      	bne.n	8004976 <HAL_RCC_OscConfig+0x5e>
 8004950:	4b8c      	ldr	r3, [pc, #560]	@ (8004b84 <HAL_RCC_OscConfig+0x26c>)
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004958:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800495c:	d10b      	bne.n	8004976 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800495e:	4b89      	ldr	r3, [pc, #548]	@ (8004b84 <HAL_RCC_OscConfig+0x26c>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d06c      	beq.n	8004a44 <HAL_RCC_OscConfig+0x12c>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d168      	bne.n	8004a44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e24c      	b.n	8004e10 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800497e:	d106      	bne.n	800498e <HAL_RCC_OscConfig+0x76>
 8004980:	4b80      	ldr	r3, [pc, #512]	@ (8004b84 <HAL_RCC_OscConfig+0x26c>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a7f      	ldr	r2, [pc, #508]	@ (8004b84 <HAL_RCC_OscConfig+0x26c>)
 8004986:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800498a:	6013      	str	r3, [r2, #0]
 800498c:	e02e      	b.n	80049ec <HAL_RCC_OscConfig+0xd4>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10c      	bne.n	80049b0 <HAL_RCC_OscConfig+0x98>
 8004996:	4b7b      	ldr	r3, [pc, #492]	@ (8004b84 <HAL_RCC_OscConfig+0x26c>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a7a      	ldr	r2, [pc, #488]	@ (8004b84 <HAL_RCC_OscConfig+0x26c>)
 800499c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049a0:	6013      	str	r3, [r2, #0]
 80049a2:	4b78      	ldr	r3, [pc, #480]	@ (8004b84 <HAL_RCC_OscConfig+0x26c>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a77      	ldr	r2, [pc, #476]	@ (8004b84 <HAL_RCC_OscConfig+0x26c>)
 80049a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049ac:	6013      	str	r3, [r2, #0]
 80049ae:	e01d      	b.n	80049ec <HAL_RCC_OscConfig+0xd4>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80049b8:	d10c      	bne.n	80049d4 <HAL_RCC_OscConfig+0xbc>
 80049ba:	4b72      	ldr	r3, [pc, #456]	@ (8004b84 <HAL_RCC_OscConfig+0x26c>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a71      	ldr	r2, [pc, #452]	@ (8004b84 <HAL_RCC_OscConfig+0x26c>)
 80049c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049c4:	6013      	str	r3, [r2, #0]
 80049c6:	4b6f      	ldr	r3, [pc, #444]	@ (8004b84 <HAL_RCC_OscConfig+0x26c>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a6e      	ldr	r2, [pc, #440]	@ (8004b84 <HAL_RCC_OscConfig+0x26c>)
 80049cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049d0:	6013      	str	r3, [r2, #0]
 80049d2:	e00b      	b.n	80049ec <HAL_RCC_OscConfig+0xd4>
 80049d4:	4b6b      	ldr	r3, [pc, #428]	@ (8004b84 <HAL_RCC_OscConfig+0x26c>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a6a      	ldr	r2, [pc, #424]	@ (8004b84 <HAL_RCC_OscConfig+0x26c>)
 80049da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049de:	6013      	str	r3, [r2, #0]
 80049e0:	4b68      	ldr	r3, [pc, #416]	@ (8004b84 <HAL_RCC_OscConfig+0x26c>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a67      	ldr	r2, [pc, #412]	@ (8004b84 <HAL_RCC_OscConfig+0x26c>)
 80049e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d013      	beq.n	8004a1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f4:	f7fd ff66 	bl	80028c4 <HAL_GetTick>
 80049f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049fa:	e008      	b.n	8004a0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049fc:	f7fd ff62 	bl	80028c4 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b64      	cmp	r3, #100	@ 0x64
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e200      	b.n	8004e10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a0e:	4b5d      	ldr	r3, [pc, #372]	@ (8004b84 <HAL_RCC_OscConfig+0x26c>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d0f0      	beq.n	80049fc <HAL_RCC_OscConfig+0xe4>
 8004a1a:	e014      	b.n	8004a46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a1c:	f7fd ff52 	bl	80028c4 <HAL_GetTick>
 8004a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a22:	e008      	b.n	8004a36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a24:	f7fd ff4e 	bl	80028c4 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b64      	cmp	r3, #100	@ 0x64
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e1ec      	b.n	8004e10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a36:	4b53      	ldr	r3, [pc, #332]	@ (8004b84 <HAL_RCC_OscConfig+0x26c>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1f0      	bne.n	8004a24 <HAL_RCC_OscConfig+0x10c>
 8004a42:	e000      	b.n	8004a46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d063      	beq.n	8004b1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a52:	4b4c      	ldr	r3, [pc, #304]	@ (8004b84 <HAL_RCC_OscConfig+0x26c>)
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f003 030c 	and.w	r3, r3, #12
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00b      	beq.n	8004a76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004a5e:	4b49      	ldr	r3, [pc, #292]	@ (8004b84 <HAL_RCC_OscConfig+0x26c>)
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f003 030c 	and.w	r3, r3, #12
 8004a66:	2b08      	cmp	r3, #8
 8004a68:	d11c      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x18c>
 8004a6a:	4b46      	ldr	r3, [pc, #280]	@ (8004b84 <HAL_RCC_OscConfig+0x26c>)
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d116      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a76:	4b43      	ldr	r3, [pc, #268]	@ (8004b84 <HAL_RCC_OscConfig+0x26c>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d005      	beq.n	8004a8e <HAL_RCC_OscConfig+0x176>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d001      	beq.n	8004a8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e1c0      	b.n	8004e10 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a8e:	4b3d      	ldr	r3, [pc, #244]	@ (8004b84 <HAL_RCC_OscConfig+0x26c>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	00db      	lsls	r3, r3, #3
 8004a9c:	4939      	ldr	r1, [pc, #228]	@ (8004b84 <HAL_RCC_OscConfig+0x26c>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aa2:	e03a      	b.n	8004b1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d020      	beq.n	8004aee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004aac:	4b36      	ldr	r3, [pc, #216]	@ (8004b88 <HAL_RCC_OscConfig+0x270>)
 8004aae:	2201      	movs	r2, #1
 8004ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab2:	f7fd ff07 	bl	80028c4 <HAL_GetTick>
 8004ab6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ab8:	e008      	b.n	8004acc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aba:	f7fd ff03 	bl	80028c4 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d901      	bls.n	8004acc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e1a1      	b.n	8004e10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004acc:	4b2d      	ldr	r3, [pc, #180]	@ (8004b84 <HAL_RCC_OscConfig+0x26c>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d0f0      	beq.n	8004aba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ad8:	4b2a      	ldr	r3, [pc, #168]	@ (8004b84 <HAL_RCC_OscConfig+0x26c>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	695b      	ldr	r3, [r3, #20]
 8004ae4:	00db      	lsls	r3, r3, #3
 8004ae6:	4927      	ldr	r1, [pc, #156]	@ (8004b84 <HAL_RCC_OscConfig+0x26c>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	600b      	str	r3, [r1, #0]
 8004aec:	e015      	b.n	8004b1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004aee:	4b26      	ldr	r3, [pc, #152]	@ (8004b88 <HAL_RCC_OscConfig+0x270>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af4:	f7fd fee6 	bl	80028c4 <HAL_GetTick>
 8004af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004afa:	e008      	b.n	8004b0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004afc:	f7fd fee2 	bl	80028c4 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e180      	b.n	8004e10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b0e:	4b1d      	ldr	r3, [pc, #116]	@ (8004b84 <HAL_RCC_OscConfig+0x26c>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1f0      	bne.n	8004afc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0308 	and.w	r3, r3, #8
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d03a      	beq.n	8004b9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d019      	beq.n	8004b62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b2e:	4b17      	ldr	r3, [pc, #92]	@ (8004b8c <HAL_RCC_OscConfig+0x274>)
 8004b30:	2201      	movs	r2, #1
 8004b32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b34:	f7fd fec6 	bl	80028c4 <HAL_GetTick>
 8004b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b3a:	e008      	b.n	8004b4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b3c:	f7fd fec2 	bl	80028c4 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e160      	b.n	8004e10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8004b84 <HAL_RCC_OscConfig+0x26c>)
 8004b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0f0      	beq.n	8004b3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004b5a:	2001      	movs	r0, #1
 8004b5c:	f000 face 	bl	80050fc <RCC_Delay>
 8004b60:	e01c      	b.n	8004b9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b62:	4b0a      	ldr	r3, [pc, #40]	@ (8004b8c <HAL_RCC_OscConfig+0x274>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b68:	f7fd feac 	bl	80028c4 <HAL_GetTick>
 8004b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b6e:	e00f      	b.n	8004b90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b70:	f7fd fea8 	bl	80028c4 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d908      	bls.n	8004b90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e146      	b.n	8004e10 <HAL_RCC_OscConfig+0x4f8>
 8004b82:	bf00      	nop
 8004b84:	40021000 	.word	0x40021000
 8004b88:	42420000 	.word	0x42420000
 8004b8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b90:	4b92      	ldr	r3, [pc, #584]	@ (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1e9      	bne.n	8004b70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0304 	and.w	r3, r3, #4
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f000 80a6 	beq.w	8004cf6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004baa:	2300      	movs	r3, #0
 8004bac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bae:	4b8b      	ldr	r3, [pc, #556]	@ (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004bb0:	69db      	ldr	r3, [r3, #28]
 8004bb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10d      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bba:	4b88      	ldr	r3, [pc, #544]	@ (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	4a87      	ldr	r2, [pc, #540]	@ (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004bc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bc4:	61d3      	str	r3, [r2, #28]
 8004bc6:	4b85      	ldr	r3, [pc, #532]	@ (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bce:	60bb      	str	r3, [r7, #8]
 8004bd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bd6:	4b82      	ldr	r3, [pc, #520]	@ (8004de0 <HAL_RCC_OscConfig+0x4c8>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d118      	bne.n	8004c14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004be2:	4b7f      	ldr	r3, [pc, #508]	@ (8004de0 <HAL_RCC_OscConfig+0x4c8>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a7e      	ldr	r2, [pc, #504]	@ (8004de0 <HAL_RCC_OscConfig+0x4c8>)
 8004be8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bee:	f7fd fe69 	bl	80028c4 <HAL_GetTick>
 8004bf2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bf4:	e008      	b.n	8004c08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bf6:	f7fd fe65 	bl	80028c4 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b64      	cmp	r3, #100	@ 0x64
 8004c02:	d901      	bls.n	8004c08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e103      	b.n	8004e10 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c08:	4b75      	ldr	r3, [pc, #468]	@ (8004de0 <HAL_RCC_OscConfig+0x4c8>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d0f0      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d106      	bne.n	8004c2a <HAL_RCC_OscConfig+0x312>
 8004c1c:	4b6f      	ldr	r3, [pc, #444]	@ (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004c1e:	6a1b      	ldr	r3, [r3, #32]
 8004c20:	4a6e      	ldr	r2, [pc, #440]	@ (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004c22:	f043 0301 	orr.w	r3, r3, #1
 8004c26:	6213      	str	r3, [r2, #32]
 8004c28:	e02d      	b.n	8004c86 <HAL_RCC_OscConfig+0x36e>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10c      	bne.n	8004c4c <HAL_RCC_OscConfig+0x334>
 8004c32:	4b6a      	ldr	r3, [pc, #424]	@ (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	4a69      	ldr	r2, [pc, #420]	@ (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004c38:	f023 0301 	bic.w	r3, r3, #1
 8004c3c:	6213      	str	r3, [r2, #32]
 8004c3e:	4b67      	ldr	r3, [pc, #412]	@ (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	4a66      	ldr	r2, [pc, #408]	@ (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004c44:	f023 0304 	bic.w	r3, r3, #4
 8004c48:	6213      	str	r3, [r2, #32]
 8004c4a:	e01c      	b.n	8004c86 <HAL_RCC_OscConfig+0x36e>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	2b05      	cmp	r3, #5
 8004c52:	d10c      	bne.n	8004c6e <HAL_RCC_OscConfig+0x356>
 8004c54:	4b61      	ldr	r3, [pc, #388]	@ (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	4a60      	ldr	r2, [pc, #384]	@ (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004c5a:	f043 0304 	orr.w	r3, r3, #4
 8004c5e:	6213      	str	r3, [r2, #32]
 8004c60:	4b5e      	ldr	r3, [pc, #376]	@ (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004c62:	6a1b      	ldr	r3, [r3, #32]
 8004c64:	4a5d      	ldr	r2, [pc, #372]	@ (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004c66:	f043 0301 	orr.w	r3, r3, #1
 8004c6a:	6213      	str	r3, [r2, #32]
 8004c6c:	e00b      	b.n	8004c86 <HAL_RCC_OscConfig+0x36e>
 8004c6e:	4b5b      	ldr	r3, [pc, #364]	@ (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	4a5a      	ldr	r2, [pc, #360]	@ (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004c74:	f023 0301 	bic.w	r3, r3, #1
 8004c78:	6213      	str	r3, [r2, #32]
 8004c7a:	4b58      	ldr	r3, [pc, #352]	@ (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	4a57      	ldr	r2, [pc, #348]	@ (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004c80:	f023 0304 	bic.w	r3, r3, #4
 8004c84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d015      	beq.n	8004cba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c8e:	f7fd fe19 	bl	80028c4 <HAL_GetTick>
 8004c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c94:	e00a      	b.n	8004cac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c96:	f7fd fe15 	bl	80028c4 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d901      	bls.n	8004cac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e0b1      	b.n	8004e10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cac:	4b4b      	ldr	r3, [pc, #300]	@ (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004cae:	6a1b      	ldr	r3, [r3, #32]
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d0ee      	beq.n	8004c96 <HAL_RCC_OscConfig+0x37e>
 8004cb8:	e014      	b.n	8004ce4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cba:	f7fd fe03 	bl	80028c4 <HAL_GetTick>
 8004cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cc0:	e00a      	b.n	8004cd8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cc2:	f7fd fdff 	bl	80028c4 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d901      	bls.n	8004cd8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e09b      	b.n	8004e10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cd8:	4b40      	ldr	r3, [pc, #256]	@ (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004cda:	6a1b      	ldr	r3, [r3, #32]
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1ee      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004ce4:	7dfb      	ldrb	r3, [r7, #23]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d105      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cea:	4b3c      	ldr	r3, [pc, #240]	@ (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004cec:	69db      	ldr	r3, [r3, #28]
 8004cee:	4a3b      	ldr	r2, [pc, #236]	@ (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004cf0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cf4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	69db      	ldr	r3, [r3, #28]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	f000 8087 	beq.w	8004e0e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d00:	4b36      	ldr	r3, [pc, #216]	@ (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f003 030c 	and.w	r3, r3, #12
 8004d08:	2b08      	cmp	r3, #8
 8004d0a:	d061      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	69db      	ldr	r3, [r3, #28]
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d146      	bne.n	8004da2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d14:	4b33      	ldr	r3, [pc, #204]	@ (8004de4 <HAL_RCC_OscConfig+0x4cc>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d1a:	f7fd fdd3 	bl	80028c4 <HAL_GetTick>
 8004d1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d20:	e008      	b.n	8004d34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d22:	f7fd fdcf 	bl	80028c4 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d901      	bls.n	8004d34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e06d      	b.n	8004e10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d34:	4b29      	ldr	r3, [pc, #164]	@ (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1f0      	bne.n	8004d22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d48:	d108      	bne.n	8004d5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004d4a:	4b24      	ldr	r3, [pc, #144]	@ (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	4921      	ldr	r1, [pc, #132]	@ (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d5c:	4b1f      	ldr	r3, [pc, #124]	@ (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a19      	ldr	r1, [r3, #32]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d6c:	430b      	orrs	r3, r1
 8004d6e:	491b      	ldr	r1, [pc, #108]	@ (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d74:	4b1b      	ldr	r3, [pc, #108]	@ (8004de4 <HAL_RCC_OscConfig+0x4cc>)
 8004d76:	2201      	movs	r2, #1
 8004d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d7a:	f7fd fda3 	bl	80028c4 <HAL_GetTick>
 8004d7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d80:	e008      	b.n	8004d94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d82:	f7fd fd9f 	bl	80028c4 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e03d      	b.n	8004e10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d94:	4b11      	ldr	r3, [pc, #68]	@ (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d0f0      	beq.n	8004d82 <HAL_RCC_OscConfig+0x46a>
 8004da0:	e035      	b.n	8004e0e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004da2:	4b10      	ldr	r3, [pc, #64]	@ (8004de4 <HAL_RCC_OscConfig+0x4cc>)
 8004da4:	2200      	movs	r2, #0
 8004da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004da8:	f7fd fd8c 	bl	80028c4 <HAL_GetTick>
 8004dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dae:	e008      	b.n	8004dc2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004db0:	f7fd fd88 	bl	80028c4 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d901      	bls.n	8004dc2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e026      	b.n	8004e10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dc2:	4b06      	ldr	r3, [pc, #24]	@ (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1f0      	bne.n	8004db0 <HAL_RCC_OscConfig+0x498>
 8004dce:	e01e      	b.n	8004e0e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	69db      	ldr	r3, [r3, #28]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d107      	bne.n	8004de8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e019      	b.n	8004e10 <HAL_RCC_OscConfig+0x4f8>
 8004ddc:	40021000 	.word	0x40021000
 8004de0:	40007000 	.word	0x40007000
 8004de4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004de8:	4b0b      	ldr	r3, [pc, #44]	@ (8004e18 <HAL_RCC_OscConfig+0x500>)
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a1b      	ldr	r3, [r3, #32]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d106      	bne.n	8004e0a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d001      	beq.n	8004e0e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e000      	b.n	8004e10 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3718      	adds	r7, #24
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	40021000 	.word	0x40021000

08004e1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d101      	bne.n	8004e30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e0d0      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e30:	4b6a      	ldr	r3, [pc, #424]	@ (8004fdc <HAL_RCC_ClockConfig+0x1c0>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0307 	and.w	r3, r3, #7
 8004e38:	683a      	ldr	r2, [r7, #0]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d910      	bls.n	8004e60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e3e:	4b67      	ldr	r3, [pc, #412]	@ (8004fdc <HAL_RCC_ClockConfig+0x1c0>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f023 0207 	bic.w	r2, r3, #7
 8004e46:	4965      	ldr	r1, [pc, #404]	@ (8004fdc <HAL_RCC_ClockConfig+0x1c0>)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e4e:	4b63      	ldr	r3, [pc, #396]	@ (8004fdc <HAL_RCC_ClockConfig+0x1c0>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0307 	and.w	r3, r3, #7
 8004e56:	683a      	ldr	r2, [r7, #0]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d001      	beq.n	8004e60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e0b8      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0302 	and.w	r3, r3, #2
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d020      	beq.n	8004eae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0304 	and.w	r3, r3, #4
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d005      	beq.n	8004e84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e78:	4b59      	ldr	r3, [pc, #356]	@ (8004fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	4a58      	ldr	r2, [pc, #352]	@ (8004fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e7e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004e82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0308 	and.w	r3, r3, #8
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d005      	beq.n	8004e9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e90:	4b53      	ldr	r3, [pc, #332]	@ (8004fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	4a52      	ldr	r2, [pc, #328]	@ (8004fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e96:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004e9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e9c:	4b50      	ldr	r3, [pc, #320]	@ (8004fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	494d      	ldr	r1, [pc, #308]	@ (8004fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d040      	beq.n	8004f3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d107      	bne.n	8004ed2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ec2:	4b47      	ldr	r3, [pc, #284]	@ (8004fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d115      	bne.n	8004efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e07f      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d107      	bne.n	8004eea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eda:	4b41      	ldr	r3, [pc, #260]	@ (8004fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d109      	bne.n	8004efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e073      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eea:	4b3d      	ldr	r3, [pc, #244]	@ (8004fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e06b      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004efa:	4b39      	ldr	r3, [pc, #228]	@ (8004fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f023 0203 	bic.w	r2, r3, #3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	4936      	ldr	r1, [pc, #216]	@ (8004fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f0c:	f7fd fcda 	bl	80028c4 <HAL_GetTick>
 8004f10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f12:	e00a      	b.n	8004f2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f14:	f7fd fcd6 	bl	80028c4 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e053      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f2a:	4b2d      	ldr	r3, [pc, #180]	@ (8004fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f003 020c 	and.w	r2, r3, #12
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d1eb      	bne.n	8004f14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f3c:	4b27      	ldr	r3, [pc, #156]	@ (8004fdc <HAL_RCC_ClockConfig+0x1c0>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0307 	and.w	r3, r3, #7
 8004f44:	683a      	ldr	r2, [r7, #0]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d210      	bcs.n	8004f6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f4a:	4b24      	ldr	r3, [pc, #144]	@ (8004fdc <HAL_RCC_ClockConfig+0x1c0>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f023 0207 	bic.w	r2, r3, #7
 8004f52:	4922      	ldr	r1, [pc, #136]	@ (8004fdc <HAL_RCC_ClockConfig+0x1c0>)
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f5a:	4b20      	ldr	r3, [pc, #128]	@ (8004fdc <HAL_RCC_ClockConfig+0x1c0>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0307 	and.w	r3, r3, #7
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d001      	beq.n	8004f6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e032      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0304 	and.w	r3, r3, #4
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d008      	beq.n	8004f8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f78:	4b19      	ldr	r3, [pc, #100]	@ (8004fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	4916      	ldr	r1, [pc, #88]	@ (8004fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0308 	and.w	r3, r3, #8
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d009      	beq.n	8004faa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f96:	4b12      	ldr	r3, [pc, #72]	@ (8004fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	00db      	lsls	r3, r3, #3
 8004fa4:	490e      	ldr	r1, [pc, #56]	@ (8004fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004faa:	f000 f821 	bl	8004ff0 <HAL_RCC_GetSysClockFreq>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8004fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	091b      	lsrs	r3, r3, #4
 8004fb6:	f003 030f 	and.w	r3, r3, #15
 8004fba:	490a      	ldr	r1, [pc, #40]	@ (8004fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8004fbc:	5ccb      	ldrb	r3, [r1, r3]
 8004fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8004fc2:	4a09      	ldr	r2, [pc, #36]	@ (8004fe8 <HAL_RCC_ClockConfig+0x1cc>)
 8004fc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004fc6:	4b09      	ldr	r3, [pc, #36]	@ (8004fec <HAL_RCC_ClockConfig+0x1d0>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7fd fc38 	bl	8002840 <HAL_InitTick>

  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	40022000 	.word	0x40022000
 8004fe0:	40021000 	.word	0x40021000
 8004fe4:	08008520 	.word	0x08008520
 8004fe8:	2000008c 	.word	0x2000008c
 8004fec:	20000090 	.word	0x20000090

08004ff0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b087      	sub	sp, #28
 8004ff4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	60fb      	str	r3, [r7, #12]
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	60bb      	str	r3, [r7, #8]
 8004ffe:	2300      	movs	r3, #0
 8005000:	617b      	str	r3, [r7, #20]
 8005002:	2300      	movs	r3, #0
 8005004:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005006:	2300      	movs	r3, #0
 8005008:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800500a:	4b1e      	ldr	r3, [pc, #120]	@ (8005084 <HAL_RCC_GetSysClockFreq+0x94>)
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f003 030c 	and.w	r3, r3, #12
 8005016:	2b04      	cmp	r3, #4
 8005018:	d002      	beq.n	8005020 <HAL_RCC_GetSysClockFreq+0x30>
 800501a:	2b08      	cmp	r3, #8
 800501c:	d003      	beq.n	8005026 <HAL_RCC_GetSysClockFreq+0x36>
 800501e:	e027      	b.n	8005070 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005020:	4b19      	ldr	r3, [pc, #100]	@ (8005088 <HAL_RCC_GetSysClockFreq+0x98>)
 8005022:	613b      	str	r3, [r7, #16]
      break;
 8005024:	e027      	b.n	8005076 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	0c9b      	lsrs	r3, r3, #18
 800502a:	f003 030f 	and.w	r3, r3, #15
 800502e:	4a17      	ldr	r2, [pc, #92]	@ (800508c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005030:	5cd3      	ldrb	r3, [r2, r3]
 8005032:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d010      	beq.n	8005060 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800503e:	4b11      	ldr	r3, [pc, #68]	@ (8005084 <HAL_RCC_GetSysClockFreq+0x94>)
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	0c5b      	lsrs	r3, r3, #17
 8005044:	f003 0301 	and.w	r3, r3, #1
 8005048:	4a11      	ldr	r2, [pc, #68]	@ (8005090 <HAL_RCC_GetSysClockFreq+0xa0>)
 800504a:	5cd3      	ldrb	r3, [r2, r3]
 800504c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a0d      	ldr	r2, [pc, #52]	@ (8005088 <HAL_RCC_GetSysClockFreq+0x98>)
 8005052:	fb03 f202 	mul.w	r2, r3, r2
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	fbb2 f3f3 	udiv	r3, r2, r3
 800505c:	617b      	str	r3, [r7, #20]
 800505e:	e004      	b.n	800506a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a0c      	ldr	r2, [pc, #48]	@ (8005094 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005064:	fb02 f303 	mul.w	r3, r2, r3
 8005068:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	613b      	str	r3, [r7, #16]
      break;
 800506e:	e002      	b.n	8005076 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005070:	4b05      	ldr	r3, [pc, #20]	@ (8005088 <HAL_RCC_GetSysClockFreq+0x98>)
 8005072:	613b      	str	r3, [r7, #16]
      break;
 8005074:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005076:	693b      	ldr	r3, [r7, #16]
}
 8005078:	4618      	mov	r0, r3
 800507a:	371c      	adds	r7, #28
 800507c:	46bd      	mov	sp, r7
 800507e:	bc80      	pop	{r7}
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	40021000 	.word	0x40021000
 8005088:	007a1200 	.word	0x007a1200
 800508c:	08008538 	.word	0x08008538
 8005090:	08008548 	.word	0x08008548
 8005094:	003d0900 	.word	0x003d0900

08005098 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005098:	b480      	push	{r7}
 800509a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800509c:	4b02      	ldr	r3, [pc, #8]	@ (80050a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800509e:	681b      	ldr	r3, [r3, #0]
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bc80      	pop	{r7}
 80050a6:	4770      	bx	lr
 80050a8:	2000008c 	.word	0x2000008c

080050ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80050b0:	f7ff fff2 	bl	8005098 <HAL_RCC_GetHCLKFreq>
 80050b4:	4602      	mov	r2, r0
 80050b6:	4b05      	ldr	r3, [pc, #20]	@ (80050cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	0a1b      	lsrs	r3, r3, #8
 80050bc:	f003 0307 	and.w	r3, r3, #7
 80050c0:	4903      	ldr	r1, [pc, #12]	@ (80050d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050c2:	5ccb      	ldrb	r3, [r1, r3]
 80050c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	40021000 	.word	0x40021000
 80050d0:	08008530 	.word	0x08008530

080050d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80050d8:	f7ff ffde 	bl	8005098 <HAL_RCC_GetHCLKFreq>
 80050dc:	4602      	mov	r2, r0
 80050de:	4b05      	ldr	r3, [pc, #20]	@ (80050f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	0adb      	lsrs	r3, r3, #11
 80050e4:	f003 0307 	and.w	r3, r3, #7
 80050e8:	4903      	ldr	r1, [pc, #12]	@ (80050f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050ea:	5ccb      	ldrb	r3, [r1, r3]
 80050ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	40021000 	.word	0x40021000
 80050f8:	08008530 	.word	0x08008530

080050fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005104:	4b0a      	ldr	r3, [pc, #40]	@ (8005130 <RCC_Delay+0x34>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a0a      	ldr	r2, [pc, #40]	@ (8005134 <RCC_Delay+0x38>)
 800510a:	fba2 2303 	umull	r2, r3, r2, r3
 800510e:	0a5b      	lsrs	r3, r3, #9
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	fb02 f303 	mul.w	r3, r2, r3
 8005116:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005118:	bf00      	nop
  }
  while (Delay --);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	1e5a      	subs	r2, r3, #1
 800511e:	60fa      	str	r2, [r7, #12]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1f9      	bne.n	8005118 <RCC_Delay+0x1c>
}
 8005124:	bf00      	nop
 8005126:	bf00      	nop
 8005128:	3714      	adds	r7, #20
 800512a:	46bd      	mov	sp, r7
 800512c:	bc80      	pop	{r7}
 800512e:	4770      	bx	lr
 8005130:	2000008c 	.word	0x2000008c
 8005134:	10624dd3 	.word	0x10624dd3

08005138 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d101      	bne.n	800514a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e042      	b.n	80051d0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d106      	bne.n	8005164 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f7fd f9ec 	bl	800253c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2224      	movs	r2, #36	@ 0x24
 8005168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68da      	ldr	r2, [r3, #12]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800517a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 fa09 	bl	8005594 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	691a      	ldr	r2, [r3, #16]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005190:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	695a      	ldr	r2, [r3, #20]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80051a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68da      	ldr	r2, [r3, #12]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80051b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2220      	movs	r2, #32
 80051bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2220      	movs	r2, #32
 80051c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3708      	adds	r7, #8
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b08a      	sub	sp, #40	@ 0x28
 80051dc:	af02      	add	r7, sp, #8
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	603b      	str	r3, [r7, #0]
 80051e4:	4613      	mov	r3, r2
 80051e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80051e8:	2300      	movs	r3, #0
 80051ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	2b20      	cmp	r3, #32
 80051f6:	d175      	bne.n	80052e4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d002      	beq.n	8005204 <HAL_UART_Transmit+0x2c>
 80051fe:	88fb      	ldrh	r3, [r7, #6]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d101      	bne.n	8005208 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e06e      	b.n	80052e6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2221      	movs	r2, #33	@ 0x21
 8005212:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005216:	f7fd fb55 	bl	80028c4 <HAL_GetTick>
 800521a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	88fa      	ldrh	r2, [r7, #6]
 8005220:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	88fa      	ldrh	r2, [r7, #6]
 8005226:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005230:	d108      	bne.n	8005244 <HAL_UART_Transmit+0x6c>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d104      	bne.n	8005244 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800523a:	2300      	movs	r3, #0
 800523c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	61bb      	str	r3, [r7, #24]
 8005242:	e003      	b.n	800524c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005248:	2300      	movs	r3, #0
 800524a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800524c:	e02e      	b.n	80052ac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	2200      	movs	r2, #0
 8005256:	2180      	movs	r1, #128	@ 0x80
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f000 f8df 	bl	800541c <UART_WaitOnFlagUntilTimeout>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d005      	beq.n	8005270 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2220      	movs	r2, #32
 8005268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e03a      	b.n	80052e6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10b      	bne.n	800528e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	881b      	ldrh	r3, [r3, #0]
 800527a:	461a      	mov	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005284:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	3302      	adds	r3, #2
 800528a:	61bb      	str	r3, [r7, #24]
 800528c:	e007      	b.n	800529e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	781a      	ldrb	r2, [r3, #0]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	3301      	adds	r3, #1
 800529c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	3b01      	subs	r3, #1
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1cb      	bne.n	800524e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	9300      	str	r3, [sp, #0]
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	2200      	movs	r2, #0
 80052be:	2140      	movs	r1, #64	@ 0x40
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f000 f8ab 	bl	800541c <UART_WaitOnFlagUntilTimeout>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d005      	beq.n	80052d8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2220      	movs	r2, #32
 80052d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e006      	b.n	80052e6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2220      	movs	r2, #32
 80052dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80052e0:	2300      	movs	r3, #0
 80052e2:	e000      	b.n	80052e6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80052e4:	2302      	movs	r3, #2
  }
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3720      	adds	r7, #32
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b08a      	sub	sp, #40	@ 0x28
 80052f2:	af02      	add	r7, sp, #8
 80052f4:	60f8      	str	r0, [r7, #12]
 80052f6:	60b9      	str	r1, [r7, #8]
 80052f8:	603b      	str	r3, [r7, #0]
 80052fa:	4613      	mov	r3, r2
 80052fc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80052fe:	2300      	movs	r3, #0
 8005300:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005308:	b2db      	uxtb	r3, r3
 800530a:	2b20      	cmp	r3, #32
 800530c:	f040 8081 	bne.w	8005412 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d002      	beq.n	800531c <HAL_UART_Receive+0x2e>
 8005316:	88fb      	ldrh	r3, [r7, #6]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d101      	bne.n	8005320 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e079      	b.n	8005414 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2222      	movs	r2, #34	@ 0x22
 800532a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005334:	f7fd fac6 	bl	80028c4 <HAL_GetTick>
 8005338:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	88fa      	ldrh	r2, [r7, #6]
 800533e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	88fa      	ldrh	r2, [r7, #6]
 8005344:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800534e:	d108      	bne.n	8005362 <HAL_UART_Receive+0x74>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d104      	bne.n	8005362 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8005358:	2300      	movs	r3, #0
 800535a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	61bb      	str	r3, [r7, #24]
 8005360:	e003      	b.n	800536a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005366:	2300      	movs	r3, #0
 8005368:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800536a:	e047      	b.n	80053fc <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	9300      	str	r3, [sp, #0]
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	2200      	movs	r2, #0
 8005374:	2120      	movs	r1, #32
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f000 f850 	bl	800541c <UART_WaitOnFlagUntilTimeout>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d005      	beq.n	800538e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2220      	movs	r2, #32
 8005386:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e042      	b.n	8005414 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d10c      	bne.n	80053ae <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	b29b      	uxth	r3, r3
 800539c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	3302      	adds	r3, #2
 80053aa:	61bb      	str	r3, [r7, #24]
 80053ac:	e01f      	b.n	80053ee <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053b6:	d007      	beq.n	80053c8 <HAL_UART_Receive+0xda>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d10a      	bne.n	80053d6 <HAL_UART_Receive+0xe8>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d106      	bne.n	80053d6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	b2da      	uxtb	r2, r3
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	701a      	strb	r2, [r3, #0]
 80053d4:	e008      	b.n	80053e8 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053e2:	b2da      	uxtb	r2, r3
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	3301      	adds	r3, #1
 80053ec:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	3b01      	subs	r3, #1
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005400:	b29b      	uxth	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1b2      	bne.n	800536c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2220      	movs	r2, #32
 800540a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800540e:	2300      	movs	r3, #0
 8005410:	e000      	b.n	8005414 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005412:	2302      	movs	r3, #2
  }
}
 8005414:	4618      	mov	r0, r3
 8005416:	3720      	adds	r7, #32
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b086      	sub	sp, #24
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	603b      	str	r3, [r7, #0]
 8005428:	4613      	mov	r3, r2
 800542a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800542c:	e03b      	b.n	80054a6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800542e:	6a3b      	ldr	r3, [r7, #32]
 8005430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005434:	d037      	beq.n	80054a6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005436:	f7fd fa45 	bl	80028c4 <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	6a3a      	ldr	r2, [r7, #32]
 8005442:	429a      	cmp	r2, r3
 8005444:	d302      	bcc.n	800544c <UART_WaitOnFlagUntilTimeout+0x30>
 8005446:	6a3b      	ldr	r3, [r7, #32]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d101      	bne.n	8005450 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e03a      	b.n	80054c6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	f003 0304 	and.w	r3, r3, #4
 800545a:	2b00      	cmp	r3, #0
 800545c:	d023      	beq.n	80054a6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	2b80      	cmp	r3, #128	@ 0x80
 8005462:	d020      	beq.n	80054a6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	2b40      	cmp	r3, #64	@ 0x40
 8005468:	d01d      	beq.n	80054a6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0308 	and.w	r3, r3, #8
 8005474:	2b08      	cmp	r3, #8
 8005476:	d116      	bne.n	80054a6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005478:	2300      	movs	r3, #0
 800547a:	617b      	str	r3, [r7, #20]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	617b      	str	r3, [r7, #20]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	617b      	str	r3, [r7, #20]
 800548c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800548e:	68f8      	ldr	r0, [r7, #12]
 8005490:	f000 f81d 	bl	80054ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2208      	movs	r2, #8
 8005498:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e00f      	b.n	80054c6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	4013      	ands	r3, r2
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	bf0c      	ite	eq
 80054b6:	2301      	moveq	r3, #1
 80054b8:	2300      	movne	r3, #0
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	461a      	mov	r2, r3
 80054be:	79fb      	ldrb	r3, [r7, #7]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d0b4      	beq.n	800542e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3718      	adds	r7, #24
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054ce:	b480      	push	{r7}
 80054d0:	b095      	sub	sp, #84	@ 0x54
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	330c      	adds	r3, #12
 80054dc:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054e0:	e853 3f00 	ldrex	r3, [r3]
 80054e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80054e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	330c      	adds	r3, #12
 80054f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80054f6:	643a      	str	r2, [r7, #64]	@ 0x40
 80054f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80054fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80054fe:	e841 2300 	strex	r3, r2, [r1]
 8005502:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1e5      	bne.n	80054d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	3314      	adds	r3, #20
 8005510:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005512:	6a3b      	ldr	r3, [r7, #32]
 8005514:	e853 3f00 	ldrex	r3, [r3]
 8005518:	61fb      	str	r3, [r7, #28]
   return(result);
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	f023 0301 	bic.w	r3, r3, #1
 8005520:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	3314      	adds	r3, #20
 8005528:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800552a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800552c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005530:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005532:	e841 2300 	strex	r3, r2, [r1]
 8005536:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1e5      	bne.n	800550a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005542:	2b01      	cmp	r3, #1
 8005544:	d119      	bne.n	800557a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	330c      	adds	r3, #12
 800554c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	e853 3f00 	ldrex	r3, [r3]
 8005554:	60bb      	str	r3, [r7, #8]
   return(result);
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	f023 0310 	bic.w	r3, r3, #16
 800555c:	647b      	str	r3, [r7, #68]	@ 0x44
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	330c      	adds	r3, #12
 8005564:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005566:	61ba      	str	r2, [r7, #24]
 8005568:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556a:	6979      	ldr	r1, [r7, #20]
 800556c:	69ba      	ldr	r2, [r7, #24]
 800556e:	e841 2300 	strex	r3, r2, [r1]
 8005572:	613b      	str	r3, [r7, #16]
   return(result);
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1e5      	bne.n	8005546 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2220      	movs	r2, #32
 800557e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005588:	bf00      	nop
 800558a:	3754      	adds	r7, #84	@ 0x54
 800558c:	46bd      	mov	sp, r7
 800558e:	bc80      	pop	{r7}
 8005590:	4770      	bx	lr
	...

08005594 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	68da      	ldr	r2, [r3, #12]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	430a      	orrs	r2, r1
 80055b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	689a      	ldr	r2, [r3, #8]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	431a      	orrs	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	695b      	ldr	r3, [r3, #20]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80055ce:	f023 030c 	bic.w	r3, r3, #12
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	6812      	ldr	r2, [r2, #0]
 80055d6:	68b9      	ldr	r1, [r7, #8]
 80055d8:	430b      	orrs	r3, r1
 80055da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	699a      	ldr	r2, [r3, #24]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	430a      	orrs	r2, r1
 80055f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a2c      	ldr	r2, [pc, #176]	@ (80056a8 <UART_SetConfig+0x114>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d103      	bne.n	8005604 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80055fc:	f7ff fd6a 	bl	80050d4 <HAL_RCC_GetPCLK2Freq>
 8005600:	60f8      	str	r0, [r7, #12]
 8005602:	e002      	b.n	800560a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005604:	f7ff fd52 	bl	80050ac <HAL_RCC_GetPCLK1Freq>
 8005608:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	4613      	mov	r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	4413      	add	r3, r2
 8005612:	009a      	lsls	r2, r3, #2
 8005614:	441a      	add	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005620:	4a22      	ldr	r2, [pc, #136]	@ (80056ac <UART_SetConfig+0x118>)
 8005622:	fba2 2303 	umull	r2, r3, r2, r3
 8005626:	095b      	lsrs	r3, r3, #5
 8005628:	0119      	lsls	r1, r3, #4
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	4613      	mov	r3, r2
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	4413      	add	r3, r2
 8005632:	009a      	lsls	r2, r3, #2
 8005634:	441a      	add	r2, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005640:	4b1a      	ldr	r3, [pc, #104]	@ (80056ac <UART_SetConfig+0x118>)
 8005642:	fba3 0302 	umull	r0, r3, r3, r2
 8005646:	095b      	lsrs	r3, r3, #5
 8005648:	2064      	movs	r0, #100	@ 0x64
 800564a:	fb00 f303 	mul.w	r3, r0, r3
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	011b      	lsls	r3, r3, #4
 8005652:	3332      	adds	r3, #50	@ 0x32
 8005654:	4a15      	ldr	r2, [pc, #84]	@ (80056ac <UART_SetConfig+0x118>)
 8005656:	fba2 2303 	umull	r2, r3, r2, r3
 800565a:	095b      	lsrs	r3, r3, #5
 800565c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005660:	4419      	add	r1, r3
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	4613      	mov	r3, r2
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4413      	add	r3, r2
 800566a:	009a      	lsls	r2, r3, #2
 800566c:	441a      	add	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	fbb2 f2f3 	udiv	r2, r2, r3
 8005678:	4b0c      	ldr	r3, [pc, #48]	@ (80056ac <UART_SetConfig+0x118>)
 800567a:	fba3 0302 	umull	r0, r3, r3, r2
 800567e:	095b      	lsrs	r3, r3, #5
 8005680:	2064      	movs	r0, #100	@ 0x64
 8005682:	fb00 f303 	mul.w	r3, r0, r3
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	011b      	lsls	r3, r3, #4
 800568a:	3332      	adds	r3, #50	@ 0x32
 800568c:	4a07      	ldr	r2, [pc, #28]	@ (80056ac <UART_SetConfig+0x118>)
 800568e:	fba2 2303 	umull	r2, r3, r2, r3
 8005692:	095b      	lsrs	r3, r3, #5
 8005694:	f003 020f 	and.w	r2, r3, #15
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	440a      	add	r2, r1
 800569e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80056a0:	bf00      	nop
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	40013800 	.word	0x40013800
 80056ac:	51eb851f 	.word	0x51eb851f

080056b0 <_strtol_l.constprop.0>:
 80056b0:	2b24      	cmp	r3, #36	@ 0x24
 80056b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056b6:	4686      	mov	lr, r0
 80056b8:	4690      	mov	r8, r2
 80056ba:	d801      	bhi.n	80056c0 <_strtol_l.constprop.0+0x10>
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d106      	bne.n	80056ce <_strtol_l.constprop.0+0x1e>
 80056c0:	f000 fe7a 	bl	80063b8 <__errno>
 80056c4:	2316      	movs	r3, #22
 80056c6:	6003      	str	r3, [r0, #0]
 80056c8:	2000      	movs	r0, #0
 80056ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056ce:	460d      	mov	r5, r1
 80056d0:	4833      	ldr	r0, [pc, #204]	@ (80057a0 <_strtol_l.constprop.0+0xf0>)
 80056d2:	462a      	mov	r2, r5
 80056d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80056d8:	5d06      	ldrb	r6, [r0, r4]
 80056da:	f016 0608 	ands.w	r6, r6, #8
 80056de:	d1f8      	bne.n	80056d2 <_strtol_l.constprop.0+0x22>
 80056e0:	2c2d      	cmp	r4, #45	@ 0x2d
 80056e2:	d12d      	bne.n	8005740 <_strtol_l.constprop.0+0x90>
 80056e4:	2601      	movs	r6, #1
 80056e6:	782c      	ldrb	r4, [r5, #0]
 80056e8:	1c95      	adds	r5, r2, #2
 80056ea:	f033 0210 	bics.w	r2, r3, #16
 80056ee:	d109      	bne.n	8005704 <_strtol_l.constprop.0+0x54>
 80056f0:	2c30      	cmp	r4, #48	@ 0x30
 80056f2:	d12a      	bne.n	800574a <_strtol_l.constprop.0+0x9a>
 80056f4:	782a      	ldrb	r2, [r5, #0]
 80056f6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80056fa:	2a58      	cmp	r2, #88	@ 0x58
 80056fc:	d125      	bne.n	800574a <_strtol_l.constprop.0+0x9a>
 80056fe:	2310      	movs	r3, #16
 8005700:	786c      	ldrb	r4, [r5, #1]
 8005702:	3502      	adds	r5, #2
 8005704:	2200      	movs	r2, #0
 8005706:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800570a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800570e:	fbbc f9f3 	udiv	r9, ip, r3
 8005712:	4610      	mov	r0, r2
 8005714:	fb03 ca19 	mls	sl, r3, r9, ip
 8005718:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800571c:	2f09      	cmp	r7, #9
 800571e:	d81b      	bhi.n	8005758 <_strtol_l.constprop.0+0xa8>
 8005720:	463c      	mov	r4, r7
 8005722:	42a3      	cmp	r3, r4
 8005724:	dd27      	ble.n	8005776 <_strtol_l.constprop.0+0xc6>
 8005726:	1c57      	adds	r7, r2, #1
 8005728:	d007      	beq.n	800573a <_strtol_l.constprop.0+0x8a>
 800572a:	4581      	cmp	r9, r0
 800572c:	d320      	bcc.n	8005770 <_strtol_l.constprop.0+0xc0>
 800572e:	d101      	bne.n	8005734 <_strtol_l.constprop.0+0x84>
 8005730:	45a2      	cmp	sl, r4
 8005732:	db1d      	blt.n	8005770 <_strtol_l.constprop.0+0xc0>
 8005734:	2201      	movs	r2, #1
 8005736:	fb00 4003 	mla	r0, r0, r3, r4
 800573a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800573e:	e7eb      	b.n	8005718 <_strtol_l.constprop.0+0x68>
 8005740:	2c2b      	cmp	r4, #43	@ 0x2b
 8005742:	bf04      	itt	eq
 8005744:	782c      	ldrbeq	r4, [r5, #0]
 8005746:	1c95      	addeq	r5, r2, #2
 8005748:	e7cf      	b.n	80056ea <_strtol_l.constprop.0+0x3a>
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1da      	bne.n	8005704 <_strtol_l.constprop.0+0x54>
 800574e:	2c30      	cmp	r4, #48	@ 0x30
 8005750:	bf0c      	ite	eq
 8005752:	2308      	moveq	r3, #8
 8005754:	230a      	movne	r3, #10
 8005756:	e7d5      	b.n	8005704 <_strtol_l.constprop.0+0x54>
 8005758:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800575c:	2f19      	cmp	r7, #25
 800575e:	d801      	bhi.n	8005764 <_strtol_l.constprop.0+0xb4>
 8005760:	3c37      	subs	r4, #55	@ 0x37
 8005762:	e7de      	b.n	8005722 <_strtol_l.constprop.0+0x72>
 8005764:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005768:	2f19      	cmp	r7, #25
 800576a:	d804      	bhi.n	8005776 <_strtol_l.constprop.0+0xc6>
 800576c:	3c57      	subs	r4, #87	@ 0x57
 800576e:	e7d8      	b.n	8005722 <_strtol_l.constprop.0+0x72>
 8005770:	f04f 32ff 	mov.w	r2, #4294967295
 8005774:	e7e1      	b.n	800573a <_strtol_l.constprop.0+0x8a>
 8005776:	1c53      	adds	r3, r2, #1
 8005778:	d108      	bne.n	800578c <_strtol_l.constprop.0+0xdc>
 800577a:	2322      	movs	r3, #34	@ 0x22
 800577c:	4660      	mov	r0, ip
 800577e:	f8ce 3000 	str.w	r3, [lr]
 8005782:	f1b8 0f00 	cmp.w	r8, #0
 8005786:	d0a0      	beq.n	80056ca <_strtol_l.constprop.0+0x1a>
 8005788:	1e69      	subs	r1, r5, #1
 800578a:	e006      	b.n	800579a <_strtol_l.constprop.0+0xea>
 800578c:	b106      	cbz	r6, 8005790 <_strtol_l.constprop.0+0xe0>
 800578e:	4240      	negs	r0, r0
 8005790:	f1b8 0f00 	cmp.w	r8, #0
 8005794:	d099      	beq.n	80056ca <_strtol_l.constprop.0+0x1a>
 8005796:	2a00      	cmp	r2, #0
 8005798:	d1f6      	bne.n	8005788 <_strtol_l.constprop.0+0xd8>
 800579a:	f8c8 1000 	str.w	r1, [r8]
 800579e:	e794      	b.n	80056ca <_strtol_l.constprop.0+0x1a>
 80057a0:	0800854b 	.word	0x0800854b

080057a4 <strtol>:
 80057a4:	4613      	mov	r3, r2
 80057a6:	460a      	mov	r2, r1
 80057a8:	4601      	mov	r1, r0
 80057aa:	4802      	ldr	r0, [pc, #8]	@ (80057b4 <strtol+0x10>)
 80057ac:	6800      	ldr	r0, [r0, #0]
 80057ae:	f7ff bf7f 	b.w	80056b0 <_strtol_l.constprop.0>
 80057b2:	bf00      	nop
 80057b4:	200000a4 	.word	0x200000a4

080057b8 <__cvt>:
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057be:	461d      	mov	r5, r3
 80057c0:	bfbb      	ittet	lt
 80057c2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80057c6:	461d      	movlt	r5, r3
 80057c8:	2300      	movge	r3, #0
 80057ca:	232d      	movlt	r3, #45	@ 0x2d
 80057cc:	b088      	sub	sp, #32
 80057ce:	4614      	mov	r4, r2
 80057d0:	bfb8      	it	lt
 80057d2:	4614      	movlt	r4, r2
 80057d4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80057d6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80057d8:	7013      	strb	r3, [r2, #0]
 80057da:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80057dc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80057e0:	f023 0820 	bic.w	r8, r3, #32
 80057e4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80057e8:	d005      	beq.n	80057f6 <__cvt+0x3e>
 80057ea:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80057ee:	d100      	bne.n	80057f2 <__cvt+0x3a>
 80057f0:	3601      	adds	r6, #1
 80057f2:	2302      	movs	r3, #2
 80057f4:	e000      	b.n	80057f8 <__cvt+0x40>
 80057f6:	2303      	movs	r3, #3
 80057f8:	aa07      	add	r2, sp, #28
 80057fa:	9204      	str	r2, [sp, #16]
 80057fc:	aa06      	add	r2, sp, #24
 80057fe:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005802:	e9cd 3600 	strd	r3, r6, [sp]
 8005806:	4622      	mov	r2, r4
 8005808:	462b      	mov	r3, r5
 800580a:	f000 fea9 	bl	8006560 <_dtoa_r>
 800580e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005812:	4607      	mov	r7, r0
 8005814:	d119      	bne.n	800584a <__cvt+0x92>
 8005816:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005818:	07db      	lsls	r3, r3, #31
 800581a:	d50e      	bpl.n	800583a <__cvt+0x82>
 800581c:	eb00 0906 	add.w	r9, r0, r6
 8005820:	2200      	movs	r2, #0
 8005822:	2300      	movs	r3, #0
 8005824:	4620      	mov	r0, r4
 8005826:	4629      	mov	r1, r5
 8005828:	f7fb f8be 	bl	80009a8 <__aeabi_dcmpeq>
 800582c:	b108      	cbz	r0, 8005832 <__cvt+0x7a>
 800582e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005832:	2230      	movs	r2, #48	@ 0x30
 8005834:	9b07      	ldr	r3, [sp, #28]
 8005836:	454b      	cmp	r3, r9
 8005838:	d31e      	bcc.n	8005878 <__cvt+0xc0>
 800583a:	4638      	mov	r0, r7
 800583c:	9b07      	ldr	r3, [sp, #28]
 800583e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005840:	1bdb      	subs	r3, r3, r7
 8005842:	6013      	str	r3, [r2, #0]
 8005844:	b008      	add	sp, #32
 8005846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800584a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800584e:	eb00 0906 	add.w	r9, r0, r6
 8005852:	d1e5      	bne.n	8005820 <__cvt+0x68>
 8005854:	7803      	ldrb	r3, [r0, #0]
 8005856:	2b30      	cmp	r3, #48	@ 0x30
 8005858:	d10a      	bne.n	8005870 <__cvt+0xb8>
 800585a:	2200      	movs	r2, #0
 800585c:	2300      	movs	r3, #0
 800585e:	4620      	mov	r0, r4
 8005860:	4629      	mov	r1, r5
 8005862:	f7fb f8a1 	bl	80009a8 <__aeabi_dcmpeq>
 8005866:	b918      	cbnz	r0, 8005870 <__cvt+0xb8>
 8005868:	f1c6 0601 	rsb	r6, r6, #1
 800586c:	f8ca 6000 	str.w	r6, [sl]
 8005870:	f8da 3000 	ldr.w	r3, [sl]
 8005874:	4499      	add	r9, r3
 8005876:	e7d3      	b.n	8005820 <__cvt+0x68>
 8005878:	1c59      	adds	r1, r3, #1
 800587a:	9107      	str	r1, [sp, #28]
 800587c:	701a      	strb	r2, [r3, #0]
 800587e:	e7d9      	b.n	8005834 <__cvt+0x7c>

08005880 <__exponent>:
 8005880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005882:	2900      	cmp	r1, #0
 8005884:	bfb6      	itet	lt
 8005886:	232d      	movlt	r3, #45	@ 0x2d
 8005888:	232b      	movge	r3, #43	@ 0x2b
 800588a:	4249      	neglt	r1, r1
 800588c:	2909      	cmp	r1, #9
 800588e:	7002      	strb	r2, [r0, #0]
 8005890:	7043      	strb	r3, [r0, #1]
 8005892:	dd29      	ble.n	80058e8 <__exponent+0x68>
 8005894:	f10d 0307 	add.w	r3, sp, #7
 8005898:	461d      	mov	r5, r3
 800589a:	270a      	movs	r7, #10
 800589c:	fbb1 f6f7 	udiv	r6, r1, r7
 80058a0:	461a      	mov	r2, r3
 80058a2:	fb07 1416 	mls	r4, r7, r6, r1
 80058a6:	3430      	adds	r4, #48	@ 0x30
 80058a8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80058ac:	460c      	mov	r4, r1
 80058ae:	2c63      	cmp	r4, #99	@ 0x63
 80058b0:	4631      	mov	r1, r6
 80058b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80058b6:	dcf1      	bgt.n	800589c <__exponent+0x1c>
 80058b8:	3130      	adds	r1, #48	@ 0x30
 80058ba:	1e94      	subs	r4, r2, #2
 80058bc:	f803 1c01 	strb.w	r1, [r3, #-1]
 80058c0:	4623      	mov	r3, r4
 80058c2:	1c41      	adds	r1, r0, #1
 80058c4:	42ab      	cmp	r3, r5
 80058c6:	d30a      	bcc.n	80058de <__exponent+0x5e>
 80058c8:	f10d 0309 	add.w	r3, sp, #9
 80058cc:	1a9b      	subs	r3, r3, r2
 80058ce:	42ac      	cmp	r4, r5
 80058d0:	bf88      	it	hi
 80058d2:	2300      	movhi	r3, #0
 80058d4:	3302      	adds	r3, #2
 80058d6:	4403      	add	r3, r0
 80058d8:	1a18      	subs	r0, r3, r0
 80058da:	b003      	add	sp, #12
 80058dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058de:	f813 6b01 	ldrb.w	r6, [r3], #1
 80058e2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80058e6:	e7ed      	b.n	80058c4 <__exponent+0x44>
 80058e8:	2330      	movs	r3, #48	@ 0x30
 80058ea:	3130      	adds	r1, #48	@ 0x30
 80058ec:	7083      	strb	r3, [r0, #2]
 80058ee:	70c1      	strb	r1, [r0, #3]
 80058f0:	1d03      	adds	r3, r0, #4
 80058f2:	e7f1      	b.n	80058d8 <__exponent+0x58>

080058f4 <_printf_float>:
 80058f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058f8:	b091      	sub	sp, #68	@ 0x44
 80058fa:	460c      	mov	r4, r1
 80058fc:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005900:	4616      	mov	r6, r2
 8005902:	461f      	mov	r7, r3
 8005904:	4605      	mov	r5, r0
 8005906:	f000 fd0d 	bl	8006324 <_localeconv_r>
 800590a:	6803      	ldr	r3, [r0, #0]
 800590c:	4618      	mov	r0, r3
 800590e:	9308      	str	r3, [sp, #32]
 8005910:	f7fa fc1e 	bl	8000150 <strlen>
 8005914:	2300      	movs	r3, #0
 8005916:	930e      	str	r3, [sp, #56]	@ 0x38
 8005918:	f8d8 3000 	ldr.w	r3, [r8]
 800591c:	9009      	str	r0, [sp, #36]	@ 0x24
 800591e:	3307      	adds	r3, #7
 8005920:	f023 0307 	bic.w	r3, r3, #7
 8005924:	f103 0208 	add.w	r2, r3, #8
 8005928:	f894 a018 	ldrb.w	sl, [r4, #24]
 800592c:	f8d4 b000 	ldr.w	fp, [r4]
 8005930:	f8c8 2000 	str.w	r2, [r8]
 8005934:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005938:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800593c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800593e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005942:	f04f 32ff 	mov.w	r2, #4294967295
 8005946:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800594a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800594e:	4b9c      	ldr	r3, [pc, #624]	@ (8005bc0 <_printf_float+0x2cc>)
 8005950:	f7fb f85c 	bl	8000a0c <__aeabi_dcmpun>
 8005954:	bb70      	cbnz	r0, 80059b4 <_printf_float+0xc0>
 8005956:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800595a:	f04f 32ff 	mov.w	r2, #4294967295
 800595e:	4b98      	ldr	r3, [pc, #608]	@ (8005bc0 <_printf_float+0x2cc>)
 8005960:	f7fb f836 	bl	80009d0 <__aeabi_dcmple>
 8005964:	bb30      	cbnz	r0, 80059b4 <_printf_float+0xc0>
 8005966:	2200      	movs	r2, #0
 8005968:	2300      	movs	r3, #0
 800596a:	4640      	mov	r0, r8
 800596c:	4649      	mov	r1, r9
 800596e:	f7fb f825 	bl	80009bc <__aeabi_dcmplt>
 8005972:	b110      	cbz	r0, 800597a <_printf_float+0x86>
 8005974:	232d      	movs	r3, #45	@ 0x2d
 8005976:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800597a:	4a92      	ldr	r2, [pc, #584]	@ (8005bc4 <_printf_float+0x2d0>)
 800597c:	4b92      	ldr	r3, [pc, #584]	@ (8005bc8 <_printf_float+0x2d4>)
 800597e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005982:	bf94      	ite	ls
 8005984:	4690      	movls	r8, r2
 8005986:	4698      	movhi	r8, r3
 8005988:	2303      	movs	r3, #3
 800598a:	f04f 0900 	mov.w	r9, #0
 800598e:	6123      	str	r3, [r4, #16]
 8005990:	f02b 0304 	bic.w	r3, fp, #4
 8005994:	6023      	str	r3, [r4, #0]
 8005996:	4633      	mov	r3, r6
 8005998:	4621      	mov	r1, r4
 800599a:	4628      	mov	r0, r5
 800599c:	9700      	str	r7, [sp, #0]
 800599e:	aa0f      	add	r2, sp, #60	@ 0x3c
 80059a0:	f000 f9d4 	bl	8005d4c <_printf_common>
 80059a4:	3001      	adds	r0, #1
 80059a6:	f040 8090 	bne.w	8005aca <_printf_float+0x1d6>
 80059aa:	f04f 30ff 	mov.w	r0, #4294967295
 80059ae:	b011      	add	sp, #68	@ 0x44
 80059b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059b4:	4642      	mov	r2, r8
 80059b6:	464b      	mov	r3, r9
 80059b8:	4640      	mov	r0, r8
 80059ba:	4649      	mov	r1, r9
 80059bc:	f7fb f826 	bl	8000a0c <__aeabi_dcmpun>
 80059c0:	b148      	cbz	r0, 80059d6 <_printf_float+0xe2>
 80059c2:	464b      	mov	r3, r9
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	bfb8      	it	lt
 80059c8:	232d      	movlt	r3, #45	@ 0x2d
 80059ca:	4a80      	ldr	r2, [pc, #512]	@ (8005bcc <_printf_float+0x2d8>)
 80059cc:	bfb8      	it	lt
 80059ce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80059d2:	4b7f      	ldr	r3, [pc, #508]	@ (8005bd0 <_printf_float+0x2dc>)
 80059d4:	e7d3      	b.n	800597e <_printf_float+0x8a>
 80059d6:	6863      	ldr	r3, [r4, #4]
 80059d8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80059dc:	1c5a      	adds	r2, r3, #1
 80059de:	d13f      	bne.n	8005a60 <_printf_float+0x16c>
 80059e0:	2306      	movs	r3, #6
 80059e2:	6063      	str	r3, [r4, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80059ea:	6023      	str	r3, [r4, #0]
 80059ec:	9206      	str	r2, [sp, #24]
 80059ee:	aa0e      	add	r2, sp, #56	@ 0x38
 80059f0:	e9cd a204 	strd	sl, r2, [sp, #16]
 80059f4:	aa0d      	add	r2, sp, #52	@ 0x34
 80059f6:	9203      	str	r2, [sp, #12]
 80059f8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80059fc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005a00:	6863      	ldr	r3, [r4, #4]
 8005a02:	4642      	mov	r2, r8
 8005a04:	9300      	str	r3, [sp, #0]
 8005a06:	4628      	mov	r0, r5
 8005a08:	464b      	mov	r3, r9
 8005a0a:	910a      	str	r1, [sp, #40]	@ 0x28
 8005a0c:	f7ff fed4 	bl	80057b8 <__cvt>
 8005a10:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005a12:	4680      	mov	r8, r0
 8005a14:	2947      	cmp	r1, #71	@ 0x47
 8005a16:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005a18:	d128      	bne.n	8005a6c <_printf_float+0x178>
 8005a1a:	1cc8      	adds	r0, r1, #3
 8005a1c:	db02      	blt.n	8005a24 <_printf_float+0x130>
 8005a1e:	6863      	ldr	r3, [r4, #4]
 8005a20:	4299      	cmp	r1, r3
 8005a22:	dd40      	ble.n	8005aa6 <_printf_float+0x1b2>
 8005a24:	f1aa 0a02 	sub.w	sl, sl, #2
 8005a28:	fa5f fa8a 	uxtb.w	sl, sl
 8005a2c:	4652      	mov	r2, sl
 8005a2e:	3901      	subs	r1, #1
 8005a30:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005a34:	910d      	str	r1, [sp, #52]	@ 0x34
 8005a36:	f7ff ff23 	bl	8005880 <__exponent>
 8005a3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005a3c:	4681      	mov	r9, r0
 8005a3e:	1813      	adds	r3, r2, r0
 8005a40:	2a01      	cmp	r2, #1
 8005a42:	6123      	str	r3, [r4, #16]
 8005a44:	dc02      	bgt.n	8005a4c <_printf_float+0x158>
 8005a46:	6822      	ldr	r2, [r4, #0]
 8005a48:	07d2      	lsls	r2, r2, #31
 8005a4a:	d501      	bpl.n	8005a50 <_printf_float+0x15c>
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	6123      	str	r3, [r4, #16]
 8005a50:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d09e      	beq.n	8005996 <_printf_float+0xa2>
 8005a58:	232d      	movs	r3, #45	@ 0x2d
 8005a5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a5e:	e79a      	b.n	8005996 <_printf_float+0xa2>
 8005a60:	2947      	cmp	r1, #71	@ 0x47
 8005a62:	d1bf      	bne.n	80059e4 <_printf_float+0xf0>
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1bd      	bne.n	80059e4 <_printf_float+0xf0>
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e7ba      	b.n	80059e2 <_printf_float+0xee>
 8005a6c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005a70:	d9dc      	bls.n	8005a2c <_printf_float+0x138>
 8005a72:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005a76:	d118      	bne.n	8005aaa <_printf_float+0x1b6>
 8005a78:	2900      	cmp	r1, #0
 8005a7a:	6863      	ldr	r3, [r4, #4]
 8005a7c:	dd0b      	ble.n	8005a96 <_printf_float+0x1a2>
 8005a7e:	6121      	str	r1, [r4, #16]
 8005a80:	b913      	cbnz	r3, 8005a88 <_printf_float+0x194>
 8005a82:	6822      	ldr	r2, [r4, #0]
 8005a84:	07d0      	lsls	r0, r2, #31
 8005a86:	d502      	bpl.n	8005a8e <_printf_float+0x19a>
 8005a88:	3301      	adds	r3, #1
 8005a8a:	440b      	add	r3, r1
 8005a8c:	6123      	str	r3, [r4, #16]
 8005a8e:	f04f 0900 	mov.w	r9, #0
 8005a92:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005a94:	e7dc      	b.n	8005a50 <_printf_float+0x15c>
 8005a96:	b913      	cbnz	r3, 8005a9e <_printf_float+0x1aa>
 8005a98:	6822      	ldr	r2, [r4, #0]
 8005a9a:	07d2      	lsls	r2, r2, #31
 8005a9c:	d501      	bpl.n	8005aa2 <_printf_float+0x1ae>
 8005a9e:	3302      	adds	r3, #2
 8005aa0:	e7f4      	b.n	8005a8c <_printf_float+0x198>
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e7f2      	b.n	8005a8c <_printf_float+0x198>
 8005aa6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005aaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005aac:	4299      	cmp	r1, r3
 8005aae:	db05      	blt.n	8005abc <_printf_float+0x1c8>
 8005ab0:	6823      	ldr	r3, [r4, #0]
 8005ab2:	6121      	str	r1, [r4, #16]
 8005ab4:	07d8      	lsls	r0, r3, #31
 8005ab6:	d5ea      	bpl.n	8005a8e <_printf_float+0x19a>
 8005ab8:	1c4b      	adds	r3, r1, #1
 8005aba:	e7e7      	b.n	8005a8c <_printf_float+0x198>
 8005abc:	2900      	cmp	r1, #0
 8005abe:	bfcc      	ite	gt
 8005ac0:	2201      	movgt	r2, #1
 8005ac2:	f1c1 0202 	rsble	r2, r1, #2
 8005ac6:	4413      	add	r3, r2
 8005ac8:	e7e0      	b.n	8005a8c <_printf_float+0x198>
 8005aca:	6823      	ldr	r3, [r4, #0]
 8005acc:	055a      	lsls	r2, r3, #21
 8005ace:	d407      	bmi.n	8005ae0 <_printf_float+0x1ec>
 8005ad0:	6923      	ldr	r3, [r4, #16]
 8005ad2:	4642      	mov	r2, r8
 8005ad4:	4631      	mov	r1, r6
 8005ad6:	4628      	mov	r0, r5
 8005ad8:	47b8      	blx	r7
 8005ada:	3001      	adds	r0, #1
 8005adc:	d12b      	bne.n	8005b36 <_printf_float+0x242>
 8005ade:	e764      	b.n	80059aa <_printf_float+0xb6>
 8005ae0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005ae4:	f240 80dc 	bls.w	8005ca0 <_printf_float+0x3ac>
 8005ae8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005aec:	2200      	movs	r2, #0
 8005aee:	2300      	movs	r3, #0
 8005af0:	f7fa ff5a 	bl	80009a8 <__aeabi_dcmpeq>
 8005af4:	2800      	cmp	r0, #0
 8005af6:	d033      	beq.n	8005b60 <_printf_float+0x26c>
 8005af8:	2301      	movs	r3, #1
 8005afa:	4631      	mov	r1, r6
 8005afc:	4628      	mov	r0, r5
 8005afe:	4a35      	ldr	r2, [pc, #212]	@ (8005bd4 <_printf_float+0x2e0>)
 8005b00:	47b8      	blx	r7
 8005b02:	3001      	adds	r0, #1
 8005b04:	f43f af51 	beq.w	80059aa <_printf_float+0xb6>
 8005b08:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005b0c:	4543      	cmp	r3, r8
 8005b0e:	db02      	blt.n	8005b16 <_printf_float+0x222>
 8005b10:	6823      	ldr	r3, [r4, #0]
 8005b12:	07d8      	lsls	r0, r3, #31
 8005b14:	d50f      	bpl.n	8005b36 <_printf_float+0x242>
 8005b16:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005b1a:	4631      	mov	r1, r6
 8005b1c:	4628      	mov	r0, r5
 8005b1e:	47b8      	blx	r7
 8005b20:	3001      	adds	r0, #1
 8005b22:	f43f af42 	beq.w	80059aa <_printf_float+0xb6>
 8005b26:	f04f 0900 	mov.w	r9, #0
 8005b2a:	f108 38ff 	add.w	r8, r8, #4294967295
 8005b2e:	f104 0a1a 	add.w	sl, r4, #26
 8005b32:	45c8      	cmp	r8, r9
 8005b34:	dc09      	bgt.n	8005b4a <_printf_float+0x256>
 8005b36:	6823      	ldr	r3, [r4, #0]
 8005b38:	079b      	lsls	r3, r3, #30
 8005b3a:	f100 8102 	bmi.w	8005d42 <_printf_float+0x44e>
 8005b3e:	68e0      	ldr	r0, [r4, #12]
 8005b40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b42:	4298      	cmp	r0, r3
 8005b44:	bfb8      	it	lt
 8005b46:	4618      	movlt	r0, r3
 8005b48:	e731      	b.n	80059ae <_printf_float+0xba>
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	4652      	mov	r2, sl
 8005b4e:	4631      	mov	r1, r6
 8005b50:	4628      	mov	r0, r5
 8005b52:	47b8      	blx	r7
 8005b54:	3001      	adds	r0, #1
 8005b56:	f43f af28 	beq.w	80059aa <_printf_float+0xb6>
 8005b5a:	f109 0901 	add.w	r9, r9, #1
 8005b5e:	e7e8      	b.n	8005b32 <_printf_float+0x23e>
 8005b60:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	dc38      	bgt.n	8005bd8 <_printf_float+0x2e4>
 8005b66:	2301      	movs	r3, #1
 8005b68:	4631      	mov	r1, r6
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	4a19      	ldr	r2, [pc, #100]	@ (8005bd4 <_printf_float+0x2e0>)
 8005b6e:	47b8      	blx	r7
 8005b70:	3001      	adds	r0, #1
 8005b72:	f43f af1a 	beq.w	80059aa <_printf_float+0xb6>
 8005b76:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005b7a:	ea59 0303 	orrs.w	r3, r9, r3
 8005b7e:	d102      	bne.n	8005b86 <_printf_float+0x292>
 8005b80:	6823      	ldr	r3, [r4, #0]
 8005b82:	07d9      	lsls	r1, r3, #31
 8005b84:	d5d7      	bpl.n	8005b36 <_printf_float+0x242>
 8005b86:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005b8a:	4631      	mov	r1, r6
 8005b8c:	4628      	mov	r0, r5
 8005b8e:	47b8      	blx	r7
 8005b90:	3001      	adds	r0, #1
 8005b92:	f43f af0a 	beq.w	80059aa <_printf_float+0xb6>
 8005b96:	f04f 0a00 	mov.w	sl, #0
 8005b9a:	f104 0b1a 	add.w	fp, r4, #26
 8005b9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ba0:	425b      	negs	r3, r3
 8005ba2:	4553      	cmp	r3, sl
 8005ba4:	dc01      	bgt.n	8005baa <_printf_float+0x2b6>
 8005ba6:	464b      	mov	r3, r9
 8005ba8:	e793      	b.n	8005ad2 <_printf_float+0x1de>
 8005baa:	2301      	movs	r3, #1
 8005bac:	465a      	mov	r2, fp
 8005bae:	4631      	mov	r1, r6
 8005bb0:	4628      	mov	r0, r5
 8005bb2:	47b8      	blx	r7
 8005bb4:	3001      	adds	r0, #1
 8005bb6:	f43f aef8 	beq.w	80059aa <_printf_float+0xb6>
 8005bba:	f10a 0a01 	add.w	sl, sl, #1
 8005bbe:	e7ee      	b.n	8005b9e <_printf_float+0x2aa>
 8005bc0:	7fefffff 	.word	0x7fefffff
 8005bc4:	0800864b 	.word	0x0800864b
 8005bc8:	0800864f 	.word	0x0800864f
 8005bcc:	08008653 	.word	0x08008653
 8005bd0:	08008657 	.word	0x08008657
 8005bd4:	0800865b 	.word	0x0800865b
 8005bd8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005bda:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005bde:	4553      	cmp	r3, sl
 8005be0:	bfa8      	it	ge
 8005be2:	4653      	movge	r3, sl
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	4699      	mov	r9, r3
 8005be8:	dc36      	bgt.n	8005c58 <_printf_float+0x364>
 8005bea:	f04f 0b00 	mov.w	fp, #0
 8005bee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bf2:	f104 021a 	add.w	r2, r4, #26
 8005bf6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005bf8:	930a      	str	r3, [sp, #40]	@ 0x28
 8005bfa:	eba3 0309 	sub.w	r3, r3, r9
 8005bfe:	455b      	cmp	r3, fp
 8005c00:	dc31      	bgt.n	8005c66 <_printf_float+0x372>
 8005c02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c04:	459a      	cmp	sl, r3
 8005c06:	dc3a      	bgt.n	8005c7e <_printf_float+0x38a>
 8005c08:	6823      	ldr	r3, [r4, #0]
 8005c0a:	07da      	lsls	r2, r3, #31
 8005c0c:	d437      	bmi.n	8005c7e <_printf_float+0x38a>
 8005c0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c10:	ebaa 0903 	sub.w	r9, sl, r3
 8005c14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c16:	ebaa 0303 	sub.w	r3, sl, r3
 8005c1a:	4599      	cmp	r9, r3
 8005c1c:	bfa8      	it	ge
 8005c1e:	4699      	movge	r9, r3
 8005c20:	f1b9 0f00 	cmp.w	r9, #0
 8005c24:	dc33      	bgt.n	8005c8e <_printf_float+0x39a>
 8005c26:	f04f 0800 	mov.w	r8, #0
 8005c2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c2e:	f104 0b1a 	add.w	fp, r4, #26
 8005c32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c34:	ebaa 0303 	sub.w	r3, sl, r3
 8005c38:	eba3 0309 	sub.w	r3, r3, r9
 8005c3c:	4543      	cmp	r3, r8
 8005c3e:	f77f af7a 	ble.w	8005b36 <_printf_float+0x242>
 8005c42:	2301      	movs	r3, #1
 8005c44:	465a      	mov	r2, fp
 8005c46:	4631      	mov	r1, r6
 8005c48:	4628      	mov	r0, r5
 8005c4a:	47b8      	blx	r7
 8005c4c:	3001      	adds	r0, #1
 8005c4e:	f43f aeac 	beq.w	80059aa <_printf_float+0xb6>
 8005c52:	f108 0801 	add.w	r8, r8, #1
 8005c56:	e7ec      	b.n	8005c32 <_printf_float+0x33e>
 8005c58:	4642      	mov	r2, r8
 8005c5a:	4631      	mov	r1, r6
 8005c5c:	4628      	mov	r0, r5
 8005c5e:	47b8      	blx	r7
 8005c60:	3001      	adds	r0, #1
 8005c62:	d1c2      	bne.n	8005bea <_printf_float+0x2f6>
 8005c64:	e6a1      	b.n	80059aa <_printf_float+0xb6>
 8005c66:	2301      	movs	r3, #1
 8005c68:	4631      	mov	r1, r6
 8005c6a:	4628      	mov	r0, r5
 8005c6c:	920a      	str	r2, [sp, #40]	@ 0x28
 8005c6e:	47b8      	blx	r7
 8005c70:	3001      	adds	r0, #1
 8005c72:	f43f ae9a 	beq.w	80059aa <_printf_float+0xb6>
 8005c76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005c78:	f10b 0b01 	add.w	fp, fp, #1
 8005c7c:	e7bb      	b.n	8005bf6 <_printf_float+0x302>
 8005c7e:	4631      	mov	r1, r6
 8005c80:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005c84:	4628      	mov	r0, r5
 8005c86:	47b8      	blx	r7
 8005c88:	3001      	adds	r0, #1
 8005c8a:	d1c0      	bne.n	8005c0e <_printf_float+0x31a>
 8005c8c:	e68d      	b.n	80059aa <_printf_float+0xb6>
 8005c8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005c90:	464b      	mov	r3, r9
 8005c92:	4631      	mov	r1, r6
 8005c94:	4628      	mov	r0, r5
 8005c96:	4442      	add	r2, r8
 8005c98:	47b8      	blx	r7
 8005c9a:	3001      	adds	r0, #1
 8005c9c:	d1c3      	bne.n	8005c26 <_printf_float+0x332>
 8005c9e:	e684      	b.n	80059aa <_printf_float+0xb6>
 8005ca0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005ca4:	f1ba 0f01 	cmp.w	sl, #1
 8005ca8:	dc01      	bgt.n	8005cae <_printf_float+0x3ba>
 8005caa:	07db      	lsls	r3, r3, #31
 8005cac:	d536      	bpl.n	8005d1c <_printf_float+0x428>
 8005cae:	2301      	movs	r3, #1
 8005cb0:	4642      	mov	r2, r8
 8005cb2:	4631      	mov	r1, r6
 8005cb4:	4628      	mov	r0, r5
 8005cb6:	47b8      	blx	r7
 8005cb8:	3001      	adds	r0, #1
 8005cba:	f43f ae76 	beq.w	80059aa <_printf_float+0xb6>
 8005cbe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005cc2:	4631      	mov	r1, r6
 8005cc4:	4628      	mov	r0, r5
 8005cc6:	47b8      	blx	r7
 8005cc8:	3001      	adds	r0, #1
 8005cca:	f43f ae6e 	beq.w	80059aa <_printf_float+0xb6>
 8005cce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005cda:	f7fa fe65 	bl	80009a8 <__aeabi_dcmpeq>
 8005cde:	b9c0      	cbnz	r0, 8005d12 <_printf_float+0x41e>
 8005ce0:	4653      	mov	r3, sl
 8005ce2:	f108 0201 	add.w	r2, r8, #1
 8005ce6:	4631      	mov	r1, r6
 8005ce8:	4628      	mov	r0, r5
 8005cea:	47b8      	blx	r7
 8005cec:	3001      	adds	r0, #1
 8005cee:	d10c      	bne.n	8005d0a <_printf_float+0x416>
 8005cf0:	e65b      	b.n	80059aa <_printf_float+0xb6>
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	465a      	mov	r2, fp
 8005cf6:	4631      	mov	r1, r6
 8005cf8:	4628      	mov	r0, r5
 8005cfa:	47b8      	blx	r7
 8005cfc:	3001      	adds	r0, #1
 8005cfe:	f43f ae54 	beq.w	80059aa <_printf_float+0xb6>
 8005d02:	f108 0801 	add.w	r8, r8, #1
 8005d06:	45d0      	cmp	r8, sl
 8005d08:	dbf3      	blt.n	8005cf2 <_printf_float+0x3fe>
 8005d0a:	464b      	mov	r3, r9
 8005d0c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005d10:	e6e0      	b.n	8005ad4 <_printf_float+0x1e0>
 8005d12:	f04f 0800 	mov.w	r8, #0
 8005d16:	f104 0b1a 	add.w	fp, r4, #26
 8005d1a:	e7f4      	b.n	8005d06 <_printf_float+0x412>
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	4642      	mov	r2, r8
 8005d20:	e7e1      	b.n	8005ce6 <_printf_float+0x3f2>
 8005d22:	2301      	movs	r3, #1
 8005d24:	464a      	mov	r2, r9
 8005d26:	4631      	mov	r1, r6
 8005d28:	4628      	mov	r0, r5
 8005d2a:	47b8      	blx	r7
 8005d2c:	3001      	adds	r0, #1
 8005d2e:	f43f ae3c 	beq.w	80059aa <_printf_float+0xb6>
 8005d32:	f108 0801 	add.w	r8, r8, #1
 8005d36:	68e3      	ldr	r3, [r4, #12]
 8005d38:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005d3a:	1a5b      	subs	r3, r3, r1
 8005d3c:	4543      	cmp	r3, r8
 8005d3e:	dcf0      	bgt.n	8005d22 <_printf_float+0x42e>
 8005d40:	e6fd      	b.n	8005b3e <_printf_float+0x24a>
 8005d42:	f04f 0800 	mov.w	r8, #0
 8005d46:	f104 0919 	add.w	r9, r4, #25
 8005d4a:	e7f4      	b.n	8005d36 <_printf_float+0x442>

08005d4c <_printf_common>:
 8005d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d50:	4616      	mov	r6, r2
 8005d52:	4698      	mov	r8, r3
 8005d54:	688a      	ldr	r2, [r1, #8]
 8005d56:	690b      	ldr	r3, [r1, #16]
 8005d58:	4607      	mov	r7, r0
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	bfb8      	it	lt
 8005d5e:	4613      	movlt	r3, r2
 8005d60:	6033      	str	r3, [r6, #0]
 8005d62:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005d66:	460c      	mov	r4, r1
 8005d68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d6c:	b10a      	cbz	r2, 8005d72 <_printf_common+0x26>
 8005d6e:	3301      	adds	r3, #1
 8005d70:	6033      	str	r3, [r6, #0]
 8005d72:	6823      	ldr	r3, [r4, #0]
 8005d74:	0699      	lsls	r1, r3, #26
 8005d76:	bf42      	ittt	mi
 8005d78:	6833      	ldrmi	r3, [r6, #0]
 8005d7a:	3302      	addmi	r3, #2
 8005d7c:	6033      	strmi	r3, [r6, #0]
 8005d7e:	6825      	ldr	r5, [r4, #0]
 8005d80:	f015 0506 	ands.w	r5, r5, #6
 8005d84:	d106      	bne.n	8005d94 <_printf_common+0x48>
 8005d86:	f104 0a19 	add.w	sl, r4, #25
 8005d8a:	68e3      	ldr	r3, [r4, #12]
 8005d8c:	6832      	ldr	r2, [r6, #0]
 8005d8e:	1a9b      	subs	r3, r3, r2
 8005d90:	42ab      	cmp	r3, r5
 8005d92:	dc2b      	bgt.n	8005dec <_printf_common+0xa0>
 8005d94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005d98:	6822      	ldr	r2, [r4, #0]
 8005d9a:	3b00      	subs	r3, #0
 8005d9c:	bf18      	it	ne
 8005d9e:	2301      	movne	r3, #1
 8005da0:	0692      	lsls	r2, r2, #26
 8005da2:	d430      	bmi.n	8005e06 <_printf_common+0xba>
 8005da4:	4641      	mov	r1, r8
 8005da6:	4638      	mov	r0, r7
 8005da8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005dac:	47c8      	blx	r9
 8005dae:	3001      	adds	r0, #1
 8005db0:	d023      	beq.n	8005dfa <_printf_common+0xae>
 8005db2:	6823      	ldr	r3, [r4, #0]
 8005db4:	6922      	ldr	r2, [r4, #16]
 8005db6:	f003 0306 	and.w	r3, r3, #6
 8005dba:	2b04      	cmp	r3, #4
 8005dbc:	bf14      	ite	ne
 8005dbe:	2500      	movne	r5, #0
 8005dc0:	6833      	ldreq	r3, [r6, #0]
 8005dc2:	f04f 0600 	mov.w	r6, #0
 8005dc6:	bf08      	it	eq
 8005dc8:	68e5      	ldreq	r5, [r4, #12]
 8005dca:	f104 041a 	add.w	r4, r4, #26
 8005dce:	bf08      	it	eq
 8005dd0:	1aed      	subeq	r5, r5, r3
 8005dd2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005dd6:	bf08      	it	eq
 8005dd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	bfc4      	itt	gt
 8005de0:	1a9b      	subgt	r3, r3, r2
 8005de2:	18ed      	addgt	r5, r5, r3
 8005de4:	42b5      	cmp	r5, r6
 8005de6:	d11a      	bne.n	8005e1e <_printf_common+0xd2>
 8005de8:	2000      	movs	r0, #0
 8005dea:	e008      	b.n	8005dfe <_printf_common+0xb2>
 8005dec:	2301      	movs	r3, #1
 8005dee:	4652      	mov	r2, sl
 8005df0:	4641      	mov	r1, r8
 8005df2:	4638      	mov	r0, r7
 8005df4:	47c8      	blx	r9
 8005df6:	3001      	adds	r0, #1
 8005df8:	d103      	bne.n	8005e02 <_printf_common+0xb6>
 8005dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8005dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e02:	3501      	adds	r5, #1
 8005e04:	e7c1      	b.n	8005d8a <_printf_common+0x3e>
 8005e06:	2030      	movs	r0, #48	@ 0x30
 8005e08:	18e1      	adds	r1, r4, r3
 8005e0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005e0e:	1c5a      	adds	r2, r3, #1
 8005e10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005e14:	4422      	add	r2, r4
 8005e16:	3302      	adds	r3, #2
 8005e18:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005e1c:	e7c2      	b.n	8005da4 <_printf_common+0x58>
 8005e1e:	2301      	movs	r3, #1
 8005e20:	4622      	mov	r2, r4
 8005e22:	4641      	mov	r1, r8
 8005e24:	4638      	mov	r0, r7
 8005e26:	47c8      	blx	r9
 8005e28:	3001      	adds	r0, #1
 8005e2a:	d0e6      	beq.n	8005dfa <_printf_common+0xae>
 8005e2c:	3601      	adds	r6, #1
 8005e2e:	e7d9      	b.n	8005de4 <_printf_common+0x98>

08005e30 <_printf_i>:
 8005e30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e34:	7e0f      	ldrb	r7, [r1, #24]
 8005e36:	4691      	mov	r9, r2
 8005e38:	2f78      	cmp	r7, #120	@ 0x78
 8005e3a:	4680      	mov	r8, r0
 8005e3c:	460c      	mov	r4, r1
 8005e3e:	469a      	mov	sl, r3
 8005e40:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005e42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005e46:	d807      	bhi.n	8005e58 <_printf_i+0x28>
 8005e48:	2f62      	cmp	r7, #98	@ 0x62
 8005e4a:	d80a      	bhi.n	8005e62 <_printf_i+0x32>
 8005e4c:	2f00      	cmp	r7, #0
 8005e4e:	f000 80d3 	beq.w	8005ff8 <_printf_i+0x1c8>
 8005e52:	2f58      	cmp	r7, #88	@ 0x58
 8005e54:	f000 80ba 	beq.w	8005fcc <_printf_i+0x19c>
 8005e58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005e60:	e03a      	b.n	8005ed8 <_printf_i+0xa8>
 8005e62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005e66:	2b15      	cmp	r3, #21
 8005e68:	d8f6      	bhi.n	8005e58 <_printf_i+0x28>
 8005e6a:	a101      	add	r1, pc, #4	@ (adr r1, 8005e70 <_printf_i+0x40>)
 8005e6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e70:	08005ec9 	.word	0x08005ec9
 8005e74:	08005edd 	.word	0x08005edd
 8005e78:	08005e59 	.word	0x08005e59
 8005e7c:	08005e59 	.word	0x08005e59
 8005e80:	08005e59 	.word	0x08005e59
 8005e84:	08005e59 	.word	0x08005e59
 8005e88:	08005edd 	.word	0x08005edd
 8005e8c:	08005e59 	.word	0x08005e59
 8005e90:	08005e59 	.word	0x08005e59
 8005e94:	08005e59 	.word	0x08005e59
 8005e98:	08005e59 	.word	0x08005e59
 8005e9c:	08005fdf 	.word	0x08005fdf
 8005ea0:	08005f07 	.word	0x08005f07
 8005ea4:	08005f99 	.word	0x08005f99
 8005ea8:	08005e59 	.word	0x08005e59
 8005eac:	08005e59 	.word	0x08005e59
 8005eb0:	08006001 	.word	0x08006001
 8005eb4:	08005e59 	.word	0x08005e59
 8005eb8:	08005f07 	.word	0x08005f07
 8005ebc:	08005e59 	.word	0x08005e59
 8005ec0:	08005e59 	.word	0x08005e59
 8005ec4:	08005fa1 	.word	0x08005fa1
 8005ec8:	6833      	ldr	r3, [r6, #0]
 8005eca:	1d1a      	adds	r2, r3, #4
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	6032      	str	r2, [r6, #0]
 8005ed0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ed4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e09e      	b.n	800601a <_printf_i+0x1ea>
 8005edc:	6833      	ldr	r3, [r6, #0]
 8005ede:	6820      	ldr	r0, [r4, #0]
 8005ee0:	1d19      	adds	r1, r3, #4
 8005ee2:	6031      	str	r1, [r6, #0]
 8005ee4:	0606      	lsls	r6, r0, #24
 8005ee6:	d501      	bpl.n	8005eec <_printf_i+0xbc>
 8005ee8:	681d      	ldr	r5, [r3, #0]
 8005eea:	e003      	b.n	8005ef4 <_printf_i+0xc4>
 8005eec:	0645      	lsls	r5, r0, #25
 8005eee:	d5fb      	bpl.n	8005ee8 <_printf_i+0xb8>
 8005ef0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005ef4:	2d00      	cmp	r5, #0
 8005ef6:	da03      	bge.n	8005f00 <_printf_i+0xd0>
 8005ef8:	232d      	movs	r3, #45	@ 0x2d
 8005efa:	426d      	negs	r5, r5
 8005efc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f00:	230a      	movs	r3, #10
 8005f02:	4859      	ldr	r0, [pc, #356]	@ (8006068 <_printf_i+0x238>)
 8005f04:	e011      	b.n	8005f2a <_printf_i+0xfa>
 8005f06:	6821      	ldr	r1, [r4, #0]
 8005f08:	6833      	ldr	r3, [r6, #0]
 8005f0a:	0608      	lsls	r0, r1, #24
 8005f0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005f10:	d402      	bmi.n	8005f18 <_printf_i+0xe8>
 8005f12:	0649      	lsls	r1, r1, #25
 8005f14:	bf48      	it	mi
 8005f16:	b2ad      	uxthmi	r5, r5
 8005f18:	2f6f      	cmp	r7, #111	@ 0x6f
 8005f1a:	6033      	str	r3, [r6, #0]
 8005f1c:	bf14      	ite	ne
 8005f1e:	230a      	movne	r3, #10
 8005f20:	2308      	moveq	r3, #8
 8005f22:	4851      	ldr	r0, [pc, #324]	@ (8006068 <_printf_i+0x238>)
 8005f24:	2100      	movs	r1, #0
 8005f26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005f2a:	6866      	ldr	r6, [r4, #4]
 8005f2c:	2e00      	cmp	r6, #0
 8005f2e:	bfa8      	it	ge
 8005f30:	6821      	ldrge	r1, [r4, #0]
 8005f32:	60a6      	str	r6, [r4, #8]
 8005f34:	bfa4      	itt	ge
 8005f36:	f021 0104 	bicge.w	r1, r1, #4
 8005f3a:	6021      	strge	r1, [r4, #0]
 8005f3c:	b90d      	cbnz	r5, 8005f42 <_printf_i+0x112>
 8005f3e:	2e00      	cmp	r6, #0
 8005f40:	d04b      	beq.n	8005fda <_printf_i+0x1aa>
 8005f42:	4616      	mov	r6, r2
 8005f44:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f48:	fb03 5711 	mls	r7, r3, r1, r5
 8005f4c:	5dc7      	ldrb	r7, [r0, r7]
 8005f4e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f52:	462f      	mov	r7, r5
 8005f54:	42bb      	cmp	r3, r7
 8005f56:	460d      	mov	r5, r1
 8005f58:	d9f4      	bls.n	8005f44 <_printf_i+0x114>
 8005f5a:	2b08      	cmp	r3, #8
 8005f5c:	d10b      	bne.n	8005f76 <_printf_i+0x146>
 8005f5e:	6823      	ldr	r3, [r4, #0]
 8005f60:	07df      	lsls	r7, r3, #31
 8005f62:	d508      	bpl.n	8005f76 <_printf_i+0x146>
 8005f64:	6923      	ldr	r3, [r4, #16]
 8005f66:	6861      	ldr	r1, [r4, #4]
 8005f68:	4299      	cmp	r1, r3
 8005f6a:	bfde      	ittt	le
 8005f6c:	2330      	movle	r3, #48	@ 0x30
 8005f6e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f72:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f76:	1b92      	subs	r2, r2, r6
 8005f78:	6122      	str	r2, [r4, #16]
 8005f7a:	464b      	mov	r3, r9
 8005f7c:	4621      	mov	r1, r4
 8005f7e:	4640      	mov	r0, r8
 8005f80:	f8cd a000 	str.w	sl, [sp]
 8005f84:	aa03      	add	r2, sp, #12
 8005f86:	f7ff fee1 	bl	8005d4c <_printf_common>
 8005f8a:	3001      	adds	r0, #1
 8005f8c:	d14a      	bne.n	8006024 <_printf_i+0x1f4>
 8005f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f92:	b004      	add	sp, #16
 8005f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f98:	6823      	ldr	r3, [r4, #0]
 8005f9a:	f043 0320 	orr.w	r3, r3, #32
 8005f9e:	6023      	str	r3, [r4, #0]
 8005fa0:	2778      	movs	r7, #120	@ 0x78
 8005fa2:	4832      	ldr	r0, [pc, #200]	@ (800606c <_printf_i+0x23c>)
 8005fa4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005fa8:	6823      	ldr	r3, [r4, #0]
 8005faa:	6831      	ldr	r1, [r6, #0]
 8005fac:	061f      	lsls	r7, r3, #24
 8005fae:	f851 5b04 	ldr.w	r5, [r1], #4
 8005fb2:	d402      	bmi.n	8005fba <_printf_i+0x18a>
 8005fb4:	065f      	lsls	r7, r3, #25
 8005fb6:	bf48      	it	mi
 8005fb8:	b2ad      	uxthmi	r5, r5
 8005fba:	6031      	str	r1, [r6, #0]
 8005fbc:	07d9      	lsls	r1, r3, #31
 8005fbe:	bf44      	itt	mi
 8005fc0:	f043 0320 	orrmi.w	r3, r3, #32
 8005fc4:	6023      	strmi	r3, [r4, #0]
 8005fc6:	b11d      	cbz	r5, 8005fd0 <_printf_i+0x1a0>
 8005fc8:	2310      	movs	r3, #16
 8005fca:	e7ab      	b.n	8005f24 <_printf_i+0xf4>
 8005fcc:	4826      	ldr	r0, [pc, #152]	@ (8006068 <_printf_i+0x238>)
 8005fce:	e7e9      	b.n	8005fa4 <_printf_i+0x174>
 8005fd0:	6823      	ldr	r3, [r4, #0]
 8005fd2:	f023 0320 	bic.w	r3, r3, #32
 8005fd6:	6023      	str	r3, [r4, #0]
 8005fd8:	e7f6      	b.n	8005fc8 <_printf_i+0x198>
 8005fda:	4616      	mov	r6, r2
 8005fdc:	e7bd      	b.n	8005f5a <_printf_i+0x12a>
 8005fde:	6833      	ldr	r3, [r6, #0]
 8005fe0:	6825      	ldr	r5, [r4, #0]
 8005fe2:	1d18      	adds	r0, r3, #4
 8005fe4:	6961      	ldr	r1, [r4, #20]
 8005fe6:	6030      	str	r0, [r6, #0]
 8005fe8:	062e      	lsls	r6, r5, #24
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	d501      	bpl.n	8005ff2 <_printf_i+0x1c2>
 8005fee:	6019      	str	r1, [r3, #0]
 8005ff0:	e002      	b.n	8005ff8 <_printf_i+0x1c8>
 8005ff2:	0668      	lsls	r0, r5, #25
 8005ff4:	d5fb      	bpl.n	8005fee <_printf_i+0x1be>
 8005ff6:	8019      	strh	r1, [r3, #0]
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	4616      	mov	r6, r2
 8005ffc:	6123      	str	r3, [r4, #16]
 8005ffe:	e7bc      	b.n	8005f7a <_printf_i+0x14a>
 8006000:	6833      	ldr	r3, [r6, #0]
 8006002:	2100      	movs	r1, #0
 8006004:	1d1a      	adds	r2, r3, #4
 8006006:	6032      	str	r2, [r6, #0]
 8006008:	681e      	ldr	r6, [r3, #0]
 800600a:	6862      	ldr	r2, [r4, #4]
 800600c:	4630      	mov	r0, r6
 800600e:	f000 fa00 	bl	8006412 <memchr>
 8006012:	b108      	cbz	r0, 8006018 <_printf_i+0x1e8>
 8006014:	1b80      	subs	r0, r0, r6
 8006016:	6060      	str	r0, [r4, #4]
 8006018:	6863      	ldr	r3, [r4, #4]
 800601a:	6123      	str	r3, [r4, #16]
 800601c:	2300      	movs	r3, #0
 800601e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006022:	e7aa      	b.n	8005f7a <_printf_i+0x14a>
 8006024:	4632      	mov	r2, r6
 8006026:	4649      	mov	r1, r9
 8006028:	4640      	mov	r0, r8
 800602a:	6923      	ldr	r3, [r4, #16]
 800602c:	47d0      	blx	sl
 800602e:	3001      	adds	r0, #1
 8006030:	d0ad      	beq.n	8005f8e <_printf_i+0x15e>
 8006032:	6823      	ldr	r3, [r4, #0]
 8006034:	079b      	lsls	r3, r3, #30
 8006036:	d413      	bmi.n	8006060 <_printf_i+0x230>
 8006038:	68e0      	ldr	r0, [r4, #12]
 800603a:	9b03      	ldr	r3, [sp, #12]
 800603c:	4298      	cmp	r0, r3
 800603e:	bfb8      	it	lt
 8006040:	4618      	movlt	r0, r3
 8006042:	e7a6      	b.n	8005f92 <_printf_i+0x162>
 8006044:	2301      	movs	r3, #1
 8006046:	4632      	mov	r2, r6
 8006048:	4649      	mov	r1, r9
 800604a:	4640      	mov	r0, r8
 800604c:	47d0      	blx	sl
 800604e:	3001      	adds	r0, #1
 8006050:	d09d      	beq.n	8005f8e <_printf_i+0x15e>
 8006052:	3501      	adds	r5, #1
 8006054:	68e3      	ldr	r3, [r4, #12]
 8006056:	9903      	ldr	r1, [sp, #12]
 8006058:	1a5b      	subs	r3, r3, r1
 800605a:	42ab      	cmp	r3, r5
 800605c:	dcf2      	bgt.n	8006044 <_printf_i+0x214>
 800605e:	e7eb      	b.n	8006038 <_printf_i+0x208>
 8006060:	2500      	movs	r5, #0
 8006062:	f104 0619 	add.w	r6, r4, #25
 8006066:	e7f5      	b.n	8006054 <_printf_i+0x224>
 8006068:	0800865d 	.word	0x0800865d
 800606c:	0800866e 	.word	0x0800866e

08006070 <std>:
 8006070:	2300      	movs	r3, #0
 8006072:	b510      	push	{r4, lr}
 8006074:	4604      	mov	r4, r0
 8006076:	e9c0 3300 	strd	r3, r3, [r0]
 800607a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800607e:	6083      	str	r3, [r0, #8]
 8006080:	8181      	strh	r1, [r0, #12]
 8006082:	6643      	str	r3, [r0, #100]	@ 0x64
 8006084:	81c2      	strh	r2, [r0, #14]
 8006086:	6183      	str	r3, [r0, #24]
 8006088:	4619      	mov	r1, r3
 800608a:	2208      	movs	r2, #8
 800608c:	305c      	adds	r0, #92	@ 0x5c
 800608e:	f000 f92e 	bl	80062ee <memset>
 8006092:	4b0d      	ldr	r3, [pc, #52]	@ (80060c8 <std+0x58>)
 8006094:	6224      	str	r4, [r4, #32]
 8006096:	6263      	str	r3, [r4, #36]	@ 0x24
 8006098:	4b0c      	ldr	r3, [pc, #48]	@ (80060cc <std+0x5c>)
 800609a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800609c:	4b0c      	ldr	r3, [pc, #48]	@ (80060d0 <std+0x60>)
 800609e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80060a0:	4b0c      	ldr	r3, [pc, #48]	@ (80060d4 <std+0x64>)
 80060a2:	6323      	str	r3, [r4, #48]	@ 0x30
 80060a4:	4b0c      	ldr	r3, [pc, #48]	@ (80060d8 <std+0x68>)
 80060a6:	429c      	cmp	r4, r3
 80060a8:	d006      	beq.n	80060b8 <std+0x48>
 80060aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80060ae:	4294      	cmp	r4, r2
 80060b0:	d002      	beq.n	80060b8 <std+0x48>
 80060b2:	33d0      	adds	r3, #208	@ 0xd0
 80060b4:	429c      	cmp	r4, r3
 80060b6:	d105      	bne.n	80060c4 <std+0x54>
 80060b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80060bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060c0:	f000 b9a4 	b.w	800640c <__retarget_lock_init_recursive>
 80060c4:	bd10      	pop	{r4, pc}
 80060c6:	bf00      	nop
 80060c8:	08006235 	.word	0x08006235
 80060cc:	08006257 	.word	0x08006257
 80060d0:	0800628f 	.word	0x0800628f
 80060d4:	080062b3 	.word	0x080062b3
 80060d8:	2000040c 	.word	0x2000040c

080060dc <stdio_exit_handler>:
 80060dc:	4a02      	ldr	r2, [pc, #8]	@ (80060e8 <stdio_exit_handler+0xc>)
 80060de:	4903      	ldr	r1, [pc, #12]	@ (80060ec <stdio_exit_handler+0x10>)
 80060e0:	4803      	ldr	r0, [pc, #12]	@ (80060f0 <stdio_exit_handler+0x14>)
 80060e2:	f000 b869 	b.w	80061b8 <_fwalk_sglue>
 80060e6:	bf00      	nop
 80060e8:	20000098 	.word	0x20000098
 80060ec:	08007d9d 	.word	0x08007d9d
 80060f0:	200000a8 	.word	0x200000a8

080060f4 <cleanup_stdio>:
 80060f4:	6841      	ldr	r1, [r0, #4]
 80060f6:	4b0c      	ldr	r3, [pc, #48]	@ (8006128 <cleanup_stdio+0x34>)
 80060f8:	b510      	push	{r4, lr}
 80060fa:	4299      	cmp	r1, r3
 80060fc:	4604      	mov	r4, r0
 80060fe:	d001      	beq.n	8006104 <cleanup_stdio+0x10>
 8006100:	f001 fe4c 	bl	8007d9c <_fflush_r>
 8006104:	68a1      	ldr	r1, [r4, #8]
 8006106:	4b09      	ldr	r3, [pc, #36]	@ (800612c <cleanup_stdio+0x38>)
 8006108:	4299      	cmp	r1, r3
 800610a:	d002      	beq.n	8006112 <cleanup_stdio+0x1e>
 800610c:	4620      	mov	r0, r4
 800610e:	f001 fe45 	bl	8007d9c <_fflush_r>
 8006112:	68e1      	ldr	r1, [r4, #12]
 8006114:	4b06      	ldr	r3, [pc, #24]	@ (8006130 <cleanup_stdio+0x3c>)
 8006116:	4299      	cmp	r1, r3
 8006118:	d004      	beq.n	8006124 <cleanup_stdio+0x30>
 800611a:	4620      	mov	r0, r4
 800611c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006120:	f001 be3c 	b.w	8007d9c <_fflush_r>
 8006124:	bd10      	pop	{r4, pc}
 8006126:	bf00      	nop
 8006128:	2000040c 	.word	0x2000040c
 800612c:	20000474 	.word	0x20000474
 8006130:	200004dc 	.word	0x200004dc

08006134 <global_stdio_init.part.0>:
 8006134:	b510      	push	{r4, lr}
 8006136:	4b0b      	ldr	r3, [pc, #44]	@ (8006164 <global_stdio_init.part.0+0x30>)
 8006138:	4c0b      	ldr	r4, [pc, #44]	@ (8006168 <global_stdio_init.part.0+0x34>)
 800613a:	4a0c      	ldr	r2, [pc, #48]	@ (800616c <global_stdio_init.part.0+0x38>)
 800613c:	4620      	mov	r0, r4
 800613e:	601a      	str	r2, [r3, #0]
 8006140:	2104      	movs	r1, #4
 8006142:	2200      	movs	r2, #0
 8006144:	f7ff ff94 	bl	8006070 <std>
 8006148:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800614c:	2201      	movs	r2, #1
 800614e:	2109      	movs	r1, #9
 8006150:	f7ff ff8e 	bl	8006070 <std>
 8006154:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006158:	2202      	movs	r2, #2
 800615a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800615e:	2112      	movs	r1, #18
 8006160:	f7ff bf86 	b.w	8006070 <std>
 8006164:	20000544 	.word	0x20000544
 8006168:	2000040c 	.word	0x2000040c
 800616c:	080060dd 	.word	0x080060dd

08006170 <__sfp_lock_acquire>:
 8006170:	4801      	ldr	r0, [pc, #4]	@ (8006178 <__sfp_lock_acquire+0x8>)
 8006172:	f000 b94c 	b.w	800640e <__retarget_lock_acquire_recursive>
 8006176:	bf00      	nop
 8006178:	2000054d 	.word	0x2000054d

0800617c <__sfp_lock_release>:
 800617c:	4801      	ldr	r0, [pc, #4]	@ (8006184 <__sfp_lock_release+0x8>)
 800617e:	f000 b947 	b.w	8006410 <__retarget_lock_release_recursive>
 8006182:	bf00      	nop
 8006184:	2000054d 	.word	0x2000054d

08006188 <__sinit>:
 8006188:	b510      	push	{r4, lr}
 800618a:	4604      	mov	r4, r0
 800618c:	f7ff fff0 	bl	8006170 <__sfp_lock_acquire>
 8006190:	6a23      	ldr	r3, [r4, #32]
 8006192:	b11b      	cbz	r3, 800619c <__sinit+0x14>
 8006194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006198:	f7ff bff0 	b.w	800617c <__sfp_lock_release>
 800619c:	4b04      	ldr	r3, [pc, #16]	@ (80061b0 <__sinit+0x28>)
 800619e:	6223      	str	r3, [r4, #32]
 80061a0:	4b04      	ldr	r3, [pc, #16]	@ (80061b4 <__sinit+0x2c>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1f5      	bne.n	8006194 <__sinit+0xc>
 80061a8:	f7ff ffc4 	bl	8006134 <global_stdio_init.part.0>
 80061ac:	e7f2      	b.n	8006194 <__sinit+0xc>
 80061ae:	bf00      	nop
 80061b0:	080060f5 	.word	0x080060f5
 80061b4:	20000544 	.word	0x20000544

080061b8 <_fwalk_sglue>:
 80061b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061bc:	4607      	mov	r7, r0
 80061be:	4688      	mov	r8, r1
 80061c0:	4614      	mov	r4, r2
 80061c2:	2600      	movs	r6, #0
 80061c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80061c8:	f1b9 0901 	subs.w	r9, r9, #1
 80061cc:	d505      	bpl.n	80061da <_fwalk_sglue+0x22>
 80061ce:	6824      	ldr	r4, [r4, #0]
 80061d0:	2c00      	cmp	r4, #0
 80061d2:	d1f7      	bne.n	80061c4 <_fwalk_sglue+0xc>
 80061d4:	4630      	mov	r0, r6
 80061d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061da:	89ab      	ldrh	r3, [r5, #12]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d907      	bls.n	80061f0 <_fwalk_sglue+0x38>
 80061e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061e4:	3301      	adds	r3, #1
 80061e6:	d003      	beq.n	80061f0 <_fwalk_sglue+0x38>
 80061e8:	4629      	mov	r1, r5
 80061ea:	4638      	mov	r0, r7
 80061ec:	47c0      	blx	r8
 80061ee:	4306      	orrs	r6, r0
 80061f0:	3568      	adds	r5, #104	@ 0x68
 80061f2:	e7e9      	b.n	80061c8 <_fwalk_sglue+0x10>

080061f4 <siprintf>:
 80061f4:	b40e      	push	{r1, r2, r3}
 80061f6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80061fa:	b500      	push	{lr}
 80061fc:	b09c      	sub	sp, #112	@ 0x70
 80061fe:	ab1d      	add	r3, sp, #116	@ 0x74
 8006200:	9002      	str	r0, [sp, #8]
 8006202:	9006      	str	r0, [sp, #24]
 8006204:	9107      	str	r1, [sp, #28]
 8006206:	9104      	str	r1, [sp, #16]
 8006208:	4808      	ldr	r0, [pc, #32]	@ (800622c <siprintf+0x38>)
 800620a:	4909      	ldr	r1, [pc, #36]	@ (8006230 <siprintf+0x3c>)
 800620c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006210:	9105      	str	r1, [sp, #20]
 8006212:	6800      	ldr	r0, [r0, #0]
 8006214:	a902      	add	r1, sp, #8
 8006216:	9301      	str	r3, [sp, #4]
 8006218:	f001 fc44 	bl	8007aa4 <_svfiprintf_r>
 800621c:	2200      	movs	r2, #0
 800621e:	9b02      	ldr	r3, [sp, #8]
 8006220:	701a      	strb	r2, [r3, #0]
 8006222:	b01c      	add	sp, #112	@ 0x70
 8006224:	f85d eb04 	ldr.w	lr, [sp], #4
 8006228:	b003      	add	sp, #12
 800622a:	4770      	bx	lr
 800622c:	200000a4 	.word	0x200000a4
 8006230:	ffff0208 	.word	0xffff0208

08006234 <__sread>:
 8006234:	b510      	push	{r4, lr}
 8006236:	460c      	mov	r4, r1
 8006238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800623c:	f000 f898 	bl	8006370 <_read_r>
 8006240:	2800      	cmp	r0, #0
 8006242:	bfab      	itete	ge
 8006244:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006246:	89a3      	ldrhlt	r3, [r4, #12]
 8006248:	181b      	addge	r3, r3, r0
 800624a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800624e:	bfac      	ite	ge
 8006250:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006252:	81a3      	strhlt	r3, [r4, #12]
 8006254:	bd10      	pop	{r4, pc}

08006256 <__swrite>:
 8006256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800625a:	461f      	mov	r7, r3
 800625c:	898b      	ldrh	r3, [r1, #12]
 800625e:	4605      	mov	r5, r0
 8006260:	05db      	lsls	r3, r3, #23
 8006262:	460c      	mov	r4, r1
 8006264:	4616      	mov	r6, r2
 8006266:	d505      	bpl.n	8006274 <__swrite+0x1e>
 8006268:	2302      	movs	r3, #2
 800626a:	2200      	movs	r2, #0
 800626c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006270:	f000 f86c 	bl	800634c <_lseek_r>
 8006274:	89a3      	ldrh	r3, [r4, #12]
 8006276:	4632      	mov	r2, r6
 8006278:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800627c:	81a3      	strh	r3, [r4, #12]
 800627e:	4628      	mov	r0, r5
 8006280:	463b      	mov	r3, r7
 8006282:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006286:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800628a:	f000 b883 	b.w	8006394 <_write_r>

0800628e <__sseek>:
 800628e:	b510      	push	{r4, lr}
 8006290:	460c      	mov	r4, r1
 8006292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006296:	f000 f859 	bl	800634c <_lseek_r>
 800629a:	1c43      	adds	r3, r0, #1
 800629c:	89a3      	ldrh	r3, [r4, #12]
 800629e:	bf15      	itete	ne
 80062a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80062a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80062a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80062aa:	81a3      	strheq	r3, [r4, #12]
 80062ac:	bf18      	it	ne
 80062ae:	81a3      	strhne	r3, [r4, #12]
 80062b0:	bd10      	pop	{r4, pc}

080062b2 <__sclose>:
 80062b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062b6:	f000 b839 	b.w	800632c <_close_r>

080062ba <memmove>:
 80062ba:	4288      	cmp	r0, r1
 80062bc:	b510      	push	{r4, lr}
 80062be:	eb01 0402 	add.w	r4, r1, r2
 80062c2:	d902      	bls.n	80062ca <memmove+0x10>
 80062c4:	4284      	cmp	r4, r0
 80062c6:	4623      	mov	r3, r4
 80062c8:	d807      	bhi.n	80062da <memmove+0x20>
 80062ca:	1e43      	subs	r3, r0, #1
 80062cc:	42a1      	cmp	r1, r4
 80062ce:	d008      	beq.n	80062e2 <memmove+0x28>
 80062d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062d4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80062d8:	e7f8      	b.n	80062cc <memmove+0x12>
 80062da:	4601      	mov	r1, r0
 80062dc:	4402      	add	r2, r0
 80062de:	428a      	cmp	r2, r1
 80062e0:	d100      	bne.n	80062e4 <memmove+0x2a>
 80062e2:	bd10      	pop	{r4, pc}
 80062e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80062e8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80062ec:	e7f7      	b.n	80062de <memmove+0x24>

080062ee <memset>:
 80062ee:	4603      	mov	r3, r0
 80062f0:	4402      	add	r2, r0
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d100      	bne.n	80062f8 <memset+0xa>
 80062f6:	4770      	bx	lr
 80062f8:	f803 1b01 	strb.w	r1, [r3], #1
 80062fc:	e7f9      	b.n	80062f2 <memset+0x4>

080062fe <strncpy>:
 80062fe:	4603      	mov	r3, r0
 8006300:	b510      	push	{r4, lr}
 8006302:	3901      	subs	r1, #1
 8006304:	b132      	cbz	r2, 8006314 <strncpy+0x16>
 8006306:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800630a:	3a01      	subs	r2, #1
 800630c:	f803 4b01 	strb.w	r4, [r3], #1
 8006310:	2c00      	cmp	r4, #0
 8006312:	d1f7      	bne.n	8006304 <strncpy+0x6>
 8006314:	2100      	movs	r1, #0
 8006316:	441a      	add	r2, r3
 8006318:	4293      	cmp	r3, r2
 800631a:	d100      	bne.n	800631e <strncpy+0x20>
 800631c:	bd10      	pop	{r4, pc}
 800631e:	f803 1b01 	strb.w	r1, [r3], #1
 8006322:	e7f9      	b.n	8006318 <strncpy+0x1a>

08006324 <_localeconv_r>:
 8006324:	4800      	ldr	r0, [pc, #0]	@ (8006328 <_localeconv_r+0x4>)
 8006326:	4770      	bx	lr
 8006328:	200001e4 	.word	0x200001e4

0800632c <_close_r>:
 800632c:	b538      	push	{r3, r4, r5, lr}
 800632e:	2300      	movs	r3, #0
 8006330:	4d05      	ldr	r5, [pc, #20]	@ (8006348 <_close_r+0x1c>)
 8006332:	4604      	mov	r4, r0
 8006334:	4608      	mov	r0, r1
 8006336:	602b      	str	r3, [r5, #0]
 8006338:	f7fc f9da 	bl	80026f0 <_close>
 800633c:	1c43      	adds	r3, r0, #1
 800633e:	d102      	bne.n	8006346 <_close_r+0x1a>
 8006340:	682b      	ldr	r3, [r5, #0]
 8006342:	b103      	cbz	r3, 8006346 <_close_r+0x1a>
 8006344:	6023      	str	r3, [r4, #0]
 8006346:	bd38      	pop	{r3, r4, r5, pc}
 8006348:	20000548 	.word	0x20000548

0800634c <_lseek_r>:
 800634c:	b538      	push	{r3, r4, r5, lr}
 800634e:	4604      	mov	r4, r0
 8006350:	4608      	mov	r0, r1
 8006352:	4611      	mov	r1, r2
 8006354:	2200      	movs	r2, #0
 8006356:	4d05      	ldr	r5, [pc, #20]	@ (800636c <_lseek_r+0x20>)
 8006358:	602a      	str	r2, [r5, #0]
 800635a:	461a      	mov	r2, r3
 800635c:	f7fc f9ec 	bl	8002738 <_lseek>
 8006360:	1c43      	adds	r3, r0, #1
 8006362:	d102      	bne.n	800636a <_lseek_r+0x1e>
 8006364:	682b      	ldr	r3, [r5, #0]
 8006366:	b103      	cbz	r3, 800636a <_lseek_r+0x1e>
 8006368:	6023      	str	r3, [r4, #0]
 800636a:	bd38      	pop	{r3, r4, r5, pc}
 800636c:	20000548 	.word	0x20000548

08006370 <_read_r>:
 8006370:	b538      	push	{r3, r4, r5, lr}
 8006372:	4604      	mov	r4, r0
 8006374:	4608      	mov	r0, r1
 8006376:	4611      	mov	r1, r2
 8006378:	2200      	movs	r2, #0
 800637a:	4d05      	ldr	r5, [pc, #20]	@ (8006390 <_read_r+0x20>)
 800637c:	602a      	str	r2, [r5, #0]
 800637e:	461a      	mov	r2, r3
 8006380:	f7fc f97d 	bl	800267e <_read>
 8006384:	1c43      	adds	r3, r0, #1
 8006386:	d102      	bne.n	800638e <_read_r+0x1e>
 8006388:	682b      	ldr	r3, [r5, #0]
 800638a:	b103      	cbz	r3, 800638e <_read_r+0x1e>
 800638c:	6023      	str	r3, [r4, #0]
 800638e:	bd38      	pop	{r3, r4, r5, pc}
 8006390:	20000548 	.word	0x20000548

08006394 <_write_r>:
 8006394:	b538      	push	{r3, r4, r5, lr}
 8006396:	4604      	mov	r4, r0
 8006398:	4608      	mov	r0, r1
 800639a:	4611      	mov	r1, r2
 800639c:	2200      	movs	r2, #0
 800639e:	4d05      	ldr	r5, [pc, #20]	@ (80063b4 <_write_r+0x20>)
 80063a0:	602a      	str	r2, [r5, #0]
 80063a2:	461a      	mov	r2, r3
 80063a4:	f7fc f988 	bl	80026b8 <_write>
 80063a8:	1c43      	adds	r3, r0, #1
 80063aa:	d102      	bne.n	80063b2 <_write_r+0x1e>
 80063ac:	682b      	ldr	r3, [r5, #0]
 80063ae:	b103      	cbz	r3, 80063b2 <_write_r+0x1e>
 80063b0:	6023      	str	r3, [r4, #0]
 80063b2:	bd38      	pop	{r3, r4, r5, pc}
 80063b4:	20000548 	.word	0x20000548

080063b8 <__errno>:
 80063b8:	4b01      	ldr	r3, [pc, #4]	@ (80063c0 <__errno+0x8>)
 80063ba:	6818      	ldr	r0, [r3, #0]
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	200000a4 	.word	0x200000a4

080063c4 <__libc_init_array>:
 80063c4:	b570      	push	{r4, r5, r6, lr}
 80063c6:	2600      	movs	r6, #0
 80063c8:	4d0c      	ldr	r5, [pc, #48]	@ (80063fc <__libc_init_array+0x38>)
 80063ca:	4c0d      	ldr	r4, [pc, #52]	@ (8006400 <__libc_init_array+0x3c>)
 80063cc:	1b64      	subs	r4, r4, r5
 80063ce:	10a4      	asrs	r4, r4, #2
 80063d0:	42a6      	cmp	r6, r4
 80063d2:	d109      	bne.n	80063e8 <__libc_init_array+0x24>
 80063d4:	f002 f856 	bl	8008484 <_init>
 80063d8:	2600      	movs	r6, #0
 80063da:	4d0a      	ldr	r5, [pc, #40]	@ (8006404 <__libc_init_array+0x40>)
 80063dc:	4c0a      	ldr	r4, [pc, #40]	@ (8006408 <__libc_init_array+0x44>)
 80063de:	1b64      	subs	r4, r4, r5
 80063e0:	10a4      	asrs	r4, r4, #2
 80063e2:	42a6      	cmp	r6, r4
 80063e4:	d105      	bne.n	80063f2 <__libc_init_array+0x2e>
 80063e6:	bd70      	pop	{r4, r5, r6, pc}
 80063e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80063ec:	4798      	blx	r3
 80063ee:	3601      	adds	r6, #1
 80063f0:	e7ee      	b.n	80063d0 <__libc_init_array+0xc>
 80063f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80063f6:	4798      	blx	r3
 80063f8:	3601      	adds	r6, #1
 80063fa:	e7f2      	b.n	80063e2 <__libc_init_array+0x1e>
 80063fc:	080088c8 	.word	0x080088c8
 8006400:	080088c8 	.word	0x080088c8
 8006404:	080088c8 	.word	0x080088c8
 8006408:	080088cc 	.word	0x080088cc

0800640c <__retarget_lock_init_recursive>:
 800640c:	4770      	bx	lr

0800640e <__retarget_lock_acquire_recursive>:
 800640e:	4770      	bx	lr

08006410 <__retarget_lock_release_recursive>:
 8006410:	4770      	bx	lr

08006412 <memchr>:
 8006412:	4603      	mov	r3, r0
 8006414:	b510      	push	{r4, lr}
 8006416:	b2c9      	uxtb	r1, r1
 8006418:	4402      	add	r2, r0
 800641a:	4293      	cmp	r3, r2
 800641c:	4618      	mov	r0, r3
 800641e:	d101      	bne.n	8006424 <memchr+0x12>
 8006420:	2000      	movs	r0, #0
 8006422:	e003      	b.n	800642c <memchr+0x1a>
 8006424:	7804      	ldrb	r4, [r0, #0]
 8006426:	3301      	adds	r3, #1
 8006428:	428c      	cmp	r4, r1
 800642a:	d1f6      	bne.n	800641a <memchr+0x8>
 800642c:	bd10      	pop	{r4, pc}

0800642e <memcpy>:
 800642e:	440a      	add	r2, r1
 8006430:	4291      	cmp	r1, r2
 8006432:	f100 33ff 	add.w	r3, r0, #4294967295
 8006436:	d100      	bne.n	800643a <memcpy+0xc>
 8006438:	4770      	bx	lr
 800643a:	b510      	push	{r4, lr}
 800643c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006440:	4291      	cmp	r1, r2
 8006442:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006446:	d1f9      	bne.n	800643c <memcpy+0xe>
 8006448:	bd10      	pop	{r4, pc}

0800644a <quorem>:
 800644a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800644e:	6903      	ldr	r3, [r0, #16]
 8006450:	690c      	ldr	r4, [r1, #16]
 8006452:	4607      	mov	r7, r0
 8006454:	42a3      	cmp	r3, r4
 8006456:	db7e      	blt.n	8006556 <quorem+0x10c>
 8006458:	3c01      	subs	r4, #1
 800645a:	00a3      	lsls	r3, r4, #2
 800645c:	f100 0514 	add.w	r5, r0, #20
 8006460:	f101 0814 	add.w	r8, r1, #20
 8006464:	9300      	str	r3, [sp, #0]
 8006466:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800646a:	9301      	str	r3, [sp, #4]
 800646c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006470:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006474:	3301      	adds	r3, #1
 8006476:	429a      	cmp	r2, r3
 8006478:	fbb2 f6f3 	udiv	r6, r2, r3
 800647c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006480:	d32e      	bcc.n	80064e0 <quorem+0x96>
 8006482:	f04f 0a00 	mov.w	sl, #0
 8006486:	46c4      	mov	ip, r8
 8006488:	46ae      	mov	lr, r5
 800648a:	46d3      	mov	fp, sl
 800648c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006490:	b298      	uxth	r0, r3
 8006492:	fb06 a000 	mla	r0, r6, r0, sl
 8006496:	0c1b      	lsrs	r3, r3, #16
 8006498:	0c02      	lsrs	r2, r0, #16
 800649a:	fb06 2303 	mla	r3, r6, r3, r2
 800649e:	f8de 2000 	ldr.w	r2, [lr]
 80064a2:	b280      	uxth	r0, r0
 80064a4:	b292      	uxth	r2, r2
 80064a6:	1a12      	subs	r2, r2, r0
 80064a8:	445a      	add	r2, fp
 80064aa:	f8de 0000 	ldr.w	r0, [lr]
 80064ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80064b8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80064bc:	b292      	uxth	r2, r2
 80064be:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80064c2:	45e1      	cmp	r9, ip
 80064c4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80064c8:	f84e 2b04 	str.w	r2, [lr], #4
 80064cc:	d2de      	bcs.n	800648c <quorem+0x42>
 80064ce:	9b00      	ldr	r3, [sp, #0]
 80064d0:	58eb      	ldr	r3, [r5, r3]
 80064d2:	b92b      	cbnz	r3, 80064e0 <quorem+0x96>
 80064d4:	9b01      	ldr	r3, [sp, #4]
 80064d6:	3b04      	subs	r3, #4
 80064d8:	429d      	cmp	r5, r3
 80064da:	461a      	mov	r2, r3
 80064dc:	d32f      	bcc.n	800653e <quorem+0xf4>
 80064de:	613c      	str	r4, [r7, #16]
 80064e0:	4638      	mov	r0, r7
 80064e2:	f001 f97b 	bl	80077dc <__mcmp>
 80064e6:	2800      	cmp	r0, #0
 80064e8:	db25      	blt.n	8006536 <quorem+0xec>
 80064ea:	4629      	mov	r1, r5
 80064ec:	2000      	movs	r0, #0
 80064ee:	f858 2b04 	ldr.w	r2, [r8], #4
 80064f2:	f8d1 c000 	ldr.w	ip, [r1]
 80064f6:	fa1f fe82 	uxth.w	lr, r2
 80064fa:	fa1f f38c 	uxth.w	r3, ip
 80064fe:	eba3 030e 	sub.w	r3, r3, lr
 8006502:	4403      	add	r3, r0
 8006504:	0c12      	lsrs	r2, r2, #16
 8006506:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800650a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800650e:	b29b      	uxth	r3, r3
 8006510:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006514:	45c1      	cmp	r9, r8
 8006516:	ea4f 4022 	mov.w	r0, r2, asr #16
 800651a:	f841 3b04 	str.w	r3, [r1], #4
 800651e:	d2e6      	bcs.n	80064ee <quorem+0xa4>
 8006520:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006524:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006528:	b922      	cbnz	r2, 8006534 <quorem+0xea>
 800652a:	3b04      	subs	r3, #4
 800652c:	429d      	cmp	r5, r3
 800652e:	461a      	mov	r2, r3
 8006530:	d30b      	bcc.n	800654a <quorem+0x100>
 8006532:	613c      	str	r4, [r7, #16]
 8006534:	3601      	adds	r6, #1
 8006536:	4630      	mov	r0, r6
 8006538:	b003      	add	sp, #12
 800653a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800653e:	6812      	ldr	r2, [r2, #0]
 8006540:	3b04      	subs	r3, #4
 8006542:	2a00      	cmp	r2, #0
 8006544:	d1cb      	bne.n	80064de <quorem+0x94>
 8006546:	3c01      	subs	r4, #1
 8006548:	e7c6      	b.n	80064d8 <quorem+0x8e>
 800654a:	6812      	ldr	r2, [r2, #0]
 800654c:	3b04      	subs	r3, #4
 800654e:	2a00      	cmp	r2, #0
 8006550:	d1ef      	bne.n	8006532 <quorem+0xe8>
 8006552:	3c01      	subs	r4, #1
 8006554:	e7ea      	b.n	800652c <quorem+0xe2>
 8006556:	2000      	movs	r0, #0
 8006558:	e7ee      	b.n	8006538 <quorem+0xee>
 800655a:	0000      	movs	r0, r0
 800655c:	0000      	movs	r0, r0
	...

08006560 <_dtoa_r>:
 8006560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006564:	4614      	mov	r4, r2
 8006566:	461d      	mov	r5, r3
 8006568:	69c7      	ldr	r7, [r0, #28]
 800656a:	b097      	sub	sp, #92	@ 0x5c
 800656c:	4683      	mov	fp, r0
 800656e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006572:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006574:	b97f      	cbnz	r7, 8006596 <_dtoa_r+0x36>
 8006576:	2010      	movs	r0, #16
 8006578:	f000 fe02 	bl	8007180 <malloc>
 800657c:	4602      	mov	r2, r0
 800657e:	f8cb 001c 	str.w	r0, [fp, #28]
 8006582:	b920      	cbnz	r0, 800658e <_dtoa_r+0x2e>
 8006584:	21ef      	movs	r1, #239	@ 0xef
 8006586:	4ba8      	ldr	r3, [pc, #672]	@ (8006828 <_dtoa_r+0x2c8>)
 8006588:	48a8      	ldr	r0, [pc, #672]	@ (800682c <_dtoa_r+0x2cc>)
 800658a:	f001 fc3f 	bl	8007e0c <__assert_func>
 800658e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006592:	6007      	str	r7, [r0, #0]
 8006594:	60c7      	str	r7, [r0, #12]
 8006596:	f8db 301c 	ldr.w	r3, [fp, #28]
 800659a:	6819      	ldr	r1, [r3, #0]
 800659c:	b159      	cbz	r1, 80065b6 <_dtoa_r+0x56>
 800659e:	685a      	ldr	r2, [r3, #4]
 80065a0:	2301      	movs	r3, #1
 80065a2:	4093      	lsls	r3, r2
 80065a4:	604a      	str	r2, [r1, #4]
 80065a6:	608b      	str	r3, [r1, #8]
 80065a8:	4658      	mov	r0, fp
 80065aa:	f000 fedf 	bl	800736c <_Bfree>
 80065ae:	2200      	movs	r2, #0
 80065b0:	f8db 301c 	ldr.w	r3, [fp, #28]
 80065b4:	601a      	str	r2, [r3, #0]
 80065b6:	1e2b      	subs	r3, r5, #0
 80065b8:	bfaf      	iteee	ge
 80065ba:	2300      	movge	r3, #0
 80065bc:	2201      	movlt	r2, #1
 80065be:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80065c2:	9303      	strlt	r3, [sp, #12]
 80065c4:	bfa8      	it	ge
 80065c6:	6033      	strge	r3, [r6, #0]
 80065c8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80065cc:	4b98      	ldr	r3, [pc, #608]	@ (8006830 <_dtoa_r+0x2d0>)
 80065ce:	bfb8      	it	lt
 80065d0:	6032      	strlt	r2, [r6, #0]
 80065d2:	ea33 0308 	bics.w	r3, r3, r8
 80065d6:	d112      	bne.n	80065fe <_dtoa_r+0x9e>
 80065d8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80065dc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80065de:	6013      	str	r3, [r2, #0]
 80065e0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80065e4:	4323      	orrs	r3, r4
 80065e6:	f000 8550 	beq.w	800708a <_dtoa_r+0xb2a>
 80065ea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80065ec:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8006834 <_dtoa_r+0x2d4>
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f000 8552 	beq.w	800709a <_dtoa_r+0xb3a>
 80065f6:	f10a 0303 	add.w	r3, sl, #3
 80065fa:	f000 bd4c 	b.w	8007096 <_dtoa_r+0xb36>
 80065fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006602:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006606:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800660a:	2200      	movs	r2, #0
 800660c:	2300      	movs	r3, #0
 800660e:	f7fa f9cb 	bl	80009a8 <__aeabi_dcmpeq>
 8006612:	4607      	mov	r7, r0
 8006614:	b158      	cbz	r0, 800662e <_dtoa_r+0xce>
 8006616:	2301      	movs	r3, #1
 8006618:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800661a:	6013      	str	r3, [r2, #0]
 800661c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800661e:	b113      	cbz	r3, 8006626 <_dtoa_r+0xc6>
 8006620:	4b85      	ldr	r3, [pc, #532]	@ (8006838 <_dtoa_r+0x2d8>)
 8006622:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006624:	6013      	str	r3, [r2, #0]
 8006626:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800683c <_dtoa_r+0x2dc>
 800662a:	f000 bd36 	b.w	800709a <_dtoa_r+0xb3a>
 800662e:	ab14      	add	r3, sp, #80	@ 0x50
 8006630:	9301      	str	r3, [sp, #4]
 8006632:	ab15      	add	r3, sp, #84	@ 0x54
 8006634:	9300      	str	r3, [sp, #0]
 8006636:	4658      	mov	r0, fp
 8006638:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800663c:	f001 f97e 	bl	800793c <__d2b>
 8006640:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006644:	4681      	mov	r9, r0
 8006646:	2e00      	cmp	r6, #0
 8006648:	d077      	beq.n	800673a <_dtoa_r+0x1da>
 800664a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800664e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006650:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006654:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006658:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800665c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006660:	9712      	str	r7, [sp, #72]	@ 0x48
 8006662:	4619      	mov	r1, r3
 8006664:	2200      	movs	r2, #0
 8006666:	4b76      	ldr	r3, [pc, #472]	@ (8006840 <_dtoa_r+0x2e0>)
 8006668:	f7f9 fd7e 	bl	8000168 <__aeabi_dsub>
 800666c:	a368      	add	r3, pc, #416	@ (adr r3, 8006810 <_dtoa_r+0x2b0>)
 800666e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006672:	f7f9 ff31 	bl	80004d8 <__aeabi_dmul>
 8006676:	a368      	add	r3, pc, #416	@ (adr r3, 8006818 <_dtoa_r+0x2b8>)
 8006678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667c:	f7f9 fd76 	bl	800016c <__adddf3>
 8006680:	4604      	mov	r4, r0
 8006682:	4630      	mov	r0, r6
 8006684:	460d      	mov	r5, r1
 8006686:	f7f9 febd 	bl	8000404 <__aeabi_i2d>
 800668a:	a365      	add	r3, pc, #404	@ (adr r3, 8006820 <_dtoa_r+0x2c0>)
 800668c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006690:	f7f9 ff22 	bl	80004d8 <__aeabi_dmul>
 8006694:	4602      	mov	r2, r0
 8006696:	460b      	mov	r3, r1
 8006698:	4620      	mov	r0, r4
 800669a:	4629      	mov	r1, r5
 800669c:	f7f9 fd66 	bl	800016c <__adddf3>
 80066a0:	4604      	mov	r4, r0
 80066a2:	460d      	mov	r5, r1
 80066a4:	f7fa f9c8 	bl	8000a38 <__aeabi_d2iz>
 80066a8:	2200      	movs	r2, #0
 80066aa:	4607      	mov	r7, r0
 80066ac:	2300      	movs	r3, #0
 80066ae:	4620      	mov	r0, r4
 80066b0:	4629      	mov	r1, r5
 80066b2:	f7fa f983 	bl	80009bc <__aeabi_dcmplt>
 80066b6:	b140      	cbz	r0, 80066ca <_dtoa_r+0x16a>
 80066b8:	4638      	mov	r0, r7
 80066ba:	f7f9 fea3 	bl	8000404 <__aeabi_i2d>
 80066be:	4622      	mov	r2, r4
 80066c0:	462b      	mov	r3, r5
 80066c2:	f7fa f971 	bl	80009a8 <__aeabi_dcmpeq>
 80066c6:	b900      	cbnz	r0, 80066ca <_dtoa_r+0x16a>
 80066c8:	3f01      	subs	r7, #1
 80066ca:	2f16      	cmp	r7, #22
 80066cc:	d853      	bhi.n	8006776 <_dtoa_r+0x216>
 80066ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80066d2:	4b5c      	ldr	r3, [pc, #368]	@ (8006844 <_dtoa_r+0x2e4>)
 80066d4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80066d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066dc:	f7fa f96e 	bl	80009bc <__aeabi_dcmplt>
 80066e0:	2800      	cmp	r0, #0
 80066e2:	d04a      	beq.n	800677a <_dtoa_r+0x21a>
 80066e4:	2300      	movs	r3, #0
 80066e6:	3f01      	subs	r7, #1
 80066e8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80066ea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80066ec:	1b9b      	subs	r3, r3, r6
 80066ee:	1e5a      	subs	r2, r3, #1
 80066f0:	bf46      	itte	mi
 80066f2:	f1c3 0801 	rsbmi	r8, r3, #1
 80066f6:	2300      	movmi	r3, #0
 80066f8:	f04f 0800 	movpl.w	r8, #0
 80066fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80066fe:	bf48      	it	mi
 8006700:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006702:	2f00      	cmp	r7, #0
 8006704:	db3b      	blt.n	800677e <_dtoa_r+0x21e>
 8006706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006708:	970e      	str	r7, [sp, #56]	@ 0x38
 800670a:	443b      	add	r3, r7
 800670c:	9309      	str	r3, [sp, #36]	@ 0x24
 800670e:	2300      	movs	r3, #0
 8006710:	930a      	str	r3, [sp, #40]	@ 0x28
 8006712:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006714:	2b09      	cmp	r3, #9
 8006716:	d866      	bhi.n	80067e6 <_dtoa_r+0x286>
 8006718:	2b05      	cmp	r3, #5
 800671a:	bfc4      	itt	gt
 800671c:	3b04      	subgt	r3, #4
 800671e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006720:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006722:	bfc8      	it	gt
 8006724:	2400      	movgt	r4, #0
 8006726:	f1a3 0302 	sub.w	r3, r3, #2
 800672a:	bfd8      	it	le
 800672c:	2401      	movle	r4, #1
 800672e:	2b03      	cmp	r3, #3
 8006730:	d864      	bhi.n	80067fc <_dtoa_r+0x29c>
 8006732:	e8df f003 	tbb	[pc, r3]
 8006736:	382b      	.short	0x382b
 8006738:	5636      	.short	0x5636
 800673a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800673e:	441e      	add	r6, r3
 8006740:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006744:	2b20      	cmp	r3, #32
 8006746:	bfc1      	itttt	gt
 8006748:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800674c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006750:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006754:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006758:	bfd6      	itet	le
 800675a:	f1c3 0320 	rsble	r3, r3, #32
 800675e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006762:	fa04 f003 	lslle.w	r0, r4, r3
 8006766:	f7f9 fe3d 	bl	80003e4 <__aeabi_ui2d>
 800676a:	2201      	movs	r2, #1
 800676c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006770:	3e01      	subs	r6, #1
 8006772:	9212      	str	r2, [sp, #72]	@ 0x48
 8006774:	e775      	b.n	8006662 <_dtoa_r+0x102>
 8006776:	2301      	movs	r3, #1
 8006778:	e7b6      	b.n	80066e8 <_dtoa_r+0x188>
 800677a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800677c:	e7b5      	b.n	80066ea <_dtoa_r+0x18a>
 800677e:	427b      	negs	r3, r7
 8006780:	930a      	str	r3, [sp, #40]	@ 0x28
 8006782:	2300      	movs	r3, #0
 8006784:	eba8 0807 	sub.w	r8, r8, r7
 8006788:	930e      	str	r3, [sp, #56]	@ 0x38
 800678a:	e7c2      	b.n	8006712 <_dtoa_r+0x1b2>
 800678c:	2300      	movs	r3, #0
 800678e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006790:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006792:	2b00      	cmp	r3, #0
 8006794:	dc35      	bgt.n	8006802 <_dtoa_r+0x2a2>
 8006796:	2301      	movs	r3, #1
 8006798:	461a      	mov	r2, r3
 800679a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800679e:	9221      	str	r2, [sp, #132]	@ 0x84
 80067a0:	e00b      	b.n	80067ba <_dtoa_r+0x25a>
 80067a2:	2301      	movs	r3, #1
 80067a4:	e7f3      	b.n	800678e <_dtoa_r+0x22e>
 80067a6:	2300      	movs	r3, #0
 80067a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80067aa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80067ac:	18fb      	adds	r3, r7, r3
 80067ae:	9308      	str	r3, [sp, #32]
 80067b0:	3301      	adds	r3, #1
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	9307      	str	r3, [sp, #28]
 80067b6:	bfb8      	it	lt
 80067b8:	2301      	movlt	r3, #1
 80067ba:	2100      	movs	r1, #0
 80067bc:	2204      	movs	r2, #4
 80067be:	f8db 001c 	ldr.w	r0, [fp, #28]
 80067c2:	f102 0514 	add.w	r5, r2, #20
 80067c6:	429d      	cmp	r5, r3
 80067c8:	d91f      	bls.n	800680a <_dtoa_r+0x2aa>
 80067ca:	6041      	str	r1, [r0, #4]
 80067cc:	4658      	mov	r0, fp
 80067ce:	f000 fd8d 	bl	80072ec <_Balloc>
 80067d2:	4682      	mov	sl, r0
 80067d4:	2800      	cmp	r0, #0
 80067d6:	d139      	bne.n	800684c <_dtoa_r+0x2ec>
 80067d8:	4602      	mov	r2, r0
 80067da:	f240 11af 	movw	r1, #431	@ 0x1af
 80067de:	4b1a      	ldr	r3, [pc, #104]	@ (8006848 <_dtoa_r+0x2e8>)
 80067e0:	e6d2      	b.n	8006588 <_dtoa_r+0x28>
 80067e2:	2301      	movs	r3, #1
 80067e4:	e7e0      	b.n	80067a8 <_dtoa_r+0x248>
 80067e6:	2401      	movs	r4, #1
 80067e8:	2300      	movs	r3, #0
 80067ea:	940b      	str	r4, [sp, #44]	@ 0x2c
 80067ec:	9320      	str	r3, [sp, #128]	@ 0x80
 80067ee:	f04f 33ff 	mov.w	r3, #4294967295
 80067f2:	2200      	movs	r2, #0
 80067f4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80067f8:	2312      	movs	r3, #18
 80067fa:	e7d0      	b.n	800679e <_dtoa_r+0x23e>
 80067fc:	2301      	movs	r3, #1
 80067fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006800:	e7f5      	b.n	80067ee <_dtoa_r+0x28e>
 8006802:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006804:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006808:	e7d7      	b.n	80067ba <_dtoa_r+0x25a>
 800680a:	3101      	adds	r1, #1
 800680c:	0052      	lsls	r2, r2, #1
 800680e:	e7d8      	b.n	80067c2 <_dtoa_r+0x262>
 8006810:	636f4361 	.word	0x636f4361
 8006814:	3fd287a7 	.word	0x3fd287a7
 8006818:	8b60c8b3 	.word	0x8b60c8b3
 800681c:	3fc68a28 	.word	0x3fc68a28
 8006820:	509f79fb 	.word	0x509f79fb
 8006824:	3fd34413 	.word	0x3fd34413
 8006828:	0800868c 	.word	0x0800868c
 800682c:	080086a3 	.word	0x080086a3
 8006830:	7ff00000 	.word	0x7ff00000
 8006834:	08008688 	.word	0x08008688
 8006838:	0800865c 	.word	0x0800865c
 800683c:	0800865b 	.word	0x0800865b
 8006840:	3ff80000 	.word	0x3ff80000
 8006844:	080087a0 	.word	0x080087a0
 8006848:	080086fb 	.word	0x080086fb
 800684c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006850:	6018      	str	r0, [r3, #0]
 8006852:	9b07      	ldr	r3, [sp, #28]
 8006854:	2b0e      	cmp	r3, #14
 8006856:	f200 80a4 	bhi.w	80069a2 <_dtoa_r+0x442>
 800685a:	2c00      	cmp	r4, #0
 800685c:	f000 80a1 	beq.w	80069a2 <_dtoa_r+0x442>
 8006860:	2f00      	cmp	r7, #0
 8006862:	dd33      	ble.n	80068cc <_dtoa_r+0x36c>
 8006864:	4b86      	ldr	r3, [pc, #536]	@ (8006a80 <_dtoa_r+0x520>)
 8006866:	f007 020f 	and.w	r2, r7, #15
 800686a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800686e:	05f8      	lsls	r0, r7, #23
 8006870:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006874:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006878:	ea4f 1427 	mov.w	r4, r7, asr #4
 800687c:	d516      	bpl.n	80068ac <_dtoa_r+0x34c>
 800687e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006882:	4b80      	ldr	r3, [pc, #512]	@ (8006a84 <_dtoa_r+0x524>)
 8006884:	2603      	movs	r6, #3
 8006886:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800688a:	f7f9 ff4f 	bl	800072c <__aeabi_ddiv>
 800688e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006892:	f004 040f 	and.w	r4, r4, #15
 8006896:	4d7b      	ldr	r5, [pc, #492]	@ (8006a84 <_dtoa_r+0x524>)
 8006898:	b954      	cbnz	r4, 80068b0 <_dtoa_r+0x350>
 800689a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800689e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068a2:	f7f9 ff43 	bl	800072c <__aeabi_ddiv>
 80068a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068aa:	e028      	b.n	80068fe <_dtoa_r+0x39e>
 80068ac:	2602      	movs	r6, #2
 80068ae:	e7f2      	b.n	8006896 <_dtoa_r+0x336>
 80068b0:	07e1      	lsls	r1, r4, #31
 80068b2:	d508      	bpl.n	80068c6 <_dtoa_r+0x366>
 80068b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80068bc:	f7f9 fe0c 	bl	80004d8 <__aeabi_dmul>
 80068c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068c4:	3601      	adds	r6, #1
 80068c6:	1064      	asrs	r4, r4, #1
 80068c8:	3508      	adds	r5, #8
 80068ca:	e7e5      	b.n	8006898 <_dtoa_r+0x338>
 80068cc:	f000 80d2 	beq.w	8006a74 <_dtoa_r+0x514>
 80068d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80068d4:	427c      	negs	r4, r7
 80068d6:	4b6a      	ldr	r3, [pc, #424]	@ (8006a80 <_dtoa_r+0x520>)
 80068d8:	f004 020f 	and.w	r2, r4, #15
 80068dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e4:	f7f9 fdf8 	bl	80004d8 <__aeabi_dmul>
 80068e8:	2602      	movs	r6, #2
 80068ea:	2300      	movs	r3, #0
 80068ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068f0:	4d64      	ldr	r5, [pc, #400]	@ (8006a84 <_dtoa_r+0x524>)
 80068f2:	1124      	asrs	r4, r4, #4
 80068f4:	2c00      	cmp	r4, #0
 80068f6:	f040 80b2 	bne.w	8006a5e <_dtoa_r+0x4fe>
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1d3      	bne.n	80068a6 <_dtoa_r+0x346>
 80068fe:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006902:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006904:	2b00      	cmp	r3, #0
 8006906:	f000 80b7 	beq.w	8006a78 <_dtoa_r+0x518>
 800690a:	2200      	movs	r2, #0
 800690c:	4620      	mov	r0, r4
 800690e:	4629      	mov	r1, r5
 8006910:	4b5d      	ldr	r3, [pc, #372]	@ (8006a88 <_dtoa_r+0x528>)
 8006912:	f7fa f853 	bl	80009bc <__aeabi_dcmplt>
 8006916:	2800      	cmp	r0, #0
 8006918:	f000 80ae 	beq.w	8006a78 <_dtoa_r+0x518>
 800691c:	9b07      	ldr	r3, [sp, #28]
 800691e:	2b00      	cmp	r3, #0
 8006920:	f000 80aa 	beq.w	8006a78 <_dtoa_r+0x518>
 8006924:	9b08      	ldr	r3, [sp, #32]
 8006926:	2b00      	cmp	r3, #0
 8006928:	dd37      	ble.n	800699a <_dtoa_r+0x43a>
 800692a:	1e7b      	subs	r3, r7, #1
 800692c:	4620      	mov	r0, r4
 800692e:	9304      	str	r3, [sp, #16]
 8006930:	2200      	movs	r2, #0
 8006932:	4629      	mov	r1, r5
 8006934:	4b55      	ldr	r3, [pc, #340]	@ (8006a8c <_dtoa_r+0x52c>)
 8006936:	f7f9 fdcf 	bl	80004d8 <__aeabi_dmul>
 800693a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800693e:	9c08      	ldr	r4, [sp, #32]
 8006940:	3601      	adds	r6, #1
 8006942:	4630      	mov	r0, r6
 8006944:	f7f9 fd5e 	bl	8000404 <__aeabi_i2d>
 8006948:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800694c:	f7f9 fdc4 	bl	80004d8 <__aeabi_dmul>
 8006950:	2200      	movs	r2, #0
 8006952:	4b4f      	ldr	r3, [pc, #316]	@ (8006a90 <_dtoa_r+0x530>)
 8006954:	f7f9 fc0a 	bl	800016c <__adddf3>
 8006958:	4605      	mov	r5, r0
 800695a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800695e:	2c00      	cmp	r4, #0
 8006960:	f040 809a 	bne.w	8006a98 <_dtoa_r+0x538>
 8006964:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006968:	2200      	movs	r2, #0
 800696a:	4b4a      	ldr	r3, [pc, #296]	@ (8006a94 <_dtoa_r+0x534>)
 800696c:	f7f9 fbfc 	bl	8000168 <__aeabi_dsub>
 8006970:	4602      	mov	r2, r0
 8006972:	460b      	mov	r3, r1
 8006974:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006978:	462a      	mov	r2, r5
 800697a:	4633      	mov	r3, r6
 800697c:	f7fa f83c 	bl	80009f8 <__aeabi_dcmpgt>
 8006980:	2800      	cmp	r0, #0
 8006982:	f040 828e 	bne.w	8006ea2 <_dtoa_r+0x942>
 8006986:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800698a:	462a      	mov	r2, r5
 800698c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006990:	f7fa f814 	bl	80009bc <__aeabi_dcmplt>
 8006994:	2800      	cmp	r0, #0
 8006996:	f040 8127 	bne.w	8006be8 <_dtoa_r+0x688>
 800699a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800699e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80069a2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f2c0 8163 	blt.w	8006c70 <_dtoa_r+0x710>
 80069aa:	2f0e      	cmp	r7, #14
 80069ac:	f300 8160 	bgt.w	8006c70 <_dtoa_r+0x710>
 80069b0:	4b33      	ldr	r3, [pc, #204]	@ (8006a80 <_dtoa_r+0x520>)
 80069b2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80069b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80069ba:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80069be:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	da03      	bge.n	80069cc <_dtoa_r+0x46c>
 80069c4:	9b07      	ldr	r3, [sp, #28]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f340 8100 	ble.w	8006bcc <_dtoa_r+0x66c>
 80069cc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80069d0:	4656      	mov	r6, sl
 80069d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069d6:	4620      	mov	r0, r4
 80069d8:	4629      	mov	r1, r5
 80069da:	f7f9 fea7 	bl	800072c <__aeabi_ddiv>
 80069de:	f7fa f82b 	bl	8000a38 <__aeabi_d2iz>
 80069e2:	4680      	mov	r8, r0
 80069e4:	f7f9 fd0e 	bl	8000404 <__aeabi_i2d>
 80069e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069ec:	f7f9 fd74 	bl	80004d8 <__aeabi_dmul>
 80069f0:	4602      	mov	r2, r0
 80069f2:	460b      	mov	r3, r1
 80069f4:	4620      	mov	r0, r4
 80069f6:	4629      	mov	r1, r5
 80069f8:	f7f9 fbb6 	bl	8000168 <__aeabi_dsub>
 80069fc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006a00:	9d07      	ldr	r5, [sp, #28]
 8006a02:	f806 4b01 	strb.w	r4, [r6], #1
 8006a06:	eba6 040a 	sub.w	r4, r6, sl
 8006a0a:	42a5      	cmp	r5, r4
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	460b      	mov	r3, r1
 8006a10:	f040 8116 	bne.w	8006c40 <_dtoa_r+0x6e0>
 8006a14:	f7f9 fbaa 	bl	800016c <__adddf3>
 8006a18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a1c:	4604      	mov	r4, r0
 8006a1e:	460d      	mov	r5, r1
 8006a20:	f7f9 ffea 	bl	80009f8 <__aeabi_dcmpgt>
 8006a24:	2800      	cmp	r0, #0
 8006a26:	f040 80f8 	bne.w	8006c1a <_dtoa_r+0x6ba>
 8006a2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a2e:	4620      	mov	r0, r4
 8006a30:	4629      	mov	r1, r5
 8006a32:	f7f9 ffb9 	bl	80009a8 <__aeabi_dcmpeq>
 8006a36:	b118      	cbz	r0, 8006a40 <_dtoa_r+0x4e0>
 8006a38:	f018 0f01 	tst.w	r8, #1
 8006a3c:	f040 80ed 	bne.w	8006c1a <_dtoa_r+0x6ba>
 8006a40:	4649      	mov	r1, r9
 8006a42:	4658      	mov	r0, fp
 8006a44:	f000 fc92 	bl	800736c <_Bfree>
 8006a48:	2300      	movs	r3, #0
 8006a4a:	7033      	strb	r3, [r6, #0]
 8006a4c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006a4e:	3701      	adds	r7, #1
 8006a50:	601f      	str	r7, [r3, #0]
 8006a52:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f000 8320 	beq.w	800709a <_dtoa_r+0xb3a>
 8006a5a:	601e      	str	r6, [r3, #0]
 8006a5c:	e31d      	b.n	800709a <_dtoa_r+0xb3a>
 8006a5e:	07e2      	lsls	r2, r4, #31
 8006a60:	d505      	bpl.n	8006a6e <_dtoa_r+0x50e>
 8006a62:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006a66:	f7f9 fd37 	bl	80004d8 <__aeabi_dmul>
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	3601      	adds	r6, #1
 8006a6e:	1064      	asrs	r4, r4, #1
 8006a70:	3508      	adds	r5, #8
 8006a72:	e73f      	b.n	80068f4 <_dtoa_r+0x394>
 8006a74:	2602      	movs	r6, #2
 8006a76:	e742      	b.n	80068fe <_dtoa_r+0x39e>
 8006a78:	9c07      	ldr	r4, [sp, #28]
 8006a7a:	9704      	str	r7, [sp, #16]
 8006a7c:	e761      	b.n	8006942 <_dtoa_r+0x3e2>
 8006a7e:	bf00      	nop
 8006a80:	080087a0 	.word	0x080087a0
 8006a84:	08008778 	.word	0x08008778
 8006a88:	3ff00000 	.word	0x3ff00000
 8006a8c:	40240000 	.word	0x40240000
 8006a90:	401c0000 	.word	0x401c0000
 8006a94:	40140000 	.word	0x40140000
 8006a98:	4b70      	ldr	r3, [pc, #448]	@ (8006c5c <_dtoa_r+0x6fc>)
 8006a9a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006a9c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006aa0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006aa4:	4454      	add	r4, sl
 8006aa6:	2900      	cmp	r1, #0
 8006aa8:	d045      	beq.n	8006b36 <_dtoa_r+0x5d6>
 8006aaa:	2000      	movs	r0, #0
 8006aac:	496c      	ldr	r1, [pc, #432]	@ (8006c60 <_dtoa_r+0x700>)
 8006aae:	f7f9 fe3d 	bl	800072c <__aeabi_ddiv>
 8006ab2:	4633      	mov	r3, r6
 8006ab4:	462a      	mov	r2, r5
 8006ab6:	f7f9 fb57 	bl	8000168 <__aeabi_dsub>
 8006aba:	4656      	mov	r6, sl
 8006abc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006ac0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ac4:	f7f9 ffb8 	bl	8000a38 <__aeabi_d2iz>
 8006ac8:	4605      	mov	r5, r0
 8006aca:	f7f9 fc9b 	bl	8000404 <__aeabi_i2d>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ad6:	f7f9 fb47 	bl	8000168 <__aeabi_dsub>
 8006ada:	4602      	mov	r2, r0
 8006adc:	460b      	mov	r3, r1
 8006ade:	3530      	adds	r5, #48	@ 0x30
 8006ae0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006ae4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006ae8:	f806 5b01 	strb.w	r5, [r6], #1
 8006aec:	f7f9 ff66 	bl	80009bc <__aeabi_dcmplt>
 8006af0:	2800      	cmp	r0, #0
 8006af2:	d163      	bne.n	8006bbc <_dtoa_r+0x65c>
 8006af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006af8:	2000      	movs	r0, #0
 8006afa:	495a      	ldr	r1, [pc, #360]	@ (8006c64 <_dtoa_r+0x704>)
 8006afc:	f7f9 fb34 	bl	8000168 <__aeabi_dsub>
 8006b00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006b04:	f7f9 ff5a 	bl	80009bc <__aeabi_dcmplt>
 8006b08:	2800      	cmp	r0, #0
 8006b0a:	f040 8087 	bne.w	8006c1c <_dtoa_r+0x6bc>
 8006b0e:	42a6      	cmp	r6, r4
 8006b10:	f43f af43 	beq.w	800699a <_dtoa_r+0x43a>
 8006b14:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006b18:	2200      	movs	r2, #0
 8006b1a:	4b53      	ldr	r3, [pc, #332]	@ (8006c68 <_dtoa_r+0x708>)
 8006b1c:	f7f9 fcdc 	bl	80004d8 <__aeabi_dmul>
 8006b20:	2200      	movs	r2, #0
 8006b22:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006b26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b2a:	4b4f      	ldr	r3, [pc, #316]	@ (8006c68 <_dtoa_r+0x708>)
 8006b2c:	f7f9 fcd4 	bl	80004d8 <__aeabi_dmul>
 8006b30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b34:	e7c4      	b.n	8006ac0 <_dtoa_r+0x560>
 8006b36:	4631      	mov	r1, r6
 8006b38:	4628      	mov	r0, r5
 8006b3a:	f7f9 fccd 	bl	80004d8 <__aeabi_dmul>
 8006b3e:	4656      	mov	r6, sl
 8006b40:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006b44:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006b46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b4a:	f7f9 ff75 	bl	8000a38 <__aeabi_d2iz>
 8006b4e:	4605      	mov	r5, r0
 8006b50:	f7f9 fc58 	bl	8000404 <__aeabi_i2d>
 8006b54:	4602      	mov	r2, r0
 8006b56:	460b      	mov	r3, r1
 8006b58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b5c:	f7f9 fb04 	bl	8000168 <__aeabi_dsub>
 8006b60:	4602      	mov	r2, r0
 8006b62:	460b      	mov	r3, r1
 8006b64:	3530      	adds	r5, #48	@ 0x30
 8006b66:	f806 5b01 	strb.w	r5, [r6], #1
 8006b6a:	42a6      	cmp	r6, r4
 8006b6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006b70:	f04f 0200 	mov.w	r2, #0
 8006b74:	d124      	bne.n	8006bc0 <_dtoa_r+0x660>
 8006b76:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006b7a:	4b39      	ldr	r3, [pc, #228]	@ (8006c60 <_dtoa_r+0x700>)
 8006b7c:	f7f9 faf6 	bl	800016c <__adddf3>
 8006b80:	4602      	mov	r2, r0
 8006b82:	460b      	mov	r3, r1
 8006b84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b88:	f7f9 ff36 	bl	80009f8 <__aeabi_dcmpgt>
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	d145      	bne.n	8006c1c <_dtoa_r+0x6bc>
 8006b90:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006b94:	2000      	movs	r0, #0
 8006b96:	4932      	ldr	r1, [pc, #200]	@ (8006c60 <_dtoa_r+0x700>)
 8006b98:	f7f9 fae6 	bl	8000168 <__aeabi_dsub>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	460b      	mov	r3, r1
 8006ba0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ba4:	f7f9 ff0a 	bl	80009bc <__aeabi_dcmplt>
 8006ba8:	2800      	cmp	r0, #0
 8006baa:	f43f aef6 	beq.w	800699a <_dtoa_r+0x43a>
 8006bae:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006bb0:	1e73      	subs	r3, r6, #1
 8006bb2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006bb4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006bb8:	2b30      	cmp	r3, #48	@ 0x30
 8006bba:	d0f8      	beq.n	8006bae <_dtoa_r+0x64e>
 8006bbc:	9f04      	ldr	r7, [sp, #16]
 8006bbe:	e73f      	b.n	8006a40 <_dtoa_r+0x4e0>
 8006bc0:	4b29      	ldr	r3, [pc, #164]	@ (8006c68 <_dtoa_r+0x708>)
 8006bc2:	f7f9 fc89 	bl	80004d8 <__aeabi_dmul>
 8006bc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bca:	e7bc      	b.n	8006b46 <_dtoa_r+0x5e6>
 8006bcc:	d10c      	bne.n	8006be8 <_dtoa_r+0x688>
 8006bce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	4b25      	ldr	r3, [pc, #148]	@ (8006c6c <_dtoa_r+0x70c>)
 8006bd6:	f7f9 fc7f 	bl	80004d8 <__aeabi_dmul>
 8006bda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006bde:	f7f9 ff01 	bl	80009e4 <__aeabi_dcmpge>
 8006be2:	2800      	cmp	r0, #0
 8006be4:	f000 815b 	beq.w	8006e9e <_dtoa_r+0x93e>
 8006be8:	2400      	movs	r4, #0
 8006bea:	4625      	mov	r5, r4
 8006bec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006bee:	4656      	mov	r6, sl
 8006bf0:	43db      	mvns	r3, r3
 8006bf2:	9304      	str	r3, [sp, #16]
 8006bf4:	2700      	movs	r7, #0
 8006bf6:	4621      	mov	r1, r4
 8006bf8:	4658      	mov	r0, fp
 8006bfa:	f000 fbb7 	bl	800736c <_Bfree>
 8006bfe:	2d00      	cmp	r5, #0
 8006c00:	d0dc      	beq.n	8006bbc <_dtoa_r+0x65c>
 8006c02:	b12f      	cbz	r7, 8006c10 <_dtoa_r+0x6b0>
 8006c04:	42af      	cmp	r7, r5
 8006c06:	d003      	beq.n	8006c10 <_dtoa_r+0x6b0>
 8006c08:	4639      	mov	r1, r7
 8006c0a:	4658      	mov	r0, fp
 8006c0c:	f000 fbae 	bl	800736c <_Bfree>
 8006c10:	4629      	mov	r1, r5
 8006c12:	4658      	mov	r0, fp
 8006c14:	f000 fbaa 	bl	800736c <_Bfree>
 8006c18:	e7d0      	b.n	8006bbc <_dtoa_r+0x65c>
 8006c1a:	9704      	str	r7, [sp, #16]
 8006c1c:	4633      	mov	r3, r6
 8006c1e:	461e      	mov	r6, r3
 8006c20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c24:	2a39      	cmp	r2, #57	@ 0x39
 8006c26:	d107      	bne.n	8006c38 <_dtoa_r+0x6d8>
 8006c28:	459a      	cmp	sl, r3
 8006c2a:	d1f8      	bne.n	8006c1e <_dtoa_r+0x6be>
 8006c2c:	9a04      	ldr	r2, [sp, #16]
 8006c2e:	3201      	adds	r2, #1
 8006c30:	9204      	str	r2, [sp, #16]
 8006c32:	2230      	movs	r2, #48	@ 0x30
 8006c34:	f88a 2000 	strb.w	r2, [sl]
 8006c38:	781a      	ldrb	r2, [r3, #0]
 8006c3a:	3201      	adds	r2, #1
 8006c3c:	701a      	strb	r2, [r3, #0]
 8006c3e:	e7bd      	b.n	8006bbc <_dtoa_r+0x65c>
 8006c40:	2200      	movs	r2, #0
 8006c42:	4b09      	ldr	r3, [pc, #36]	@ (8006c68 <_dtoa_r+0x708>)
 8006c44:	f7f9 fc48 	bl	80004d8 <__aeabi_dmul>
 8006c48:	2200      	movs	r2, #0
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	4604      	mov	r4, r0
 8006c4e:	460d      	mov	r5, r1
 8006c50:	f7f9 feaa 	bl	80009a8 <__aeabi_dcmpeq>
 8006c54:	2800      	cmp	r0, #0
 8006c56:	f43f aebc 	beq.w	80069d2 <_dtoa_r+0x472>
 8006c5a:	e6f1      	b.n	8006a40 <_dtoa_r+0x4e0>
 8006c5c:	080087a0 	.word	0x080087a0
 8006c60:	3fe00000 	.word	0x3fe00000
 8006c64:	3ff00000 	.word	0x3ff00000
 8006c68:	40240000 	.word	0x40240000
 8006c6c:	40140000 	.word	0x40140000
 8006c70:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006c72:	2a00      	cmp	r2, #0
 8006c74:	f000 80db 	beq.w	8006e2e <_dtoa_r+0x8ce>
 8006c78:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006c7a:	2a01      	cmp	r2, #1
 8006c7c:	f300 80bf 	bgt.w	8006dfe <_dtoa_r+0x89e>
 8006c80:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006c82:	2a00      	cmp	r2, #0
 8006c84:	f000 80b7 	beq.w	8006df6 <_dtoa_r+0x896>
 8006c88:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006c8c:	4646      	mov	r6, r8
 8006c8e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006c90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c92:	2101      	movs	r1, #1
 8006c94:	441a      	add	r2, r3
 8006c96:	4658      	mov	r0, fp
 8006c98:	4498      	add	r8, r3
 8006c9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c9c:	f000 fc1a 	bl	80074d4 <__i2b>
 8006ca0:	4605      	mov	r5, r0
 8006ca2:	b15e      	cbz	r6, 8006cbc <_dtoa_r+0x75c>
 8006ca4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	dd08      	ble.n	8006cbc <_dtoa_r+0x75c>
 8006caa:	42b3      	cmp	r3, r6
 8006cac:	bfa8      	it	ge
 8006cae:	4633      	movge	r3, r6
 8006cb0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006cb2:	eba8 0803 	sub.w	r8, r8, r3
 8006cb6:	1af6      	subs	r6, r6, r3
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cbe:	b1f3      	cbz	r3, 8006cfe <_dtoa_r+0x79e>
 8006cc0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f000 80b7 	beq.w	8006e36 <_dtoa_r+0x8d6>
 8006cc8:	b18c      	cbz	r4, 8006cee <_dtoa_r+0x78e>
 8006cca:	4629      	mov	r1, r5
 8006ccc:	4622      	mov	r2, r4
 8006cce:	4658      	mov	r0, fp
 8006cd0:	f000 fcbe 	bl	8007650 <__pow5mult>
 8006cd4:	464a      	mov	r2, r9
 8006cd6:	4601      	mov	r1, r0
 8006cd8:	4605      	mov	r5, r0
 8006cda:	4658      	mov	r0, fp
 8006cdc:	f000 fc10 	bl	8007500 <__multiply>
 8006ce0:	4649      	mov	r1, r9
 8006ce2:	9004      	str	r0, [sp, #16]
 8006ce4:	4658      	mov	r0, fp
 8006ce6:	f000 fb41 	bl	800736c <_Bfree>
 8006cea:	9b04      	ldr	r3, [sp, #16]
 8006cec:	4699      	mov	r9, r3
 8006cee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cf0:	1b1a      	subs	r2, r3, r4
 8006cf2:	d004      	beq.n	8006cfe <_dtoa_r+0x79e>
 8006cf4:	4649      	mov	r1, r9
 8006cf6:	4658      	mov	r0, fp
 8006cf8:	f000 fcaa 	bl	8007650 <__pow5mult>
 8006cfc:	4681      	mov	r9, r0
 8006cfe:	2101      	movs	r1, #1
 8006d00:	4658      	mov	r0, fp
 8006d02:	f000 fbe7 	bl	80074d4 <__i2b>
 8006d06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d08:	4604      	mov	r4, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f000 81c9 	beq.w	80070a2 <_dtoa_r+0xb42>
 8006d10:	461a      	mov	r2, r3
 8006d12:	4601      	mov	r1, r0
 8006d14:	4658      	mov	r0, fp
 8006d16:	f000 fc9b 	bl	8007650 <__pow5mult>
 8006d1a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006d1c:	4604      	mov	r4, r0
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	f300 808f 	bgt.w	8006e42 <_dtoa_r+0x8e2>
 8006d24:	9b02      	ldr	r3, [sp, #8]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	f040 8087 	bne.w	8006e3a <_dtoa_r+0x8da>
 8006d2c:	9b03      	ldr	r3, [sp, #12]
 8006d2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	f040 8083 	bne.w	8006e3e <_dtoa_r+0x8de>
 8006d38:	9b03      	ldr	r3, [sp, #12]
 8006d3a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006d3e:	0d1b      	lsrs	r3, r3, #20
 8006d40:	051b      	lsls	r3, r3, #20
 8006d42:	b12b      	cbz	r3, 8006d50 <_dtoa_r+0x7f0>
 8006d44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d46:	f108 0801 	add.w	r8, r8, #1
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d4e:	2301      	movs	r3, #1
 8006d50:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f000 81aa 	beq.w	80070ae <_dtoa_r+0xb4e>
 8006d5a:	6923      	ldr	r3, [r4, #16]
 8006d5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006d60:	6918      	ldr	r0, [r3, #16]
 8006d62:	f000 fb6b 	bl	800743c <__hi0bits>
 8006d66:	f1c0 0020 	rsb	r0, r0, #32
 8006d6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d6c:	4418      	add	r0, r3
 8006d6e:	f010 001f 	ands.w	r0, r0, #31
 8006d72:	d071      	beq.n	8006e58 <_dtoa_r+0x8f8>
 8006d74:	f1c0 0320 	rsb	r3, r0, #32
 8006d78:	2b04      	cmp	r3, #4
 8006d7a:	dd65      	ble.n	8006e48 <_dtoa_r+0x8e8>
 8006d7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d7e:	f1c0 001c 	rsb	r0, r0, #28
 8006d82:	4403      	add	r3, r0
 8006d84:	4480      	add	r8, r0
 8006d86:	4406      	add	r6, r0
 8006d88:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d8a:	f1b8 0f00 	cmp.w	r8, #0
 8006d8e:	dd05      	ble.n	8006d9c <_dtoa_r+0x83c>
 8006d90:	4649      	mov	r1, r9
 8006d92:	4642      	mov	r2, r8
 8006d94:	4658      	mov	r0, fp
 8006d96:	f000 fcb5 	bl	8007704 <__lshift>
 8006d9a:	4681      	mov	r9, r0
 8006d9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	dd05      	ble.n	8006dae <_dtoa_r+0x84e>
 8006da2:	4621      	mov	r1, r4
 8006da4:	461a      	mov	r2, r3
 8006da6:	4658      	mov	r0, fp
 8006da8:	f000 fcac 	bl	8007704 <__lshift>
 8006dac:	4604      	mov	r4, r0
 8006dae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d053      	beq.n	8006e5c <_dtoa_r+0x8fc>
 8006db4:	4621      	mov	r1, r4
 8006db6:	4648      	mov	r0, r9
 8006db8:	f000 fd10 	bl	80077dc <__mcmp>
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	da4d      	bge.n	8006e5c <_dtoa_r+0x8fc>
 8006dc0:	1e7b      	subs	r3, r7, #1
 8006dc2:	4649      	mov	r1, r9
 8006dc4:	9304      	str	r3, [sp, #16]
 8006dc6:	220a      	movs	r2, #10
 8006dc8:	2300      	movs	r3, #0
 8006dca:	4658      	mov	r0, fp
 8006dcc:	f000 faf0 	bl	80073b0 <__multadd>
 8006dd0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006dd2:	4681      	mov	r9, r0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f000 816c 	beq.w	80070b2 <_dtoa_r+0xb52>
 8006dda:	2300      	movs	r3, #0
 8006ddc:	4629      	mov	r1, r5
 8006dde:	220a      	movs	r2, #10
 8006de0:	4658      	mov	r0, fp
 8006de2:	f000 fae5 	bl	80073b0 <__multadd>
 8006de6:	9b08      	ldr	r3, [sp, #32]
 8006de8:	4605      	mov	r5, r0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	dc61      	bgt.n	8006eb2 <_dtoa_r+0x952>
 8006dee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	dc3b      	bgt.n	8006e6c <_dtoa_r+0x90c>
 8006df4:	e05d      	b.n	8006eb2 <_dtoa_r+0x952>
 8006df6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006df8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006dfc:	e746      	b.n	8006c8c <_dtoa_r+0x72c>
 8006dfe:	9b07      	ldr	r3, [sp, #28]
 8006e00:	1e5c      	subs	r4, r3, #1
 8006e02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e04:	42a3      	cmp	r3, r4
 8006e06:	bfbf      	itttt	lt
 8006e08:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006e0a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8006e0c:	1ae3      	sublt	r3, r4, r3
 8006e0e:	18d2      	addlt	r2, r2, r3
 8006e10:	bfa8      	it	ge
 8006e12:	1b1c      	subge	r4, r3, r4
 8006e14:	9b07      	ldr	r3, [sp, #28]
 8006e16:	bfbe      	ittt	lt
 8006e18:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006e1a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8006e1c:	2400      	movlt	r4, #0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	bfb5      	itete	lt
 8006e22:	eba8 0603 	sublt.w	r6, r8, r3
 8006e26:	4646      	movge	r6, r8
 8006e28:	2300      	movlt	r3, #0
 8006e2a:	9b07      	ldrge	r3, [sp, #28]
 8006e2c:	e730      	b.n	8006c90 <_dtoa_r+0x730>
 8006e2e:	4646      	mov	r6, r8
 8006e30:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006e32:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006e34:	e735      	b.n	8006ca2 <_dtoa_r+0x742>
 8006e36:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006e38:	e75c      	b.n	8006cf4 <_dtoa_r+0x794>
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	e788      	b.n	8006d50 <_dtoa_r+0x7f0>
 8006e3e:	9b02      	ldr	r3, [sp, #8]
 8006e40:	e786      	b.n	8006d50 <_dtoa_r+0x7f0>
 8006e42:	2300      	movs	r3, #0
 8006e44:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e46:	e788      	b.n	8006d5a <_dtoa_r+0x7fa>
 8006e48:	d09f      	beq.n	8006d8a <_dtoa_r+0x82a>
 8006e4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e4c:	331c      	adds	r3, #28
 8006e4e:	441a      	add	r2, r3
 8006e50:	4498      	add	r8, r3
 8006e52:	441e      	add	r6, r3
 8006e54:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e56:	e798      	b.n	8006d8a <_dtoa_r+0x82a>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	e7f6      	b.n	8006e4a <_dtoa_r+0x8ea>
 8006e5c:	9b07      	ldr	r3, [sp, #28]
 8006e5e:	9704      	str	r7, [sp, #16]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	dc20      	bgt.n	8006ea6 <_dtoa_r+0x946>
 8006e64:	9308      	str	r3, [sp, #32]
 8006e66:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	dd1e      	ble.n	8006eaa <_dtoa_r+0x94a>
 8006e6c:	9b08      	ldr	r3, [sp, #32]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	f47f aebc 	bne.w	8006bec <_dtoa_r+0x68c>
 8006e74:	4621      	mov	r1, r4
 8006e76:	2205      	movs	r2, #5
 8006e78:	4658      	mov	r0, fp
 8006e7a:	f000 fa99 	bl	80073b0 <__multadd>
 8006e7e:	4601      	mov	r1, r0
 8006e80:	4604      	mov	r4, r0
 8006e82:	4648      	mov	r0, r9
 8006e84:	f000 fcaa 	bl	80077dc <__mcmp>
 8006e88:	2800      	cmp	r0, #0
 8006e8a:	f77f aeaf 	ble.w	8006bec <_dtoa_r+0x68c>
 8006e8e:	2331      	movs	r3, #49	@ 0x31
 8006e90:	4656      	mov	r6, sl
 8006e92:	f806 3b01 	strb.w	r3, [r6], #1
 8006e96:	9b04      	ldr	r3, [sp, #16]
 8006e98:	3301      	adds	r3, #1
 8006e9a:	9304      	str	r3, [sp, #16]
 8006e9c:	e6aa      	b.n	8006bf4 <_dtoa_r+0x694>
 8006e9e:	9c07      	ldr	r4, [sp, #28]
 8006ea0:	9704      	str	r7, [sp, #16]
 8006ea2:	4625      	mov	r5, r4
 8006ea4:	e7f3      	b.n	8006e8e <_dtoa_r+0x92e>
 8006ea6:	9b07      	ldr	r3, [sp, #28]
 8006ea8:	9308      	str	r3, [sp, #32]
 8006eaa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	f000 8104 	beq.w	80070ba <_dtoa_r+0xb5a>
 8006eb2:	2e00      	cmp	r6, #0
 8006eb4:	dd05      	ble.n	8006ec2 <_dtoa_r+0x962>
 8006eb6:	4629      	mov	r1, r5
 8006eb8:	4632      	mov	r2, r6
 8006eba:	4658      	mov	r0, fp
 8006ebc:	f000 fc22 	bl	8007704 <__lshift>
 8006ec0:	4605      	mov	r5, r0
 8006ec2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d05a      	beq.n	8006f7e <_dtoa_r+0xa1e>
 8006ec8:	4658      	mov	r0, fp
 8006eca:	6869      	ldr	r1, [r5, #4]
 8006ecc:	f000 fa0e 	bl	80072ec <_Balloc>
 8006ed0:	4606      	mov	r6, r0
 8006ed2:	b928      	cbnz	r0, 8006ee0 <_dtoa_r+0x980>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006eda:	4b83      	ldr	r3, [pc, #524]	@ (80070e8 <_dtoa_r+0xb88>)
 8006edc:	f7ff bb54 	b.w	8006588 <_dtoa_r+0x28>
 8006ee0:	692a      	ldr	r2, [r5, #16]
 8006ee2:	f105 010c 	add.w	r1, r5, #12
 8006ee6:	3202      	adds	r2, #2
 8006ee8:	0092      	lsls	r2, r2, #2
 8006eea:	300c      	adds	r0, #12
 8006eec:	f7ff fa9f 	bl	800642e <memcpy>
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	4631      	mov	r1, r6
 8006ef4:	4658      	mov	r0, fp
 8006ef6:	f000 fc05 	bl	8007704 <__lshift>
 8006efa:	462f      	mov	r7, r5
 8006efc:	4605      	mov	r5, r0
 8006efe:	f10a 0301 	add.w	r3, sl, #1
 8006f02:	9307      	str	r3, [sp, #28]
 8006f04:	9b08      	ldr	r3, [sp, #32]
 8006f06:	4453      	add	r3, sl
 8006f08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f0a:	9b02      	ldr	r3, [sp, #8]
 8006f0c:	f003 0301 	and.w	r3, r3, #1
 8006f10:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f12:	9b07      	ldr	r3, [sp, #28]
 8006f14:	4621      	mov	r1, r4
 8006f16:	3b01      	subs	r3, #1
 8006f18:	4648      	mov	r0, r9
 8006f1a:	9302      	str	r3, [sp, #8]
 8006f1c:	f7ff fa95 	bl	800644a <quorem>
 8006f20:	4639      	mov	r1, r7
 8006f22:	9008      	str	r0, [sp, #32]
 8006f24:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006f28:	4648      	mov	r0, r9
 8006f2a:	f000 fc57 	bl	80077dc <__mcmp>
 8006f2e:	462a      	mov	r2, r5
 8006f30:	9009      	str	r0, [sp, #36]	@ 0x24
 8006f32:	4621      	mov	r1, r4
 8006f34:	4658      	mov	r0, fp
 8006f36:	f000 fc6d 	bl	8007814 <__mdiff>
 8006f3a:	68c2      	ldr	r2, [r0, #12]
 8006f3c:	4606      	mov	r6, r0
 8006f3e:	bb02      	cbnz	r2, 8006f82 <_dtoa_r+0xa22>
 8006f40:	4601      	mov	r1, r0
 8006f42:	4648      	mov	r0, r9
 8006f44:	f000 fc4a 	bl	80077dc <__mcmp>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	4631      	mov	r1, r6
 8006f4c:	4658      	mov	r0, fp
 8006f4e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006f50:	f000 fa0c 	bl	800736c <_Bfree>
 8006f54:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006f56:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006f58:	9e07      	ldr	r6, [sp, #28]
 8006f5a:	ea43 0102 	orr.w	r1, r3, r2
 8006f5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f60:	4319      	orrs	r1, r3
 8006f62:	d110      	bne.n	8006f86 <_dtoa_r+0xa26>
 8006f64:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006f68:	d029      	beq.n	8006fbe <_dtoa_r+0xa5e>
 8006f6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	dd02      	ble.n	8006f76 <_dtoa_r+0xa16>
 8006f70:	9b08      	ldr	r3, [sp, #32]
 8006f72:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006f76:	9b02      	ldr	r3, [sp, #8]
 8006f78:	f883 8000 	strb.w	r8, [r3]
 8006f7c:	e63b      	b.n	8006bf6 <_dtoa_r+0x696>
 8006f7e:	4628      	mov	r0, r5
 8006f80:	e7bb      	b.n	8006efa <_dtoa_r+0x99a>
 8006f82:	2201      	movs	r2, #1
 8006f84:	e7e1      	b.n	8006f4a <_dtoa_r+0x9ea>
 8006f86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	db04      	blt.n	8006f96 <_dtoa_r+0xa36>
 8006f8c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006f8e:	430b      	orrs	r3, r1
 8006f90:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006f92:	430b      	orrs	r3, r1
 8006f94:	d120      	bne.n	8006fd8 <_dtoa_r+0xa78>
 8006f96:	2a00      	cmp	r2, #0
 8006f98:	dded      	ble.n	8006f76 <_dtoa_r+0xa16>
 8006f9a:	4649      	mov	r1, r9
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	4658      	mov	r0, fp
 8006fa0:	f000 fbb0 	bl	8007704 <__lshift>
 8006fa4:	4621      	mov	r1, r4
 8006fa6:	4681      	mov	r9, r0
 8006fa8:	f000 fc18 	bl	80077dc <__mcmp>
 8006fac:	2800      	cmp	r0, #0
 8006fae:	dc03      	bgt.n	8006fb8 <_dtoa_r+0xa58>
 8006fb0:	d1e1      	bne.n	8006f76 <_dtoa_r+0xa16>
 8006fb2:	f018 0f01 	tst.w	r8, #1
 8006fb6:	d0de      	beq.n	8006f76 <_dtoa_r+0xa16>
 8006fb8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006fbc:	d1d8      	bne.n	8006f70 <_dtoa_r+0xa10>
 8006fbe:	2339      	movs	r3, #57	@ 0x39
 8006fc0:	9a02      	ldr	r2, [sp, #8]
 8006fc2:	7013      	strb	r3, [r2, #0]
 8006fc4:	4633      	mov	r3, r6
 8006fc6:	461e      	mov	r6, r3
 8006fc8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	2a39      	cmp	r2, #57	@ 0x39
 8006fd0:	d052      	beq.n	8007078 <_dtoa_r+0xb18>
 8006fd2:	3201      	adds	r2, #1
 8006fd4:	701a      	strb	r2, [r3, #0]
 8006fd6:	e60e      	b.n	8006bf6 <_dtoa_r+0x696>
 8006fd8:	2a00      	cmp	r2, #0
 8006fda:	dd07      	ble.n	8006fec <_dtoa_r+0xa8c>
 8006fdc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006fe0:	d0ed      	beq.n	8006fbe <_dtoa_r+0xa5e>
 8006fe2:	9a02      	ldr	r2, [sp, #8]
 8006fe4:	f108 0301 	add.w	r3, r8, #1
 8006fe8:	7013      	strb	r3, [r2, #0]
 8006fea:	e604      	b.n	8006bf6 <_dtoa_r+0x696>
 8006fec:	9b07      	ldr	r3, [sp, #28]
 8006fee:	9a07      	ldr	r2, [sp, #28]
 8006ff0:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006ff4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d028      	beq.n	800704c <_dtoa_r+0xaec>
 8006ffa:	4649      	mov	r1, r9
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	220a      	movs	r2, #10
 8007000:	4658      	mov	r0, fp
 8007002:	f000 f9d5 	bl	80073b0 <__multadd>
 8007006:	42af      	cmp	r7, r5
 8007008:	4681      	mov	r9, r0
 800700a:	f04f 0300 	mov.w	r3, #0
 800700e:	f04f 020a 	mov.w	r2, #10
 8007012:	4639      	mov	r1, r7
 8007014:	4658      	mov	r0, fp
 8007016:	d107      	bne.n	8007028 <_dtoa_r+0xac8>
 8007018:	f000 f9ca 	bl	80073b0 <__multadd>
 800701c:	4607      	mov	r7, r0
 800701e:	4605      	mov	r5, r0
 8007020:	9b07      	ldr	r3, [sp, #28]
 8007022:	3301      	adds	r3, #1
 8007024:	9307      	str	r3, [sp, #28]
 8007026:	e774      	b.n	8006f12 <_dtoa_r+0x9b2>
 8007028:	f000 f9c2 	bl	80073b0 <__multadd>
 800702c:	4629      	mov	r1, r5
 800702e:	4607      	mov	r7, r0
 8007030:	2300      	movs	r3, #0
 8007032:	220a      	movs	r2, #10
 8007034:	4658      	mov	r0, fp
 8007036:	f000 f9bb 	bl	80073b0 <__multadd>
 800703a:	4605      	mov	r5, r0
 800703c:	e7f0      	b.n	8007020 <_dtoa_r+0xac0>
 800703e:	9b08      	ldr	r3, [sp, #32]
 8007040:	2700      	movs	r7, #0
 8007042:	2b00      	cmp	r3, #0
 8007044:	bfcc      	ite	gt
 8007046:	461e      	movgt	r6, r3
 8007048:	2601      	movle	r6, #1
 800704a:	4456      	add	r6, sl
 800704c:	4649      	mov	r1, r9
 800704e:	2201      	movs	r2, #1
 8007050:	4658      	mov	r0, fp
 8007052:	f000 fb57 	bl	8007704 <__lshift>
 8007056:	4621      	mov	r1, r4
 8007058:	4681      	mov	r9, r0
 800705a:	f000 fbbf 	bl	80077dc <__mcmp>
 800705e:	2800      	cmp	r0, #0
 8007060:	dcb0      	bgt.n	8006fc4 <_dtoa_r+0xa64>
 8007062:	d102      	bne.n	800706a <_dtoa_r+0xb0a>
 8007064:	f018 0f01 	tst.w	r8, #1
 8007068:	d1ac      	bne.n	8006fc4 <_dtoa_r+0xa64>
 800706a:	4633      	mov	r3, r6
 800706c:	461e      	mov	r6, r3
 800706e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007072:	2a30      	cmp	r2, #48	@ 0x30
 8007074:	d0fa      	beq.n	800706c <_dtoa_r+0xb0c>
 8007076:	e5be      	b.n	8006bf6 <_dtoa_r+0x696>
 8007078:	459a      	cmp	sl, r3
 800707a:	d1a4      	bne.n	8006fc6 <_dtoa_r+0xa66>
 800707c:	9b04      	ldr	r3, [sp, #16]
 800707e:	3301      	adds	r3, #1
 8007080:	9304      	str	r3, [sp, #16]
 8007082:	2331      	movs	r3, #49	@ 0x31
 8007084:	f88a 3000 	strb.w	r3, [sl]
 8007088:	e5b5      	b.n	8006bf6 <_dtoa_r+0x696>
 800708a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800708c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80070ec <_dtoa_r+0xb8c>
 8007090:	b11b      	cbz	r3, 800709a <_dtoa_r+0xb3a>
 8007092:	f10a 0308 	add.w	r3, sl, #8
 8007096:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007098:	6013      	str	r3, [r2, #0]
 800709a:	4650      	mov	r0, sl
 800709c:	b017      	add	sp, #92	@ 0x5c
 800709e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070a2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	f77f ae3d 	ble.w	8006d24 <_dtoa_r+0x7c4>
 80070aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070ac:	930a      	str	r3, [sp, #40]	@ 0x28
 80070ae:	2001      	movs	r0, #1
 80070b0:	e65b      	b.n	8006d6a <_dtoa_r+0x80a>
 80070b2:	9b08      	ldr	r3, [sp, #32]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f77f aed6 	ble.w	8006e66 <_dtoa_r+0x906>
 80070ba:	4656      	mov	r6, sl
 80070bc:	4621      	mov	r1, r4
 80070be:	4648      	mov	r0, r9
 80070c0:	f7ff f9c3 	bl	800644a <quorem>
 80070c4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80070c8:	9b08      	ldr	r3, [sp, #32]
 80070ca:	f806 8b01 	strb.w	r8, [r6], #1
 80070ce:	eba6 020a 	sub.w	r2, r6, sl
 80070d2:	4293      	cmp	r3, r2
 80070d4:	ddb3      	ble.n	800703e <_dtoa_r+0xade>
 80070d6:	4649      	mov	r1, r9
 80070d8:	2300      	movs	r3, #0
 80070da:	220a      	movs	r2, #10
 80070dc:	4658      	mov	r0, fp
 80070de:	f000 f967 	bl	80073b0 <__multadd>
 80070e2:	4681      	mov	r9, r0
 80070e4:	e7ea      	b.n	80070bc <_dtoa_r+0xb5c>
 80070e6:	bf00      	nop
 80070e8:	080086fb 	.word	0x080086fb
 80070ec:	0800867f 	.word	0x0800867f

080070f0 <_free_r>:
 80070f0:	b538      	push	{r3, r4, r5, lr}
 80070f2:	4605      	mov	r5, r0
 80070f4:	2900      	cmp	r1, #0
 80070f6:	d040      	beq.n	800717a <_free_r+0x8a>
 80070f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070fc:	1f0c      	subs	r4, r1, #4
 80070fe:	2b00      	cmp	r3, #0
 8007100:	bfb8      	it	lt
 8007102:	18e4      	addlt	r4, r4, r3
 8007104:	f000 f8e6 	bl	80072d4 <__malloc_lock>
 8007108:	4a1c      	ldr	r2, [pc, #112]	@ (800717c <_free_r+0x8c>)
 800710a:	6813      	ldr	r3, [r2, #0]
 800710c:	b933      	cbnz	r3, 800711c <_free_r+0x2c>
 800710e:	6063      	str	r3, [r4, #4]
 8007110:	6014      	str	r4, [r2, #0]
 8007112:	4628      	mov	r0, r5
 8007114:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007118:	f000 b8e2 	b.w	80072e0 <__malloc_unlock>
 800711c:	42a3      	cmp	r3, r4
 800711e:	d908      	bls.n	8007132 <_free_r+0x42>
 8007120:	6820      	ldr	r0, [r4, #0]
 8007122:	1821      	adds	r1, r4, r0
 8007124:	428b      	cmp	r3, r1
 8007126:	bf01      	itttt	eq
 8007128:	6819      	ldreq	r1, [r3, #0]
 800712a:	685b      	ldreq	r3, [r3, #4]
 800712c:	1809      	addeq	r1, r1, r0
 800712e:	6021      	streq	r1, [r4, #0]
 8007130:	e7ed      	b.n	800710e <_free_r+0x1e>
 8007132:	461a      	mov	r2, r3
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	b10b      	cbz	r3, 800713c <_free_r+0x4c>
 8007138:	42a3      	cmp	r3, r4
 800713a:	d9fa      	bls.n	8007132 <_free_r+0x42>
 800713c:	6811      	ldr	r1, [r2, #0]
 800713e:	1850      	adds	r0, r2, r1
 8007140:	42a0      	cmp	r0, r4
 8007142:	d10b      	bne.n	800715c <_free_r+0x6c>
 8007144:	6820      	ldr	r0, [r4, #0]
 8007146:	4401      	add	r1, r0
 8007148:	1850      	adds	r0, r2, r1
 800714a:	4283      	cmp	r3, r0
 800714c:	6011      	str	r1, [r2, #0]
 800714e:	d1e0      	bne.n	8007112 <_free_r+0x22>
 8007150:	6818      	ldr	r0, [r3, #0]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	4408      	add	r0, r1
 8007156:	6010      	str	r0, [r2, #0]
 8007158:	6053      	str	r3, [r2, #4]
 800715a:	e7da      	b.n	8007112 <_free_r+0x22>
 800715c:	d902      	bls.n	8007164 <_free_r+0x74>
 800715e:	230c      	movs	r3, #12
 8007160:	602b      	str	r3, [r5, #0]
 8007162:	e7d6      	b.n	8007112 <_free_r+0x22>
 8007164:	6820      	ldr	r0, [r4, #0]
 8007166:	1821      	adds	r1, r4, r0
 8007168:	428b      	cmp	r3, r1
 800716a:	bf01      	itttt	eq
 800716c:	6819      	ldreq	r1, [r3, #0]
 800716e:	685b      	ldreq	r3, [r3, #4]
 8007170:	1809      	addeq	r1, r1, r0
 8007172:	6021      	streq	r1, [r4, #0]
 8007174:	6063      	str	r3, [r4, #4]
 8007176:	6054      	str	r4, [r2, #4]
 8007178:	e7cb      	b.n	8007112 <_free_r+0x22>
 800717a:	bd38      	pop	{r3, r4, r5, pc}
 800717c:	20000554 	.word	0x20000554

08007180 <malloc>:
 8007180:	4b02      	ldr	r3, [pc, #8]	@ (800718c <malloc+0xc>)
 8007182:	4601      	mov	r1, r0
 8007184:	6818      	ldr	r0, [r3, #0]
 8007186:	f000 b825 	b.w	80071d4 <_malloc_r>
 800718a:	bf00      	nop
 800718c:	200000a4 	.word	0x200000a4

08007190 <sbrk_aligned>:
 8007190:	b570      	push	{r4, r5, r6, lr}
 8007192:	4e0f      	ldr	r6, [pc, #60]	@ (80071d0 <sbrk_aligned+0x40>)
 8007194:	460c      	mov	r4, r1
 8007196:	6831      	ldr	r1, [r6, #0]
 8007198:	4605      	mov	r5, r0
 800719a:	b911      	cbnz	r1, 80071a2 <sbrk_aligned+0x12>
 800719c:	f000 fe26 	bl	8007dec <_sbrk_r>
 80071a0:	6030      	str	r0, [r6, #0]
 80071a2:	4621      	mov	r1, r4
 80071a4:	4628      	mov	r0, r5
 80071a6:	f000 fe21 	bl	8007dec <_sbrk_r>
 80071aa:	1c43      	adds	r3, r0, #1
 80071ac:	d103      	bne.n	80071b6 <sbrk_aligned+0x26>
 80071ae:	f04f 34ff 	mov.w	r4, #4294967295
 80071b2:	4620      	mov	r0, r4
 80071b4:	bd70      	pop	{r4, r5, r6, pc}
 80071b6:	1cc4      	adds	r4, r0, #3
 80071b8:	f024 0403 	bic.w	r4, r4, #3
 80071bc:	42a0      	cmp	r0, r4
 80071be:	d0f8      	beq.n	80071b2 <sbrk_aligned+0x22>
 80071c0:	1a21      	subs	r1, r4, r0
 80071c2:	4628      	mov	r0, r5
 80071c4:	f000 fe12 	bl	8007dec <_sbrk_r>
 80071c8:	3001      	adds	r0, #1
 80071ca:	d1f2      	bne.n	80071b2 <sbrk_aligned+0x22>
 80071cc:	e7ef      	b.n	80071ae <sbrk_aligned+0x1e>
 80071ce:	bf00      	nop
 80071d0:	20000550 	.word	0x20000550

080071d4 <_malloc_r>:
 80071d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071d8:	1ccd      	adds	r5, r1, #3
 80071da:	f025 0503 	bic.w	r5, r5, #3
 80071de:	3508      	adds	r5, #8
 80071e0:	2d0c      	cmp	r5, #12
 80071e2:	bf38      	it	cc
 80071e4:	250c      	movcc	r5, #12
 80071e6:	2d00      	cmp	r5, #0
 80071e8:	4606      	mov	r6, r0
 80071ea:	db01      	blt.n	80071f0 <_malloc_r+0x1c>
 80071ec:	42a9      	cmp	r1, r5
 80071ee:	d904      	bls.n	80071fa <_malloc_r+0x26>
 80071f0:	230c      	movs	r3, #12
 80071f2:	6033      	str	r3, [r6, #0]
 80071f4:	2000      	movs	r0, #0
 80071f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80072d0 <_malloc_r+0xfc>
 80071fe:	f000 f869 	bl	80072d4 <__malloc_lock>
 8007202:	f8d8 3000 	ldr.w	r3, [r8]
 8007206:	461c      	mov	r4, r3
 8007208:	bb44      	cbnz	r4, 800725c <_malloc_r+0x88>
 800720a:	4629      	mov	r1, r5
 800720c:	4630      	mov	r0, r6
 800720e:	f7ff ffbf 	bl	8007190 <sbrk_aligned>
 8007212:	1c43      	adds	r3, r0, #1
 8007214:	4604      	mov	r4, r0
 8007216:	d158      	bne.n	80072ca <_malloc_r+0xf6>
 8007218:	f8d8 4000 	ldr.w	r4, [r8]
 800721c:	4627      	mov	r7, r4
 800721e:	2f00      	cmp	r7, #0
 8007220:	d143      	bne.n	80072aa <_malloc_r+0xd6>
 8007222:	2c00      	cmp	r4, #0
 8007224:	d04b      	beq.n	80072be <_malloc_r+0xea>
 8007226:	6823      	ldr	r3, [r4, #0]
 8007228:	4639      	mov	r1, r7
 800722a:	4630      	mov	r0, r6
 800722c:	eb04 0903 	add.w	r9, r4, r3
 8007230:	f000 fddc 	bl	8007dec <_sbrk_r>
 8007234:	4581      	cmp	r9, r0
 8007236:	d142      	bne.n	80072be <_malloc_r+0xea>
 8007238:	6821      	ldr	r1, [r4, #0]
 800723a:	4630      	mov	r0, r6
 800723c:	1a6d      	subs	r5, r5, r1
 800723e:	4629      	mov	r1, r5
 8007240:	f7ff ffa6 	bl	8007190 <sbrk_aligned>
 8007244:	3001      	adds	r0, #1
 8007246:	d03a      	beq.n	80072be <_malloc_r+0xea>
 8007248:	6823      	ldr	r3, [r4, #0]
 800724a:	442b      	add	r3, r5
 800724c:	6023      	str	r3, [r4, #0]
 800724e:	f8d8 3000 	ldr.w	r3, [r8]
 8007252:	685a      	ldr	r2, [r3, #4]
 8007254:	bb62      	cbnz	r2, 80072b0 <_malloc_r+0xdc>
 8007256:	f8c8 7000 	str.w	r7, [r8]
 800725a:	e00f      	b.n	800727c <_malloc_r+0xa8>
 800725c:	6822      	ldr	r2, [r4, #0]
 800725e:	1b52      	subs	r2, r2, r5
 8007260:	d420      	bmi.n	80072a4 <_malloc_r+0xd0>
 8007262:	2a0b      	cmp	r2, #11
 8007264:	d917      	bls.n	8007296 <_malloc_r+0xc2>
 8007266:	1961      	adds	r1, r4, r5
 8007268:	42a3      	cmp	r3, r4
 800726a:	6025      	str	r5, [r4, #0]
 800726c:	bf18      	it	ne
 800726e:	6059      	strne	r1, [r3, #4]
 8007270:	6863      	ldr	r3, [r4, #4]
 8007272:	bf08      	it	eq
 8007274:	f8c8 1000 	streq.w	r1, [r8]
 8007278:	5162      	str	r2, [r4, r5]
 800727a:	604b      	str	r3, [r1, #4]
 800727c:	4630      	mov	r0, r6
 800727e:	f000 f82f 	bl	80072e0 <__malloc_unlock>
 8007282:	f104 000b 	add.w	r0, r4, #11
 8007286:	1d23      	adds	r3, r4, #4
 8007288:	f020 0007 	bic.w	r0, r0, #7
 800728c:	1ac2      	subs	r2, r0, r3
 800728e:	bf1c      	itt	ne
 8007290:	1a1b      	subne	r3, r3, r0
 8007292:	50a3      	strne	r3, [r4, r2]
 8007294:	e7af      	b.n	80071f6 <_malloc_r+0x22>
 8007296:	6862      	ldr	r2, [r4, #4]
 8007298:	42a3      	cmp	r3, r4
 800729a:	bf0c      	ite	eq
 800729c:	f8c8 2000 	streq.w	r2, [r8]
 80072a0:	605a      	strne	r2, [r3, #4]
 80072a2:	e7eb      	b.n	800727c <_malloc_r+0xa8>
 80072a4:	4623      	mov	r3, r4
 80072a6:	6864      	ldr	r4, [r4, #4]
 80072a8:	e7ae      	b.n	8007208 <_malloc_r+0x34>
 80072aa:	463c      	mov	r4, r7
 80072ac:	687f      	ldr	r7, [r7, #4]
 80072ae:	e7b6      	b.n	800721e <_malloc_r+0x4a>
 80072b0:	461a      	mov	r2, r3
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	42a3      	cmp	r3, r4
 80072b6:	d1fb      	bne.n	80072b0 <_malloc_r+0xdc>
 80072b8:	2300      	movs	r3, #0
 80072ba:	6053      	str	r3, [r2, #4]
 80072bc:	e7de      	b.n	800727c <_malloc_r+0xa8>
 80072be:	230c      	movs	r3, #12
 80072c0:	4630      	mov	r0, r6
 80072c2:	6033      	str	r3, [r6, #0]
 80072c4:	f000 f80c 	bl	80072e0 <__malloc_unlock>
 80072c8:	e794      	b.n	80071f4 <_malloc_r+0x20>
 80072ca:	6005      	str	r5, [r0, #0]
 80072cc:	e7d6      	b.n	800727c <_malloc_r+0xa8>
 80072ce:	bf00      	nop
 80072d0:	20000554 	.word	0x20000554

080072d4 <__malloc_lock>:
 80072d4:	4801      	ldr	r0, [pc, #4]	@ (80072dc <__malloc_lock+0x8>)
 80072d6:	f7ff b89a 	b.w	800640e <__retarget_lock_acquire_recursive>
 80072da:	bf00      	nop
 80072dc:	2000054c 	.word	0x2000054c

080072e0 <__malloc_unlock>:
 80072e0:	4801      	ldr	r0, [pc, #4]	@ (80072e8 <__malloc_unlock+0x8>)
 80072e2:	f7ff b895 	b.w	8006410 <__retarget_lock_release_recursive>
 80072e6:	bf00      	nop
 80072e8:	2000054c 	.word	0x2000054c

080072ec <_Balloc>:
 80072ec:	b570      	push	{r4, r5, r6, lr}
 80072ee:	69c6      	ldr	r6, [r0, #28]
 80072f0:	4604      	mov	r4, r0
 80072f2:	460d      	mov	r5, r1
 80072f4:	b976      	cbnz	r6, 8007314 <_Balloc+0x28>
 80072f6:	2010      	movs	r0, #16
 80072f8:	f7ff ff42 	bl	8007180 <malloc>
 80072fc:	4602      	mov	r2, r0
 80072fe:	61e0      	str	r0, [r4, #28]
 8007300:	b920      	cbnz	r0, 800730c <_Balloc+0x20>
 8007302:	216b      	movs	r1, #107	@ 0x6b
 8007304:	4b17      	ldr	r3, [pc, #92]	@ (8007364 <_Balloc+0x78>)
 8007306:	4818      	ldr	r0, [pc, #96]	@ (8007368 <_Balloc+0x7c>)
 8007308:	f000 fd80 	bl	8007e0c <__assert_func>
 800730c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007310:	6006      	str	r6, [r0, #0]
 8007312:	60c6      	str	r6, [r0, #12]
 8007314:	69e6      	ldr	r6, [r4, #28]
 8007316:	68f3      	ldr	r3, [r6, #12]
 8007318:	b183      	cbz	r3, 800733c <_Balloc+0x50>
 800731a:	69e3      	ldr	r3, [r4, #28]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007322:	b9b8      	cbnz	r0, 8007354 <_Balloc+0x68>
 8007324:	2101      	movs	r1, #1
 8007326:	fa01 f605 	lsl.w	r6, r1, r5
 800732a:	1d72      	adds	r2, r6, #5
 800732c:	4620      	mov	r0, r4
 800732e:	0092      	lsls	r2, r2, #2
 8007330:	f000 fd8a 	bl	8007e48 <_calloc_r>
 8007334:	b160      	cbz	r0, 8007350 <_Balloc+0x64>
 8007336:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800733a:	e00e      	b.n	800735a <_Balloc+0x6e>
 800733c:	2221      	movs	r2, #33	@ 0x21
 800733e:	2104      	movs	r1, #4
 8007340:	4620      	mov	r0, r4
 8007342:	f000 fd81 	bl	8007e48 <_calloc_r>
 8007346:	69e3      	ldr	r3, [r4, #28]
 8007348:	60f0      	str	r0, [r6, #12]
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d1e4      	bne.n	800731a <_Balloc+0x2e>
 8007350:	2000      	movs	r0, #0
 8007352:	bd70      	pop	{r4, r5, r6, pc}
 8007354:	6802      	ldr	r2, [r0, #0]
 8007356:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800735a:	2300      	movs	r3, #0
 800735c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007360:	e7f7      	b.n	8007352 <_Balloc+0x66>
 8007362:	bf00      	nop
 8007364:	0800868c 	.word	0x0800868c
 8007368:	0800870c 	.word	0x0800870c

0800736c <_Bfree>:
 800736c:	b570      	push	{r4, r5, r6, lr}
 800736e:	69c6      	ldr	r6, [r0, #28]
 8007370:	4605      	mov	r5, r0
 8007372:	460c      	mov	r4, r1
 8007374:	b976      	cbnz	r6, 8007394 <_Bfree+0x28>
 8007376:	2010      	movs	r0, #16
 8007378:	f7ff ff02 	bl	8007180 <malloc>
 800737c:	4602      	mov	r2, r0
 800737e:	61e8      	str	r0, [r5, #28]
 8007380:	b920      	cbnz	r0, 800738c <_Bfree+0x20>
 8007382:	218f      	movs	r1, #143	@ 0x8f
 8007384:	4b08      	ldr	r3, [pc, #32]	@ (80073a8 <_Bfree+0x3c>)
 8007386:	4809      	ldr	r0, [pc, #36]	@ (80073ac <_Bfree+0x40>)
 8007388:	f000 fd40 	bl	8007e0c <__assert_func>
 800738c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007390:	6006      	str	r6, [r0, #0]
 8007392:	60c6      	str	r6, [r0, #12]
 8007394:	b13c      	cbz	r4, 80073a6 <_Bfree+0x3a>
 8007396:	69eb      	ldr	r3, [r5, #28]
 8007398:	6862      	ldr	r2, [r4, #4]
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80073a0:	6021      	str	r1, [r4, #0]
 80073a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80073a6:	bd70      	pop	{r4, r5, r6, pc}
 80073a8:	0800868c 	.word	0x0800868c
 80073ac:	0800870c 	.word	0x0800870c

080073b0 <__multadd>:
 80073b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073b4:	4607      	mov	r7, r0
 80073b6:	460c      	mov	r4, r1
 80073b8:	461e      	mov	r6, r3
 80073ba:	2000      	movs	r0, #0
 80073bc:	690d      	ldr	r5, [r1, #16]
 80073be:	f101 0c14 	add.w	ip, r1, #20
 80073c2:	f8dc 3000 	ldr.w	r3, [ip]
 80073c6:	3001      	adds	r0, #1
 80073c8:	b299      	uxth	r1, r3
 80073ca:	fb02 6101 	mla	r1, r2, r1, r6
 80073ce:	0c1e      	lsrs	r6, r3, #16
 80073d0:	0c0b      	lsrs	r3, r1, #16
 80073d2:	fb02 3306 	mla	r3, r2, r6, r3
 80073d6:	b289      	uxth	r1, r1
 80073d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80073dc:	4285      	cmp	r5, r0
 80073de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80073e2:	f84c 1b04 	str.w	r1, [ip], #4
 80073e6:	dcec      	bgt.n	80073c2 <__multadd+0x12>
 80073e8:	b30e      	cbz	r6, 800742e <__multadd+0x7e>
 80073ea:	68a3      	ldr	r3, [r4, #8]
 80073ec:	42ab      	cmp	r3, r5
 80073ee:	dc19      	bgt.n	8007424 <__multadd+0x74>
 80073f0:	6861      	ldr	r1, [r4, #4]
 80073f2:	4638      	mov	r0, r7
 80073f4:	3101      	adds	r1, #1
 80073f6:	f7ff ff79 	bl	80072ec <_Balloc>
 80073fa:	4680      	mov	r8, r0
 80073fc:	b928      	cbnz	r0, 800740a <__multadd+0x5a>
 80073fe:	4602      	mov	r2, r0
 8007400:	21ba      	movs	r1, #186	@ 0xba
 8007402:	4b0c      	ldr	r3, [pc, #48]	@ (8007434 <__multadd+0x84>)
 8007404:	480c      	ldr	r0, [pc, #48]	@ (8007438 <__multadd+0x88>)
 8007406:	f000 fd01 	bl	8007e0c <__assert_func>
 800740a:	6922      	ldr	r2, [r4, #16]
 800740c:	f104 010c 	add.w	r1, r4, #12
 8007410:	3202      	adds	r2, #2
 8007412:	0092      	lsls	r2, r2, #2
 8007414:	300c      	adds	r0, #12
 8007416:	f7ff f80a 	bl	800642e <memcpy>
 800741a:	4621      	mov	r1, r4
 800741c:	4638      	mov	r0, r7
 800741e:	f7ff ffa5 	bl	800736c <_Bfree>
 8007422:	4644      	mov	r4, r8
 8007424:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007428:	3501      	adds	r5, #1
 800742a:	615e      	str	r6, [r3, #20]
 800742c:	6125      	str	r5, [r4, #16]
 800742e:	4620      	mov	r0, r4
 8007430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007434:	080086fb 	.word	0x080086fb
 8007438:	0800870c 	.word	0x0800870c

0800743c <__hi0bits>:
 800743c:	4603      	mov	r3, r0
 800743e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007442:	bf3a      	itte	cc
 8007444:	0403      	lslcc	r3, r0, #16
 8007446:	2010      	movcc	r0, #16
 8007448:	2000      	movcs	r0, #0
 800744a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800744e:	bf3c      	itt	cc
 8007450:	021b      	lslcc	r3, r3, #8
 8007452:	3008      	addcc	r0, #8
 8007454:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007458:	bf3c      	itt	cc
 800745a:	011b      	lslcc	r3, r3, #4
 800745c:	3004      	addcc	r0, #4
 800745e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007462:	bf3c      	itt	cc
 8007464:	009b      	lslcc	r3, r3, #2
 8007466:	3002      	addcc	r0, #2
 8007468:	2b00      	cmp	r3, #0
 800746a:	db05      	blt.n	8007478 <__hi0bits+0x3c>
 800746c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007470:	f100 0001 	add.w	r0, r0, #1
 8007474:	bf08      	it	eq
 8007476:	2020      	moveq	r0, #32
 8007478:	4770      	bx	lr

0800747a <__lo0bits>:
 800747a:	6803      	ldr	r3, [r0, #0]
 800747c:	4602      	mov	r2, r0
 800747e:	f013 0007 	ands.w	r0, r3, #7
 8007482:	d00b      	beq.n	800749c <__lo0bits+0x22>
 8007484:	07d9      	lsls	r1, r3, #31
 8007486:	d421      	bmi.n	80074cc <__lo0bits+0x52>
 8007488:	0798      	lsls	r0, r3, #30
 800748a:	bf49      	itett	mi
 800748c:	085b      	lsrmi	r3, r3, #1
 800748e:	089b      	lsrpl	r3, r3, #2
 8007490:	2001      	movmi	r0, #1
 8007492:	6013      	strmi	r3, [r2, #0]
 8007494:	bf5c      	itt	pl
 8007496:	2002      	movpl	r0, #2
 8007498:	6013      	strpl	r3, [r2, #0]
 800749a:	4770      	bx	lr
 800749c:	b299      	uxth	r1, r3
 800749e:	b909      	cbnz	r1, 80074a4 <__lo0bits+0x2a>
 80074a0:	2010      	movs	r0, #16
 80074a2:	0c1b      	lsrs	r3, r3, #16
 80074a4:	b2d9      	uxtb	r1, r3
 80074a6:	b909      	cbnz	r1, 80074ac <__lo0bits+0x32>
 80074a8:	3008      	adds	r0, #8
 80074aa:	0a1b      	lsrs	r3, r3, #8
 80074ac:	0719      	lsls	r1, r3, #28
 80074ae:	bf04      	itt	eq
 80074b0:	091b      	lsreq	r3, r3, #4
 80074b2:	3004      	addeq	r0, #4
 80074b4:	0799      	lsls	r1, r3, #30
 80074b6:	bf04      	itt	eq
 80074b8:	089b      	lsreq	r3, r3, #2
 80074ba:	3002      	addeq	r0, #2
 80074bc:	07d9      	lsls	r1, r3, #31
 80074be:	d403      	bmi.n	80074c8 <__lo0bits+0x4e>
 80074c0:	085b      	lsrs	r3, r3, #1
 80074c2:	f100 0001 	add.w	r0, r0, #1
 80074c6:	d003      	beq.n	80074d0 <__lo0bits+0x56>
 80074c8:	6013      	str	r3, [r2, #0]
 80074ca:	4770      	bx	lr
 80074cc:	2000      	movs	r0, #0
 80074ce:	4770      	bx	lr
 80074d0:	2020      	movs	r0, #32
 80074d2:	4770      	bx	lr

080074d4 <__i2b>:
 80074d4:	b510      	push	{r4, lr}
 80074d6:	460c      	mov	r4, r1
 80074d8:	2101      	movs	r1, #1
 80074da:	f7ff ff07 	bl	80072ec <_Balloc>
 80074de:	4602      	mov	r2, r0
 80074e0:	b928      	cbnz	r0, 80074ee <__i2b+0x1a>
 80074e2:	f240 1145 	movw	r1, #325	@ 0x145
 80074e6:	4b04      	ldr	r3, [pc, #16]	@ (80074f8 <__i2b+0x24>)
 80074e8:	4804      	ldr	r0, [pc, #16]	@ (80074fc <__i2b+0x28>)
 80074ea:	f000 fc8f 	bl	8007e0c <__assert_func>
 80074ee:	2301      	movs	r3, #1
 80074f0:	6144      	str	r4, [r0, #20]
 80074f2:	6103      	str	r3, [r0, #16]
 80074f4:	bd10      	pop	{r4, pc}
 80074f6:	bf00      	nop
 80074f8:	080086fb 	.word	0x080086fb
 80074fc:	0800870c 	.word	0x0800870c

08007500 <__multiply>:
 8007500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007504:	4614      	mov	r4, r2
 8007506:	690a      	ldr	r2, [r1, #16]
 8007508:	6923      	ldr	r3, [r4, #16]
 800750a:	460f      	mov	r7, r1
 800750c:	429a      	cmp	r2, r3
 800750e:	bfa2      	ittt	ge
 8007510:	4623      	movge	r3, r4
 8007512:	460c      	movge	r4, r1
 8007514:	461f      	movge	r7, r3
 8007516:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800751a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800751e:	68a3      	ldr	r3, [r4, #8]
 8007520:	6861      	ldr	r1, [r4, #4]
 8007522:	eb0a 0609 	add.w	r6, sl, r9
 8007526:	42b3      	cmp	r3, r6
 8007528:	b085      	sub	sp, #20
 800752a:	bfb8      	it	lt
 800752c:	3101      	addlt	r1, #1
 800752e:	f7ff fedd 	bl	80072ec <_Balloc>
 8007532:	b930      	cbnz	r0, 8007542 <__multiply+0x42>
 8007534:	4602      	mov	r2, r0
 8007536:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800753a:	4b43      	ldr	r3, [pc, #268]	@ (8007648 <__multiply+0x148>)
 800753c:	4843      	ldr	r0, [pc, #268]	@ (800764c <__multiply+0x14c>)
 800753e:	f000 fc65 	bl	8007e0c <__assert_func>
 8007542:	f100 0514 	add.w	r5, r0, #20
 8007546:	462b      	mov	r3, r5
 8007548:	2200      	movs	r2, #0
 800754a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800754e:	4543      	cmp	r3, r8
 8007550:	d321      	bcc.n	8007596 <__multiply+0x96>
 8007552:	f107 0114 	add.w	r1, r7, #20
 8007556:	f104 0214 	add.w	r2, r4, #20
 800755a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800755e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007562:	9302      	str	r3, [sp, #8]
 8007564:	1b13      	subs	r3, r2, r4
 8007566:	3b15      	subs	r3, #21
 8007568:	f023 0303 	bic.w	r3, r3, #3
 800756c:	3304      	adds	r3, #4
 800756e:	f104 0715 	add.w	r7, r4, #21
 8007572:	42ba      	cmp	r2, r7
 8007574:	bf38      	it	cc
 8007576:	2304      	movcc	r3, #4
 8007578:	9301      	str	r3, [sp, #4]
 800757a:	9b02      	ldr	r3, [sp, #8]
 800757c:	9103      	str	r1, [sp, #12]
 800757e:	428b      	cmp	r3, r1
 8007580:	d80c      	bhi.n	800759c <__multiply+0x9c>
 8007582:	2e00      	cmp	r6, #0
 8007584:	dd03      	ble.n	800758e <__multiply+0x8e>
 8007586:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800758a:	2b00      	cmp	r3, #0
 800758c:	d05a      	beq.n	8007644 <__multiply+0x144>
 800758e:	6106      	str	r6, [r0, #16]
 8007590:	b005      	add	sp, #20
 8007592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007596:	f843 2b04 	str.w	r2, [r3], #4
 800759a:	e7d8      	b.n	800754e <__multiply+0x4e>
 800759c:	f8b1 a000 	ldrh.w	sl, [r1]
 80075a0:	f1ba 0f00 	cmp.w	sl, #0
 80075a4:	d023      	beq.n	80075ee <__multiply+0xee>
 80075a6:	46a9      	mov	r9, r5
 80075a8:	f04f 0c00 	mov.w	ip, #0
 80075ac:	f104 0e14 	add.w	lr, r4, #20
 80075b0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80075b4:	f8d9 3000 	ldr.w	r3, [r9]
 80075b8:	fa1f fb87 	uxth.w	fp, r7
 80075bc:	b29b      	uxth	r3, r3
 80075be:	fb0a 330b 	mla	r3, sl, fp, r3
 80075c2:	4463      	add	r3, ip
 80075c4:	f8d9 c000 	ldr.w	ip, [r9]
 80075c8:	0c3f      	lsrs	r7, r7, #16
 80075ca:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80075ce:	fb0a c707 	mla	r7, sl, r7, ip
 80075d2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80075dc:	4572      	cmp	r2, lr
 80075de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80075e2:	f849 3b04 	str.w	r3, [r9], #4
 80075e6:	d8e3      	bhi.n	80075b0 <__multiply+0xb0>
 80075e8:	9b01      	ldr	r3, [sp, #4]
 80075ea:	f845 c003 	str.w	ip, [r5, r3]
 80075ee:	9b03      	ldr	r3, [sp, #12]
 80075f0:	3104      	adds	r1, #4
 80075f2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80075f6:	f1b9 0f00 	cmp.w	r9, #0
 80075fa:	d021      	beq.n	8007640 <__multiply+0x140>
 80075fc:	46ae      	mov	lr, r5
 80075fe:	f04f 0a00 	mov.w	sl, #0
 8007602:	682b      	ldr	r3, [r5, #0]
 8007604:	f104 0c14 	add.w	ip, r4, #20
 8007608:	f8bc b000 	ldrh.w	fp, [ip]
 800760c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007610:	b29b      	uxth	r3, r3
 8007612:	fb09 770b 	mla	r7, r9, fp, r7
 8007616:	4457      	add	r7, sl
 8007618:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800761c:	f84e 3b04 	str.w	r3, [lr], #4
 8007620:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007624:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007628:	f8be 3000 	ldrh.w	r3, [lr]
 800762c:	4562      	cmp	r2, ip
 800762e:	fb09 330a 	mla	r3, r9, sl, r3
 8007632:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007636:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800763a:	d8e5      	bhi.n	8007608 <__multiply+0x108>
 800763c:	9f01      	ldr	r7, [sp, #4]
 800763e:	51eb      	str	r3, [r5, r7]
 8007640:	3504      	adds	r5, #4
 8007642:	e79a      	b.n	800757a <__multiply+0x7a>
 8007644:	3e01      	subs	r6, #1
 8007646:	e79c      	b.n	8007582 <__multiply+0x82>
 8007648:	080086fb 	.word	0x080086fb
 800764c:	0800870c 	.word	0x0800870c

08007650 <__pow5mult>:
 8007650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007654:	4615      	mov	r5, r2
 8007656:	f012 0203 	ands.w	r2, r2, #3
 800765a:	4607      	mov	r7, r0
 800765c:	460e      	mov	r6, r1
 800765e:	d007      	beq.n	8007670 <__pow5mult+0x20>
 8007660:	4c25      	ldr	r4, [pc, #148]	@ (80076f8 <__pow5mult+0xa8>)
 8007662:	3a01      	subs	r2, #1
 8007664:	2300      	movs	r3, #0
 8007666:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800766a:	f7ff fea1 	bl	80073b0 <__multadd>
 800766e:	4606      	mov	r6, r0
 8007670:	10ad      	asrs	r5, r5, #2
 8007672:	d03d      	beq.n	80076f0 <__pow5mult+0xa0>
 8007674:	69fc      	ldr	r4, [r7, #28]
 8007676:	b97c      	cbnz	r4, 8007698 <__pow5mult+0x48>
 8007678:	2010      	movs	r0, #16
 800767a:	f7ff fd81 	bl	8007180 <malloc>
 800767e:	4602      	mov	r2, r0
 8007680:	61f8      	str	r0, [r7, #28]
 8007682:	b928      	cbnz	r0, 8007690 <__pow5mult+0x40>
 8007684:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007688:	4b1c      	ldr	r3, [pc, #112]	@ (80076fc <__pow5mult+0xac>)
 800768a:	481d      	ldr	r0, [pc, #116]	@ (8007700 <__pow5mult+0xb0>)
 800768c:	f000 fbbe 	bl	8007e0c <__assert_func>
 8007690:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007694:	6004      	str	r4, [r0, #0]
 8007696:	60c4      	str	r4, [r0, #12]
 8007698:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800769c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80076a0:	b94c      	cbnz	r4, 80076b6 <__pow5mult+0x66>
 80076a2:	f240 2171 	movw	r1, #625	@ 0x271
 80076a6:	4638      	mov	r0, r7
 80076a8:	f7ff ff14 	bl	80074d4 <__i2b>
 80076ac:	2300      	movs	r3, #0
 80076ae:	4604      	mov	r4, r0
 80076b0:	f8c8 0008 	str.w	r0, [r8, #8]
 80076b4:	6003      	str	r3, [r0, #0]
 80076b6:	f04f 0900 	mov.w	r9, #0
 80076ba:	07eb      	lsls	r3, r5, #31
 80076bc:	d50a      	bpl.n	80076d4 <__pow5mult+0x84>
 80076be:	4631      	mov	r1, r6
 80076c0:	4622      	mov	r2, r4
 80076c2:	4638      	mov	r0, r7
 80076c4:	f7ff ff1c 	bl	8007500 <__multiply>
 80076c8:	4680      	mov	r8, r0
 80076ca:	4631      	mov	r1, r6
 80076cc:	4638      	mov	r0, r7
 80076ce:	f7ff fe4d 	bl	800736c <_Bfree>
 80076d2:	4646      	mov	r6, r8
 80076d4:	106d      	asrs	r5, r5, #1
 80076d6:	d00b      	beq.n	80076f0 <__pow5mult+0xa0>
 80076d8:	6820      	ldr	r0, [r4, #0]
 80076da:	b938      	cbnz	r0, 80076ec <__pow5mult+0x9c>
 80076dc:	4622      	mov	r2, r4
 80076de:	4621      	mov	r1, r4
 80076e0:	4638      	mov	r0, r7
 80076e2:	f7ff ff0d 	bl	8007500 <__multiply>
 80076e6:	6020      	str	r0, [r4, #0]
 80076e8:	f8c0 9000 	str.w	r9, [r0]
 80076ec:	4604      	mov	r4, r0
 80076ee:	e7e4      	b.n	80076ba <__pow5mult+0x6a>
 80076f0:	4630      	mov	r0, r6
 80076f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076f6:	bf00      	nop
 80076f8:	08008768 	.word	0x08008768
 80076fc:	0800868c 	.word	0x0800868c
 8007700:	0800870c 	.word	0x0800870c

08007704 <__lshift>:
 8007704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007708:	460c      	mov	r4, r1
 800770a:	4607      	mov	r7, r0
 800770c:	4691      	mov	r9, r2
 800770e:	6923      	ldr	r3, [r4, #16]
 8007710:	6849      	ldr	r1, [r1, #4]
 8007712:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007716:	68a3      	ldr	r3, [r4, #8]
 8007718:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800771c:	f108 0601 	add.w	r6, r8, #1
 8007720:	42b3      	cmp	r3, r6
 8007722:	db0b      	blt.n	800773c <__lshift+0x38>
 8007724:	4638      	mov	r0, r7
 8007726:	f7ff fde1 	bl	80072ec <_Balloc>
 800772a:	4605      	mov	r5, r0
 800772c:	b948      	cbnz	r0, 8007742 <__lshift+0x3e>
 800772e:	4602      	mov	r2, r0
 8007730:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007734:	4b27      	ldr	r3, [pc, #156]	@ (80077d4 <__lshift+0xd0>)
 8007736:	4828      	ldr	r0, [pc, #160]	@ (80077d8 <__lshift+0xd4>)
 8007738:	f000 fb68 	bl	8007e0c <__assert_func>
 800773c:	3101      	adds	r1, #1
 800773e:	005b      	lsls	r3, r3, #1
 8007740:	e7ee      	b.n	8007720 <__lshift+0x1c>
 8007742:	2300      	movs	r3, #0
 8007744:	f100 0114 	add.w	r1, r0, #20
 8007748:	f100 0210 	add.w	r2, r0, #16
 800774c:	4618      	mov	r0, r3
 800774e:	4553      	cmp	r3, sl
 8007750:	db33      	blt.n	80077ba <__lshift+0xb6>
 8007752:	6920      	ldr	r0, [r4, #16]
 8007754:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007758:	f104 0314 	add.w	r3, r4, #20
 800775c:	f019 091f 	ands.w	r9, r9, #31
 8007760:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007764:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007768:	d02b      	beq.n	80077c2 <__lshift+0xbe>
 800776a:	468a      	mov	sl, r1
 800776c:	2200      	movs	r2, #0
 800776e:	f1c9 0e20 	rsb	lr, r9, #32
 8007772:	6818      	ldr	r0, [r3, #0]
 8007774:	fa00 f009 	lsl.w	r0, r0, r9
 8007778:	4310      	orrs	r0, r2
 800777a:	f84a 0b04 	str.w	r0, [sl], #4
 800777e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007782:	459c      	cmp	ip, r3
 8007784:	fa22 f20e 	lsr.w	r2, r2, lr
 8007788:	d8f3      	bhi.n	8007772 <__lshift+0x6e>
 800778a:	ebac 0304 	sub.w	r3, ip, r4
 800778e:	3b15      	subs	r3, #21
 8007790:	f023 0303 	bic.w	r3, r3, #3
 8007794:	3304      	adds	r3, #4
 8007796:	f104 0015 	add.w	r0, r4, #21
 800779a:	4584      	cmp	ip, r0
 800779c:	bf38      	it	cc
 800779e:	2304      	movcc	r3, #4
 80077a0:	50ca      	str	r2, [r1, r3]
 80077a2:	b10a      	cbz	r2, 80077a8 <__lshift+0xa4>
 80077a4:	f108 0602 	add.w	r6, r8, #2
 80077a8:	3e01      	subs	r6, #1
 80077aa:	4638      	mov	r0, r7
 80077ac:	4621      	mov	r1, r4
 80077ae:	612e      	str	r6, [r5, #16]
 80077b0:	f7ff fddc 	bl	800736c <_Bfree>
 80077b4:	4628      	mov	r0, r5
 80077b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80077be:	3301      	adds	r3, #1
 80077c0:	e7c5      	b.n	800774e <__lshift+0x4a>
 80077c2:	3904      	subs	r1, #4
 80077c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80077c8:	459c      	cmp	ip, r3
 80077ca:	f841 2f04 	str.w	r2, [r1, #4]!
 80077ce:	d8f9      	bhi.n	80077c4 <__lshift+0xc0>
 80077d0:	e7ea      	b.n	80077a8 <__lshift+0xa4>
 80077d2:	bf00      	nop
 80077d4:	080086fb 	.word	0x080086fb
 80077d8:	0800870c 	.word	0x0800870c

080077dc <__mcmp>:
 80077dc:	4603      	mov	r3, r0
 80077de:	690a      	ldr	r2, [r1, #16]
 80077e0:	6900      	ldr	r0, [r0, #16]
 80077e2:	b530      	push	{r4, r5, lr}
 80077e4:	1a80      	subs	r0, r0, r2
 80077e6:	d10e      	bne.n	8007806 <__mcmp+0x2a>
 80077e8:	3314      	adds	r3, #20
 80077ea:	3114      	adds	r1, #20
 80077ec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80077f0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80077f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80077f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80077fc:	4295      	cmp	r5, r2
 80077fe:	d003      	beq.n	8007808 <__mcmp+0x2c>
 8007800:	d205      	bcs.n	800780e <__mcmp+0x32>
 8007802:	f04f 30ff 	mov.w	r0, #4294967295
 8007806:	bd30      	pop	{r4, r5, pc}
 8007808:	42a3      	cmp	r3, r4
 800780a:	d3f3      	bcc.n	80077f4 <__mcmp+0x18>
 800780c:	e7fb      	b.n	8007806 <__mcmp+0x2a>
 800780e:	2001      	movs	r0, #1
 8007810:	e7f9      	b.n	8007806 <__mcmp+0x2a>
	...

08007814 <__mdiff>:
 8007814:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007818:	4689      	mov	r9, r1
 800781a:	4606      	mov	r6, r0
 800781c:	4611      	mov	r1, r2
 800781e:	4648      	mov	r0, r9
 8007820:	4614      	mov	r4, r2
 8007822:	f7ff ffdb 	bl	80077dc <__mcmp>
 8007826:	1e05      	subs	r5, r0, #0
 8007828:	d112      	bne.n	8007850 <__mdiff+0x3c>
 800782a:	4629      	mov	r1, r5
 800782c:	4630      	mov	r0, r6
 800782e:	f7ff fd5d 	bl	80072ec <_Balloc>
 8007832:	4602      	mov	r2, r0
 8007834:	b928      	cbnz	r0, 8007842 <__mdiff+0x2e>
 8007836:	f240 2137 	movw	r1, #567	@ 0x237
 800783a:	4b3e      	ldr	r3, [pc, #248]	@ (8007934 <__mdiff+0x120>)
 800783c:	483e      	ldr	r0, [pc, #248]	@ (8007938 <__mdiff+0x124>)
 800783e:	f000 fae5 	bl	8007e0c <__assert_func>
 8007842:	2301      	movs	r3, #1
 8007844:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007848:	4610      	mov	r0, r2
 800784a:	b003      	add	sp, #12
 800784c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007850:	bfbc      	itt	lt
 8007852:	464b      	movlt	r3, r9
 8007854:	46a1      	movlt	r9, r4
 8007856:	4630      	mov	r0, r6
 8007858:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800785c:	bfba      	itte	lt
 800785e:	461c      	movlt	r4, r3
 8007860:	2501      	movlt	r5, #1
 8007862:	2500      	movge	r5, #0
 8007864:	f7ff fd42 	bl	80072ec <_Balloc>
 8007868:	4602      	mov	r2, r0
 800786a:	b918      	cbnz	r0, 8007874 <__mdiff+0x60>
 800786c:	f240 2145 	movw	r1, #581	@ 0x245
 8007870:	4b30      	ldr	r3, [pc, #192]	@ (8007934 <__mdiff+0x120>)
 8007872:	e7e3      	b.n	800783c <__mdiff+0x28>
 8007874:	f100 0b14 	add.w	fp, r0, #20
 8007878:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800787c:	f109 0310 	add.w	r3, r9, #16
 8007880:	60c5      	str	r5, [r0, #12]
 8007882:	f04f 0c00 	mov.w	ip, #0
 8007886:	f109 0514 	add.w	r5, r9, #20
 800788a:	46d9      	mov	r9, fp
 800788c:	6926      	ldr	r6, [r4, #16]
 800788e:	f104 0e14 	add.w	lr, r4, #20
 8007892:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007896:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800789a:	9301      	str	r3, [sp, #4]
 800789c:	9b01      	ldr	r3, [sp, #4]
 800789e:	f85e 0b04 	ldr.w	r0, [lr], #4
 80078a2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80078a6:	b281      	uxth	r1, r0
 80078a8:	9301      	str	r3, [sp, #4]
 80078aa:	fa1f f38a 	uxth.w	r3, sl
 80078ae:	1a5b      	subs	r3, r3, r1
 80078b0:	0c00      	lsrs	r0, r0, #16
 80078b2:	4463      	add	r3, ip
 80078b4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80078b8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80078bc:	b29b      	uxth	r3, r3
 80078be:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80078c2:	4576      	cmp	r6, lr
 80078c4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80078c8:	f849 3b04 	str.w	r3, [r9], #4
 80078cc:	d8e6      	bhi.n	800789c <__mdiff+0x88>
 80078ce:	1b33      	subs	r3, r6, r4
 80078d0:	3b15      	subs	r3, #21
 80078d2:	f023 0303 	bic.w	r3, r3, #3
 80078d6:	3415      	adds	r4, #21
 80078d8:	3304      	adds	r3, #4
 80078da:	42a6      	cmp	r6, r4
 80078dc:	bf38      	it	cc
 80078de:	2304      	movcc	r3, #4
 80078e0:	441d      	add	r5, r3
 80078e2:	445b      	add	r3, fp
 80078e4:	461e      	mov	r6, r3
 80078e6:	462c      	mov	r4, r5
 80078e8:	4544      	cmp	r4, r8
 80078ea:	d30e      	bcc.n	800790a <__mdiff+0xf6>
 80078ec:	f108 0103 	add.w	r1, r8, #3
 80078f0:	1b49      	subs	r1, r1, r5
 80078f2:	f021 0103 	bic.w	r1, r1, #3
 80078f6:	3d03      	subs	r5, #3
 80078f8:	45a8      	cmp	r8, r5
 80078fa:	bf38      	it	cc
 80078fc:	2100      	movcc	r1, #0
 80078fe:	440b      	add	r3, r1
 8007900:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007904:	b199      	cbz	r1, 800792e <__mdiff+0x11a>
 8007906:	6117      	str	r7, [r2, #16]
 8007908:	e79e      	b.n	8007848 <__mdiff+0x34>
 800790a:	46e6      	mov	lr, ip
 800790c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007910:	fa1f fc81 	uxth.w	ip, r1
 8007914:	44f4      	add	ip, lr
 8007916:	0c08      	lsrs	r0, r1, #16
 8007918:	4471      	add	r1, lr
 800791a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800791e:	b289      	uxth	r1, r1
 8007920:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007924:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007928:	f846 1b04 	str.w	r1, [r6], #4
 800792c:	e7dc      	b.n	80078e8 <__mdiff+0xd4>
 800792e:	3f01      	subs	r7, #1
 8007930:	e7e6      	b.n	8007900 <__mdiff+0xec>
 8007932:	bf00      	nop
 8007934:	080086fb 	.word	0x080086fb
 8007938:	0800870c 	.word	0x0800870c

0800793c <__d2b>:
 800793c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007940:	2101      	movs	r1, #1
 8007942:	4690      	mov	r8, r2
 8007944:	4699      	mov	r9, r3
 8007946:	9e08      	ldr	r6, [sp, #32]
 8007948:	f7ff fcd0 	bl	80072ec <_Balloc>
 800794c:	4604      	mov	r4, r0
 800794e:	b930      	cbnz	r0, 800795e <__d2b+0x22>
 8007950:	4602      	mov	r2, r0
 8007952:	f240 310f 	movw	r1, #783	@ 0x30f
 8007956:	4b23      	ldr	r3, [pc, #140]	@ (80079e4 <__d2b+0xa8>)
 8007958:	4823      	ldr	r0, [pc, #140]	@ (80079e8 <__d2b+0xac>)
 800795a:	f000 fa57 	bl	8007e0c <__assert_func>
 800795e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007962:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007966:	b10d      	cbz	r5, 800796c <__d2b+0x30>
 8007968:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800796c:	9301      	str	r3, [sp, #4]
 800796e:	f1b8 0300 	subs.w	r3, r8, #0
 8007972:	d024      	beq.n	80079be <__d2b+0x82>
 8007974:	4668      	mov	r0, sp
 8007976:	9300      	str	r3, [sp, #0]
 8007978:	f7ff fd7f 	bl	800747a <__lo0bits>
 800797c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007980:	b1d8      	cbz	r0, 80079ba <__d2b+0x7e>
 8007982:	f1c0 0320 	rsb	r3, r0, #32
 8007986:	fa02 f303 	lsl.w	r3, r2, r3
 800798a:	430b      	orrs	r3, r1
 800798c:	40c2      	lsrs	r2, r0
 800798e:	6163      	str	r3, [r4, #20]
 8007990:	9201      	str	r2, [sp, #4]
 8007992:	9b01      	ldr	r3, [sp, #4]
 8007994:	2b00      	cmp	r3, #0
 8007996:	bf0c      	ite	eq
 8007998:	2201      	moveq	r2, #1
 800799a:	2202      	movne	r2, #2
 800799c:	61a3      	str	r3, [r4, #24]
 800799e:	6122      	str	r2, [r4, #16]
 80079a0:	b1ad      	cbz	r5, 80079ce <__d2b+0x92>
 80079a2:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80079a6:	4405      	add	r5, r0
 80079a8:	6035      	str	r5, [r6, #0]
 80079aa:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80079ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079b0:	6018      	str	r0, [r3, #0]
 80079b2:	4620      	mov	r0, r4
 80079b4:	b002      	add	sp, #8
 80079b6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80079ba:	6161      	str	r1, [r4, #20]
 80079bc:	e7e9      	b.n	8007992 <__d2b+0x56>
 80079be:	a801      	add	r0, sp, #4
 80079c0:	f7ff fd5b 	bl	800747a <__lo0bits>
 80079c4:	9b01      	ldr	r3, [sp, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	6163      	str	r3, [r4, #20]
 80079ca:	3020      	adds	r0, #32
 80079cc:	e7e7      	b.n	800799e <__d2b+0x62>
 80079ce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80079d2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80079d6:	6030      	str	r0, [r6, #0]
 80079d8:	6918      	ldr	r0, [r3, #16]
 80079da:	f7ff fd2f 	bl	800743c <__hi0bits>
 80079de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80079e2:	e7e4      	b.n	80079ae <__d2b+0x72>
 80079e4:	080086fb 	.word	0x080086fb
 80079e8:	0800870c 	.word	0x0800870c

080079ec <__ssputs_r>:
 80079ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079f0:	461f      	mov	r7, r3
 80079f2:	688e      	ldr	r6, [r1, #8]
 80079f4:	4682      	mov	sl, r0
 80079f6:	42be      	cmp	r6, r7
 80079f8:	460c      	mov	r4, r1
 80079fa:	4690      	mov	r8, r2
 80079fc:	680b      	ldr	r3, [r1, #0]
 80079fe:	d82d      	bhi.n	8007a5c <__ssputs_r+0x70>
 8007a00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a04:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007a08:	d026      	beq.n	8007a58 <__ssputs_r+0x6c>
 8007a0a:	6965      	ldr	r5, [r4, #20]
 8007a0c:	6909      	ldr	r1, [r1, #16]
 8007a0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a12:	eba3 0901 	sub.w	r9, r3, r1
 8007a16:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a1a:	1c7b      	adds	r3, r7, #1
 8007a1c:	444b      	add	r3, r9
 8007a1e:	106d      	asrs	r5, r5, #1
 8007a20:	429d      	cmp	r5, r3
 8007a22:	bf38      	it	cc
 8007a24:	461d      	movcc	r5, r3
 8007a26:	0553      	lsls	r3, r2, #21
 8007a28:	d527      	bpl.n	8007a7a <__ssputs_r+0x8e>
 8007a2a:	4629      	mov	r1, r5
 8007a2c:	f7ff fbd2 	bl	80071d4 <_malloc_r>
 8007a30:	4606      	mov	r6, r0
 8007a32:	b360      	cbz	r0, 8007a8e <__ssputs_r+0xa2>
 8007a34:	464a      	mov	r2, r9
 8007a36:	6921      	ldr	r1, [r4, #16]
 8007a38:	f7fe fcf9 	bl	800642e <memcpy>
 8007a3c:	89a3      	ldrh	r3, [r4, #12]
 8007a3e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007a42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a46:	81a3      	strh	r3, [r4, #12]
 8007a48:	6126      	str	r6, [r4, #16]
 8007a4a:	444e      	add	r6, r9
 8007a4c:	6026      	str	r6, [r4, #0]
 8007a4e:	463e      	mov	r6, r7
 8007a50:	6165      	str	r5, [r4, #20]
 8007a52:	eba5 0509 	sub.w	r5, r5, r9
 8007a56:	60a5      	str	r5, [r4, #8]
 8007a58:	42be      	cmp	r6, r7
 8007a5a:	d900      	bls.n	8007a5e <__ssputs_r+0x72>
 8007a5c:	463e      	mov	r6, r7
 8007a5e:	4632      	mov	r2, r6
 8007a60:	4641      	mov	r1, r8
 8007a62:	6820      	ldr	r0, [r4, #0]
 8007a64:	f7fe fc29 	bl	80062ba <memmove>
 8007a68:	2000      	movs	r0, #0
 8007a6a:	68a3      	ldr	r3, [r4, #8]
 8007a6c:	1b9b      	subs	r3, r3, r6
 8007a6e:	60a3      	str	r3, [r4, #8]
 8007a70:	6823      	ldr	r3, [r4, #0]
 8007a72:	4433      	add	r3, r6
 8007a74:	6023      	str	r3, [r4, #0]
 8007a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a7a:	462a      	mov	r2, r5
 8007a7c:	f000 fa0a 	bl	8007e94 <_realloc_r>
 8007a80:	4606      	mov	r6, r0
 8007a82:	2800      	cmp	r0, #0
 8007a84:	d1e0      	bne.n	8007a48 <__ssputs_r+0x5c>
 8007a86:	4650      	mov	r0, sl
 8007a88:	6921      	ldr	r1, [r4, #16]
 8007a8a:	f7ff fb31 	bl	80070f0 <_free_r>
 8007a8e:	230c      	movs	r3, #12
 8007a90:	f8ca 3000 	str.w	r3, [sl]
 8007a94:	89a3      	ldrh	r3, [r4, #12]
 8007a96:	f04f 30ff 	mov.w	r0, #4294967295
 8007a9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a9e:	81a3      	strh	r3, [r4, #12]
 8007aa0:	e7e9      	b.n	8007a76 <__ssputs_r+0x8a>
	...

08007aa4 <_svfiprintf_r>:
 8007aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aa8:	4698      	mov	r8, r3
 8007aaa:	898b      	ldrh	r3, [r1, #12]
 8007aac:	4607      	mov	r7, r0
 8007aae:	061b      	lsls	r3, r3, #24
 8007ab0:	460d      	mov	r5, r1
 8007ab2:	4614      	mov	r4, r2
 8007ab4:	b09d      	sub	sp, #116	@ 0x74
 8007ab6:	d510      	bpl.n	8007ada <_svfiprintf_r+0x36>
 8007ab8:	690b      	ldr	r3, [r1, #16]
 8007aba:	b973      	cbnz	r3, 8007ada <_svfiprintf_r+0x36>
 8007abc:	2140      	movs	r1, #64	@ 0x40
 8007abe:	f7ff fb89 	bl	80071d4 <_malloc_r>
 8007ac2:	6028      	str	r0, [r5, #0]
 8007ac4:	6128      	str	r0, [r5, #16]
 8007ac6:	b930      	cbnz	r0, 8007ad6 <_svfiprintf_r+0x32>
 8007ac8:	230c      	movs	r3, #12
 8007aca:	603b      	str	r3, [r7, #0]
 8007acc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad0:	b01d      	add	sp, #116	@ 0x74
 8007ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ad6:	2340      	movs	r3, #64	@ 0x40
 8007ad8:	616b      	str	r3, [r5, #20]
 8007ada:	2300      	movs	r3, #0
 8007adc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ade:	2320      	movs	r3, #32
 8007ae0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007ae4:	2330      	movs	r3, #48	@ 0x30
 8007ae6:	f04f 0901 	mov.w	r9, #1
 8007aea:	f8cd 800c 	str.w	r8, [sp, #12]
 8007aee:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007c88 <_svfiprintf_r+0x1e4>
 8007af2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007af6:	4623      	mov	r3, r4
 8007af8:	469a      	mov	sl, r3
 8007afa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007afe:	b10a      	cbz	r2, 8007b04 <_svfiprintf_r+0x60>
 8007b00:	2a25      	cmp	r2, #37	@ 0x25
 8007b02:	d1f9      	bne.n	8007af8 <_svfiprintf_r+0x54>
 8007b04:	ebba 0b04 	subs.w	fp, sl, r4
 8007b08:	d00b      	beq.n	8007b22 <_svfiprintf_r+0x7e>
 8007b0a:	465b      	mov	r3, fp
 8007b0c:	4622      	mov	r2, r4
 8007b0e:	4629      	mov	r1, r5
 8007b10:	4638      	mov	r0, r7
 8007b12:	f7ff ff6b 	bl	80079ec <__ssputs_r>
 8007b16:	3001      	adds	r0, #1
 8007b18:	f000 80a7 	beq.w	8007c6a <_svfiprintf_r+0x1c6>
 8007b1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b1e:	445a      	add	r2, fp
 8007b20:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b22:	f89a 3000 	ldrb.w	r3, [sl]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	f000 809f 	beq.w	8007c6a <_svfiprintf_r+0x1c6>
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b36:	f10a 0a01 	add.w	sl, sl, #1
 8007b3a:	9304      	str	r3, [sp, #16]
 8007b3c:	9307      	str	r3, [sp, #28]
 8007b3e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007b42:	931a      	str	r3, [sp, #104]	@ 0x68
 8007b44:	4654      	mov	r4, sl
 8007b46:	2205      	movs	r2, #5
 8007b48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b4c:	484e      	ldr	r0, [pc, #312]	@ (8007c88 <_svfiprintf_r+0x1e4>)
 8007b4e:	f7fe fc60 	bl	8006412 <memchr>
 8007b52:	9a04      	ldr	r2, [sp, #16]
 8007b54:	b9d8      	cbnz	r0, 8007b8e <_svfiprintf_r+0xea>
 8007b56:	06d0      	lsls	r0, r2, #27
 8007b58:	bf44      	itt	mi
 8007b5a:	2320      	movmi	r3, #32
 8007b5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b60:	0711      	lsls	r1, r2, #28
 8007b62:	bf44      	itt	mi
 8007b64:	232b      	movmi	r3, #43	@ 0x2b
 8007b66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b6a:	f89a 3000 	ldrb.w	r3, [sl]
 8007b6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b70:	d015      	beq.n	8007b9e <_svfiprintf_r+0xfa>
 8007b72:	4654      	mov	r4, sl
 8007b74:	2000      	movs	r0, #0
 8007b76:	f04f 0c0a 	mov.w	ip, #10
 8007b7a:	9a07      	ldr	r2, [sp, #28]
 8007b7c:	4621      	mov	r1, r4
 8007b7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b82:	3b30      	subs	r3, #48	@ 0x30
 8007b84:	2b09      	cmp	r3, #9
 8007b86:	d94b      	bls.n	8007c20 <_svfiprintf_r+0x17c>
 8007b88:	b1b0      	cbz	r0, 8007bb8 <_svfiprintf_r+0x114>
 8007b8a:	9207      	str	r2, [sp, #28]
 8007b8c:	e014      	b.n	8007bb8 <_svfiprintf_r+0x114>
 8007b8e:	eba0 0308 	sub.w	r3, r0, r8
 8007b92:	fa09 f303 	lsl.w	r3, r9, r3
 8007b96:	4313      	orrs	r3, r2
 8007b98:	46a2      	mov	sl, r4
 8007b9a:	9304      	str	r3, [sp, #16]
 8007b9c:	e7d2      	b.n	8007b44 <_svfiprintf_r+0xa0>
 8007b9e:	9b03      	ldr	r3, [sp, #12]
 8007ba0:	1d19      	adds	r1, r3, #4
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	9103      	str	r1, [sp, #12]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	bfbb      	ittet	lt
 8007baa:	425b      	neglt	r3, r3
 8007bac:	f042 0202 	orrlt.w	r2, r2, #2
 8007bb0:	9307      	strge	r3, [sp, #28]
 8007bb2:	9307      	strlt	r3, [sp, #28]
 8007bb4:	bfb8      	it	lt
 8007bb6:	9204      	strlt	r2, [sp, #16]
 8007bb8:	7823      	ldrb	r3, [r4, #0]
 8007bba:	2b2e      	cmp	r3, #46	@ 0x2e
 8007bbc:	d10a      	bne.n	8007bd4 <_svfiprintf_r+0x130>
 8007bbe:	7863      	ldrb	r3, [r4, #1]
 8007bc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007bc2:	d132      	bne.n	8007c2a <_svfiprintf_r+0x186>
 8007bc4:	9b03      	ldr	r3, [sp, #12]
 8007bc6:	3402      	adds	r4, #2
 8007bc8:	1d1a      	adds	r2, r3, #4
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	9203      	str	r2, [sp, #12]
 8007bce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007bd2:	9305      	str	r3, [sp, #20]
 8007bd4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007c8c <_svfiprintf_r+0x1e8>
 8007bd8:	2203      	movs	r2, #3
 8007bda:	4650      	mov	r0, sl
 8007bdc:	7821      	ldrb	r1, [r4, #0]
 8007bde:	f7fe fc18 	bl	8006412 <memchr>
 8007be2:	b138      	cbz	r0, 8007bf4 <_svfiprintf_r+0x150>
 8007be4:	2240      	movs	r2, #64	@ 0x40
 8007be6:	9b04      	ldr	r3, [sp, #16]
 8007be8:	eba0 000a 	sub.w	r0, r0, sl
 8007bec:	4082      	lsls	r2, r0
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	3401      	adds	r4, #1
 8007bf2:	9304      	str	r3, [sp, #16]
 8007bf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bf8:	2206      	movs	r2, #6
 8007bfa:	4825      	ldr	r0, [pc, #148]	@ (8007c90 <_svfiprintf_r+0x1ec>)
 8007bfc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007c00:	f7fe fc07 	bl	8006412 <memchr>
 8007c04:	2800      	cmp	r0, #0
 8007c06:	d036      	beq.n	8007c76 <_svfiprintf_r+0x1d2>
 8007c08:	4b22      	ldr	r3, [pc, #136]	@ (8007c94 <_svfiprintf_r+0x1f0>)
 8007c0a:	bb1b      	cbnz	r3, 8007c54 <_svfiprintf_r+0x1b0>
 8007c0c:	9b03      	ldr	r3, [sp, #12]
 8007c0e:	3307      	adds	r3, #7
 8007c10:	f023 0307 	bic.w	r3, r3, #7
 8007c14:	3308      	adds	r3, #8
 8007c16:	9303      	str	r3, [sp, #12]
 8007c18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c1a:	4433      	add	r3, r6
 8007c1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c1e:	e76a      	b.n	8007af6 <_svfiprintf_r+0x52>
 8007c20:	460c      	mov	r4, r1
 8007c22:	2001      	movs	r0, #1
 8007c24:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c28:	e7a8      	b.n	8007b7c <_svfiprintf_r+0xd8>
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	f04f 0c0a 	mov.w	ip, #10
 8007c30:	4619      	mov	r1, r3
 8007c32:	3401      	adds	r4, #1
 8007c34:	9305      	str	r3, [sp, #20]
 8007c36:	4620      	mov	r0, r4
 8007c38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c3c:	3a30      	subs	r2, #48	@ 0x30
 8007c3e:	2a09      	cmp	r2, #9
 8007c40:	d903      	bls.n	8007c4a <_svfiprintf_r+0x1a6>
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d0c6      	beq.n	8007bd4 <_svfiprintf_r+0x130>
 8007c46:	9105      	str	r1, [sp, #20]
 8007c48:	e7c4      	b.n	8007bd4 <_svfiprintf_r+0x130>
 8007c4a:	4604      	mov	r4, r0
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c52:	e7f0      	b.n	8007c36 <_svfiprintf_r+0x192>
 8007c54:	ab03      	add	r3, sp, #12
 8007c56:	9300      	str	r3, [sp, #0]
 8007c58:	462a      	mov	r2, r5
 8007c5a:	4638      	mov	r0, r7
 8007c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8007c98 <_svfiprintf_r+0x1f4>)
 8007c5e:	a904      	add	r1, sp, #16
 8007c60:	f7fd fe48 	bl	80058f4 <_printf_float>
 8007c64:	1c42      	adds	r2, r0, #1
 8007c66:	4606      	mov	r6, r0
 8007c68:	d1d6      	bne.n	8007c18 <_svfiprintf_r+0x174>
 8007c6a:	89ab      	ldrh	r3, [r5, #12]
 8007c6c:	065b      	lsls	r3, r3, #25
 8007c6e:	f53f af2d 	bmi.w	8007acc <_svfiprintf_r+0x28>
 8007c72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c74:	e72c      	b.n	8007ad0 <_svfiprintf_r+0x2c>
 8007c76:	ab03      	add	r3, sp, #12
 8007c78:	9300      	str	r3, [sp, #0]
 8007c7a:	462a      	mov	r2, r5
 8007c7c:	4638      	mov	r0, r7
 8007c7e:	4b06      	ldr	r3, [pc, #24]	@ (8007c98 <_svfiprintf_r+0x1f4>)
 8007c80:	a904      	add	r1, sp, #16
 8007c82:	f7fe f8d5 	bl	8005e30 <_printf_i>
 8007c86:	e7ed      	b.n	8007c64 <_svfiprintf_r+0x1c0>
 8007c88:	08008868 	.word	0x08008868
 8007c8c:	0800886e 	.word	0x0800886e
 8007c90:	08008872 	.word	0x08008872
 8007c94:	080058f5 	.word	0x080058f5
 8007c98:	080079ed 	.word	0x080079ed

08007c9c <__sflush_r>:
 8007c9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ca2:	0716      	lsls	r6, r2, #28
 8007ca4:	4605      	mov	r5, r0
 8007ca6:	460c      	mov	r4, r1
 8007ca8:	d454      	bmi.n	8007d54 <__sflush_r+0xb8>
 8007caa:	684b      	ldr	r3, [r1, #4]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	dc02      	bgt.n	8007cb6 <__sflush_r+0x1a>
 8007cb0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	dd48      	ble.n	8007d48 <__sflush_r+0xac>
 8007cb6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007cb8:	2e00      	cmp	r6, #0
 8007cba:	d045      	beq.n	8007d48 <__sflush_r+0xac>
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007cc2:	682f      	ldr	r7, [r5, #0]
 8007cc4:	6a21      	ldr	r1, [r4, #32]
 8007cc6:	602b      	str	r3, [r5, #0]
 8007cc8:	d030      	beq.n	8007d2c <__sflush_r+0x90>
 8007cca:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007ccc:	89a3      	ldrh	r3, [r4, #12]
 8007cce:	0759      	lsls	r1, r3, #29
 8007cd0:	d505      	bpl.n	8007cde <__sflush_r+0x42>
 8007cd2:	6863      	ldr	r3, [r4, #4]
 8007cd4:	1ad2      	subs	r2, r2, r3
 8007cd6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007cd8:	b10b      	cbz	r3, 8007cde <__sflush_r+0x42>
 8007cda:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007cdc:	1ad2      	subs	r2, r2, r3
 8007cde:	2300      	movs	r3, #0
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ce4:	6a21      	ldr	r1, [r4, #32]
 8007ce6:	47b0      	blx	r6
 8007ce8:	1c43      	adds	r3, r0, #1
 8007cea:	89a3      	ldrh	r3, [r4, #12]
 8007cec:	d106      	bne.n	8007cfc <__sflush_r+0x60>
 8007cee:	6829      	ldr	r1, [r5, #0]
 8007cf0:	291d      	cmp	r1, #29
 8007cf2:	d82b      	bhi.n	8007d4c <__sflush_r+0xb0>
 8007cf4:	4a28      	ldr	r2, [pc, #160]	@ (8007d98 <__sflush_r+0xfc>)
 8007cf6:	410a      	asrs	r2, r1
 8007cf8:	07d6      	lsls	r6, r2, #31
 8007cfa:	d427      	bmi.n	8007d4c <__sflush_r+0xb0>
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	6062      	str	r2, [r4, #4]
 8007d00:	6922      	ldr	r2, [r4, #16]
 8007d02:	04d9      	lsls	r1, r3, #19
 8007d04:	6022      	str	r2, [r4, #0]
 8007d06:	d504      	bpl.n	8007d12 <__sflush_r+0x76>
 8007d08:	1c42      	adds	r2, r0, #1
 8007d0a:	d101      	bne.n	8007d10 <__sflush_r+0x74>
 8007d0c:	682b      	ldr	r3, [r5, #0]
 8007d0e:	b903      	cbnz	r3, 8007d12 <__sflush_r+0x76>
 8007d10:	6560      	str	r0, [r4, #84]	@ 0x54
 8007d12:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007d14:	602f      	str	r7, [r5, #0]
 8007d16:	b1b9      	cbz	r1, 8007d48 <__sflush_r+0xac>
 8007d18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007d1c:	4299      	cmp	r1, r3
 8007d1e:	d002      	beq.n	8007d26 <__sflush_r+0x8a>
 8007d20:	4628      	mov	r0, r5
 8007d22:	f7ff f9e5 	bl	80070f0 <_free_r>
 8007d26:	2300      	movs	r3, #0
 8007d28:	6363      	str	r3, [r4, #52]	@ 0x34
 8007d2a:	e00d      	b.n	8007d48 <__sflush_r+0xac>
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	4628      	mov	r0, r5
 8007d30:	47b0      	blx	r6
 8007d32:	4602      	mov	r2, r0
 8007d34:	1c50      	adds	r0, r2, #1
 8007d36:	d1c9      	bne.n	8007ccc <__sflush_r+0x30>
 8007d38:	682b      	ldr	r3, [r5, #0]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d0c6      	beq.n	8007ccc <__sflush_r+0x30>
 8007d3e:	2b1d      	cmp	r3, #29
 8007d40:	d001      	beq.n	8007d46 <__sflush_r+0xaa>
 8007d42:	2b16      	cmp	r3, #22
 8007d44:	d11d      	bne.n	8007d82 <__sflush_r+0xe6>
 8007d46:	602f      	str	r7, [r5, #0]
 8007d48:	2000      	movs	r0, #0
 8007d4a:	e021      	b.n	8007d90 <__sflush_r+0xf4>
 8007d4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d50:	b21b      	sxth	r3, r3
 8007d52:	e01a      	b.n	8007d8a <__sflush_r+0xee>
 8007d54:	690f      	ldr	r7, [r1, #16]
 8007d56:	2f00      	cmp	r7, #0
 8007d58:	d0f6      	beq.n	8007d48 <__sflush_r+0xac>
 8007d5a:	0793      	lsls	r3, r2, #30
 8007d5c:	bf18      	it	ne
 8007d5e:	2300      	movne	r3, #0
 8007d60:	680e      	ldr	r6, [r1, #0]
 8007d62:	bf08      	it	eq
 8007d64:	694b      	ldreq	r3, [r1, #20]
 8007d66:	1bf6      	subs	r6, r6, r7
 8007d68:	600f      	str	r7, [r1, #0]
 8007d6a:	608b      	str	r3, [r1, #8]
 8007d6c:	2e00      	cmp	r6, #0
 8007d6e:	ddeb      	ble.n	8007d48 <__sflush_r+0xac>
 8007d70:	4633      	mov	r3, r6
 8007d72:	463a      	mov	r2, r7
 8007d74:	4628      	mov	r0, r5
 8007d76:	6a21      	ldr	r1, [r4, #32]
 8007d78:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007d7c:	47e0      	blx	ip
 8007d7e:	2800      	cmp	r0, #0
 8007d80:	dc07      	bgt.n	8007d92 <__sflush_r+0xf6>
 8007d82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d8e:	81a3      	strh	r3, [r4, #12]
 8007d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d92:	4407      	add	r7, r0
 8007d94:	1a36      	subs	r6, r6, r0
 8007d96:	e7e9      	b.n	8007d6c <__sflush_r+0xd0>
 8007d98:	dfbffffe 	.word	0xdfbffffe

08007d9c <_fflush_r>:
 8007d9c:	b538      	push	{r3, r4, r5, lr}
 8007d9e:	690b      	ldr	r3, [r1, #16]
 8007da0:	4605      	mov	r5, r0
 8007da2:	460c      	mov	r4, r1
 8007da4:	b913      	cbnz	r3, 8007dac <_fflush_r+0x10>
 8007da6:	2500      	movs	r5, #0
 8007da8:	4628      	mov	r0, r5
 8007daa:	bd38      	pop	{r3, r4, r5, pc}
 8007dac:	b118      	cbz	r0, 8007db6 <_fflush_r+0x1a>
 8007dae:	6a03      	ldr	r3, [r0, #32]
 8007db0:	b90b      	cbnz	r3, 8007db6 <_fflush_r+0x1a>
 8007db2:	f7fe f9e9 	bl	8006188 <__sinit>
 8007db6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d0f3      	beq.n	8007da6 <_fflush_r+0xa>
 8007dbe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007dc0:	07d0      	lsls	r0, r2, #31
 8007dc2:	d404      	bmi.n	8007dce <_fflush_r+0x32>
 8007dc4:	0599      	lsls	r1, r3, #22
 8007dc6:	d402      	bmi.n	8007dce <_fflush_r+0x32>
 8007dc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007dca:	f7fe fb20 	bl	800640e <__retarget_lock_acquire_recursive>
 8007dce:	4628      	mov	r0, r5
 8007dd0:	4621      	mov	r1, r4
 8007dd2:	f7ff ff63 	bl	8007c9c <__sflush_r>
 8007dd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007dd8:	4605      	mov	r5, r0
 8007dda:	07da      	lsls	r2, r3, #31
 8007ddc:	d4e4      	bmi.n	8007da8 <_fflush_r+0xc>
 8007dde:	89a3      	ldrh	r3, [r4, #12]
 8007de0:	059b      	lsls	r3, r3, #22
 8007de2:	d4e1      	bmi.n	8007da8 <_fflush_r+0xc>
 8007de4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007de6:	f7fe fb13 	bl	8006410 <__retarget_lock_release_recursive>
 8007dea:	e7dd      	b.n	8007da8 <_fflush_r+0xc>

08007dec <_sbrk_r>:
 8007dec:	b538      	push	{r3, r4, r5, lr}
 8007dee:	2300      	movs	r3, #0
 8007df0:	4d05      	ldr	r5, [pc, #20]	@ (8007e08 <_sbrk_r+0x1c>)
 8007df2:	4604      	mov	r4, r0
 8007df4:	4608      	mov	r0, r1
 8007df6:	602b      	str	r3, [r5, #0]
 8007df8:	f7fa fcaa 	bl	8002750 <_sbrk>
 8007dfc:	1c43      	adds	r3, r0, #1
 8007dfe:	d102      	bne.n	8007e06 <_sbrk_r+0x1a>
 8007e00:	682b      	ldr	r3, [r5, #0]
 8007e02:	b103      	cbz	r3, 8007e06 <_sbrk_r+0x1a>
 8007e04:	6023      	str	r3, [r4, #0]
 8007e06:	bd38      	pop	{r3, r4, r5, pc}
 8007e08:	20000548 	.word	0x20000548

08007e0c <__assert_func>:
 8007e0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e0e:	4614      	mov	r4, r2
 8007e10:	461a      	mov	r2, r3
 8007e12:	4b09      	ldr	r3, [pc, #36]	@ (8007e38 <__assert_func+0x2c>)
 8007e14:	4605      	mov	r5, r0
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	68d8      	ldr	r0, [r3, #12]
 8007e1a:	b954      	cbnz	r4, 8007e32 <__assert_func+0x26>
 8007e1c:	4b07      	ldr	r3, [pc, #28]	@ (8007e3c <__assert_func+0x30>)
 8007e1e:	461c      	mov	r4, r3
 8007e20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e24:	9100      	str	r1, [sp, #0]
 8007e26:	462b      	mov	r3, r5
 8007e28:	4905      	ldr	r1, [pc, #20]	@ (8007e40 <__assert_func+0x34>)
 8007e2a:	f000 f86f 	bl	8007f0c <fiprintf>
 8007e2e:	f000 f87f 	bl	8007f30 <abort>
 8007e32:	4b04      	ldr	r3, [pc, #16]	@ (8007e44 <__assert_func+0x38>)
 8007e34:	e7f4      	b.n	8007e20 <__assert_func+0x14>
 8007e36:	bf00      	nop
 8007e38:	200000a4 	.word	0x200000a4
 8007e3c:	080088be 	.word	0x080088be
 8007e40:	08008890 	.word	0x08008890
 8007e44:	08008883 	.word	0x08008883

08007e48 <_calloc_r>:
 8007e48:	b570      	push	{r4, r5, r6, lr}
 8007e4a:	fba1 5402 	umull	r5, r4, r1, r2
 8007e4e:	b93c      	cbnz	r4, 8007e60 <_calloc_r+0x18>
 8007e50:	4629      	mov	r1, r5
 8007e52:	f7ff f9bf 	bl	80071d4 <_malloc_r>
 8007e56:	4606      	mov	r6, r0
 8007e58:	b928      	cbnz	r0, 8007e66 <_calloc_r+0x1e>
 8007e5a:	2600      	movs	r6, #0
 8007e5c:	4630      	mov	r0, r6
 8007e5e:	bd70      	pop	{r4, r5, r6, pc}
 8007e60:	220c      	movs	r2, #12
 8007e62:	6002      	str	r2, [r0, #0]
 8007e64:	e7f9      	b.n	8007e5a <_calloc_r+0x12>
 8007e66:	462a      	mov	r2, r5
 8007e68:	4621      	mov	r1, r4
 8007e6a:	f7fe fa40 	bl	80062ee <memset>
 8007e6e:	e7f5      	b.n	8007e5c <_calloc_r+0x14>

08007e70 <__ascii_mbtowc>:
 8007e70:	b082      	sub	sp, #8
 8007e72:	b901      	cbnz	r1, 8007e76 <__ascii_mbtowc+0x6>
 8007e74:	a901      	add	r1, sp, #4
 8007e76:	b142      	cbz	r2, 8007e8a <__ascii_mbtowc+0x1a>
 8007e78:	b14b      	cbz	r3, 8007e8e <__ascii_mbtowc+0x1e>
 8007e7a:	7813      	ldrb	r3, [r2, #0]
 8007e7c:	600b      	str	r3, [r1, #0]
 8007e7e:	7812      	ldrb	r2, [r2, #0]
 8007e80:	1e10      	subs	r0, r2, #0
 8007e82:	bf18      	it	ne
 8007e84:	2001      	movne	r0, #1
 8007e86:	b002      	add	sp, #8
 8007e88:	4770      	bx	lr
 8007e8a:	4610      	mov	r0, r2
 8007e8c:	e7fb      	b.n	8007e86 <__ascii_mbtowc+0x16>
 8007e8e:	f06f 0001 	mvn.w	r0, #1
 8007e92:	e7f8      	b.n	8007e86 <__ascii_mbtowc+0x16>

08007e94 <_realloc_r>:
 8007e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e98:	4680      	mov	r8, r0
 8007e9a:	4615      	mov	r5, r2
 8007e9c:	460c      	mov	r4, r1
 8007e9e:	b921      	cbnz	r1, 8007eaa <_realloc_r+0x16>
 8007ea0:	4611      	mov	r1, r2
 8007ea2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ea6:	f7ff b995 	b.w	80071d4 <_malloc_r>
 8007eaa:	b92a      	cbnz	r2, 8007eb8 <_realloc_r+0x24>
 8007eac:	f7ff f920 	bl	80070f0 <_free_r>
 8007eb0:	2400      	movs	r4, #0
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007eb8:	f000 f841 	bl	8007f3e <_malloc_usable_size_r>
 8007ebc:	4285      	cmp	r5, r0
 8007ebe:	4606      	mov	r6, r0
 8007ec0:	d802      	bhi.n	8007ec8 <_realloc_r+0x34>
 8007ec2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007ec6:	d8f4      	bhi.n	8007eb2 <_realloc_r+0x1e>
 8007ec8:	4629      	mov	r1, r5
 8007eca:	4640      	mov	r0, r8
 8007ecc:	f7ff f982 	bl	80071d4 <_malloc_r>
 8007ed0:	4607      	mov	r7, r0
 8007ed2:	2800      	cmp	r0, #0
 8007ed4:	d0ec      	beq.n	8007eb0 <_realloc_r+0x1c>
 8007ed6:	42b5      	cmp	r5, r6
 8007ed8:	462a      	mov	r2, r5
 8007eda:	4621      	mov	r1, r4
 8007edc:	bf28      	it	cs
 8007ede:	4632      	movcs	r2, r6
 8007ee0:	f7fe faa5 	bl	800642e <memcpy>
 8007ee4:	4621      	mov	r1, r4
 8007ee6:	4640      	mov	r0, r8
 8007ee8:	f7ff f902 	bl	80070f0 <_free_r>
 8007eec:	463c      	mov	r4, r7
 8007eee:	e7e0      	b.n	8007eb2 <_realloc_r+0x1e>

08007ef0 <__ascii_wctomb>:
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	4608      	mov	r0, r1
 8007ef4:	b141      	cbz	r1, 8007f08 <__ascii_wctomb+0x18>
 8007ef6:	2aff      	cmp	r2, #255	@ 0xff
 8007ef8:	d904      	bls.n	8007f04 <__ascii_wctomb+0x14>
 8007efa:	228a      	movs	r2, #138	@ 0x8a
 8007efc:	f04f 30ff 	mov.w	r0, #4294967295
 8007f00:	601a      	str	r2, [r3, #0]
 8007f02:	4770      	bx	lr
 8007f04:	2001      	movs	r0, #1
 8007f06:	700a      	strb	r2, [r1, #0]
 8007f08:	4770      	bx	lr
	...

08007f0c <fiprintf>:
 8007f0c:	b40e      	push	{r1, r2, r3}
 8007f0e:	b503      	push	{r0, r1, lr}
 8007f10:	4601      	mov	r1, r0
 8007f12:	ab03      	add	r3, sp, #12
 8007f14:	4805      	ldr	r0, [pc, #20]	@ (8007f2c <fiprintf+0x20>)
 8007f16:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f1a:	6800      	ldr	r0, [r0, #0]
 8007f1c:	9301      	str	r3, [sp, #4]
 8007f1e:	f000 f83d 	bl	8007f9c <_vfiprintf_r>
 8007f22:	b002      	add	sp, #8
 8007f24:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f28:	b003      	add	sp, #12
 8007f2a:	4770      	bx	lr
 8007f2c:	200000a4 	.word	0x200000a4

08007f30 <abort>:
 8007f30:	2006      	movs	r0, #6
 8007f32:	b508      	push	{r3, lr}
 8007f34:	f000 fa06 	bl	8008344 <raise>
 8007f38:	2001      	movs	r0, #1
 8007f3a:	f7fa fb95 	bl	8002668 <_exit>

08007f3e <_malloc_usable_size_r>:
 8007f3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f42:	1f18      	subs	r0, r3, #4
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	bfbc      	itt	lt
 8007f48:	580b      	ldrlt	r3, [r1, r0]
 8007f4a:	18c0      	addlt	r0, r0, r3
 8007f4c:	4770      	bx	lr

08007f4e <__sfputc_r>:
 8007f4e:	6893      	ldr	r3, [r2, #8]
 8007f50:	b410      	push	{r4}
 8007f52:	3b01      	subs	r3, #1
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	6093      	str	r3, [r2, #8]
 8007f58:	da07      	bge.n	8007f6a <__sfputc_r+0x1c>
 8007f5a:	6994      	ldr	r4, [r2, #24]
 8007f5c:	42a3      	cmp	r3, r4
 8007f5e:	db01      	blt.n	8007f64 <__sfputc_r+0x16>
 8007f60:	290a      	cmp	r1, #10
 8007f62:	d102      	bne.n	8007f6a <__sfputc_r+0x1c>
 8007f64:	bc10      	pop	{r4}
 8007f66:	f000 b931 	b.w	80081cc <__swbuf_r>
 8007f6a:	6813      	ldr	r3, [r2, #0]
 8007f6c:	1c58      	adds	r0, r3, #1
 8007f6e:	6010      	str	r0, [r2, #0]
 8007f70:	7019      	strb	r1, [r3, #0]
 8007f72:	4608      	mov	r0, r1
 8007f74:	bc10      	pop	{r4}
 8007f76:	4770      	bx	lr

08007f78 <__sfputs_r>:
 8007f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f7a:	4606      	mov	r6, r0
 8007f7c:	460f      	mov	r7, r1
 8007f7e:	4614      	mov	r4, r2
 8007f80:	18d5      	adds	r5, r2, r3
 8007f82:	42ac      	cmp	r4, r5
 8007f84:	d101      	bne.n	8007f8a <__sfputs_r+0x12>
 8007f86:	2000      	movs	r0, #0
 8007f88:	e007      	b.n	8007f9a <__sfputs_r+0x22>
 8007f8a:	463a      	mov	r2, r7
 8007f8c:	4630      	mov	r0, r6
 8007f8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f92:	f7ff ffdc 	bl	8007f4e <__sfputc_r>
 8007f96:	1c43      	adds	r3, r0, #1
 8007f98:	d1f3      	bne.n	8007f82 <__sfputs_r+0xa>
 8007f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007f9c <_vfiprintf_r>:
 8007f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa0:	460d      	mov	r5, r1
 8007fa2:	4614      	mov	r4, r2
 8007fa4:	4698      	mov	r8, r3
 8007fa6:	4606      	mov	r6, r0
 8007fa8:	b09d      	sub	sp, #116	@ 0x74
 8007faa:	b118      	cbz	r0, 8007fb4 <_vfiprintf_r+0x18>
 8007fac:	6a03      	ldr	r3, [r0, #32]
 8007fae:	b90b      	cbnz	r3, 8007fb4 <_vfiprintf_r+0x18>
 8007fb0:	f7fe f8ea 	bl	8006188 <__sinit>
 8007fb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007fb6:	07d9      	lsls	r1, r3, #31
 8007fb8:	d405      	bmi.n	8007fc6 <_vfiprintf_r+0x2a>
 8007fba:	89ab      	ldrh	r3, [r5, #12]
 8007fbc:	059a      	lsls	r2, r3, #22
 8007fbe:	d402      	bmi.n	8007fc6 <_vfiprintf_r+0x2a>
 8007fc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007fc2:	f7fe fa24 	bl	800640e <__retarget_lock_acquire_recursive>
 8007fc6:	89ab      	ldrh	r3, [r5, #12]
 8007fc8:	071b      	lsls	r3, r3, #28
 8007fca:	d501      	bpl.n	8007fd0 <_vfiprintf_r+0x34>
 8007fcc:	692b      	ldr	r3, [r5, #16]
 8007fce:	b99b      	cbnz	r3, 8007ff8 <_vfiprintf_r+0x5c>
 8007fd0:	4629      	mov	r1, r5
 8007fd2:	4630      	mov	r0, r6
 8007fd4:	f000 f938 	bl	8008248 <__swsetup_r>
 8007fd8:	b170      	cbz	r0, 8007ff8 <_vfiprintf_r+0x5c>
 8007fda:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007fdc:	07dc      	lsls	r4, r3, #31
 8007fde:	d504      	bpl.n	8007fea <_vfiprintf_r+0x4e>
 8007fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fe4:	b01d      	add	sp, #116	@ 0x74
 8007fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fea:	89ab      	ldrh	r3, [r5, #12]
 8007fec:	0598      	lsls	r0, r3, #22
 8007fee:	d4f7      	bmi.n	8007fe0 <_vfiprintf_r+0x44>
 8007ff0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ff2:	f7fe fa0d 	bl	8006410 <__retarget_lock_release_recursive>
 8007ff6:	e7f3      	b.n	8007fe0 <_vfiprintf_r+0x44>
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ffc:	2320      	movs	r3, #32
 8007ffe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008002:	2330      	movs	r3, #48	@ 0x30
 8008004:	f04f 0901 	mov.w	r9, #1
 8008008:	f8cd 800c 	str.w	r8, [sp, #12]
 800800c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80081b8 <_vfiprintf_r+0x21c>
 8008010:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008014:	4623      	mov	r3, r4
 8008016:	469a      	mov	sl, r3
 8008018:	f813 2b01 	ldrb.w	r2, [r3], #1
 800801c:	b10a      	cbz	r2, 8008022 <_vfiprintf_r+0x86>
 800801e:	2a25      	cmp	r2, #37	@ 0x25
 8008020:	d1f9      	bne.n	8008016 <_vfiprintf_r+0x7a>
 8008022:	ebba 0b04 	subs.w	fp, sl, r4
 8008026:	d00b      	beq.n	8008040 <_vfiprintf_r+0xa4>
 8008028:	465b      	mov	r3, fp
 800802a:	4622      	mov	r2, r4
 800802c:	4629      	mov	r1, r5
 800802e:	4630      	mov	r0, r6
 8008030:	f7ff ffa2 	bl	8007f78 <__sfputs_r>
 8008034:	3001      	adds	r0, #1
 8008036:	f000 80a7 	beq.w	8008188 <_vfiprintf_r+0x1ec>
 800803a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800803c:	445a      	add	r2, fp
 800803e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008040:	f89a 3000 	ldrb.w	r3, [sl]
 8008044:	2b00      	cmp	r3, #0
 8008046:	f000 809f 	beq.w	8008188 <_vfiprintf_r+0x1ec>
 800804a:	2300      	movs	r3, #0
 800804c:	f04f 32ff 	mov.w	r2, #4294967295
 8008050:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008054:	f10a 0a01 	add.w	sl, sl, #1
 8008058:	9304      	str	r3, [sp, #16]
 800805a:	9307      	str	r3, [sp, #28]
 800805c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008060:	931a      	str	r3, [sp, #104]	@ 0x68
 8008062:	4654      	mov	r4, sl
 8008064:	2205      	movs	r2, #5
 8008066:	f814 1b01 	ldrb.w	r1, [r4], #1
 800806a:	4853      	ldr	r0, [pc, #332]	@ (80081b8 <_vfiprintf_r+0x21c>)
 800806c:	f7fe f9d1 	bl	8006412 <memchr>
 8008070:	9a04      	ldr	r2, [sp, #16]
 8008072:	b9d8      	cbnz	r0, 80080ac <_vfiprintf_r+0x110>
 8008074:	06d1      	lsls	r1, r2, #27
 8008076:	bf44      	itt	mi
 8008078:	2320      	movmi	r3, #32
 800807a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800807e:	0713      	lsls	r3, r2, #28
 8008080:	bf44      	itt	mi
 8008082:	232b      	movmi	r3, #43	@ 0x2b
 8008084:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008088:	f89a 3000 	ldrb.w	r3, [sl]
 800808c:	2b2a      	cmp	r3, #42	@ 0x2a
 800808e:	d015      	beq.n	80080bc <_vfiprintf_r+0x120>
 8008090:	4654      	mov	r4, sl
 8008092:	2000      	movs	r0, #0
 8008094:	f04f 0c0a 	mov.w	ip, #10
 8008098:	9a07      	ldr	r2, [sp, #28]
 800809a:	4621      	mov	r1, r4
 800809c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080a0:	3b30      	subs	r3, #48	@ 0x30
 80080a2:	2b09      	cmp	r3, #9
 80080a4:	d94b      	bls.n	800813e <_vfiprintf_r+0x1a2>
 80080a6:	b1b0      	cbz	r0, 80080d6 <_vfiprintf_r+0x13a>
 80080a8:	9207      	str	r2, [sp, #28]
 80080aa:	e014      	b.n	80080d6 <_vfiprintf_r+0x13a>
 80080ac:	eba0 0308 	sub.w	r3, r0, r8
 80080b0:	fa09 f303 	lsl.w	r3, r9, r3
 80080b4:	4313      	orrs	r3, r2
 80080b6:	46a2      	mov	sl, r4
 80080b8:	9304      	str	r3, [sp, #16]
 80080ba:	e7d2      	b.n	8008062 <_vfiprintf_r+0xc6>
 80080bc:	9b03      	ldr	r3, [sp, #12]
 80080be:	1d19      	adds	r1, r3, #4
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	9103      	str	r1, [sp, #12]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	bfbb      	ittet	lt
 80080c8:	425b      	neglt	r3, r3
 80080ca:	f042 0202 	orrlt.w	r2, r2, #2
 80080ce:	9307      	strge	r3, [sp, #28]
 80080d0:	9307      	strlt	r3, [sp, #28]
 80080d2:	bfb8      	it	lt
 80080d4:	9204      	strlt	r2, [sp, #16]
 80080d6:	7823      	ldrb	r3, [r4, #0]
 80080d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80080da:	d10a      	bne.n	80080f2 <_vfiprintf_r+0x156>
 80080dc:	7863      	ldrb	r3, [r4, #1]
 80080de:	2b2a      	cmp	r3, #42	@ 0x2a
 80080e0:	d132      	bne.n	8008148 <_vfiprintf_r+0x1ac>
 80080e2:	9b03      	ldr	r3, [sp, #12]
 80080e4:	3402      	adds	r4, #2
 80080e6:	1d1a      	adds	r2, r3, #4
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	9203      	str	r2, [sp, #12]
 80080ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80080f0:	9305      	str	r3, [sp, #20]
 80080f2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80081bc <_vfiprintf_r+0x220>
 80080f6:	2203      	movs	r2, #3
 80080f8:	4650      	mov	r0, sl
 80080fa:	7821      	ldrb	r1, [r4, #0]
 80080fc:	f7fe f989 	bl	8006412 <memchr>
 8008100:	b138      	cbz	r0, 8008112 <_vfiprintf_r+0x176>
 8008102:	2240      	movs	r2, #64	@ 0x40
 8008104:	9b04      	ldr	r3, [sp, #16]
 8008106:	eba0 000a 	sub.w	r0, r0, sl
 800810a:	4082      	lsls	r2, r0
 800810c:	4313      	orrs	r3, r2
 800810e:	3401      	adds	r4, #1
 8008110:	9304      	str	r3, [sp, #16]
 8008112:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008116:	2206      	movs	r2, #6
 8008118:	4829      	ldr	r0, [pc, #164]	@ (80081c0 <_vfiprintf_r+0x224>)
 800811a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800811e:	f7fe f978 	bl	8006412 <memchr>
 8008122:	2800      	cmp	r0, #0
 8008124:	d03f      	beq.n	80081a6 <_vfiprintf_r+0x20a>
 8008126:	4b27      	ldr	r3, [pc, #156]	@ (80081c4 <_vfiprintf_r+0x228>)
 8008128:	bb1b      	cbnz	r3, 8008172 <_vfiprintf_r+0x1d6>
 800812a:	9b03      	ldr	r3, [sp, #12]
 800812c:	3307      	adds	r3, #7
 800812e:	f023 0307 	bic.w	r3, r3, #7
 8008132:	3308      	adds	r3, #8
 8008134:	9303      	str	r3, [sp, #12]
 8008136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008138:	443b      	add	r3, r7
 800813a:	9309      	str	r3, [sp, #36]	@ 0x24
 800813c:	e76a      	b.n	8008014 <_vfiprintf_r+0x78>
 800813e:	460c      	mov	r4, r1
 8008140:	2001      	movs	r0, #1
 8008142:	fb0c 3202 	mla	r2, ip, r2, r3
 8008146:	e7a8      	b.n	800809a <_vfiprintf_r+0xfe>
 8008148:	2300      	movs	r3, #0
 800814a:	f04f 0c0a 	mov.w	ip, #10
 800814e:	4619      	mov	r1, r3
 8008150:	3401      	adds	r4, #1
 8008152:	9305      	str	r3, [sp, #20]
 8008154:	4620      	mov	r0, r4
 8008156:	f810 2b01 	ldrb.w	r2, [r0], #1
 800815a:	3a30      	subs	r2, #48	@ 0x30
 800815c:	2a09      	cmp	r2, #9
 800815e:	d903      	bls.n	8008168 <_vfiprintf_r+0x1cc>
 8008160:	2b00      	cmp	r3, #0
 8008162:	d0c6      	beq.n	80080f2 <_vfiprintf_r+0x156>
 8008164:	9105      	str	r1, [sp, #20]
 8008166:	e7c4      	b.n	80080f2 <_vfiprintf_r+0x156>
 8008168:	4604      	mov	r4, r0
 800816a:	2301      	movs	r3, #1
 800816c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008170:	e7f0      	b.n	8008154 <_vfiprintf_r+0x1b8>
 8008172:	ab03      	add	r3, sp, #12
 8008174:	9300      	str	r3, [sp, #0]
 8008176:	462a      	mov	r2, r5
 8008178:	4630      	mov	r0, r6
 800817a:	4b13      	ldr	r3, [pc, #76]	@ (80081c8 <_vfiprintf_r+0x22c>)
 800817c:	a904      	add	r1, sp, #16
 800817e:	f7fd fbb9 	bl	80058f4 <_printf_float>
 8008182:	4607      	mov	r7, r0
 8008184:	1c78      	adds	r0, r7, #1
 8008186:	d1d6      	bne.n	8008136 <_vfiprintf_r+0x19a>
 8008188:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800818a:	07d9      	lsls	r1, r3, #31
 800818c:	d405      	bmi.n	800819a <_vfiprintf_r+0x1fe>
 800818e:	89ab      	ldrh	r3, [r5, #12]
 8008190:	059a      	lsls	r2, r3, #22
 8008192:	d402      	bmi.n	800819a <_vfiprintf_r+0x1fe>
 8008194:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008196:	f7fe f93b 	bl	8006410 <__retarget_lock_release_recursive>
 800819a:	89ab      	ldrh	r3, [r5, #12]
 800819c:	065b      	lsls	r3, r3, #25
 800819e:	f53f af1f 	bmi.w	8007fe0 <_vfiprintf_r+0x44>
 80081a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80081a4:	e71e      	b.n	8007fe4 <_vfiprintf_r+0x48>
 80081a6:	ab03      	add	r3, sp, #12
 80081a8:	9300      	str	r3, [sp, #0]
 80081aa:	462a      	mov	r2, r5
 80081ac:	4630      	mov	r0, r6
 80081ae:	4b06      	ldr	r3, [pc, #24]	@ (80081c8 <_vfiprintf_r+0x22c>)
 80081b0:	a904      	add	r1, sp, #16
 80081b2:	f7fd fe3d 	bl	8005e30 <_printf_i>
 80081b6:	e7e4      	b.n	8008182 <_vfiprintf_r+0x1e6>
 80081b8:	08008868 	.word	0x08008868
 80081bc:	0800886e 	.word	0x0800886e
 80081c0:	08008872 	.word	0x08008872
 80081c4:	080058f5 	.word	0x080058f5
 80081c8:	08007f79 	.word	0x08007f79

080081cc <__swbuf_r>:
 80081cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ce:	460e      	mov	r6, r1
 80081d0:	4614      	mov	r4, r2
 80081d2:	4605      	mov	r5, r0
 80081d4:	b118      	cbz	r0, 80081de <__swbuf_r+0x12>
 80081d6:	6a03      	ldr	r3, [r0, #32]
 80081d8:	b90b      	cbnz	r3, 80081de <__swbuf_r+0x12>
 80081da:	f7fd ffd5 	bl	8006188 <__sinit>
 80081de:	69a3      	ldr	r3, [r4, #24]
 80081e0:	60a3      	str	r3, [r4, #8]
 80081e2:	89a3      	ldrh	r3, [r4, #12]
 80081e4:	071a      	lsls	r2, r3, #28
 80081e6:	d501      	bpl.n	80081ec <__swbuf_r+0x20>
 80081e8:	6923      	ldr	r3, [r4, #16]
 80081ea:	b943      	cbnz	r3, 80081fe <__swbuf_r+0x32>
 80081ec:	4621      	mov	r1, r4
 80081ee:	4628      	mov	r0, r5
 80081f0:	f000 f82a 	bl	8008248 <__swsetup_r>
 80081f4:	b118      	cbz	r0, 80081fe <__swbuf_r+0x32>
 80081f6:	f04f 37ff 	mov.w	r7, #4294967295
 80081fa:	4638      	mov	r0, r7
 80081fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081fe:	6823      	ldr	r3, [r4, #0]
 8008200:	6922      	ldr	r2, [r4, #16]
 8008202:	b2f6      	uxtb	r6, r6
 8008204:	1a98      	subs	r0, r3, r2
 8008206:	6963      	ldr	r3, [r4, #20]
 8008208:	4637      	mov	r7, r6
 800820a:	4283      	cmp	r3, r0
 800820c:	dc05      	bgt.n	800821a <__swbuf_r+0x4e>
 800820e:	4621      	mov	r1, r4
 8008210:	4628      	mov	r0, r5
 8008212:	f7ff fdc3 	bl	8007d9c <_fflush_r>
 8008216:	2800      	cmp	r0, #0
 8008218:	d1ed      	bne.n	80081f6 <__swbuf_r+0x2a>
 800821a:	68a3      	ldr	r3, [r4, #8]
 800821c:	3b01      	subs	r3, #1
 800821e:	60a3      	str	r3, [r4, #8]
 8008220:	6823      	ldr	r3, [r4, #0]
 8008222:	1c5a      	adds	r2, r3, #1
 8008224:	6022      	str	r2, [r4, #0]
 8008226:	701e      	strb	r6, [r3, #0]
 8008228:	6962      	ldr	r2, [r4, #20]
 800822a:	1c43      	adds	r3, r0, #1
 800822c:	429a      	cmp	r2, r3
 800822e:	d004      	beq.n	800823a <__swbuf_r+0x6e>
 8008230:	89a3      	ldrh	r3, [r4, #12]
 8008232:	07db      	lsls	r3, r3, #31
 8008234:	d5e1      	bpl.n	80081fa <__swbuf_r+0x2e>
 8008236:	2e0a      	cmp	r6, #10
 8008238:	d1df      	bne.n	80081fa <__swbuf_r+0x2e>
 800823a:	4621      	mov	r1, r4
 800823c:	4628      	mov	r0, r5
 800823e:	f7ff fdad 	bl	8007d9c <_fflush_r>
 8008242:	2800      	cmp	r0, #0
 8008244:	d0d9      	beq.n	80081fa <__swbuf_r+0x2e>
 8008246:	e7d6      	b.n	80081f6 <__swbuf_r+0x2a>

08008248 <__swsetup_r>:
 8008248:	b538      	push	{r3, r4, r5, lr}
 800824a:	4b29      	ldr	r3, [pc, #164]	@ (80082f0 <__swsetup_r+0xa8>)
 800824c:	4605      	mov	r5, r0
 800824e:	6818      	ldr	r0, [r3, #0]
 8008250:	460c      	mov	r4, r1
 8008252:	b118      	cbz	r0, 800825c <__swsetup_r+0x14>
 8008254:	6a03      	ldr	r3, [r0, #32]
 8008256:	b90b      	cbnz	r3, 800825c <__swsetup_r+0x14>
 8008258:	f7fd ff96 	bl	8006188 <__sinit>
 800825c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008260:	0719      	lsls	r1, r3, #28
 8008262:	d422      	bmi.n	80082aa <__swsetup_r+0x62>
 8008264:	06da      	lsls	r2, r3, #27
 8008266:	d407      	bmi.n	8008278 <__swsetup_r+0x30>
 8008268:	2209      	movs	r2, #9
 800826a:	602a      	str	r2, [r5, #0]
 800826c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008270:	f04f 30ff 	mov.w	r0, #4294967295
 8008274:	81a3      	strh	r3, [r4, #12]
 8008276:	e033      	b.n	80082e0 <__swsetup_r+0x98>
 8008278:	0758      	lsls	r0, r3, #29
 800827a:	d512      	bpl.n	80082a2 <__swsetup_r+0x5a>
 800827c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800827e:	b141      	cbz	r1, 8008292 <__swsetup_r+0x4a>
 8008280:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008284:	4299      	cmp	r1, r3
 8008286:	d002      	beq.n	800828e <__swsetup_r+0x46>
 8008288:	4628      	mov	r0, r5
 800828a:	f7fe ff31 	bl	80070f0 <_free_r>
 800828e:	2300      	movs	r3, #0
 8008290:	6363      	str	r3, [r4, #52]	@ 0x34
 8008292:	89a3      	ldrh	r3, [r4, #12]
 8008294:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008298:	81a3      	strh	r3, [r4, #12]
 800829a:	2300      	movs	r3, #0
 800829c:	6063      	str	r3, [r4, #4]
 800829e:	6923      	ldr	r3, [r4, #16]
 80082a0:	6023      	str	r3, [r4, #0]
 80082a2:	89a3      	ldrh	r3, [r4, #12]
 80082a4:	f043 0308 	orr.w	r3, r3, #8
 80082a8:	81a3      	strh	r3, [r4, #12]
 80082aa:	6923      	ldr	r3, [r4, #16]
 80082ac:	b94b      	cbnz	r3, 80082c2 <__swsetup_r+0x7a>
 80082ae:	89a3      	ldrh	r3, [r4, #12]
 80082b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80082b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082b8:	d003      	beq.n	80082c2 <__swsetup_r+0x7a>
 80082ba:	4621      	mov	r1, r4
 80082bc:	4628      	mov	r0, r5
 80082be:	f000 f882 	bl	80083c6 <__smakebuf_r>
 80082c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082c6:	f013 0201 	ands.w	r2, r3, #1
 80082ca:	d00a      	beq.n	80082e2 <__swsetup_r+0x9a>
 80082cc:	2200      	movs	r2, #0
 80082ce:	60a2      	str	r2, [r4, #8]
 80082d0:	6962      	ldr	r2, [r4, #20]
 80082d2:	4252      	negs	r2, r2
 80082d4:	61a2      	str	r2, [r4, #24]
 80082d6:	6922      	ldr	r2, [r4, #16]
 80082d8:	b942      	cbnz	r2, 80082ec <__swsetup_r+0xa4>
 80082da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80082de:	d1c5      	bne.n	800826c <__swsetup_r+0x24>
 80082e0:	bd38      	pop	{r3, r4, r5, pc}
 80082e2:	0799      	lsls	r1, r3, #30
 80082e4:	bf58      	it	pl
 80082e6:	6962      	ldrpl	r2, [r4, #20]
 80082e8:	60a2      	str	r2, [r4, #8]
 80082ea:	e7f4      	b.n	80082d6 <__swsetup_r+0x8e>
 80082ec:	2000      	movs	r0, #0
 80082ee:	e7f7      	b.n	80082e0 <__swsetup_r+0x98>
 80082f0:	200000a4 	.word	0x200000a4

080082f4 <_raise_r>:
 80082f4:	291f      	cmp	r1, #31
 80082f6:	b538      	push	{r3, r4, r5, lr}
 80082f8:	4605      	mov	r5, r0
 80082fa:	460c      	mov	r4, r1
 80082fc:	d904      	bls.n	8008308 <_raise_r+0x14>
 80082fe:	2316      	movs	r3, #22
 8008300:	6003      	str	r3, [r0, #0]
 8008302:	f04f 30ff 	mov.w	r0, #4294967295
 8008306:	bd38      	pop	{r3, r4, r5, pc}
 8008308:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800830a:	b112      	cbz	r2, 8008312 <_raise_r+0x1e>
 800830c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008310:	b94b      	cbnz	r3, 8008326 <_raise_r+0x32>
 8008312:	4628      	mov	r0, r5
 8008314:	f000 f830 	bl	8008378 <_getpid_r>
 8008318:	4622      	mov	r2, r4
 800831a:	4601      	mov	r1, r0
 800831c:	4628      	mov	r0, r5
 800831e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008322:	f000 b817 	b.w	8008354 <_kill_r>
 8008326:	2b01      	cmp	r3, #1
 8008328:	d00a      	beq.n	8008340 <_raise_r+0x4c>
 800832a:	1c59      	adds	r1, r3, #1
 800832c:	d103      	bne.n	8008336 <_raise_r+0x42>
 800832e:	2316      	movs	r3, #22
 8008330:	6003      	str	r3, [r0, #0]
 8008332:	2001      	movs	r0, #1
 8008334:	e7e7      	b.n	8008306 <_raise_r+0x12>
 8008336:	2100      	movs	r1, #0
 8008338:	4620      	mov	r0, r4
 800833a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800833e:	4798      	blx	r3
 8008340:	2000      	movs	r0, #0
 8008342:	e7e0      	b.n	8008306 <_raise_r+0x12>

08008344 <raise>:
 8008344:	4b02      	ldr	r3, [pc, #8]	@ (8008350 <raise+0xc>)
 8008346:	4601      	mov	r1, r0
 8008348:	6818      	ldr	r0, [r3, #0]
 800834a:	f7ff bfd3 	b.w	80082f4 <_raise_r>
 800834e:	bf00      	nop
 8008350:	200000a4 	.word	0x200000a4

08008354 <_kill_r>:
 8008354:	b538      	push	{r3, r4, r5, lr}
 8008356:	2300      	movs	r3, #0
 8008358:	4d06      	ldr	r5, [pc, #24]	@ (8008374 <_kill_r+0x20>)
 800835a:	4604      	mov	r4, r0
 800835c:	4608      	mov	r0, r1
 800835e:	4611      	mov	r1, r2
 8008360:	602b      	str	r3, [r5, #0]
 8008362:	f7fa f971 	bl	8002648 <_kill>
 8008366:	1c43      	adds	r3, r0, #1
 8008368:	d102      	bne.n	8008370 <_kill_r+0x1c>
 800836a:	682b      	ldr	r3, [r5, #0]
 800836c:	b103      	cbz	r3, 8008370 <_kill_r+0x1c>
 800836e:	6023      	str	r3, [r4, #0]
 8008370:	bd38      	pop	{r3, r4, r5, pc}
 8008372:	bf00      	nop
 8008374:	20000548 	.word	0x20000548

08008378 <_getpid_r>:
 8008378:	f7fa b95f 	b.w	800263a <_getpid>

0800837c <__swhatbuf_r>:
 800837c:	b570      	push	{r4, r5, r6, lr}
 800837e:	460c      	mov	r4, r1
 8008380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008384:	4615      	mov	r5, r2
 8008386:	2900      	cmp	r1, #0
 8008388:	461e      	mov	r6, r3
 800838a:	b096      	sub	sp, #88	@ 0x58
 800838c:	da0c      	bge.n	80083a8 <__swhatbuf_r+0x2c>
 800838e:	89a3      	ldrh	r3, [r4, #12]
 8008390:	2100      	movs	r1, #0
 8008392:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008396:	bf14      	ite	ne
 8008398:	2340      	movne	r3, #64	@ 0x40
 800839a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800839e:	2000      	movs	r0, #0
 80083a0:	6031      	str	r1, [r6, #0]
 80083a2:	602b      	str	r3, [r5, #0]
 80083a4:	b016      	add	sp, #88	@ 0x58
 80083a6:	bd70      	pop	{r4, r5, r6, pc}
 80083a8:	466a      	mov	r2, sp
 80083aa:	f000 f849 	bl	8008440 <_fstat_r>
 80083ae:	2800      	cmp	r0, #0
 80083b0:	dbed      	blt.n	800838e <__swhatbuf_r+0x12>
 80083b2:	9901      	ldr	r1, [sp, #4]
 80083b4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80083b8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80083bc:	4259      	negs	r1, r3
 80083be:	4159      	adcs	r1, r3
 80083c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80083c4:	e7eb      	b.n	800839e <__swhatbuf_r+0x22>

080083c6 <__smakebuf_r>:
 80083c6:	898b      	ldrh	r3, [r1, #12]
 80083c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083ca:	079d      	lsls	r5, r3, #30
 80083cc:	4606      	mov	r6, r0
 80083ce:	460c      	mov	r4, r1
 80083d0:	d507      	bpl.n	80083e2 <__smakebuf_r+0x1c>
 80083d2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80083d6:	6023      	str	r3, [r4, #0]
 80083d8:	6123      	str	r3, [r4, #16]
 80083da:	2301      	movs	r3, #1
 80083dc:	6163      	str	r3, [r4, #20]
 80083de:	b003      	add	sp, #12
 80083e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083e2:	466a      	mov	r2, sp
 80083e4:	ab01      	add	r3, sp, #4
 80083e6:	f7ff ffc9 	bl	800837c <__swhatbuf_r>
 80083ea:	9f00      	ldr	r7, [sp, #0]
 80083ec:	4605      	mov	r5, r0
 80083ee:	4639      	mov	r1, r7
 80083f0:	4630      	mov	r0, r6
 80083f2:	f7fe feef 	bl	80071d4 <_malloc_r>
 80083f6:	b948      	cbnz	r0, 800840c <__smakebuf_r+0x46>
 80083f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083fc:	059a      	lsls	r2, r3, #22
 80083fe:	d4ee      	bmi.n	80083de <__smakebuf_r+0x18>
 8008400:	f023 0303 	bic.w	r3, r3, #3
 8008404:	f043 0302 	orr.w	r3, r3, #2
 8008408:	81a3      	strh	r3, [r4, #12]
 800840a:	e7e2      	b.n	80083d2 <__smakebuf_r+0xc>
 800840c:	89a3      	ldrh	r3, [r4, #12]
 800840e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008412:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008416:	81a3      	strh	r3, [r4, #12]
 8008418:	9b01      	ldr	r3, [sp, #4]
 800841a:	6020      	str	r0, [r4, #0]
 800841c:	b15b      	cbz	r3, 8008436 <__smakebuf_r+0x70>
 800841e:	4630      	mov	r0, r6
 8008420:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008424:	f000 f81e 	bl	8008464 <_isatty_r>
 8008428:	b128      	cbz	r0, 8008436 <__smakebuf_r+0x70>
 800842a:	89a3      	ldrh	r3, [r4, #12]
 800842c:	f023 0303 	bic.w	r3, r3, #3
 8008430:	f043 0301 	orr.w	r3, r3, #1
 8008434:	81a3      	strh	r3, [r4, #12]
 8008436:	89a3      	ldrh	r3, [r4, #12]
 8008438:	431d      	orrs	r5, r3
 800843a:	81a5      	strh	r5, [r4, #12]
 800843c:	e7cf      	b.n	80083de <__smakebuf_r+0x18>
	...

08008440 <_fstat_r>:
 8008440:	b538      	push	{r3, r4, r5, lr}
 8008442:	2300      	movs	r3, #0
 8008444:	4d06      	ldr	r5, [pc, #24]	@ (8008460 <_fstat_r+0x20>)
 8008446:	4604      	mov	r4, r0
 8008448:	4608      	mov	r0, r1
 800844a:	4611      	mov	r1, r2
 800844c:	602b      	str	r3, [r5, #0]
 800844e:	f7fa f95a 	bl	8002706 <_fstat>
 8008452:	1c43      	adds	r3, r0, #1
 8008454:	d102      	bne.n	800845c <_fstat_r+0x1c>
 8008456:	682b      	ldr	r3, [r5, #0]
 8008458:	b103      	cbz	r3, 800845c <_fstat_r+0x1c>
 800845a:	6023      	str	r3, [r4, #0]
 800845c:	bd38      	pop	{r3, r4, r5, pc}
 800845e:	bf00      	nop
 8008460:	20000548 	.word	0x20000548

08008464 <_isatty_r>:
 8008464:	b538      	push	{r3, r4, r5, lr}
 8008466:	2300      	movs	r3, #0
 8008468:	4d05      	ldr	r5, [pc, #20]	@ (8008480 <_isatty_r+0x1c>)
 800846a:	4604      	mov	r4, r0
 800846c:	4608      	mov	r0, r1
 800846e:	602b      	str	r3, [r5, #0]
 8008470:	f7fa f958 	bl	8002724 <_isatty>
 8008474:	1c43      	adds	r3, r0, #1
 8008476:	d102      	bne.n	800847e <_isatty_r+0x1a>
 8008478:	682b      	ldr	r3, [r5, #0]
 800847a:	b103      	cbz	r3, 800847e <_isatty_r+0x1a>
 800847c:	6023      	str	r3, [r4, #0]
 800847e:	bd38      	pop	{r3, r4, r5, pc}
 8008480:	20000548 	.word	0x20000548

08008484 <_init>:
 8008484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008486:	bf00      	nop
 8008488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800848a:	bc08      	pop	{r3}
 800848c:	469e      	mov	lr, r3
 800848e:	4770      	bx	lr

08008490 <_fini>:
 8008490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008492:	bf00      	nop
 8008494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008496:	bc08      	pop	{r3}
 8008498:	469e      	mov	lr, r3
 800849a:	4770      	bx	lr
