
EDF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004108  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08004214  08004214  00005214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042e0  080042e0  0000606c  2**0
                  CONTENTS
  4 .ARM          00000000  080042e0  080042e0  0000606c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080042e0  080042e0  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042e0  080042e0  000052e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080042e4  080042e4  000052e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080042e8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  2000006c  08004354  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08004354  00006294  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b6ae  00000000  00000000  00006095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e05  00000000  00000000  00011743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  00013548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000877  00000000  00000000  00014030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178b2  00000000  00000000  000148a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d868  00000000  00000000  0002c159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000855d3  00000000  00000000  000399c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bef94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003150  00000000  00000000  000befd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000c2128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	080041fc 	.word	0x080041fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	080041fc 	.word	0x080041fc

0800014c <MPR121_Init>:
#include "MPR121.h"


uint8_t MPR121_Init(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
    
    writeRegister(MPR121_SOFTRESET, 0x63);
 8000152:	2163      	movs	r1, #99	@ 0x63
 8000154:	2080      	movs	r0, #128	@ 0x80
 8000156:	f000 f859 	bl	800020c <writeRegister>
    HAL_Delay(1);
 800015a:	2001      	movs	r0, #1
 800015c:	f000 feec 	bl	8000f38 <HAL_Delay>
    writeRegister(MPR121_ECR, 0x0);
 8000160:	2100      	movs	r1, #0
 8000162:	205e      	movs	r0, #94	@ 0x5e
 8000164:	f000 f852 	bl	800020c <writeRegister>

  uint8_t c = readRegister8(MPR121_CONFIG2);
 8000168:	205d      	movs	r0, #93	@ 0x5d
 800016a:	f000 f86b 	bl	8000244 <readRegister8>
 800016e:	4603      	mov	r3, r0
 8000170:	71fb      	strb	r3, [r7, #7]

  if (c != 0x24)
 8000172:	79fb      	ldrb	r3, [r7, #7]
 8000174:	2b24      	cmp	r3, #36	@ 0x24
 8000176:	d001      	beq.n	800017c <MPR121_Init+0x30>
    return c;
 8000178:	79fb      	ldrb	r3, [r7, #7]
 800017a:	e043      	b.n	8000204 <MPR121_Init+0xb8>

  setThresholds(MPR121_TOUCH_THRESHOLD_DEFAULT, MPR121_RELEASE_THRESHOLD_DEFAULT);
 800017c:	2106      	movs	r1, #6
 800017e:	200c      	movs	r0, #12
 8000180:	f000 f87c 	bl	800027c <setThresholds>
  writeRegister(MPR121_MHDR, 0x01);
 8000184:	2101      	movs	r1, #1
 8000186:	202b      	movs	r0, #43	@ 0x2b
 8000188:	f000 f840 	bl	800020c <writeRegister>
  writeRegister(MPR121_NHDR, 0x01);
 800018c:	2101      	movs	r1, #1
 800018e:	202c      	movs	r0, #44	@ 0x2c
 8000190:	f000 f83c 	bl	800020c <writeRegister>
  writeRegister(MPR121_NCLR, 0x0E);
 8000194:	210e      	movs	r1, #14
 8000196:	202d      	movs	r0, #45	@ 0x2d
 8000198:	f000 f838 	bl	800020c <writeRegister>
  writeRegister(MPR121_FDLR, 0x00);
 800019c:	2100      	movs	r1, #0
 800019e:	202e      	movs	r0, #46	@ 0x2e
 80001a0:	f000 f834 	bl	800020c <writeRegister>

  writeRegister(MPR121_MHDF, 0x01);
 80001a4:	2101      	movs	r1, #1
 80001a6:	202f      	movs	r0, #47	@ 0x2f
 80001a8:	f000 f830 	bl	800020c <writeRegister>
  writeRegister(MPR121_NHDF, 0x05);
 80001ac:	2105      	movs	r1, #5
 80001ae:	2030      	movs	r0, #48	@ 0x30
 80001b0:	f000 f82c 	bl	800020c <writeRegister>
  writeRegister(MPR121_NCLF, 0x01);
 80001b4:	2101      	movs	r1, #1
 80001b6:	2031      	movs	r0, #49	@ 0x31
 80001b8:	f000 f828 	bl	800020c <writeRegister>
  writeRegister(MPR121_FDLF, 0x00);
 80001bc:	2100      	movs	r1, #0
 80001be:	2032      	movs	r0, #50	@ 0x32
 80001c0:	f000 f824 	bl	800020c <writeRegister>

  writeRegister(MPR121_NHDT, 0x00);
 80001c4:	2100      	movs	r1, #0
 80001c6:	2033      	movs	r0, #51	@ 0x33
 80001c8:	f000 f820 	bl	800020c <writeRegister>
  writeRegister(MPR121_NCLT, 0x00);
 80001cc:	2100      	movs	r1, #0
 80001ce:	2034      	movs	r0, #52	@ 0x34
 80001d0:	f000 f81c 	bl	800020c <writeRegister>
  writeRegister(MPR121_FDLT, 0x00);
 80001d4:	2100      	movs	r1, #0
 80001d6:	2035      	movs	r0, #53	@ 0x35
 80001d8:	f000 f818 	bl	800020c <writeRegister>

  writeRegister(MPR121_DEBOUNCE, 0);
 80001dc:	2100      	movs	r1, #0
 80001de:	205b      	movs	r0, #91	@ 0x5b
 80001e0:	f000 f814 	bl	800020c <writeRegister>
  writeRegister(MPR121_CONFIG1, 0x10); // default, 16uA charge current
 80001e4:	2110      	movs	r1, #16
 80001e6:	205c      	movs	r0, #92	@ 0x5c
 80001e8:	f000 f810 	bl	800020c <writeRegister>
  writeRegister(MPR121_CONFIG2, 0x20); // 0.5uS encoding, 1ms period
 80001ec:	2120      	movs	r1, #32
 80001ee:	205d      	movs	r0, #93	@ 0x5d
 80001f0:	f000 f80c 	bl	800020c <writeRegister>
    uint8_t ECR_SETTING =
 80001f4:	238c      	movs	r3, #140	@ 0x8c
 80001f6:	71bb      	strb	r3, [r7, #6]
      B10000000 + 12; // 5 bits for baseline tracking & proximity disabled + X
                      // amount of electrodes running (12)
  writeRegister(MPR121_ECR, ECR_SETTING); // start with above ECR setting
 80001f8:	79bb      	ldrb	r3, [r7, #6]
 80001fa:	4619      	mov	r1, r3
 80001fc:	205e      	movs	r0, #94	@ 0x5e
 80001fe:	f000 f805 	bl	800020c <writeRegister>

    return c; 
 8000202:	79fb      	ldrb	r3, [r7, #7]
}
 8000204:	4618      	mov	r0, r3
 8000206:	3708      	adds	r7, #8
 8000208:	46bd      	mov	sp, r7
 800020a:	bd80      	pop	{r7, pc}

0800020c <writeRegister>:
    
//     uint16_t touchData = (touchStatus[1] << 8) | touchStatus[0];
//     return (touchData != 0) ? 1 : 0;
// }

void writeRegister(uint8_t reg, uint8_t cmd) {
 800020c:	b580      	push	{r7, lr}
 800020e:	b086      	sub	sp, #24
 8000210:	af04      	add	r7, sp, #16
 8000212:	4603      	mov	r3, r0
 8000214:	460a      	mov	r2, r1
 8000216:	71fb      	strb	r3, [r7, #7]
 8000218:	4613      	mov	r3, r2
 800021a:	71bb      	strb	r3, [r7, #6]
	// uint8_t arr[2] = { reg, cmd };
	// HAL_I2C_Master_Transmit(&hi2c1, MPR121_I2C_ADDR, arr, 2, HAL_MAX_DELAY);
    HAL_I2C_Mem_Write(&hi2c1, MPR121_I2C_ADDR|0x01,reg,1,&cmd,1,HAL_MAX_DELAY);
 800021c:	79fb      	ldrb	r3, [r7, #7]
 800021e:	b29a      	uxth	r2, r3
 8000220:	f04f 33ff 	mov.w	r3, #4294967295
 8000224:	9302      	str	r3, [sp, #8]
 8000226:	2301      	movs	r3, #1
 8000228:	9301      	str	r3, [sp, #4]
 800022a:	1dbb      	adds	r3, r7, #6
 800022c:	9300      	str	r3, [sp, #0]
 800022e:	2301      	movs	r3, #1
 8000230:	21b5      	movs	r1, #181	@ 0xb5
 8000232:	4803      	ldr	r0, [pc, #12]	@ (8000240 <writeRegister+0x34>)
 8000234:	f001 fdd2 	bl	8001ddc <HAL_I2C_Mem_Write>
}
 8000238:	bf00      	nop
 800023a:	3708      	adds	r7, #8
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}
 8000240:	200000a8 	.word	0x200000a8

08000244 <readRegister8>:
/**
 * @brief Reads from a specific register.
 * @param reg Address of register to read from.
 * @return Byte read.
 */
uint8_t readRegister8(uint8_t reg) {
 8000244:	b580      	push	{r7, lr}
 8000246:	b088      	sub	sp, #32
 8000248:	af04      	add	r7, sp, #16
 800024a:	4603      	mov	r3, r0
 800024c:	71fb      	strb	r3, [r7, #7]
	// HAL_I2C_Master_Transmit(&hi2c1, MPR121_I2C_ADDR, &reg, 1, HAL_MAX_DELAY);
	uint8_t result;
	// HAL_I2C_Master_Receive(&hi2c1, MPR121_I2C_ADDR, &result, 1, HAL_MAX_DELAY);
    HAL_I2C_Mem_Read(&hi2c1,MPR121_I2C_ADDR,reg,1,&result,1,HAL_MAX_DELAY);
 800024e:	79fb      	ldrb	r3, [r7, #7]
 8000250:	b29a      	uxth	r2, r3
 8000252:	f04f 33ff 	mov.w	r3, #4294967295
 8000256:	9302      	str	r3, [sp, #8]
 8000258:	2301      	movs	r3, #1
 800025a:	9301      	str	r3, [sp, #4]
 800025c:	f107 030f 	add.w	r3, r7, #15
 8000260:	9300      	str	r3, [sp, #0]
 8000262:	2301      	movs	r3, #1
 8000264:	21b4      	movs	r1, #180	@ 0xb4
 8000266:	4804      	ldr	r0, [pc, #16]	@ (8000278 <readRegister8+0x34>)
 8000268:	f001 feb2 	bl	8001fd0 <HAL_I2C_Mem_Read>
	return result;
 800026c:	7bfb      	ldrb	r3, [r7, #15]
}
 800026e:	4618      	mov	r0, r3
 8000270:	3710      	adds	r7, #16
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	200000a8 	.word	0x200000a8

0800027c <setThresholds>:
	uint16_t result;
    HAL_I2C_Mem_Read(&hi2c1,MPR121_I2C_ADDR,reg,1,(uint8_t*)&result,2,HAL_MAX_DELAY);
    return result;
}

void setThresholds(uint8_t touch, uint8_t release) {
 800027c:	b580      	push	{r7, lr}
 800027e:	b084      	sub	sp, #16
 8000280:	af00      	add	r7, sp, #0
 8000282:	4603      	mov	r3, r0
 8000284:	460a      	mov	r2, r1
 8000286:	71fb      	strb	r3, [r7, #7]
 8000288:	4613      	mov	r3, r2
 800028a:	71bb      	strb	r3, [r7, #6]
  // set all thresholds (the same)
  for (uint8_t i = 0; i < 12; i++) {
 800028c:	2300      	movs	r3, #0
 800028e:	73fb      	strb	r3, [r7, #15]
 8000290:	e016      	b.n	80002c0 <setThresholds+0x44>
    writeRegister(MPR121_TOUCHTH_0 + 2 * i, touch);
 8000292:	7bfb      	ldrb	r3, [r7, #15]
 8000294:	005b      	lsls	r3, r3, #1
 8000296:	b2db      	uxtb	r3, r3
 8000298:	3341      	adds	r3, #65	@ 0x41
 800029a:	b2db      	uxtb	r3, r3
 800029c:	79fa      	ldrb	r2, [r7, #7]
 800029e:	4611      	mov	r1, r2
 80002a0:	4618      	mov	r0, r3
 80002a2:	f7ff ffb3 	bl	800020c <writeRegister>
    writeRegister(MPR121_RELEASETH_0 + 2 * i, release);
 80002a6:	7bfb      	ldrb	r3, [r7, #15]
 80002a8:	3321      	adds	r3, #33	@ 0x21
 80002aa:	b2db      	uxtb	r3, r3
 80002ac:	005b      	lsls	r3, r3, #1
 80002ae:	b2db      	uxtb	r3, r3
 80002b0:	79ba      	ldrb	r2, [r7, #6]
 80002b2:	4611      	mov	r1, r2
 80002b4:	4618      	mov	r0, r3
 80002b6:	f7ff ffa9 	bl	800020c <writeRegister>
  for (uint8_t i = 0; i < 12; i++) {
 80002ba:	7bfb      	ldrb	r3, [r7, #15]
 80002bc:	3301      	adds	r3, #1
 80002be:	73fb      	strb	r3, [r7, #15]
 80002c0:	7bfb      	ldrb	r3, [r7, #15]
 80002c2:	2b0b      	cmp	r3, #11
 80002c4:	d9e5      	bls.n	8000292 <setThresholds+0x16>
  }
}
 80002c6:	bf00      	nop
 80002c8:	bf00      	nop
 80002ca:	3710      	adds	r7, #16
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <BMP180_Init>:

/**
 * @brief Initializes the BMP180 temperature/pressure sensor.
 * @param hi2c User I2C handle pointer.
 */
void BMP180_Init(I2C_HandleTypeDef *hi2c) {
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
	_bmp180_ui2c = hi2c;
 80002d8:	4a03      	ldr	r2, [pc, #12]	@ (80002e8 <BMP180_Init+0x18>)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	6013      	str	r3, [r2, #0]
}
 80002de:	bf00      	nop
 80002e0:	370c      	adds	r7, #12
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bc80      	pop	{r7}
 80002e6:	4770      	bx	lr
 80002e8:	20000088 	.word	0x20000088

080002ec <BMP180_SetOversampling>:
/**
 * @param oss Enum, oversampling setting.
 * @note Available resolutions: BMP180_LOW, BMP180_STANDARD, BMP180_HIGH, BMP180_ULTRA.
 * @note Refer to section 3.3.1 of datasheet.
 */
void BMP180_SetOversampling(BMP180_OSS oss) {
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	4603      	mov	r3, r0
 80002f4:	71fb      	strb	r3, [r7, #7]
	_bmp180_oss = oss;
 80002f6:	4a04      	ldr	r2, [pc, #16]	@ (8000308 <BMP180_SetOversampling+0x1c>)
 80002f8:	79fb      	ldrb	r3, [r7, #7]
 80002fa:	7013      	strb	r3, [r2, #0]
}
 80002fc:	bf00      	nop
 80002fe:	370c      	adds	r7, #12
 8000300:	46bd      	mov	sp, r7
 8000302:	bc80      	pop	{r7}
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	200000a2 	.word	0x200000a2

0800030c <BMP180_UpdateCalibrationData>:

/**
 * @brief Updates calibration data.
 * @note Must be called once before main loop.
 */
void BMP180_UpdateCalibrationData(void) {
 800030c:	b598      	push	{r3, r4, r7, lr}
 800030e:	af00      	add	r7, sp, #0
	_bmp180_eeprom.BMP180_AC1 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC1]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC1]);
 8000310:	23aa      	movs	r3, #170	@ 0xaa
 8000312:	4618      	mov	r0, r3
 8000314:	f000 f8be 	bl	8000494 <BMP180_ReadReg>
 8000318:	4603      	mov	r3, r0
 800031a:	021b      	lsls	r3, r3, #8
 800031c:	b21c      	sxth	r4, r3
 800031e:	23ab      	movs	r3, #171	@ 0xab
 8000320:	4618      	mov	r0, r3
 8000322:	f000 f8b7 	bl	8000494 <BMP180_ReadReg>
 8000326:	4603      	mov	r3, r0
 8000328:	b21b      	sxth	r3, r3
 800032a:	4323      	orrs	r3, r4
 800032c:	b21a      	sxth	r2, r3
 800032e:	4b58      	ldr	r3, [pc, #352]	@ (8000490 <BMP180_UpdateCalibrationData+0x184>)
 8000330:	801a      	strh	r2, [r3, #0]
	_bmp180_eeprom.BMP180_AC2 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC2]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC2]);
 8000332:	23ac      	movs	r3, #172	@ 0xac
 8000334:	4618      	mov	r0, r3
 8000336:	f000 f8ad 	bl	8000494 <BMP180_ReadReg>
 800033a:	4603      	mov	r3, r0
 800033c:	021b      	lsls	r3, r3, #8
 800033e:	b21c      	sxth	r4, r3
 8000340:	23ad      	movs	r3, #173	@ 0xad
 8000342:	4618      	mov	r0, r3
 8000344:	f000 f8a6 	bl	8000494 <BMP180_ReadReg>
 8000348:	4603      	mov	r3, r0
 800034a:	b21b      	sxth	r3, r3
 800034c:	4323      	orrs	r3, r4
 800034e:	b21a      	sxth	r2, r3
 8000350:	4b4f      	ldr	r3, [pc, #316]	@ (8000490 <BMP180_UpdateCalibrationData+0x184>)
 8000352:	805a      	strh	r2, [r3, #2]
	_bmp180_eeprom.BMP180_AC3 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC3]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC3]);
 8000354:	23ae      	movs	r3, #174	@ 0xae
 8000356:	4618      	mov	r0, r3
 8000358:	f000 f89c 	bl	8000494 <BMP180_ReadReg>
 800035c:	4603      	mov	r3, r0
 800035e:	021b      	lsls	r3, r3, #8
 8000360:	b21c      	sxth	r4, r3
 8000362:	23af      	movs	r3, #175	@ 0xaf
 8000364:	4618      	mov	r0, r3
 8000366:	f000 f895 	bl	8000494 <BMP180_ReadReg>
 800036a:	4603      	mov	r3, r0
 800036c:	b21b      	sxth	r3, r3
 800036e:	4323      	orrs	r3, r4
 8000370:	b21a      	sxth	r2, r3
 8000372:	4b47      	ldr	r3, [pc, #284]	@ (8000490 <BMP180_UpdateCalibrationData+0x184>)
 8000374:	809a      	strh	r2, [r3, #4]
	_bmp180_eeprom.BMP180_AC4 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC4]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC4]);
 8000376:	23b0      	movs	r3, #176	@ 0xb0
 8000378:	4618      	mov	r0, r3
 800037a:	f000 f88b 	bl	8000494 <BMP180_ReadReg>
 800037e:	4603      	mov	r3, r0
 8000380:	021b      	lsls	r3, r3, #8
 8000382:	b21c      	sxth	r4, r3
 8000384:	23b1      	movs	r3, #177	@ 0xb1
 8000386:	4618      	mov	r0, r3
 8000388:	f000 f884 	bl	8000494 <BMP180_ReadReg>
 800038c:	4603      	mov	r3, r0
 800038e:	b21b      	sxth	r3, r3
 8000390:	4323      	orrs	r3, r4
 8000392:	b21b      	sxth	r3, r3
 8000394:	b29a      	uxth	r2, r3
 8000396:	4b3e      	ldr	r3, [pc, #248]	@ (8000490 <BMP180_UpdateCalibrationData+0x184>)
 8000398:	80da      	strh	r2, [r3, #6]
	_bmp180_eeprom.BMP180_AC5 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC5]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC5]);
 800039a:	23b2      	movs	r3, #178	@ 0xb2
 800039c:	4618      	mov	r0, r3
 800039e:	f000 f879 	bl	8000494 <BMP180_ReadReg>
 80003a2:	4603      	mov	r3, r0
 80003a4:	021b      	lsls	r3, r3, #8
 80003a6:	b21c      	sxth	r4, r3
 80003a8:	23b3      	movs	r3, #179	@ 0xb3
 80003aa:	4618      	mov	r0, r3
 80003ac:	f000 f872 	bl	8000494 <BMP180_ReadReg>
 80003b0:	4603      	mov	r3, r0
 80003b2:	b21b      	sxth	r3, r3
 80003b4:	4323      	orrs	r3, r4
 80003b6:	b21b      	sxth	r3, r3
 80003b8:	b29a      	uxth	r2, r3
 80003ba:	4b35      	ldr	r3, [pc, #212]	@ (8000490 <BMP180_UpdateCalibrationData+0x184>)
 80003bc:	811a      	strh	r2, [r3, #8]
	_bmp180_eeprom.BMP180_AC6 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC6]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC6]);
 80003be:	23b4      	movs	r3, #180	@ 0xb4
 80003c0:	4618      	mov	r0, r3
 80003c2:	f000 f867 	bl	8000494 <BMP180_ReadReg>
 80003c6:	4603      	mov	r3, r0
 80003c8:	021b      	lsls	r3, r3, #8
 80003ca:	b21c      	sxth	r4, r3
 80003cc:	23b5      	movs	r3, #181	@ 0xb5
 80003ce:	4618      	mov	r0, r3
 80003d0:	f000 f860 	bl	8000494 <BMP180_ReadReg>
 80003d4:	4603      	mov	r3, r0
 80003d6:	b21b      	sxth	r3, r3
 80003d8:	4323      	orrs	r3, r4
 80003da:	b21b      	sxth	r3, r3
 80003dc:	b29a      	uxth	r2, r3
 80003de:	4b2c      	ldr	r3, [pc, #176]	@ (8000490 <BMP180_UpdateCalibrationData+0x184>)
 80003e0:	815a      	strh	r2, [r3, #10]
	_bmp180_eeprom.BMP180_B1 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B1]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_B1]);
 80003e2:	23b6      	movs	r3, #182	@ 0xb6
 80003e4:	4618      	mov	r0, r3
 80003e6:	f000 f855 	bl	8000494 <BMP180_ReadReg>
 80003ea:	4603      	mov	r3, r0
 80003ec:	021b      	lsls	r3, r3, #8
 80003ee:	b21c      	sxth	r4, r3
 80003f0:	23b7      	movs	r3, #183	@ 0xb7
 80003f2:	4618      	mov	r0, r3
 80003f4:	f000 f84e 	bl	8000494 <BMP180_ReadReg>
 80003f8:	4603      	mov	r3, r0
 80003fa:	b21b      	sxth	r3, r3
 80003fc:	4323      	orrs	r3, r4
 80003fe:	b21a      	sxth	r2, r3
 8000400:	4b23      	ldr	r3, [pc, #140]	@ (8000490 <BMP180_UpdateCalibrationData+0x184>)
 8000402:	819a      	strh	r2, [r3, #12]
	_bmp180_eeprom.BMP180_B2 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B2]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_B2]);
 8000404:	23b8      	movs	r3, #184	@ 0xb8
 8000406:	4618      	mov	r0, r3
 8000408:	f000 f844 	bl	8000494 <BMP180_ReadReg>
 800040c:	4603      	mov	r3, r0
 800040e:	021b      	lsls	r3, r3, #8
 8000410:	b21c      	sxth	r4, r3
 8000412:	23b9      	movs	r3, #185	@ 0xb9
 8000414:	4618      	mov	r0, r3
 8000416:	f000 f83d 	bl	8000494 <BMP180_ReadReg>
 800041a:	4603      	mov	r3, r0
 800041c:	b21b      	sxth	r3, r3
 800041e:	4323      	orrs	r3, r4
 8000420:	b21a      	sxth	r2, r3
 8000422:	4b1b      	ldr	r3, [pc, #108]	@ (8000490 <BMP180_UpdateCalibrationData+0x184>)
 8000424:	81da      	strh	r2, [r3, #14]
	_bmp180_eeprom.BMP180_MB = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MB]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MB]);
 8000426:	23ba      	movs	r3, #186	@ 0xba
 8000428:	4618      	mov	r0, r3
 800042a:	f000 f833 	bl	8000494 <BMP180_ReadReg>
 800042e:	4603      	mov	r3, r0
 8000430:	021b      	lsls	r3, r3, #8
 8000432:	b21c      	sxth	r4, r3
 8000434:	23bb      	movs	r3, #187	@ 0xbb
 8000436:	4618      	mov	r0, r3
 8000438:	f000 f82c 	bl	8000494 <BMP180_ReadReg>
 800043c:	4603      	mov	r3, r0
 800043e:	b21b      	sxth	r3, r3
 8000440:	4323      	orrs	r3, r4
 8000442:	b21a      	sxth	r2, r3
 8000444:	4b12      	ldr	r3, [pc, #72]	@ (8000490 <BMP180_UpdateCalibrationData+0x184>)
 8000446:	821a      	strh	r2, [r3, #16]
	_bmp180_eeprom.BMP180_MC = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MC]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MC]);
 8000448:	23bc      	movs	r3, #188	@ 0xbc
 800044a:	4618      	mov	r0, r3
 800044c:	f000 f822 	bl	8000494 <BMP180_ReadReg>
 8000450:	4603      	mov	r3, r0
 8000452:	021b      	lsls	r3, r3, #8
 8000454:	b21c      	sxth	r4, r3
 8000456:	23bd      	movs	r3, #189	@ 0xbd
 8000458:	4618      	mov	r0, r3
 800045a:	f000 f81b 	bl	8000494 <BMP180_ReadReg>
 800045e:	4603      	mov	r3, r0
 8000460:	b21b      	sxth	r3, r3
 8000462:	4323      	orrs	r3, r4
 8000464:	b21a      	sxth	r2, r3
 8000466:	4b0a      	ldr	r3, [pc, #40]	@ (8000490 <BMP180_UpdateCalibrationData+0x184>)
 8000468:	825a      	strh	r2, [r3, #18]
	_bmp180_eeprom.BMP180_MD = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MD]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MD]);
 800046a:	23be      	movs	r3, #190	@ 0xbe
 800046c:	4618      	mov	r0, r3
 800046e:	f000 f811 	bl	8000494 <BMP180_ReadReg>
 8000472:	4603      	mov	r3, r0
 8000474:	021b      	lsls	r3, r3, #8
 8000476:	b21c      	sxth	r4, r3
 8000478:	23bf      	movs	r3, #191	@ 0xbf
 800047a:	4618      	mov	r0, r3
 800047c:	f000 f80a 	bl	8000494 <BMP180_ReadReg>
 8000480:	4603      	mov	r3, r0
 8000482:	b21b      	sxth	r3, r3
 8000484:	4323      	orrs	r3, r4
 8000486:	b21a      	sxth	r2, r3
 8000488:	4b01      	ldr	r3, [pc, #4]	@ (8000490 <BMP180_UpdateCalibrationData+0x184>)
 800048a:	829a      	strh	r2, [r3, #20]
}
 800048c:	bf00      	nop
 800048e:	bd98      	pop	{r3, r4, r7, pc}
 8000490:	2000008c 	.word	0x2000008c

08000494 <BMP180_ReadReg>:
/**
 * @brief Reads from a specific register.
 * @param reg Address of register to read from.
 * @return Byte read.
 */
uint8_t BMP180_ReadReg(uint8_t reg) {
 8000494:	b580      	push	{r7, lr}
 8000496:	b086      	sub	sp, #24
 8000498:	af02      	add	r7, sp, #8
 800049a:	4603      	mov	r3, r0
 800049c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 800049e:	4b0d      	ldr	r3, [pc, #52]	@ (80004d4 <BMP180_ReadReg+0x40>)
 80004a0:	6818      	ldr	r0, [r3, #0]
 80004a2:	1dfa      	adds	r2, r7, #7
 80004a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	2301      	movs	r3, #1
 80004ac:	21ee      	movs	r1, #238	@ 0xee
 80004ae:	f001 f92b 	bl	8001708 <HAL_I2C_Master_Transmit>
	uint8_t result;
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 80004b2:	4b08      	ldr	r3, [pc, #32]	@ (80004d4 <BMP180_ReadReg+0x40>)
 80004b4:	6818      	ldr	r0, [r3, #0]
 80004b6:	f107 020f 	add.w	r2, r7, #15
 80004ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004be:	9300      	str	r3, [sp, #0]
 80004c0:	2301      	movs	r3, #1
 80004c2:	21ee      	movs	r1, #238	@ 0xee
 80004c4:	f001 fa1e 	bl	8001904 <HAL_I2C_Master_Receive>
	return result;
 80004c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80004ca:	4618      	mov	r0, r3
 80004cc:	3710      	adds	r7, #16
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	20000088 	.word	0x20000088

080004d8 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 80004e2:	4a38      	ldr	r2, [pc, #224]	@ (80005c4 <HD44780_Init+0xec>)
 80004e4:	79fb      	ldrb	r3, [r7, #7]
 80004e6:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 80004e8:	4b37      	ldr	r3, [pc, #220]	@ (80005c8 <HD44780_Init+0xf0>)
 80004ea:	2208      	movs	r2, #8
 80004ec:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80004ee:	4b37      	ldr	r3, [pc, #220]	@ (80005cc <HD44780_Init+0xf4>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 80004f4:	4b33      	ldr	r3, [pc, #204]	@ (80005c4 <HD44780_Init+0xec>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d907      	bls.n	800050c <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 80004fc:	4b33      	ldr	r3, [pc, #204]	@ (80005cc <HD44780_Init+0xf4>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	f043 0308 	orr.w	r3, r3, #8
 8000504:	b2da      	uxtb	r2, r3
 8000506:	4b31      	ldr	r3, [pc, #196]	@ (80005cc <HD44780_Init+0xf4>)
 8000508:	701a      	strb	r2, [r3, #0]
 800050a:	e006      	b.n	800051a <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 800050c:	4b2f      	ldr	r3, [pc, #188]	@ (80005cc <HD44780_Init+0xf4>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	f043 0304 	orr.w	r3, r3, #4
 8000514:	b2da      	uxtb	r2, r3
 8000516:	4b2d      	ldr	r3, [pc, #180]	@ (80005cc <HD44780_Init+0xf4>)
 8000518:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800051a:	f000 f985 	bl	8000828 <DelayInit>
  HAL_Delay(50);
 800051e:	2032      	movs	r0, #50	@ 0x32
 8000520:	f000 fd0a 	bl	8000f38 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000524:	4b28      	ldr	r3, [pc, #160]	@ (80005c8 <HD44780_Init+0xf0>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	4618      	mov	r0, r3
 800052a:	f000 f943 	bl	80007b4 <ExpanderWrite>
  HAL_Delay(1000);
 800052e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000532:	f000 fd01 	bl	8000f38 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000536:	2030      	movs	r0, #48	@ 0x30
 8000538:	f000 f92b 	bl	8000792 <Write4Bits>
  DelayUS(4500);
 800053c:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000540:	f000 f99a 	bl	8000878 <DelayUS>

  Write4Bits(0x03 << 4);
 8000544:	2030      	movs	r0, #48	@ 0x30
 8000546:	f000 f924 	bl	8000792 <Write4Bits>
  DelayUS(4500);
 800054a:	f241 1094 	movw	r0, #4500	@ 0x1194
 800054e:	f000 f993 	bl	8000878 <DelayUS>

  Write4Bits(0x03 << 4);
 8000552:	2030      	movs	r0, #48	@ 0x30
 8000554:	f000 f91d 	bl	8000792 <Write4Bits>
  DelayUS(4500);
 8000558:	f241 1094 	movw	r0, #4500	@ 0x1194
 800055c:	f000 f98c 	bl	8000878 <DelayUS>

  Write4Bits(0x02 << 4);
 8000560:	2020      	movs	r0, #32
 8000562:	f000 f916 	bl	8000792 <Write4Bits>
  DelayUS(100);
 8000566:	2064      	movs	r0, #100	@ 0x64
 8000568:	f000 f986 	bl	8000878 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 800056c:	4b17      	ldr	r3, [pc, #92]	@ (80005cc <HD44780_Init+0xf4>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	f043 0320 	orr.w	r3, r3, #32
 8000574:	b2db      	uxtb	r3, r3
 8000576:	4618      	mov	r0, r3
 8000578:	f000 f8ce 	bl	8000718 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800057c:	4b14      	ldr	r3, [pc, #80]	@ (80005d0 <HD44780_Init+0xf8>)
 800057e:	2204      	movs	r2, #4
 8000580:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000582:	f000 f875 	bl	8000670 <HD44780_Display>
  HD44780_Clear();
 8000586:	f000 f82b 	bl	80005e0 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800058a:	4b12      	ldr	r3, [pc, #72]	@ (80005d4 <HD44780_Init+0xfc>)
 800058c:	2202      	movs	r2, #2
 800058e:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000590:	4b10      	ldr	r3, [pc, #64]	@ (80005d4 <HD44780_Init+0xfc>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	f043 0304 	orr.w	r3, r3, #4
 8000598:	b2db      	uxtb	r3, r3
 800059a:	4618      	mov	r0, r3
 800059c:	f000 f8bc 	bl	8000718 <SendCommand>
  DelayUS(4500);
 80005a0:	f241 1094 	movw	r0, #4500	@ 0x1194
 80005a4:	f000 f968 	bl	8000878 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 80005a8:	490b      	ldr	r1, [pc, #44]	@ (80005d8 <HD44780_Init+0x100>)
 80005aa:	2000      	movs	r0, #0
 80005ac:	f000 f876 	bl	800069c <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80005b0:	490a      	ldr	r1, [pc, #40]	@ (80005dc <HD44780_Init+0x104>)
 80005b2:	2001      	movs	r0, #1
 80005b4:	f000 f872 	bl	800069c <HD44780_CreateSpecialChar>

  HD44780_Home();
 80005b8:	f000 f81d 	bl	80005f6 <HD44780_Home>
}
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	200000a6 	.word	0x200000a6
 80005c8:	200000a7 	.word	0x200000a7
 80005cc:	200000a3 	.word	0x200000a3
 80005d0:	200000a4 	.word	0x200000a4
 80005d4:	200000a5 	.word	0x200000a5
 80005d8:	20000000 	.word	0x20000000
 80005dc:	20000008 	.word	0x20000008

080005e0 <HD44780_Clear>:

void HD44780_Clear()
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 80005e4:	2001      	movs	r0, #1
 80005e6:	f000 f897 	bl	8000718 <SendCommand>
  DelayUS(2000);
 80005ea:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80005ee:	f000 f943 	bl	8000878 <DelayUS>
}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}

080005f6 <HD44780_Home>:

void HD44780_Home()
{
 80005f6:	b580      	push	{r7, lr}
 80005f8:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80005fa:	2002      	movs	r0, #2
 80005fc:	f000 f88c 	bl	8000718 <SendCommand>
  DelayUS(2000);
 8000600:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000604:	f000 f938 	bl	8000878 <DelayUS>
}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}

0800060c <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 800060c:	b590      	push	{r4, r7, lr}
 800060e:	b087      	sub	sp, #28
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	460a      	mov	r2, r1
 8000616:	71fb      	strb	r3, [r7, #7]
 8000618:	4613      	mov	r3, r2
 800061a:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 800061c:	4b12      	ldr	r3, [pc, #72]	@ (8000668 <HD44780_SetCursor+0x5c>)
 800061e:	f107 0408 	add.w	r4, r7, #8
 8000622:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000624:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000628:	4b10      	ldr	r3, [pc, #64]	@ (800066c <HD44780_SetCursor+0x60>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	79ba      	ldrb	r2, [r7, #6]
 800062e:	429a      	cmp	r2, r3
 8000630:	d303      	bcc.n	800063a <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000632:	4b0e      	ldr	r3, [pc, #56]	@ (800066c <HD44780_SetCursor+0x60>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	3b01      	subs	r3, #1
 8000638:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800063a:	79bb      	ldrb	r3, [r7, #6]
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	3318      	adds	r3, #24
 8000640:	443b      	add	r3, r7
 8000642:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000646:	b2da      	uxtb	r2, r3
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	4413      	add	r3, r2
 800064c:	b2db      	uxtb	r3, r3
 800064e:	b25b      	sxtb	r3, r3
 8000650:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000654:	b25b      	sxtb	r3, r3
 8000656:	b2db      	uxtb	r3, r3
 8000658:	4618      	mov	r0, r3
 800065a:	f000 f85d 	bl	8000718 <SendCommand>
}
 800065e:	bf00      	nop
 8000660:	371c      	adds	r7, #28
 8000662:	46bd      	mov	sp, r7
 8000664:	bd90      	pop	{r4, r7, pc}
 8000666:	bf00      	nop
 8000668:	08004214 	.word	0x08004214
 800066c:	200000a6 	.word	0x200000a6

08000670 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000674:	4b08      	ldr	r3, [pc, #32]	@ (8000698 <HD44780_Display+0x28>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	f043 0304 	orr.w	r3, r3, #4
 800067c:	b2da      	uxtb	r2, r3
 800067e:	4b06      	ldr	r3, [pc, #24]	@ (8000698 <HD44780_Display+0x28>)
 8000680:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000682:	4b05      	ldr	r3, [pc, #20]	@ (8000698 <HD44780_Display+0x28>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	f043 0308 	orr.w	r3, r3, #8
 800068a:	b2db      	uxtb	r3, r3
 800068c:	4618      	mov	r0, r3
 800068e:	f000 f843 	bl	8000718 <SendCommand>
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	200000a4 	.word	0x200000a4

0800069c <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	6039      	str	r1, [r7, #0]
 80006a6:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	f003 0307 	and.w	r3, r3, #7
 80006ae:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	00db      	lsls	r3, r3, #3
 80006b4:	b25b      	sxtb	r3, r3
 80006b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006ba:	b25b      	sxtb	r3, r3
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 f82a 	bl	8000718 <SendCommand>
  for (int i=0; i<8; i++)
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	e009      	b.n	80006de <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	683a      	ldr	r2, [r7, #0]
 80006ce:	4413      	add	r3, r2
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	4618      	mov	r0, r3
 80006d4:	f000 f82e 	bl	8000734 <SendChar>
  for (int i=0; i<8; i++)
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	3301      	adds	r3, #1
 80006dc:	60fb      	str	r3, [r7, #12]
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	2b07      	cmp	r3, #7
 80006e2:	ddf2      	ble.n	80006ca <HD44780_CreateSpecialChar+0x2e>
  }
}
 80006e4:	bf00      	nop
 80006e6:	bf00      	nop
 80006e8:	3710      	adds	r7, #16
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}

080006ee <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b082      	sub	sp, #8
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80006f6:	e006      	b.n	8000706 <HD44780_PrintStr+0x18>
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	1c5a      	adds	r2, r3, #1
 80006fc:	607a      	str	r2, [r7, #4]
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	4618      	mov	r0, r3
 8000702:	f000 f817 	bl	8000734 <SendChar>
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d1f4      	bne.n	80006f8 <HD44780_PrintStr+0xa>
}
 800070e:	bf00      	nop
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f000 f812 	bl	8000750 <Send>
}
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	2101      	movs	r1, #1
 8000742:	4618      	mov	r0, r3
 8000744:	f000 f804 	bl	8000750 <Send>
}
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	460a      	mov	r2, r1
 800075a:	71fb      	strb	r3, [r7, #7]
 800075c:	4613      	mov	r3, r2
 800075e:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	f023 030f 	bic.w	r3, r3, #15
 8000766:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	011b      	lsls	r3, r3, #4
 800076c:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 800076e:	7bfa      	ldrb	r2, [r7, #15]
 8000770:	79bb      	ldrb	r3, [r7, #6]
 8000772:	4313      	orrs	r3, r2
 8000774:	b2db      	uxtb	r3, r3
 8000776:	4618      	mov	r0, r3
 8000778:	f000 f80b 	bl	8000792 <Write4Bits>
  Write4Bits((lownib)|mode);
 800077c:	7bba      	ldrb	r2, [r7, #14]
 800077e:	79bb      	ldrb	r3, [r7, #6]
 8000780:	4313      	orrs	r3, r2
 8000782:	b2db      	uxtb	r3, r3
 8000784:	4618      	mov	r0, r3
 8000786:	f000 f804 	bl	8000792 <Write4Bits>
}
 800078a:	bf00      	nop
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	b082      	sub	sp, #8
 8000796:	af00      	add	r7, sp, #0
 8000798:	4603      	mov	r3, r0
 800079a:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 f808 	bl	80007b4 <ExpanderWrite>
  PulseEnable(value);
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	4618      	mov	r0, r3
 80007a8:	f000 f820 	bl	80007ec <PulseEnable>
}
 80007ac:	bf00      	nop
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af02      	add	r7, sp, #8
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 80007be:	4b09      	ldr	r3, [pc, #36]	@ (80007e4 <ExpanderWrite+0x30>)
 80007c0:	781a      	ldrb	r2, [r3, #0]
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	4313      	orrs	r3, r2
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80007ca:	f107 020f 	add.w	r2, r7, #15
 80007ce:	230a      	movs	r3, #10
 80007d0:	9300      	str	r3, [sp, #0]
 80007d2:	2301      	movs	r3, #1
 80007d4:	214e      	movs	r1, #78	@ 0x4e
 80007d6:	4804      	ldr	r0, [pc, #16]	@ (80007e8 <ExpanderWrite+0x34>)
 80007d8:	f000 ff96 	bl	8001708 <HAL_I2C_Master_Transmit>
}
 80007dc:	bf00      	nop
 80007de:	3710      	adds	r7, #16
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	200000a7 	.word	0x200000a7
 80007e8:	200000a8 	.word	0x200000a8

080007ec <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	f043 0304 	orr.w	r3, r3, #4
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff ffd8 	bl	80007b4 <ExpanderWrite>
  DelayUS(20);
 8000804:	2014      	movs	r0, #20
 8000806:	f000 f837 	bl	8000878 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	f023 0304 	bic.w	r3, r3, #4
 8000810:	b2db      	uxtb	r3, r3
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff ffce 	bl	80007b4 <ExpanderWrite>
  DelayUS(20);
 8000818:	2014      	movs	r0, #20
 800081a:	f000 f82d 	bl	8000878 <DelayUS>
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
	...

08000828 <DelayInit>:

static void DelayInit(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 800082c:	4b10      	ldr	r3, [pc, #64]	@ (8000870 <DelayInit+0x48>)
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	4a0f      	ldr	r2, [pc, #60]	@ (8000870 <DelayInit+0x48>)
 8000832:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000836:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000838:	4b0d      	ldr	r3, [pc, #52]	@ (8000870 <DelayInit+0x48>)
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	4a0c      	ldr	r2, [pc, #48]	@ (8000870 <DelayInit+0x48>)
 800083e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000842:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000844:	4b0b      	ldr	r3, [pc, #44]	@ (8000874 <DelayInit+0x4c>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a0a      	ldr	r2, [pc, #40]	@ (8000874 <DelayInit+0x4c>)
 800084a:	f023 0301 	bic.w	r3, r3, #1
 800084e:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000850:	4b08      	ldr	r3, [pc, #32]	@ (8000874 <DelayInit+0x4c>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a07      	ldr	r2, [pc, #28]	@ (8000874 <DelayInit+0x4c>)
 8000856:	f043 0301 	orr.w	r3, r3, #1
 800085a:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 800085c:	4b05      	ldr	r3, [pc, #20]	@ (8000874 <DelayInit+0x4c>)
 800085e:	2200      	movs	r2, #0
 8000860:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000862:	bf00      	nop
  __ASM volatile ("NOP");
 8000864:	bf00      	nop
  __ASM volatile ("NOP");
 8000866:	bf00      	nop
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr
 8000870:	e000edf0 	.word	0xe000edf0
 8000874:	e0001000 	.word	0xe0001000

08000878 <DelayUS>:

static void DelayUS(uint32_t us) {
 8000878:	b480      	push	{r7}
 800087a:	b087      	sub	sp, #28
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000880:	4b0d      	ldr	r3, [pc, #52]	@ (80008b8 <DelayUS+0x40>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a0d      	ldr	r2, [pc, #52]	@ (80008bc <DelayUS+0x44>)
 8000886:	fba2 2303 	umull	r2, r3, r2, r3
 800088a:	0c9a      	lsrs	r2, r3, #18
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	fb02 f303 	mul.w	r3, r2, r3
 8000892:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000894:	4b0a      	ldr	r3, [pc, #40]	@ (80008c0 <DelayUS+0x48>)
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800089a:	4b09      	ldr	r3, [pc, #36]	@ (80008c0 <DelayUS+0x48>)
 800089c:	685a      	ldr	r2, [r3, #4]
 800089e:	693b      	ldr	r3, [r7, #16]
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	697a      	ldr	r2, [r7, #20]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d8f6      	bhi.n	800089a <DelayUS+0x22>
}
 80008ac:	bf00      	nop
 80008ae:	bf00      	nop
 80008b0:	371c      	adds	r7, #28
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr
 80008b8:	20000010 	.word	0x20000010
 80008bc:	431bde83 	.word	0x431bde83
 80008c0:	e0001000 	.word	0xe0001000

080008c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c4:	b590      	push	{r4, r7, lr}
 80008c6:	b0b7      	sub	sp, #220	@ 0xdc
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ca:	f000 fad3 	bl	8000e74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ce:	f000 f88b 	bl	80009e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d2:	f000 f927 	bl	8000b24 <MX_GPIO_Init>
  MX_I2C1_Init();
 80008d6:	f000 f8cd 	bl	8000a74 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80008da:	f000 f8f9 	bl	8000ad0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init(2);
 80008de:	2002      	movs	r0, #2
 80008e0:	f7ff fdfa 	bl	80004d8 <HD44780_Init>
  MPR121_Init();
 80008e4:	f7ff fc32 	bl	800014c <MPR121_Init>
  BMP180_Init(&hi2c1);
 80008e8:	4838      	ldr	r0, [pc, #224]	@ (80009cc <main+0x108>)
 80008ea:	f7ff fcf1 	bl	80002d0 <BMP180_Init>
  MPR121_Init();
 80008ee:	f7ff fc2d 	bl	800014c <MPR121_Init>
  BMP180_SetOversampling(BMP180_ULTRA);
 80008f2:	2003      	movs	r0, #3
 80008f4:	f7ff fcfa 	bl	80002ec <BMP180_SetOversampling>
  BMP180_UpdateCalibrationData();
 80008f8:	f7ff fd08 	bl	800030c <BMP180_UpdateCalibrationData>
  HD44780_SetCursor(0,0);
 80008fc:	2100      	movs	r1, #0
 80008fe:	2000      	movs	r0, #0
 8000900:	f7ff fe84 	bl	800060c <HD44780_SetCursor>
  HD44780_PrintStr("INIT LCD 1602");
 8000904:	4832      	ldr	r0, [pc, #200]	@ (80009d0 <main+0x10c>)
 8000906:	f7ff fef2 	bl	80006ee <HD44780_PrintStr>
  char tx_buff[100] = "TVBAC 212700";
 800090a:	4a32      	ldr	r2, [pc, #200]	@ (80009d4 <main+0x110>)
 800090c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000910:	4614      	mov	r4, r2
 8000912:	6820      	ldr	r0, [r4, #0]
 8000914:	6861      	ldr	r1, [r4, #4]
 8000916:	68a2      	ldr	r2, [r4, #8]
 8000918:	c307      	stmia	r3!, {r0, r1, r2}
 800091a:	7b22      	ldrb	r2, [r4, #12]
 800091c:	701a      	strb	r2, [r3, #0]
 800091e:	f107 0375 	add.w	r3, r7, #117	@ 0x75
 8000922:	2257      	movs	r2, #87	@ 0x57
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f002 ffd8 	bl	80038dc <memset>
  unsigned long t1 = DWT->CYCCNT;
 800092c:	4b2a      	ldr	r3, [pc, #168]	@ (80009d8 <main+0x114>)
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  /* do something */
  unsigned long t2 = DWT->CYCCNT;
 8000934:	4b28      	ldr	r3, [pc, #160]	@ (80009d8 <main+0x114>)
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  unsigned long diff = t2 - t1;
 800093c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000940:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000944:	1ad3      	subs	r3, r2, r3
 8000946:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  char tx[100] = "1";
 800094a:	2331      	movs	r3, #49	@ 0x31
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	f107 0308 	add.w	r3, r7, #8
 8000952:	2260      	movs	r2, #96	@ 0x60
 8000954:	2100      	movs	r1, #0
 8000956:	4618      	mov	r0, r3
 8000958:	f002 ffc0 	bl	80038dc <memset>
	  t1 = DWT->CYCCNT;
 800095c:	4b1e      	ldr	r3, [pc, #120]	@ (80009d8 <main+0x114>)
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
	  HD44780_SetCursor(0,0);
 8000964:	2100      	movs	r1, #0
 8000966:	2000      	movs	r0, #0
 8000968:	f7ff fe50 	bl	800060c <HD44780_SetCursor>
	  HD44780_PrintStr("1111111111111111");
 800096c:	481b      	ldr	r0, [pc, #108]	@ (80009dc <main+0x118>)
 800096e:	f7ff febe 	bl	80006ee <HD44780_PrintStr>
//	  touched();
//	  int32_t temperature = BMP180_GetRawTemperature();
//	  int32_t pressure = BMP180_GetPressure();
//	  HAL_UART_Transmit(&huart1, (uint8_t *)&tx, strlen(tx) , 1000);
	  t2 = DWT->CYCCNT;
 8000972:	4b19      	ldr	r3, [pc, #100]	@ (80009d8 <main+0x114>)
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	  diff = t2 - t1;
 800097a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800097e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000982:	1ad3      	subs	r3, r2, r3
 8000984:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	  memset((void*)tx_buff,0,sizeof(tx_buff));
 8000988:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800098c:	2264      	movs	r2, #100	@ 0x64
 800098e:	2100      	movs	r1, #0
 8000990:	4618      	mov	r0, r3
 8000992:	f002 ffa3 	bl	80038dc <memset>
	  sprintf(tx_buff, "[%ld]", diff/72);
 8000996:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800099a:	4a11      	ldr	r2, [pc, #68]	@ (80009e0 <main+0x11c>)
 800099c:	fba2 2303 	umull	r2, r3, r2, r3
 80009a0:	091a      	lsrs	r2, r3, #4
 80009a2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80009a6:	490f      	ldr	r1, [pc, #60]	@ (80009e4 <main+0x120>)
 80009a8:	4618      	mov	r0, r3
 80009aa:	f002 ff77 	bl	800389c <siprintf>
	  HD44780_SetCursor(0,1);
 80009ae:	2101      	movs	r1, #1
 80009b0:	2000      	movs	r0, #0
 80009b2:	f7ff fe2b 	bl	800060c <HD44780_SetCursor>
	  HD44780_PrintStr(tx_buff);
 80009b6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff fe97 	bl	80006ee <HD44780_PrintStr>
//		  diff = t2 - t1;
//		  sprintf(tx_buff, "] %d]]]%ld\n",i, diff/72);
//		  HAL_UART_Transmit(&huart1, (uint8_t *)&tx_buff, strlen(tx_buff) , 1000);
//		  HD44780_SetCursor(0,1);
//		  HD44780_PrintStr(tx_buff);
		  HAL_Delay(50);
 80009c0:	2032      	movs	r0, #50	@ 0x32
 80009c2:	f000 fab9 	bl	8000f38 <HAL_Delay>
  {
 80009c6:	bf00      	nop
 80009c8:	e7bf      	b.n	800094a <main+0x86>
 80009ca:	bf00      	nop
 80009cc:	200000a8 	.word	0x200000a8
 80009d0:	08004244 	.word	0x08004244
 80009d4:	08004270 	.word	0x08004270
 80009d8:	e0001000 	.word	0xe0001000
 80009dc:	08004254 	.word	0x08004254
 80009e0:	38e38e39 	.word	0x38e38e39
 80009e4:	08004268 	.word	0x08004268

080009e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b090      	sub	sp, #64	@ 0x40
 80009ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ee:	f107 0318 	add.w	r3, r7, #24
 80009f2:	2228      	movs	r2, #40	@ 0x28
 80009f4:	2100      	movs	r1, #0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f002 ff70 	bl	80038dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009fc:	1d3b      	adds	r3, r7, #4
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
 8000a08:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a0e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a12:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a14:	2300      	movs	r3, #0
 8000a16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a20:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a24:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a26:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a2c:	f107 0318 	add.w	r3, r7, #24
 8000a30:	4618      	mov	r0, r3
 8000a32:	f002 fa45 	bl	8002ec0 <HAL_RCC_OscConfig>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000a3c:	f000 f8ca 	bl	8000bd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a40:	230f      	movs	r3, #15
 8000a42:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a44:	2302      	movs	r3, #2
 8000a46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a52:	2300      	movs	r3, #0
 8000a54:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	2102      	movs	r1, #2
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f002 fcb2 	bl	80033c4 <HAL_RCC_ClockConfig>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a66:	f000 f8b5 	bl	8000bd4 <Error_Handler>
  }
}
 8000a6a:	bf00      	nop
 8000a6c:	3740      	adds	r7, #64	@ 0x40
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
	...

08000a74 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a78:	4b12      	ldr	r3, [pc, #72]	@ (8000ac4 <MX_I2C1_Init+0x50>)
 8000a7a:	4a13      	ldr	r2, [pc, #76]	@ (8000ac8 <MX_I2C1_Init+0x54>)
 8000a7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a7e:	4b11      	ldr	r3, [pc, #68]	@ (8000ac4 <MX_I2C1_Init+0x50>)
 8000a80:	4a12      	ldr	r2, [pc, #72]	@ (8000acc <MX_I2C1_Init+0x58>)
 8000a82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a84:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac4 <MX_I2C1_Init+0x50>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac4 <MX_I2C1_Init+0x50>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac4 <MX_I2C1_Init+0x50>)
 8000a92:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a98:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac4 <MX_I2C1_Init+0x50>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a9e:	4b09      	ldr	r3, [pc, #36]	@ (8000ac4 <MX_I2C1_Init+0x50>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aa4:	4b07      	ldr	r3, [pc, #28]	@ (8000ac4 <MX_I2C1_Init+0x50>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aaa:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <MX_I2C1_Init+0x50>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ab0:	4804      	ldr	r0, [pc, #16]	@ (8000ac4 <MX_I2C1_Init+0x50>)
 8000ab2:	f000 fce5 	bl	8001480 <HAL_I2C_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000abc:	f000 f88a 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	200000a8 	.word	0x200000a8
 8000ac8:	40005400 	.word	0x40005400
 8000acc:	000186a0 	.word	0x000186a0

08000ad0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ad4:	4b11      	ldr	r3, [pc, #68]	@ (8000b1c <MX_USART1_UART_Init+0x4c>)
 8000ad6:	4a12      	ldr	r2, [pc, #72]	@ (8000b20 <MX_USART1_UART_Init+0x50>)
 8000ad8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ada:	4b10      	ldr	r3, [pc, #64]	@ (8000b1c <MX_USART1_UART_Init+0x4c>)
 8000adc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ae0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b1c <MX_USART1_UART_Init+0x4c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b1c <MX_USART1_UART_Init+0x4c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aee:	4b0b      	ldr	r3, [pc, #44]	@ (8000b1c <MX_USART1_UART_Init+0x4c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000af4:	4b09      	ldr	r3, [pc, #36]	@ (8000b1c <MX_USART1_UART_Init+0x4c>)
 8000af6:	220c      	movs	r2, #12
 8000af8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afa:	4b08      	ldr	r3, [pc, #32]	@ (8000b1c <MX_USART1_UART_Init+0x4c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b00:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <MX_USART1_UART_Init+0x4c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b06:	4805      	ldr	r0, [pc, #20]	@ (8000b1c <MX_USART1_UART_Init+0x4c>)
 8000b08:	f002 fdea 	bl	80036e0 <HAL_UART_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b12:	f000 f85f 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	200000fc 	.word	0x200000fc
 8000b20:	40013800 	.word	0x40013800

08000b24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b088      	sub	sp, #32
 8000b28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2a:	f107 0310 	add.w	r3, r7, #16
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b38:	4b24      	ldr	r3, [pc, #144]	@ (8000bcc <MX_GPIO_Init+0xa8>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	4a23      	ldr	r2, [pc, #140]	@ (8000bcc <MX_GPIO_Init+0xa8>)
 8000b3e:	f043 0310 	orr.w	r3, r3, #16
 8000b42:	6193      	str	r3, [r2, #24]
 8000b44:	4b21      	ldr	r3, [pc, #132]	@ (8000bcc <MX_GPIO_Init+0xa8>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	f003 0310 	and.w	r3, r3, #16
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b50:	4b1e      	ldr	r3, [pc, #120]	@ (8000bcc <MX_GPIO_Init+0xa8>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	4a1d      	ldr	r2, [pc, #116]	@ (8000bcc <MX_GPIO_Init+0xa8>)
 8000b56:	f043 0320 	orr.w	r3, r3, #32
 8000b5a:	6193      	str	r3, [r2, #24]
 8000b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bcc <MX_GPIO_Init+0xa8>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	f003 0320 	and.w	r3, r3, #32
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b68:	4b18      	ldr	r3, [pc, #96]	@ (8000bcc <MX_GPIO_Init+0xa8>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	4a17      	ldr	r2, [pc, #92]	@ (8000bcc <MX_GPIO_Init+0xa8>)
 8000b6e:	f043 0304 	orr.w	r3, r3, #4
 8000b72:	6193      	str	r3, [r2, #24]
 8000b74:	4b15      	ldr	r3, [pc, #84]	@ (8000bcc <MX_GPIO_Init+0xa8>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	f003 0304 	and.w	r3, r3, #4
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b80:	4b12      	ldr	r3, [pc, #72]	@ (8000bcc <MX_GPIO_Init+0xa8>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	4a11      	ldr	r2, [pc, #68]	@ (8000bcc <MX_GPIO_Init+0xa8>)
 8000b86:	f043 0308 	orr.w	r3, r3, #8
 8000b8a:	6193      	str	r3, [r2, #24]
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bcc <MX_GPIO_Init+0xa8>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	f003 0308 	and.w	r3, r3, #8
 8000b94:	603b      	str	r3, [r7, #0]
 8000b96:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b9e:	480c      	ldr	r0, [pc, #48]	@ (8000bd0 <MX_GPIO_Init+0xac>)
 8000ba0:	f000 fc56 	bl	8001450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ba4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ba8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000baa:	2301      	movs	r3, #1
 8000bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb6:	f107 0310 	add.w	r3, r7, #16
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4804      	ldr	r0, [pc, #16]	@ (8000bd0 <MX_GPIO_Init+0xac>)
 8000bbe:	f000 fac3 	bl	8001148 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bc2:	bf00      	nop
 8000bc4:	3720      	adds	r7, #32
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	40011000 	.word	0x40011000

08000bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd8:	b672      	cpsid	i
}
 8000bda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <Error_Handler+0x8>

08000be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000be6:	4b15      	ldr	r3, [pc, #84]	@ (8000c3c <HAL_MspInit+0x5c>)
 8000be8:	699b      	ldr	r3, [r3, #24]
 8000bea:	4a14      	ldr	r2, [pc, #80]	@ (8000c3c <HAL_MspInit+0x5c>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	6193      	str	r3, [r2, #24]
 8000bf2:	4b12      	ldr	r3, [pc, #72]	@ (8000c3c <HAL_MspInit+0x5c>)
 8000bf4:	699b      	ldr	r3, [r3, #24]
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	60bb      	str	r3, [r7, #8]
 8000bfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8000c3c <HAL_MspInit+0x5c>)
 8000c00:	69db      	ldr	r3, [r3, #28]
 8000c02:	4a0e      	ldr	r2, [pc, #56]	@ (8000c3c <HAL_MspInit+0x5c>)
 8000c04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c08:	61d3      	str	r3, [r2, #28]
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c3c <HAL_MspInit+0x5c>)
 8000c0c:	69db      	ldr	r3, [r3, #28]
 8000c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c16:	4b0a      	ldr	r3, [pc, #40]	@ (8000c40 <HAL_MspInit+0x60>)
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	4a04      	ldr	r2, [pc, #16]	@ (8000c40 <HAL_MspInit+0x60>)
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c32:	bf00      	nop
 8000c34:	3714      	adds	r7, #20
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	40010000 	.word	0x40010000

08000c44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b088      	sub	sp, #32
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 0310 	add.w	r3, r7, #16
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a15      	ldr	r2, [pc, #84]	@ (8000cb4 <HAL_I2C_MspInit+0x70>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d123      	bne.n	8000cac <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c64:	4b14      	ldr	r3, [pc, #80]	@ (8000cb8 <HAL_I2C_MspInit+0x74>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	4a13      	ldr	r2, [pc, #76]	@ (8000cb8 <HAL_I2C_MspInit+0x74>)
 8000c6a:	f043 0308 	orr.w	r3, r3, #8
 8000c6e:	6193      	str	r3, [r2, #24]
 8000c70:	4b11      	ldr	r3, [pc, #68]	@ (8000cb8 <HAL_I2C_MspInit+0x74>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	f003 0308 	and.w	r3, r3, #8
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c7c:	23c0      	movs	r3, #192	@ 0xc0
 8000c7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c80:	2312      	movs	r3, #18
 8000c82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c84:	2303      	movs	r3, #3
 8000c86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c88:	f107 0310 	add.w	r3, r7, #16
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	480b      	ldr	r0, [pc, #44]	@ (8000cbc <HAL_I2C_MspInit+0x78>)
 8000c90:	f000 fa5a 	bl	8001148 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c94:	4b08      	ldr	r3, [pc, #32]	@ (8000cb8 <HAL_I2C_MspInit+0x74>)
 8000c96:	69db      	ldr	r3, [r3, #28]
 8000c98:	4a07      	ldr	r2, [pc, #28]	@ (8000cb8 <HAL_I2C_MspInit+0x74>)
 8000c9a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c9e:	61d3      	str	r3, [r2, #28]
 8000ca0:	4b05      	ldr	r3, [pc, #20]	@ (8000cb8 <HAL_I2C_MspInit+0x74>)
 8000ca2:	69db      	ldr	r3, [r3, #28]
 8000ca4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000cac:	bf00      	nop
 8000cae:	3720      	adds	r7, #32
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40005400 	.word	0x40005400
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	40010c00 	.word	0x40010c00

08000cc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b088      	sub	sp, #32
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 0310 	add.w	r3, r7, #16
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a1c      	ldr	r2, [pc, #112]	@ (8000d4c <HAL_UART_MspInit+0x8c>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d131      	bne.n	8000d44 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d50 <HAL_UART_MspInit+0x90>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	4a1a      	ldr	r2, [pc, #104]	@ (8000d50 <HAL_UART_MspInit+0x90>)
 8000ce6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cea:	6193      	str	r3, [r2, #24]
 8000cec:	4b18      	ldr	r3, [pc, #96]	@ (8000d50 <HAL_UART_MspInit+0x90>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf8:	4b15      	ldr	r3, [pc, #84]	@ (8000d50 <HAL_UART_MspInit+0x90>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	4a14      	ldr	r2, [pc, #80]	@ (8000d50 <HAL_UART_MspInit+0x90>)
 8000cfe:	f043 0304 	orr.w	r3, r3, #4
 8000d02:	6193      	str	r3, [r2, #24]
 8000d04:	4b12      	ldr	r3, [pc, #72]	@ (8000d50 <HAL_UART_MspInit+0x90>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	f003 0304 	and.w	r3, r3, #4
 8000d0c:	60bb      	str	r3, [r7, #8]
 8000d0e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1e:	f107 0310 	add.w	r3, r7, #16
 8000d22:	4619      	mov	r1, r3
 8000d24:	480b      	ldr	r0, [pc, #44]	@ (8000d54 <HAL_UART_MspInit+0x94>)
 8000d26:	f000 fa0f 	bl	8001148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d38:	f107 0310 	add.w	r3, r7, #16
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4805      	ldr	r0, [pc, #20]	@ (8000d54 <HAL_UART_MspInit+0x94>)
 8000d40:	f000 fa02 	bl	8001148 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000d44:	bf00      	nop
 8000d46:	3720      	adds	r7, #32
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40013800 	.word	0x40013800
 8000d50:	40021000 	.word	0x40021000
 8000d54:	40010800 	.word	0x40010800

08000d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <NMI_Handler+0x4>

08000d60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <HardFault_Handler+0x4>

08000d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <MemManage_Handler+0x4>

08000d70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <BusFault_Handler+0x4>

08000d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <UsageFault_Handler+0x4>

08000d80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr

08000d8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr

08000d98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr

08000da4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da8:	f000 f8aa 	bl	8000f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db8:	4a14      	ldr	r2, [pc, #80]	@ (8000e0c <_sbrk+0x5c>)
 8000dba:	4b15      	ldr	r3, [pc, #84]	@ (8000e10 <_sbrk+0x60>)
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc4:	4b13      	ldr	r3, [pc, #76]	@ (8000e14 <_sbrk+0x64>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d102      	bne.n	8000dd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dcc:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <_sbrk+0x64>)
 8000dce:	4a12      	ldr	r2, [pc, #72]	@ (8000e18 <_sbrk+0x68>)
 8000dd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dd2:	4b10      	ldr	r3, [pc, #64]	@ (8000e14 <_sbrk+0x64>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d207      	bcs.n	8000df0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de0:	f002 fd84 	bl	80038ec <__errno>
 8000de4:	4603      	mov	r3, r0
 8000de6:	220c      	movs	r2, #12
 8000de8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295
 8000dee:	e009      	b.n	8000e04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df0:	4b08      	ldr	r3, [pc, #32]	@ (8000e14 <_sbrk+0x64>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000df6:	4b07      	ldr	r3, [pc, #28]	@ (8000e14 <_sbrk+0x64>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	4a05      	ldr	r2, [pc, #20]	@ (8000e14 <_sbrk+0x64>)
 8000e00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e02:	68fb      	ldr	r3, [r7, #12]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20005000 	.word	0x20005000
 8000e10:	00000400 	.word	0x00000400
 8000e14:	20000144 	.word	0x20000144
 8000e18:	20000298 	.word	0x20000298

08000e1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr

08000e28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e28:	f7ff fff8 	bl	8000e1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e2c:	480b      	ldr	r0, [pc, #44]	@ (8000e5c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e2e:	490c      	ldr	r1, [pc, #48]	@ (8000e60 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e30:	4a0c      	ldr	r2, [pc, #48]	@ (8000e64 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e34:	e002      	b.n	8000e3c <LoopCopyDataInit>

08000e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3a:	3304      	adds	r3, #4

08000e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e40:	d3f9      	bcc.n	8000e36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e42:	4a09      	ldr	r2, [pc, #36]	@ (8000e68 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e44:	4c09      	ldr	r4, [pc, #36]	@ (8000e6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e48:	e001      	b.n	8000e4e <LoopFillZerobss>

08000e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e4c:	3204      	adds	r2, #4

08000e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e50:	d3fb      	bcc.n	8000e4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e52:	f002 fd51 	bl	80038f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e56:	f7ff fd35 	bl	80008c4 <main>
  bx lr
 8000e5a:	4770      	bx	lr
  ldr r0, =_sdata
 8000e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e60:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000e64:	080042e8 	.word	0x080042e8
  ldr r2, =_sbss
 8000e68:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000e6c:	20000294 	.word	0x20000294

08000e70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e70:	e7fe      	b.n	8000e70 <ADC1_2_IRQHandler>
	...

08000e74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e78:	4b08      	ldr	r3, [pc, #32]	@ (8000e9c <HAL_Init+0x28>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a07      	ldr	r2, [pc, #28]	@ (8000e9c <HAL_Init+0x28>)
 8000e7e:	f043 0310 	orr.w	r3, r3, #16
 8000e82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e84:	2003      	movs	r0, #3
 8000e86:	f000 f92b 	bl	80010e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e8a:	200f      	movs	r0, #15
 8000e8c:	f000 f808 	bl	8000ea0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e90:	f7ff fea6 	bl	8000be0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40022000 	.word	0x40022000

08000ea0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea8:	4b12      	ldr	r3, [pc, #72]	@ (8000ef4 <HAL_InitTick+0x54>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	4b12      	ldr	r3, [pc, #72]	@ (8000ef8 <HAL_InitTick+0x58>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 f935 	bl	800112e <HAL_SYSTICK_Config>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e00e      	b.n	8000eec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2b0f      	cmp	r3, #15
 8000ed2:	d80a      	bhi.n	8000eea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	6879      	ldr	r1, [r7, #4]
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	f000 f90b 	bl	80010f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee0:	4a06      	ldr	r2, [pc, #24]	@ (8000efc <HAL_InitTick+0x5c>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	e000      	b.n	8000eec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000010 	.word	0x20000010
 8000ef8:	20000018 	.word	0x20000018
 8000efc:	20000014 	.word	0x20000014

08000f00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f04:	4b05      	ldr	r3, [pc, #20]	@ (8000f1c <HAL_IncTick+0x1c>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b05      	ldr	r3, [pc, #20]	@ (8000f20 <HAL_IncTick+0x20>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4413      	add	r3, r2
 8000f10:	4a03      	ldr	r2, [pc, #12]	@ (8000f20 <HAL_IncTick+0x20>)
 8000f12:	6013      	str	r3, [r2, #0]
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr
 8000f1c:	20000018 	.word	0x20000018
 8000f20:	20000148 	.word	0x20000148

08000f24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return uwTick;
 8000f28:	4b02      	ldr	r3, [pc, #8]	@ (8000f34 <HAL_GetTick+0x10>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr
 8000f34:	20000148 	.word	0x20000148

08000f38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f40:	f7ff fff0 	bl	8000f24 <HAL_GetTick>
 8000f44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f50:	d005      	beq.n	8000f5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f52:	4b0a      	ldr	r3, [pc, #40]	@ (8000f7c <HAL_Delay+0x44>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	461a      	mov	r2, r3
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f5e:	bf00      	nop
 8000f60:	f7ff ffe0 	bl	8000f24 <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	68fa      	ldr	r2, [r7, #12]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d8f7      	bhi.n	8000f60 <HAL_Delay+0x28>
  {
  }
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000018 	.word	0x20000018

08000f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f90:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fb2:	4a04      	ldr	r2, [pc, #16]	@ (8000fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	60d3      	str	r3, [r2, #12]
}
 8000fb8:	bf00      	nop
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fcc:	4b04      	ldr	r3, [pc, #16]	@ (8000fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	0a1b      	lsrs	r3, r3, #8
 8000fd2:	f003 0307 	and.w	r3, r3, #7
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	6039      	str	r1, [r7, #0]
 8000fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	db0a      	blt.n	800100e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	490c      	ldr	r1, [pc, #48]	@ (8001030 <__NVIC_SetPriority+0x4c>)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	0112      	lsls	r2, r2, #4
 8001004:	b2d2      	uxtb	r2, r2
 8001006:	440b      	add	r3, r1
 8001008:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800100c:	e00a      	b.n	8001024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	b2da      	uxtb	r2, r3
 8001012:	4908      	ldr	r1, [pc, #32]	@ (8001034 <__NVIC_SetPriority+0x50>)
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	f003 030f 	and.w	r3, r3, #15
 800101a:	3b04      	subs	r3, #4
 800101c:	0112      	lsls	r2, r2, #4
 800101e:	b2d2      	uxtb	r2, r2
 8001020:	440b      	add	r3, r1
 8001022:	761a      	strb	r2, [r3, #24]
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	bc80      	pop	{r7}
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	e000e100 	.word	0xe000e100
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001038:	b480      	push	{r7}
 800103a:	b089      	sub	sp, #36	@ 0x24
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f003 0307 	and.w	r3, r3, #7
 800104a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	f1c3 0307 	rsb	r3, r3, #7
 8001052:	2b04      	cmp	r3, #4
 8001054:	bf28      	it	cs
 8001056:	2304      	movcs	r3, #4
 8001058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3304      	adds	r3, #4
 800105e:	2b06      	cmp	r3, #6
 8001060:	d902      	bls.n	8001068 <NVIC_EncodePriority+0x30>
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3b03      	subs	r3, #3
 8001066:	e000      	b.n	800106a <NVIC_EncodePriority+0x32>
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800106c:	f04f 32ff 	mov.w	r2, #4294967295
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43da      	mvns	r2, r3
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	401a      	ands	r2, r3
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001080:	f04f 31ff 	mov.w	r1, #4294967295
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	fa01 f303 	lsl.w	r3, r1, r3
 800108a:	43d9      	mvns	r1, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001090:	4313      	orrs	r3, r2
         );
}
 8001092:	4618      	mov	r0, r3
 8001094:	3724      	adds	r7, #36	@ 0x24
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr

0800109c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010ac:	d301      	bcc.n	80010b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ae:	2301      	movs	r3, #1
 80010b0:	e00f      	b.n	80010d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010b2:	4a0a      	ldr	r2, [pc, #40]	@ (80010dc <SysTick_Config+0x40>)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ba:	210f      	movs	r1, #15
 80010bc:	f04f 30ff 	mov.w	r0, #4294967295
 80010c0:	f7ff ff90 	bl	8000fe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c4:	4b05      	ldr	r3, [pc, #20]	@ (80010dc <SysTick_Config+0x40>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ca:	4b04      	ldr	r3, [pc, #16]	@ (80010dc <SysTick_Config+0x40>)
 80010cc:	2207      	movs	r2, #7
 80010ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	e000e010 	.word	0xe000e010

080010e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff ff49 	bl	8000f80 <__NVIC_SetPriorityGrouping>
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b086      	sub	sp, #24
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	60b9      	str	r1, [r7, #8]
 8001100:	607a      	str	r2, [r7, #4]
 8001102:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001108:	f7ff ff5e 	bl	8000fc8 <__NVIC_GetPriorityGrouping>
 800110c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	68b9      	ldr	r1, [r7, #8]
 8001112:	6978      	ldr	r0, [r7, #20]
 8001114:	f7ff ff90 	bl	8001038 <NVIC_EncodePriority>
 8001118:	4602      	mov	r2, r0
 800111a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111e:	4611      	mov	r1, r2
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff5f 	bl	8000fe4 <__NVIC_SetPriority>
}
 8001126:	bf00      	nop
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff ffb0 	bl	800109c <SysTick_Config>
 800113c:	4603      	mov	r3, r0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001148:	b480      	push	{r7}
 800114a:	b08b      	sub	sp, #44	@ 0x2c
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001152:	2300      	movs	r3, #0
 8001154:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001156:	2300      	movs	r3, #0
 8001158:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800115a:	e169      	b.n	8001430 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800115c:	2201      	movs	r2, #1
 800115e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	69fa      	ldr	r2, [r7, #28]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	429a      	cmp	r2, r3
 8001176:	f040 8158 	bne.w	800142a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	4a9a      	ldr	r2, [pc, #616]	@ (80013e8 <HAL_GPIO_Init+0x2a0>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d05e      	beq.n	8001242 <HAL_GPIO_Init+0xfa>
 8001184:	4a98      	ldr	r2, [pc, #608]	@ (80013e8 <HAL_GPIO_Init+0x2a0>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d875      	bhi.n	8001276 <HAL_GPIO_Init+0x12e>
 800118a:	4a98      	ldr	r2, [pc, #608]	@ (80013ec <HAL_GPIO_Init+0x2a4>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d058      	beq.n	8001242 <HAL_GPIO_Init+0xfa>
 8001190:	4a96      	ldr	r2, [pc, #600]	@ (80013ec <HAL_GPIO_Init+0x2a4>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d86f      	bhi.n	8001276 <HAL_GPIO_Init+0x12e>
 8001196:	4a96      	ldr	r2, [pc, #600]	@ (80013f0 <HAL_GPIO_Init+0x2a8>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d052      	beq.n	8001242 <HAL_GPIO_Init+0xfa>
 800119c:	4a94      	ldr	r2, [pc, #592]	@ (80013f0 <HAL_GPIO_Init+0x2a8>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d869      	bhi.n	8001276 <HAL_GPIO_Init+0x12e>
 80011a2:	4a94      	ldr	r2, [pc, #592]	@ (80013f4 <HAL_GPIO_Init+0x2ac>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d04c      	beq.n	8001242 <HAL_GPIO_Init+0xfa>
 80011a8:	4a92      	ldr	r2, [pc, #584]	@ (80013f4 <HAL_GPIO_Init+0x2ac>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d863      	bhi.n	8001276 <HAL_GPIO_Init+0x12e>
 80011ae:	4a92      	ldr	r2, [pc, #584]	@ (80013f8 <HAL_GPIO_Init+0x2b0>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d046      	beq.n	8001242 <HAL_GPIO_Init+0xfa>
 80011b4:	4a90      	ldr	r2, [pc, #576]	@ (80013f8 <HAL_GPIO_Init+0x2b0>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d85d      	bhi.n	8001276 <HAL_GPIO_Init+0x12e>
 80011ba:	2b12      	cmp	r3, #18
 80011bc:	d82a      	bhi.n	8001214 <HAL_GPIO_Init+0xcc>
 80011be:	2b12      	cmp	r3, #18
 80011c0:	d859      	bhi.n	8001276 <HAL_GPIO_Init+0x12e>
 80011c2:	a201      	add	r2, pc, #4	@ (adr r2, 80011c8 <HAL_GPIO_Init+0x80>)
 80011c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c8:	08001243 	.word	0x08001243
 80011cc:	0800121d 	.word	0x0800121d
 80011d0:	0800122f 	.word	0x0800122f
 80011d4:	08001271 	.word	0x08001271
 80011d8:	08001277 	.word	0x08001277
 80011dc:	08001277 	.word	0x08001277
 80011e0:	08001277 	.word	0x08001277
 80011e4:	08001277 	.word	0x08001277
 80011e8:	08001277 	.word	0x08001277
 80011ec:	08001277 	.word	0x08001277
 80011f0:	08001277 	.word	0x08001277
 80011f4:	08001277 	.word	0x08001277
 80011f8:	08001277 	.word	0x08001277
 80011fc:	08001277 	.word	0x08001277
 8001200:	08001277 	.word	0x08001277
 8001204:	08001277 	.word	0x08001277
 8001208:	08001277 	.word	0x08001277
 800120c:	08001225 	.word	0x08001225
 8001210:	08001239 	.word	0x08001239
 8001214:	4a79      	ldr	r2, [pc, #484]	@ (80013fc <HAL_GPIO_Init+0x2b4>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d013      	beq.n	8001242 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800121a:	e02c      	b.n	8001276 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	623b      	str	r3, [r7, #32]
          break;
 8001222:	e029      	b.n	8001278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	3304      	adds	r3, #4
 800122a:	623b      	str	r3, [r7, #32]
          break;
 800122c:	e024      	b.n	8001278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	3308      	adds	r3, #8
 8001234:	623b      	str	r3, [r7, #32]
          break;
 8001236:	e01f      	b.n	8001278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	330c      	adds	r3, #12
 800123e:	623b      	str	r3, [r7, #32]
          break;
 8001240:	e01a      	b.n	8001278 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d102      	bne.n	8001250 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800124a:	2304      	movs	r3, #4
 800124c:	623b      	str	r3, [r7, #32]
          break;
 800124e:	e013      	b.n	8001278 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d105      	bne.n	8001264 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001258:	2308      	movs	r3, #8
 800125a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	69fa      	ldr	r2, [r7, #28]
 8001260:	611a      	str	r2, [r3, #16]
          break;
 8001262:	e009      	b.n	8001278 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001264:	2308      	movs	r3, #8
 8001266:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	69fa      	ldr	r2, [r7, #28]
 800126c:	615a      	str	r2, [r3, #20]
          break;
 800126e:	e003      	b.n	8001278 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001270:	2300      	movs	r3, #0
 8001272:	623b      	str	r3, [r7, #32]
          break;
 8001274:	e000      	b.n	8001278 <HAL_GPIO_Init+0x130>
          break;
 8001276:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	2bff      	cmp	r3, #255	@ 0xff
 800127c:	d801      	bhi.n	8001282 <HAL_GPIO_Init+0x13a>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	e001      	b.n	8001286 <HAL_GPIO_Init+0x13e>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3304      	adds	r3, #4
 8001286:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	2bff      	cmp	r3, #255	@ 0xff
 800128c:	d802      	bhi.n	8001294 <HAL_GPIO_Init+0x14c>
 800128e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	e002      	b.n	800129a <HAL_GPIO_Init+0x152>
 8001294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001296:	3b08      	subs	r3, #8
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	210f      	movs	r1, #15
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	fa01 f303 	lsl.w	r3, r1, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	401a      	ands	r2, r3
 80012ac:	6a39      	ldr	r1, [r7, #32]
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	fa01 f303 	lsl.w	r3, r1, r3
 80012b4:	431a      	orrs	r2, r3
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f000 80b1 	beq.w	800142a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012c8:	4b4d      	ldr	r3, [pc, #308]	@ (8001400 <HAL_GPIO_Init+0x2b8>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4a4c      	ldr	r2, [pc, #304]	@ (8001400 <HAL_GPIO_Init+0x2b8>)
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	6193      	str	r3, [r2, #24]
 80012d4:	4b4a      	ldr	r3, [pc, #296]	@ (8001400 <HAL_GPIO_Init+0x2b8>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012e0:	4a48      	ldr	r2, [pc, #288]	@ (8001404 <HAL_GPIO_Init+0x2bc>)
 80012e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e4:	089b      	lsrs	r3, r3, #2
 80012e6:	3302      	adds	r3, #2
 80012e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f0:	f003 0303 	and.w	r3, r3, #3
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	220f      	movs	r2, #15
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	4013      	ands	r3, r2
 8001302:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a40      	ldr	r2, [pc, #256]	@ (8001408 <HAL_GPIO_Init+0x2c0>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d013      	beq.n	8001334 <HAL_GPIO_Init+0x1ec>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a3f      	ldr	r2, [pc, #252]	@ (800140c <HAL_GPIO_Init+0x2c4>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d00d      	beq.n	8001330 <HAL_GPIO_Init+0x1e8>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a3e      	ldr	r2, [pc, #248]	@ (8001410 <HAL_GPIO_Init+0x2c8>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d007      	beq.n	800132c <HAL_GPIO_Init+0x1e4>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a3d      	ldr	r2, [pc, #244]	@ (8001414 <HAL_GPIO_Init+0x2cc>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d101      	bne.n	8001328 <HAL_GPIO_Init+0x1e0>
 8001324:	2303      	movs	r3, #3
 8001326:	e006      	b.n	8001336 <HAL_GPIO_Init+0x1ee>
 8001328:	2304      	movs	r3, #4
 800132a:	e004      	b.n	8001336 <HAL_GPIO_Init+0x1ee>
 800132c:	2302      	movs	r3, #2
 800132e:	e002      	b.n	8001336 <HAL_GPIO_Init+0x1ee>
 8001330:	2301      	movs	r3, #1
 8001332:	e000      	b.n	8001336 <HAL_GPIO_Init+0x1ee>
 8001334:	2300      	movs	r3, #0
 8001336:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001338:	f002 0203 	and.w	r2, r2, #3
 800133c:	0092      	lsls	r2, r2, #2
 800133e:	4093      	lsls	r3, r2
 8001340:	68fa      	ldr	r2, [r7, #12]
 8001342:	4313      	orrs	r3, r2
 8001344:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001346:	492f      	ldr	r1, [pc, #188]	@ (8001404 <HAL_GPIO_Init+0x2bc>)
 8001348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800134a:	089b      	lsrs	r3, r3, #2
 800134c:	3302      	adds	r3, #2
 800134e:	68fa      	ldr	r2, [r7, #12]
 8001350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d006      	beq.n	800136e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001360:	4b2d      	ldr	r3, [pc, #180]	@ (8001418 <HAL_GPIO_Init+0x2d0>)
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	492c      	ldr	r1, [pc, #176]	@ (8001418 <HAL_GPIO_Init+0x2d0>)
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	4313      	orrs	r3, r2
 800136a:	608b      	str	r3, [r1, #8]
 800136c:	e006      	b.n	800137c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800136e:	4b2a      	ldr	r3, [pc, #168]	@ (8001418 <HAL_GPIO_Init+0x2d0>)
 8001370:	689a      	ldr	r2, [r3, #8]
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	43db      	mvns	r3, r3
 8001376:	4928      	ldr	r1, [pc, #160]	@ (8001418 <HAL_GPIO_Init+0x2d0>)
 8001378:	4013      	ands	r3, r2
 800137a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d006      	beq.n	8001396 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001388:	4b23      	ldr	r3, [pc, #140]	@ (8001418 <HAL_GPIO_Init+0x2d0>)
 800138a:	68da      	ldr	r2, [r3, #12]
 800138c:	4922      	ldr	r1, [pc, #136]	@ (8001418 <HAL_GPIO_Init+0x2d0>)
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	4313      	orrs	r3, r2
 8001392:	60cb      	str	r3, [r1, #12]
 8001394:	e006      	b.n	80013a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001396:	4b20      	ldr	r3, [pc, #128]	@ (8001418 <HAL_GPIO_Init+0x2d0>)
 8001398:	68da      	ldr	r2, [r3, #12]
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	43db      	mvns	r3, r3
 800139e:	491e      	ldr	r1, [pc, #120]	@ (8001418 <HAL_GPIO_Init+0x2d0>)
 80013a0:	4013      	ands	r3, r2
 80013a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d006      	beq.n	80013be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013b0:	4b19      	ldr	r3, [pc, #100]	@ (8001418 <HAL_GPIO_Init+0x2d0>)
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	4918      	ldr	r1, [pc, #96]	@ (8001418 <HAL_GPIO_Init+0x2d0>)
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	604b      	str	r3, [r1, #4]
 80013bc:	e006      	b.n	80013cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013be:	4b16      	ldr	r3, [pc, #88]	@ (8001418 <HAL_GPIO_Init+0x2d0>)
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	43db      	mvns	r3, r3
 80013c6:	4914      	ldr	r1, [pc, #80]	@ (8001418 <HAL_GPIO_Init+0x2d0>)
 80013c8:	4013      	ands	r3, r2
 80013ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d021      	beq.n	800141c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001418 <HAL_GPIO_Init+0x2d0>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	490e      	ldr	r1, [pc, #56]	@ (8001418 <HAL_GPIO_Init+0x2d0>)
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	600b      	str	r3, [r1, #0]
 80013e4:	e021      	b.n	800142a <HAL_GPIO_Init+0x2e2>
 80013e6:	bf00      	nop
 80013e8:	10320000 	.word	0x10320000
 80013ec:	10310000 	.word	0x10310000
 80013f0:	10220000 	.word	0x10220000
 80013f4:	10210000 	.word	0x10210000
 80013f8:	10120000 	.word	0x10120000
 80013fc:	10110000 	.word	0x10110000
 8001400:	40021000 	.word	0x40021000
 8001404:	40010000 	.word	0x40010000
 8001408:	40010800 	.word	0x40010800
 800140c:	40010c00 	.word	0x40010c00
 8001410:	40011000 	.word	0x40011000
 8001414:	40011400 	.word	0x40011400
 8001418:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800141c:	4b0b      	ldr	r3, [pc, #44]	@ (800144c <HAL_GPIO_Init+0x304>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	43db      	mvns	r3, r3
 8001424:	4909      	ldr	r1, [pc, #36]	@ (800144c <HAL_GPIO_Init+0x304>)
 8001426:	4013      	ands	r3, r2
 8001428:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800142a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800142c:	3301      	adds	r3, #1
 800142e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001436:	fa22 f303 	lsr.w	r3, r2, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	f47f ae8e 	bne.w	800115c <HAL_GPIO_Init+0x14>
  }
}
 8001440:	bf00      	nop
 8001442:	bf00      	nop
 8001444:	372c      	adds	r7, #44	@ 0x2c
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr
 800144c:	40010400 	.word	0x40010400

08001450 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	460b      	mov	r3, r1
 800145a:	807b      	strh	r3, [r7, #2]
 800145c:	4613      	mov	r3, r2
 800145e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001460:	787b      	ldrb	r3, [r7, #1]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001466:	887a      	ldrh	r2, [r7, #2]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800146c:	e003      	b.n	8001476 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800146e:	887b      	ldrh	r3, [r7, #2]
 8001470:	041a      	lsls	r2, r3, #16
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	611a      	str	r2, [r3, #16]
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr

08001480 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d101      	bne.n	8001492 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e12b      	b.n	80016ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001498:	b2db      	uxtb	r3, r3
 800149a:	2b00      	cmp	r3, #0
 800149c:	d106      	bne.n	80014ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff fbcc 	bl	8000c44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2224      	movs	r2, #36	@ 0x24
 80014b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f022 0201 	bic.w	r2, r2, #1
 80014c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80014d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80014e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014e4:	f002 f8b6 	bl	8003654 <HAL_RCC_GetPCLK1Freq>
 80014e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	4a81      	ldr	r2, [pc, #516]	@ (80016f4 <HAL_I2C_Init+0x274>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d807      	bhi.n	8001504 <HAL_I2C_Init+0x84>
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4a80      	ldr	r2, [pc, #512]	@ (80016f8 <HAL_I2C_Init+0x278>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	bf94      	ite	ls
 80014fc:	2301      	movls	r3, #1
 80014fe:	2300      	movhi	r3, #0
 8001500:	b2db      	uxtb	r3, r3
 8001502:	e006      	b.n	8001512 <HAL_I2C_Init+0x92>
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4a7d      	ldr	r2, [pc, #500]	@ (80016fc <HAL_I2C_Init+0x27c>)
 8001508:	4293      	cmp	r3, r2
 800150a:	bf94      	ite	ls
 800150c:	2301      	movls	r3, #1
 800150e:	2300      	movhi	r3, #0
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e0e7      	b.n	80016ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	4a78      	ldr	r2, [pc, #480]	@ (8001700 <HAL_I2C_Init+0x280>)
 800151e:	fba2 2303 	umull	r2, r3, r2, r3
 8001522:	0c9b      	lsrs	r3, r3, #18
 8001524:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	68ba      	ldr	r2, [r7, #8]
 8001536:	430a      	orrs	r2, r1
 8001538:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	6a1b      	ldr	r3, [r3, #32]
 8001540:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	4a6a      	ldr	r2, [pc, #424]	@ (80016f4 <HAL_I2C_Init+0x274>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d802      	bhi.n	8001554 <HAL_I2C_Init+0xd4>
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	3301      	adds	r3, #1
 8001552:	e009      	b.n	8001568 <HAL_I2C_Init+0xe8>
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800155a:	fb02 f303 	mul.w	r3, r2, r3
 800155e:	4a69      	ldr	r2, [pc, #420]	@ (8001704 <HAL_I2C_Init+0x284>)
 8001560:	fba2 2303 	umull	r2, r3, r2, r3
 8001564:	099b      	lsrs	r3, r3, #6
 8001566:	3301      	adds	r3, #1
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	6812      	ldr	r2, [r2, #0]
 800156c:	430b      	orrs	r3, r1
 800156e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800157a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	495c      	ldr	r1, [pc, #368]	@ (80016f4 <HAL_I2C_Init+0x274>)
 8001584:	428b      	cmp	r3, r1
 8001586:	d819      	bhi.n	80015bc <HAL_I2C_Init+0x13c>
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	1e59      	subs	r1, r3, #1
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	fbb1 f3f3 	udiv	r3, r1, r3
 8001596:	1c59      	adds	r1, r3, #1
 8001598:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800159c:	400b      	ands	r3, r1
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d00a      	beq.n	80015b8 <HAL_I2C_Init+0x138>
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	1e59      	subs	r1, r3, #1
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80015b0:	3301      	adds	r3, #1
 80015b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015b6:	e051      	b.n	800165c <HAL_I2C_Init+0x1dc>
 80015b8:	2304      	movs	r3, #4
 80015ba:	e04f      	b.n	800165c <HAL_I2C_Init+0x1dc>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d111      	bne.n	80015e8 <HAL_I2C_Init+0x168>
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	1e58      	subs	r0, r3, #1
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6859      	ldr	r1, [r3, #4]
 80015cc:	460b      	mov	r3, r1
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	440b      	add	r3, r1
 80015d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80015d6:	3301      	adds	r3, #1
 80015d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015dc:	2b00      	cmp	r3, #0
 80015de:	bf0c      	ite	eq
 80015e0:	2301      	moveq	r3, #1
 80015e2:	2300      	movne	r3, #0
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	e012      	b.n	800160e <HAL_I2C_Init+0x18e>
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	1e58      	subs	r0, r3, #1
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6859      	ldr	r1, [r3, #4]
 80015f0:	460b      	mov	r3, r1
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	440b      	add	r3, r1
 80015f6:	0099      	lsls	r1, r3, #2
 80015f8:	440b      	add	r3, r1
 80015fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80015fe:	3301      	adds	r3, #1
 8001600:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001604:	2b00      	cmp	r3, #0
 8001606:	bf0c      	ite	eq
 8001608:	2301      	moveq	r3, #1
 800160a:	2300      	movne	r3, #0
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <HAL_I2C_Init+0x196>
 8001612:	2301      	movs	r3, #1
 8001614:	e022      	b.n	800165c <HAL_I2C_Init+0x1dc>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d10e      	bne.n	800163c <HAL_I2C_Init+0x1bc>
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	1e58      	subs	r0, r3, #1
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6859      	ldr	r1, [r3, #4]
 8001626:	460b      	mov	r3, r1
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	440b      	add	r3, r1
 800162c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001630:	3301      	adds	r3, #1
 8001632:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001636:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800163a:	e00f      	b.n	800165c <HAL_I2C_Init+0x1dc>
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	1e58      	subs	r0, r3, #1
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6859      	ldr	r1, [r3, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	440b      	add	r3, r1
 800164a:	0099      	lsls	r1, r3, #2
 800164c:	440b      	add	r3, r1
 800164e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001652:	3301      	adds	r3, #1
 8001654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001658:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800165c:	6879      	ldr	r1, [r7, #4]
 800165e:	6809      	ldr	r1, [r1, #0]
 8001660:	4313      	orrs	r3, r2
 8001662:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69da      	ldr	r2, [r3, #28]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a1b      	ldr	r3, [r3, #32]
 8001676:	431a      	orrs	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	430a      	orrs	r2, r1
 800167e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800168a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	6911      	ldr	r1, [r2, #16]
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	68d2      	ldr	r2, [r2, #12]
 8001696:	4311      	orrs	r1, r2
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	6812      	ldr	r2, [r2, #0]
 800169c:	430b      	orrs	r3, r1
 800169e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	695a      	ldr	r2, [r3, #20]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	431a      	orrs	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	430a      	orrs	r2, r1
 80016ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f042 0201 	orr.w	r2, r2, #1
 80016ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2220      	movs	r2, #32
 80016d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	000186a0 	.word	0x000186a0
 80016f8:	001e847f 	.word	0x001e847f
 80016fc:	003d08ff 	.word	0x003d08ff
 8001700:	431bde83 	.word	0x431bde83
 8001704:	10624dd3 	.word	0x10624dd3

08001708 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b088      	sub	sp, #32
 800170c:	af02      	add	r7, sp, #8
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	607a      	str	r2, [r7, #4]
 8001712:	461a      	mov	r2, r3
 8001714:	460b      	mov	r3, r1
 8001716:	817b      	strh	r3, [r7, #10]
 8001718:	4613      	mov	r3, r2
 800171a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800171c:	f7ff fc02 	bl	8000f24 <HAL_GetTick>
 8001720:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b20      	cmp	r3, #32
 800172c:	f040 80e0 	bne.w	80018f0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	2319      	movs	r3, #25
 8001736:	2201      	movs	r2, #1
 8001738:	4970      	ldr	r1, [pc, #448]	@ (80018fc <HAL_I2C_Master_Transmit+0x1f4>)
 800173a:	68f8      	ldr	r0, [r7, #12]
 800173c:	f001 f98a 	bl	8002a54 <I2C_WaitOnFlagUntilTimeout>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001746:	2302      	movs	r3, #2
 8001748:	e0d3      	b.n	80018f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001750:	2b01      	cmp	r3, #1
 8001752:	d101      	bne.n	8001758 <HAL_I2C_Master_Transmit+0x50>
 8001754:	2302      	movs	r3, #2
 8001756:	e0cc      	b.n	80018f2 <HAL_I2C_Master_Transmit+0x1ea>
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2201      	movs	r2, #1
 800175c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	2b01      	cmp	r3, #1
 800176c:	d007      	beq.n	800177e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f042 0201 	orr.w	r2, r2, #1
 800177c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800178c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2221      	movs	r2, #33	@ 0x21
 8001792:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2210      	movs	r2, #16
 800179a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2200      	movs	r2, #0
 80017a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	893a      	ldrh	r2, [r7, #8]
 80017ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	4a50      	ldr	r2, [pc, #320]	@ (8001900 <HAL_I2C_Master_Transmit+0x1f8>)
 80017be:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80017c0:	8979      	ldrh	r1, [r7, #10]
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	6a3a      	ldr	r2, [r7, #32]
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	f000 fe76 	bl	80024b8 <I2C_MasterRequestWrite>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e08d      	b.n	80018f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017d6:	2300      	movs	r3, #0
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	695b      	ldr	r3, [r3, #20]
 80017e0:	613b      	str	r3, [r7, #16]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	613b      	str	r3, [r7, #16]
 80017ea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80017ec:	e066      	b.n	80018bc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	6a39      	ldr	r1, [r7, #32]
 80017f2:	68f8      	ldr	r0, [r7, #12]
 80017f4:	f001 fa48 	bl	8002c88 <I2C_WaitOnTXEFlagUntilTimeout>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d00d      	beq.n	800181a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001802:	2b04      	cmp	r3, #4
 8001804:	d107      	bne.n	8001816 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001814:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e06b      	b.n	80018f2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181e:	781a      	ldrb	r2, [r3, #0]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800182a:	1c5a      	adds	r2, r3, #1
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001834:	b29b      	uxth	r3, r3
 8001836:	3b01      	subs	r3, #1
 8001838:	b29a      	uxth	r2, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001842:	3b01      	subs	r3, #1
 8001844:	b29a      	uxth	r2, r3
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	f003 0304 	and.w	r3, r3, #4
 8001854:	2b04      	cmp	r3, #4
 8001856:	d11b      	bne.n	8001890 <HAL_I2C_Master_Transmit+0x188>
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800185c:	2b00      	cmp	r3, #0
 800185e:	d017      	beq.n	8001890 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001864:	781a      	ldrb	r2, [r3, #0]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001870:	1c5a      	adds	r2, r3, #1
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800187a:	b29b      	uxth	r3, r3
 800187c:	3b01      	subs	r3, #1
 800187e:	b29a      	uxth	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001888:	3b01      	subs	r3, #1
 800188a:	b29a      	uxth	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	6a39      	ldr	r1, [r7, #32]
 8001894:	68f8      	ldr	r0, [r7, #12]
 8001896:	f001 fa3f 	bl	8002d18 <I2C_WaitOnBTFFlagUntilTimeout>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d00d      	beq.n	80018bc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a4:	2b04      	cmp	r3, #4
 80018a6:	d107      	bne.n	80018b8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018b6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e01a      	b.n	80018f2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d194      	bne.n	80017ee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2220      	movs	r2, #32
 80018d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80018ec:	2300      	movs	r3, #0
 80018ee:	e000      	b.n	80018f2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80018f0:	2302      	movs	r3, #2
  }
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3718      	adds	r7, #24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	00100002 	.word	0x00100002
 8001900:	ffff0000 	.word	0xffff0000

08001904 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b08c      	sub	sp, #48	@ 0x30
 8001908:	af02      	add	r7, sp, #8
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	607a      	str	r2, [r7, #4]
 800190e:	461a      	mov	r2, r3
 8001910:	460b      	mov	r3, r1
 8001912:	817b      	strh	r3, [r7, #10]
 8001914:	4613      	mov	r3, r2
 8001916:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001918:	2300      	movs	r3, #0
 800191a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800191c:	f7ff fb02 	bl	8000f24 <HAL_GetTick>
 8001920:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b20      	cmp	r3, #32
 800192c:	f040 824b 	bne.w	8001dc6 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	2319      	movs	r3, #25
 8001936:	2201      	movs	r2, #1
 8001938:	497f      	ldr	r1, [pc, #508]	@ (8001b38 <HAL_I2C_Master_Receive+0x234>)
 800193a:	68f8      	ldr	r0, [r7, #12]
 800193c:	f001 f88a 	bl	8002a54 <I2C_WaitOnFlagUntilTimeout>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001946:	2302      	movs	r3, #2
 8001948:	e23e      	b.n	8001dc8 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001950:	2b01      	cmp	r3, #1
 8001952:	d101      	bne.n	8001958 <HAL_I2C_Master_Receive+0x54>
 8001954:	2302      	movs	r3, #2
 8001956:	e237      	b.n	8001dc8 <HAL_I2C_Master_Receive+0x4c4>
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	2b01      	cmp	r3, #1
 800196c:	d007      	beq.n	800197e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f042 0201 	orr.w	r2, r2, #1
 800197c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800198c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2222      	movs	r2, #34	@ 0x22
 8001992:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2210      	movs	r2, #16
 800199a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2200      	movs	r2, #0
 80019a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	893a      	ldrh	r2, [r7, #8]
 80019ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	4a5f      	ldr	r2, [pc, #380]	@ (8001b3c <HAL_I2C_Master_Receive+0x238>)
 80019be:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80019c0:	8979      	ldrh	r1, [r7, #10]
 80019c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80019c6:	68f8      	ldr	r0, [r7, #12]
 80019c8:	f000 fdf8 	bl	80025bc <I2C_MasterRequestRead>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e1f8      	b.n	8001dc8 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d113      	bne.n	8001a06 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019de:	2300      	movs	r3, #0
 80019e0:	61fb      	str	r3, [r7, #28]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	695b      	ldr	r3, [r3, #20]
 80019e8:	61fb      	str	r3, [r7, #28]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	61fb      	str	r3, [r7, #28]
 80019f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	e1cc      	b.n	8001da0 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d11e      	bne.n	8001a4c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a1c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a1e:	b672      	cpsid	i
}
 8001a20:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a22:	2300      	movs	r3, #0
 8001a24:	61bb      	str	r3, [r7, #24]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	61bb      	str	r3, [r7, #24]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	61bb      	str	r3, [r7, #24]
 8001a36:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a46:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001a48:	b662      	cpsie	i
}
 8001a4a:	e035      	b.n	8001ab8 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d11e      	bne.n	8001a92 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a62:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a64:	b672      	cpsid	i
}
 8001a66:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a8c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001a8e:	b662      	cpsie	i
}
 8001a90:	e012      	b.n	8001ab8 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001aa0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	695b      	ldr	r3, [r3, #20]
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001ab8:	e172      	b.n	8001da0 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001abe:	2b03      	cmp	r3, #3
 8001ac0:	f200 811f 	bhi.w	8001d02 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d123      	bne.n	8001b14 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001acc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ace:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	f001 f969 	bl	8002da8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e173      	b.n	8001dc8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	691a      	ldr	r2, [r3, #16]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af2:	1c5a      	adds	r2, r3, #1
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001afc:	3b01      	subs	r3, #1
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001b12:	e145      	b.n	8001da0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d152      	bne.n	8001bc2 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b22:	2200      	movs	r2, #0
 8001b24:	4906      	ldr	r1, [pc, #24]	@ (8001b40 <HAL_I2C_Master_Receive+0x23c>)
 8001b26:	68f8      	ldr	r0, [r7, #12]
 8001b28:	f000 ff94 	bl	8002a54 <I2C_WaitOnFlagUntilTimeout>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d008      	beq.n	8001b44 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e148      	b.n	8001dc8 <HAL_I2C_Master_Receive+0x4c4>
 8001b36:	bf00      	nop
 8001b38:	00100002 	.word	0x00100002
 8001b3c:	ffff0000 	.word	0xffff0000
 8001b40:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001b44:	b672      	cpsid	i
}
 8001b46:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	691a      	ldr	r2, [r3, #16]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b6a:	1c5a      	adds	r2, r3, #1
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b74:	3b01      	subs	r3, #1
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	3b01      	subs	r3, #1
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001b8a:	b662      	cpsie	i
}
 8001b8c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	691a      	ldr	r2, [r3, #16]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b98:	b2d2      	uxtb	r2, r2
 8001b9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba0:	1c5a      	adds	r2, r3, #1
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001baa:	3b01      	subs	r3, #1
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001bc0:	e0ee      	b.n	8001da0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bc8:	2200      	movs	r2, #0
 8001bca:	4981      	ldr	r1, [pc, #516]	@ (8001dd0 <HAL_I2C_Master_Receive+0x4cc>)
 8001bcc:	68f8      	ldr	r0, [r7, #12]
 8001bce:	f000 ff41 	bl	8002a54 <I2C_WaitOnFlagUntilTimeout>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e0f5      	b.n	8001dc8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001bea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001bec:	b672      	cpsid	i
}
 8001bee:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	691a      	ldr	r2, [r3, #16]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c02:	1c5a      	adds	r2, r3, #1
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001c22:	4b6c      	ldr	r3, [pc, #432]	@ (8001dd4 <HAL_I2C_Master_Receive+0x4d0>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	08db      	lsrs	r3, r3, #3
 8001c28:	4a6b      	ldr	r2, [pc, #428]	@ (8001dd8 <HAL_I2C_Master_Receive+0x4d4>)
 8001c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c2e:	0a1a      	lsrs	r2, r3, #8
 8001c30:	4613      	mov	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4413      	add	r3, r2
 8001c36:	00da      	lsls	r2, r3, #3
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001c3c:	6a3b      	ldr	r3, [r7, #32]
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001c42:	6a3b      	ldr	r3, [r7, #32]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d118      	bne.n	8001c7a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2220      	movs	r2, #32
 8001c52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c62:	f043 0220 	orr.w	r2, r3, #32
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001c6a:	b662      	cpsie	i
}
 8001c6c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e0a6      	b.n	8001dc8 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	695b      	ldr	r3, [r3, #20]
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	2b04      	cmp	r3, #4
 8001c86:	d1d9      	bne.n	8001c3c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	691a      	ldr	r2, [r3, #16]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001caa:	1c5a      	adds	r2, r3, #1
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001cca:	b662      	cpsie	i
}
 8001ccc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	691a      	ldr	r2, [r3, #16]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd8:	b2d2      	uxtb	r2, r2
 8001cda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce0:	1c5a      	adds	r2, r3, #1
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cea:	3b01      	subs	r3, #1
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001d00:	e04e      	b.n	8001da0 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d04:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001d06:	68f8      	ldr	r0, [r7, #12]
 8001d08:	f001 f84e 	bl	8002da8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e058      	b.n	8001dc8 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	691a      	ldr	r2, [r3, #16]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d28:	1c5a      	adds	r2, r3, #1
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d32:	3b01      	subs	r3, #1
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	3b01      	subs	r3, #1
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	f003 0304 	and.w	r3, r3, #4
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	d124      	bne.n	8001da0 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d5a:	2b03      	cmp	r3, #3
 8001d5c:	d107      	bne.n	8001d6e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d6c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	691a      	ldr	r2, [r3, #16]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d80:	1c5a      	adds	r2, r3, #1
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f47f ae88 	bne.w	8001aba <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2220      	movs	r2, #32
 8001dae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	e000      	b.n	8001dc8 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8001dc6:	2302      	movs	r3, #2
  }
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3728      	adds	r7, #40	@ 0x28
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	00010004 	.word	0x00010004
 8001dd4:	20000010 	.word	0x20000010
 8001dd8:	14f8b589 	.word	0x14f8b589

08001ddc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b088      	sub	sp, #32
 8001de0:	af02      	add	r7, sp, #8
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	4608      	mov	r0, r1
 8001de6:	4611      	mov	r1, r2
 8001de8:	461a      	mov	r2, r3
 8001dea:	4603      	mov	r3, r0
 8001dec:	817b      	strh	r3, [r7, #10]
 8001dee:	460b      	mov	r3, r1
 8001df0:	813b      	strh	r3, [r7, #8]
 8001df2:	4613      	mov	r3, r2
 8001df4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001df6:	f7ff f895 	bl	8000f24 <HAL_GetTick>
 8001dfa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b20      	cmp	r3, #32
 8001e06:	f040 80d9 	bne.w	8001fbc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	2319      	movs	r3, #25
 8001e10:	2201      	movs	r2, #1
 8001e12:	496d      	ldr	r1, [pc, #436]	@ (8001fc8 <HAL_I2C_Mem_Write+0x1ec>)
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f000 fe1d 	bl	8002a54 <I2C_WaitOnFlagUntilTimeout>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001e20:	2302      	movs	r3, #2
 8001e22:	e0cc      	b.n	8001fbe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d101      	bne.n	8001e32 <HAL_I2C_Mem_Write+0x56>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e0c5      	b.n	8001fbe <HAL_I2C_Mem_Write+0x1e2>
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d007      	beq.n	8001e58 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0201 	orr.w	r2, r2, #1
 8001e56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2221      	movs	r2, #33	@ 0x21
 8001e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2240      	movs	r2, #64	@ 0x40
 8001e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6a3a      	ldr	r2, [r7, #32]
 8001e82:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001e88:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	4a4d      	ldr	r2, [pc, #308]	@ (8001fcc <HAL_I2C_Mem_Write+0x1f0>)
 8001e98:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e9a:	88f8      	ldrh	r0, [r7, #6]
 8001e9c:	893a      	ldrh	r2, [r7, #8]
 8001e9e:	8979      	ldrh	r1, [r7, #10]
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	9301      	str	r3, [sp, #4]
 8001ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	68f8      	ldr	r0, [r7, #12]
 8001eac:	f000 fc54 	bl	8002758 <I2C_RequestMemoryWrite>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d052      	beq.n	8001f5c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e081      	b.n	8001fbe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	f000 fee2 	bl	8002c88 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d00d      	beq.n	8001ee6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d107      	bne.n	8001ee2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ee0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e06b      	b.n	8001fbe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eea:	781a      	ldrb	r2, [r3, #0]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef6:	1c5a      	adds	r2, r3, #1
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f00:	3b01      	subs	r3, #1
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	695b      	ldr	r3, [r3, #20]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	2b04      	cmp	r3, #4
 8001f22:	d11b      	bne.n	8001f5c <HAL_I2C_Mem_Write+0x180>
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d017      	beq.n	8001f5c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f30:	781a      	ldrb	r2, [r3, #0]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3c:	1c5a      	adds	r2, r3, #1
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f46:	3b01      	subs	r3, #1
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	3b01      	subs	r3, #1
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1aa      	bne.n	8001eba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f68:	68f8      	ldr	r0, [r7, #12]
 8001f6a:	f000 fed5 	bl	8002d18 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00d      	beq.n	8001f90 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f78:	2b04      	cmp	r3, #4
 8001f7a:	d107      	bne.n	8001f8c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f8a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e016      	b.n	8001fbe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	e000      	b.n	8001fbe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001fbc:	2302      	movs	r3, #2
  }
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3718      	adds	r7, #24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	00100002 	.word	0x00100002
 8001fcc:	ffff0000 	.word	0xffff0000

08001fd0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b08c      	sub	sp, #48	@ 0x30
 8001fd4:	af02      	add	r7, sp, #8
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	4608      	mov	r0, r1
 8001fda:	4611      	mov	r1, r2
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4603      	mov	r3, r0
 8001fe0:	817b      	strh	r3, [r7, #10]
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	813b      	strh	r3, [r7, #8]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001fea:	2300      	movs	r3, #0
 8001fec:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fee:	f7fe ff99 	bl	8000f24 <HAL_GetTick>
 8001ff2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b20      	cmp	r3, #32
 8001ffe:	f040 8250 	bne.w	80024a2 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	2319      	movs	r3, #25
 8002008:	2201      	movs	r2, #1
 800200a:	4982      	ldr	r1, [pc, #520]	@ (8002214 <HAL_I2C_Mem_Read+0x244>)
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	f000 fd21 	bl	8002a54 <I2C_WaitOnFlagUntilTimeout>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002018:	2302      	movs	r3, #2
 800201a:	e243      	b.n	80024a4 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002022:	2b01      	cmp	r3, #1
 8002024:	d101      	bne.n	800202a <HAL_I2C_Mem_Read+0x5a>
 8002026:	2302      	movs	r3, #2
 8002028:	e23c      	b.n	80024a4 <HAL_I2C_Mem_Read+0x4d4>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b01      	cmp	r3, #1
 800203e:	d007      	beq.n	8002050 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f042 0201 	orr.w	r2, r2, #1
 800204e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800205e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2222      	movs	r2, #34	@ 0x22
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2240      	movs	r2, #64	@ 0x40
 800206c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800207a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002080:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002086:	b29a      	uxth	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4a62      	ldr	r2, [pc, #392]	@ (8002218 <HAL_I2C_Mem_Read+0x248>)
 8002090:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002092:	88f8      	ldrh	r0, [r7, #6]
 8002094:	893a      	ldrh	r2, [r7, #8]
 8002096:	8979      	ldrh	r1, [r7, #10]
 8002098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209a:	9301      	str	r3, [sp, #4]
 800209c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	4603      	mov	r3, r0
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f000 fbee 	bl	8002884 <I2C_RequestMemoryRead>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e1f8      	b.n	80024a4 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d113      	bne.n	80020e2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ba:	2300      	movs	r3, #0
 80020bc:	61fb      	str	r3, [r7, #28]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	61fb      	str	r3, [r7, #28]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	61fb      	str	r3, [r7, #28]
 80020ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	e1cc      	b.n	800247c <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d11e      	bne.n	8002128 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80020fa:	b672      	cpsid	i
}
 80020fc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020fe:	2300      	movs	r3, #0
 8002100:	61bb      	str	r3, [r7, #24]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	61bb      	str	r3, [r7, #24]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	61bb      	str	r3, [r7, #24]
 8002112:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002122:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002124:	b662      	cpsie	i
}
 8002126:	e035      	b.n	8002194 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800212c:	2b02      	cmp	r3, #2
 800212e:	d11e      	bne.n	800216e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800213e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002140:	b672      	cpsid	i
}
 8002142:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	617b      	str	r3, [r7, #20]
 8002158:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002168:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800216a:	b662      	cpsie	i
}
 800216c:	e012      	b.n	8002194 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800217c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800217e:	2300      	movs	r3, #0
 8002180:	613b      	str	r3, [r7, #16]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	613b      	str	r3, [r7, #16]
 8002192:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002194:	e172      	b.n	800247c <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800219a:	2b03      	cmp	r3, #3
 800219c:	f200 811f 	bhi.w	80023de <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d123      	bne.n	80021f0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021aa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f000 fdfb 	bl	8002da8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e173      	b.n	80024a4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	691a      	ldr	r2, [r3, #16]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c6:	b2d2      	uxtb	r2, r2
 80021c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ce:	1c5a      	adds	r2, r3, #1
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021d8:	3b01      	subs	r3, #1
 80021da:	b29a      	uxth	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	3b01      	subs	r3, #1
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80021ee:	e145      	b.n	800247c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d152      	bne.n	800229e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021fe:	2200      	movs	r2, #0
 8002200:	4906      	ldr	r1, [pc, #24]	@ (800221c <HAL_I2C_Mem_Read+0x24c>)
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 fc26 	bl	8002a54 <I2C_WaitOnFlagUntilTimeout>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d008      	beq.n	8002220 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e148      	b.n	80024a4 <HAL_I2C_Mem_Read+0x4d4>
 8002212:	bf00      	nop
 8002214:	00100002 	.word	0x00100002
 8002218:	ffff0000 	.word	0xffff0000
 800221c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002220:	b672      	cpsid	i
}
 8002222:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002232:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	691a      	ldr	r2, [r3, #16]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002246:	1c5a      	adds	r2, r3, #1
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002250:	3b01      	subs	r3, #1
 8002252:	b29a      	uxth	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800225c:	b29b      	uxth	r3, r3
 800225e:	3b01      	subs	r3, #1
 8002260:	b29a      	uxth	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002266:	b662      	cpsie	i
}
 8002268:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	691a      	ldr	r2, [r3, #16]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002274:	b2d2      	uxtb	r2, r2
 8002276:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227c:	1c5a      	adds	r2, r3, #1
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002286:	3b01      	subs	r3, #1
 8002288:	b29a      	uxth	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002292:	b29b      	uxth	r3, r3
 8002294:	3b01      	subs	r3, #1
 8002296:	b29a      	uxth	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800229c:	e0ee      	b.n	800247c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800229e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a0:	9300      	str	r3, [sp, #0]
 80022a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022a4:	2200      	movs	r2, #0
 80022a6:	4981      	ldr	r1, [pc, #516]	@ (80024ac <HAL_I2C_Mem_Read+0x4dc>)
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f000 fbd3 	bl	8002a54 <I2C_WaitOnFlagUntilTimeout>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e0f5      	b.n	80024a4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80022c8:	b672      	cpsid	i
}
 80022ca:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	691a      	ldr	r2, [r3, #16]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022de:	1c5a      	adds	r2, r3, #1
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022e8:	3b01      	subs	r3, #1
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	3b01      	subs	r3, #1
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80022fe:	4b6c      	ldr	r3, [pc, #432]	@ (80024b0 <HAL_I2C_Mem_Read+0x4e0>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	08db      	lsrs	r3, r3, #3
 8002304:	4a6b      	ldr	r2, [pc, #428]	@ (80024b4 <HAL_I2C_Mem_Read+0x4e4>)
 8002306:	fba2 2303 	umull	r2, r3, r2, r3
 800230a:	0a1a      	lsrs	r2, r3, #8
 800230c:	4613      	mov	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	00da      	lsls	r2, r3, #3
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002318:	6a3b      	ldr	r3, [r7, #32]
 800231a:	3b01      	subs	r3, #1
 800231c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800231e:	6a3b      	ldr	r3, [r7, #32]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d118      	bne.n	8002356 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2220      	movs	r2, #32
 800232e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233e:	f043 0220 	orr.w	r2, r3, #32
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002346:	b662      	cpsie	i
}
 8002348:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e0a6      	b.n	80024a4 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b04      	cmp	r3, #4
 8002362:	d1d9      	bne.n	8002318 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002372:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	691a      	ldr	r2, [r3, #16]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002386:	1c5a      	adds	r2, r3, #1
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002390:	3b01      	subs	r3, #1
 8002392:	b29a      	uxth	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800239c:	b29b      	uxth	r3, r3
 800239e:	3b01      	subs	r3, #1
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80023a6:	b662      	cpsie	i
}
 80023a8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	691a      	ldr	r2, [r3, #16]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023bc:	1c5a      	adds	r2, r3, #1
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023c6:	3b01      	subs	r3, #1
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	3b01      	subs	r3, #1
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80023dc:	e04e      	b.n	800247c <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023e0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f000 fce0 	bl	8002da8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e058      	b.n	80024a4 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	691a      	ldr	r2, [r3, #16]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002404:	1c5a      	adds	r2, r3, #1
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800240e:	3b01      	subs	r3, #1
 8002410:	b29a      	uxth	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800241a:	b29b      	uxth	r3, r3
 800241c:	3b01      	subs	r3, #1
 800241e:	b29a      	uxth	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	f003 0304 	and.w	r3, r3, #4
 800242e:	2b04      	cmp	r3, #4
 8002430:	d124      	bne.n	800247c <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002436:	2b03      	cmp	r3, #3
 8002438:	d107      	bne.n	800244a <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002448:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	691a      	ldr	r2, [r3, #16]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002454:	b2d2      	uxtb	r2, r2
 8002456:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245c:	1c5a      	adds	r2, r3, #1
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002466:	3b01      	subs	r3, #1
 8002468:	b29a      	uxth	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002472:	b29b      	uxth	r3, r3
 8002474:	3b01      	subs	r3, #1
 8002476:	b29a      	uxth	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002480:	2b00      	cmp	r3, #0
 8002482:	f47f ae88 	bne.w	8002196 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2220      	movs	r2, #32
 800248a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800249e:	2300      	movs	r3, #0
 80024a0:	e000      	b.n	80024a4 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80024a2:	2302      	movs	r3, #2
  }
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3728      	adds	r7, #40	@ 0x28
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	00010004 	.word	0x00010004
 80024b0:	20000010 	.word	0x20000010
 80024b4:	14f8b589 	.word	0x14f8b589

080024b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b088      	sub	sp, #32
 80024bc:	af02      	add	r7, sp, #8
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	607a      	str	r2, [r7, #4]
 80024c2:	603b      	str	r3, [r7, #0]
 80024c4:	460b      	mov	r3, r1
 80024c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d006      	beq.n	80024e2 <I2C_MasterRequestWrite+0x2a>
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d003      	beq.n	80024e2 <I2C_MasterRequestWrite+0x2a>
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80024e0:	d108      	bne.n	80024f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	e00b      	b.n	800250c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f8:	2b12      	cmp	r3, #18
 80024fa:	d107      	bne.n	800250c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800250a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f000 fa9b 	bl	8002a54 <I2C_WaitOnFlagUntilTimeout>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00d      	beq.n	8002540 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800252e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002532:	d103      	bne.n	800253c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800253a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e035      	b.n	80025ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002548:	d108      	bne.n	800255c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800254a:	897b      	ldrh	r3, [r7, #10]
 800254c:	b2db      	uxtb	r3, r3
 800254e:	461a      	mov	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002558:	611a      	str	r2, [r3, #16]
 800255a:	e01b      	b.n	8002594 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800255c:	897b      	ldrh	r3, [r7, #10]
 800255e:	11db      	asrs	r3, r3, #7
 8002560:	b2db      	uxtb	r3, r3
 8002562:	f003 0306 	and.w	r3, r3, #6
 8002566:	b2db      	uxtb	r3, r3
 8002568:	f063 030f 	orn	r3, r3, #15
 800256c:	b2da      	uxtb	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	490e      	ldr	r1, [pc, #56]	@ (80025b4 <I2C_MasterRequestWrite+0xfc>)
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f000 fae4 	bl	8002b48 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e010      	b.n	80025ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800258a:	897b      	ldrh	r3, [r7, #10]
 800258c:	b2da      	uxtb	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	4907      	ldr	r1, [pc, #28]	@ (80025b8 <I2C_MasterRequestWrite+0x100>)
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 fad4 	bl	8002b48 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e000      	b.n	80025ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	00010008 	.word	0x00010008
 80025b8:	00010002 	.word	0x00010002

080025bc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b088      	sub	sp, #32
 80025c0:	af02      	add	r7, sp, #8
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	607a      	str	r2, [r7, #4]
 80025c6:	603b      	str	r3, [r7, #0]
 80025c8:	460b      	mov	r3, r1
 80025ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80025e0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	2b08      	cmp	r3, #8
 80025e6:	d006      	beq.n	80025f6 <I2C_MasterRequestRead+0x3a>
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d003      	beq.n	80025f6 <I2C_MasterRequestRead+0x3a>
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80025f4:	d108      	bne.n	8002608 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	e00b      	b.n	8002620 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260c:	2b11      	cmp	r3, #17
 800260e:	d107      	bne.n	8002620 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800261e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f000 fa11 	bl	8002a54 <I2C_WaitOnFlagUntilTimeout>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00d      	beq.n	8002654 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002642:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002646:	d103      	bne.n	8002650 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800264e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e079      	b.n	8002748 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800265c:	d108      	bne.n	8002670 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800265e:	897b      	ldrh	r3, [r7, #10]
 8002660:	b2db      	uxtb	r3, r3
 8002662:	f043 0301 	orr.w	r3, r3, #1
 8002666:	b2da      	uxtb	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	611a      	str	r2, [r3, #16]
 800266e:	e05f      	b.n	8002730 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002670:	897b      	ldrh	r3, [r7, #10]
 8002672:	11db      	asrs	r3, r3, #7
 8002674:	b2db      	uxtb	r3, r3
 8002676:	f003 0306 	and.w	r3, r3, #6
 800267a:	b2db      	uxtb	r3, r3
 800267c:	f063 030f 	orn	r3, r3, #15
 8002680:	b2da      	uxtb	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	4930      	ldr	r1, [pc, #192]	@ (8002750 <I2C_MasterRequestRead+0x194>)
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 fa5a 	bl	8002b48 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e054      	b.n	8002748 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800269e:	897b      	ldrh	r3, [r7, #10]
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	4929      	ldr	r1, [pc, #164]	@ (8002754 <I2C_MasterRequestRead+0x198>)
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 fa4a 	bl	8002b48 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e044      	b.n	8002748 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026be:	2300      	movs	r3, #0
 80026c0:	613b      	str	r3, [r7, #16]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	613b      	str	r3, [r7, #16]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026e2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f000 f9af 	bl	8002a54 <I2C_WaitOnFlagUntilTimeout>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00d      	beq.n	8002718 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002706:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800270a:	d103      	bne.n	8002714 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002712:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e017      	b.n	8002748 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002718:	897b      	ldrh	r3, [r7, #10]
 800271a:	11db      	asrs	r3, r3, #7
 800271c:	b2db      	uxtb	r3, r3
 800271e:	f003 0306 	and.w	r3, r3, #6
 8002722:	b2db      	uxtb	r3, r3
 8002724:	f063 030e 	orn	r3, r3, #14
 8002728:	b2da      	uxtb	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	4907      	ldr	r1, [pc, #28]	@ (8002754 <I2C_MasterRequestRead+0x198>)
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f000 fa06 	bl	8002b48 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e000      	b.n	8002748 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	00010008 	.word	0x00010008
 8002754:	00010002 	.word	0x00010002

08002758 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b088      	sub	sp, #32
 800275c:	af02      	add	r7, sp, #8
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	4608      	mov	r0, r1
 8002762:	4611      	mov	r1, r2
 8002764:	461a      	mov	r2, r3
 8002766:	4603      	mov	r3, r0
 8002768:	817b      	strh	r3, [r7, #10]
 800276a:	460b      	mov	r3, r1
 800276c:	813b      	strh	r3, [r7, #8]
 800276e:	4613      	mov	r3, r2
 8002770:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002780:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	6a3b      	ldr	r3, [r7, #32]
 8002788:	2200      	movs	r2, #0
 800278a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f000 f960 	bl	8002a54 <I2C_WaitOnFlagUntilTimeout>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00d      	beq.n	80027b6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027a8:	d103      	bne.n	80027b2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027b0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e05f      	b.n	8002876 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027b6:	897b      	ldrh	r3, [r7, #10]
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	461a      	mov	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80027c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c8:	6a3a      	ldr	r2, [r7, #32]
 80027ca:	492d      	ldr	r1, [pc, #180]	@ (8002880 <I2C_RequestMemoryWrite+0x128>)
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f000 f9bb 	bl	8002b48 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e04c      	b.n	8002876 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	617b      	str	r3, [r7, #20]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	617b      	str	r3, [r7, #20]
 80027f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027f4:	6a39      	ldr	r1, [r7, #32]
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 fa46 	bl	8002c88 <I2C_WaitOnTXEFlagUntilTimeout>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00d      	beq.n	800281e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002806:	2b04      	cmp	r3, #4
 8002808:	d107      	bne.n	800281a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002818:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e02b      	b.n	8002876 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800281e:	88fb      	ldrh	r3, [r7, #6]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d105      	bne.n	8002830 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002824:	893b      	ldrh	r3, [r7, #8]
 8002826:	b2da      	uxtb	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	611a      	str	r2, [r3, #16]
 800282e:	e021      	b.n	8002874 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002830:	893b      	ldrh	r3, [r7, #8]
 8002832:	0a1b      	lsrs	r3, r3, #8
 8002834:	b29b      	uxth	r3, r3
 8002836:	b2da      	uxtb	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800283e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002840:	6a39      	ldr	r1, [r7, #32]
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 fa20 	bl	8002c88 <I2C_WaitOnTXEFlagUntilTimeout>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00d      	beq.n	800286a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002852:	2b04      	cmp	r3, #4
 8002854:	d107      	bne.n	8002866 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002864:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e005      	b.n	8002876 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800286a:	893b      	ldrh	r3, [r7, #8]
 800286c:	b2da      	uxtb	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3718      	adds	r7, #24
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	00010002 	.word	0x00010002

08002884 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b088      	sub	sp, #32
 8002888:	af02      	add	r7, sp, #8
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	4608      	mov	r0, r1
 800288e:	4611      	mov	r1, r2
 8002890:	461a      	mov	r2, r3
 8002892:	4603      	mov	r3, r0
 8002894:	817b      	strh	r3, [r7, #10]
 8002896:	460b      	mov	r3, r1
 8002898:	813b      	strh	r3, [r7, #8]
 800289a:	4613      	mov	r3, r2
 800289c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80028ac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	6a3b      	ldr	r3, [r7, #32]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f000 f8c2 	bl	8002a54 <I2C_WaitOnFlagUntilTimeout>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00d      	beq.n	80028f2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028e4:	d103      	bne.n	80028ee <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028ec:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e0aa      	b.n	8002a48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028f2:	897b      	ldrh	r3, [r7, #10]
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	461a      	mov	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002900:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002904:	6a3a      	ldr	r2, [r7, #32]
 8002906:	4952      	ldr	r1, [pc, #328]	@ (8002a50 <I2C_RequestMemoryRead+0x1cc>)
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f000 f91d 	bl	8002b48 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e097      	b.n	8002a48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002918:	2300      	movs	r3, #0
 800291a:	617b      	str	r3, [r7, #20]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	617b      	str	r3, [r7, #20]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	617b      	str	r3, [r7, #20]
 800292c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800292e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002930:	6a39      	ldr	r1, [r7, #32]
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f000 f9a8 	bl	8002c88 <I2C_WaitOnTXEFlagUntilTimeout>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00d      	beq.n	800295a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002942:	2b04      	cmp	r3, #4
 8002944:	d107      	bne.n	8002956 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002954:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e076      	b.n	8002a48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800295a:	88fb      	ldrh	r3, [r7, #6]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d105      	bne.n	800296c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002960:	893b      	ldrh	r3, [r7, #8]
 8002962:	b2da      	uxtb	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	611a      	str	r2, [r3, #16]
 800296a:	e021      	b.n	80029b0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800296c:	893b      	ldrh	r3, [r7, #8]
 800296e:	0a1b      	lsrs	r3, r3, #8
 8002970:	b29b      	uxth	r3, r3
 8002972:	b2da      	uxtb	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800297a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800297c:	6a39      	ldr	r1, [r7, #32]
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f000 f982 	bl	8002c88 <I2C_WaitOnTXEFlagUntilTimeout>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00d      	beq.n	80029a6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298e:	2b04      	cmp	r3, #4
 8002990:	d107      	bne.n	80029a2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e050      	b.n	8002a48 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029a6:	893b      	ldrh	r3, [r7, #8]
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029b2:	6a39      	ldr	r1, [r7, #32]
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 f967 	bl	8002c88 <I2C_WaitOnTXEFlagUntilTimeout>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00d      	beq.n	80029dc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c4:	2b04      	cmp	r3, #4
 80029c6:	d107      	bne.n	80029d8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029d6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e035      	b.n	8002a48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029ea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ee:	9300      	str	r3, [sp, #0]
 80029f0:	6a3b      	ldr	r3, [r7, #32]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f000 f82b 	bl	8002a54 <I2C_WaitOnFlagUntilTimeout>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00d      	beq.n	8002a20 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a12:	d103      	bne.n	8002a1c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a1a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e013      	b.n	8002a48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a20:	897b      	ldrh	r3, [r7, #10]
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a32:	6a3a      	ldr	r2, [r7, #32]
 8002a34:	4906      	ldr	r1, [pc, #24]	@ (8002a50 <I2C_RequestMemoryRead+0x1cc>)
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f000 f886 	bl	8002b48 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3718      	adds	r7, #24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	00010002 	.word	0x00010002

08002a54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	603b      	str	r3, [r7, #0]
 8002a60:	4613      	mov	r3, r2
 8002a62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a64:	e048      	b.n	8002af8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6c:	d044      	beq.n	8002af8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a6e:	f7fe fa59 	bl	8000f24 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d302      	bcc.n	8002a84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d139      	bne.n	8002af8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	0c1b      	lsrs	r3, r3, #16
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d10d      	bne.n	8002aaa <I2C_WaitOnFlagUntilTimeout+0x56>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	43da      	mvns	r2, r3
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	bf0c      	ite	eq
 8002aa0:	2301      	moveq	r3, #1
 8002aa2:	2300      	movne	r3, #0
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	e00c      	b.n	8002ac4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	43da      	mvns	r2, r3
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	bf0c      	ite	eq
 8002abc:	2301      	moveq	r3, #1
 8002abe:	2300      	movne	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	79fb      	ldrb	r3, [r7, #7]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d116      	bne.n	8002af8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae4:	f043 0220 	orr.w	r2, r3, #32
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e023      	b.n	8002b40 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	0c1b      	lsrs	r3, r3, #16
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d10d      	bne.n	8002b1e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	43da      	mvns	r2, r3
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	bf0c      	ite	eq
 8002b14:	2301      	moveq	r3, #1
 8002b16:	2300      	movne	r3, #0
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	e00c      	b.n	8002b38 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	43da      	mvns	r2, r3
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	bf0c      	ite	eq
 8002b30:	2301      	moveq	r3, #1
 8002b32:	2300      	movne	r3, #0
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	461a      	mov	r2, r3
 8002b38:	79fb      	ldrb	r3, [r7, #7]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d093      	beq.n	8002a66 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
 8002b54:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b56:	e071      	b.n	8002c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b66:	d123      	bne.n	8002bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b76:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b80:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9c:	f043 0204 	orr.w	r2, r3, #4
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e067      	b.n	8002c80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb6:	d041      	beq.n	8002c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bb8:	f7fe f9b4 	bl	8000f24 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d302      	bcc.n	8002bce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d136      	bne.n	8002c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	0c1b      	lsrs	r3, r3, #16
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d10c      	bne.n	8002bf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	43da      	mvns	r2, r3
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	4013      	ands	r3, r2
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	bf14      	ite	ne
 8002bea:	2301      	movne	r3, #1
 8002bec:	2300      	moveq	r3, #0
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	e00b      	b.n	8002c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	43da      	mvns	r2, r3
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	bf14      	ite	ne
 8002c04:	2301      	movne	r3, #1
 8002c06:	2300      	moveq	r3, #0
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d016      	beq.n	8002c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2220      	movs	r2, #32
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c28:	f043 0220 	orr.w	r2, r3, #32
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e021      	b.n	8002c80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	0c1b      	lsrs	r3, r3, #16
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d10c      	bne.n	8002c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	43da      	mvns	r2, r3
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	4013      	ands	r3, r2
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	bf14      	ite	ne
 8002c58:	2301      	movne	r3, #1
 8002c5a:	2300      	moveq	r3, #0
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	e00b      	b.n	8002c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	43da      	mvns	r2, r3
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	bf14      	ite	ne
 8002c72:	2301      	movne	r3, #1
 8002c74:	2300      	moveq	r3, #0
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f47f af6d 	bne.w	8002b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c94:	e034      	b.n	8002d00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 f8e3 	bl	8002e62 <I2C_IsAcknowledgeFailed>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e034      	b.n	8002d10 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cac:	d028      	beq.n	8002d00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cae:	f7fe f939 	bl	8000f24 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	68ba      	ldr	r2, [r7, #8]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d302      	bcc.n	8002cc4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d11d      	bne.n	8002d00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cce:	2b80      	cmp	r3, #128	@ 0x80
 8002cd0:	d016      	beq.n	8002d00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2220      	movs	r2, #32
 8002cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cec:	f043 0220 	orr.w	r2, r3, #32
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e007      	b.n	8002d10 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d0a:	2b80      	cmp	r3, #128	@ 0x80
 8002d0c:	d1c3      	bne.n	8002c96 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d24:	e034      	b.n	8002d90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f000 f89b 	bl	8002e62 <I2C_IsAcknowledgeFailed>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e034      	b.n	8002da0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d3c:	d028      	beq.n	8002d90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d3e:	f7fe f8f1 	bl	8000f24 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	68ba      	ldr	r2, [r7, #8]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d302      	bcc.n	8002d54 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d11d      	bne.n	8002d90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	f003 0304 	and.w	r3, r3, #4
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	d016      	beq.n	8002d90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7c:	f043 0220 	orr.w	r2, r3, #32
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e007      	b.n	8002da0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	f003 0304 	and.w	r3, r3, #4
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	d1c3      	bne.n	8002d26 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002db4:	e049      	b.n	8002e4a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	f003 0310 	and.w	r3, r3, #16
 8002dc0:	2b10      	cmp	r3, #16
 8002dc2:	d119      	bne.n	8002df8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f06f 0210 	mvn.w	r2, #16
 8002dcc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e030      	b.n	8002e5a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002df8:	f7fe f894 	bl	8000f24 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	68ba      	ldr	r2, [r7, #8]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d302      	bcc.n	8002e0e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d11d      	bne.n	8002e4a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e18:	2b40      	cmp	r3, #64	@ 0x40
 8002e1a:	d016      	beq.n	8002e4a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2220      	movs	r2, #32
 8002e26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e36:	f043 0220 	orr.w	r2, r3, #32
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e007      	b.n	8002e5a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e54:	2b40      	cmp	r3, #64	@ 0x40
 8002e56:	d1ae      	bne.n	8002db6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e78:	d11b      	bne.n	8002eb2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e82:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9e:	f043 0204 	orr.w	r2, r3, #4
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e000      	b.n	8002eb4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bc80      	pop	{r7}
 8002ebc:	4770      	bx	lr
	...

08002ec0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e272      	b.n	80033b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f000 8087 	beq.w	8002fee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ee0:	4b92      	ldr	r3, [pc, #584]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f003 030c 	and.w	r3, r3, #12
 8002ee8:	2b04      	cmp	r3, #4
 8002eea:	d00c      	beq.n	8002f06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002eec:	4b8f      	ldr	r3, [pc, #572]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f003 030c 	and.w	r3, r3, #12
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	d112      	bne.n	8002f1e <HAL_RCC_OscConfig+0x5e>
 8002ef8:	4b8c      	ldr	r3, [pc, #560]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f04:	d10b      	bne.n	8002f1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f06:	4b89      	ldr	r3, [pc, #548]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d06c      	beq.n	8002fec <HAL_RCC_OscConfig+0x12c>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d168      	bne.n	8002fec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e24c      	b.n	80033b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f26:	d106      	bne.n	8002f36 <HAL_RCC_OscConfig+0x76>
 8002f28:	4b80      	ldr	r3, [pc, #512]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a7f      	ldr	r2, [pc, #508]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002f2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f32:	6013      	str	r3, [r2, #0]
 8002f34:	e02e      	b.n	8002f94 <HAL_RCC_OscConfig+0xd4>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10c      	bne.n	8002f58 <HAL_RCC_OscConfig+0x98>
 8002f3e:	4b7b      	ldr	r3, [pc, #492]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a7a      	ldr	r2, [pc, #488]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002f44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	4b78      	ldr	r3, [pc, #480]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a77      	ldr	r2, [pc, #476]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002f50:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f54:	6013      	str	r3, [r2, #0]
 8002f56:	e01d      	b.n	8002f94 <HAL_RCC_OscConfig+0xd4>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f60:	d10c      	bne.n	8002f7c <HAL_RCC_OscConfig+0xbc>
 8002f62:	4b72      	ldr	r3, [pc, #456]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a71      	ldr	r2, [pc, #452]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002f68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f6c:	6013      	str	r3, [r2, #0]
 8002f6e:	4b6f      	ldr	r3, [pc, #444]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a6e      	ldr	r2, [pc, #440]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002f74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	e00b      	b.n	8002f94 <HAL_RCC_OscConfig+0xd4>
 8002f7c:	4b6b      	ldr	r3, [pc, #428]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a6a      	ldr	r2, [pc, #424]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002f82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f86:	6013      	str	r3, [r2, #0]
 8002f88:	4b68      	ldr	r3, [pc, #416]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a67      	ldr	r2, [pc, #412]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002f8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d013      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9c:	f7fd ffc2 	bl	8000f24 <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fa4:	f7fd ffbe 	bl	8000f24 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b64      	cmp	r3, #100	@ 0x64
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e200      	b.n	80033b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb6:	4b5d      	ldr	r3, [pc, #372]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0f0      	beq.n	8002fa4 <HAL_RCC_OscConfig+0xe4>
 8002fc2:	e014      	b.n	8002fee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc4:	f7fd ffae 	bl	8000f24 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fcc:	f7fd ffaa 	bl	8000f24 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b64      	cmp	r3, #100	@ 0x64
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e1ec      	b.n	80033b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fde:	4b53      	ldr	r3, [pc, #332]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1f0      	bne.n	8002fcc <HAL_RCC_OscConfig+0x10c>
 8002fea:	e000      	b.n	8002fee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d063      	beq.n	80030c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ffa:	4b4c      	ldr	r3, [pc, #304]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f003 030c 	and.w	r3, r3, #12
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00b      	beq.n	800301e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003006:	4b49      	ldr	r3, [pc, #292]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f003 030c 	and.w	r3, r3, #12
 800300e:	2b08      	cmp	r3, #8
 8003010:	d11c      	bne.n	800304c <HAL_RCC_OscConfig+0x18c>
 8003012:	4b46      	ldr	r3, [pc, #280]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d116      	bne.n	800304c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800301e:	4b43      	ldr	r3, [pc, #268]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d005      	beq.n	8003036 <HAL_RCC_OscConfig+0x176>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d001      	beq.n	8003036 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e1c0      	b.n	80033b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003036:	4b3d      	ldr	r3, [pc, #244]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	4939      	ldr	r1, [pc, #228]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8003046:	4313      	orrs	r3, r2
 8003048:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800304a:	e03a      	b.n	80030c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d020      	beq.n	8003096 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003054:	4b36      	ldr	r3, [pc, #216]	@ (8003130 <HAL_RCC_OscConfig+0x270>)
 8003056:	2201      	movs	r2, #1
 8003058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800305a:	f7fd ff63 	bl	8000f24 <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003060:	e008      	b.n	8003074 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003062:	f7fd ff5f 	bl	8000f24 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e1a1      	b.n	80033b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003074:	4b2d      	ldr	r3, [pc, #180]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0f0      	beq.n	8003062 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003080:	4b2a      	ldr	r3, [pc, #168]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	00db      	lsls	r3, r3, #3
 800308e:	4927      	ldr	r1, [pc, #156]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8003090:	4313      	orrs	r3, r2
 8003092:	600b      	str	r3, [r1, #0]
 8003094:	e015      	b.n	80030c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003096:	4b26      	ldr	r3, [pc, #152]	@ (8003130 <HAL_RCC_OscConfig+0x270>)
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309c:	f7fd ff42 	bl	8000f24 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030a4:	f7fd ff3e 	bl	8000f24 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e180      	b.n	80033b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030b6:	4b1d      	ldr	r3, [pc, #116]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f0      	bne.n	80030a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0308 	and.w	r3, r3, #8
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d03a      	beq.n	8003144 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d019      	beq.n	800310a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030d6:	4b17      	ldr	r3, [pc, #92]	@ (8003134 <HAL_RCC_OscConfig+0x274>)
 80030d8:	2201      	movs	r2, #1
 80030da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030dc:	f7fd ff22 	bl	8000f24 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030e4:	f7fd ff1e 	bl	8000f24 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e160      	b.n	80033b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030f6:	4b0d      	ldr	r3, [pc, #52]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 80030f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0f0      	beq.n	80030e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003102:	2001      	movs	r0, #1
 8003104:	f000 face 	bl	80036a4 <RCC_Delay>
 8003108:	e01c      	b.n	8003144 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800310a:	4b0a      	ldr	r3, [pc, #40]	@ (8003134 <HAL_RCC_OscConfig+0x274>)
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003110:	f7fd ff08 	bl	8000f24 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003116:	e00f      	b.n	8003138 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003118:	f7fd ff04 	bl	8000f24 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d908      	bls.n	8003138 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e146      	b.n	80033b8 <HAL_RCC_OscConfig+0x4f8>
 800312a:	bf00      	nop
 800312c:	40021000 	.word	0x40021000
 8003130:	42420000 	.word	0x42420000
 8003134:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003138:	4b92      	ldr	r3, [pc, #584]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 800313a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1e9      	bne.n	8003118 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0304 	and.w	r3, r3, #4
 800314c:	2b00      	cmp	r3, #0
 800314e:	f000 80a6 	beq.w	800329e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003152:	2300      	movs	r3, #0
 8003154:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003156:	4b8b      	ldr	r3, [pc, #556]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10d      	bne.n	800317e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003162:	4b88      	ldr	r3, [pc, #544]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	4a87      	ldr	r2, [pc, #540]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 8003168:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800316c:	61d3      	str	r3, [r2, #28]
 800316e:	4b85      	ldr	r3, [pc, #532]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003176:	60bb      	str	r3, [r7, #8]
 8003178:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800317a:	2301      	movs	r3, #1
 800317c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800317e:	4b82      	ldr	r3, [pc, #520]	@ (8003388 <HAL_RCC_OscConfig+0x4c8>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003186:	2b00      	cmp	r3, #0
 8003188:	d118      	bne.n	80031bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800318a:	4b7f      	ldr	r3, [pc, #508]	@ (8003388 <HAL_RCC_OscConfig+0x4c8>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a7e      	ldr	r2, [pc, #504]	@ (8003388 <HAL_RCC_OscConfig+0x4c8>)
 8003190:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003194:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003196:	f7fd fec5 	bl	8000f24 <HAL_GetTick>
 800319a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800319c:	e008      	b.n	80031b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800319e:	f7fd fec1 	bl	8000f24 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b64      	cmp	r3, #100	@ 0x64
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e103      	b.n	80033b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b0:	4b75      	ldr	r3, [pc, #468]	@ (8003388 <HAL_RCC_OscConfig+0x4c8>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0f0      	beq.n	800319e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d106      	bne.n	80031d2 <HAL_RCC_OscConfig+0x312>
 80031c4:	4b6f      	ldr	r3, [pc, #444]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	4a6e      	ldr	r2, [pc, #440]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 80031ca:	f043 0301 	orr.w	r3, r3, #1
 80031ce:	6213      	str	r3, [r2, #32]
 80031d0:	e02d      	b.n	800322e <HAL_RCC_OscConfig+0x36e>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10c      	bne.n	80031f4 <HAL_RCC_OscConfig+0x334>
 80031da:	4b6a      	ldr	r3, [pc, #424]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	4a69      	ldr	r2, [pc, #420]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 80031e0:	f023 0301 	bic.w	r3, r3, #1
 80031e4:	6213      	str	r3, [r2, #32]
 80031e6:	4b67      	ldr	r3, [pc, #412]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	4a66      	ldr	r2, [pc, #408]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 80031ec:	f023 0304 	bic.w	r3, r3, #4
 80031f0:	6213      	str	r3, [r2, #32]
 80031f2:	e01c      	b.n	800322e <HAL_RCC_OscConfig+0x36e>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	2b05      	cmp	r3, #5
 80031fa:	d10c      	bne.n	8003216 <HAL_RCC_OscConfig+0x356>
 80031fc:	4b61      	ldr	r3, [pc, #388]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	4a60      	ldr	r2, [pc, #384]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 8003202:	f043 0304 	orr.w	r3, r3, #4
 8003206:	6213      	str	r3, [r2, #32]
 8003208:	4b5e      	ldr	r3, [pc, #376]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	4a5d      	ldr	r2, [pc, #372]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 800320e:	f043 0301 	orr.w	r3, r3, #1
 8003212:	6213      	str	r3, [r2, #32]
 8003214:	e00b      	b.n	800322e <HAL_RCC_OscConfig+0x36e>
 8003216:	4b5b      	ldr	r3, [pc, #364]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	4a5a      	ldr	r2, [pc, #360]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 800321c:	f023 0301 	bic.w	r3, r3, #1
 8003220:	6213      	str	r3, [r2, #32]
 8003222:	4b58      	ldr	r3, [pc, #352]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	4a57      	ldr	r2, [pc, #348]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 8003228:	f023 0304 	bic.w	r3, r3, #4
 800322c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d015      	beq.n	8003262 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003236:	f7fd fe75 	bl	8000f24 <HAL_GetTick>
 800323a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800323c:	e00a      	b.n	8003254 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800323e:	f7fd fe71 	bl	8000f24 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	f241 3288 	movw	r2, #5000	@ 0x1388
 800324c:	4293      	cmp	r3, r2
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e0b1      	b.n	80033b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003254:	4b4b      	ldr	r3, [pc, #300]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d0ee      	beq.n	800323e <HAL_RCC_OscConfig+0x37e>
 8003260:	e014      	b.n	800328c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003262:	f7fd fe5f 	bl	8000f24 <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003268:	e00a      	b.n	8003280 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800326a:	f7fd fe5b 	bl	8000f24 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003278:	4293      	cmp	r3, r2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e09b      	b.n	80033b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003280:	4b40      	ldr	r3, [pc, #256]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1ee      	bne.n	800326a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800328c:	7dfb      	ldrb	r3, [r7, #23]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d105      	bne.n	800329e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003292:	4b3c      	ldr	r3, [pc, #240]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	4a3b      	ldr	r2, [pc, #236]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 8003298:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800329c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 8087 	beq.w	80033b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032a8:	4b36      	ldr	r3, [pc, #216]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f003 030c 	and.w	r3, r3, #12
 80032b0:	2b08      	cmp	r3, #8
 80032b2:	d061      	beq.n	8003378 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d146      	bne.n	800334a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032bc:	4b33      	ldr	r3, [pc, #204]	@ (800338c <HAL_RCC_OscConfig+0x4cc>)
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c2:	f7fd fe2f 	bl	8000f24 <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032c8:	e008      	b.n	80032dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ca:	f7fd fe2b 	bl	8000f24 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e06d      	b.n	80033b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032dc:	4b29      	ldr	r3, [pc, #164]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1f0      	bne.n	80032ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032f0:	d108      	bne.n	8003304 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032f2:	4b24      	ldr	r3, [pc, #144]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	4921      	ldr	r1, [pc, #132]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 8003300:	4313      	orrs	r3, r2
 8003302:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003304:	4b1f      	ldr	r3, [pc, #124]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a19      	ldr	r1, [r3, #32]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003314:	430b      	orrs	r3, r1
 8003316:	491b      	ldr	r1, [pc, #108]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 8003318:	4313      	orrs	r3, r2
 800331a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800331c:	4b1b      	ldr	r3, [pc, #108]	@ (800338c <HAL_RCC_OscConfig+0x4cc>)
 800331e:	2201      	movs	r2, #1
 8003320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003322:	f7fd fdff 	bl	8000f24 <HAL_GetTick>
 8003326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003328:	e008      	b.n	800333c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800332a:	f7fd fdfb 	bl	8000f24 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d901      	bls.n	800333c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e03d      	b.n	80033b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800333c:	4b11      	ldr	r3, [pc, #68]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d0f0      	beq.n	800332a <HAL_RCC_OscConfig+0x46a>
 8003348:	e035      	b.n	80033b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800334a:	4b10      	ldr	r3, [pc, #64]	@ (800338c <HAL_RCC_OscConfig+0x4cc>)
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003350:	f7fd fde8 	bl	8000f24 <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003356:	e008      	b.n	800336a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003358:	f7fd fde4 	bl	8000f24 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e026      	b.n	80033b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800336a:	4b06      	ldr	r3, [pc, #24]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1f0      	bne.n	8003358 <HAL_RCC_OscConfig+0x498>
 8003376:	e01e      	b.n	80033b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	69db      	ldr	r3, [r3, #28]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d107      	bne.n	8003390 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e019      	b.n	80033b8 <HAL_RCC_OscConfig+0x4f8>
 8003384:	40021000 	.word	0x40021000
 8003388:	40007000 	.word	0x40007000
 800338c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003390:	4b0b      	ldr	r3, [pc, #44]	@ (80033c0 <HAL_RCC_OscConfig+0x500>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d106      	bne.n	80033b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d001      	beq.n	80033b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e000      	b.n	80033b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3718      	adds	r7, #24
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40021000 	.word	0x40021000

080033c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e0d0      	b.n	800357a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033d8:	4b6a      	ldr	r3, [pc, #424]	@ (8003584 <HAL_RCC_ClockConfig+0x1c0>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0307 	and.w	r3, r3, #7
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d910      	bls.n	8003408 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033e6:	4b67      	ldr	r3, [pc, #412]	@ (8003584 <HAL_RCC_ClockConfig+0x1c0>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f023 0207 	bic.w	r2, r3, #7
 80033ee:	4965      	ldr	r1, [pc, #404]	@ (8003584 <HAL_RCC_ClockConfig+0x1c0>)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033f6:	4b63      	ldr	r3, [pc, #396]	@ (8003584 <HAL_RCC_ClockConfig+0x1c0>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0307 	and.w	r3, r3, #7
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	429a      	cmp	r2, r3
 8003402:	d001      	beq.n	8003408 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e0b8      	b.n	800357a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d020      	beq.n	8003456 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	2b00      	cmp	r3, #0
 800341e:	d005      	beq.n	800342c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003420:	4b59      	ldr	r3, [pc, #356]	@ (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	4a58      	ldr	r2, [pc, #352]	@ (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 8003426:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800342a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0308 	and.w	r3, r3, #8
 8003434:	2b00      	cmp	r3, #0
 8003436:	d005      	beq.n	8003444 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003438:	4b53      	ldr	r3, [pc, #332]	@ (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	4a52      	ldr	r2, [pc, #328]	@ (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 800343e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003442:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003444:	4b50      	ldr	r3, [pc, #320]	@ (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	494d      	ldr	r1, [pc, #308]	@ (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 8003452:	4313      	orrs	r3, r2
 8003454:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d040      	beq.n	80034e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d107      	bne.n	800347a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800346a:	4b47      	ldr	r3, [pc, #284]	@ (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d115      	bne.n	80034a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e07f      	b.n	800357a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2b02      	cmp	r3, #2
 8003480:	d107      	bne.n	8003492 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003482:	4b41      	ldr	r3, [pc, #260]	@ (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d109      	bne.n	80034a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e073      	b.n	800357a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003492:	4b3d      	ldr	r3, [pc, #244]	@ (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e06b      	b.n	800357a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034a2:	4b39      	ldr	r3, [pc, #228]	@ (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f023 0203 	bic.w	r2, r3, #3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	4936      	ldr	r1, [pc, #216]	@ (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034b4:	f7fd fd36 	bl	8000f24 <HAL_GetTick>
 80034b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ba:	e00a      	b.n	80034d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034bc:	f7fd fd32 	bl	8000f24 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e053      	b.n	800357a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034d2:	4b2d      	ldr	r3, [pc, #180]	@ (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f003 020c 	and.w	r2, r3, #12
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d1eb      	bne.n	80034bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034e4:	4b27      	ldr	r3, [pc, #156]	@ (8003584 <HAL_RCC_ClockConfig+0x1c0>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0307 	and.w	r3, r3, #7
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d210      	bcs.n	8003514 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f2:	4b24      	ldr	r3, [pc, #144]	@ (8003584 <HAL_RCC_ClockConfig+0x1c0>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f023 0207 	bic.w	r2, r3, #7
 80034fa:	4922      	ldr	r1, [pc, #136]	@ (8003584 <HAL_RCC_ClockConfig+0x1c0>)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	4313      	orrs	r3, r2
 8003500:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003502:	4b20      	ldr	r3, [pc, #128]	@ (8003584 <HAL_RCC_ClockConfig+0x1c0>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	429a      	cmp	r2, r3
 800350e:	d001      	beq.n	8003514 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e032      	b.n	800357a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b00      	cmp	r3, #0
 800351e:	d008      	beq.n	8003532 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003520:	4b19      	ldr	r3, [pc, #100]	@ (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	4916      	ldr	r1, [pc, #88]	@ (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 800352e:	4313      	orrs	r3, r2
 8003530:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b00      	cmp	r3, #0
 800353c:	d009      	beq.n	8003552 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800353e:	4b12      	ldr	r3, [pc, #72]	@ (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	490e      	ldr	r1, [pc, #56]	@ (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 800354e:	4313      	orrs	r3, r2
 8003550:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003552:	f000 f821 	bl	8003598 <HAL_RCC_GetSysClockFreq>
 8003556:	4602      	mov	r2, r0
 8003558:	4b0b      	ldr	r3, [pc, #44]	@ (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	091b      	lsrs	r3, r3, #4
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	490a      	ldr	r1, [pc, #40]	@ (800358c <HAL_RCC_ClockConfig+0x1c8>)
 8003564:	5ccb      	ldrb	r3, [r1, r3]
 8003566:	fa22 f303 	lsr.w	r3, r2, r3
 800356a:	4a09      	ldr	r2, [pc, #36]	@ (8003590 <HAL_RCC_ClockConfig+0x1cc>)
 800356c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800356e:	4b09      	ldr	r3, [pc, #36]	@ (8003594 <HAL_RCC_ClockConfig+0x1d0>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f7fd fc94 	bl	8000ea0 <HAL_InitTick>

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40022000 	.word	0x40022000
 8003588:	40021000 	.word	0x40021000
 800358c:	08004280 	.word	0x08004280
 8003590:	20000010 	.word	0x20000010
 8003594:	20000014 	.word	0x20000014

08003598 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003598:	b480      	push	{r7}
 800359a:	b087      	sub	sp, #28
 800359c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800359e:	2300      	movs	r3, #0
 80035a0:	60fb      	str	r3, [r7, #12]
 80035a2:	2300      	movs	r3, #0
 80035a4:	60bb      	str	r3, [r7, #8]
 80035a6:	2300      	movs	r3, #0
 80035a8:	617b      	str	r3, [r7, #20]
 80035aa:	2300      	movs	r3, #0
 80035ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80035ae:	2300      	movs	r3, #0
 80035b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035b2:	4b1e      	ldr	r3, [pc, #120]	@ (800362c <HAL_RCC_GetSysClockFreq+0x94>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f003 030c 	and.w	r3, r3, #12
 80035be:	2b04      	cmp	r3, #4
 80035c0:	d002      	beq.n	80035c8 <HAL_RCC_GetSysClockFreq+0x30>
 80035c2:	2b08      	cmp	r3, #8
 80035c4:	d003      	beq.n	80035ce <HAL_RCC_GetSysClockFreq+0x36>
 80035c6:	e027      	b.n	8003618 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035c8:	4b19      	ldr	r3, [pc, #100]	@ (8003630 <HAL_RCC_GetSysClockFreq+0x98>)
 80035ca:	613b      	str	r3, [r7, #16]
      break;
 80035cc:	e027      	b.n	800361e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	0c9b      	lsrs	r3, r3, #18
 80035d2:	f003 030f 	and.w	r3, r3, #15
 80035d6:	4a17      	ldr	r2, [pc, #92]	@ (8003634 <HAL_RCC_GetSysClockFreq+0x9c>)
 80035d8:	5cd3      	ldrb	r3, [r2, r3]
 80035da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d010      	beq.n	8003608 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035e6:	4b11      	ldr	r3, [pc, #68]	@ (800362c <HAL_RCC_GetSysClockFreq+0x94>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	0c5b      	lsrs	r3, r3, #17
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	4a11      	ldr	r2, [pc, #68]	@ (8003638 <HAL_RCC_GetSysClockFreq+0xa0>)
 80035f2:	5cd3      	ldrb	r3, [r2, r3]
 80035f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003630 <HAL_RCC_GetSysClockFreq+0x98>)
 80035fa:	fb03 f202 	mul.w	r2, r3, r2
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	fbb2 f3f3 	udiv	r3, r2, r3
 8003604:	617b      	str	r3, [r7, #20]
 8003606:	e004      	b.n	8003612 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a0c      	ldr	r2, [pc, #48]	@ (800363c <HAL_RCC_GetSysClockFreq+0xa4>)
 800360c:	fb02 f303 	mul.w	r3, r2, r3
 8003610:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	613b      	str	r3, [r7, #16]
      break;
 8003616:	e002      	b.n	800361e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003618:	4b05      	ldr	r3, [pc, #20]	@ (8003630 <HAL_RCC_GetSysClockFreq+0x98>)
 800361a:	613b      	str	r3, [r7, #16]
      break;
 800361c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800361e:	693b      	ldr	r3, [r7, #16]
}
 8003620:	4618      	mov	r0, r3
 8003622:	371c      	adds	r7, #28
 8003624:	46bd      	mov	sp, r7
 8003626:	bc80      	pop	{r7}
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	40021000 	.word	0x40021000
 8003630:	007a1200 	.word	0x007a1200
 8003634:	08004298 	.word	0x08004298
 8003638:	080042a8 	.word	0x080042a8
 800363c:	003d0900 	.word	0x003d0900

08003640 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003644:	4b02      	ldr	r3, [pc, #8]	@ (8003650 <HAL_RCC_GetHCLKFreq+0x10>)
 8003646:	681b      	ldr	r3, [r3, #0]
}
 8003648:	4618      	mov	r0, r3
 800364a:	46bd      	mov	sp, r7
 800364c:	bc80      	pop	{r7}
 800364e:	4770      	bx	lr
 8003650:	20000010 	.word	0x20000010

08003654 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003658:	f7ff fff2 	bl	8003640 <HAL_RCC_GetHCLKFreq>
 800365c:	4602      	mov	r2, r0
 800365e:	4b05      	ldr	r3, [pc, #20]	@ (8003674 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	0a1b      	lsrs	r3, r3, #8
 8003664:	f003 0307 	and.w	r3, r3, #7
 8003668:	4903      	ldr	r1, [pc, #12]	@ (8003678 <HAL_RCC_GetPCLK1Freq+0x24>)
 800366a:	5ccb      	ldrb	r3, [r1, r3]
 800366c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003670:	4618      	mov	r0, r3
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40021000 	.word	0x40021000
 8003678:	08004290 	.word	0x08004290

0800367c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003680:	f7ff ffde 	bl	8003640 <HAL_RCC_GetHCLKFreq>
 8003684:	4602      	mov	r2, r0
 8003686:	4b05      	ldr	r3, [pc, #20]	@ (800369c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	0adb      	lsrs	r3, r3, #11
 800368c:	f003 0307 	and.w	r3, r3, #7
 8003690:	4903      	ldr	r1, [pc, #12]	@ (80036a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003692:	5ccb      	ldrb	r3, [r1, r3]
 8003694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003698:	4618      	mov	r0, r3
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40021000 	.word	0x40021000
 80036a0:	08004290 	.word	0x08004290

080036a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036ac:	4b0a      	ldr	r3, [pc, #40]	@ (80036d8 <RCC_Delay+0x34>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a0a      	ldr	r2, [pc, #40]	@ (80036dc <RCC_Delay+0x38>)
 80036b2:	fba2 2303 	umull	r2, r3, r2, r3
 80036b6:	0a5b      	lsrs	r3, r3, #9
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	fb02 f303 	mul.w	r3, r2, r3
 80036be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036c0:	bf00      	nop
  }
  while (Delay --);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	1e5a      	subs	r2, r3, #1
 80036c6:	60fa      	str	r2, [r7, #12]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1f9      	bne.n	80036c0 <RCC_Delay+0x1c>
}
 80036cc:	bf00      	nop
 80036ce:	bf00      	nop
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bc80      	pop	{r7}
 80036d6:	4770      	bx	lr
 80036d8:	20000010 	.word	0x20000010
 80036dc:	10624dd3 	.word	0x10624dd3

080036e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e042      	b.n	8003778 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d106      	bne.n	800370c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7fd fada 	bl	8000cc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2224      	movs	r2, #36	@ 0x24
 8003710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68da      	ldr	r2, [r3, #12]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003722:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 f82b 	bl	8003780 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	691a      	ldr	r2, [r3, #16]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003738:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	695a      	ldr	r2, [r3, #20]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003748:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68da      	ldr	r2, [r3, #12]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003758:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2220      	movs	r2, #32
 8003764:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2220      	movs	r2, #32
 800376c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3708      	adds	r7, #8
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	430a      	orrs	r2, r1
 800379c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689a      	ldr	r2, [r3, #8]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80037ba:	f023 030c 	bic.w	r3, r3, #12
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6812      	ldr	r2, [r2, #0]
 80037c2:	68b9      	ldr	r1, [r7, #8]
 80037c4:	430b      	orrs	r3, r1
 80037c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	699a      	ldr	r2, [r3, #24]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a2c      	ldr	r2, [pc, #176]	@ (8003894 <UART_SetConfig+0x114>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d103      	bne.n	80037f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80037e8:	f7ff ff48 	bl	800367c <HAL_RCC_GetPCLK2Freq>
 80037ec:	60f8      	str	r0, [r7, #12]
 80037ee:	e002      	b.n	80037f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80037f0:	f7ff ff30 	bl	8003654 <HAL_RCC_GetPCLK1Freq>
 80037f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	4613      	mov	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4413      	add	r3, r2
 80037fe:	009a      	lsls	r2, r3, #2
 8003800:	441a      	add	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	fbb2 f3f3 	udiv	r3, r2, r3
 800380c:	4a22      	ldr	r2, [pc, #136]	@ (8003898 <UART_SetConfig+0x118>)
 800380e:	fba2 2303 	umull	r2, r3, r2, r3
 8003812:	095b      	lsrs	r3, r3, #5
 8003814:	0119      	lsls	r1, r3, #4
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	4613      	mov	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4413      	add	r3, r2
 800381e:	009a      	lsls	r2, r3, #2
 8003820:	441a      	add	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	fbb2 f2f3 	udiv	r2, r2, r3
 800382c:	4b1a      	ldr	r3, [pc, #104]	@ (8003898 <UART_SetConfig+0x118>)
 800382e:	fba3 0302 	umull	r0, r3, r3, r2
 8003832:	095b      	lsrs	r3, r3, #5
 8003834:	2064      	movs	r0, #100	@ 0x64
 8003836:	fb00 f303 	mul.w	r3, r0, r3
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	011b      	lsls	r3, r3, #4
 800383e:	3332      	adds	r3, #50	@ 0x32
 8003840:	4a15      	ldr	r2, [pc, #84]	@ (8003898 <UART_SetConfig+0x118>)
 8003842:	fba2 2303 	umull	r2, r3, r2, r3
 8003846:	095b      	lsrs	r3, r3, #5
 8003848:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800384c:	4419      	add	r1, r3
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	4613      	mov	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4413      	add	r3, r2
 8003856:	009a      	lsls	r2, r3, #2
 8003858:	441a      	add	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	fbb2 f2f3 	udiv	r2, r2, r3
 8003864:	4b0c      	ldr	r3, [pc, #48]	@ (8003898 <UART_SetConfig+0x118>)
 8003866:	fba3 0302 	umull	r0, r3, r3, r2
 800386a:	095b      	lsrs	r3, r3, #5
 800386c:	2064      	movs	r0, #100	@ 0x64
 800386e:	fb00 f303 	mul.w	r3, r0, r3
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	011b      	lsls	r3, r3, #4
 8003876:	3332      	adds	r3, #50	@ 0x32
 8003878:	4a07      	ldr	r2, [pc, #28]	@ (8003898 <UART_SetConfig+0x118>)
 800387a:	fba2 2303 	umull	r2, r3, r2, r3
 800387e:	095b      	lsrs	r3, r3, #5
 8003880:	f003 020f 	and.w	r2, r3, #15
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	440a      	add	r2, r1
 800388a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800388c:	bf00      	nop
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40013800 	.word	0x40013800
 8003898:	51eb851f 	.word	0x51eb851f

0800389c <siprintf>:
 800389c:	b40e      	push	{r1, r2, r3}
 800389e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80038a2:	b500      	push	{lr}
 80038a4:	b09c      	sub	sp, #112	@ 0x70
 80038a6:	ab1d      	add	r3, sp, #116	@ 0x74
 80038a8:	9002      	str	r0, [sp, #8]
 80038aa:	9006      	str	r0, [sp, #24]
 80038ac:	9107      	str	r1, [sp, #28]
 80038ae:	9104      	str	r1, [sp, #16]
 80038b0:	4808      	ldr	r0, [pc, #32]	@ (80038d4 <siprintf+0x38>)
 80038b2:	4909      	ldr	r1, [pc, #36]	@ (80038d8 <siprintf+0x3c>)
 80038b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80038b8:	9105      	str	r1, [sp, #20]
 80038ba:	6800      	ldr	r0, [r0, #0]
 80038bc:	a902      	add	r1, sp, #8
 80038be:	9301      	str	r3, [sp, #4]
 80038c0:	f000 f9a0 	bl	8003c04 <_svfiprintf_r>
 80038c4:	2200      	movs	r2, #0
 80038c6:	9b02      	ldr	r3, [sp, #8]
 80038c8:	701a      	strb	r2, [r3, #0]
 80038ca:	b01c      	add	sp, #112	@ 0x70
 80038cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80038d0:	b003      	add	sp, #12
 80038d2:	4770      	bx	lr
 80038d4:	2000001c 	.word	0x2000001c
 80038d8:	ffff0208 	.word	0xffff0208

080038dc <memset>:
 80038dc:	4603      	mov	r3, r0
 80038de:	4402      	add	r2, r0
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d100      	bne.n	80038e6 <memset+0xa>
 80038e4:	4770      	bx	lr
 80038e6:	f803 1b01 	strb.w	r1, [r3], #1
 80038ea:	e7f9      	b.n	80038e0 <memset+0x4>

080038ec <__errno>:
 80038ec:	4b01      	ldr	r3, [pc, #4]	@ (80038f4 <__errno+0x8>)
 80038ee:	6818      	ldr	r0, [r3, #0]
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	2000001c 	.word	0x2000001c

080038f8 <__libc_init_array>:
 80038f8:	b570      	push	{r4, r5, r6, lr}
 80038fa:	2600      	movs	r6, #0
 80038fc:	4d0c      	ldr	r5, [pc, #48]	@ (8003930 <__libc_init_array+0x38>)
 80038fe:	4c0d      	ldr	r4, [pc, #52]	@ (8003934 <__libc_init_array+0x3c>)
 8003900:	1b64      	subs	r4, r4, r5
 8003902:	10a4      	asrs	r4, r4, #2
 8003904:	42a6      	cmp	r6, r4
 8003906:	d109      	bne.n	800391c <__libc_init_array+0x24>
 8003908:	f000 fc78 	bl	80041fc <_init>
 800390c:	2600      	movs	r6, #0
 800390e:	4d0a      	ldr	r5, [pc, #40]	@ (8003938 <__libc_init_array+0x40>)
 8003910:	4c0a      	ldr	r4, [pc, #40]	@ (800393c <__libc_init_array+0x44>)
 8003912:	1b64      	subs	r4, r4, r5
 8003914:	10a4      	asrs	r4, r4, #2
 8003916:	42a6      	cmp	r6, r4
 8003918:	d105      	bne.n	8003926 <__libc_init_array+0x2e>
 800391a:	bd70      	pop	{r4, r5, r6, pc}
 800391c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003920:	4798      	blx	r3
 8003922:	3601      	adds	r6, #1
 8003924:	e7ee      	b.n	8003904 <__libc_init_array+0xc>
 8003926:	f855 3b04 	ldr.w	r3, [r5], #4
 800392a:	4798      	blx	r3
 800392c:	3601      	adds	r6, #1
 800392e:	e7f2      	b.n	8003916 <__libc_init_array+0x1e>
 8003930:	080042e0 	.word	0x080042e0
 8003934:	080042e0 	.word	0x080042e0
 8003938:	080042e0 	.word	0x080042e0
 800393c:	080042e4 	.word	0x080042e4

08003940 <__retarget_lock_acquire_recursive>:
 8003940:	4770      	bx	lr

08003942 <__retarget_lock_release_recursive>:
 8003942:	4770      	bx	lr

08003944 <memcpy>:
 8003944:	440a      	add	r2, r1
 8003946:	4291      	cmp	r1, r2
 8003948:	f100 33ff 	add.w	r3, r0, #4294967295
 800394c:	d100      	bne.n	8003950 <memcpy+0xc>
 800394e:	4770      	bx	lr
 8003950:	b510      	push	{r4, lr}
 8003952:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003956:	4291      	cmp	r1, r2
 8003958:	f803 4f01 	strb.w	r4, [r3, #1]!
 800395c:	d1f9      	bne.n	8003952 <memcpy+0xe>
 800395e:	bd10      	pop	{r4, pc}

08003960 <_free_r>:
 8003960:	b538      	push	{r3, r4, r5, lr}
 8003962:	4605      	mov	r5, r0
 8003964:	2900      	cmp	r1, #0
 8003966:	d040      	beq.n	80039ea <_free_r+0x8a>
 8003968:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800396c:	1f0c      	subs	r4, r1, #4
 800396e:	2b00      	cmp	r3, #0
 8003970:	bfb8      	it	lt
 8003972:	18e4      	addlt	r4, r4, r3
 8003974:	f000 f8de 	bl	8003b34 <__malloc_lock>
 8003978:	4a1c      	ldr	r2, [pc, #112]	@ (80039ec <_free_r+0x8c>)
 800397a:	6813      	ldr	r3, [r2, #0]
 800397c:	b933      	cbnz	r3, 800398c <_free_r+0x2c>
 800397e:	6063      	str	r3, [r4, #4]
 8003980:	6014      	str	r4, [r2, #0]
 8003982:	4628      	mov	r0, r5
 8003984:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003988:	f000 b8da 	b.w	8003b40 <__malloc_unlock>
 800398c:	42a3      	cmp	r3, r4
 800398e:	d908      	bls.n	80039a2 <_free_r+0x42>
 8003990:	6820      	ldr	r0, [r4, #0]
 8003992:	1821      	adds	r1, r4, r0
 8003994:	428b      	cmp	r3, r1
 8003996:	bf01      	itttt	eq
 8003998:	6819      	ldreq	r1, [r3, #0]
 800399a:	685b      	ldreq	r3, [r3, #4]
 800399c:	1809      	addeq	r1, r1, r0
 800399e:	6021      	streq	r1, [r4, #0]
 80039a0:	e7ed      	b.n	800397e <_free_r+0x1e>
 80039a2:	461a      	mov	r2, r3
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	b10b      	cbz	r3, 80039ac <_free_r+0x4c>
 80039a8:	42a3      	cmp	r3, r4
 80039aa:	d9fa      	bls.n	80039a2 <_free_r+0x42>
 80039ac:	6811      	ldr	r1, [r2, #0]
 80039ae:	1850      	adds	r0, r2, r1
 80039b0:	42a0      	cmp	r0, r4
 80039b2:	d10b      	bne.n	80039cc <_free_r+0x6c>
 80039b4:	6820      	ldr	r0, [r4, #0]
 80039b6:	4401      	add	r1, r0
 80039b8:	1850      	adds	r0, r2, r1
 80039ba:	4283      	cmp	r3, r0
 80039bc:	6011      	str	r1, [r2, #0]
 80039be:	d1e0      	bne.n	8003982 <_free_r+0x22>
 80039c0:	6818      	ldr	r0, [r3, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	4408      	add	r0, r1
 80039c6:	6010      	str	r0, [r2, #0]
 80039c8:	6053      	str	r3, [r2, #4]
 80039ca:	e7da      	b.n	8003982 <_free_r+0x22>
 80039cc:	d902      	bls.n	80039d4 <_free_r+0x74>
 80039ce:	230c      	movs	r3, #12
 80039d0:	602b      	str	r3, [r5, #0]
 80039d2:	e7d6      	b.n	8003982 <_free_r+0x22>
 80039d4:	6820      	ldr	r0, [r4, #0]
 80039d6:	1821      	adds	r1, r4, r0
 80039d8:	428b      	cmp	r3, r1
 80039da:	bf01      	itttt	eq
 80039dc:	6819      	ldreq	r1, [r3, #0]
 80039de:	685b      	ldreq	r3, [r3, #4]
 80039e0:	1809      	addeq	r1, r1, r0
 80039e2:	6021      	streq	r1, [r4, #0]
 80039e4:	6063      	str	r3, [r4, #4]
 80039e6:	6054      	str	r4, [r2, #4]
 80039e8:	e7cb      	b.n	8003982 <_free_r+0x22>
 80039ea:	bd38      	pop	{r3, r4, r5, pc}
 80039ec:	20000290 	.word	0x20000290

080039f0 <sbrk_aligned>:
 80039f0:	b570      	push	{r4, r5, r6, lr}
 80039f2:	4e0f      	ldr	r6, [pc, #60]	@ (8003a30 <sbrk_aligned+0x40>)
 80039f4:	460c      	mov	r4, r1
 80039f6:	6831      	ldr	r1, [r6, #0]
 80039f8:	4605      	mov	r5, r0
 80039fa:	b911      	cbnz	r1, 8003a02 <sbrk_aligned+0x12>
 80039fc:	f000 fbaa 	bl	8004154 <_sbrk_r>
 8003a00:	6030      	str	r0, [r6, #0]
 8003a02:	4621      	mov	r1, r4
 8003a04:	4628      	mov	r0, r5
 8003a06:	f000 fba5 	bl	8004154 <_sbrk_r>
 8003a0a:	1c43      	adds	r3, r0, #1
 8003a0c:	d103      	bne.n	8003a16 <sbrk_aligned+0x26>
 8003a0e:	f04f 34ff 	mov.w	r4, #4294967295
 8003a12:	4620      	mov	r0, r4
 8003a14:	bd70      	pop	{r4, r5, r6, pc}
 8003a16:	1cc4      	adds	r4, r0, #3
 8003a18:	f024 0403 	bic.w	r4, r4, #3
 8003a1c:	42a0      	cmp	r0, r4
 8003a1e:	d0f8      	beq.n	8003a12 <sbrk_aligned+0x22>
 8003a20:	1a21      	subs	r1, r4, r0
 8003a22:	4628      	mov	r0, r5
 8003a24:	f000 fb96 	bl	8004154 <_sbrk_r>
 8003a28:	3001      	adds	r0, #1
 8003a2a:	d1f2      	bne.n	8003a12 <sbrk_aligned+0x22>
 8003a2c:	e7ef      	b.n	8003a0e <sbrk_aligned+0x1e>
 8003a2e:	bf00      	nop
 8003a30:	2000028c 	.word	0x2000028c

08003a34 <_malloc_r>:
 8003a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a38:	1ccd      	adds	r5, r1, #3
 8003a3a:	f025 0503 	bic.w	r5, r5, #3
 8003a3e:	3508      	adds	r5, #8
 8003a40:	2d0c      	cmp	r5, #12
 8003a42:	bf38      	it	cc
 8003a44:	250c      	movcc	r5, #12
 8003a46:	2d00      	cmp	r5, #0
 8003a48:	4606      	mov	r6, r0
 8003a4a:	db01      	blt.n	8003a50 <_malloc_r+0x1c>
 8003a4c:	42a9      	cmp	r1, r5
 8003a4e:	d904      	bls.n	8003a5a <_malloc_r+0x26>
 8003a50:	230c      	movs	r3, #12
 8003a52:	6033      	str	r3, [r6, #0]
 8003a54:	2000      	movs	r0, #0
 8003a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003b30 <_malloc_r+0xfc>
 8003a5e:	f000 f869 	bl	8003b34 <__malloc_lock>
 8003a62:	f8d8 3000 	ldr.w	r3, [r8]
 8003a66:	461c      	mov	r4, r3
 8003a68:	bb44      	cbnz	r4, 8003abc <_malloc_r+0x88>
 8003a6a:	4629      	mov	r1, r5
 8003a6c:	4630      	mov	r0, r6
 8003a6e:	f7ff ffbf 	bl	80039f0 <sbrk_aligned>
 8003a72:	1c43      	adds	r3, r0, #1
 8003a74:	4604      	mov	r4, r0
 8003a76:	d158      	bne.n	8003b2a <_malloc_r+0xf6>
 8003a78:	f8d8 4000 	ldr.w	r4, [r8]
 8003a7c:	4627      	mov	r7, r4
 8003a7e:	2f00      	cmp	r7, #0
 8003a80:	d143      	bne.n	8003b0a <_malloc_r+0xd6>
 8003a82:	2c00      	cmp	r4, #0
 8003a84:	d04b      	beq.n	8003b1e <_malloc_r+0xea>
 8003a86:	6823      	ldr	r3, [r4, #0]
 8003a88:	4639      	mov	r1, r7
 8003a8a:	4630      	mov	r0, r6
 8003a8c:	eb04 0903 	add.w	r9, r4, r3
 8003a90:	f000 fb60 	bl	8004154 <_sbrk_r>
 8003a94:	4581      	cmp	r9, r0
 8003a96:	d142      	bne.n	8003b1e <_malloc_r+0xea>
 8003a98:	6821      	ldr	r1, [r4, #0]
 8003a9a:	4630      	mov	r0, r6
 8003a9c:	1a6d      	subs	r5, r5, r1
 8003a9e:	4629      	mov	r1, r5
 8003aa0:	f7ff ffa6 	bl	80039f0 <sbrk_aligned>
 8003aa4:	3001      	adds	r0, #1
 8003aa6:	d03a      	beq.n	8003b1e <_malloc_r+0xea>
 8003aa8:	6823      	ldr	r3, [r4, #0]
 8003aaa:	442b      	add	r3, r5
 8003aac:	6023      	str	r3, [r4, #0]
 8003aae:	f8d8 3000 	ldr.w	r3, [r8]
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	bb62      	cbnz	r2, 8003b10 <_malloc_r+0xdc>
 8003ab6:	f8c8 7000 	str.w	r7, [r8]
 8003aba:	e00f      	b.n	8003adc <_malloc_r+0xa8>
 8003abc:	6822      	ldr	r2, [r4, #0]
 8003abe:	1b52      	subs	r2, r2, r5
 8003ac0:	d420      	bmi.n	8003b04 <_malloc_r+0xd0>
 8003ac2:	2a0b      	cmp	r2, #11
 8003ac4:	d917      	bls.n	8003af6 <_malloc_r+0xc2>
 8003ac6:	1961      	adds	r1, r4, r5
 8003ac8:	42a3      	cmp	r3, r4
 8003aca:	6025      	str	r5, [r4, #0]
 8003acc:	bf18      	it	ne
 8003ace:	6059      	strne	r1, [r3, #4]
 8003ad0:	6863      	ldr	r3, [r4, #4]
 8003ad2:	bf08      	it	eq
 8003ad4:	f8c8 1000 	streq.w	r1, [r8]
 8003ad8:	5162      	str	r2, [r4, r5]
 8003ada:	604b      	str	r3, [r1, #4]
 8003adc:	4630      	mov	r0, r6
 8003ade:	f000 f82f 	bl	8003b40 <__malloc_unlock>
 8003ae2:	f104 000b 	add.w	r0, r4, #11
 8003ae6:	1d23      	adds	r3, r4, #4
 8003ae8:	f020 0007 	bic.w	r0, r0, #7
 8003aec:	1ac2      	subs	r2, r0, r3
 8003aee:	bf1c      	itt	ne
 8003af0:	1a1b      	subne	r3, r3, r0
 8003af2:	50a3      	strne	r3, [r4, r2]
 8003af4:	e7af      	b.n	8003a56 <_malloc_r+0x22>
 8003af6:	6862      	ldr	r2, [r4, #4]
 8003af8:	42a3      	cmp	r3, r4
 8003afa:	bf0c      	ite	eq
 8003afc:	f8c8 2000 	streq.w	r2, [r8]
 8003b00:	605a      	strne	r2, [r3, #4]
 8003b02:	e7eb      	b.n	8003adc <_malloc_r+0xa8>
 8003b04:	4623      	mov	r3, r4
 8003b06:	6864      	ldr	r4, [r4, #4]
 8003b08:	e7ae      	b.n	8003a68 <_malloc_r+0x34>
 8003b0a:	463c      	mov	r4, r7
 8003b0c:	687f      	ldr	r7, [r7, #4]
 8003b0e:	e7b6      	b.n	8003a7e <_malloc_r+0x4a>
 8003b10:	461a      	mov	r2, r3
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	42a3      	cmp	r3, r4
 8003b16:	d1fb      	bne.n	8003b10 <_malloc_r+0xdc>
 8003b18:	2300      	movs	r3, #0
 8003b1a:	6053      	str	r3, [r2, #4]
 8003b1c:	e7de      	b.n	8003adc <_malloc_r+0xa8>
 8003b1e:	230c      	movs	r3, #12
 8003b20:	4630      	mov	r0, r6
 8003b22:	6033      	str	r3, [r6, #0]
 8003b24:	f000 f80c 	bl	8003b40 <__malloc_unlock>
 8003b28:	e794      	b.n	8003a54 <_malloc_r+0x20>
 8003b2a:	6005      	str	r5, [r0, #0]
 8003b2c:	e7d6      	b.n	8003adc <_malloc_r+0xa8>
 8003b2e:	bf00      	nop
 8003b30:	20000290 	.word	0x20000290

08003b34 <__malloc_lock>:
 8003b34:	4801      	ldr	r0, [pc, #4]	@ (8003b3c <__malloc_lock+0x8>)
 8003b36:	f7ff bf03 	b.w	8003940 <__retarget_lock_acquire_recursive>
 8003b3a:	bf00      	nop
 8003b3c:	20000288 	.word	0x20000288

08003b40 <__malloc_unlock>:
 8003b40:	4801      	ldr	r0, [pc, #4]	@ (8003b48 <__malloc_unlock+0x8>)
 8003b42:	f7ff befe 	b.w	8003942 <__retarget_lock_release_recursive>
 8003b46:	bf00      	nop
 8003b48:	20000288 	.word	0x20000288

08003b4c <__ssputs_r>:
 8003b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b50:	461f      	mov	r7, r3
 8003b52:	688e      	ldr	r6, [r1, #8]
 8003b54:	4682      	mov	sl, r0
 8003b56:	42be      	cmp	r6, r7
 8003b58:	460c      	mov	r4, r1
 8003b5a:	4690      	mov	r8, r2
 8003b5c:	680b      	ldr	r3, [r1, #0]
 8003b5e:	d82d      	bhi.n	8003bbc <__ssputs_r+0x70>
 8003b60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003b64:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003b68:	d026      	beq.n	8003bb8 <__ssputs_r+0x6c>
 8003b6a:	6965      	ldr	r5, [r4, #20]
 8003b6c:	6909      	ldr	r1, [r1, #16]
 8003b6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b72:	eba3 0901 	sub.w	r9, r3, r1
 8003b76:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003b7a:	1c7b      	adds	r3, r7, #1
 8003b7c:	444b      	add	r3, r9
 8003b7e:	106d      	asrs	r5, r5, #1
 8003b80:	429d      	cmp	r5, r3
 8003b82:	bf38      	it	cc
 8003b84:	461d      	movcc	r5, r3
 8003b86:	0553      	lsls	r3, r2, #21
 8003b88:	d527      	bpl.n	8003bda <__ssputs_r+0x8e>
 8003b8a:	4629      	mov	r1, r5
 8003b8c:	f7ff ff52 	bl	8003a34 <_malloc_r>
 8003b90:	4606      	mov	r6, r0
 8003b92:	b360      	cbz	r0, 8003bee <__ssputs_r+0xa2>
 8003b94:	464a      	mov	r2, r9
 8003b96:	6921      	ldr	r1, [r4, #16]
 8003b98:	f7ff fed4 	bl	8003944 <memcpy>
 8003b9c:	89a3      	ldrh	r3, [r4, #12]
 8003b9e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003ba2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ba6:	81a3      	strh	r3, [r4, #12]
 8003ba8:	6126      	str	r6, [r4, #16]
 8003baa:	444e      	add	r6, r9
 8003bac:	6026      	str	r6, [r4, #0]
 8003bae:	463e      	mov	r6, r7
 8003bb0:	6165      	str	r5, [r4, #20]
 8003bb2:	eba5 0509 	sub.w	r5, r5, r9
 8003bb6:	60a5      	str	r5, [r4, #8]
 8003bb8:	42be      	cmp	r6, r7
 8003bba:	d900      	bls.n	8003bbe <__ssputs_r+0x72>
 8003bbc:	463e      	mov	r6, r7
 8003bbe:	4632      	mov	r2, r6
 8003bc0:	4641      	mov	r1, r8
 8003bc2:	6820      	ldr	r0, [r4, #0]
 8003bc4:	f000 faac 	bl	8004120 <memmove>
 8003bc8:	2000      	movs	r0, #0
 8003bca:	68a3      	ldr	r3, [r4, #8]
 8003bcc:	1b9b      	subs	r3, r3, r6
 8003bce:	60a3      	str	r3, [r4, #8]
 8003bd0:	6823      	ldr	r3, [r4, #0]
 8003bd2:	4433      	add	r3, r6
 8003bd4:	6023      	str	r3, [r4, #0]
 8003bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bda:	462a      	mov	r2, r5
 8003bdc:	f000 fad8 	bl	8004190 <_realloc_r>
 8003be0:	4606      	mov	r6, r0
 8003be2:	2800      	cmp	r0, #0
 8003be4:	d1e0      	bne.n	8003ba8 <__ssputs_r+0x5c>
 8003be6:	4650      	mov	r0, sl
 8003be8:	6921      	ldr	r1, [r4, #16]
 8003bea:	f7ff feb9 	bl	8003960 <_free_r>
 8003bee:	230c      	movs	r3, #12
 8003bf0:	f8ca 3000 	str.w	r3, [sl]
 8003bf4:	89a3      	ldrh	r3, [r4, #12]
 8003bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8003bfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003bfe:	81a3      	strh	r3, [r4, #12]
 8003c00:	e7e9      	b.n	8003bd6 <__ssputs_r+0x8a>
	...

08003c04 <_svfiprintf_r>:
 8003c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c08:	4698      	mov	r8, r3
 8003c0a:	898b      	ldrh	r3, [r1, #12]
 8003c0c:	4607      	mov	r7, r0
 8003c0e:	061b      	lsls	r3, r3, #24
 8003c10:	460d      	mov	r5, r1
 8003c12:	4614      	mov	r4, r2
 8003c14:	b09d      	sub	sp, #116	@ 0x74
 8003c16:	d510      	bpl.n	8003c3a <_svfiprintf_r+0x36>
 8003c18:	690b      	ldr	r3, [r1, #16]
 8003c1a:	b973      	cbnz	r3, 8003c3a <_svfiprintf_r+0x36>
 8003c1c:	2140      	movs	r1, #64	@ 0x40
 8003c1e:	f7ff ff09 	bl	8003a34 <_malloc_r>
 8003c22:	6028      	str	r0, [r5, #0]
 8003c24:	6128      	str	r0, [r5, #16]
 8003c26:	b930      	cbnz	r0, 8003c36 <_svfiprintf_r+0x32>
 8003c28:	230c      	movs	r3, #12
 8003c2a:	603b      	str	r3, [r7, #0]
 8003c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c30:	b01d      	add	sp, #116	@ 0x74
 8003c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c36:	2340      	movs	r3, #64	@ 0x40
 8003c38:	616b      	str	r3, [r5, #20]
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c3e:	2320      	movs	r3, #32
 8003c40:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003c44:	2330      	movs	r3, #48	@ 0x30
 8003c46:	f04f 0901 	mov.w	r9, #1
 8003c4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c4e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003de8 <_svfiprintf_r+0x1e4>
 8003c52:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003c56:	4623      	mov	r3, r4
 8003c58:	469a      	mov	sl, r3
 8003c5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c5e:	b10a      	cbz	r2, 8003c64 <_svfiprintf_r+0x60>
 8003c60:	2a25      	cmp	r2, #37	@ 0x25
 8003c62:	d1f9      	bne.n	8003c58 <_svfiprintf_r+0x54>
 8003c64:	ebba 0b04 	subs.w	fp, sl, r4
 8003c68:	d00b      	beq.n	8003c82 <_svfiprintf_r+0x7e>
 8003c6a:	465b      	mov	r3, fp
 8003c6c:	4622      	mov	r2, r4
 8003c6e:	4629      	mov	r1, r5
 8003c70:	4638      	mov	r0, r7
 8003c72:	f7ff ff6b 	bl	8003b4c <__ssputs_r>
 8003c76:	3001      	adds	r0, #1
 8003c78:	f000 80a7 	beq.w	8003dca <_svfiprintf_r+0x1c6>
 8003c7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003c7e:	445a      	add	r2, fp
 8003c80:	9209      	str	r2, [sp, #36]	@ 0x24
 8003c82:	f89a 3000 	ldrb.w	r3, [sl]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f000 809f 	beq.w	8003dca <_svfiprintf_r+0x1c6>
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8003c92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c96:	f10a 0a01 	add.w	sl, sl, #1
 8003c9a:	9304      	str	r3, [sp, #16]
 8003c9c:	9307      	str	r3, [sp, #28]
 8003c9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003ca2:	931a      	str	r3, [sp, #104]	@ 0x68
 8003ca4:	4654      	mov	r4, sl
 8003ca6:	2205      	movs	r2, #5
 8003ca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cac:	484e      	ldr	r0, [pc, #312]	@ (8003de8 <_svfiprintf_r+0x1e4>)
 8003cae:	f000 fa61 	bl	8004174 <memchr>
 8003cb2:	9a04      	ldr	r2, [sp, #16]
 8003cb4:	b9d8      	cbnz	r0, 8003cee <_svfiprintf_r+0xea>
 8003cb6:	06d0      	lsls	r0, r2, #27
 8003cb8:	bf44      	itt	mi
 8003cba:	2320      	movmi	r3, #32
 8003cbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003cc0:	0711      	lsls	r1, r2, #28
 8003cc2:	bf44      	itt	mi
 8003cc4:	232b      	movmi	r3, #43	@ 0x2b
 8003cc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003cca:	f89a 3000 	ldrb.w	r3, [sl]
 8003cce:	2b2a      	cmp	r3, #42	@ 0x2a
 8003cd0:	d015      	beq.n	8003cfe <_svfiprintf_r+0xfa>
 8003cd2:	4654      	mov	r4, sl
 8003cd4:	2000      	movs	r0, #0
 8003cd6:	f04f 0c0a 	mov.w	ip, #10
 8003cda:	9a07      	ldr	r2, [sp, #28]
 8003cdc:	4621      	mov	r1, r4
 8003cde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ce2:	3b30      	subs	r3, #48	@ 0x30
 8003ce4:	2b09      	cmp	r3, #9
 8003ce6:	d94b      	bls.n	8003d80 <_svfiprintf_r+0x17c>
 8003ce8:	b1b0      	cbz	r0, 8003d18 <_svfiprintf_r+0x114>
 8003cea:	9207      	str	r2, [sp, #28]
 8003cec:	e014      	b.n	8003d18 <_svfiprintf_r+0x114>
 8003cee:	eba0 0308 	sub.w	r3, r0, r8
 8003cf2:	fa09 f303 	lsl.w	r3, r9, r3
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	46a2      	mov	sl, r4
 8003cfa:	9304      	str	r3, [sp, #16]
 8003cfc:	e7d2      	b.n	8003ca4 <_svfiprintf_r+0xa0>
 8003cfe:	9b03      	ldr	r3, [sp, #12]
 8003d00:	1d19      	adds	r1, r3, #4
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	9103      	str	r1, [sp, #12]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	bfbb      	ittet	lt
 8003d0a:	425b      	neglt	r3, r3
 8003d0c:	f042 0202 	orrlt.w	r2, r2, #2
 8003d10:	9307      	strge	r3, [sp, #28]
 8003d12:	9307      	strlt	r3, [sp, #28]
 8003d14:	bfb8      	it	lt
 8003d16:	9204      	strlt	r2, [sp, #16]
 8003d18:	7823      	ldrb	r3, [r4, #0]
 8003d1a:	2b2e      	cmp	r3, #46	@ 0x2e
 8003d1c:	d10a      	bne.n	8003d34 <_svfiprintf_r+0x130>
 8003d1e:	7863      	ldrb	r3, [r4, #1]
 8003d20:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d22:	d132      	bne.n	8003d8a <_svfiprintf_r+0x186>
 8003d24:	9b03      	ldr	r3, [sp, #12]
 8003d26:	3402      	adds	r4, #2
 8003d28:	1d1a      	adds	r2, r3, #4
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	9203      	str	r2, [sp, #12]
 8003d2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003d32:	9305      	str	r3, [sp, #20]
 8003d34:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003dec <_svfiprintf_r+0x1e8>
 8003d38:	2203      	movs	r2, #3
 8003d3a:	4650      	mov	r0, sl
 8003d3c:	7821      	ldrb	r1, [r4, #0]
 8003d3e:	f000 fa19 	bl	8004174 <memchr>
 8003d42:	b138      	cbz	r0, 8003d54 <_svfiprintf_r+0x150>
 8003d44:	2240      	movs	r2, #64	@ 0x40
 8003d46:	9b04      	ldr	r3, [sp, #16]
 8003d48:	eba0 000a 	sub.w	r0, r0, sl
 8003d4c:	4082      	lsls	r2, r0
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	3401      	adds	r4, #1
 8003d52:	9304      	str	r3, [sp, #16]
 8003d54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d58:	2206      	movs	r2, #6
 8003d5a:	4825      	ldr	r0, [pc, #148]	@ (8003df0 <_svfiprintf_r+0x1ec>)
 8003d5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003d60:	f000 fa08 	bl	8004174 <memchr>
 8003d64:	2800      	cmp	r0, #0
 8003d66:	d036      	beq.n	8003dd6 <_svfiprintf_r+0x1d2>
 8003d68:	4b22      	ldr	r3, [pc, #136]	@ (8003df4 <_svfiprintf_r+0x1f0>)
 8003d6a:	bb1b      	cbnz	r3, 8003db4 <_svfiprintf_r+0x1b0>
 8003d6c:	9b03      	ldr	r3, [sp, #12]
 8003d6e:	3307      	adds	r3, #7
 8003d70:	f023 0307 	bic.w	r3, r3, #7
 8003d74:	3308      	adds	r3, #8
 8003d76:	9303      	str	r3, [sp, #12]
 8003d78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d7a:	4433      	add	r3, r6
 8003d7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d7e:	e76a      	b.n	8003c56 <_svfiprintf_r+0x52>
 8003d80:	460c      	mov	r4, r1
 8003d82:	2001      	movs	r0, #1
 8003d84:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d88:	e7a8      	b.n	8003cdc <_svfiprintf_r+0xd8>
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	f04f 0c0a 	mov.w	ip, #10
 8003d90:	4619      	mov	r1, r3
 8003d92:	3401      	adds	r4, #1
 8003d94:	9305      	str	r3, [sp, #20]
 8003d96:	4620      	mov	r0, r4
 8003d98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d9c:	3a30      	subs	r2, #48	@ 0x30
 8003d9e:	2a09      	cmp	r2, #9
 8003da0:	d903      	bls.n	8003daa <_svfiprintf_r+0x1a6>
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d0c6      	beq.n	8003d34 <_svfiprintf_r+0x130>
 8003da6:	9105      	str	r1, [sp, #20]
 8003da8:	e7c4      	b.n	8003d34 <_svfiprintf_r+0x130>
 8003daa:	4604      	mov	r4, r0
 8003dac:	2301      	movs	r3, #1
 8003dae:	fb0c 2101 	mla	r1, ip, r1, r2
 8003db2:	e7f0      	b.n	8003d96 <_svfiprintf_r+0x192>
 8003db4:	ab03      	add	r3, sp, #12
 8003db6:	9300      	str	r3, [sp, #0]
 8003db8:	462a      	mov	r2, r5
 8003dba:	4638      	mov	r0, r7
 8003dbc:	4b0e      	ldr	r3, [pc, #56]	@ (8003df8 <_svfiprintf_r+0x1f4>)
 8003dbe:	a904      	add	r1, sp, #16
 8003dc0:	f3af 8000 	nop.w
 8003dc4:	1c42      	adds	r2, r0, #1
 8003dc6:	4606      	mov	r6, r0
 8003dc8:	d1d6      	bne.n	8003d78 <_svfiprintf_r+0x174>
 8003dca:	89ab      	ldrh	r3, [r5, #12]
 8003dcc:	065b      	lsls	r3, r3, #25
 8003dce:	f53f af2d 	bmi.w	8003c2c <_svfiprintf_r+0x28>
 8003dd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003dd4:	e72c      	b.n	8003c30 <_svfiprintf_r+0x2c>
 8003dd6:	ab03      	add	r3, sp, #12
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	462a      	mov	r2, r5
 8003ddc:	4638      	mov	r0, r7
 8003dde:	4b06      	ldr	r3, [pc, #24]	@ (8003df8 <_svfiprintf_r+0x1f4>)
 8003de0:	a904      	add	r1, sp, #16
 8003de2:	f000 f87d 	bl	8003ee0 <_printf_i>
 8003de6:	e7ed      	b.n	8003dc4 <_svfiprintf_r+0x1c0>
 8003de8:	080042aa 	.word	0x080042aa
 8003dec:	080042b0 	.word	0x080042b0
 8003df0:	080042b4 	.word	0x080042b4
 8003df4:	00000000 	.word	0x00000000
 8003df8:	08003b4d 	.word	0x08003b4d

08003dfc <_printf_common>:
 8003dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e00:	4616      	mov	r6, r2
 8003e02:	4698      	mov	r8, r3
 8003e04:	688a      	ldr	r2, [r1, #8]
 8003e06:	690b      	ldr	r3, [r1, #16]
 8003e08:	4607      	mov	r7, r0
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	bfb8      	it	lt
 8003e0e:	4613      	movlt	r3, r2
 8003e10:	6033      	str	r3, [r6, #0]
 8003e12:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003e16:	460c      	mov	r4, r1
 8003e18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003e1c:	b10a      	cbz	r2, 8003e22 <_printf_common+0x26>
 8003e1e:	3301      	adds	r3, #1
 8003e20:	6033      	str	r3, [r6, #0]
 8003e22:	6823      	ldr	r3, [r4, #0]
 8003e24:	0699      	lsls	r1, r3, #26
 8003e26:	bf42      	ittt	mi
 8003e28:	6833      	ldrmi	r3, [r6, #0]
 8003e2a:	3302      	addmi	r3, #2
 8003e2c:	6033      	strmi	r3, [r6, #0]
 8003e2e:	6825      	ldr	r5, [r4, #0]
 8003e30:	f015 0506 	ands.w	r5, r5, #6
 8003e34:	d106      	bne.n	8003e44 <_printf_common+0x48>
 8003e36:	f104 0a19 	add.w	sl, r4, #25
 8003e3a:	68e3      	ldr	r3, [r4, #12]
 8003e3c:	6832      	ldr	r2, [r6, #0]
 8003e3e:	1a9b      	subs	r3, r3, r2
 8003e40:	42ab      	cmp	r3, r5
 8003e42:	dc2b      	bgt.n	8003e9c <_printf_common+0xa0>
 8003e44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003e48:	6822      	ldr	r2, [r4, #0]
 8003e4a:	3b00      	subs	r3, #0
 8003e4c:	bf18      	it	ne
 8003e4e:	2301      	movne	r3, #1
 8003e50:	0692      	lsls	r2, r2, #26
 8003e52:	d430      	bmi.n	8003eb6 <_printf_common+0xba>
 8003e54:	4641      	mov	r1, r8
 8003e56:	4638      	mov	r0, r7
 8003e58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003e5c:	47c8      	blx	r9
 8003e5e:	3001      	adds	r0, #1
 8003e60:	d023      	beq.n	8003eaa <_printf_common+0xae>
 8003e62:	6823      	ldr	r3, [r4, #0]
 8003e64:	6922      	ldr	r2, [r4, #16]
 8003e66:	f003 0306 	and.w	r3, r3, #6
 8003e6a:	2b04      	cmp	r3, #4
 8003e6c:	bf14      	ite	ne
 8003e6e:	2500      	movne	r5, #0
 8003e70:	6833      	ldreq	r3, [r6, #0]
 8003e72:	f04f 0600 	mov.w	r6, #0
 8003e76:	bf08      	it	eq
 8003e78:	68e5      	ldreq	r5, [r4, #12]
 8003e7a:	f104 041a 	add.w	r4, r4, #26
 8003e7e:	bf08      	it	eq
 8003e80:	1aed      	subeq	r5, r5, r3
 8003e82:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003e86:	bf08      	it	eq
 8003e88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	bfc4      	itt	gt
 8003e90:	1a9b      	subgt	r3, r3, r2
 8003e92:	18ed      	addgt	r5, r5, r3
 8003e94:	42b5      	cmp	r5, r6
 8003e96:	d11a      	bne.n	8003ece <_printf_common+0xd2>
 8003e98:	2000      	movs	r0, #0
 8003e9a:	e008      	b.n	8003eae <_printf_common+0xb2>
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	4652      	mov	r2, sl
 8003ea0:	4641      	mov	r1, r8
 8003ea2:	4638      	mov	r0, r7
 8003ea4:	47c8      	blx	r9
 8003ea6:	3001      	adds	r0, #1
 8003ea8:	d103      	bne.n	8003eb2 <_printf_common+0xb6>
 8003eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8003eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eb2:	3501      	adds	r5, #1
 8003eb4:	e7c1      	b.n	8003e3a <_printf_common+0x3e>
 8003eb6:	2030      	movs	r0, #48	@ 0x30
 8003eb8:	18e1      	adds	r1, r4, r3
 8003eba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003ebe:	1c5a      	adds	r2, r3, #1
 8003ec0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003ec4:	4422      	add	r2, r4
 8003ec6:	3302      	adds	r3, #2
 8003ec8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003ecc:	e7c2      	b.n	8003e54 <_printf_common+0x58>
 8003ece:	2301      	movs	r3, #1
 8003ed0:	4622      	mov	r2, r4
 8003ed2:	4641      	mov	r1, r8
 8003ed4:	4638      	mov	r0, r7
 8003ed6:	47c8      	blx	r9
 8003ed8:	3001      	adds	r0, #1
 8003eda:	d0e6      	beq.n	8003eaa <_printf_common+0xae>
 8003edc:	3601      	adds	r6, #1
 8003ede:	e7d9      	b.n	8003e94 <_printf_common+0x98>

08003ee0 <_printf_i>:
 8003ee0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ee4:	7e0f      	ldrb	r7, [r1, #24]
 8003ee6:	4691      	mov	r9, r2
 8003ee8:	2f78      	cmp	r7, #120	@ 0x78
 8003eea:	4680      	mov	r8, r0
 8003eec:	460c      	mov	r4, r1
 8003eee:	469a      	mov	sl, r3
 8003ef0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003ef2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003ef6:	d807      	bhi.n	8003f08 <_printf_i+0x28>
 8003ef8:	2f62      	cmp	r7, #98	@ 0x62
 8003efa:	d80a      	bhi.n	8003f12 <_printf_i+0x32>
 8003efc:	2f00      	cmp	r7, #0
 8003efe:	f000 80d3 	beq.w	80040a8 <_printf_i+0x1c8>
 8003f02:	2f58      	cmp	r7, #88	@ 0x58
 8003f04:	f000 80ba 	beq.w	800407c <_printf_i+0x19c>
 8003f08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003f10:	e03a      	b.n	8003f88 <_printf_i+0xa8>
 8003f12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003f16:	2b15      	cmp	r3, #21
 8003f18:	d8f6      	bhi.n	8003f08 <_printf_i+0x28>
 8003f1a:	a101      	add	r1, pc, #4	@ (adr r1, 8003f20 <_printf_i+0x40>)
 8003f1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f20:	08003f79 	.word	0x08003f79
 8003f24:	08003f8d 	.word	0x08003f8d
 8003f28:	08003f09 	.word	0x08003f09
 8003f2c:	08003f09 	.word	0x08003f09
 8003f30:	08003f09 	.word	0x08003f09
 8003f34:	08003f09 	.word	0x08003f09
 8003f38:	08003f8d 	.word	0x08003f8d
 8003f3c:	08003f09 	.word	0x08003f09
 8003f40:	08003f09 	.word	0x08003f09
 8003f44:	08003f09 	.word	0x08003f09
 8003f48:	08003f09 	.word	0x08003f09
 8003f4c:	0800408f 	.word	0x0800408f
 8003f50:	08003fb7 	.word	0x08003fb7
 8003f54:	08004049 	.word	0x08004049
 8003f58:	08003f09 	.word	0x08003f09
 8003f5c:	08003f09 	.word	0x08003f09
 8003f60:	080040b1 	.word	0x080040b1
 8003f64:	08003f09 	.word	0x08003f09
 8003f68:	08003fb7 	.word	0x08003fb7
 8003f6c:	08003f09 	.word	0x08003f09
 8003f70:	08003f09 	.word	0x08003f09
 8003f74:	08004051 	.word	0x08004051
 8003f78:	6833      	ldr	r3, [r6, #0]
 8003f7a:	1d1a      	adds	r2, r3, #4
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6032      	str	r2, [r6, #0]
 8003f80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e09e      	b.n	80040ca <_printf_i+0x1ea>
 8003f8c:	6833      	ldr	r3, [r6, #0]
 8003f8e:	6820      	ldr	r0, [r4, #0]
 8003f90:	1d19      	adds	r1, r3, #4
 8003f92:	6031      	str	r1, [r6, #0]
 8003f94:	0606      	lsls	r6, r0, #24
 8003f96:	d501      	bpl.n	8003f9c <_printf_i+0xbc>
 8003f98:	681d      	ldr	r5, [r3, #0]
 8003f9a:	e003      	b.n	8003fa4 <_printf_i+0xc4>
 8003f9c:	0645      	lsls	r5, r0, #25
 8003f9e:	d5fb      	bpl.n	8003f98 <_printf_i+0xb8>
 8003fa0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003fa4:	2d00      	cmp	r5, #0
 8003fa6:	da03      	bge.n	8003fb0 <_printf_i+0xd0>
 8003fa8:	232d      	movs	r3, #45	@ 0x2d
 8003faa:	426d      	negs	r5, r5
 8003fac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fb0:	230a      	movs	r3, #10
 8003fb2:	4859      	ldr	r0, [pc, #356]	@ (8004118 <_printf_i+0x238>)
 8003fb4:	e011      	b.n	8003fda <_printf_i+0xfa>
 8003fb6:	6821      	ldr	r1, [r4, #0]
 8003fb8:	6833      	ldr	r3, [r6, #0]
 8003fba:	0608      	lsls	r0, r1, #24
 8003fbc:	f853 5b04 	ldr.w	r5, [r3], #4
 8003fc0:	d402      	bmi.n	8003fc8 <_printf_i+0xe8>
 8003fc2:	0649      	lsls	r1, r1, #25
 8003fc4:	bf48      	it	mi
 8003fc6:	b2ad      	uxthmi	r5, r5
 8003fc8:	2f6f      	cmp	r7, #111	@ 0x6f
 8003fca:	6033      	str	r3, [r6, #0]
 8003fcc:	bf14      	ite	ne
 8003fce:	230a      	movne	r3, #10
 8003fd0:	2308      	moveq	r3, #8
 8003fd2:	4851      	ldr	r0, [pc, #324]	@ (8004118 <_printf_i+0x238>)
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003fda:	6866      	ldr	r6, [r4, #4]
 8003fdc:	2e00      	cmp	r6, #0
 8003fde:	bfa8      	it	ge
 8003fe0:	6821      	ldrge	r1, [r4, #0]
 8003fe2:	60a6      	str	r6, [r4, #8]
 8003fe4:	bfa4      	itt	ge
 8003fe6:	f021 0104 	bicge.w	r1, r1, #4
 8003fea:	6021      	strge	r1, [r4, #0]
 8003fec:	b90d      	cbnz	r5, 8003ff2 <_printf_i+0x112>
 8003fee:	2e00      	cmp	r6, #0
 8003ff0:	d04b      	beq.n	800408a <_printf_i+0x1aa>
 8003ff2:	4616      	mov	r6, r2
 8003ff4:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ff8:	fb03 5711 	mls	r7, r3, r1, r5
 8003ffc:	5dc7      	ldrb	r7, [r0, r7]
 8003ffe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004002:	462f      	mov	r7, r5
 8004004:	42bb      	cmp	r3, r7
 8004006:	460d      	mov	r5, r1
 8004008:	d9f4      	bls.n	8003ff4 <_printf_i+0x114>
 800400a:	2b08      	cmp	r3, #8
 800400c:	d10b      	bne.n	8004026 <_printf_i+0x146>
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	07df      	lsls	r7, r3, #31
 8004012:	d508      	bpl.n	8004026 <_printf_i+0x146>
 8004014:	6923      	ldr	r3, [r4, #16]
 8004016:	6861      	ldr	r1, [r4, #4]
 8004018:	4299      	cmp	r1, r3
 800401a:	bfde      	ittt	le
 800401c:	2330      	movle	r3, #48	@ 0x30
 800401e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004022:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004026:	1b92      	subs	r2, r2, r6
 8004028:	6122      	str	r2, [r4, #16]
 800402a:	464b      	mov	r3, r9
 800402c:	4621      	mov	r1, r4
 800402e:	4640      	mov	r0, r8
 8004030:	f8cd a000 	str.w	sl, [sp]
 8004034:	aa03      	add	r2, sp, #12
 8004036:	f7ff fee1 	bl	8003dfc <_printf_common>
 800403a:	3001      	adds	r0, #1
 800403c:	d14a      	bne.n	80040d4 <_printf_i+0x1f4>
 800403e:	f04f 30ff 	mov.w	r0, #4294967295
 8004042:	b004      	add	sp, #16
 8004044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004048:	6823      	ldr	r3, [r4, #0]
 800404a:	f043 0320 	orr.w	r3, r3, #32
 800404e:	6023      	str	r3, [r4, #0]
 8004050:	2778      	movs	r7, #120	@ 0x78
 8004052:	4832      	ldr	r0, [pc, #200]	@ (800411c <_printf_i+0x23c>)
 8004054:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004058:	6823      	ldr	r3, [r4, #0]
 800405a:	6831      	ldr	r1, [r6, #0]
 800405c:	061f      	lsls	r7, r3, #24
 800405e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004062:	d402      	bmi.n	800406a <_printf_i+0x18a>
 8004064:	065f      	lsls	r7, r3, #25
 8004066:	bf48      	it	mi
 8004068:	b2ad      	uxthmi	r5, r5
 800406a:	6031      	str	r1, [r6, #0]
 800406c:	07d9      	lsls	r1, r3, #31
 800406e:	bf44      	itt	mi
 8004070:	f043 0320 	orrmi.w	r3, r3, #32
 8004074:	6023      	strmi	r3, [r4, #0]
 8004076:	b11d      	cbz	r5, 8004080 <_printf_i+0x1a0>
 8004078:	2310      	movs	r3, #16
 800407a:	e7ab      	b.n	8003fd4 <_printf_i+0xf4>
 800407c:	4826      	ldr	r0, [pc, #152]	@ (8004118 <_printf_i+0x238>)
 800407e:	e7e9      	b.n	8004054 <_printf_i+0x174>
 8004080:	6823      	ldr	r3, [r4, #0]
 8004082:	f023 0320 	bic.w	r3, r3, #32
 8004086:	6023      	str	r3, [r4, #0]
 8004088:	e7f6      	b.n	8004078 <_printf_i+0x198>
 800408a:	4616      	mov	r6, r2
 800408c:	e7bd      	b.n	800400a <_printf_i+0x12a>
 800408e:	6833      	ldr	r3, [r6, #0]
 8004090:	6825      	ldr	r5, [r4, #0]
 8004092:	1d18      	adds	r0, r3, #4
 8004094:	6961      	ldr	r1, [r4, #20]
 8004096:	6030      	str	r0, [r6, #0]
 8004098:	062e      	lsls	r6, r5, #24
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	d501      	bpl.n	80040a2 <_printf_i+0x1c2>
 800409e:	6019      	str	r1, [r3, #0]
 80040a0:	e002      	b.n	80040a8 <_printf_i+0x1c8>
 80040a2:	0668      	lsls	r0, r5, #25
 80040a4:	d5fb      	bpl.n	800409e <_printf_i+0x1be>
 80040a6:	8019      	strh	r1, [r3, #0]
 80040a8:	2300      	movs	r3, #0
 80040aa:	4616      	mov	r6, r2
 80040ac:	6123      	str	r3, [r4, #16]
 80040ae:	e7bc      	b.n	800402a <_printf_i+0x14a>
 80040b0:	6833      	ldr	r3, [r6, #0]
 80040b2:	2100      	movs	r1, #0
 80040b4:	1d1a      	adds	r2, r3, #4
 80040b6:	6032      	str	r2, [r6, #0]
 80040b8:	681e      	ldr	r6, [r3, #0]
 80040ba:	6862      	ldr	r2, [r4, #4]
 80040bc:	4630      	mov	r0, r6
 80040be:	f000 f859 	bl	8004174 <memchr>
 80040c2:	b108      	cbz	r0, 80040c8 <_printf_i+0x1e8>
 80040c4:	1b80      	subs	r0, r0, r6
 80040c6:	6060      	str	r0, [r4, #4]
 80040c8:	6863      	ldr	r3, [r4, #4]
 80040ca:	6123      	str	r3, [r4, #16]
 80040cc:	2300      	movs	r3, #0
 80040ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040d2:	e7aa      	b.n	800402a <_printf_i+0x14a>
 80040d4:	4632      	mov	r2, r6
 80040d6:	4649      	mov	r1, r9
 80040d8:	4640      	mov	r0, r8
 80040da:	6923      	ldr	r3, [r4, #16]
 80040dc:	47d0      	blx	sl
 80040de:	3001      	adds	r0, #1
 80040e0:	d0ad      	beq.n	800403e <_printf_i+0x15e>
 80040e2:	6823      	ldr	r3, [r4, #0]
 80040e4:	079b      	lsls	r3, r3, #30
 80040e6:	d413      	bmi.n	8004110 <_printf_i+0x230>
 80040e8:	68e0      	ldr	r0, [r4, #12]
 80040ea:	9b03      	ldr	r3, [sp, #12]
 80040ec:	4298      	cmp	r0, r3
 80040ee:	bfb8      	it	lt
 80040f0:	4618      	movlt	r0, r3
 80040f2:	e7a6      	b.n	8004042 <_printf_i+0x162>
 80040f4:	2301      	movs	r3, #1
 80040f6:	4632      	mov	r2, r6
 80040f8:	4649      	mov	r1, r9
 80040fa:	4640      	mov	r0, r8
 80040fc:	47d0      	blx	sl
 80040fe:	3001      	adds	r0, #1
 8004100:	d09d      	beq.n	800403e <_printf_i+0x15e>
 8004102:	3501      	adds	r5, #1
 8004104:	68e3      	ldr	r3, [r4, #12]
 8004106:	9903      	ldr	r1, [sp, #12]
 8004108:	1a5b      	subs	r3, r3, r1
 800410a:	42ab      	cmp	r3, r5
 800410c:	dcf2      	bgt.n	80040f4 <_printf_i+0x214>
 800410e:	e7eb      	b.n	80040e8 <_printf_i+0x208>
 8004110:	2500      	movs	r5, #0
 8004112:	f104 0619 	add.w	r6, r4, #25
 8004116:	e7f5      	b.n	8004104 <_printf_i+0x224>
 8004118:	080042bb 	.word	0x080042bb
 800411c:	080042cc 	.word	0x080042cc

08004120 <memmove>:
 8004120:	4288      	cmp	r0, r1
 8004122:	b510      	push	{r4, lr}
 8004124:	eb01 0402 	add.w	r4, r1, r2
 8004128:	d902      	bls.n	8004130 <memmove+0x10>
 800412a:	4284      	cmp	r4, r0
 800412c:	4623      	mov	r3, r4
 800412e:	d807      	bhi.n	8004140 <memmove+0x20>
 8004130:	1e43      	subs	r3, r0, #1
 8004132:	42a1      	cmp	r1, r4
 8004134:	d008      	beq.n	8004148 <memmove+0x28>
 8004136:	f811 2b01 	ldrb.w	r2, [r1], #1
 800413a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800413e:	e7f8      	b.n	8004132 <memmove+0x12>
 8004140:	4601      	mov	r1, r0
 8004142:	4402      	add	r2, r0
 8004144:	428a      	cmp	r2, r1
 8004146:	d100      	bne.n	800414a <memmove+0x2a>
 8004148:	bd10      	pop	{r4, pc}
 800414a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800414e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004152:	e7f7      	b.n	8004144 <memmove+0x24>

08004154 <_sbrk_r>:
 8004154:	b538      	push	{r3, r4, r5, lr}
 8004156:	2300      	movs	r3, #0
 8004158:	4d05      	ldr	r5, [pc, #20]	@ (8004170 <_sbrk_r+0x1c>)
 800415a:	4604      	mov	r4, r0
 800415c:	4608      	mov	r0, r1
 800415e:	602b      	str	r3, [r5, #0]
 8004160:	f7fc fe26 	bl	8000db0 <_sbrk>
 8004164:	1c43      	adds	r3, r0, #1
 8004166:	d102      	bne.n	800416e <_sbrk_r+0x1a>
 8004168:	682b      	ldr	r3, [r5, #0]
 800416a:	b103      	cbz	r3, 800416e <_sbrk_r+0x1a>
 800416c:	6023      	str	r3, [r4, #0]
 800416e:	bd38      	pop	{r3, r4, r5, pc}
 8004170:	20000284 	.word	0x20000284

08004174 <memchr>:
 8004174:	4603      	mov	r3, r0
 8004176:	b510      	push	{r4, lr}
 8004178:	b2c9      	uxtb	r1, r1
 800417a:	4402      	add	r2, r0
 800417c:	4293      	cmp	r3, r2
 800417e:	4618      	mov	r0, r3
 8004180:	d101      	bne.n	8004186 <memchr+0x12>
 8004182:	2000      	movs	r0, #0
 8004184:	e003      	b.n	800418e <memchr+0x1a>
 8004186:	7804      	ldrb	r4, [r0, #0]
 8004188:	3301      	adds	r3, #1
 800418a:	428c      	cmp	r4, r1
 800418c:	d1f6      	bne.n	800417c <memchr+0x8>
 800418e:	bd10      	pop	{r4, pc}

08004190 <_realloc_r>:
 8004190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004194:	4680      	mov	r8, r0
 8004196:	4615      	mov	r5, r2
 8004198:	460c      	mov	r4, r1
 800419a:	b921      	cbnz	r1, 80041a6 <_realloc_r+0x16>
 800419c:	4611      	mov	r1, r2
 800419e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041a2:	f7ff bc47 	b.w	8003a34 <_malloc_r>
 80041a6:	b92a      	cbnz	r2, 80041b4 <_realloc_r+0x24>
 80041a8:	f7ff fbda 	bl	8003960 <_free_r>
 80041ac:	2400      	movs	r4, #0
 80041ae:	4620      	mov	r0, r4
 80041b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041b4:	f000 f81a 	bl	80041ec <_malloc_usable_size_r>
 80041b8:	4285      	cmp	r5, r0
 80041ba:	4606      	mov	r6, r0
 80041bc:	d802      	bhi.n	80041c4 <_realloc_r+0x34>
 80041be:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80041c2:	d8f4      	bhi.n	80041ae <_realloc_r+0x1e>
 80041c4:	4629      	mov	r1, r5
 80041c6:	4640      	mov	r0, r8
 80041c8:	f7ff fc34 	bl	8003a34 <_malloc_r>
 80041cc:	4607      	mov	r7, r0
 80041ce:	2800      	cmp	r0, #0
 80041d0:	d0ec      	beq.n	80041ac <_realloc_r+0x1c>
 80041d2:	42b5      	cmp	r5, r6
 80041d4:	462a      	mov	r2, r5
 80041d6:	4621      	mov	r1, r4
 80041d8:	bf28      	it	cs
 80041da:	4632      	movcs	r2, r6
 80041dc:	f7ff fbb2 	bl	8003944 <memcpy>
 80041e0:	4621      	mov	r1, r4
 80041e2:	4640      	mov	r0, r8
 80041e4:	f7ff fbbc 	bl	8003960 <_free_r>
 80041e8:	463c      	mov	r4, r7
 80041ea:	e7e0      	b.n	80041ae <_realloc_r+0x1e>

080041ec <_malloc_usable_size_r>:
 80041ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041f0:	1f18      	subs	r0, r3, #4
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	bfbc      	itt	lt
 80041f6:	580b      	ldrlt	r3, [r1, r0]
 80041f8:	18c0      	addlt	r0, r0, r3
 80041fa:	4770      	bx	lr

080041fc <_init>:
 80041fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041fe:	bf00      	nop
 8004200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004202:	bc08      	pop	{r3}
 8004204:	469e      	mov	lr, r3
 8004206:	4770      	bx	lr

08004208 <_fini>:
 8004208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800420a:	bf00      	nop
 800420c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800420e:	bc08      	pop	{r3}
 8004210:	469e      	mov	lr, r3
 8004212:	4770      	bx	lr
